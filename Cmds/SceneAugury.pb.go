// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: SceneAugury.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AuguryParam int32

const (
	AuguryParam_AUGURYPARAM_INVITE              AuguryParam = 1
	AuguryParam_AUGURYPARAM_INVITE_REPLY        AuguryParam = 2
	AuguryParam_AUGURYPARAM_CHAT                AuguryParam = 3
	AuguryParam_AUGURYPARAM_TITLE               AuguryParam = 4
	AuguryParam_AUGURYPARAM_ANSWER              AuguryParam = 5
	AuguryParam_AUGURYPARAM_QUIT                AuguryParam = 6
	AuguryParam_AUGURYPARAM_ASTROLOGY_DRAW_CARD AuguryParam = 7
	AuguryParam_AUGURYPARAM_ASTROLOGY_INFO      AuguryParam = 8
)

// Enum value maps for AuguryParam.
var (
	AuguryParam_name = map[int32]string{
		1: "AUGURYPARAM_INVITE",
		2: "AUGURYPARAM_INVITE_REPLY",
		3: "AUGURYPARAM_CHAT",
		4: "AUGURYPARAM_TITLE",
		5: "AUGURYPARAM_ANSWER",
		6: "AUGURYPARAM_QUIT",
		7: "AUGURYPARAM_ASTROLOGY_DRAW_CARD",
		8: "AUGURYPARAM_ASTROLOGY_INFO",
	}
	AuguryParam_value = map[string]int32{
		"AUGURYPARAM_INVITE":              1,
		"AUGURYPARAM_INVITE_REPLY":        2,
		"AUGURYPARAM_CHAT":                3,
		"AUGURYPARAM_TITLE":               4,
		"AUGURYPARAM_ANSWER":              5,
		"AUGURYPARAM_QUIT":                6,
		"AUGURYPARAM_ASTROLOGY_DRAW_CARD": 7,
		"AUGURYPARAM_ASTROLOGY_INFO":      8,
	}
)

func (x AuguryParam) Enum() *AuguryParam {
	p := new(AuguryParam)
	*p = x
	return p
}

func (x AuguryParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuguryParam) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneAugury_proto_enumTypes[0].Descriptor()
}

func (AuguryParam) Type() protoreflect.EnumType {
	return &file_SceneAugury_proto_enumTypes[0]
}

func (x AuguryParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AuguryParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AuguryParam(num)
	return nil
}

// Deprecated: Use AuguryParam.Descriptor instead.
func (AuguryParam) EnumDescriptor() ([]byte, []int) {
	return file_SceneAugury_proto_rawDescGZIP(), []int{0}
}

type EAuguryType int32

const (
	EAuguryType_EAUGURYTYPE_LOVE_SEASON EAuguryType = 1
	EAuguryType_EAUGURYTYPE_STAR_GUIDE  EAuguryType = 2
	EAuguryType_EAUGURYTYPE_ADVENTURE   EAuguryType = 3
	EAuguryType_EAUGURYTYPE_VALENTINE   EAuguryType = 4
	EAuguryType_EAUGURYTYPE_ACTIVITY    EAuguryType = 5
)

// Enum value maps for EAuguryType.
var (
	EAuguryType_name = map[int32]string{
		1: "EAUGURYTYPE_LOVE_SEASON",
		2: "EAUGURYTYPE_STAR_GUIDE",
		3: "EAUGURYTYPE_ADVENTURE",
		4: "EAUGURYTYPE_VALENTINE",
		5: "EAUGURYTYPE_ACTIVITY",
	}
	EAuguryType_value = map[string]int32{
		"EAUGURYTYPE_LOVE_SEASON": 1,
		"EAUGURYTYPE_STAR_GUIDE":  2,
		"EAUGURYTYPE_ADVENTURE":   3,
		"EAUGURYTYPE_VALENTINE":   4,
		"EAUGURYTYPE_ACTIVITY":    5,
	}
)

func (x EAuguryType) Enum() *EAuguryType {
	p := new(EAuguryType)
	*p = x
	return p
}

func (x EAuguryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAuguryType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneAugury_proto_enumTypes[1].Descriptor()
}

func (EAuguryType) Type() protoreflect.EnumType {
	return &file_SceneAugury_proto_enumTypes[1]
}

func (x EAuguryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAuguryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAuguryType(num)
	return nil
}

// Deprecated: Use EAuguryType.Descriptor instead.
func (EAuguryType) EnumDescriptor() ([]byte, []int) {
	return file_SceneAugury_proto_rawDescGZIP(), []int{1}
}

type EAstrologyType int32

const (
	EAstrologyType_EASTROLOGYTYPE_CONSTELLATION EAstrologyType = 1
	EAstrologyType_EASTROLOGYTYPE_ACTIVITY      EAstrologyType = 2
)

// Enum value maps for EAstrologyType.
var (
	EAstrologyType_name = map[int32]string{
		1: "EASTROLOGYTYPE_CONSTELLATION",
		2: "EASTROLOGYTYPE_ACTIVITY",
	}
	EAstrologyType_value = map[string]int32{
		"EASTROLOGYTYPE_CONSTELLATION": 1,
		"EASTROLOGYTYPE_ACTIVITY":      2,
	}
)

func (x EAstrologyType) Enum() *EAstrologyType {
	p := new(EAstrologyType)
	*p = x
	return p
}

func (x EAstrologyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAstrologyType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneAugury_proto_enumTypes[2].Descriptor()
}

func (EAstrologyType) Type() protoreflect.EnumType {
	return &file_SceneAugury_proto_enumTypes[2]
}

func (x EAstrologyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAstrologyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAstrologyType(num)
	return nil
}

// Deprecated: Use EAstrologyType.Descriptor instead.
func (EAstrologyType) EnumDescriptor() ([]byte, []int) {
	return file_SceneAugury_proto_rawDescGZIP(), []int{2}
}

type EReplyType int32

const (
	EReplyType_EReplyType_Agree  EReplyType = 1
	EReplyType_EReplyType_Refuse EReplyType = 2
)

// Enum value maps for EReplyType.
var (
	EReplyType_name = map[int32]string{
		1: "EReplyType_Agree",
		2: "EReplyType_Refuse",
	}
	EReplyType_value = map[string]int32{
		"EReplyType_Agree":  1,
		"EReplyType_Refuse": 2,
	}
)

func (x EReplyType) Enum() *EReplyType {
	p := new(EReplyType)
	*p = x
	return p
}

func (x EReplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EReplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneAugury_proto_enumTypes[3].Descriptor()
}

func (EReplyType) Type() protoreflect.EnumType {
	return &file_SceneAugury_proto_enumTypes[3]
}

func (x EReplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EReplyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EReplyType(num)
	return nil
}

// Deprecated: Use EReplyType.Descriptor instead.
func (EReplyType) EnumDescriptor() ([]byte, []int) {
	return file_SceneAugury_proto_rawDescGZIP(), []int{3}
}

type AuguryInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=27" json:"cmd,omitempty"`
	Param       *AuguryParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuguryParam,def=1" json:"param,omitempty"`
	Inviterid   *uint64      `protobuf:"varint,3,opt,name=inviterid" json:"inviterid,omitempty"`
	Invitername *string      `protobuf:"bytes,4,opt,name=invitername" json:"invitername,omitempty"`
	Npcguid     *uint64      `protobuf:"varint,5,opt,name=npcguid" json:"npcguid,omitempty"`
	Type        *EAuguryType `protobuf:"varint,6,opt,name=type,enum=Cmd.EAuguryType" json:"type,omitempty"`
	Isextra     *bool        `protobuf:"varint,7,opt,name=isextra" json:"isextra,omitempty"`
}

// Default values for AuguryInvite fields.
const (
	Default_AuguryInvite_Cmd   = Command_SCENE_USER_AUGURY_PROTOCMD
	Default_AuguryInvite_Param = AuguryParam_AUGURYPARAM_INVITE
)

func (x *AuguryInvite) Reset() {
	*x = AuguryInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneAugury_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuguryInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuguryInvite) ProtoMessage() {}

func (x *AuguryInvite) ProtoReflect() protoreflect.Message {
	mi := &file_SceneAugury_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuguryInvite.ProtoReflect.Descriptor instead.
func (*AuguryInvite) Descriptor() ([]byte, []int) {
	return file_SceneAugury_proto_rawDescGZIP(), []int{0}
}

func (x *AuguryInvite) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AuguryInvite_Cmd
}

func (x *AuguryInvite) GetParam() AuguryParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AuguryInvite_Param
}

func (x *AuguryInvite) GetInviterid() uint64 {
	if x != nil && x.Inviterid != nil {
		return *x.Inviterid
	}
	return 0
}

func (x *AuguryInvite) GetInvitername() string {
	if x != nil && x.Invitername != nil {
		return *x.Invitername
	}
	return ""
}

func (x *AuguryInvite) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return 0
}

func (x *AuguryInvite) GetType() EAuguryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EAuguryType_EAUGURYTYPE_LOVE_SEASON
}

func (x *AuguryInvite) GetIsextra() bool {
	if x != nil && x.Isextra != nil {
		return *x.Isextra
	}
	return false
}

type AuguryInviteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=27" json:"cmd,omitempty"`
	Param      *AuguryParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuguryParam,def=2" json:"param,omitempty"`
	Type       *EReplyType  `protobuf:"varint,3,opt,name=type,enum=Cmd.EReplyType,def=2" json:"type,omitempty"`
	Inviterid  *uint64      `protobuf:"varint,4,opt,name=inviterid" json:"inviterid,omitempty"`
	Npcguid    *uint64      `protobuf:"varint,5,opt,name=npcguid" json:"npcguid,omitempty"`
	Augurytype *EAuguryType `protobuf:"varint,6,opt,name=augurytype,enum=Cmd.EAuguryType" json:"augurytype,omitempty"`
	Isextra    *bool        `protobuf:"varint,7,opt,name=isextra" json:"isextra,omitempty"`
}

// Default values for AuguryInviteReply fields.
const (
	Default_AuguryInviteReply_Cmd   = Command_SCENE_USER_AUGURY_PROTOCMD
	Default_AuguryInviteReply_Param = AuguryParam_AUGURYPARAM_INVITE_REPLY
	Default_AuguryInviteReply_Type  = EReplyType_EReplyType_Refuse
)

func (x *AuguryInviteReply) Reset() {
	*x = AuguryInviteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneAugury_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuguryInviteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuguryInviteReply) ProtoMessage() {}

func (x *AuguryInviteReply) ProtoReflect() protoreflect.Message {
	mi := &file_SceneAugury_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuguryInviteReply.ProtoReflect.Descriptor instead.
func (*AuguryInviteReply) Descriptor() ([]byte, []int) {
	return file_SceneAugury_proto_rawDescGZIP(), []int{1}
}

func (x *AuguryInviteReply) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AuguryInviteReply_Cmd
}

func (x *AuguryInviteReply) GetParam() AuguryParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AuguryInviteReply_Param
}

func (x *AuguryInviteReply) GetType() EReplyType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_AuguryInviteReply_Type
}

func (x *AuguryInviteReply) GetInviterid() uint64 {
	if x != nil && x.Inviterid != nil {
		return *x.Inviterid
	}
	return 0
}

func (x *AuguryInviteReply) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return 0
}

func (x *AuguryInviteReply) GetAugurytype() EAuguryType {
	if x != nil && x.Augurytype != nil {
		return *x.Augurytype
	}
	return EAuguryType_EAUGURYTYPE_LOVE_SEASON
}

func (x *AuguryInviteReply) GetIsextra() bool {
	if x != nil && x.Isextra != nil {
		return *x.Isextra
	}
	return false
}

type AuguryChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=27" json:"cmd,omitempty"`
	Param   *AuguryParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuguryParam,def=3" json:"param,omitempty"`
	Content *string      `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Sender  *string      `protobuf:"bytes,4,opt,name=sender" json:"sender,omitempty"`
}

// Default values for AuguryChat fields.
const (
	Default_AuguryChat_Cmd   = Command_SCENE_USER_AUGURY_PROTOCMD
	Default_AuguryChat_Param = AuguryParam_AUGURYPARAM_CHAT
)

func (x *AuguryChat) Reset() {
	*x = AuguryChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneAugury_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuguryChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuguryChat) ProtoMessage() {}

func (x *AuguryChat) ProtoReflect() protoreflect.Message {
	mi := &file_SceneAugury_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuguryChat.ProtoReflect.Descriptor instead.
func (*AuguryChat) Descriptor() ([]byte, []int) {
	return file_SceneAugury_proto_rawDescGZIP(), []int{2}
}

func (x *AuguryChat) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AuguryChat_Cmd
}

func (x *AuguryChat) GetParam() AuguryParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AuguryChat_Param
}

func (x *AuguryChat) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *AuguryChat) GetSender() string {
	if x != nil && x.Sender != nil {
		return *x.Sender
	}
	return ""
}

type AuguryTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=27" json:"cmd,omitempty"`
	Param      *AuguryParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuguryParam,def=4" json:"param,omitempty"`
	Titleid    *uint32      `protobuf:"varint,3,opt,name=titleid" json:"titleid,omitempty"`
	Type       *EAuguryType `protobuf:"varint,4,opt,name=type,enum=Cmd.EAuguryType" json:"type,omitempty"`
	Subtableid *uint32      `protobuf:"varint,5,opt,name=subtableid" json:"subtableid,omitempty"`
}

// Default values for AuguryTitle fields.
const (
	Default_AuguryTitle_Cmd   = Command_SCENE_USER_AUGURY_PROTOCMD
	Default_AuguryTitle_Param = AuguryParam_AUGURYPARAM_TITLE
)

func (x *AuguryTitle) Reset() {
	*x = AuguryTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneAugury_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuguryTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuguryTitle) ProtoMessage() {}

func (x *AuguryTitle) ProtoReflect() protoreflect.Message {
	mi := &file_SceneAugury_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuguryTitle.ProtoReflect.Descriptor instead.
func (*AuguryTitle) Descriptor() ([]byte, []int) {
	return file_SceneAugury_proto_rawDescGZIP(), []int{3}
}

func (x *AuguryTitle) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AuguryTitle_Cmd
}

func (x *AuguryTitle) GetParam() AuguryParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AuguryTitle_Param
}

func (x *AuguryTitle) GetTitleid() uint32 {
	if x != nil && x.Titleid != nil {
		return *x.Titleid
	}
	return 0
}

func (x *AuguryTitle) GetType() EAuguryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EAuguryType_EAUGURYTYPE_LOVE_SEASON
}

func (x *AuguryTitle) GetSubtableid() uint32 {
	if x != nil && x.Subtableid != nil {
		return *x.Subtableid
	}
	return 0
}

type AuguryAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=27" json:"cmd,omitempty"`
	Param    *AuguryParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuguryParam,def=5" json:"param,omitempty"`
	Titleid  *uint32      `protobuf:"varint,3,opt,name=titleid" json:"titleid,omitempty"`
	Answer   *uint32      `protobuf:"varint,4,opt,name=answer" json:"answer,omitempty"`
	Answerid *uint64      `protobuf:"varint,5,opt,name=answerid" json:"answerid,omitempty"`
}

// Default values for AuguryAnswer fields.
const (
	Default_AuguryAnswer_Cmd   = Command_SCENE_USER_AUGURY_PROTOCMD
	Default_AuguryAnswer_Param = AuguryParam_AUGURYPARAM_ANSWER
)

func (x *AuguryAnswer) Reset() {
	*x = AuguryAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneAugury_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuguryAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuguryAnswer) ProtoMessage() {}

func (x *AuguryAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_SceneAugury_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuguryAnswer.ProtoReflect.Descriptor instead.
func (*AuguryAnswer) Descriptor() ([]byte, []int) {
	return file_SceneAugury_proto_rawDescGZIP(), []int{4}
}

func (x *AuguryAnswer) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AuguryAnswer_Cmd
}

func (x *AuguryAnswer) GetParam() AuguryParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AuguryAnswer_Param
}

func (x *AuguryAnswer) GetTitleid() uint32 {
	if x != nil && x.Titleid != nil {
		return *x.Titleid
	}
	return 0
}

func (x *AuguryAnswer) GetAnswer() uint32 {
	if x != nil && x.Answer != nil {
		return *x.Answer
	}
	return 0
}

func (x *AuguryAnswer) GetAnswerid() uint64 {
	if x != nil && x.Answerid != nil {
		return *x.Answerid
	}
	return 0
}

type AuguryQuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=27" json:"cmd,omitempty"`
	Param *AuguryParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuguryParam,def=6" json:"param,omitempty"`
}

// Default values for AuguryQuit fields.
const (
	Default_AuguryQuit_Cmd   = Command_SCENE_USER_AUGURY_PROTOCMD
	Default_AuguryQuit_Param = AuguryParam_AUGURYPARAM_QUIT
)

func (x *AuguryQuit) Reset() {
	*x = AuguryQuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneAugury_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuguryQuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuguryQuit) ProtoMessage() {}

func (x *AuguryQuit) ProtoReflect() protoreflect.Message {
	mi := &file_SceneAugury_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuguryQuit.ProtoReflect.Descriptor instead.
func (*AuguryQuit) Descriptor() ([]byte, []int) {
	return file_SceneAugury_proto_rawDescGZIP(), []int{5}
}

func (x *AuguryQuit) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AuguryQuit_Cmd
}

func (x *AuguryQuit) GetParam() AuguryParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AuguryQuit_Param
}

type AuguryAstrologyDrawCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=27" json:"cmd,omitempty"`
	Param *AuguryParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.AuguryParam,def=7" json:"param,omitempty"`
	Type  *EAstrologyType `protobuf:"varint,3,opt,name=type,enum=Cmd.EAstrologyType,def=1" json:"type,omitempty"`
	Group *uint32         `protobuf:"varint,4,opt,name=group,def=0" json:"group,omitempty"`
}

// Default values for AuguryAstrologyDrawCard fields.
const (
	Default_AuguryAstrologyDrawCard_Cmd   = Command_SCENE_USER_AUGURY_PROTOCMD
	Default_AuguryAstrologyDrawCard_Param = AuguryParam_AUGURYPARAM_ASTROLOGY_DRAW_CARD
	Default_AuguryAstrologyDrawCard_Type  = EAstrologyType_EASTROLOGYTYPE_CONSTELLATION
	Default_AuguryAstrologyDrawCard_Group = uint32(0)
)

func (x *AuguryAstrologyDrawCard) Reset() {
	*x = AuguryAstrologyDrawCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneAugury_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuguryAstrologyDrawCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuguryAstrologyDrawCard) ProtoMessage() {}

func (x *AuguryAstrologyDrawCard) ProtoReflect() protoreflect.Message {
	mi := &file_SceneAugury_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuguryAstrologyDrawCard.ProtoReflect.Descriptor instead.
func (*AuguryAstrologyDrawCard) Descriptor() ([]byte, []int) {
	return file_SceneAugury_proto_rawDescGZIP(), []int{6}
}

func (x *AuguryAstrologyDrawCard) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AuguryAstrologyDrawCard_Cmd
}

func (x *AuguryAstrologyDrawCard) GetParam() AuguryParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AuguryAstrologyDrawCard_Param
}

func (x *AuguryAstrologyDrawCard) GetType() EAstrologyType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_AuguryAstrologyDrawCard_Type
}

func (x *AuguryAstrologyDrawCard) GetGroup() uint32 {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return Default_AuguryAstrologyDrawCard_Group
}

type AuguryAstrologyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=27" json:"cmd,omitempty"`
	Param  *AuguryParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuguryParam,def=8" json:"param,omitempty"`
	Id     *uint32      `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Buffid *uint32      `protobuf:"varint,4,opt,name=buffid,def=0" json:"buffid,omitempty"`
}

// Default values for AuguryAstrologyInfo fields.
const (
	Default_AuguryAstrologyInfo_Cmd    = Command_SCENE_USER_AUGURY_PROTOCMD
	Default_AuguryAstrologyInfo_Param  = AuguryParam_AUGURYPARAM_ASTROLOGY_INFO
	Default_AuguryAstrologyInfo_Id     = uint32(0)
	Default_AuguryAstrologyInfo_Buffid = uint32(0)
)

func (x *AuguryAstrologyInfo) Reset() {
	*x = AuguryAstrologyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneAugury_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuguryAstrologyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuguryAstrologyInfo) ProtoMessage() {}

func (x *AuguryAstrologyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneAugury_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuguryAstrologyInfo.ProtoReflect.Descriptor instead.
func (*AuguryAstrologyInfo) Descriptor() ([]byte, []int) {
	return file_SceneAugury_proto_rawDescGZIP(), []int{7}
}

func (x *AuguryAstrologyInfo) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AuguryAstrologyInfo_Cmd
}

func (x *AuguryAstrologyInfo) GetParam() AuguryParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AuguryAstrologyInfo_Param
}

func (x *AuguryAstrologyInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_AuguryAstrologyInfo_Id
}

func (x *AuguryAstrologyInfo) GetBuffid() uint32 {
	if x != nil && x.Buffid != nil {
		return *x.Buffid
	}
	return Default_AuguryAstrologyInfo_Buffid
}

var File_SceneAugury_proto protoreflect.FileDescriptor

var file_SceneAugury_proto_rawDesc = []byte{
	0x0a, 0x11, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x41, 0x75, 0x67, 0x75, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x02, 0x0a, 0x0c, 0x41, 0x75, 0x67, 0x75, 0x72, 0x79, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x1a, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x47,
	0x55, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x67, 0x75, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x12, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x75, 0x67,
	0x75, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xcd, 0x02, 0x0a, 0x11, 0x41, 0x75, 0x67, 0x75,
	0x72, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41,
	0x75, 0x67, 0x75, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x41, 0x55, 0x47, 0x55,
	0x52, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x36, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x45, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x61,
	0x75, 0x67, 0x75, 0x72, 0x79, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x75, 0x67, 0x75, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x61, 0x75, 0x67, 0x75, 0x72, 0x79, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xb4, 0x01, 0x0a, 0x0a, 0x41, 0x75, 0x67, 0x75,
	0x72, 0x79, 0x43, 0x68, 0x61, 0x74, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x1a, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x55,
	0x47, 0x55, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x67, 0x75, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x10, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0xe4,
	0x01, 0x0a, 0x0b, 0x41, 0x75, 0x67, 0x75, 0x72, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3a,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x41, 0x75, 0x67, 0x75, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x41, 0x55, 0x47,
	0x55, 0x52, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x75, 0x67, 0x75, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x69, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x0c, 0x41, 0x75, 0x67, 0x75, 0x72, 0x79,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x1a, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x55,
	0x47, 0x55, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x67, 0x75, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x12, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x69, 0x64, 0x22, 0x82, 0x01, 0x0a,
	0x0a, 0x41, 0x75, 0x67, 0x75, 0x72, 0x79, 0x51, 0x75, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x67,
	0x75, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x10, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x49, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x22, 0xfe, 0x01, 0x0a, 0x17, 0x41, 0x75, 0x67, 0x75, 0x72, 0x79, 0x41, 0x73, 0x74, 0x72,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x3a, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41,
	0x75, 0x67, 0x75, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x41, 0x55, 0x47, 0x55,
	0x52, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x4c, 0x4f, 0x47,
	0x59, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x73, 0x74, 0x72, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1c, 0x45, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x4c, 0x4f, 0x47,
	0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0xc3, 0x01, 0x0a, 0x13, 0x41, 0x75, 0x67, 0x75, 0x72, 0x79, 0x41, 0x73, 0x74,
	0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x67, 0x75,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x06, 0x62, 0x75, 0x66, 0x66, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x69, 0x64, 0x2a, 0xe3, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x67,
	0x75, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x55, 0x47, 0x55,
	0x52, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48,
	0x41, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x55, 0x47, 0x55, 0x52, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45,
	0x52, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x51, 0x55, 0x49, 0x54, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x55, 0x47,
	0x55, 0x52, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x4c, 0x4f,
	0x47, 0x59, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x07, 0x12, 0x1e,
	0x0a, 0x1a, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x53,
	0x54, 0x52, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x08, 0x2a, 0x96,
	0x01, 0x0a, 0x0b, 0x45, 0x41, 0x75, 0x67, 0x75, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f,
	0x56, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f,
	0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x41, 0x55, 0x47, 0x55,
	0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x4e, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x56, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x05, 0x2a, 0x4f, 0x0a, 0x0e, 0x45, 0x41, 0x73, 0x74, 0x72,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x41, 0x53,
	0x54, 0x52, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x41, 0x53, 0x54, 0x52, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x02, 0x2a, 0x39, 0x0a, 0x0a, 0x45, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x67, 0x72, 0x65, 0x65, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x73,
	0x65, 0x10, 0x02,
}

var (
	file_SceneAugury_proto_rawDescOnce sync.Once
	file_SceneAugury_proto_rawDescData = file_SceneAugury_proto_rawDesc
)

func file_SceneAugury_proto_rawDescGZIP() []byte {
	file_SceneAugury_proto_rawDescOnce.Do(func() {
		file_SceneAugury_proto_rawDescData = protoimpl.X.CompressGZIP(file_SceneAugury_proto_rawDescData)
	})
	return file_SceneAugury_proto_rawDescData
}

var file_SceneAugury_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_SceneAugury_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_SceneAugury_proto_goTypes = []interface{}{
	(AuguryParam)(0),                // 0: Cmd.AuguryParam
	(EAuguryType)(0),                // 1: Cmd.EAuguryType
	(EAstrologyType)(0),             // 2: Cmd.EAstrologyType
	(EReplyType)(0),                 // 3: Cmd.EReplyType
	(*AuguryInvite)(nil),            // 4: Cmd.AuguryInvite
	(*AuguryInviteReply)(nil),       // 5: Cmd.AuguryInviteReply
	(*AuguryChat)(nil),              // 6: Cmd.AuguryChat
	(*AuguryTitle)(nil),             // 7: Cmd.AuguryTitle
	(*AuguryAnswer)(nil),            // 8: Cmd.AuguryAnswer
	(*AuguryQuit)(nil),              // 9: Cmd.AuguryQuit
	(*AuguryAstrologyDrawCard)(nil), // 10: Cmd.AuguryAstrologyDrawCard
	(*AuguryAstrologyInfo)(nil),     // 11: Cmd.AuguryAstrologyInfo
	(Command)(0),                    // 12: Cmd.Command
}
var file_SceneAugury_proto_depIdxs = []int32{
	12, // 0: Cmd.AuguryInvite.cmd:type_name -> Cmd.Command
	0,  // 1: Cmd.AuguryInvite.param:type_name -> Cmd.AuguryParam
	1,  // 2: Cmd.AuguryInvite.type:type_name -> Cmd.EAuguryType
	12, // 3: Cmd.AuguryInviteReply.cmd:type_name -> Cmd.Command
	0,  // 4: Cmd.AuguryInviteReply.param:type_name -> Cmd.AuguryParam
	3,  // 5: Cmd.AuguryInviteReply.type:type_name -> Cmd.EReplyType
	1,  // 6: Cmd.AuguryInviteReply.augurytype:type_name -> Cmd.EAuguryType
	12, // 7: Cmd.AuguryChat.cmd:type_name -> Cmd.Command
	0,  // 8: Cmd.AuguryChat.param:type_name -> Cmd.AuguryParam
	12, // 9: Cmd.AuguryTitle.cmd:type_name -> Cmd.Command
	0,  // 10: Cmd.AuguryTitle.param:type_name -> Cmd.AuguryParam
	1,  // 11: Cmd.AuguryTitle.type:type_name -> Cmd.EAuguryType
	12, // 12: Cmd.AuguryAnswer.cmd:type_name -> Cmd.Command
	0,  // 13: Cmd.AuguryAnswer.param:type_name -> Cmd.AuguryParam
	12, // 14: Cmd.AuguryQuit.cmd:type_name -> Cmd.Command
	0,  // 15: Cmd.AuguryQuit.param:type_name -> Cmd.AuguryParam
	12, // 16: Cmd.AuguryAstrologyDrawCard.cmd:type_name -> Cmd.Command
	0,  // 17: Cmd.AuguryAstrologyDrawCard.param:type_name -> Cmd.AuguryParam
	2,  // 18: Cmd.AuguryAstrologyDrawCard.type:type_name -> Cmd.EAstrologyType
	12, // 19: Cmd.AuguryAstrologyInfo.cmd:type_name -> Cmd.Command
	0,  // 20: Cmd.AuguryAstrologyInfo.param:type_name -> Cmd.AuguryParam
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_SceneAugury_proto_init() }
func file_SceneAugury_proto_init() {
	if File_SceneAugury_proto != nil {
		return
	}
	file_xCmd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SceneAugury_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuguryInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneAugury_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuguryInviteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneAugury_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuguryChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneAugury_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuguryTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneAugury_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuguryAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneAugury_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuguryQuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneAugury_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuguryAstrologyDrawCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneAugury_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuguryAstrologyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SceneAugury_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SceneAugury_proto_goTypes,
		DependencyIndexes: file_SceneAugury_proto_depIdxs,
		EnumInfos:         file_SceneAugury_proto_enumTypes,
		MessageInfos:      file_SceneAugury_proto_msgTypes,
	}.Build()
	File_SceneAugury_proto = out.File
	file_SceneAugury_proto_rawDesc = nil
	file_SceneAugury_proto_goTypes = nil
	file_SceneAugury_proto_depIdxs = nil
}
