// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: TeamGroupRaid.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TeamGroupaidParam int32

const (
	TeamGroupaidParam_TEAMGROUPPARAM_INVITE_RAID          TeamGroupaidParam = 1
	TeamGroupaidParam_TEAMGROUPPARAM_REPLY_RAID           TeamGroupaidParam = 2
	TeamGroupaidParam_TEAMGROUPPARAM_ENTER_RAID           TeamGroupaidParam = 3
	TeamGroupaidParam_TEAMGROUPPARAM_JOIN_RAID            TeamGroupaidParam = 4
	TeamGroupaidParam_TEAMGROUPPARAM_QUERY_RAID_STATUS    TeamGroupaidParam = 5
	TeamGroupaidParam_TEAMGROUPPARAM_ENTER_NEXT_RAID      TeamGroupaidParam = 6
	TeamGroupaidParam_TEAMGROUPPARAM_INVITE_RAID_CONFIRM  TeamGroupaidParam = 7
	TeamGroupaidParam_TEAMGROUPPARAM_REPLY_RAID_CONFIRM   TeamGroupaidParam = 8
	TeamGroupaidParam_TEAMGROUPPARAM_QUERY_USER_KILLINFO  TeamGroupaidParam = 9
	TeamGroupaidParam_TEAMGROUPPARAM_QUERY_GUILD_KILLINFO TeamGroupaidParam = 10
	TeamGroupaidParam_TEAMGROUPPARAM_QUERY_USER_SHOWDATA  TeamGroupaidParam = 11
	TeamGroupaidParam_TEAMGROUPPARAM_CREATE_RAID_TOSCENE  TeamGroupaidParam = 20
	TeamGroupaidParam_TEAMGROUPPARAM_JOIN_RAID_TOSCENE    TeamGroupaidParam = 21
)

// Enum value maps for TeamGroupaidParam.
var (
	TeamGroupaidParam_name = map[int32]string{
		1:  "TEAMGROUPPARAM_INVITE_RAID",
		2:  "TEAMGROUPPARAM_REPLY_RAID",
		3:  "TEAMGROUPPARAM_ENTER_RAID",
		4:  "TEAMGROUPPARAM_JOIN_RAID",
		5:  "TEAMGROUPPARAM_QUERY_RAID_STATUS",
		6:  "TEAMGROUPPARAM_ENTER_NEXT_RAID",
		7:  "TEAMGROUPPARAM_INVITE_RAID_CONFIRM",
		8:  "TEAMGROUPPARAM_REPLY_RAID_CONFIRM",
		9:  "TEAMGROUPPARAM_QUERY_USER_KILLINFO",
		10: "TEAMGROUPPARAM_QUERY_GUILD_KILLINFO",
		11: "TEAMGROUPPARAM_QUERY_USER_SHOWDATA",
		20: "TEAMGROUPPARAM_CREATE_RAID_TOSCENE",
		21: "TEAMGROUPPARAM_JOIN_RAID_TOSCENE",
	}
	TeamGroupaidParam_value = map[string]int32{
		"TEAMGROUPPARAM_INVITE_RAID":          1,
		"TEAMGROUPPARAM_REPLY_RAID":           2,
		"TEAMGROUPPARAM_ENTER_RAID":           3,
		"TEAMGROUPPARAM_JOIN_RAID":            4,
		"TEAMGROUPPARAM_QUERY_RAID_STATUS":    5,
		"TEAMGROUPPARAM_ENTER_NEXT_RAID":      6,
		"TEAMGROUPPARAM_INVITE_RAID_CONFIRM":  7,
		"TEAMGROUPPARAM_REPLY_RAID_CONFIRM":   8,
		"TEAMGROUPPARAM_QUERY_USER_KILLINFO":  9,
		"TEAMGROUPPARAM_QUERY_GUILD_KILLINFO": 10,
		"TEAMGROUPPARAM_QUERY_USER_SHOWDATA":  11,
		"TEAMGROUPPARAM_CREATE_RAID_TOSCENE":  20,
		"TEAMGROUPPARAM_JOIN_RAID_TOSCENE":    21,
	}
)

func (x TeamGroupaidParam) Enum() *TeamGroupaidParam {
	p := new(TeamGroupaidParam)
	*p = x
	return p
}

func (x TeamGroupaidParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamGroupaidParam) Descriptor() protoreflect.EnumDescriptor {
	return file_TeamGroupRaid_proto_enumTypes[0].Descriptor()
}

func (TeamGroupaidParam) Type() protoreflect.EnumType {
	return &file_TeamGroupRaid_proto_enumTypes[0]
}

func (x TeamGroupaidParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TeamGroupaidParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TeamGroupaidParam(num)
	return nil
}

// Deprecated: Use TeamGroupaidParam.Descriptor instead.
func (TeamGroupaidParam) EnumDescriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{0}
}

type EGroupRaidKillType int32

const (
	EGroupRaidKillType_EGROUPRAIDKILL_MIN    EGroupRaidKillType = 0
	EGroupRaidKillType_EGROUPRAIDKILL_NORMAL EGroupRaidKillType = 1
	EGroupRaidKillType_EGROUPRAIDKILL_GUILD  EGroupRaidKillType = 2
	EGroupRaidKillType_EGROUPRAIDKILL_MAX    EGroupRaidKillType = 3
)

// Enum value maps for EGroupRaidKillType.
var (
	EGroupRaidKillType_name = map[int32]string{
		0: "EGROUPRAIDKILL_MIN",
		1: "EGROUPRAIDKILL_NORMAL",
		2: "EGROUPRAIDKILL_GUILD",
		3: "EGROUPRAIDKILL_MAX",
	}
	EGroupRaidKillType_value = map[string]int32{
		"EGROUPRAIDKILL_MIN":    0,
		"EGROUPRAIDKILL_NORMAL": 1,
		"EGROUPRAIDKILL_GUILD":  2,
		"EGROUPRAIDKILL_MAX":    3,
	}
)

func (x EGroupRaidKillType) Enum() *EGroupRaidKillType {
	p := new(EGroupRaidKillType)
	*p = x
	return p
}

func (x EGroupRaidKillType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGroupRaidKillType) Descriptor() protoreflect.EnumDescriptor {
	return file_TeamGroupRaid_proto_enumTypes[1].Descriptor()
}

func (EGroupRaidKillType) Type() protoreflect.EnumType {
	return &file_TeamGroupRaid_proto_enumTypes[1]
}

func (x EGroupRaidKillType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGroupRaidKillType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGroupRaidKillType(num)
	return nil
}

// Deprecated: Use EGroupRaidKillType.Descriptor instead.
func (EGroupRaidKillType) EnumDescriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{1}
}

type EUpdateGroupKillAction int32

const (
	EUpdateGroupKillAction_EUPDATEGROUPKILL_MIN               EUpdateGroupKillAction = 0
	EUpdateGroupKillAction_EUPDATEGROUPKILL_SCENE_TO_SESSION  EUpdateGroupKillAction = 1
	EUpdateGroupKillAction_EUPDATEGROUPKILL_SESSION_TO_GLOBAL EUpdateGroupKillAction = 2
	EUpdateGroupKillAction_EUPDATEGROUPKILL_TO_SCENE          EUpdateGroupKillAction = 3
)

// Enum value maps for EUpdateGroupKillAction.
var (
	EUpdateGroupKillAction_name = map[int32]string{
		0: "EUPDATEGROUPKILL_MIN",
		1: "EUPDATEGROUPKILL_SCENE_TO_SESSION",
		2: "EUPDATEGROUPKILL_SESSION_TO_GLOBAL",
		3: "EUPDATEGROUPKILL_TO_SCENE",
	}
	EUpdateGroupKillAction_value = map[string]int32{
		"EUPDATEGROUPKILL_MIN":               0,
		"EUPDATEGROUPKILL_SCENE_TO_SESSION":  1,
		"EUPDATEGROUPKILL_SESSION_TO_GLOBAL": 2,
		"EUPDATEGROUPKILL_TO_SCENE":          3,
	}
)

func (x EUpdateGroupKillAction) Enum() *EUpdateGroupKillAction {
	p := new(EUpdateGroupKillAction)
	*p = x
	return p
}

func (x EUpdateGroupKillAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUpdateGroupKillAction) Descriptor() protoreflect.EnumDescriptor {
	return file_TeamGroupRaid_proto_enumTypes[2].Descriptor()
}

func (EUpdateGroupKillAction) Type() protoreflect.EnumType {
	return &file_TeamGroupRaid_proto_enumTypes[2]
}

func (x EUpdateGroupKillAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUpdateGroupKillAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUpdateGroupKillAction(num)
	return nil
}

// Deprecated: Use EUpdateGroupKillAction.Descriptor instead.
func (EUpdateGroupKillAction) EnumDescriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{2}
}

type InviteGroupJoinRaidTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=69" json:"cmd,omitempty"`
	Param      *TeamGroupaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamGroupaidParam,def=1" json:"param,omitempty"`
	Iscancel   *bool              `protobuf:"varint,3,opt,name=iscancel,def=0" json:"iscancel,omitempty"`
	Difficulty *uint32            `protobuf:"varint,4,opt,name=difficulty,def=1" json:"difficulty,omitempty"`
	Entranceid *uint32            `protobuf:"varint,5,opt,name=entranceid" json:"entranceid,omitempty"`
	Lefttime   *uint32            `protobuf:"varint,6,opt,name=lefttime" json:"lefttime,omitempty"`
}

// Default values for InviteGroupJoinRaidTeamCmd fields.
const (
	Default_InviteGroupJoinRaidTeamCmd_Cmd        = Command_TEAM_GROUP_RAID_PROTOCMD
	Default_InviteGroupJoinRaidTeamCmd_Param      = TeamGroupaidParam_TEAMGROUPPARAM_INVITE_RAID
	Default_InviteGroupJoinRaidTeamCmd_Iscancel   = bool(false)
	Default_InviteGroupJoinRaidTeamCmd_Difficulty = uint32(1)
)

func (x *InviteGroupJoinRaidTeamCmd) Reset() {
	*x = InviteGroupJoinRaidTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteGroupJoinRaidTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteGroupJoinRaidTeamCmd) ProtoMessage() {}

func (x *InviteGroupJoinRaidTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteGroupJoinRaidTeamCmd.ProtoReflect.Descriptor instead.
func (*InviteGroupJoinRaidTeamCmd) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{0}
}

func (x *InviteGroupJoinRaidTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InviteGroupJoinRaidTeamCmd_Cmd
}

func (x *InviteGroupJoinRaidTeamCmd) GetParam() TeamGroupaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InviteGroupJoinRaidTeamCmd_Param
}

func (x *InviteGroupJoinRaidTeamCmd) GetIscancel() bool {
	if x != nil && x.Iscancel != nil {
		return *x.Iscancel
	}
	return Default_InviteGroupJoinRaidTeamCmd_Iscancel
}

func (x *InviteGroupJoinRaidTeamCmd) GetDifficulty() uint32 {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return Default_InviteGroupJoinRaidTeamCmd_Difficulty
}

func (x *InviteGroupJoinRaidTeamCmd) GetEntranceid() uint32 {
	if x != nil && x.Entranceid != nil {
		return *x.Entranceid
	}
	return 0
}

func (x *InviteGroupJoinRaidTeamCmd) GetLefttime() uint32 {
	if x != nil && x.Lefttime != nil {
		return *x.Lefttime
	}
	return 0
}

type ReplyGroupJoinRaidTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=69" json:"cmd,omitempty"`
	Param  *TeamGroupaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamGroupaidParam,def=2" json:"param,omitempty"`
	Reply  *bool              `protobuf:"varint,3,opt,name=reply,def=0" json:"reply,omitempty"`
	Charid *uint64            `protobuf:"varint,4,opt,name=charid,def=0" json:"charid,omitempty"`
}

// Default values for ReplyGroupJoinRaidTeamCmd fields.
const (
	Default_ReplyGroupJoinRaidTeamCmd_Cmd    = Command_TEAM_GROUP_RAID_PROTOCMD
	Default_ReplyGroupJoinRaidTeamCmd_Param  = TeamGroupaidParam_TEAMGROUPPARAM_REPLY_RAID
	Default_ReplyGroupJoinRaidTeamCmd_Reply  = bool(false)
	Default_ReplyGroupJoinRaidTeamCmd_Charid = uint64(0)
)

func (x *ReplyGroupJoinRaidTeamCmd) Reset() {
	*x = ReplyGroupJoinRaidTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyGroupJoinRaidTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyGroupJoinRaidTeamCmd) ProtoMessage() {}

func (x *ReplyGroupJoinRaidTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyGroupJoinRaidTeamCmd.ProtoReflect.Descriptor instead.
func (*ReplyGroupJoinRaidTeamCmd) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{1}
}

func (x *ReplyGroupJoinRaidTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReplyGroupJoinRaidTeamCmd_Cmd
}

func (x *ReplyGroupJoinRaidTeamCmd) GetParam() TeamGroupaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReplyGroupJoinRaidTeamCmd_Param
}

func (x *ReplyGroupJoinRaidTeamCmd) GetReply() bool {
	if x != nil && x.Reply != nil {
		return *x.Reply
	}
	return Default_ReplyGroupJoinRaidTeamCmd_Reply
}

func (x *ReplyGroupJoinRaidTeamCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_ReplyGroupJoinRaidTeamCmd_Charid
}

type OpenGroupRaidTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=69" json:"cmd,omitempty"`
	Param *TeamGroupaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamGroupaidParam,def=3" json:"param,omitempty"`
}

// Default values for OpenGroupRaidTeamCmd fields.
const (
	Default_OpenGroupRaidTeamCmd_Cmd   = Command_TEAM_GROUP_RAID_PROTOCMD
	Default_OpenGroupRaidTeamCmd_Param = TeamGroupaidParam_TEAMGROUPPARAM_ENTER_RAID
)

func (x *OpenGroupRaidTeamCmd) Reset() {
	*x = OpenGroupRaidTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenGroupRaidTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenGroupRaidTeamCmd) ProtoMessage() {}

func (x *OpenGroupRaidTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenGroupRaidTeamCmd.ProtoReflect.Descriptor instead.
func (*OpenGroupRaidTeamCmd) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{2}
}

func (x *OpenGroupRaidTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_OpenGroupRaidTeamCmd_Cmd
}

func (x *OpenGroupRaidTeamCmd) GetParam() TeamGroupaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_OpenGroupRaidTeamCmd_Param
}

type JoinGroupRaidTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=69" json:"cmd,omitempty"`
	Param      *TeamGroupaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamGroupaidParam,def=4" json:"param,omitempty"`
	Difficulty *uint32            `protobuf:"varint,3,opt,name=difficulty" json:"difficulty,omitempty"`
}

// Default values for JoinGroupRaidTeamCmd fields.
const (
	Default_JoinGroupRaidTeamCmd_Cmd   = Command_TEAM_GROUP_RAID_PROTOCMD
	Default_JoinGroupRaidTeamCmd_Param = TeamGroupaidParam_TEAMGROUPPARAM_JOIN_RAID
)

func (x *JoinGroupRaidTeamCmd) Reset() {
	*x = JoinGroupRaidTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGroupRaidTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGroupRaidTeamCmd) ProtoMessage() {}

func (x *JoinGroupRaidTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGroupRaidTeamCmd.ProtoReflect.Descriptor instead.
func (*JoinGroupRaidTeamCmd) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{3}
}

func (x *JoinGroupRaidTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_JoinGroupRaidTeamCmd_Cmd
}

func (x *JoinGroupRaidTeamCmd) GetParam() TeamGroupaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_JoinGroupRaidTeamCmd_Param
}

func (x *JoinGroupRaidTeamCmd) GetDifficulty() uint32 {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return 0
}

type QueryGroupRaidStatusCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=69" json:"cmd,omitempty"`
	Param   *TeamGroupaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamGroupaidParam,def=5" json:"param,omitempty"`
	Open    *bool              `protobuf:"varint,3,opt,name=open,def=0" json:"open,omitempty"`
	Canjoin *bool              `protobuf:"varint,4,opt,name=canjoin,def=0" json:"canjoin,omitempty"`
}

// Default values for QueryGroupRaidStatusCmd fields.
const (
	Default_QueryGroupRaidStatusCmd_Cmd     = Command_TEAM_GROUP_RAID_PROTOCMD
	Default_QueryGroupRaidStatusCmd_Param   = TeamGroupaidParam_TEAMGROUPPARAM_QUERY_RAID_STATUS
	Default_QueryGroupRaidStatusCmd_Open    = bool(false)
	Default_QueryGroupRaidStatusCmd_Canjoin = bool(false)
)

func (x *QueryGroupRaidStatusCmd) Reset() {
	*x = QueryGroupRaidStatusCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGroupRaidStatusCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGroupRaidStatusCmd) ProtoMessage() {}

func (x *QueryGroupRaidStatusCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGroupRaidStatusCmd.ProtoReflect.Descriptor instead.
func (*QueryGroupRaidStatusCmd) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{4}
}

func (x *QueryGroupRaidStatusCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryGroupRaidStatusCmd_Cmd
}

func (x *QueryGroupRaidStatusCmd) GetParam() TeamGroupaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryGroupRaidStatusCmd_Param
}

func (x *QueryGroupRaidStatusCmd) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return Default_QueryGroupRaidStatusCmd_Open
}

func (x *QueryGroupRaidStatusCmd) GetCanjoin() bool {
	if x != nil && x.Canjoin != nil {
		return *x.Canjoin
	}
	return Default_QueryGroupRaidStatusCmd_Canjoin
}

type CreateGroupRaidTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=69" json:"cmd,omitempty"`
	Param      *TeamGroupaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamGroupaidParam,def=20" json:"param,omitempty"`
	Difficulty *uint32            `protobuf:"varint,3,opt,name=difficulty,def=0" json:"difficulty,omitempty"`
	Zoneid     *uint32            `protobuf:"varint,4,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Raidid     *uint32            `protobuf:"varint,5,opt,name=raidid,def=0" json:"raidid,omitempty"`
}

// Default values for CreateGroupRaidTeamCmd fields.
const (
	Default_CreateGroupRaidTeamCmd_Cmd        = Command_TEAM_GROUP_RAID_PROTOCMD
	Default_CreateGroupRaidTeamCmd_Param      = TeamGroupaidParam_TEAMGROUPPARAM_CREATE_RAID_TOSCENE
	Default_CreateGroupRaidTeamCmd_Difficulty = uint32(0)
	Default_CreateGroupRaidTeamCmd_Zoneid     = uint32(0)
	Default_CreateGroupRaidTeamCmd_Raidid     = uint32(0)
)

func (x *CreateGroupRaidTeamCmd) Reset() {
	*x = CreateGroupRaidTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupRaidTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupRaidTeamCmd) ProtoMessage() {}

func (x *CreateGroupRaidTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupRaidTeamCmd.ProtoReflect.Descriptor instead.
func (*CreateGroupRaidTeamCmd) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{5}
}

func (x *CreateGroupRaidTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CreateGroupRaidTeamCmd_Cmd
}

func (x *CreateGroupRaidTeamCmd) GetParam() TeamGroupaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CreateGroupRaidTeamCmd_Param
}

func (x *CreateGroupRaidTeamCmd) GetDifficulty() uint32 {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return Default_CreateGroupRaidTeamCmd_Difficulty
}

func (x *CreateGroupRaidTeamCmd) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_CreateGroupRaidTeamCmd_Zoneid
}

func (x *CreateGroupRaidTeamCmd) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return Default_CreateGroupRaidTeamCmd_Raidid
}

type GoToGroupRaidTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=69" json:"cmd,omitempty"`
	Param  *TeamGroupaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamGroupaidParam,def=21" json:"param,omitempty"`
	Zoneid *uint32            `protobuf:"varint,3,req,name=zoneid" json:"zoneid,omitempty"`
	Raidid *uint32            `protobuf:"varint,4,req,name=raidid" json:"raidid,omitempty"`
}

// Default values for GoToGroupRaidTeamCmd fields.
const (
	Default_GoToGroupRaidTeamCmd_Cmd   = Command_TEAM_GROUP_RAID_PROTOCMD
	Default_GoToGroupRaidTeamCmd_Param = TeamGroupaidParam_TEAMGROUPPARAM_JOIN_RAID_TOSCENE
)

func (x *GoToGroupRaidTeamCmd) Reset() {
	*x = GoToGroupRaidTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoToGroupRaidTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoToGroupRaidTeamCmd) ProtoMessage() {}

func (x *GoToGroupRaidTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoToGroupRaidTeamCmd.ProtoReflect.Descriptor instead.
func (*GoToGroupRaidTeamCmd) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{6}
}

func (x *GoToGroupRaidTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GoToGroupRaidTeamCmd_Cmd
}

func (x *GoToGroupRaidTeamCmd) GetParam() TeamGroupaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GoToGroupRaidTeamCmd_Param
}

func (x *GoToGroupRaidTeamCmd) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return 0
}

func (x *GoToGroupRaidTeamCmd) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return 0
}

type EnterNextRaidGroupCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=69" json:"cmd,omitempty"`
	Param *TeamGroupaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamGroupaidParam,def=6" json:"param,omitempty"`
}

// Default values for EnterNextRaidGroupCmd fields.
const (
	Default_EnterNextRaidGroupCmd_Cmd   = Command_TEAM_GROUP_RAID_PROTOCMD
	Default_EnterNextRaidGroupCmd_Param = TeamGroupaidParam_TEAMGROUPPARAM_ENTER_NEXT_RAID
)

func (x *EnterNextRaidGroupCmd) Reset() {
	*x = EnterNextRaidGroupCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterNextRaidGroupCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterNextRaidGroupCmd) ProtoMessage() {}

func (x *EnterNextRaidGroupCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterNextRaidGroupCmd.ProtoReflect.Descriptor instead.
func (*EnterNextRaidGroupCmd) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{7}
}

func (x *EnterNextRaidGroupCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnterNextRaidGroupCmd_Cmd
}

func (x *EnterNextRaidGroupCmd) GetParam() TeamGroupaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnterNextRaidGroupCmd_Param
}

type InviteConfirmRaidTeamGroupCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=69" json:"cmd,omitempty"`
	Param  *TeamGroupaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamGroupaidParam,def=7" json:"param,omitempty"`
	Cancel *bool              `protobuf:"varint,3,opt,name=cancel,def=0" json:"cancel,omitempty"`
}

// Default values for InviteConfirmRaidTeamGroupCmd fields.
const (
	Default_InviteConfirmRaidTeamGroupCmd_Cmd    = Command_TEAM_GROUP_RAID_PROTOCMD
	Default_InviteConfirmRaidTeamGroupCmd_Param  = TeamGroupaidParam_TEAMGROUPPARAM_INVITE_RAID_CONFIRM
	Default_InviteConfirmRaidTeamGroupCmd_Cancel = bool(false)
)

func (x *InviteConfirmRaidTeamGroupCmd) Reset() {
	*x = InviteConfirmRaidTeamGroupCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteConfirmRaidTeamGroupCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteConfirmRaidTeamGroupCmd) ProtoMessage() {}

func (x *InviteConfirmRaidTeamGroupCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteConfirmRaidTeamGroupCmd.ProtoReflect.Descriptor instead.
func (*InviteConfirmRaidTeamGroupCmd) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{8}
}

func (x *InviteConfirmRaidTeamGroupCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InviteConfirmRaidTeamGroupCmd_Cmd
}

func (x *InviteConfirmRaidTeamGroupCmd) GetParam() TeamGroupaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InviteConfirmRaidTeamGroupCmd_Param
}

func (x *InviteConfirmRaidTeamGroupCmd) GetCancel() bool {
	if x != nil && x.Cancel != nil {
		return *x.Cancel
	}
	return Default_InviteConfirmRaidTeamGroupCmd_Cancel
}

type ReplyConfirmRaidTeamGroupCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=69" json:"cmd,omitempty"`
	Param  *TeamGroupaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamGroupaidParam,def=8" json:"param,omitempty"`
	Reply  *bool              `protobuf:"varint,3,opt,name=reply,def=0" json:"reply,omitempty"`
	Charid *uint64            `protobuf:"varint,4,opt,name=charid,def=0" json:"charid,omitempty"`
}

// Default values for ReplyConfirmRaidTeamGroupCmd fields.
const (
	Default_ReplyConfirmRaidTeamGroupCmd_Cmd    = Command_TEAM_GROUP_RAID_PROTOCMD
	Default_ReplyConfirmRaidTeamGroupCmd_Param  = TeamGroupaidParam_TEAMGROUPPARAM_REPLY_RAID_CONFIRM
	Default_ReplyConfirmRaidTeamGroupCmd_Reply  = bool(false)
	Default_ReplyConfirmRaidTeamGroupCmd_Charid = uint64(0)
)

func (x *ReplyConfirmRaidTeamGroupCmd) Reset() {
	*x = ReplyConfirmRaidTeamGroupCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyConfirmRaidTeamGroupCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyConfirmRaidTeamGroupCmd) ProtoMessage() {}

func (x *ReplyConfirmRaidTeamGroupCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyConfirmRaidTeamGroupCmd.ProtoReflect.Descriptor instead.
func (*ReplyConfirmRaidTeamGroupCmd) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{9}
}

func (x *ReplyConfirmRaidTeamGroupCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReplyConfirmRaidTeamGroupCmd_Cmd
}

func (x *ReplyConfirmRaidTeamGroupCmd) GetParam() TeamGroupaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReplyConfirmRaidTeamGroupCmd_Param
}

func (x *ReplyConfirmRaidTeamGroupCmd) GetReply() bool {
	if x != nil && x.Reply != nil {
		return *x.Reply
	}
	return Default_ReplyConfirmRaidTeamGroupCmd_Reply
}

func (x *ReplyConfirmRaidTeamGroupCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_ReplyConfirmRaidTeamGroupCmd_Charid
}

type GroupRaidKillUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid     *uint64           `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Profession *EProfession      `protobuf:"varint,2,opt,name=profession,enum=Cmd.EProfession,def=0" json:"profession,omitempty"`
	Level      *uint32           `protobuf:"varint,3,opt,name=level,def=0" json:"level,omitempty"`
	Name       *string           `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Portrait   *UserPortraitData `protobuf:"bytes,5,opt,name=portrait" json:"portrait,omitempty"`
	Guildid    *uint64           `protobuf:"varint,6,opt,name=guildid,def=0" json:"guildid,omitempty"`
	Guildname  *string           `protobuf:"bytes,7,opt,name=guildname" json:"guildname,omitempty"`
}

// Default values for GroupRaidKillUserInfo fields.
const (
	Default_GroupRaidKillUserInfo_Charid     = uint64(0)
	Default_GroupRaidKillUserInfo_Profession = EProfession_EPROFESSION_MIN
	Default_GroupRaidKillUserInfo_Level      = uint32(0)
	Default_GroupRaidKillUserInfo_Guildid    = uint64(0)
)

func (x *GroupRaidKillUserInfo) Reset() {
	*x = GroupRaidKillUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRaidKillUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRaidKillUserInfo) ProtoMessage() {}

func (x *GroupRaidKillUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRaidKillUserInfo.ProtoReflect.Descriptor instead.
func (*GroupRaidKillUserInfo) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{10}
}

func (x *GroupRaidKillUserInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_GroupRaidKillUserInfo_Charid
}

func (x *GroupRaidKillUserInfo) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return Default_GroupRaidKillUserInfo_Profession
}

func (x *GroupRaidKillUserInfo) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return Default_GroupRaidKillUserInfo_Level
}

func (x *GroupRaidKillUserInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GroupRaidKillUserInfo) GetPortrait() *UserPortraitData {
	if x != nil {
		return x.Portrait
	}
	return nil
}

func (x *GroupRaidKillUserInfo) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return Default_GroupRaidKillUserInfo_Guildid
}

func (x *GroupRaidKillUserInfo) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

type GroupRaidKillGuildInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guildid       *uint64 `protobuf:"varint,1,opt,name=guildid,def=0" json:"guildid,omitempty"`
	Guildname     *string `protobuf:"bytes,2,opt,name=guildname" json:"guildname,omitempty"`
	Guildportrait *string `protobuf:"bytes,3,opt,name=guildportrait" json:"guildportrait,omitempty"`
	Rank          *uint32 `protobuf:"varint,4,opt,name=rank,def=0" json:"rank,omitempty"`
	Time          *uint32 `protobuf:"varint,5,opt,name=time,def=0" json:"time,omitempty"`
}

// Default values for GroupRaidKillGuildInfo fields.
const (
	Default_GroupRaidKillGuildInfo_Guildid = uint64(0)
	Default_GroupRaidKillGuildInfo_Rank    = uint32(0)
	Default_GroupRaidKillGuildInfo_Time    = uint32(0)
)

func (x *GroupRaidKillGuildInfo) Reset() {
	*x = GroupRaidKillGuildInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRaidKillGuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRaidKillGuildInfo) ProtoMessage() {}

func (x *GroupRaidKillGuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRaidKillGuildInfo.ProtoReflect.Descriptor instead.
func (*GroupRaidKillGuildInfo) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{11}
}

func (x *GroupRaidKillGuildInfo) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return Default_GroupRaidKillGuildInfo_Guildid
}

func (x *GroupRaidKillGuildInfo) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

func (x *GroupRaidKillGuildInfo) GetGuildportrait() string {
	if x != nil && x.Guildportrait != nil {
		return *x.Guildportrait
	}
	return ""
}

func (x *GroupRaidKillGuildInfo) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return Default_GroupRaidKillGuildInfo_Rank
}

func (x *GroupRaidKillGuildInfo) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_GroupRaidKillGuildInfo_Time
}

type GroupRaidKillInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raid   *uint64                   `protobuf:"varint,1,opt,name=raid,def=0" json:"raid,omitempty"`
	Time   *uint32                   `protobuf:"varint,2,opt,name=time,def=0" json:"time,omitempty"`
	Users  []*GroupRaidKillUserInfo  `protobuf:"bytes,3,rep,name=users" json:"users,omitempty"`
	Guilds []*GroupRaidKillGuildInfo `protobuf:"bytes,4,rep,name=guilds" json:"guilds,omitempty"`
}

// Default values for GroupRaidKillInfo fields.
const (
	Default_GroupRaidKillInfo_Raid = uint64(0)
	Default_GroupRaidKillInfo_Time = uint32(0)
)

func (x *GroupRaidKillInfo) Reset() {
	*x = GroupRaidKillInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRaidKillInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRaidKillInfo) ProtoMessage() {}

func (x *GroupRaidKillInfo) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRaidKillInfo.ProtoReflect.Descriptor instead.
func (*GroupRaidKillInfo) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{12}
}

func (x *GroupRaidKillInfo) GetRaid() uint64 {
	if x != nil && x.Raid != nil {
		return *x.Raid
	}
	return Default_GroupRaidKillInfo_Raid
}

func (x *GroupRaidKillInfo) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_GroupRaidKillInfo_Time
}

func (x *GroupRaidKillInfo) GetUsers() []*GroupRaidKillUserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GroupRaidKillInfo) GetGuilds() []*GroupRaidKillGuildInfo {
	if x != nil {
		return x.Guilds
	}
	return nil
}

type QueryGroupRaidKillUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=69" json:"cmd,omitempty"`
	Param    *TeamGroupaidParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamGroupaidParam,def=9" json:"param,omitempty"`
	RaidKeys []uint64             `protobuf:"varint,3,rep,name=raid_keys,json=raidKeys" json:"raid_keys,omitempty"`
	Infos    []*GroupRaidKillInfo `protobuf:"bytes,4,rep,name=infos" json:"infos,omitempty"`
}

// Default values for QueryGroupRaidKillUserInfo fields.
const (
	Default_QueryGroupRaidKillUserInfo_Cmd   = Command_TEAM_GROUP_RAID_PROTOCMD
	Default_QueryGroupRaidKillUserInfo_Param = TeamGroupaidParam_TEAMGROUPPARAM_QUERY_USER_KILLINFO
)

func (x *QueryGroupRaidKillUserInfo) Reset() {
	*x = QueryGroupRaidKillUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGroupRaidKillUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGroupRaidKillUserInfo) ProtoMessage() {}

func (x *QueryGroupRaidKillUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGroupRaidKillUserInfo.ProtoReflect.Descriptor instead.
func (*QueryGroupRaidKillUserInfo) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{13}
}

func (x *QueryGroupRaidKillUserInfo) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryGroupRaidKillUserInfo_Cmd
}

func (x *QueryGroupRaidKillUserInfo) GetParam() TeamGroupaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryGroupRaidKillUserInfo_Param
}

func (x *QueryGroupRaidKillUserInfo) GetRaidKeys() []uint64 {
	if x != nil {
		return x.RaidKeys
	}
	return nil
}

func (x *QueryGroupRaidKillUserInfo) GetInfos() []*GroupRaidKillInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type QueryGroupRaidKillGuildInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=69" json:"cmd,omitempty"`
	Param    *TeamGroupaidParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamGroupaidParam,def=10" json:"param,omitempty"`
	RaidKeys []uint64             `protobuf:"varint,3,rep,name=raid_keys,json=raidKeys" json:"raid_keys,omitempty"`
	Infos    []*GroupRaidKillInfo `protobuf:"bytes,4,rep,name=infos" json:"infos,omitempty"`
}

// Default values for QueryGroupRaidKillGuildInfo fields.
const (
	Default_QueryGroupRaidKillGuildInfo_Cmd   = Command_TEAM_GROUP_RAID_PROTOCMD
	Default_QueryGroupRaidKillGuildInfo_Param = TeamGroupaidParam_TEAMGROUPPARAM_QUERY_GUILD_KILLINFO
)

func (x *QueryGroupRaidKillGuildInfo) Reset() {
	*x = QueryGroupRaidKillGuildInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGroupRaidKillGuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGroupRaidKillGuildInfo) ProtoMessage() {}

func (x *QueryGroupRaidKillGuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGroupRaidKillGuildInfo.ProtoReflect.Descriptor instead.
func (*QueryGroupRaidKillGuildInfo) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{14}
}

func (x *QueryGroupRaidKillGuildInfo) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryGroupRaidKillGuildInfo_Cmd
}

func (x *QueryGroupRaidKillGuildInfo) GetParam() TeamGroupaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryGroupRaidKillGuildInfo_Param
}

func (x *QueryGroupRaidKillGuildInfo) GetRaidKeys() []uint64 {
	if x != nil {
		return x.RaidKeys
	}
	return nil
}

func (x *QueryGroupRaidKillGuildInfo) GetInfos() []*GroupRaidKillInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GroupRaidKillUserShowData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid     *uint64           `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Name       *string           `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Level      *uint32           `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	Profession *EProfession      `protobuf:"varint,4,opt,name=profession,enum=Cmd.EProfession" json:"profession,omitempty"`
	Guildname  *string           `protobuf:"bytes,5,opt,name=guildname" json:"guildname,omitempty"`
	Portrait   *UserPortraitData `protobuf:"bytes,6,opt,name=portrait" json:"portrait,omitempty"`
}

func (x *GroupRaidKillUserShowData) Reset() {
	*x = GroupRaidKillUserShowData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRaidKillUserShowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRaidKillUserShowData) ProtoMessage() {}

func (x *GroupRaidKillUserShowData) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRaidKillUserShowData.ProtoReflect.Descriptor instead.
func (*GroupRaidKillUserShowData) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{15}
}

func (x *GroupRaidKillUserShowData) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *GroupRaidKillUserShowData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GroupRaidKillUserShowData) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *GroupRaidKillUserShowData) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return EProfession_EPROFESSION_MIN
}

func (x *GroupRaidKillUserShowData) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

func (x *GroupRaidKillUserShowData) GetPortrait() *UserPortraitData {
	if x != nil {
		return x.Portrait
	}
	return nil
}

type QueryGroupRaidKillUserShowData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command                   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=69" json:"cmd,omitempty"`
	Param    *TeamGroupaidParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamGroupaidParam,def=11" json:"param,omitempty"`
	Charid   *uint64                    `protobuf:"varint,3,req,name=charid" json:"charid,omitempty"`
	Showdata *GroupRaidKillUserShowData `protobuf:"bytes,4,opt,name=showdata" json:"showdata,omitempty"`
}

// Default values for QueryGroupRaidKillUserShowData fields.
const (
	Default_QueryGroupRaidKillUserShowData_Cmd   = Command_TEAM_GROUP_RAID_PROTOCMD
	Default_QueryGroupRaidKillUserShowData_Param = TeamGroupaidParam_TEAMGROUPPARAM_QUERY_USER_SHOWDATA
)

func (x *QueryGroupRaidKillUserShowData) Reset() {
	*x = QueryGroupRaidKillUserShowData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGroupRaidKillUserShowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGroupRaidKillUserShowData) ProtoMessage() {}

func (x *QueryGroupRaidKillUserShowData) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGroupRaidKillUserShowData.ProtoReflect.Descriptor instead.
func (*QueryGroupRaidKillUserShowData) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{16}
}

func (x *QueryGroupRaidKillUserShowData) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryGroupRaidKillUserShowData_Cmd
}

func (x *QueryGroupRaidKillUserShowData) GetParam() TeamGroupaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryGroupRaidKillUserShowData_Param
}

func (x *QueryGroupRaidKillUserShowData) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *QueryGroupRaidKillUserShowData) GetShowdata() *GroupRaidKillUserShowData {
	if x != nil {
		return x.Showdata
	}
	return nil
}

type GroupRaidKillRecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raid  *uint32                  `protobuf:"varint,1,opt,name=raid,def=0" json:"raid,omitempty"`
	Time  *uint32                  `protobuf:"varint,2,opt,name=time,def=0" json:"time,omitempty"`
	Users []*GroupRaidKillUserInfo `protobuf:"bytes,3,rep,name=users" json:"users,omitempty"`
	Guild *GroupRaidKillGuildInfo  `protobuf:"bytes,4,opt,name=guild" json:"guild,omitempty"`
}

// Default values for GroupRaidKillRecordData fields.
const (
	Default_GroupRaidKillRecordData_Raid = uint32(0)
	Default_GroupRaidKillRecordData_Time = uint32(0)
)

func (x *GroupRaidKillRecordData) Reset() {
	*x = GroupRaidKillRecordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamGroupRaid_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRaidKillRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRaidKillRecordData) ProtoMessage() {}

func (x *GroupRaidKillRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_TeamGroupRaid_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRaidKillRecordData.ProtoReflect.Descriptor instead.
func (*GroupRaidKillRecordData) Descriptor() ([]byte, []int) {
	return file_TeamGroupRaid_proto_rawDescGZIP(), []int{17}
}

func (x *GroupRaidKillRecordData) GetRaid() uint32 {
	if x != nil && x.Raid != nil {
		return *x.Raid
	}
	return Default_GroupRaidKillRecordData_Raid
}

func (x *GroupRaidKillRecordData) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_GroupRaidKillRecordData_Time
}

func (x *GroupRaidKillRecordData) GetUsers() []*GroupRaidKillUserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GroupRaidKillRecordData) GetGuild() *GroupRaidKillGuildInfo {
	if x != nil {
		return x.Guild
	}
	return nil
}

var File_TeamGroupRaid_proto protoreflect.FileDescriptor

var file_TeamGroupRaid_proto_rawDesc = []byte{
	0x0a, 0x13, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x02, 0x0a, 0x1a, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x69,
	0x64, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x54, 0x45, 0x41, 0x4d, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45,
	0x5f, 0x52, 0x41, 0x49, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x08,
	0x69, 0x73, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x69, 0x73, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12,
	0x21, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xd6,
	0x01, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x54,
	0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1b, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64,
	0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x19, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0xb8, 0x01, 0x0a, 0x14, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x54,
	0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4a, 0x4f,
	0x49, 0x4e, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0xdf,
	0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x54, 0x45, 0x41,
	0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12,
	0x1f, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x6a, 0x6f, 0x69, 0x6e,
	0x22, 0xfd, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x50, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x54, 0x45,
	0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x7a, 0x6f,
	0x6e, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x7a,
	0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x72, 0x61, 0x69, 0x64, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x72, 0x61, 0x69, 0x64, 0x69, 0x64,
	0x22, 0xd0, 0x01, 0x0a, 0x14, 0x47, 0x6f, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61,
	0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x54, 0x45, 0x41, 0x4d,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f,
	0x52, 0x41, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x61, 0x69, 0x64, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x69,
	0x64, 0x69, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x78,
	0x74, 0x52, 0x61, 0x69, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e,
	0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xca, 0x01, 0x0a, 0x1d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52,
	0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x50, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f,
	0x52, 0x41, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x22, 0xe1, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4f, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x61, 0x69, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b,
	0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0x90, 0x02, 0x0a, 0x15, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x61, 0x69, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x0f, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x49, 0x4e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x1b,
	0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x70, 0x6f, 0x72,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x15, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69,
	0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x04, 0x72, 0x61, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x72, 0x61, 0x69, 0x64,
	0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x22, 0xf3,
	0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69,
	0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x50, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22,
	0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x69,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x72, 0x61,
	0x69, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x61, 0x69, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x18, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x41, 0x49, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x51,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x61, 0x69, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x23, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x72, 0x61, 0x69, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x4b, 0x69, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xe0, 0x01, 0x0a,
	0x19, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x22,
	0x80, 0x02, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61,
	0x69, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x54,
	0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x50, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x61, 0x69, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x22, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53,
	0x48, 0x4f, 0x57, 0x44, 0x41, 0x54, 0x41, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xac, 0x01, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64,
	0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15,
	0x0a, 0x04, 0x72, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x04, 0x72, 0x61, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x31,
	0x0a, 0x05, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x4b, 0x69, 0x6c,
	0x6c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x2a, 0xef, 0x03, 0x0a, 0x11, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x61,
	0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x41, 0x4d, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45,
	0x5f, 0x52, 0x41, 0x49, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x45, 0x41, 0x4d, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x52, 0x41, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52,
	0x41, 0x49, 0x44, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x52, 0x41, 0x49,
	0x44, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x41, 0x49, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x45, 0x41,
	0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x10, 0x06, 0x12, 0x26, 0x0a,
	0x22, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x52, 0x4d, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x41,
	0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x22,
	0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x0a, 0x12, 0x26, 0x0a,
	0x22, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x41, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10, 0x14, 0x12, 0x24, 0x0a,
	0x20, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x10, 0x15, 0x2a, 0x79, 0x0a, 0x12, 0x45, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69,
	0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x52, 0x41, 0x49, 0x44, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x52, 0x41, 0x49, 0x44, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x52, 0x41, 0x49, 0x44, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x52, 0x41, 0x49, 0x44, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0xa0,
	0x01, 0x0a, 0x16, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b,
	0x69, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x54, 0x4f,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10,
	0x03,
}

var (
	file_TeamGroupRaid_proto_rawDescOnce sync.Once
	file_TeamGroupRaid_proto_rawDescData = file_TeamGroupRaid_proto_rawDesc
)

func file_TeamGroupRaid_proto_rawDescGZIP() []byte {
	file_TeamGroupRaid_proto_rawDescOnce.Do(func() {
		file_TeamGroupRaid_proto_rawDescData = protoimpl.X.CompressGZIP(file_TeamGroupRaid_proto_rawDescData)
	})
	return file_TeamGroupRaid_proto_rawDescData
}

var file_TeamGroupRaid_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_TeamGroupRaid_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_TeamGroupRaid_proto_goTypes = []interface{}{
	(TeamGroupaidParam)(0),                 // 0: Cmd.TeamGroupaidParam
	(EGroupRaidKillType)(0),                // 1: Cmd.EGroupRaidKillType
	(EUpdateGroupKillAction)(0),            // 2: Cmd.EUpdateGroupKillAction
	(*InviteGroupJoinRaidTeamCmd)(nil),     // 3: Cmd.InviteGroupJoinRaidTeamCmd
	(*ReplyGroupJoinRaidTeamCmd)(nil),      // 4: Cmd.ReplyGroupJoinRaidTeamCmd
	(*OpenGroupRaidTeamCmd)(nil),           // 5: Cmd.OpenGroupRaidTeamCmd
	(*JoinGroupRaidTeamCmd)(nil),           // 6: Cmd.JoinGroupRaidTeamCmd
	(*QueryGroupRaidStatusCmd)(nil),        // 7: Cmd.QueryGroupRaidStatusCmd
	(*CreateGroupRaidTeamCmd)(nil),         // 8: Cmd.CreateGroupRaidTeamCmd
	(*GoToGroupRaidTeamCmd)(nil),           // 9: Cmd.GoToGroupRaidTeamCmd
	(*EnterNextRaidGroupCmd)(nil),          // 10: Cmd.EnterNextRaidGroupCmd
	(*InviteConfirmRaidTeamGroupCmd)(nil),  // 11: Cmd.InviteConfirmRaidTeamGroupCmd
	(*ReplyConfirmRaidTeamGroupCmd)(nil),   // 12: Cmd.ReplyConfirmRaidTeamGroupCmd
	(*GroupRaidKillUserInfo)(nil),          // 13: Cmd.GroupRaidKillUserInfo
	(*GroupRaidKillGuildInfo)(nil),         // 14: Cmd.GroupRaidKillGuildInfo
	(*GroupRaidKillInfo)(nil),              // 15: Cmd.GroupRaidKillInfo
	(*QueryGroupRaidKillUserInfo)(nil),     // 16: Cmd.QueryGroupRaidKillUserInfo
	(*QueryGroupRaidKillGuildInfo)(nil),    // 17: Cmd.QueryGroupRaidKillGuildInfo
	(*GroupRaidKillUserShowData)(nil),      // 18: Cmd.GroupRaidKillUserShowData
	(*QueryGroupRaidKillUserShowData)(nil), // 19: Cmd.QueryGroupRaidKillUserShowData
	(*GroupRaidKillRecordData)(nil),        // 20: Cmd.GroupRaidKillRecordData
	(Command)(0),                           // 21: Cmd.Command
	(EProfession)(0),                       // 22: Cmd.EProfession
	(*UserPortraitData)(nil),               // 23: Cmd.UserPortraitData
}
var file_TeamGroupRaid_proto_depIdxs = []int32{
	21, // 0: Cmd.InviteGroupJoinRaidTeamCmd.cmd:type_name -> Cmd.Command
	0,  // 1: Cmd.InviteGroupJoinRaidTeamCmd.param:type_name -> Cmd.TeamGroupaidParam
	21, // 2: Cmd.ReplyGroupJoinRaidTeamCmd.cmd:type_name -> Cmd.Command
	0,  // 3: Cmd.ReplyGroupJoinRaidTeamCmd.param:type_name -> Cmd.TeamGroupaidParam
	21, // 4: Cmd.OpenGroupRaidTeamCmd.cmd:type_name -> Cmd.Command
	0,  // 5: Cmd.OpenGroupRaidTeamCmd.param:type_name -> Cmd.TeamGroupaidParam
	21, // 6: Cmd.JoinGroupRaidTeamCmd.cmd:type_name -> Cmd.Command
	0,  // 7: Cmd.JoinGroupRaidTeamCmd.param:type_name -> Cmd.TeamGroupaidParam
	21, // 8: Cmd.QueryGroupRaidStatusCmd.cmd:type_name -> Cmd.Command
	0,  // 9: Cmd.QueryGroupRaidStatusCmd.param:type_name -> Cmd.TeamGroupaidParam
	21, // 10: Cmd.CreateGroupRaidTeamCmd.cmd:type_name -> Cmd.Command
	0,  // 11: Cmd.CreateGroupRaidTeamCmd.param:type_name -> Cmd.TeamGroupaidParam
	21, // 12: Cmd.GoToGroupRaidTeamCmd.cmd:type_name -> Cmd.Command
	0,  // 13: Cmd.GoToGroupRaidTeamCmd.param:type_name -> Cmd.TeamGroupaidParam
	21, // 14: Cmd.EnterNextRaidGroupCmd.cmd:type_name -> Cmd.Command
	0,  // 15: Cmd.EnterNextRaidGroupCmd.param:type_name -> Cmd.TeamGroupaidParam
	21, // 16: Cmd.InviteConfirmRaidTeamGroupCmd.cmd:type_name -> Cmd.Command
	0,  // 17: Cmd.InviteConfirmRaidTeamGroupCmd.param:type_name -> Cmd.TeamGroupaidParam
	21, // 18: Cmd.ReplyConfirmRaidTeamGroupCmd.cmd:type_name -> Cmd.Command
	0,  // 19: Cmd.ReplyConfirmRaidTeamGroupCmd.param:type_name -> Cmd.TeamGroupaidParam
	22, // 20: Cmd.GroupRaidKillUserInfo.profession:type_name -> Cmd.EProfession
	23, // 21: Cmd.GroupRaidKillUserInfo.portrait:type_name -> Cmd.UserPortraitData
	13, // 22: Cmd.GroupRaidKillInfo.users:type_name -> Cmd.GroupRaidKillUserInfo
	14, // 23: Cmd.GroupRaidKillInfo.guilds:type_name -> Cmd.GroupRaidKillGuildInfo
	21, // 24: Cmd.QueryGroupRaidKillUserInfo.cmd:type_name -> Cmd.Command
	0,  // 25: Cmd.QueryGroupRaidKillUserInfo.param:type_name -> Cmd.TeamGroupaidParam
	15, // 26: Cmd.QueryGroupRaidKillUserInfo.infos:type_name -> Cmd.GroupRaidKillInfo
	21, // 27: Cmd.QueryGroupRaidKillGuildInfo.cmd:type_name -> Cmd.Command
	0,  // 28: Cmd.QueryGroupRaidKillGuildInfo.param:type_name -> Cmd.TeamGroupaidParam
	15, // 29: Cmd.QueryGroupRaidKillGuildInfo.infos:type_name -> Cmd.GroupRaidKillInfo
	22, // 30: Cmd.GroupRaidKillUserShowData.profession:type_name -> Cmd.EProfession
	23, // 31: Cmd.GroupRaidKillUserShowData.portrait:type_name -> Cmd.UserPortraitData
	21, // 32: Cmd.QueryGroupRaidKillUserShowData.cmd:type_name -> Cmd.Command
	0,  // 33: Cmd.QueryGroupRaidKillUserShowData.param:type_name -> Cmd.TeamGroupaidParam
	18, // 34: Cmd.QueryGroupRaidKillUserShowData.showdata:type_name -> Cmd.GroupRaidKillUserShowData
	13, // 35: Cmd.GroupRaidKillRecordData.users:type_name -> Cmd.GroupRaidKillUserInfo
	14, // 36: Cmd.GroupRaidKillRecordData.guild:type_name -> Cmd.GroupRaidKillGuildInfo
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_TeamGroupRaid_proto_init() }
func file_TeamGroupRaid_proto_init() {
	if File_TeamGroupRaid_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TeamGroupRaid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteGroupJoinRaidTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyGroupJoinRaidTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenGroupRaidTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGroupRaidTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGroupRaidStatusCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupRaidTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoToGroupRaidTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterNextRaidGroupCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteConfirmRaidTeamGroupCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyConfirmRaidTeamGroupCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRaidKillUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRaidKillGuildInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRaidKillInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGroupRaidKillUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGroupRaidKillGuildInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRaidKillUserShowData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGroupRaidKillUserShowData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamGroupRaid_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRaidKillRecordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TeamGroupRaid_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_TeamGroupRaid_proto_goTypes,
		DependencyIndexes: file_TeamGroupRaid_proto_depIdxs,
		EnumInfos:         file_TeamGroupRaid_proto_enumTypes,
		MessageInfos:      file_TeamGroupRaid_proto_msgTypes,
	}.Build()
	File_TeamGroupRaid_proto = out.File
	file_TeamGroupRaid_proto_rawDesc = nil
	file_TeamGroupRaid_proto_goTypes = nil
	file_TeamGroupRaid_proto_depIdxs = nil
}
