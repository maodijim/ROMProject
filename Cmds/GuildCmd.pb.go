// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: GuildCmd.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GuildParam int32

const (
	GuildParam_GUILDPARAM_GUILDLIST                 GuildParam = 1
	GuildParam_GUILDPARAM_CREATEGUILD               GuildParam = 2
	GuildParam_GUILDPARAM_ENTERGUILD                GuildParam = 3
	GuildParam_GUILDPARAM_MEMBERUPDATE              GuildParam = 4
	GuildParam_GUILDPARAM_APPLYUPDATE               GuildParam = 5
	GuildParam_GUILDPARAM_GUILDDATAUPDATE           GuildParam = 6
	GuildParam_GUILDPARAM_MEMBERDATAUPDATE          GuildParam = 7
	GuildParam_GUILDPARAM_APPLYGUILD                GuildParam = 8
	GuildParam_GUILDPARAM_PROCESSAPPLY              GuildParam = 9
	GuildParam_GUILDPARAM_INVITEMEMBER              GuildParam = 10
	GuildParam_GUILDPARAM_PROCESSINVITEMEMBER       GuildParam = 11
	GuildParam_GUILDPARAM_SETOPTION                 GuildParam = 12
	GuildParam_GUILDPARAM_KICKMEMBER                GuildParam = 13
	GuildParam_GUILDPARAM_CHANGEJOB                 GuildParam = 14
	GuildParam_GUILDPARAM_EXITGUILD                 GuildParam = 15
	GuildParam_GUILDPARAM_EXCHANGECHAIR             GuildParam = 16
	GuildParam_GUILDPARAM_DISMISSGUILD              GuildParam = 17
	GuildParam_GUILDPARAM_LEVELUPGUILD              GuildParam = 18
	GuildParam_GUILDPARAM_DONATE                    GuildParam = 19
	GuildParam_GUILDPARAM_ENTERGUILDTERRITORY       GuildParam = 20
	GuildParam_GUILDPARAM_PRAY                      GuildParam = 21
	GuildParam_GUILDPARAM_GUILDINFONTF              GuildParam = 22
	GuildParam_GUILDPARAM_GUILDPRAYNTF              GuildParam = 23
	GuildParam_GUILDPARAM_LEVELUPEFFECT             GuildParam = 24
	GuildParam_GUILDPARAM_DONATELIST                GuildParam = 25
	GuildParam_GUILDPARAM_UPDATEDONATEITEM          GuildParam = 26
	GuildParam_GUILDPARAM_DONATEFRAMESTATUS         GuildParam = 27
	GuildParam_GUILDPARAM_QUERYPACK                 GuildParam = 28
	GuildParam_GUILDPARAM_PACKUPDATE                GuildParam = 32
	GuildParam_GUILDPARAM_EXCHANGEZONE              GuildParam = 29
	GuildParam_GUILDPARAM_EXCHANGEZONE_NTF          GuildParam = 30
	GuildParam_GUILDPARAM_EXCHANGEZONE_ANSWER       GuildParam = 31
	GuildParam_GUILDPARAM_QUERY_EVENT_LIST          GuildParam = 33
	GuildParam_GUILDPARAM_NEW_EVENT                 GuildParam = 34
	GuildParam_GUILDPARAM_FRAME_STATUS              GuildParam = 37
	GuildParam_GUILDPARAM_MODIFY_AUTH               GuildParam = 38
	GuildParam_GUILDPARAM_JOB_UPDATE                GuildParam = 39
	GuildParam_GUILDPARAM_RENAME_QUERY              GuildParam = 40
	GuildParam_GUILDPARAM_QUERY_CITYINFO            GuildParam = 41
	GuildParam_GUILDPARAM_CITY_ACTION               GuildParam = 42
	GuildParam_GUILDPARAM_GUILD_ICON_SYNC           GuildParam = 43
	GuildParam_GUILDPARAM_GUILD_ICON_ADD            GuildParam = 44
	GuildParam_GUILDPARAM_GUILD_ICON_UPLOAD         GuildParam = 45
	GuildParam_GUILDPARAM_OPEN_FUNCTION             GuildParam = 47
	GuildParam_GUILDPARAM_BUILD                     GuildParam = 48
	GuildParam_GUILDPARAM_SUBMIT_MATERIAL           GuildParam = 49
	GuildParam_GUILDPARAM_BUILDING_NTF              GuildParam = 50
	GuildParam_GUILDPARAM_BUILDING_SUBMIT_COUNT     GuildParam = 51
	GuildParam_GUILDPARAM_CHALLENGE_UPDATE          GuildParam = 52
	GuildParam_GUILDPARAM_WELFARE_NTF               GuildParam = 53
	GuildParam_GUILDPARAM_GET_WELFARE               GuildParam = 54
	GuildParam_GUILDPARAM_BUILDING_LVUP_EFF         GuildParam = 55
	GuildParam_GUILDPARAM_ARTIFACT_UPDATE_NTF       GuildParam = 56
	GuildParam_GUILDPARAM_ARTIFACT_PRODUCE          GuildParam = 57
	GuildParam_GUILDPARAM_ARTIFACT_OPT              GuildParam = 58
	GuildParam_GUILDPARAM_QUERY_GQUEST              GuildParam = 59
	GuildParam_GUILDPARAM_TREASURE_ACTION           GuildParam = 60
	GuildParam_GUILDPARAM_QUERY_BUILDING_RANK       GuildParam = 61
	GuildParam_GUILDPARAM_TREASURE_QUERYRESULT      GuildParam = 62
	GuildParam_GUILDPARAM_QUERY_CITYSHOW            GuildParam = 63
	GuildParam_GUILDPARAM_OEPN_GVG                  GuildParam = 64
	GuildParam_GUILDPARAM_OPEN_REALTIME_VOICE       GuildParam = 65
	GuildParam_GUILDPARAM_ENTERPUNISHTIME_NTF       GuildParam = 66
	GuildParam_GUILDPARAM_QUERY_GVG                 GuildParam = 67
	GuildParam_GUILDPARAM_QUERY_GVG_GUILD           GuildParam = 68
	GuildParam_GUILDPARAM_GVG_REWARD_NTF            GuildParam = 69
	GuildParam_GUILDPARAM_GVG_REWARD_GET            GuildParam = 70
	GuildParam_GUILDPARAM_QUERY_CHECK_INFO          GuildParam = 71
	GuildParam_GUILDPARAM_QUERY_BIFROST_RANK        GuildParam = 72
	GuildParam_GUILDPARAM_QUERY_MEMBER_BIFROST_INFO GuildParam = 73
)

// Enum value maps for GuildParam.
var (
	GuildParam_name = map[int32]string{
		1:  "GUILDPARAM_GUILDLIST",
		2:  "GUILDPARAM_CREATEGUILD",
		3:  "GUILDPARAM_ENTERGUILD",
		4:  "GUILDPARAM_MEMBERUPDATE",
		5:  "GUILDPARAM_APPLYUPDATE",
		6:  "GUILDPARAM_GUILDDATAUPDATE",
		7:  "GUILDPARAM_MEMBERDATAUPDATE",
		8:  "GUILDPARAM_APPLYGUILD",
		9:  "GUILDPARAM_PROCESSAPPLY",
		10: "GUILDPARAM_INVITEMEMBER",
		11: "GUILDPARAM_PROCESSINVITEMEMBER",
		12: "GUILDPARAM_SETOPTION",
		13: "GUILDPARAM_KICKMEMBER",
		14: "GUILDPARAM_CHANGEJOB",
		15: "GUILDPARAM_EXITGUILD",
		16: "GUILDPARAM_EXCHANGECHAIR",
		17: "GUILDPARAM_DISMISSGUILD",
		18: "GUILDPARAM_LEVELUPGUILD",
		19: "GUILDPARAM_DONATE",
		20: "GUILDPARAM_ENTERGUILDTERRITORY",
		21: "GUILDPARAM_PRAY",
		22: "GUILDPARAM_GUILDINFONTF",
		23: "GUILDPARAM_GUILDPRAYNTF",
		24: "GUILDPARAM_LEVELUPEFFECT",
		25: "GUILDPARAM_DONATELIST",
		26: "GUILDPARAM_UPDATEDONATEITEM",
		27: "GUILDPARAM_DONATEFRAMESTATUS",
		28: "GUILDPARAM_QUERYPACK",
		32: "GUILDPARAM_PACKUPDATE",
		29: "GUILDPARAM_EXCHANGEZONE",
		30: "GUILDPARAM_EXCHANGEZONE_NTF",
		31: "GUILDPARAM_EXCHANGEZONE_ANSWER",
		33: "GUILDPARAM_QUERY_EVENT_LIST",
		34: "GUILDPARAM_NEW_EVENT",
		37: "GUILDPARAM_FRAME_STATUS",
		38: "GUILDPARAM_MODIFY_AUTH",
		39: "GUILDPARAM_JOB_UPDATE",
		40: "GUILDPARAM_RENAME_QUERY",
		41: "GUILDPARAM_QUERY_CITYINFO",
		42: "GUILDPARAM_CITY_ACTION",
		43: "GUILDPARAM_GUILD_ICON_SYNC",
		44: "GUILDPARAM_GUILD_ICON_ADD",
		45: "GUILDPARAM_GUILD_ICON_UPLOAD",
		47: "GUILDPARAM_OPEN_FUNCTION",
		48: "GUILDPARAM_BUILD",
		49: "GUILDPARAM_SUBMIT_MATERIAL",
		50: "GUILDPARAM_BUILDING_NTF",
		51: "GUILDPARAM_BUILDING_SUBMIT_COUNT",
		52: "GUILDPARAM_CHALLENGE_UPDATE",
		53: "GUILDPARAM_WELFARE_NTF",
		54: "GUILDPARAM_GET_WELFARE",
		55: "GUILDPARAM_BUILDING_LVUP_EFF",
		56: "GUILDPARAM_ARTIFACT_UPDATE_NTF",
		57: "GUILDPARAM_ARTIFACT_PRODUCE",
		58: "GUILDPARAM_ARTIFACT_OPT",
		59: "GUILDPARAM_QUERY_GQUEST",
		60: "GUILDPARAM_TREASURE_ACTION",
		61: "GUILDPARAM_QUERY_BUILDING_RANK",
		62: "GUILDPARAM_TREASURE_QUERYRESULT",
		63: "GUILDPARAM_QUERY_CITYSHOW",
		64: "GUILDPARAM_OEPN_GVG",
		65: "GUILDPARAM_OPEN_REALTIME_VOICE",
		66: "GUILDPARAM_ENTERPUNISHTIME_NTF",
		67: "GUILDPARAM_QUERY_GVG",
		68: "GUILDPARAM_QUERY_GVG_GUILD",
		69: "GUILDPARAM_GVG_REWARD_NTF",
		70: "GUILDPARAM_GVG_REWARD_GET",
		71: "GUILDPARAM_QUERY_CHECK_INFO",
		72: "GUILDPARAM_QUERY_BIFROST_RANK",
		73: "GUILDPARAM_QUERY_MEMBER_BIFROST_INFO",
	}
	GuildParam_value = map[string]int32{
		"GUILDPARAM_GUILDLIST":                 1,
		"GUILDPARAM_CREATEGUILD":               2,
		"GUILDPARAM_ENTERGUILD":                3,
		"GUILDPARAM_MEMBERUPDATE":              4,
		"GUILDPARAM_APPLYUPDATE":               5,
		"GUILDPARAM_GUILDDATAUPDATE":           6,
		"GUILDPARAM_MEMBERDATAUPDATE":          7,
		"GUILDPARAM_APPLYGUILD":                8,
		"GUILDPARAM_PROCESSAPPLY":              9,
		"GUILDPARAM_INVITEMEMBER":              10,
		"GUILDPARAM_PROCESSINVITEMEMBER":       11,
		"GUILDPARAM_SETOPTION":                 12,
		"GUILDPARAM_KICKMEMBER":                13,
		"GUILDPARAM_CHANGEJOB":                 14,
		"GUILDPARAM_EXITGUILD":                 15,
		"GUILDPARAM_EXCHANGECHAIR":             16,
		"GUILDPARAM_DISMISSGUILD":              17,
		"GUILDPARAM_LEVELUPGUILD":              18,
		"GUILDPARAM_DONATE":                    19,
		"GUILDPARAM_ENTERGUILDTERRITORY":       20,
		"GUILDPARAM_PRAY":                      21,
		"GUILDPARAM_GUILDINFONTF":              22,
		"GUILDPARAM_GUILDPRAYNTF":              23,
		"GUILDPARAM_LEVELUPEFFECT":             24,
		"GUILDPARAM_DONATELIST":                25,
		"GUILDPARAM_UPDATEDONATEITEM":          26,
		"GUILDPARAM_DONATEFRAMESTATUS":         27,
		"GUILDPARAM_QUERYPACK":                 28,
		"GUILDPARAM_PACKUPDATE":                32,
		"GUILDPARAM_EXCHANGEZONE":              29,
		"GUILDPARAM_EXCHANGEZONE_NTF":          30,
		"GUILDPARAM_EXCHANGEZONE_ANSWER":       31,
		"GUILDPARAM_QUERY_EVENT_LIST":          33,
		"GUILDPARAM_NEW_EVENT":                 34,
		"GUILDPARAM_FRAME_STATUS":              37,
		"GUILDPARAM_MODIFY_AUTH":               38,
		"GUILDPARAM_JOB_UPDATE":                39,
		"GUILDPARAM_RENAME_QUERY":              40,
		"GUILDPARAM_QUERY_CITYINFO":            41,
		"GUILDPARAM_CITY_ACTION":               42,
		"GUILDPARAM_GUILD_ICON_SYNC":           43,
		"GUILDPARAM_GUILD_ICON_ADD":            44,
		"GUILDPARAM_GUILD_ICON_UPLOAD":         45,
		"GUILDPARAM_OPEN_FUNCTION":             47,
		"GUILDPARAM_BUILD":                     48,
		"GUILDPARAM_SUBMIT_MATERIAL":           49,
		"GUILDPARAM_BUILDING_NTF":              50,
		"GUILDPARAM_BUILDING_SUBMIT_COUNT":     51,
		"GUILDPARAM_CHALLENGE_UPDATE":          52,
		"GUILDPARAM_WELFARE_NTF":               53,
		"GUILDPARAM_GET_WELFARE":               54,
		"GUILDPARAM_BUILDING_LVUP_EFF":         55,
		"GUILDPARAM_ARTIFACT_UPDATE_NTF":       56,
		"GUILDPARAM_ARTIFACT_PRODUCE":          57,
		"GUILDPARAM_ARTIFACT_OPT":              58,
		"GUILDPARAM_QUERY_GQUEST":              59,
		"GUILDPARAM_TREASURE_ACTION":           60,
		"GUILDPARAM_QUERY_BUILDING_RANK":       61,
		"GUILDPARAM_TREASURE_QUERYRESULT":      62,
		"GUILDPARAM_QUERY_CITYSHOW":            63,
		"GUILDPARAM_OEPN_GVG":                  64,
		"GUILDPARAM_OPEN_REALTIME_VOICE":       65,
		"GUILDPARAM_ENTERPUNISHTIME_NTF":       66,
		"GUILDPARAM_QUERY_GVG":                 67,
		"GUILDPARAM_QUERY_GVG_GUILD":           68,
		"GUILDPARAM_GVG_REWARD_NTF":            69,
		"GUILDPARAM_GVG_REWARD_GET":            70,
		"GUILDPARAM_QUERY_CHECK_INFO":          71,
		"GUILDPARAM_QUERY_BIFROST_RANK":        72,
		"GUILDPARAM_QUERY_MEMBER_BIFROST_INFO": 73,
	}
)

func (x GuildParam) Enum() *GuildParam {
	p := new(GuildParam)
	*p = x
	return p
}

func (x GuildParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuildParam) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[0].Descriptor()
}

func (GuildParam) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[0]
}

func (x GuildParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GuildParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GuildParam(num)
	return nil
}

// Deprecated: Use GuildParam.Descriptor instead.
func (GuildParam) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{0}
}

type EGuildGlobal int32

const (
	EGuildGlobal_EGUILDGLOBAL_LISTCOUNT_PERPAGE EGuildGlobal = 20
)

// Enum value maps for EGuildGlobal.
var (
	EGuildGlobal_name = map[int32]string{
		20: "EGUILDGLOBAL_LISTCOUNT_PERPAGE",
	}
	EGuildGlobal_value = map[string]int32{
		"EGUILDGLOBAL_LISTCOUNT_PERPAGE": 20,
	}
)

func (x EGuildGlobal) Enum() *EGuildGlobal {
	p := new(EGuildGlobal)
	*p = x
	return p
}

func (x EGuildGlobal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGuildGlobal) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[1].Descriptor()
}

func (EGuildGlobal) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[1]
}

func (x EGuildGlobal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGuildGlobal) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGuildGlobal(num)
	return nil
}

// Deprecated: Use EGuildGlobal.Descriptor instead.
func (EGuildGlobal) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{1}
}

type EGuildJob int32

const (
	EGuildJob_EGUILDJOB_MIN           EGuildJob = 0
	EGuildJob_EGUILDJOB_CHAIRMAN      EGuildJob = 1
	EGuildJob_EGUILDJOB_VICE_CHAIRMAN EGuildJob = 2
	EGuildJob_EGUILDJOB_MEMBER1       EGuildJob = 3
	EGuildJob_EGUILDJOB_MEMBER2       EGuildJob = 4
	EGuildJob_EGUILDJOB_MEMBER3       EGuildJob = 5
	EGuildJob_EGUILDJOB_APPLY         EGuildJob = 6
	EGuildJob_EGUILDJOB_INVITE        EGuildJob = 7
	EGuildJob_EGUILDJOB_MEMBER4       EGuildJob = 8
	EGuildJob_EGUILDJOB_MEMBER5       EGuildJob = 9
	EGuildJob_EGUILDJOB_MEMBER6       EGuildJob = 10
	EGuildJob_EGUILDJOB_MEMBER7       EGuildJob = 11
	EGuildJob_EGUILDJOB_MEMBER8       EGuildJob = 12
	EGuildJob_EGUILDJOB_MEMBER9       EGuildJob = 13
	EGuildJob_EGUILDJOB_MEMBER10      EGuildJob = 14
	EGuildJob_EGUILDJOB_MAX           EGuildJob = 15
)

// Enum value maps for EGuildJob.
var (
	EGuildJob_name = map[int32]string{
		0:  "EGUILDJOB_MIN",
		1:  "EGUILDJOB_CHAIRMAN",
		2:  "EGUILDJOB_VICE_CHAIRMAN",
		3:  "EGUILDJOB_MEMBER1",
		4:  "EGUILDJOB_MEMBER2",
		5:  "EGUILDJOB_MEMBER3",
		6:  "EGUILDJOB_APPLY",
		7:  "EGUILDJOB_INVITE",
		8:  "EGUILDJOB_MEMBER4",
		9:  "EGUILDJOB_MEMBER5",
		10: "EGUILDJOB_MEMBER6",
		11: "EGUILDJOB_MEMBER7",
		12: "EGUILDJOB_MEMBER8",
		13: "EGUILDJOB_MEMBER9",
		14: "EGUILDJOB_MEMBER10",
		15: "EGUILDJOB_MAX",
	}
	EGuildJob_value = map[string]int32{
		"EGUILDJOB_MIN":           0,
		"EGUILDJOB_CHAIRMAN":      1,
		"EGUILDJOB_VICE_CHAIRMAN": 2,
		"EGUILDJOB_MEMBER1":       3,
		"EGUILDJOB_MEMBER2":       4,
		"EGUILDJOB_MEMBER3":       5,
		"EGUILDJOB_APPLY":         6,
		"EGUILDJOB_INVITE":        7,
		"EGUILDJOB_MEMBER4":       8,
		"EGUILDJOB_MEMBER5":       9,
		"EGUILDJOB_MEMBER6":       10,
		"EGUILDJOB_MEMBER7":       11,
		"EGUILDJOB_MEMBER8":       12,
		"EGUILDJOB_MEMBER9":       13,
		"EGUILDJOB_MEMBER10":      14,
		"EGUILDJOB_MAX":           15,
	}
)

func (x EGuildJob) Enum() *EGuildJob {
	p := new(EGuildJob)
	*p = x
	return p
}

func (x EGuildJob) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGuildJob) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[2].Descriptor()
}

func (EGuildJob) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[2]
}

func (x EGuildJob) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGuildJob) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGuildJob(num)
	return nil
}

// Deprecated: Use EGuildJob.Descriptor instead.
func (EGuildJob) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{2}
}

type EPrayType int32

const (
	EPrayType_EPRAYTYPE_GODDESS EPrayType = 0
	EPrayType_EPRAYTYPE_GVG_ATK EPrayType = 1
	EPrayType_EPRAYTYPE_GVG_DEF EPrayType = 2
	EPrayType_EPRAYTYPE_GVG_ELE EPrayType = 3
	EPrayType_EPRAYTYPE_MAX     EPrayType = 4
)

// Enum value maps for EPrayType.
var (
	EPrayType_name = map[int32]string{
		0: "EPRAYTYPE_GODDESS",
		1: "EPRAYTYPE_GVG_ATK",
		2: "EPRAYTYPE_GVG_DEF",
		3: "EPRAYTYPE_GVG_ELE",
		4: "EPRAYTYPE_MAX",
	}
	EPrayType_value = map[string]int32{
		"EPRAYTYPE_GODDESS": 0,
		"EPRAYTYPE_GVG_ATK": 1,
		"EPRAYTYPE_GVG_DEF": 2,
		"EPRAYTYPE_GVG_ELE": 3,
		"EPRAYTYPE_MAX":     4,
	}
)

func (x EPrayType) Enum() *EPrayType {
	p := new(EPrayType)
	*p = x
	return p
}

func (x EPrayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPrayType) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[3].Descriptor()
}

func (EPrayType) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[3]
}

func (x EPrayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPrayType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPrayType(num)
	return nil
}

// Deprecated: Use EPrayType.Descriptor instead.
func (EPrayType) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{3}
}

type EGuildFunction int32

const (
	EGuildFunction_EGUILDFUNCTION_MIN      EGuildFunction = 0
	EGuildFunction_EGUILDFUNCTION_BUILDING EGuildFunction = 1
	EGuildFunction_EGUILDFUNCTION_MAX      EGuildFunction = 2
)

// Enum value maps for EGuildFunction.
var (
	EGuildFunction_name = map[int32]string{
		0: "EGUILDFUNCTION_MIN",
		1: "EGUILDFUNCTION_BUILDING",
		2: "EGUILDFUNCTION_MAX",
	}
	EGuildFunction_value = map[string]int32{
		"EGUILDFUNCTION_MIN":      0,
		"EGUILDFUNCTION_BUILDING": 1,
		"EGUILDFUNCTION_MAX":      2,
	}
)

func (x EGuildFunction) Enum() *EGuildFunction {
	p := new(EGuildFunction)
	*p = x
	return p
}

func (x EGuildFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGuildFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[4].Descriptor()
}

func (EGuildFunction) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[4]
}

func (x EGuildFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGuildFunction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGuildFunction(num)
	return nil
}

// Deprecated: Use EGuildFunction.Descriptor instead.
func (EGuildFunction) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{4}
}

type EAuth int32

const (
	EAuth_EAUTH_MIN              EAuth = 0
	EAuth_EAUTH_INVITE           EAuth = 1
	EAuth_EAUTH_AGREE            EAuth = 2
	EAuth_EAUTH_DELETE_APPLYLIST EAuth = 3
	EAuth_EAUTH_EDIT_BOARD       EAuth = 4
	EAuth_EAUTH_EDIT_RECRUIT     EAuth = 5
	EAuth_EAUTH_CHANGE_PORTRAIT  EAuth = 6
	EAuth_EAUTH_LEVELUP_GUILD    EAuth = 7
	EAuth_EAUTH_LEVELUP_CON      EAuth = 8
	EAuth_EAUTH_LEVELUP_TECH     EAuth = 9
	EAuth_EAUTH_PUBLISH_QUEST    EAuth = 10
	EAuth_EAUTH_KICK_MEMBER      EAuth = 11
	EAuth_EAUTH_KICK_VICE        EAuth = 12
	EAuth_EAUTH_CHANGE_JOB       EAuth = 13
	EAuth_EAUTH_CHANGE_JOBNAME   EAuth = 14
	EAuth_EAUTH_LEADER_GIVE      EAuth = 15
	EAuth_EAUTH_DISMISS_GUILD    EAuth = 16
	EAuth_EAUTH_EXCHANGE_ZONE    EAuth = 17
	EAuth_EAUTH_OPEN_RAID        EAuth = 18
	EAuth_EAUTH_UPLOAD_PHOTO     EAuth = 19
	EAuth_EAUTH_GUILD_RENAME     EAuth = 20
	EAuth_EAUTH_GIVEUP_CITY      EAuth = 21
	EAuth_EAUTH_OPEN_BUILDING    EAuth = 22
	EAuth_EAUTH_BUILD            EAuth = 23
	EAuth_EAUTH_ARTIFACT_QUEST   EAuth = 24
	EAuth_EAUTH_ARTIFACT_PRODUCE EAuth = 25
	EAuth_EAUTH_ARTIFACT_OPT     EAuth = 26
	EAuth_EAUTH_TREASURE_OPT     EAuth = 27
	EAuth_EAUTH_GUILD_SHOP       EAuth = 28
	EAuth_EAUTH_VOICE            EAuth = 29
	EAuth_EAUTH_EDIT_APPLIED     EAuth = 30
	EAuth_EAUTH_EDIT_CHECKED     EAuth = 31
	EAuth_EAUTH_EDIT_NEEDLEVEL   EAuth = 32
	EAuth_EAUTH_MAX              EAuth = 33
)

// Enum value maps for EAuth.
var (
	EAuth_name = map[int32]string{
		0:  "EAUTH_MIN",
		1:  "EAUTH_INVITE",
		2:  "EAUTH_AGREE",
		3:  "EAUTH_DELETE_APPLYLIST",
		4:  "EAUTH_EDIT_BOARD",
		5:  "EAUTH_EDIT_RECRUIT",
		6:  "EAUTH_CHANGE_PORTRAIT",
		7:  "EAUTH_LEVELUP_GUILD",
		8:  "EAUTH_LEVELUP_CON",
		9:  "EAUTH_LEVELUP_TECH",
		10: "EAUTH_PUBLISH_QUEST",
		11: "EAUTH_KICK_MEMBER",
		12: "EAUTH_KICK_VICE",
		13: "EAUTH_CHANGE_JOB",
		14: "EAUTH_CHANGE_JOBNAME",
		15: "EAUTH_LEADER_GIVE",
		16: "EAUTH_DISMISS_GUILD",
		17: "EAUTH_EXCHANGE_ZONE",
		18: "EAUTH_OPEN_RAID",
		19: "EAUTH_UPLOAD_PHOTO",
		20: "EAUTH_GUILD_RENAME",
		21: "EAUTH_GIVEUP_CITY",
		22: "EAUTH_OPEN_BUILDING",
		23: "EAUTH_BUILD",
		24: "EAUTH_ARTIFACT_QUEST",
		25: "EAUTH_ARTIFACT_PRODUCE",
		26: "EAUTH_ARTIFACT_OPT",
		27: "EAUTH_TREASURE_OPT",
		28: "EAUTH_GUILD_SHOP",
		29: "EAUTH_VOICE",
		30: "EAUTH_EDIT_APPLIED",
		31: "EAUTH_EDIT_CHECKED",
		32: "EAUTH_EDIT_NEEDLEVEL",
		33: "EAUTH_MAX",
	}
	EAuth_value = map[string]int32{
		"EAUTH_MIN":              0,
		"EAUTH_INVITE":           1,
		"EAUTH_AGREE":            2,
		"EAUTH_DELETE_APPLYLIST": 3,
		"EAUTH_EDIT_BOARD":       4,
		"EAUTH_EDIT_RECRUIT":     5,
		"EAUTH_CHANGE_PORTRAIT":  6,
		"EAUTH_LEVELUP_GUILD":    7,
		"EAUTH_LEVELUP_CON":      8,
		"EAUTH_LEVELUP_TECH":     9,
		"EAUTH_PUBLISH_QUEST":    10,
		"EAUTH_KICK_MEMBER":      11,
		"EAUTH_KICK_VICE":        12,
		"EAUTH_CHANGE_JOB":       13,
		"EAUTH_CHANGE_JOBNAME":   14,
		"EAUTH_LEADER_GIVE":      15,
		"EAUTH_DISMISS_GUILD":    16,
		"EAUTH_EXCHANGE_ZONE":    17,
		"EAUTH_OPEN_RAID":        18,
		"EAUTH_UPLOAD_PHOTO":     19,
		"EAUTH_GUILD_RENAME":     20,
		"EAUTH_GIVEUP_CITY":      21,
		"EAUTH_OPEN_BUILDING":    22,
		"EAUTH_BUILD":            23,
		"EAUTH_ARTIFACT_QUEST":   24,
		"EAUTH_ARTIFACT_PRODUCE": 25,
		"EAUTH_ARTIFACT_OPT":     26,
		"EAUTH_TREASURE_OPT":     27,
		"EAUTH_GUILD_SHOP":       28,
		"EAUTH_VOICE":            29,
		"EAUTH_EDIT_APPLIED":     30,
		"EAUTH_EDIT_CHECKED":     31,
		"EAUTH_EDIT_NEEDLEVEL":   32,
		"EAUTH_MAX":              33,
	}
)

func (x EAuth) Enum() *EAuth {
	p := new(EAuth)
	*p = x
	return p
}

func (x EAuth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAuth) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[5].Descriptor()
}

func (EAuth) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[5]
}

func (x EAuth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAuth) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAuth(num)
	return nil
}

// Deprecated: Use EAuth.Descriptor instead.
func (EAuth) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{5}
}

type EGuildBuilding int32

const (
	EGuildBuilding_EGUILDBUILDING_MIN              EGuildBuilding = 0
	EGuildBuilding_EGUILDBUILDING_VENDING_MACHINE  EGuildBuilding = 1
	EGuildBuilding_EGUILDBUILDING_BAR              EGuildBuilding = 2
	EGuildBuilding_EGUILDBUILDING_CAT_LITTER_BOX   EGuildBuilding = 3
	EGuildBuilding_EGUILDBUILDING_MAGIC_SEWING     EGuildBuilding = 4
	EGuildBuilding_EGUILDBUILDING_HIGH_REFINE      EGuildBuilding = 5
	EGuildBuilding_EGUILDBUILDING_ARTIFACT_HEAD    EGuildBuilding = 6
	EGuildBuilding_EGUILDBUILDING_CAT_PILLOW       EGuildBuilding = 7
	EGuildBuilding_EGUILDBUILDING_MATERIAL_MACHINE EGuildBuilding = 8
	EGuildBuilding_EGUILDBUILDING_MAX              EGuildBuilding = 9
)

// Enum value maps for EGuildBuilding.
var (
	EGuildBuilding_name = map[int32]string{
		0: "EGUILDBUILDING_MIN",
		1: "EGUILDBUILDING_VENDING_MACHINE",
		2: "EGUILDBUILDING_BAR",
		3: "EGUILDBUILDING_CAT_LITTER_BOX",
		4: "EGUILDBUILDING_MAGIC_SEWING",
		5: "EGUILDBUILDING_HIGH_REFINE",
		6: "EGUILDBUILDING_ARTIFACT_HEAD",
		7: "EGUILDBUILDING_CAT_PILLOW",
		8: "EGUILDBUILDING_MATERIAL_MACHINE",
		9: "EGUILDBUILDING_MAX",
	}
	EGuildBuilding_value = map[string]int32{
		"EGUILDBUILDING_MIN":              0,
		"EGUILDBUILDING_VENDING_MACHINE":  1,
		"EGUILDBUILDING_BAR":              2,
		"EGUILDBUILDING_CAT_LITTER_BOX":   3,
		"EGUILDBUILDING_MAGIC_SEWING":     4,
		"EGUILDBUILDING_HIGH_REFINE":      5,
		"EGUILDBUILDING_ARTIFACT_HEAD":    6,
		"EGUILDBUILDING_CAT_PILLOW":       7,
		"EGUILDBUILDING_MATERIAL_MACHINE": 8,
		"EGUILDBUILDING_MAX":              9,
	}
)

func (x EGuildBuilding) Enum() *EGuildBuilding {
	p := new(EGuildBuilding)
	*p = x
	return p
}

func (x EGuildBuilding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGuildBuilding) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[6].Descriptor()
}

func (EGuildBuilding) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[6]
}

func (x EGuildBuilding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGuildBuilding) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGuildBuilding(num)
	return nil
}

// Deprecated: Use EGuildBuilding.Descriptor instead.
func (EGuildBuilding) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{6}
}

type EGuildWelfare int32

const (
	EGuildWelfare_EGUILDWELFARE_MIN       EGuildWelfare = 0
	EGuildWelfare_EGUILDWELFARE_BUILDING  EGuildWelfare = 1
	EGuildWelfare_EGUILDWELFARE_CHALLENGE EGuildWelfare = 2
	EGuildWelfare_EGUILDWELFARE_TREASURE  EGuildWelfare = 3
	EGuildWelfare_EGUILDWELFARE_MAX       EGuildWelfare = 4
)

// Enum value maps for EGuildWelfare.
var (
	EGuildWelfare_name = map[int32]string{
		0: "EGUILDWELFARE_MIN",
		1: "EGUILDWELFARE_BUILDING",
		2: "EGUILDWELFARE_CHALLENGE",
		3: "EGUILDWELFARE_TREASURE",
		4: "EGUILDWELFARE_MAX",
	}
	EGuildWelfare_value = map[string]int32{
		"EGUILDWELFARE_MIN":       0,
		"EGUILDWELFARE_BUILDING":  1,
		"EGUILDWELFARE_CHALLENGE": 2,
		"EGUILDWELFARE_TREASURE":  3,
		"EGUILDWELFARE_MAX":       4,
	}
)

func (x EGuildWelfare) Enum() *EGuildWelfare {
	p := new(EGuildWelfare)
	*p = x
	return p
}

func (x EGuildWelfare) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGuildWelfare) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[7].Descriptor()
}

func (EGuildWelfare) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[7]
}

func (x EGuildWelfare) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGuildWelfare) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGuildWelfare(num)
	return nil
}

// Deprecated: Use EGuildWelfare.Descriptor instead.
func (EGuildWelfare) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{7}
}

type ETreasureState int32

const (
	ETreasureState_ETREASURESTATE_MIN      ETreasureState = 0
	ETreasureState_ETREASURESTATE_UNGETED  ETreasureState = 1
	ETreasureState_ETREASURESTATE_GETED    ETreasureState = 2
	ETreasureState_ETREASURESTATE_UNENABLE ETreasureState = 3
	ETreasureState_ETREASURESTATE_MAX      ETreasureState = 4
)

// Enum value maps for ETreasureState.
var (
	ETreasureState_name = map[int32]string{
		0: "ETREASURESTATE_MIN",
		1: "ETREASURESTATE_UNGETED",
		2: "ETREASURESTATE_GETED",
		3: "ETREASURESTATE_UNENABLE",
		4: "ETREASURESTATE_MAX",
	}
	ETreasureState_value = map[string]int32{
		"ETREASURESTATE_MIN":      0,
		"ETREASURESTATE_UNGETED":  1,
		"ETREASURESTATE_GETED":    2,
		"ETREASURESTATE_UNENABLE": 3,
		"ETREASURESTATE_MAX":      4,
	}
)

func (x ETreasureState) Enum() *ETreasureState {
	p := new(ETreasureState)
	*p = x
	return p
}

func (x ETreasureState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETreasureState) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[8].Descriptor()
}

func (ETreasureState) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[8]
}

func (x ETreasureState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETreasureState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETreasureState(num)
	return nil
}

// Deprecated: Use ETreasureState.Descriptor instead.
func (ETreasureState) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{8}
}

type EGuildData int32

const (
	EGuildData_EGUILDDATA_MIN                    EGuildData = 0
	EGuildData_EGUILDDATA_ID                     EGuildData = 1
	EGuildData_EGUILDDATA_NAME                   EGuildData = 2
	EGuildData_EGUILDDATA_LEVEL                  EGuildData = 3
	EGuildData_EGUILDDATA_BOARDINFO              EGuildData = 6
	EGuildData_EGUILDDATA_RECRUITINFO            EGuildData = 7
	EGuildData_EGUILDDATA_PORTRAIT               EGuildData = 8
	EGuildData_EGUILDDATA_QUEST_RESETTIME        EGuildData = 9
	EGuildData_EGUILDDATA_ASSET                  EGuildData = 10
	EGuildData_EGUILDDATA_DISMISSTIME            EGuildData = 11
	EGuildData_EGUILDDATA_MEMBER                 EGuildData = 18
	EGuildData_EGUILDDATA_APPLY                  EGuildData = 19
	EGuildData_EGUILDDATA_MISC                   EGuildData = 20
	EGuildData_EGUILDDATA_PACK                   EGuildData = 21
	EGuildData_EGUILDDATA_ZONEID                 EGuildData = 22
	EGuildData_EGUILDDATA_ZONETIME               EGuildData = 23
	EGuildData_EGUILDDATA_NEXTZONE               EGuildData = 24
	EGuildData_EGUILDDATA_DONATETIME1            EGuildData = 25
	EGuildData_EGUILDDATA_DONATETIME2            EGuildData = 26
	EGuildData_EGUILDDATA_EVENT                  EGuildData = 27
	EGuildData_EGUILDDATA_DONATETIME3            EGuildData = 28
	EGuildData_EGUILDDATA_DONATETIME4            EGuildData = 29
	EGuildData_EGUILDDATA_ASSET_DAY              EGuildData = 37
	EGuildData_EGUILDDATA_PHOTO                  EGuildData = 38
	EGuildData_EGUILDDATA_CITYID                 EGuildData = 43
	EGuildData_EGUILDDATA_CITY_GIVEUP_CD         EGuildData = 44
	EGuildData_EGUILDDATA_OPEN_FUNCTION          EGuildData = 45
	EGuildData_EGUILDDATA_TREASURE_GVG_COUNT     EGuildData = 46
	EGuildData_EGUILDDATA_TREASURE_GUILD_COUNT   EGuildData = 47
	EGuildData_EGUILDDATA_TREASURE_BCOIN_COUNT   EGuildData = 48
	EGuildData_EGUILDDATA_SUPERGVG               EGuildData = 49
	EGuildData_EGUILDDATA_SUPERGVG_LV            EGuildData = 50
	EGuildData_EGUILDDATA_MATERIAL_MACHINE_COUNT EGuildData = 51
	EGuildData_EGUILDDATA_APPLIED                EGuildData = 52
	EGuildData_EGUILDDATA_CHECKED                EGuildData = 53
	EGuildData_EGUILDDATA_NEEDLEVEL              EGuildData = 54
	EGuildData_EGUILDDATA_CHAIRMAN               EGuildData = 55
	EGuildData_EGUILDDATA_COLDTIME               EGuildData = 56
	EGuildData_EGUILDDATA_MAXNUM                 EGuildData = 57
	EGuildData_EGUILDDATA_ACTIVE_AVERAGE         EGuildData = 58
	EGuildData_EGUILDDATA_MAX                    EGuildData = 59
)

// Enum value maps for EGuildData.
var (
	EGuildData_name = map[int32]string{
		0:  "EGUILDDATA_MIN",
		1:  "EGUILDDATA_ID",
		2:  "EGUILDDATA_NAME",
		3:  "EGUILDDATA_LEVEL",
		6:  "EGUILDDATA_BOARDINFO",
		7:  "EGUILDDATA_RECRUITINFO",
		8:  "EGUILDDATA_PORTRAIT",
		9:  "EGUILDDATA_QUEST_RESETTIME",
		10: "EGUILDDATA_ASSET",
		11: "EGUILDDATA_DISMISSTIME",
		18: "EGUILDDATA_MEMBER",
		19: "EGUILDDATA_APPLY",
		20: "EGUILDDATA_MISC",
		21: "EGUILDDATA_PACK",
		22: "EGUILDDATA_ZONEID",
		23: "EGUILDDATA_ZONETIME",
		24: "EGUILDDATA_NEXTZONE",
		25: "EGUILDDATA_DONATETIME1",
		26: "EGUILDDATA_DONATETIME2",
		27: "EGUILDDATA_EVENT",
		28: "EGUILDDATA_DONATETIME3",
		29: "EGUILDDATA_DONATETIME4",
		37: "EGUILDDATA_ASSET_DAY",
		38: "EGUILDDATA_PHOTO",
		43: "EGUILDDATA_CITYID",
		44: "EGUILDDATA_CITY_GIVEUP_CD",
		45: "EGUILDDATA_OPEN_FUNCTION",
		46: "EGUILDDATA_TREASURE_GVG_COUNT",
		47: "EGUILDDATA_TREASURE_GUILD_COUNT",
		48: "EGUILDDATA_TREASURE_BCOIN_COUNT",
		49: "EGUILDDATA_SUPERGVG",
		50: "EGUILDDATA_SUPERGVG_LV",
		51: "EGUILDDATA_MATERIAL_MACHINE_COUNT",
		52: "EGUILDDATA_APPLIED",
		53: "EGUILDDATA_CHECKED",
		54: "EGUILDDATA_NEEDLEVEL",
		55: "EGUILDDATA_CHAIRMAN",
		56: "EGUILDDATA_COLDTIME",
		57: "EGUILDDATA_MAXNUM",
		58: "EGUILDDATA_ACTIVE_AVERAGE",
		59: "EGUILDDATA_MAX",
	}
	EGuildData_value = map[string]int32{
		"EGUILDDATA_MIN":                    0,
		"EGUILDDATA_ID":                     1,
		"EGUILDDATA_NAME":                   2,
		"EGUILDDATA_LEVEL":                  3,
		"EGUILDDATA_BOARDINFO":              6,
		"EGUILDDATA_RECRUITINFO":            7,
		"EGUILDDATA_PORTRAIT":               8,
		"EGUILDDATA_QUEST_RESETTIME":        9,
		"EGUILDDATA_ASSET":                  10,
		"EGUILDDATA_DISMISSTIME":            11,
		"EGUILDDATA_MEMBER":                 18,
		"EGUILDDATA_APPLY":                  19,
		"EGUILDDATA_MISC":                   20,
		"EGUILDDATA_PACK":                   21,
		"EGUILDDATA_ZONEID":                 22,
		"EGUILDDATA_ZONETIME":               23,
		"EGUILDDATA_NEXTZONE":               24,
		"EGUILDDATA_DONATETIME1":            25,
		"EGUILDDATA_DONATETIME2":            26,
		"EGUILDDATA_EVENT":                  27,
		"EGUILDDATA_DONATETIME3":            28,
		"EGUILDDATA_DONATETIME4":            29,
		"EGUILDDATA_ASSET_DAY":              37,
		"EGUILDDATA_PHOTO":                  38,
		"EGUILDDATA_CITYID":                 43,
		"EGUILDDATA_CITY_GIVEUP_CD":         44,
		"EGUILDDATA_OPEN_FUNCTION":          45,
		"EGUILDDATA_TREASURE_GVG_COUNT":     46,
		"EGUILDDATA_TREASURE_GUILD_COUNT":   47,
		"EGUILDDATA_TREASURE_BCOIN_COUNT":   48,
		"EGUILDDATA_SUPERGVG":               49,
		"EGUILDDATA_SUPERGVG_LV":            50,
		"EGUILDDATA_MATERIAL_MACHINE_COUNT": 51,
		"EGUILDDATA_APPLIED":                52,
		"EGUILDDATA_CHECKED":                53,
		"EGUILDDATA_NEEDLEVEL":              54,
		"EGUILDDATA_CHAIRMAN":               55,
		"EGUILDDATA_COLDTIME":               56,
		"EGUILDDATA_MAXNUM":                 57,
		"EGUILDDATA_ACTIVE_AVERAGE":         58,
		"EGUILDDATA_MAX":                    59,
	}
)

func (x EGuildData) Enum() *EGuildData {
	p := new(EGuildData)
	*p = x
	return p
}

func (x EGuildData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGuildData) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[9].Descriptor()
}

func (EGuildData) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[9]
}

func (x EGuildData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGuildData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGuildData(num)
	return nil
}

// Deprecated: Use EGuildData.Descriptor instead.
func (EGuildData) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{9}
}

type EGuildList int32

const (
	EGuildList_EGUILDLIST_MEMBER EGuildList = 1
	EGuildList_EGUILDLIST_APPLY  EGuildList = 2
)

// Enum value maps for EGuildList.
var (
	EGuildList_name = map[int32]string{
		1: "EGUILDLIST_MEMBER",
		2: "EGUILDLIST_APPLY",
	}
	EGuildList_value = map[string]int32{
		"EGUILDLIST_MEMBER": 1,
		"EGUILDLIST_APPLY":  2,
	}
)

func (x EGuildList) Enum() *EGuildList {
	p := new(EGuildList)
	*p = x
	return p
}

func (x EGuildList) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGuildList) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[10].Descriptor()
}

func (EGuildList) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[10]
}

func (x EGuildList) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGuildList) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGuildList(num)
	return nil
}

// Deprecated: Use EGuildList.Descriptor instead.
func (EGuildList) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{10}
}

type EGuildMemberData int32

const (
	EGuildMemberData_EGUILDMEMBERDATA_MIN               EGuildMemberData = 0
	EGuildMemberData_EGUILDMEMBERDATA_BASELEVEL         EGuildMemberData = 1
	EGuildMemberData_EGUILDMEMBERDATA_WEEKCONTRIBUTION  EGuildMemberData = 2
	EGuildMemberData_EGUILDMEMBERDATA_CONTRIBUTION      EGuildMemberData = 3
	EGuildMemberData_EGUILDMEMBERDATA_TOTALCONTRIBUTION EGuildMemberData = 14
	EGuildMemberData_EGUILDMEMBERDATA_ENTERTIME         EGuildMemberData = 4
	EGuildMemberData_EGUILDMEMBERDATA_OFFLINETIME       EGuildMemberData = 5
	EGuildMemberData_EGUILDMEMBERDATA_PROFESSION        EGuildMemberData = 6
	EGuildMemberData_EGUILDMEMBERDATA_PORTRAIT          EGuildMemberData = 7
	EGuildMemberData_EGUILDMEMBERDATA_FRAME             EGuildMemberData = 8
	EGuildMemberData_EGUILDMEMBERDATA_HAIR              EGuildMemberData = 9
	EGuildMemberData_EGUILDMEMBERDATA_HAIRCOLOR         EGuildMemberData = 10
	EGuildMemberData_EGUILDMEMBERDATA_BODY              EGuildMemberData = 11
	EGuildMemberData_EGUILDMEMBERDATA_JOB               EGuildMemberData = 12
	EGuildMemberData_EGUILDMEMBERDATA_LEVELUPEFFECT     EGuildMemberData = 15
	EGuildMemberData_EGUILDMEMBERDATA_WEEKASSET         EGuildMemberData = 16
	EGuildMemberData_EGUILDMEMBERDATA_ASSET             EGuildMemberData = 17
	EGuildMemberData_EGUILDMEMBERDATA_ZONEID            EGuildMemberData = 18
	EGuildMemberData_EGUILDMEMBERDATA_NAME              EGuildMemberData = 19
	EGuildMemberData_EGUILDMEMBERDATA_ONLINETIME        EGuildMemberData = 20
	EGuildMemberData_EGUILDMEMBERDATA_HEAD              EGuildMemberData = 21
	EGuildMemberData_EGUILDMEMBERDATA_FACE              EGuildMemberData = 22
	EGuildMemberData_EGUILDMEMBERDATA_MOUTH             EGuildMemberData = 23
	EGuildMemberData_EGUILDMEMBERDATA_EYE               EGuildMemberData = 24
	EGuildMemberData_EGUILDMEMBERDATA_BUILDINGEFFECT    EGuildMemberData = 25
	EGuildMemberData_EGUILDMEMBERDATA_GENDER            EGuildMemberData = 26
	EGuildMemberData_EGUILDMEMBERDATA_REALTIMEVOICE     EGuildMemberData = 27
	EGuildMemberData_EGUILDMEMBERDATA_WEEKBCOIN         EGuildMemberData = 28
	EGuildMemberData_EGUILDMEMBERDATA_TOTALBCOIN        EGuildMemberData = 29
	EGuildMemberData_EGUILDMEMBERDATA_TEAMNAME          EGuildMemberData = 30
	EGuildMemberData_EGUILDMEMBERDATA_HOME_ROOMID       EGuildMemberData = 31
	EGuildMemberData_EGUILDMEMBERDATA_PORTRAIT_FRAME    EGuildMemberData = 32
	EGuildMemberData_EGUILDMEMBERDATA_MAX               EGuildMemberData = 33
)

// Enum value maps for EGuildMemberData.
var (
	EGuildMemberData_name = map[int32]string{
		0:  "EGUILDMEMBERDATA_MIN",
		1:  "EGUILDMEMBERDATA_BASELEVEL",
		2:  "EGUILDMEMBERDATA_WEEKCONTRIBUTION",
		3:  "EGUILDMEMBERDATA_CONTRIBUTION",
		14: "EGUILDMEMBERDATA_TOTALCONTRIBUTION",
		4:  "EGUILDMEMBERDATA_ENTERTIME",
		5:  "EGUILDMEMBERDATA_OFFLINETIME",
		6:  "EGUILDMEMBERDATA_PROFESSION",
		7:  "EGUILDMEMBERDATA_PORTRAIT",
		8:  "EGUILDMEMBERDATA_FRAME",
		9:  "EGUILDMEMBERDATA_HAIR",
		10: "EGUILDMEMBERDATA_HAIRCOLOR",
		11: "EGUILDMEMBERDATA_BODY",
		12: "EGUILDMEMBERDATA_JOB",
		15: "EGUILDMEMBERDATA_LEVELUPEFFECT",
		16: "EGUILDMEMBERDATA_WEEKASSET",
		17: "EGUILDMEMBERDATA_ASSET",
		18: "EGUILDMEMBERDATA_ZONEID",
		19: "EGUILDMEMBERDATA_NAME",
		20: "EGUILDMEMBERDATA_ONLINETIME",
		21: "EGUILDMEMBERDATA_HEAD",
		22: "EGUILDMEMBERDATA_FACE",
		23: "EGUILDMEMBERDATA_MOUTH",
		24: "EGUILDMEMBERDATA_EYE",
		25: "EGUILDMEMBERDATA_BUILDINGEFFECT",
		26: "EGUILDMEMBERDATA_GENDER",
		27: "EGUILDMEMBERDATA_REALTIMEVOICE",
		28: "EGUILDMEMBERDATA_WEEKBCOIN",
		29: "EGUILDMEMBERDATA_TOTALBCOIN",
		30: "EGUILDMEMBERDATA_TEAMNAME",
		31: "EGUILDMEMBERDATA_HOME_ROOMID",
		32: "EGUILDMEMBERDATA_PORTRAIT_FRAME",
		33: "EGUILDMEMBERDATA_MAX",
	}
	EGuildMemberData_value = map[string]int32{
		"EGUILDMEMBERDATA_MIN":               0,
		"EGUILDMEMBERDATA_BASELEVEL":         1,
		"EGUILDMEMBERDATA_WEEKCONTRIBUTION":  2,
		"EGUILDMEMBERDATA_CONTRIBUTION":      3,
		"EGUILDMEMBERDATA_TOTALCONTRIBUTION": 14,
		"EGUILDMEMBERDATA_ENTERTIME":         4,
		"EGUILDMEMBERDATA_OFFLINETIME":       5,
		"EGUILDMEMBERDATA_PROFESSION":        6,
		"EGUILDMEMBERDATA_PORTRAIT":          7,
		"EGUILDMEMBERDATA_FRAME":             8,
		"EGUILDMEMBERDATA_HAIR":              9,
		"EGUILDMEMBERDATA_HAIRCOLOR":         10,
		"EGUILDMEMBERDATA_BODY":              11,
		"EGUILDMEMBERDATA_JOB":               12,
		"EGUILDMEMBERDATA_LEVELUPEFFECT":     15,
		"EGUILDMEMBERDATA_WEEKASSET":         16,
		"EGUILDMEMBERDATA_ASSET":             17,
		"EGUILDMEMBERDATA_ZONEID":            18,
		"EGUILDMEMBERDATA_NAME":              19,
		"EGUILDMEMBERDATA_ONLINETIME":        20,
		"EGUILDMEMBERDATA_HEAD":              21,
		"EGUILDMEMBERDATA_FACE":              22,
		"EGUILDMEMBERDATA_MOUTH":             23,
		"EGUILDMEMBERDATA_EYE":               24,
		"EGUILDMEMBERDATA_BUILDINGEFFECT":    25,
		"EGUILDMEMBERDATA_GENDER":            26,
		"EGUILDMEMBERDATA_REALTIMEVOICE":     27,
		"EGUILDMEMBERDATA_WEEKBCOIN":         28,
		"EGUILDMEMBERDATA_TOTALBCOIN":        29,
		"EGUILDMEMBERDATA_TEAMNAME":          30,
		"EGUILDMEMBERDATA_HOME_ROOMID":       31,
		"EGUILDMEMBERDATA_PORTRAIT_FRAME":    32,
		"EGUILDMEMBERDATA_MAX":               33,
	}
)

func (x EGuildMemberData) Enum() *EGuildMemberData {
	p := new(EGuildMemberData)
	*p = x
	return p
}

func (x EGuildMemberData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGuildMemberData) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[11].Descriptor()
}

func (EGuildMemberData) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[11]
}

func (x EGuildMemberData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGuildMemberData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGuildMemberData(num)
	return nil
}

// Deprecated: Use EGuildMemberData.Descriptor instead.
func (EGuildMemberData) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{11}
}

type EGuildAction int32

const (
	EGuildAction_EGUILDACTION_MIN      EGuildAction = 0
	EGuildAction_EGUILDACTION_AGREE    EGuildAction = 1
	EGuildAction_EGUILDACTION_DISAGREE EGuildAction = 2
	EGuildAction_EGUILDACTION_MAX      EGuildAction = 3
)

// Enum value maps for EGuildAction.
var (
	EGuildAction_name = map[int32]string{
		0: "EGUILDACTION_MIN",
		1: "EGUILDACTION_AGREE",
		2: "EGUILDACTION_DISAGREE",
		3: "EGUILDACTION_MAX",
	}
	EGuildAction_value = map[string]int32{
		"EGUILDACTION_MIN":      0,
		"EGUILDACTION_AGREE":    1,
		"EGUILDACTION_DISAGREE": 2,
		"EGUILDACTION_MAX":      3,
	}
)

func (x EGuildAction) Enum() *EGuildAction {
	p := new(EGuildAction)
	*p = x
	return p
}

func (x EGuildAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGuildAction) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[12].Descriptor()
}

func (EGuildAction) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[12]
}

func (x EGuildAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGuildAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGuildAction(num)
	return nil
}

// Deprecated: Use EGuildAction.Descriptor instead.
func (EGuildAction) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{12}
}

type EPrayAction int32

const (
	EPrayAction_EPRAYACTION_MIN   EPrayAction = 0
	EPrayAction_EPRAYACTION_PRAY  EPrayAction = 1
	EPrayAction_EPRAYACTION_RESET EPrayAction = 2
	EPrayAction_EPRAYACTION_MAX   EPrayAction = 3
)

// Enum value maps for EPrayAction.
var (
	EPrayAction_name = map[int32]string{
		0: "EPRAYACTION_MIN",
		1: "EPRAYACTION_PRAY",
		2: "EPRAYACTION_RESET",
		3: "EPRAYACTION_MAX",
	}
	EPrayAction_value = map[string]int32{
		"EPRAYACTION_MIN":   0,
		"EPRAYACTION_PRAY":  1,
		"EPRAYACTION_RESET": 2,
		"EPRAYACTION_MAX":   3,
	}
)

func (x EPrayAction) Enum() *EPrayAction {
	p := new(EPrayAction)
	*p = x
	return p
}

func (x EPrayAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPrayAction) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[13].Descriptor()
}

func (EPrayAction) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[13]
}

func (x EPrayAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPrayAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPrayAction(num)
	return nil
}

// Deprecated: Use EPrayAction.Descriptor instead.
func (EPrayAction) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{13}
}

type EModify int32

const (
	EModify_EMODIFY_MIN      EModify = 0
	EModify_EMODIFY_AUTH     EModify = 1
	EModify_EMODIFY_EDITAUTH EModify = 2
	EModify_EMODIFY_MAX      EModify = 3
)

// Enum value maps for EModify.
var (
	EModify_name = map[int32]string{
		0: "EMODIFY_MIN",
		1: "EMODIFY_AUTH",
		2: "EMODIFY_EDITAUTH",
		3: "EMODIFY_MAX",
	}
	EModify_value = map[string]int32{
		"EMODIFY_MIN":      0,
		"EMODIFY_AUTH":     1,
		"EMODIFY_EDITAUTH": 2,
		"EMODIFY_MAX":      3,
	}
)

func (x EModify) Enum() *EModify {
	p := new(EModify)
	*p = x
	return p
}

func (x EModify) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EModify) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[14].Descriptor()
}

func (EModify) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[14]
}

func (x EModify) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EModify) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EModify(num)
	return nil
}

// Deprecated: Use EModify.Descriptor instead.
func (EModify) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{14}
}

type EGuildCityStatus int32

const (
	EGuildCityStatus_EGUILDCITYSTATUS_MIN    EGuildCityStatus = 0
	EGuildCityStatus_EGUILDCITYSTATUS_NONE   EGuildCityStatus = 1
	EGuildCityStatus_EGUILDCITYSTATUS_OCCUPY EGuildCityStatus = 2
	EGuildCityStatus_EGUILDCITYSTATUS_GIVEUP EGuildCityStatus = 3
	EGuildCityStatus_EGUILDCITYSTATUS_FINISH EGuildCityStatus = 4
	EGuildCityStatus_EGUILDCITYSTATUS_MAX    EGuildCityStatus = 5
)

// Enum value maps for EGuildCityStatus.
var (
	EGuildCityStatus_name = map[int32]string{
		0: "EGUILDCITYSTATUS_MIN",
		1: "EGUILDCITYSTATUS_NONE",
		2: "EGUILDCITYSTATUS_OCCUPY",
		3: "EGUILDCITYSTATUS_GIVEUP",
		4: "EGUILDCITYSTATUS_FINISH",
		5: "EGUILDCITYSTATUS_MAX",
	}
	EGuildCityStatus_value = map[string]int32{
		"EGUILDCITYSTATUS_MIN":    0,
		"EGUILDCITYSTATUS_NONE":   1,
		"EGUILDCITYSTATUS_OCCUPY": 2,
		"EGUILDCITYSTATUS_GIVEUP": 3,
		"EGUILDCITYSTATUS_FINISH": 4,
		"EGUILDCITYSTATUS_MAX":    5,
	}
)

func (x EGuildCityStatus) Enum() *EGuildCityStatus {
	p := new(EGuildCityStatus)
	*p = x
	return p
}

func (x EGuildCityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGuildCityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[15].Descriptor()
}

func (EGuildCityStatus) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[15]
}

func (x EGuildCityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGuildCityStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGuildCityStatus(num)
	return nil
}

// Deprecated: Use EGuildCityStatus.Descriptor instead.
func (EGuildCityStatus) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{15}
}

type ECityAction int32

const (
	ECityAction_ECITYACTION_MIN           ECityAction = 0
	ECityAction_ECITYACTION_GIVEUP        ECityAction = 1
	ECityAction_ECITYACTION_CANCEL_GIVEUP ECityAction = 2
	ECityAction_ECITYACTION_MAX           ECityAction = 3
)

// Enum value maps for ECityAction.
var (
	ECityAction_name = map[int32]string{
		0: "ECITYACTION_MIN",
		1: "ECITYACTION_GIVEUP",
		2: "ECITYACTION_CANCEL_GIVEUP",
		3: "ECITYACTION_MAX",
	}
	ECityAction_value = map[string]int32{
		"ECITYACTION_MIN":           0,
		"ECITYACTION_GIVEUP":        1,
		"ECITYACTION_CANCEL_GIVEUP": 2,
		"ECITYACTION_MAX":           3,
	}
)

func (x ECityAction) Enum() *ECityAction {
	p := new(ECityAction)
	*p = x
	return p
}

func (x ECityAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECityAction) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[16].Descriptor()
}

func (ECityAction) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[16]
}

func (x ECityAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECityAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECityAction(num)
	return nil
}

// Deprecated: Use ECityAction.Descriptor instead.
func (ECityAction) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{16}
}

type EIconState int32

const (
	EIconState_EICON_INIT   EIconState = 0
	EIconState_EICON_PASS   EIconState = 1
	EIconState_EICON_FORBID EIconState = 2
)

// Enum value maps for EIconState.
var (
	EIconState_name = map[int32]string{
		0: "EICON_INIT",
		1: "EICON_PASS",
		2: "EICON_FORBID",
	}
	EIconState_value = map[string]int32{
		"EICON_INIT":   0,
		"EICON_PASS":   1,
		"EICON_FORBID": 2,
	}
)

func (x EIconState) Enum() *EIconState {
	p := new(EIconState)
	*p = x
	return p
}

func (x EIconState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EIconState) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[17].Descriptor()
}

func (EIconState) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[17]
}

func (x EIconState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EIconState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EIconState(num)
	return nil
}

// Deprecated: Use EIconState.Descriptor instead.
func (EIconState) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{17}
}

type EArtifactOptType int32

const (
	EArtifactOptType_EARTIFACTOPTTYPE_MIN             EArtifactOptType = 0
	EArtifactOptType_EARTIFACTOPTTYPE_DISTRIBUTE      EArtifactOptType = 1
	EArtifactOptType_EARTIFACTOPTTYPE_RETRIEVE        EArtifactOptType = 2
	EArtifactOptType_EARTIFACTOPTTYPE_RETRIEVE_CANCEL EArtifactOptType = 3
	EArtifactOptType_EARTIFACTOPTTYPE_GIVEBACK        EArtifactOptType = 4
	EArtifactOptType_EARTIFACTOPTTYPE_MAX             EArtifactOptType = 5
)

// Enum value maps for EArtifactOptType.
var (
	EArtifactOptType_name = map[int32]string{
		0: "EARTIFACTOPTTYPE_MIN",
		1: "EARTIFACTOPTTYPE_DISTRIBUTE",
		2: "EARTIFACTOPTTYPE_RETRIEVE",
		3: "EARTIFACTOPTTYPE_RETRIEVE_CANCEL",
		4: "EARTIFACTOPTTYPE_GIVEBACK",
		5: "EARTIFACTOPTTYPE_MAX",
	}
	EArtifactOptType_value = map[string]int32{
		"EARTIFACTOPTTYPE_MIN":             0,
		"EARTIFACTOPTTYPE_DISTRIBUTE":      1,
		"EARTIFACTOPTTYPE_RETRIEVE":        2,
		"EARTIFACTOPTTYPE_RETRIEVE_CANCEL": 3,
		"EARTIFACTOPTTYPE_GIVEBACK":        4,
		"EARTIFACTOPTTYPE_MAX":             5,
	}
)

func (x EArtifactOptType) Enum() *EArtifactOptType {
	p := new(EArtifactOptType)
	*p = x
	return p
}

func (x EArtifactOptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EArtifactOptType) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[18].Descriptor()
}

func (EArtifactOptType) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[18]
}

func (x EArtifactOptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EArtifactOptType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EArtifactOptType(num)
	return nil
}

// Deprecated: Use EArtifactOptType.Descriptor instead.
func (EArtifactOptType) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{18}
}

type EGuildTreasureType int32

const (
	EGuildTreasureType_EGUILDTREASURETYPE_MIN         EGuildTreasureType = 0
	EGuildTreasureType_EGUILDTREASURETYPE_GVG         EGuildTreasureType = 1
	EGuildTreasureType_EGUILDTREASURETYPE_GUILD_BCOIN EGuildTreasureType = 2
	EGuildTreasureType_EGUILDTREASURETYPE_GUILD_ASSET EGuildTreasureType = 3
	EGuildTreasureType_EGUILDTREASURETYPE_PREVIEW     EGuildTreasureType = 4
	EGuildTreasureType_EGUILDTREASURETYPE_MAX         EGuildTreasureType = 5
)

// Enum value maps for EGuildTreasureType.
var (
	EGuildTreasureType_name = map[int32]string{
		0: "EGUILDTREASURETYPE_MIN",
		1: "EGUILDTREASURETYPE_GVG",
		2: "EGUILDTREASURETYPE_GUILD_BCOIN",
		3: "EGUILDTREASURETYPE_GUILD_ASSET",
		4: "EGUILDTREASURETYPE_PREVIEW",
		5: "EGUILDTREASURETYPE_MAX",
	}
	EGuildTreasureType_value = map[string]int32{
		"EGUILDTREASURETYPE_MIN":         0,
		"EGUILDTREASURETYPE_GVG":         1,
		"EGUILDTREASURETYPE_GUILD_BCOIN": 2,
		"EGUILDTREASURETYPE_GUILD_ASSET": 3,
		"EGUILDTREASURETYPE_PREVIEW":     4,
		"EGUILDTREASURETYPE_MAX":         5,
	}
)

func (x EGuildTreasureType) Enum() *EGuildTreasureType {
	p := new(EGuildTreasureType)
	*p = x
	return p
}

func (x EGuildTreasureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGuildTreasureType) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[19].Descriptor()
}

func (EGuildTreasureType) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[19]
}

func (x EGuildTreasureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGuildTreasureType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGuildTreasureType(num)
	return nil
}

// Deprecated: Use EGuildTreasureType.Descriptor instead.
func (EGuildTreasureType) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{19}
}

type ETreasureAction int32

const (
	ETreasureAction_ETREASUREACTION_MIN            ETreasureAction = 0
	ETreasureAction_ETREASUREACTION_GVG_FRAME_ON   ETreasureAction = 1
	ETreasureAction_ETREASUREACTION_GUILD_FRAME_ON ETreasureAction = 2
	ETreasureAction_ETREASUREACTION_FRAME_OFF      ETreasureAction = 3
	ETreasureAction_ETREASUREACTION_LEFT           ETreasureAction = 4
	ETreasureAction_ETREASUREACTION_RIGHT          ETreasureAction = 5
	ETreasureAction_ETREASUREACTION_OPEN_GVG       ETreasureAction = 6
	ETreasureAction_ETREASUREACTION_OPEN_GUILD     ETreasureAction = 7
	ETreasureAction_ETREASUREACTION_MAX            ETreasureAction = 8
)

// Enum value maps for ETreasureAction.
var (
	ETreasureAction_name = map[int32]string{
		0: "ETREASUREACTION_MIN",
		1: "ETREASUREACTION_GVG_FRAME_ON",
		2: "ETREASUREACTION_GUILD_FRAME_ON",
		3: "ETREASUREACTION_FRAME_OFF",
		4: "ETREASUREACTION_LEFT",
		5: "ETREASUREACTION_RIGHT",
		6: "ETREASUREACTION_OPEN_GVG",
		7: "ETREASUREACTION_OPEN_GUILD",
		8: "ETREASUREACTION_MAX",
	}
	ETreasureAction_value = map[string]int32{
		"ETREASUREACTION_MIN":            0,
		"ETREASUREACTION_GVG_FRAME_ON":   1,
		"ETREASUREACTION_GUILD_FRAME_ON": 2,
		"ETREASUREACTION_FRAME_OFF":      3,
		"ETREASUREACTION_LEFT":           4,
		"ETREASUREACTION_RIGHT":          5,
		"ETREASUREACTION_OPEN_GVG":       6,
		"ETREASUREACTION_OPEN_GUILD":     7,
		"ETREASUREACTION_MAX":            8,
	}
)

func (x ETreasureAction) Enum() *ETreasureAction {
	p := new(ETreasureAction)
	*p = x
	return p
}

func (x ETreasureAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETreasureAction) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[20].Descriptor()
}

func (ETreasureAction) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[20]
}

func (x ETreasureAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETreasureAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETreasureAction(num)
	return nil
}

// Deprecated: Use ETreasureAction.Descriptor instead.
func (ETreasureAction) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{20}
}

type ETreasurePoint int32

const (
	ETreasurePoint_ETREASUREPOINT_MIN   ETreasurePoint = 0
	ETreasurePoint_ETREASUREPOINT_LEFT  ETreasurePoint = 1
	ETreasurePoint_ETREASUREPOINT_RIGHT ETreasurePoint = 2
	ETreasurePoint_ETREASUREPOINT_NONE  ETreasurePoint = 3
	ETreasurePoint_ETREASUREPOINT_ALL   ETreasurePoint = 4
)

// Enum value maps for ETreasurePoint.
var (
	ETreasurePoint_name = map[int32]string{
		0: "ETREASUREPOINT_MIN",
		1: "ETREASUREPOINT_LEFT",
		2: "ETREASUREPOINT_RIGHT",
		3: "ETREASUREPOINT_NONE",
		4: "ETREASUREPOINT_ALL",
	}
	ETreasurePoint_value = map[string]int32{
		"ETREASUREPOINT_MIN":   0,
		"ETREASUREPOINT_LEFT":  1,
		"ETREASUREPOINT_RIGHT": 2,
		"ETREASUREPOINT_NONE":  3,
		"ETREASUREPOINT_ALL":   4,
	}
)

func (x ETreasurePoint) Enum() *ETreasurePoint {
	p := new(ETreasurePoint)
	*p = x
	return p
}

func (x ETreasurePoint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETreasurePoint) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[21].Descriptor()
}

func (ETreasurePoint) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[21]
}

func (x ETreasurePoint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETreasurePoint) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETreasurePoint(num)
	return nil
}

// Deprecated: Use ETreasurePoint.Descriptor instead.
func (ETreasurePoint) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{21}
}

type EGCityState int32

const (
	EGCityState_EGCITYSTATE_MIN        EGCityState = 0
	EGCityState_EGCITYSTATE_CRIFIRE    EGCityState = 1
	EGCityState_EGCITYSTATE_ATTFIRE    EGCityState = 2
	EGCityState_EGCITYSTATE_DEFFIRE    EGCityState = 3
	EGCityState_EGCITYSTATE_NORMALFIRE EGCityState = 4
	EGCityState_EGCITYSTATE_PERFECT    EGCityState = 5
	EGCityState_EGCITYSTATE_NOOWNER    EGCityState = 6
	EGCityState_EGCITYSTATE_OCCUPY     EGCityState = 7
)

// Enum value maps for EGCityState.
var (
	EGCityState_name = map[int32]string{
		0: "EGCITYSTATE_MIN",
		1: "EGCITYSTATE_CRIFIRE",
		2: "EGCITYSTATE_ATTFIRE",
		3: "EGCITYSTATE_DEFFIRE",
		4: "EGCITYSTATE_NORMALFIRE",
		5: "EGCITYSTATE_PERFECT",
		6: "EGCITYSTATE_NOOWNER",
		7: "EGCITYSTATE_OCCUPY",
	}
	EGCityState_value = map[string]int32{
		"EGCITYSTATE_MIN":        0,
		"EGCITYSTATE_CRIFIRE":    1,
		"EGCITYSTATE_ATTFIRE":    2,
		"EGCITYSTATE_DEFFIRE":    3,
		"EGCITYSTATE_NORMALFIRE": 4,
		"EGCITYSTATE_PERFECT":    5,
		"EGCITYSTATE_NOOWNER":    6,
		"EGCITYSTATE_OCCUPY":     7,
	}
)

func (x EGCityState) Enum() *EGCityState {
	p := new(EGCityState)
	*p = x
	return p
}

func (x EGCityState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGCityState) Descriptor() protoreflect.EnumDescriptor {
	return file_GuildCmd_proto_enumTypes[22].Descriptor()
}

func (EGCityState) Type() protoreflect.EnumType {
	return &file_GuildCmd_proto_enumTypes[22]
}

func (x EGCityState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGCityState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGCityState(num)
	return nil
}

// Deprecated: Use EGCityState.Descriptor instead.
func (EGCityState) EnumDescriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{22}
}

type GuildPrayCFG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prayid *uint32     `protobuf:"varint,1,opt,name=prayid,def=0" json:"prayid,omitempty"`
	Praylv *uint32     `protobuf:"varint,2,opt,name=praylv,def=0" json:"praylv,omitempty"`
	Type   *EPrayType  `protobuf:"varint,3,opt,name=type,enum=Cmd.EPrayType,def=0" json:"type,omitempty"`
	Attrs  []*UserAttr `protobuf:"bytes,4,rep,name=attrs" json:"attrs,omitempty"`
	Costs  []*ItemInfo `protobuf:"bytes,5,rep,name=costs" json:"costs,omitempty"`
}

// Default values for GuildPrayCFG fields.
const (
	Default_GuildPrayCFG_Prayid = uint32(0)
	Default_GuildPrayCFG_Praylv = uint32(0)
	Default_GuildPrayCFG_Type   = EPrayType_EPRAYTYPE_GODDESS
)

func (x *GuildPrayCFG) Reset() {
	*x = GuildPrayCFG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildPrayCFG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildPrayCFG) ProtoMessage() {}

func (x *GuildPrayCFG) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildPrayCFG.ProtoReflect.Descriptor instead.
func (*GuildPrayCFG) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{0}
}

func (x *GuildPrayCFG) GetPrayid() uint32 {
	if x != nil && x.Prayid != nil {
		return *x.Prayid
	}
	return Default_GuildPrayCFG_Prayid
}

func (x *GuildPrayCFG) GetPraylv() uint32 {
	if x != nil && x.Praylv != nil {
		return *x.Praylv
	}
	return Default_GuildPrayCFG_Praylv
}

func (x *GuildPrayCFG) GetType() EPrayType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_GuildPrayCFG_Type
}

func (x *GuildPrayCFG) GetAttrs() []*UserAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *GuildPrayCFG) GetCosts() []*ItemInfo {
	if x != nil {
		return x.Costs
	}
	return nil
}

type GuildMemberPray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pray *uint32         `protobuf:"varint,1,opt,name=pray,def=0" json:"pray,omitempty"`
	Lv   *uint32         `protobuf:"varint,2,opt,name=lv,def=0" json:"lv,omitempty"`
	Cur  *GuildPrayCFG   `protobuf:"bytes,3,opt,name=cur" json:"cur,omitempty"`
	Next []*GuildPrayCFG `protobuf:"bytes,4,rep,name=next" json:"next,omitempty"`
}

// Default values for GuildMemberPray fields.
const (
	Default_GuildMemberPray_Pray = uint32(0)
	Default_GuildMemberPray_Lv   = uint32(0)
)

func (x *GuildMemberPray) Reset() {
	*x = GuildMemberPray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMemberPray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMemberPray) ProtoMessage() {}

func (x *GuildMemberPray) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMemberPray.ProtoReflect.Descriptor instead.
func (*GuildMemberPray) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{1}
}

func (x *GuildMemberPray) GetPray() uint32 {
	if x != nil && x.Pray != nil {
		return *x.Pray
	}
	return Default_GuildMemberPray_Pray
}

func (x *GuildMemberPray) GetLv() uint32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return Default_GuildMemberPray_Lv
}

func (x *GuildMemberPray) GetCur() *GuildPrayCFG {
	if x != nil {
		return x.Cur
	}
	return nil
}

func (x *GuildMemberPray) GetNext() []*GuildPrayCFG {
	if x != nil {
		return x.Next
	}
	return nil
}

type BlobGuildPray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prays []*GuildMemberPray `protobuf:"bytes,1,rep,name=prays" json:"prays,omitempty"`
}

func (x *BlobGuildPray) Reset() {
	*x = BlobGuildPray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobGuildPray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobGuildPray) ProtoMessage() {}

func (x *BlobGuildPray) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobGuildPray.ProtoReflect.Descriptor instead.
func (*BlobGuildPray) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{2}
}

func (x *BlobGuildPray) GetPrays() []*GuildMemberPray {
	if x != nil {
		return x.Prays
	}
	return nil
}

type BlobDonate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items       []*DonateItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Steps       []uint32      `protobuf:"varint,2,rep,name=steps" json:"steps,omitempty"`
	Donatetime1 *uint32       `protobuf:"varint,3,opt,name=donatetime1,def=0" json:"donatetime1,omitempty"`
	Donatetime2 *uint32       `protobuf:"varint,4,opt,name=donatetime2,def=0" json:"donatetime2,omitempty"`
	Donatetime3 *uint32       `protobuf:"varint,5,opt,name=donatetime3,def=0" json:"donatetime3,omitempty"`
	Donatetime4 *uint32       `protobuf:"varint,6,opt,name=donatetime4,def=0" json:"donatetime4,omitempty"`
}

// Default values for BlobDonate fields.
const (
	Default_BlobDonate_Donatetime1 = uint32(0)
	Default_BlobDonate_Donatetime2 = uint32(0)
	Default_BlobDonate_Donatetime3 = uint32(0)
	Default_BlobDonate_Donatetime4 = uint32(0)
)

func (x *BlobDonate) Reset() {
	*x = BlobDonate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobDonate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobDonate) ProtoMessage() {}

func (x *BlobDonate) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobDonate.ProtoReflect.Descriptor instead.
func (*BlobDonate) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{3}
}

func (x *BlobDonate) GetItems() []*DonateItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *BlobDonate) GetSteps() []uint32 {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *BlobDonate) GetDonatetime1() uint32 {
	if x != nil && x.Donatetime1 != nil {
		return *x.Donatetime1
	}
	return Default_BlobDonate_Donatetime1
}

func (x *BlobDonate) GetDonatetime2() uint32 {
	if x != nil && x.Donatetime2 != nil {
		return *x.Donatetime2
	}
	return Default_BlobDonate_Donatetime2
}

func (x *BlobDonate) GetDonatetime3() uint32 {
	if x != nil && x.Donatetime3 != nil {
		return *x.Donatetime3
	}
	return Default_BlobDonate_Donatetime3
}

func (x *BlobDonate) GetDonatetime4() uint32 {
	if x != nil && x.Donatetime4 != nil {
		return *x.Donatetime4
	}
	return Default_BlobDonate_Donatetime4
}

type UserGuildBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             *EGuildBuilding `protobuf:"varint,1,opt,name=type,enum=Cmd.EGuildBuilding,def=0" json:"type,omitempty"`
	Submitcount      *uint32         `protobuf:"varint,2,opt,name=submitcount,def=0" json:"submitcount,omitempty"`
	Nextwelfaretime  *uint32         `protobuf:"varint,3,opt,name=nextwelfaretime,def=0" json:"nextwelfaretime,omitempty"`
	Levelupeffect    *bool           `protobuf:"varint,4,opt,name=levelupeffect,def=0" json:"levelupeffect,omitempty"`
	Submitcounttotal *uint32         `protobuf:"varint,5,opt,name=submitcounttotal,def=0" json:"submitcounttotal,omitempty"`
	Submittime       *uint32         `protobuf:"varint,6,opt,name=submittime,def=0" json:"submittime,omitempty"`
}

// Default values for UserGuildBuilding fields.
const (
	Default_UserGuildBuilding_Type             = EGuildBuilding_EGUILDBUILDING_MIN
	Default_UserGuildBuilding_Submitcount      = uint32(0)
	Default_UserGuildBuilding_Nextwelfaretime  = uint32(0)
	Default_UserGuildBuilding_Levelupeffect    = bool(false)
	Default_UserGuildBuilding_Submitcounttotal = uint32(0)
	Default_UserGuildBuilding_Submittime       = uint32(0)
)

func (x *UserGuildBuilding) Reset() {
	*x = UserGuildBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGuildBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGuildBuilding) ProtoMessage() {}

func (x *UserGuildBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGuildBuilding.ProtoReflect.Descriptor instead.
func (*UserGuildBuilding) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{4}
}

func (x *UserGuildBuilding) GetType() EGuildBuilding {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_UserGuildBuilding_Type
}

func (x *UserGuildBuilding) GetSubmitcount() uint32 {
	if x != nil && x.Submitcount != nil {
		return *x.Submitcount
	}
	return Default_UserGuildBuilding_Submitcount
}

func (x *UserGuildBuilding) GetNextwelfaretime() uint32 {
	if x != nil && x.Nextwelfaretime != nil {
		return *x.Nextwelfaretime
	}
	return Default_UserGuildBuilding_Nextwelfaretime
}

func (x *UserGuildBuilding) GetLevelupeffect() bool {
	if x != nil && x.Levelupeffect != nil {
		return *x.Levelupeffect
	}
	return Default_UserGuildBuilding_Levelupeffect
}

func (x *UserGuildBuilding) GetSubmitcounttotal() uint32 {
	if x != nil && x.Submitcounttotal != nil {
		return *x.Submitcounttotal
	}
	return Default_UserGuildBuilding_Submitcounttotal
}

func (x *UserGuildBuilding) GetSubmittime() uint32 {
	if x != nil && x.Submittime != nil {
		return *x.Submittime
	}
	return Default_UserGuildBuilding_Submittime
}

type BlobGuildBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buildings []*UserGuildBuilding `protobuf:"bytes,1,rep,name=buildings" json:"buildings,omitempty"`
}

func (x *BlobGuildBuilding) Reset() {
	*x = BlobGuildBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobGuildBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobGuildBuilding) ProtoMessage() {}

func (x *BlobGuildBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobGuildBuilding.ProtoReflect.Descriptor instead.
func (*BlobGuildBuilding) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{5}
}

func (x *BlobGuildBuilding) GetBuildings() []*UserGuildBuilding {
	if x != nil {
		return x.Buildings
	}
	return nil
}

type GuildMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid            *uint64            `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Baselevel         *uint32            `protobuf:"varint,2,opt,name=baselevel,def=0" json:"baselevel,omitempty"`
	Portrait          *uint32            `protobuf:"varint,3,opt,name=portrait,def=0" json:"portrait,omitempty"`
	Frame             *uint32            `protobuf:"varint,4,opt,name=frame,def=0" json:"frame,omitempty"`
	Weekcontribution  *uint32            `protobuf:"varint,5,opt,name=weekcontribution,def=0" json:"weekcontribution,omitempty"`
	Contribution      *uint32            `protobuf:"varint,6,opt,name=contribution,def=0" json:"contribution,omitempty"`
	Totalcontribution *uint32            `protobuf:"varint,19,opt,name=totalcontribution,def=0" json:"totalcontribution,omitempty"`
	Entertime         *uint32            `protobuf:"varint,7,opt,name=entertime,def=0" json:"entertime,omitempty"`
	Offlinetime       *uint32            `protobuf:"varint,8,opt,name=offlinetime,def=0" json:"offlinetime,omitempty"`
	Giftpoint         *uint32            `protobuf:"varint,9,opt,name=giftpoint,def=0" json:"giftpoint,omitempty"`
	Hair              *uint32            `protobuf:"varint,16,opt,name=hair,def=0" json:"hair,omitempty"`
	Haircolor         *uint32            `protobuf:"varint,17,opt,name=haircolor,def=0" json:"haircolor,omitempty"`
	Body              *uint32            `protobuf:"varint,18,opt,name=body,def=0" json:"body,omitempty"`
	Weekasset         *uint32            `protobuf:"varint,22,opt,name=weekasset,def=0" json:"weekasset,omitempty"`
	Asset             *uint32            `protobuf:"varint,23,opt,name=asset,def=0" json:"asset,omitempty"`
	Zoneid            *uint32            `protobuf:"varint,24,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Head              *uint32            `protobuf:"varint,25,opt,name=head,def=0" json:"head,omitempty"`
	Face              *uint32            `protobuf:"varint,28,opt,name=face,def=0" json:"face,omitempty"`
	Mouth             *uint32            `protobuf:"varint,29,opt,name=mouth,def=0" json:"mouth,omitempty"`
	Eye               *uint32            `protobuf:"varint,30,opt,name=eye,def=0" json:"eye,omitempty"`
	Roomid            *uint32            `protobuf:"varint,40,opt,name=roomid,def=0" json:"roomid,omitempty"`
	Gender            *EGender           `protobuf:"varint,10,opt,name=gender,enum=Cmd.EGender,def=0" json:"gender,omitempty"`
	Profession        *EProfession       `protobuf:"varint,11,opt,name=profession,enum=Cmd.EProfession,def=0" json:"profession,omitempty"`
	Job               *EGuildJob         `protobuf:"varint,12,opt,name=job,enum=Cmd.EGuildJob,def=0" json:"job,omitempty"`
	Name              *string            `protobuf:"bytes,13,opt,name=name" json:"name,omitempty"`
	Var               []byte             `protobuf:"bytes,14,opt,name=var" json:"var,omitempty"`
	Pray              *BlobGuildPray     `protobuf:"bytes,15,opt,name=pray" json:"pray,omitempty"`
	Donate            *BlobDonate        `protobuf:"bytes,21,opt,name=donate" json:"donate,omitempty"`
	Levelupeffect     *bool              `protobuf:"varint,20,opt,name=levelupeffect,def=0" json:"levelupeffect,omitempty"`
	Exchangezone      *bool              `protobuf:"varint,26,opt,name=exchangezone,def=0" json:"exchangezone,omitempty"`
	Accid             *uint32            `protobuf:"varint,27,opt,name=accid" json:"accid,omitempty"`
	Building          *BlobGuildBuilding `protobuf:"bytes,31,opt,name=building" json:"building,omitempty"`
	Challenge         *uint64            `protobuf:"varint,32,opt,name=challenge,def=0" json:"challenge,omitempty"`
	Lastexittime      *uint32            `protobuf:"varint,33,opt,name=lastexittime,def=0" json:"lastexittime,omitempty"`
	Redtip            *uint64            `protobuf:"varint,34,opt,name=redtip,def=0" json:"redtip,omitempty"`
	Buildingeffect    *bool              `protobuf:"varint,35,opt,name=buildingeffect,def=0" json:"buildingeffect,omitempty"`
	Realtimevoice     *bool              `protobuf:"varint,36,opt,name=realtimevoice,def=0" json:"realtimevoice,omitempty"`
	Weekbcoin         *uint32            `protobuf:"varint,37,opt,name=weekbcoin,def=0" json:"weekbcoin,omitempty"`
	Totalcoin         *uint32            `protobuf:"varint,38,opt,name=totalcoin,def=0" json:"totalcoin,omitempty"`
	Teamname          *string            `protobuf:"bytes,39,opt,name=teamname" json:"teamname,omitempty"`
	PortraitFrame     *uint32            `protobuf:"varint,41,opt,name=portrait_frame,json=portraitFrame,def=0" json:"portrait_frame,omitempty"`
	BifrostScore      *uint32            `protobuf:"varint,42,opt,name=bifrost_score,json=bifrostScore,def=0" json:"bifrost_score,omitempty"`
}

// Default values for GuildMember fields.
const (
	Default_GuildMember_Charid            = uint64(0)
	Default_GuildMember_Baselevel         = uint32(0)
	Default_GuildMember_Portrait          = uint32(0)
	Default_GuildMember_Frame             = uint32(0)
	Default_GuildMember_Weekcontribution  = uint32(0)
	Default_GuildMember_Contribution      = uint32(0)
	Default_GuildMember_Totalcontribution = uint32(0)
	Default_GuildMember_Entertime         = uint32(0)
	Default_GuildMember_Offlinetime       = uint32(0)
	Default_GuildMember_Giftpoint         = uint32(0)
	Default_GuildMember_Hair              = uint32(0)
	Default_GuildMember_Haircolor         = uint32(0)
	Default_GuildMember_Body              = uint32(0)
	Default_GuildMember_Weekasset         = uint32(0)
	Default_GuildMember_Asset             = uint32(0)
	Default_GuildMember_Zoneid            = uint32(0)
	Default_GuildMember_Head              = uint32(0)
	Default_GuildMember_Face              = uint32(0)
	Default_GuildMember_Mouth             = uint32(0)
	Default_GuildMember_Eye               = uint32(0)
	Default_GuildMember_Roomid            = uint32(0)
	Default_GuildMember_Gender            = EGender_EGENDER_MIN
	Default_GuildMember_Profession        = EProfession_EPROFESSION_MIN
	Default_GuildMember_Job               = EGuildJob_EGUILDJOB_MIN
	Default_GuildMember_Levelupeffect     = bool(false)
	Default_GuildMember_Exchangezone      = bool(false)
	Default_GuildMember_Challenge         = uint64(0)
	Default_GuildMember_Lastexittime      = uint32(0)
	Default_GuildMember_Redtip            = uint64(0)
	Default_GuildMember_Buildingeffect    = bool(false)
	Default_GuildMember_Realtimevoice     = bool(false)
	Default_GuildMember_Weekbcoin         = uint32(0)
	Default_GuildMember_Totalcoin         = uint32(0)
	Default_GuildMember_PortraitFrame     = uint32(0)
	Default_GuildMember_BifrostScore      = uint32(0)
)

func (x *GuildMember) Reset() {
	*x = GuildMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMember) ProtoMessage() {}

func (x *GuildMember) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMember.ProtoReflect.Descriptor instead.
func (*GuildMember) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{6}
}

func (x *GuildMember) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_GuildMember_Charid
}

func (x *GuildMember) GetBaselevel() uint32 {
	if x != nil && x.Baselevel != nil {
		return *x.Baselevel
	}
	return Default_GuildMember_Baselevel
}

func (x *GuildMember) GetPortrait() uint32 {
	if x != nil && x.Portrait != nil {
		return *x.Portrait
	}
	return Default_GuildMember_Portrait
}

func (x *GuildMember) GetFrame() uint32 {
	if x != nil && x.Frame != nil {
		return *x.Frame
	}
	return Default_GuildMember_Frame
}

func (x *GuildMember) GetWeekcontribution() uint32 {
	if x != nil && x.Weekcontribution != nil {
		return *x.Weekcontribution
	}
	return Default_GuildMember_Weekcontribution
}

func (x *GuildMember) GetContribution() uint32 {
	if x != nil && x.Contribution != nil {
		return *x.Contribution
	}
	return Default_GuildMember_Contribution
}

func (x *GuildMember) GetTotalcontribution() uint32 {
	if x != nil && x.Totalcontribution != nil {
		return *x.Totalcontribution
	}
	return Default_GuildMember_Totalcontribution
}

func (x *GuildMember) GetEntertime() uint32 {
	if x != nil && x.Entertime != nil {
		return *x.Entertime
	}
	return Default_GuildMember_Entertime
}

func (x *GuildMember) GetOfflinetime() uint32 {
	if x != nil && x.Offlinetime != nil {
		return *x.Offlinetime
	}
	return Default_GuildMember_Offlinetime
}

func (x *GuildMember) GetGiftpoint() uint32 {
	if x != nil && x.Giftpoint != nil {
		return *x.Giftpoint
	}
	return Default_GuildMember_Giftpoint
}

func (x *GuildMember) GetHair() uint32 {
	if x != nil && x.Hair != nil {
		return *x.Hair
	}
	return Default_GuildMember_Hair
}

func (x *GuildMember) GetHaircolor() uint32 {
	if x != nil && x.Haircolor != nil {
		return *x.Haircolor
	}
	return Default_GuildMember_Haircolor
}

func (x *GuildMember) GetBody() uint32 {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return Default_GuildMember_Body
}

func (x *GuildMember) GetWeekasset() uint32 {
	if x != nil && x.Weekasset != nil {
		return *x.Weekasset
	}
	return Default_GuildMember_Weekasset
}

func (x *GuildMember) GetAsset() uint32 {
	if x != nil && x.Asset != nil {
		return *x.Asset
	}
	return Default_GuildMember_Asset
}

func (x *GuildMember) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_GuildMember_Zoneid
}

func (x *GuildMember) GetHead() uint32 {
	if x != nil && x.Head != nil {
		return *x.Head
	}
	return Default_GuildMember_Head
}

func (x *GuildMember) GetFace() uint32 {
	if x != nil && x.Face != nil {
		return *x.Face
	}
	return Default_GuildMember_Face
}

func (x *GuildMember) GetMouth() uint32 {
	if x != nil && x.Mouth != nil {
		return *x.Mouth
	}
	return Default_GuildMember_Mouth
}

func (x *GuildMember) GetEye() uint32 {
	if x != nil && x.Eye != nil {
		return *x.Eye
	}
	return Default_GuildMember_Eye
}

func (x *GuildMember) GetRoomid() uint32 {
	if x != nil && x.Roomid != nil {
		return *x.Roomid
	}
	return Default_GuildMember_Roomid
}

func (x *GuildMember) GetGender() EGender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Default_GuildMember_Gender
}

func (x *GuildMember) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return Default_GuildMember_Profession
}

func (x *GuildMember) GetJob() EGuildJob {
	if x != nil && x.Job != nil {
		return *x.Job
	}
	return Default_GuildMember_Job
}

func (x *GuildMember) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GuildMember) GetVar() []byte {
	if x != nil {
		return x.Var
	}
	return nil
}

func (x *GuildMember) GetPray() *BlobGuildPray {
	if x != nil {
		return x.Pray
	}
	return nil
}

func (x *GuildMember) GetDonate() *BlobDonate {
	if x != nil {
		return x.Donate
	}
	return nil
}

func (x *GuildMember) GetLevelupeffect() bool {
	if x != nil && x.Levelupeffect != nil {
		return *x.Levelupeffect
	}
	return Default_GuildMember_Levelupeffect
}

func (x *GuildMember) GetExchangezone() bool {
	if x != nil && x.Exchangezone != nil {
		return *x.Exchangezone
	}
	return Default_GuildMember_Exchangezone
}

func (x *GuildMember) GetAccid() uint32 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return 0
}

func (x *GuildMember) GetBuilding() *BlobGuildBuilding {
	if x != nil {
		return x.Building
	}
	return nil
}

func (x *GuildMember) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return Default_GuildMember_Challenge
}

func (x *GuildMember) GetLastexittime() uint32 {
	if x != nil && x.Lastexittime != nil {
		return *x.Lastexittime
	}
	return Default_GuildMember_Lastexittime
}

func (x *GuildMember) GetRedtip() uint64 {
	if x != nil && x.Redtip != nil {
		return *x.Redtip
	}
	return Default_GuildMember_Redtip
}

func (x *GuildMember) GetBuildingeffect() bool {
	if x != nil && x.Buildingeffect != nil {
		return *x.Buildingeffect
	}
	return Default_GuildMember_Buildingeffect
}

func (x *GuildMember) GetRealtimevoice() bool {
	if x != nil && x.Realtimevoice != nil {
		return *x.Realtimevoice
	}
	return Default_GuildMember_Realtimevoice
}

func (x *GuildMember) GetWeekbcoin() uint32 {
	if x != nil && x.Weekbcoin != nil {
		return *x.Weekbcoin
	}
	return Default_GuildMember_Weekbcoin
}

func (x *GuildMember) GetTotalcoin() uint32 {
	if x != nil && x.Totalcoin != nil {
		return *x.Totalcoin
	}
	return Default_GuildMember_Totalcoin
}

func (x *GuildMember) GetTeamname() string {
	if x != nil && x.Teamname != nil {
		return *x.Teamname
	}
	return ""
}

func (x *GuildMember) GetPortraitFrame() uint32 {
	if x != nil && x.PortraitFrame != nil {
		return *x.PortraitFrame
	}
	return Default_GuildMember_PortraitFrame
}

func (x *GuildMember) GetBifrostScore() uint32 {
	if x != nil && x.BifrostScore != nil {
		return *x.BifrostScore
	}
	return Default_GuildMember_BifrostScore
}

type BlobGuildMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*GuildMember `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
}

func (x *BlobGuildMember) Reset() {
	*x = BlobGuildMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobGuildMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobGuildMember) ProtoMessage() {}

func (x *BlobGuildMember) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobGuildMember.ProtoReflect.Descriptor instead.
func (*BlobGuildMember) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{7}
}

func (x *BlobGuildMember) GetMembers() []*GuildMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type GuildApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid     *uint64      `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Zoneid     *uint32      `protobuf:"varint,12,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Baselevel  *uint32      `protobuf:"varint,2,opt,name=baselevel,def=0" json:"baselevel,omitempty"`
	Portrait   *uint32      `protobuf:"varint,3,opt,name=portrait,def=0" json:"portrait,omitempty"`
	Frame      *uint32      `protobuf:"varint,4,opt,name=frame,def=0" json:"frame,omitempty"`
	Entertime  *uint32      `protobuf:"varint,5,opt,name=entertime,def=0" json:"entertime,omitempty"`
	Hair       *uint32      `protobuf:"varint,9,opt,name=hair,def=0" json:"hair,omitempty"`
	Haircolor  *uint32      `protobuf:"varint,10,opt,name=haircolor,def=0" json:"haircolor,omitempty"`
	Body       *uint32      `protobuf:"varint,11,opt,name=body,def=0" json:"body,omitempty"`
	Head       *uint32      `protobuf:"varint,14,opt,name=head,def=0" json:"head,omitempty"`
	Face       *uint32      `protobuf:"varint,15,opt,name=face,def=0" json:"face,omitempty"`
	Mouth      *uint32      `protobuf:"varint,16,opt,name=mouth,def=0" json:"mouth,omitempty"`
	Eye        *uint32      `protobuf:"varint,17,opt,name=eye,def=0" json:"eye,omitempty"`
	Gender     *EGender     `protobuf:"varint,6,opt,name=gender,enum=Cmd.EGender,def=0" json:"gender,omitempty"`
	Profession *EProfession `protobuf:"varint,7,opt,name=profession,enum=Cmd.EProfession,def=0" json:"profession,omitempty"`
	Name       *string      `protobuf:"bytes,8,opt,name=name" json:"name,omitempty"`
	Accid      *uint64      `protobuf:"varint,13,opt,name=accid" json:"accid,omitempty"`
}

// Default values for GuildApply fields.
const (
	Default_GuildApply_Charid     = uint64(0)
	Default_GuildApply_Zoneid     = uint32(0)
	Default_GuildApply_Baselevel  = uint32(0)
	Default_GuildApply_Portrait   = uint32(0)
	Default_GuildApply_Frame      = uint32(0)
	Default_GuildApply_Entertime  = uint32(0)
	Default_GuildApply_Hair       = uint32(0)
	Default_GuildApply_Haircolor  = uint32(0)
	Default_GuildApply_Body       = uint32(0)
	Default_GuildApply_Head       = uint32(0)
	Default_GuildApply_Face       = uint32(0)
	Default_GuildApply_Mouth      = uint32(0)
	Default_GuildApply_Eye        = uint32(0)
	Default_GuildApply_Gender     = EGender_EGENDER_MIN
	Default_GuildApply_Profession = EProfession_EPROFESSION_MIN
)

func (x *GuildApply) Reset() {
	*x = GuildApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildApply) ProtoMessage() {}

func (x *GuildApply) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildApply.ProtoReflect.Descriptor instead.
func (*GuildApply) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{8}
}

func (x *GuildApply) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_GuildApply_Charid
}

func (x *GuildApply) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_GuildApply_Zoneid
}

func (x *GuildApply) GetBaselevel() uint32 {
	if x != nil && x.Baselevel != nil {
		return *x.Baselevel
	}
	return Default_GuildApply_Baselevel
}

func (x *GuildApply) GetPortrait() uint32 {
	if x != nil && x.Portrait != nil {
		return *x.Portrait
	}
	return Default_GuildApply_Portrait
}

func (x *GuildApply) GetFrame() uint32 {
	if x != nil && x.Frame != nil {
		return *x.Frame
	}
	return Default_GuildApply_Frame
}

func (x *GuildApply) GetEntertime() uint32 {
	if x != nil && x.Entertime != nil {
		return *x.Entertime
	}
	return Default_GuildApply_Entertime
}

func (x *GuildApply) GetHair() uint32 {
	if x != nil && x.Hair != nil {
		return *x.Hair
	}
	return Default_GuildApply_Hair
}

func (x *GuildApply) GetHaircolor() uint32 {
	if x != nil && x.Haircolor != nil {
		return *x.Haircolor
	}
	return Default_GuildApply_Haircolor
}

func (x *GuildApply) GetBody() uint32 {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return Default_GuildApply_Body
}

func (x *GuildApply) GetHead() uint32 {
	if x != nil && x.Head != nil {
		return *x.Head
	}
	return Default_GuildApply_Head
}

func (x *GuildApply) GetFace() uint32 {
	if x != nil && x.Face != nil {
		return *x.Face
	}
	return Default_GuildApply_Face
}

func (x *GuildApply) GetMouth() uint32 {
	if x != nil && x.Mouth != nil {
		return *x.Mouth
	}
	return Default_GuildApply_Mouth
}

func (x *GuildApply) GetEye() uint32 {
	if x != nil && x.Eye != nil {
		return *x.Eye
	}
	return Default_GuildApply_Eye
}

func (x *GuildApply) GetGender() EGender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Default_GuildApply_Gender
}

func (x *GuildApply) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return Default_GuildApply_Profession
}

func (x *GuildApply) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GuildApply) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return 0
}

type BlobGuildApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Applys []*GuildApply `protobuf:"bytes,1,rep,name=applys" json:"applys,omitempty"`
}

func (x *BlobGuildApply) Reset() {
	*x = BlobGuildApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobGuildApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobGuildApply) ProtoMessage() {}

func (x *BlobGuildApply) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobGuildApply.ProtoReflect.Descriptor instead.
func (*BlobGuildApply) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{9}
}

func (x *BlobGuildApply) GetApplys() []*GuildApply {
	if x != nil {
		return x.Applys
	}
	return nil
}

type GuildJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job      *EGuildJob `protobuf:"varint,1,opt,name=job,enum=Cmd.EGuildJob,def=0" json:"job,omitempty"`
	Name     *string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Auth     *uint32    `protobuf:"varint,3,opt,name=auth,def=0" json:"auth,omitempty"`
	Editauth *uint32    `protobuf:"varint,4,opt,name=editauth,def=0" json:"editauth,omitempty"`
}

// Default values for GuildJob fields.
const (
	Default_GuildJob_Job      = EGuildJob_EGUILDJOB_MIN
	Default_GuildJob_Auth     = uint32(0)
	Default_GuildJob_Editauth = uint32(0)
)

func (x *GuildJob) Reset() {
	*x = GuildJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildJob) ProtoMessage() {}

func (x *GuildJob) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildJob.ProtoReflect.Descriptor instead.
func (*GuildJob) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{10}
}

func (x *GuildJob) GetJob() EGuildJob {
	if x != nil && x.Job != nil {
		return *x.Job
	}
	return Default_GuildJob_Job
}

func (x *GuildJob) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GuildJob) GetAuth() uint32 {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return Default_GuildJob_Auth
}

func (x *GuildJob) GetEditauth() uint32 {
	if x != nil && x.Editauth != nil {
		return *x.Editauth
	}
	return Default_GuildJob_Editauth
}

type GuildQuest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questid *uint32 `protobuf:"varint,1,opt,name=questid,def=0" json:"questid,omitempty"`
	Time    *uint32 `protobuf:"varint,2,opt,name=time,def=0" json:"time,omitempty"`
}

// Default values for GuildQuest fields.
const (
	Default_GuildQuest_Questid = uint32(0)
	Default_GuildQuest_Time    = uint32(0)
)

func (x *GuildQuest) Reset() {
	*x = GuildQuest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildQuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildQuest) ProtoMessage() {}

func (x *GuildQuest) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildQuest.ProtoReflect.Descriptor instead.
func (*GuildQuest) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{11}
}

func (x *GuildQuest) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return Default_GuildQuest_Questid
}

func (x *GuildQuest) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_GuildQuest_Time
}

type GuildBuildMaterial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Count     *uint32 `protobuf:"varint,2,opt,name=count,def=0" json:"count,omitempty"`
	Itemid    *uint32 `protobuf:"varint,3,opt,name=itemid,def=0" json:"itemid,omitempty"`
	Itemcount *uint32 `protobuf:"varint,4,opt,name=itemcount,def=0" json:"itemcount,omitempty"`
	Rewardid  *uint32 `protobuf:"varint,5,opt,name=rewardid,def=0" json:"rewardid,omitempty"`
}

// Default values for GuildBuildMaterial fields.
const (
	Default_GuildBuildMaterial_Id        = uint32(0)
	Default_GuildBuildMaterial_Count     = uint32(0)
	Default_GuildBuildMaterial_Itemid    = uint32(0)
	Default_GuildBuildMaterial_Itemcount = uint32(0)
	Default_GuildBuildMaterial_Rewardid  = uint32(0)
)

func (x *GuildBuildMaterial) Reset() {
	*x = GuildBuildMaterial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBuildMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBuildMaterial) ProtoMessage() {}

func (x *GuildBuildMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBuildMaterial.ProtoReflect.Descriptor instead.
func (*GuildBuildMaterial) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{12}
}

func (x *GuildBuildMaterial) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_GuildBuildMaterial_Id
}

func (x *GuildBuildMaterial) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_GuildBuildMaterial_Count
}

func (x *GuildBuildMaterial) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_GuildBuildMaterial_Itemid
}

func (x *GuildBuildMaterial) GetItemcount() uint32 {
	if x != nil && x.Itemcount != nil {
		return *x.Itemcount
	}
	return Default_GuildBuildMaterial_Itemcount
}

func (x *GuildBuildMaterial) GetRewardid() uint32 {
	if x != nil && x.Rewardid != nil {
		return *x.Rewardid
	}
	return Default_GuildBuildMaterial_Rewardid
}

type GuildBuilding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            *EGuildBuilding       `protobuf:"varint,1,opt,name=type,enum=Cmd.EGuildBuilding,def=0" json:"type,omitempty"`
	Level           *uint32               `protobuf:"varint,2,opt,name=level,def=0" json:"level,omitempty"`
	Materials       []*GuildBuildMaterial `protobuf:"bytes,3,rep,name=materials" json:"materials,omitempty"`
	Isbuilding      *bool                 `protobuf:"varint,4,opt,name=isbuilding,def=0" json:"isbuilding,omitempty"`
	Nextwelfaretime *uint32               `protobuf:"varint,5,opt,name=nextwelfaretime,def=0" json:"nextwelfaretime,omitempty"`
	Nextbuildtime   *uint32               `protobuf:"varint,8,opt,name=nextbuildtime,def=0" json:"nextbuildtime,omitempty"`
	Progress        *uint32               `protobuf:"varint,6,opt,name=progress,def=0" json:"progress,omitempty"`
	Restmaterials   []*GuildBuildMaterial `protobuf:"bytes,7,rep,name=restmaterials" json:"restmaterials,omitempty"`
}

// Default values for GuildBuilding fields.
const (
	Default_GuildBuilding_Type            = EGuildBuilding_EGUILDBUILDING_MIN
	Default_GuildBuilding_Level           = uint32(0)
	Default_GuildBuilding_Isbuilding      = bool(false)
	Default_GuildBuilding_Nextwelfaretime = uint32(0)
	Default_GuildBuilding_Nextbuildtime   = uint32(0)
	Default_GuildBuilding_Progress        = uint32(0)
)

func (x *GuildBuilding) Reset() {
	*x = GuildBuilding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBuilding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBuilding) ProtoMessage() {}

func (x *GuildBuilding) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBuilding.ProtoReflect.Descriptor instead.
func (*GuildBuilding) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{13}
}

func (x *GuildBuilding) GetType() EGuildBuilding {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_GuildBuilding_Type
}

func (x *GuildBuilding) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return Default_GuildBuilding_Level
}

func (x *GuildBuilding) GetMaterials() []*GuildBuildMaterial {
	if x != nil {
		return x.Materials
	}
	return nil
}

func (x *GuildBuilding) GetIsbuilding() bool {
	if x != nil && x.Isbuilding != nil {
		return *x.Isbuilding
	}
	return Default_GuildBuilding_Isbuilding
}

func (x *GuildBuilding) GetNextwelfaretime() uint32 {
	if x != nil && x.Nextwelfaretime != nil {
		return *x.Nextwelfaretime
	}
	return Default_GuildBuilding_Nextwelfaretime
}

func (x *GuildBuilding) GetNextbuildtime() uint32 {
	if x != nil && x.Nextbuildtime != nil {
		return *x.Nextbuildtime
	}
	return Default_GuildBuilding_Nextbuildtime
}

func (x *GuildBuilding) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return Default_GuildBuilding_Progress
}

func (x *GuildBuilding) GetRestmaterials() []*GuildBuildMaterial {
	if x != nil {
		return x.Restmaterials
	}
	return nil
}

type GuildBuildingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buildings []*GuildBuilding `protobuf:"bytes,1,rep,name=buildings" json:"buildings,omitempty"`
	Version   *uint32          `protobuf:"varint,2,opt,name=version,def=0" json:"version,omitempty"`
}

// Default values for GuildBuildingData fields.
const (
	Default_GuildBuildingData_Version = uint32(0)
)

func (x *GuildBuildingData) Reset() {
	*x = GuildBuildingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBuildingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBuildingData) ProtoMessage() {}

func (x *GuildBuildingData) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBuildingData.ProtoReflect.Descriptor instead.
func (*GuildBuildingData) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{14}
}

func (x *GuildBuildingData) GetBuildings() []*GuildBuilding {
	if x != nil {
		return x.Buildings
	}
	return nil
}

func (x *GuildBuildingData) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_GuildBuildingData_Version
}

type GuildChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Progress    *uint32 `protobuf:"varint,2,opt,name=progress,def=0" json:"progress,omitempty"`
	Reward      *bool   `protobuf:"varint,3,opt,name=reward,def=0" json:"reward,omitempty"`
	Extrareward *bool   `protobuf:"varint,4,opt,name=extrareward,def=0" json:"extrareward,omitempty"`
}

// Default values for GuildChallenge fields.
const (
	Default_GuildChallenge_Id          = uint32(0)
	Default_GuildChallenge_Progress    = uint32(0)
	Default_GuildChallenge_Reward      = bool(false)
	Default_GuildChallenge_Extrareward = bool(false)
)

func (x *GuildChallenge) Reset() {
	*x = GuildChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildChallenge) ProtoMessage() {}

func (x *GuildChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildChallenge.ProtoReflect.Descriptor instead.
func (*GuildChallenge) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{15}
}

func (x *GuildChallenge) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_GuildChallenge_Id
}

func (x *GuildChallenge) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return Default_GuildChallenge_Progress
}

func (x *GuildChallenge) GetReward() bool {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return Default_GuildChallenge_Reward
}

func (x *GuildChallenge) GetExtrareward() bool {
	if x != nil && x.Extrareward != nil {
		return *x.Extrareward
	}
	return Default_GuildChallenge_Extrareward
}

type GuildChallengeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenges []*GuildChallenge `protobuf:"bytes,1,rep,name=challenges" json:"challenges,omitempty"`
}

func (x *GuildChallengeData) Reset() {
	*x = GuildChallengeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildChallengeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildChallengeData) ProtoMessage() {}

func (x *GuildChallengeData) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildChallengeData.ProtoReflect.Descriptor instead.
func (*GuildChallengeData) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{16}
}

func (x *GuildChallengeData) GetChallenges() []*GuildChallenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

type GuildWelfareItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *EGuildWelfare `protobuf:"varint,1,opt,name=type,enum=Cmd.EGuildWelfare,def=0" json:"type,omitempty"`
	Id          *uint64        `protobuf:"varint,2,opt,name=id,def=0" json:"id,omitempty"`
	Source      *ESource       `protobuf:"varint,3,opt,name=source,enum=Cmd.ESource,def=0" json:"source,omitempty"`
	Rewardid    *uint32        `protobuf:"varint,4,opt,name=rewardid,def=0" json:"rewardid,omitempty"`
	Createtime  *uint32        `protobuf:"varint,5,opt,name=createtime,def=0" json:"createtime,omitempty"`
	Overduetime *uint32        `protobuf:"varint,6,opt,name=overduetime,def=0" json:"overduetime,omitempty"`
	Charids     []uint64       `protobuf:"varint,7,rep,name=charids" json:"charids,omitempty"`
	Ownername   *string        `protobuf:"bytes,8,opt,name=ownername" json:"ownername,omitempty"`
	Sourceid    *uint32        `protobuf:"varint,9,opt,name=sourceid,def=0" json:"sourceid,omitempty"`
	Eventguid   *uint32        `protobuf:"varint,10,opt,name=eventguid,def=0" json:"eventguid,omitempty"`
	Index       *uint32        `protobuf:"varint,11,opt,name=index,def=0" json:"index,omitempty"`
}

// Default values for GuildWelfareItem fields.
const (
	Default_GuildWelfareItem_Type        = EGuildWelfare_EGUILDWELFARE_MIN
	Default_GuildWelfareItem_Id          = uint64(0)
	Default_GuildWelfareItem_Source      = ESource_ESOURCE_MIN
	Default_GuildWelfareItem_Rewardid    = uint32(0)
	Default_GuildWelfareItem_Createtime  = uint32(0)
	Default_GuildWelfareItem_Overduetime = uint32(0)
	Default_GuildWelfareItem_Sourceid    = uint32(0)
	Default_GuildWelfareItem_Eventguid   = uint32(0)
	Default_GuildWelfareItem_Index       = uint32(0)
)

func (x *GuildWelfareItem) Reset() {
	*x = GuildWelfareItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildWelfareItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildWelfareItem) ProtoMessage() {}

func (x *GuildWelfareItem) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildWelfareItem.ProtoReflect.Descriptor instead.
func (*GuildWelfareItem) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{17}
}

func (x *GuildWelfareItem) GetType() EGuildWelfare {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_GuildWelfareItem_Type
}

func (x *GuildWelfareItem) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_GuildWelfareItem_Id
}

func (x *GuildWelfareItem) GetSource() ESource {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return Default_GuildWelfareItem_Source
}

func (x *GuildWelfareItem) GetRewardid() uint32 {
	if x != nil && x.Rewardid != nil {
		return *x.Rewardid
	}
	return Default_GuildWelfareItem_Rewardid
}

func (x *GuildWelfareItem) GetCreatetime() uint32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return Default_GuildWelfareItem_Createtime
}

func (x *GuildWelfareItem) GetOverduetime() uint32 {
	if x != nil && x.Overduetime != nil {
		return *x.Overduetime
	}
	return Default_GuildWelfareItem_Overduetime
}

func (x *GuildWelfareItem) GetCharids() []uint64 {
	if x != nil {
		return x.Charids
	}
	return nil
}

func (x *GuildWelfareItem) GetOwnername() string {
	if x != nil && x.Ownername != nil {
		return *x.Ownername
	}
	return ""
}

func (x *GuildWelfareItem) GetSourceid() uint32 {
	if x != nil && x.Sourceid != nil {
		return *x.Sourceid
	}
	return Default_GuildWelfareItem_Sourceid
}

func (x *GuildWelfareItem) GetEventguid() uint32 {
	if x != nil && x.Eventguid != nil {
		return *x.Eventguid
	}
	return Default_GuildWelfareItem_Eventguid
}

func (x *GuildWelfareItem) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_GuildWelfareItem_Index
}

type GuildWelfare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*GuildWelfareItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (x *GuildWelfare) Reset() {
	*x = GuildWelfare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildWelfare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildWelfare) ProtoMessage() {}

func (x *GuildWelfare) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildWelfare.ProtoReflect.Descriptor instead.
func (*GuildWelfare) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{18}
}

func (x *GuildWelfare) GetItems() []*GuildWelfareItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type GuildArtifactItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid            *string `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	Itemid          *uint32 `protobuf:"varint,2,opt,name=itemid,def=0" json:"itemid,omitempty"`
	Distributecount *uint32 `protobuf:"varint,3,opt,name=distributecount,def=0" json:"distributecount,omitempty"`
	Retrievetime    *uint32 `protobuf:"varint,4,opt,name=retrievetime,def=0" json:"retrievetime,omitempty"`
	Ownerid         *uint64 `protobuf:"varint,5,opt,name=ownerid,def=0" json:"ownerid,omitempty"`
}

// Default values for GuildArtifactItem fields.
const (
	Default_GuildArtifactItem_Itemid          = uint32(0)
	Default_GuildArtifactItem_Distributecount = uint32(0)
	Default_GuildArtifactItem_Retrievetime    = uint32(0)
	Default_GuildArtifactItem_Ownerid         = uint64(0)
)

func (x *GuildArtifactItem) Reset() {
	*x = GuildArtifactItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildArtifactItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildArtifactItem) ProtoMessage() {}

func (x *GuildArtifactItem) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildArtifactItem.ProtoReflect.Descriptor instead.
func (*GuildArtifactItem) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{19}
}

func (x *GuildArtifactItem) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *GuildArtifactItem) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_GuildArtifactItem_Itemid
}

func (x *GuildArtifactItem) GetDistributecount() uint32 {
	if x != nil && x.Distributecount != nil {
		return *x.Distributecount
	}
	return Default_GuildArtifactItem_Distributecount
}

func (x *GuildArtifactItem) GetRetrievetime() uint32 {
	if x != nil && x.Retrievetime != nil {
		return *x.Retrievetime
	}
	return Default_GuildArtifactItem_Retrievetime
}

func (x *GuildArtifactItem) GetOwnerid() uint64 {
	if x != nil && x.Ownerid != nil {
		return *x.Ownerid
	}
	return Default_GuildArtifactItem_Ownerid
}

type GuildArtifactData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         *uint32 `protobuf:"varint,1,opt,name=type,def=0" json:"type,omitempty"`
	Producecount *uint32 `protobuf:"varint,2,opt,name=producecount,def=0" json:"producecount,omitempty"`
	Maxlevel     *uint32 `protobuf:"varint,3,opt,name=maxlevel,def=0" json:"maxlevel,omitempty"`
}

// Default values for GuildArtifactData fields.
const (
	Default_GuildArtifactData_Type         = uint32(0)
	Default_GuildArtifactData_Producecount = uint32(0)
	Default_GuildArtifactData_Maxlevel     = uint32(0)
)

func (x *GuildArtifactData) Reset() {
	*x = GuildArtifactData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildArtifactData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildArtifactData) ProtoMessage() {}

func (x *GuildArtifactData) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildArtifactData.ProtoReflect.Descriptor instead.
func (*GuildArtifactData) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{20}
}

func (x *GuildArtifactData) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_GuildArtifactData_Type
}

func (x *GuildArtifactData) GetProducecount() uint32 {
	if x != nil && x.Producecount != nil {
		return *x.Producecount
	}
	return Default_GuildArtifactData_Producecount
}

func (x *GuildArtifactData) GetMaxlevel() uint32 {
	if x != nil && x.Maxlevel != nil {
		return *x.Maxlevel
	}
	return Default_GuildArtifactData_Maxlevel
}

type GuildArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*GuildArtifactItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Datas []*GuildArtifactData `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
}

func (x *GuildArtifact) Reset() {
	*x = GuildArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildArtifact) ProtoMessage() {}

func (x *GuildArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildArtifact.ProtoReflect.Descriptor instead.
func (*GuildArtifact) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{21}
}

func (x *GuildArtifact) GetItems() []*GuildArtifactItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GuildArtifact) GetDatas() []*GuildArtifactData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type GQuest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid *uint64      `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Datas  []*QuestData `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
}

// Default values for GQuest fields.
const (
	Default_GQuest_Charid = uint64(0)
)

func (x *GQuest) Reset() {
	*x = GQuest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GQuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GQuest) ProtoMessage() {}

func (x *GQuest) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GQuest.ProtoReflect.Descriptor instead.
func (*GQuest) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{22}
}

func (x *GQuest) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_GQuest_Charid
}

func (x *GQuest) GetDatas() []*QuestData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type BlobGQuest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quests  []*GQuest `protobuf:"bytes,1,rep,name=quests" json:"quests,omitempty"`
	Accepts []uint32  `protobuf:"varint,2,rep,name=accepts" json:"accepts,omitempty"`
	Submit  []uint32  `protobuf:"varint,3,rep,name=submit" json:"submit,omitempty"`
}

func (x *BlobGQuest) Reset() {
	*x = BlobGQuest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobGQuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobGQuest) ProtoMessage() {}

func (x *BlobGQuest) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobGQuest.ProtoReflect.Descriptor instead.
func (*BlobGQuest) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{23}
}

func (x *BlobGQuest) GetQuests() []*GQuest {
	if x != nil {
		return x.Quests
	}
	return nil
}

func (x *BlobGQuest) GetAccepts() []uint32 {
	if x != nil {
		return x.Accepts
	}
	return nil
}

func (x *BlobGQuest) GetSubmit() []uint32 {
	if x != nil {
		return x.Submit
	}
	return nil
}

type BlobGGvg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartinTime      *uint32  `protobuf:"varint,1,opt,name=partin_time,json=partinTime,def=0" json:"partin_time,omitempty"`
	PartinUsers     []uint64 `protobuf:"varint,2,rep,name=partin_users,json=partinUsers" json:"partin_users,omitempty"`
	Sugvgtime       *uint32  `protobuf:"varint,3,opt,name=sugvgtime,def=0" json:"sugvgtime,omitempty"`
	Sugvgcnt        *uint32  `protobuf:"varint,4,opt,name=sugvgcnt,def=0" json:"sugvgcnt,omitempty"`
	Sugvgscore      *uint32  `protobuf:"varint,5,opt,name=sugvgscore,def=0" json:"sugvgscore,omitempty"`
	Version         *uint32  `protobuf:"varint,6,opt,name=version,def=0" json:"version,omitempty"`
	Joinweek        *uint32  `protobuf:"varint,7,opt,name=joinweek,def=0" json:"joinweek,omitempty"`
	Rewardusers     []uint64 `protobuf:"varint,8,rep,name=rewardusers" json:"rewardusers,omitempty"`
	Rewardbegintime *uint32  `protobuf:"varint,9,opt,name=rewardbegintime,def=0" json:"rewardbegintime,omitempty"`
	Rewardendtime   *uint32  `protobuf:"varint,10,opt,name=rewardendtime,def=0" json:"rewardendtime,omitempty"`
}

// Default values for BlobGGvg fields.
const (
	Default_BlobGGvg_PartinTime      = uint32(0)
	Default_BlobGGvg_Sugvgtime       = uint32(0)
	Default_BlobGGvg_Sugvgcnt        = uint32(0)
	Default_BlobGGvg_Sugvgscore      = uint32(0)
	Default_BlobGGvg_Version         = uint32(0)
	Default_BlobGGvg_Joinweek        = uint32(0)
	Default_BlobGGvg_Rewardbegintime = uint32(0)
	Default_BlobGGvg_Rewardendtime   = uint32(0)
)

func (x *BlobGGvg) Reset() {
	*x = BlobGGvg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobGGvg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobGGvg) ProtoMessage() {}

func (x *BlobGGvg) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobGGvg.ProtoReflect.Descriptor instead.
func (*BlobGGvg) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{24}
}

func (x *BlobGGvg) GetPartinTime() uint32 {
	if x != nil && x.PartinTime != nil {
		return *x.PartinTime
	}
	return Default_BlobGGvg_PartinTime
}

func (x *BlobGGvg) GetPartinUsers() []uint64 {
	if x != nil {
		return x.PartinUsers
	}
	return nil
}

func (x *BlobGGvg) GetSugvgtime() uint32 {
	if x != nil && x.Sugvgtime != nil {
		return *x.Sugvgtime
	}
	return Default_BlobGGvg_Sugvgtime
}

func (x *BlobGGvg) GetSugvgcnt() uint32 {
	if x != nil && x.Sugvgcnt != nil {
		return *x.Sugvgcnt
	}
	return Default_BlobGGvg_Sugvgcnt
}

func (x *BlobGGvg) GetSugvgscore() uint32 {
	if x != nil && x.Sugvgscore != nil {
		return *x.Sugvgscore
	}
	return Default_BlobGGvg_Sugvgscore
}

func (x *BlobGGvg) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_BlobGGvg_Version
}

func (x *BlobGGvg) GetJoinweek() uint32 {
	if x != nil && x.Joinweek != nil {
		return *x.Joinweek
	}
	return Default_BlobGGvg_Joinweek
}

func (x *BlobGGvg) GetRewardusers() []uint64 {
	if x != nil {
		return x.Rewardusers
	}
	return nil
}

func (x *BlobGGvg) GetRewardbegintime() uint32 {
	if x != nil && x.Rewardbegintime != nil {
		return *x.Rewardbegintime
	}
	return Default_BlobGGvg_Rewardbegintime
}

func (x *BlobGGvg) GetRewardendtime() uint32 {
	if x != nil && x.Rewardendtime != nil {
		return *x.Rewardendtime
	}
	return Default_BlobGGvg_Rewardendtime
}

type GuildTreasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Count *uint32 `protobuf:"varint,2,opt,name=count,def=0" json:"count,omitempty"`
}

// Default values for GuildTreasure fields.
const (
	Default_GuildTreasure_Id    = uint32(0)
	Default_GuildTreasure_Count = uint32(0)
)

func (x *GuildTreasure) Reset() {
	*x = GuildTreasure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildTreasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildTreasure) ProtoMessage() {}

func (x *GuildTreasure) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildTreasure.ProtoReflect.Descriptor instead.
func (*GuildTreasure) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{25}
}

func (x *GuildTreasure) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_GuildTreasure_Id
}

func (x *GuildTreasure) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_GuildTreasure_Count
}

type TreasureItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid *uint64     `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Name   *string     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Datas  []*ItemData `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
}

// Default values for TreasureItem fields.
const (
	Default_TreasureItem_Charid = uint64(0)
)

func (x *TreasureItem) Reset() {
	*x = TreasureItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureItem) ProtoMessage() {}

func (x *TreasureItem) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureItem.ProtoReflect.Descriptor instead.
func (*TreasureItem) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{26}
}

func (x *TreasureItem) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_TreasureItem_Charid
}

func (x *TreasureItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TreasureItem) GetDatas() []*ItemData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type TreasureResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ownerid     *uint64         `protobuf:"varint,1,opt,name=ownerid,def=0" json:"ownerid,omitempty"`
	Eventguid   *uint32         `protobuf:"varint,2,opt,name=eventguid,def=0" json:"eventguid,omitempty"`
	Treasureid  *uint32         `protobuf:"varint,3,opt,name=treasureid,def=0" json:"treasureid,omitempty"`
	Totalmember *uint32         `protobuf:"varint,5,opt,name=totalmember,def=0" json:"totalmember,omitempty"`
	State       *ETreasureState `protobuf:"varint,6,opt,name=state,enum=Cmd.ETreasureState,def=0" json:"state,omitempty"`
	Items       []*TreasureItem `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

// Default values for TreasureResult fields.
const (
	Default_TreasureResult_Ownerid     = uint64(0)
	Default_TreasureResult_Eventguid   = uint32(0)
	Default_TreasureResult_Treasureid  = uint32(0)
	Default_TreasureResult_Totalmember = uint32(0)
	Default_TreasureResult_State       = ETreasureState_ETREASURESTATE_MIN
)

func (x *TreasureResult) Reset() {
	*x = TreasureResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureResult) ProtoMessage() {}

func (x *TreasureResult) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureResult.ProtoReflect.Descriptor instead.
func (*TreasureResult) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{27}
}

func (x *TreasureResult) GetOwnerid() uint64 {
	if x != nil && x.Ownerid != nil {
		return *x.Ownerid
	}
	return Default_TreasureResult_Ownerid
}

func (x *TreasureResult) GetEventguid() uint32 {
	if x != nil && x.Eventguid != nil {
		return *x.Eventguid
	}
	return Default_TreasureResult_Eventguid
}

func (x *TreasureResult) GetTreasureid() uint32 {
	if x != nil && x.Treasureid != nil {
		return *x.Treasureid
	}
	return Default_TreasureResult_Treasureid
}

func (x *TreasureResult) GetTotalmember() uint32 {
	if x != nil && x.Totalmember != nil {
		return *x.Totalmember
	}
	return Default_TreasureResult_Totalmember
}

func (x *TreasureResult) GetState() ETreasureState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_TreasureResult_State
}

func (x *TreasureResult) GetItems() []*TreasureItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type BlobGuildTreasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Treasures []*GuildTreasure  `protobuf:"bytes,1,rep,name=treasures" json:"treasures,omitempty"`
	Result    []*TreasureResult `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (x *BlobGuildTreasure) Reset() {
	*x = BlobGuildTreasure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobGuildTreasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobGuildTreasure) ProtoMessage() {}

func (x *BlobGuildTreasure) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobGuildTreasure.ProtoReflect.Descriptor instead.
func (*BlobGuildTreasure) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{28}
}

func (x *BlobGuildTreasure) GetTreasures() []*GuildTreasure {
	if x != nil {
		return x.Treasures
	}
	return nil
}

func (x *BlobGuildTreasure) GetResult() []*TreasureResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type GuildActiveMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day     *uint32  `protobuf:"varint,1,opt,name=day,def=0" json:"day,omitempty"`
	Charids []uint64 `protobuf:"varint,2,rep,name=charids" json:"charids,omitempty"`
}

// Default values for GuildActiveMember fields.
const (
	Default_GuildActiveMember_Day = uint32(0)
)

func (x *GuildActiveMember) Reset() {
	*x = GuildActiveMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildActiveMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildActiveMember) ProtoMessage() {}

func (x *GuildActiveMember) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildActiveMember.ProtoReflect.Descriptor instead.
func (*GuildActiveMember) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{29}
}

func (x *GuildActiveMember) GetDay() uint32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return Default_GuildActiveMember_Day
}

func (x *GuildActiveMember) GetCharids() []uint64 {
	if x != nil {
		return x.Charids
	}
	return nil
}

type BlobGuildMisc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Var            []byte               `protobuf:"bytes,1,opt,name=var" json:"var,omitempty"`
	Job            []*GuildJob          `protobuf:"bytes,2,rep,name=job" json:"job,omitempty"`
	Donatetime1    *uint32              `protobuf:"varint,3,opt,name=donatetime1,def=0" json:"donatetime1,omitempty"`
	Donatetime2    *uint32              `protobuf:"varint,4,opt,name=donatetime2,def=0" json:"donatetime2,omitempty"`
	Quest          []*GuildQuest        `protobuf:"bytes,5,rep,name=quest" json:"quest,omitempty"`
	Nextquesttime  *uint32              `protobuf:"varint,6,opt,name=nextquesttime,def=0" json:"nextquesttime,omitempty"`
	Dojomsg        []*DojoMsgBlob       `protobuf:"bytes,7,rep,name=dojomsg" json:"dojomsg,omitempty"`
	Donatetime3    *uint32              `protobuf:"varint,8,opt,name=donatetime3,def=0" json:"donatetime3,omitempty"`
	Donatetime4    *uint32              `protobuf:"varint,9,opt,name=donatetime4,def=0" json:"donatetime4,omitempty"`
	Renametime     *uint32              `protobuf:"varint,10,opt,name=renametime,def=0" json:"renametime,omitempty"`
	CityGiveupTime *uint32              `protobuf:"varint,11,opt,name=city_giveup_time,json=cityGiveupTime,def=0" json:"city_giveup_time,omitempty"`
	AuthVersion    *uint32              `protobuf:"varint,12,opt,name=auth_version,json=authVersion,def=0" json:"auth_version,omitempty"`
	Building       *GuildBuildingData   `protobuf:"bytes,13,opt,name=building" json:"building,omitempty"`
	Openfunction   *uint64              `protobuf:"varint,14,opt,name=openfunction,def=0" json:"openfunction,omitempty"`
	Challenge      *GuildChallengeData  `protobuf:"bytes,15,opt,name=challenge" json:"challenge,omitempty"`
	Welfare        *GuildWelfare        `protobuf:"bytes,16,opt,name=welfare" json:"welfare,omitempty"`
	Artifact       *GuildArtifact       `protobuf:"bytes,17,opt,name=artifact" json:"artifact,omitempty"`
	Quests         *BlobGQuest          `protobuf:"bytes,18,opt,name=quests" json:"quests,omitempty"`
	Treasures      *BlobGuildTreasure   `protobuf:"bytes,19,opt,name=treasures" json:"treasures,omitempty"`
	Gvg            *BlobGGvg            `protobuf:"bytes,20,opt,name=gvg" json:"gvg,omitempty"`
	AverageActive  *uint32              `protobuf:"varint,21,opt,name=average_active,json=averageActive,def=0" json:"average_active,omitempty"`
	ActiveMembers  []*GuildActiveMember `protobuf:"bytes,22,rep,name=active_members,json=activeMembers" json:"active_members,omitempty"`
	Rewardvar      []byte               `protobuf:"bytes,23,opt,name=rewardvar" json:"rewardvar,omitempty"`
	BifrostScore   *uint32              `protobuf:"varint,24,opt,name=bifrost_score,json=bifrostScore,def=0" json:"bifrost_score,omitempty"`
}

// Default values for BlobGuildMisc fields.
const (
	Default_BlobGuildMisc_Donatetime1    = uint32(0)
	Default_BlobGuildMisc_Donatetime2    = uint32(0)
	Default_BlobGuildMisc_Nextquesttime  = uint32(0)
	Default_BlobGuildMisc_Donatetime3    = uint32(0)
	Default_BlobGuildMisc_Donatetime4    = uint32(0)
	Default_BlobGuildMisc_Renametime     = uint32(0)
	Default_BlobGuildMisc_CityGiveupTime = uint32(0)
	Default_BlobGuildMisc_AuthVersion    = uint32(0)
	Default_BlobGuildMisc_Openfunction   = uint64(0)
	Default_BlobGuildMisc_AverageActive  = uint32(0)
	Default_BlobGuildMisc_BifrostScore   = uint32(0)
)

func (x *BlobGuildMisc) Reset() {
	*x = BlobGuildMisc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobGuildMisc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobGuildMisc) ProtoMessage() {}

func (x *BlobGuildMisc) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobGuildMisc.ProtoReflect.Descriptor instead.
func (*BlobGuildMisc) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{30}
}

func (x *BlobGuildMisc) GetVar() []byte {
	if x != nil {
		return x.Var
	}
	return nil
}

func (x *BlobGuildMisc) GetJob() []*GuildJob {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *BlobGuildMisc) GetDonatetime1() uint32 {
	if x != nil && x.Donatetime1 != nil {
		return *x.Donatetime1
	}
	return Default_BlobGuildMisc_Donatetime1
}

func (x *BlobGuildMisc) GetDonatetime2() uint32 {
	if x != nil && x.Donatetime2 != nil {
		return *x.Donatetime2
	}
	return Default_BlobGuildMisc_Donatetime2
}

func (x *BlobGuildMisc) GetQuest() []*GuildQuest {
	if x != nil {
		return x.Quest
	}
	return nil
}

func (x *BlobGuildMisc) GetNextquesttime() uint32 {
	if x != nil && x.Nextquesttime != nil {
		return *x.Nextquesttime
	}
	return Default_BlobGuildMisc_Nextquesttime
}

func (x *BlobGuildMisc) GetDojomsg() []*DojoMsgBlob {
	if x != nil {
		return x.Dojomsg
	}
	return nil
}

func (x *BlobGuildMisc) GetDonatetime3() uint32 {
	if x != nil && x.Donatetime3 != nil {
		return *x.Donatetime3
	}
	return Default_BlobGuildMisc_Donatetime3
}

func (x *BlobGuildMisc) GetDonatetime4() uint32 {
	if x != nil && x.Donatetime4 != nil {
		return *x.Donatetime4
	}
	return Default_BlobGuildMisc_Donatetime4
}

func (x *BlobGuildMisc) GetRenametime() uint32 {
	if x != nil && x.Renametime != nil {
		return *x.Renametime
	}
	return Default_BlobGuildMisc_Renametime
}

func (x *BlobGuildMisc) GetCityGiveupTime() uint32 {
	if x != nil && x.CityGiveupTime != nil {
		return *x.CityGiveupTime
	}
	return Default_BlobGuildMisc_CityGiveupTime
}

func (x *BlobGuildMisc) GetAuthVersion() uint32 {
	if x != nil && x.AuthVersion != nil {
		return *x.AuthVersion
	}
	return Default_BlobGuildMisc_AuthVersion
}

func (x *BlobGuildMisc) GetBuilding() *GuildBuildingData {
	if x != nil {
		return x.Building
	}
	return nil
}

func (x *BlobGuildMisc) GetOpenfunction() uint64 {
	if x != nil && x.Openfunction != nil {
		return *x.Openfunction
	}
	return Default_BlobGuildMisc_Openfunction
}

func (x *BlobGuildMisc) GetChallenge() *GuildChallengeData {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *BlobGuildMisc) GetWelfare() *GuildWelfare {
	if x != nil {
		return x.Welfare
	}
	return nil
}

func (x *BlobGuildMisc) GetArtifact() *GuildArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *BlobGuildMisc) GetQuests() *BlobGQuest {
	if x != nil {
		return x.Quests
	}
	return nil
}

func (x *BlobGuildMisc) GetTreasures() *BlobGuildTreasure {
	if x != nil {
		return x.Treasures
	}
	return nil
}

func (x *BlobGuildMisc) GetGvg() *BlobGGvg {
	if x != nil {
		return x.Gvg
	}
	return nil
}

func (x *BlobGuildMisc) GetAverageActive() uint32 {
	if x != nil && x.AverageActive != nil {
		return *x.AverageActive
	}
	return Default_BlobGuildMisc_AverageActive
}

func (x *BlobGuildMisc) GetActiveMembers() []*GuildActiveMember {
	if x != nil {
		return x.ActiveMembers
	}
	return nil
}

func (x *BlobGuildMisc) GetRewardvar() []byte {
	if x != nil {
		return x.Rewardvar
	}
	return nil
}

func (x *BlobGuildMisc) GetBifrostScore() uint32 {
	if x != nil && x.BifrostScore != nil {
		return *x.BifrostScore
	}
	return Default_BlobGuildMisc_BifrostScore
}

type BlobGuildPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *uint32     `protobuf:"varint,1,opt,name=version,def=0" json:"version,omitempty"`
	Item    []*ItemInfo `protobuf:"bytes,2,rep,name=item" json:"item,omitempty"`
	Data    []*ItemData `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

// Default values for BlobGuildPack fields.
const (
	Default_BlobGuildPack_Version = uint32(0)
)

func (x *BlobGuildPack) Reset() {
	*x = BlobGuildPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobGuildPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobGuildPack) ProtoMessage() {}

func (x *BlobGuildPack) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobGuildPack.ProtoReflect.Descriptor instead.
func (*BlobGuildPack) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{31}
}

func (x *BlobGuildPack) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_BlobGuildPack_Version
}

func (x *BlobGuildPack) GetItem() []*ItemInfo {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *BlobGuildPack) GetData() []*ItemData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BlobGuildEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *uint32       `protobuf:"varint,1,opt,name=version,def=0" json:"version,omitempty"`
	Events  []*GuildEvent `protobuf:"bytes,2,rep,name=events" json:"events,omitempty"`
}

// Default values for BlobGuildEvent fields.
const (
	Default_BlobGuildEvent_Version = uint32(0)
)

func (x *BlobGuildEvent) Reset() {
	*x = BlobGuildEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobGuildEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobGuildEvent) ProtoMessage() {}

func (x *BlobGuildEvent) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobGuildEvent.ProtoReflect.Descriptor instead.
func (*BlobGuildEvent) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{32}
}

func (x *BlobGuildEvent) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_BlobGuildEvent_Version
}

func (x *BlobGuildEvent) GetEvents() []*GuildEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type GuildPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccidSvr *uint64  `protobuf:"varint,8,opt,name=accid_svr,json=accidSvr,def=0" json:"accid_svr,omitempty"`
	Accid    *uint64  `protobuf:"varint,7,opt,name=accid,def=0" json:"accid,omitempty"`
	Charid   *uint64  `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Anglez   *uint32  `protobuf:"varint,2,opt,name=anglez,def=0" json:"anglez,omitempty"`
	Time     *uint32  `protobuf:"varint,3,opt,name=time,def=0" json:"time,omitempty"`
	Mapid    *uint32  `protobuf:"varint,4,opt,name=mapid,def=0" json:"mapid,omitempty"`
	Sourceid *uint32  `protobuf:"varint,5,opt,name=sourceid,def=0" json:"sourceid,omitempty"`
	Source   *ESource `protobuf:"varint,6,opt,name=source,enum=Cmd.ESource,def=0" json:"source,omitempty"`
}

// Default values for GuildPhoto fields.
const (
	Default_GuildPhoto_AccidSvr = uint64(0)
	Default_GuildPhoto_Accid    = uint64(0)
	Default_GuildPhoto_Charid   = uint64(0)
	Default_GuildPhoto_Anglez   = uint32(0)
	Default_GuildPhoto_Time     = uint32(0)
	Default_GuildPhoto_Mapid    = uint32(0)
	Default_GuildPhoto_Sourceid = uint32(0)
	Default_GuildPhoto_Source   = ESource_ESOURCE_MIN
)

func (x *GuildPhoto) Reset() {
	*x = GuildPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildPhoto) ProtoMessage() {}

func (x *GuildPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildPhoto.ProtoReflect.Descriptor instead.
func (*GuildPhoto) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{33}
}

func (x *GuildPhoto) GetAccidSvr() uint64 {
	if x != nil && x.AccidSvr != nil {
		return *x.AccidSvr
	}
	return Default_GuildPhoto_AccidSvr
}

func (x *GuildPhoto) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return Default_GuildPhoto_Accid
}

func (x *GuildPhoto) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_GuildPhoto_Charid
}

func (x *GuildPhoto) GetAnglez() uint32 {
	if x != nil && x.Anglez != nil {
		return *x.Anglez
	}
	return Default_GuildPhoto_Anglez
}

func (x *GuildPhoto) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_GuildPhoto_Time
}

func (x *GuildPhoto) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_GuildPhoto_Mapid
}

func (x *GuildPhoto) GetSourceid() uint32 {
	if x != nil && x.Sourceid != nil {
		return *x.Sourceid
	}
	return Default_GuildPhoto_Sourceid
}

func (x *GuildPhoto) GetSource() ESource {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return Default_GuildPhoto_Source
}

type PhotoFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frameid *uint32       `protobuf:"varint,1,opt,name=frameid,def=0" json:"frameid,omitempty"`
	Photo   []*GuildPhoto `protobuf:"bytes,2,rep,name=photo" json:"photo,omitempty"`
}

// Default values for PhotoFrame fields.
const (
	Default_PhotoFrame_Frameid = uint32(0)
)

func (x *PhotoFrame) Reset() {
	*x = PhotoFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoFrame) ProtoMessage() {}

func (x *PhotoFrame) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoFrame.ProtoReflect.Descriptor instead.
func (*PhotoFrame) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{34}
}

func (x *PhotoFrame) GetFrameid() uint32 {
	if x != nil && x.Frameid != nil {
		return *x.Frameid
	}
	return Default_PhotoFrame_Frameid
}

func (x *PhotoFrame) GetPhoto() []*GuildPhoto {
	if x != nil {
		return x.Photo
	}
	return nil
}

type BlobGuildPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frames []*PhotoFrame `protobuf:"bytes,1,rep,name=frames" json:"frames,omitempty"`
}

func (x *BlobGuildPhoto) Reset() {
	*x = BlobGuildPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobGuildPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobGuildPhoto) ProtoMessage() {}

func (x *BlobGuildPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobGuildPhoto.ProtoReflect.Descriptor instead.
func (*BlobGuildPhoto) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{35}
}

func (x *BlobGuildPhoto) GetFrames() []*PhotoFrame {
	if x != nil {
		return x.Frames
	}
	return nil
}

type GuildSummaryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid             *uint64  `protobuf:"varint,1,opt,name=guid,def=0" json:"guid,omitempty"`
	Level            *uint32  `protobuf:"varint,2,opt,name=level,def=0" json:"level,omitempty"`
	Zoneid           *uint32  `protobuf:"varint,10,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Curmember        *uint32  `protobuf:"varint,3,opt,name=curmember,def=0" json:"curmember,omitempty"`
	Maxmember        *uint32  `protobuf:"varint,4,opt,name=maxmember,def=0" json:"maxmember,omitempty"`
	Cityid           *uint32  `protobuf:"varint,11,opt,name=cityid,def=0" json:"cityid,omitempty"`
	Chairmangender   *EGender `protobuf:"varint,5,opt,name=chairmangender,enum=Cmd.EGender,def=0" json:"chairmangender,omitempty"`
	Chairmanname     *string  `protobuf:"bytes,6,opt,name=chairmanname" json:"chairmanname,omitempty"`
	Guildname        *string  `protobuf:"bytes,7,opt,name=guildname" json:"guildname,omitempty"`
	Recruitinfo      *string  `protobuf:"bytes,8,opt,name=recruitinfo" json:"recruitinfo,omitempty"`
	Portrait         *string  `protobuf:"bytes,9,opt,name=portrait" json:"portrait,omitempty"`
	Chairmanportrait *uint32  `protobuf:"varint,12,opt,name=chairmanportrait,def=0" json:"chairmanportrait,omitempty"`
	Gvglevel         *uint32  `protobuf:"varint,13,opt,name=gvglevel,def=0" json:"gvglevel,omitempty"`
	Needlevel        *uint32  `protobuf:"varint,14,opt,name=needlevel,def=0" json:"needlevel,omitempty"`
	Nextzoneid       *uint32  `protobuf:"varint,15,opt,name=nextzoneid,def=0" json:"nextzoneid,omitempty"`
}

// Default values for GuildSummaryData fields.
const (
	Default_GuildSummaryData_Guid             = uint64(0)
	Default_GuildSummaryData_Level            = uint32(0)
	Default_GuildSummaryData_Zoneid           = uint32(0)
	Default_GuildSummaryData_Curmember        = uint32(0)
	Default_GuildSummaryData_Maxmember        = uint32(0)
	Default_GuildSummaryData_Cityid           = uint32(0)
	Default_GuildSummaryData_Chairmangender   = EGender_EGENDER_MIN
	Default_GuildSummaryData_Chairmanportrait = uint32(0)
	Default_GuildSummaryData_Gvglevel         = uint32(0)
	Default_GuildSummaryData_Needlevel        = uint32(0)
	Default_GuildSummaryData_Nextzoneid       = uint32(0)
)

func (x *GuildSummaryData) Reset() {
	*x = GuildSummaryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildSummaryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildSummaryData) ProtoMessage() {}

func (x *GuildSummaryData) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildSummaryData.ProtoReflect.Descriptor instead.
func (*GuildSummaryData) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{36}
}

func (x *GuildSummaryData) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_GuildSummaryData_Guid
}

func (x *GuildSummaryData) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return Default_GuildSummaryData_Level
}

func (x *GuildSummaryData) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_GuildSummaryData_Zoneid
}

func (x *GuildSummaryData) GetCurmember() uint32 {
	if x != nil && x.Curmember != nil {
		return *x.Curmember
	}
	return Default_GuildSummaryData_Curmember
}

func (x *GuildSummaryData) GetMaxmember() uint32 {
	if x != nil && x.Maxmember != nil {
		return *x.Maxmember
	}
	return Default_GuildSummaryData_Maxmember
}

func (x *GuildSummaryData) GetCityid() uint32 {
	if x != nil && x.Cityid != nil {
		return *x.Cityid
	}
	return Default_GuildSummaryData_Cityid
}

func (x *GuildSummaryData) GetChairmangender() EGender {
	if x != nil && x.Chairmangender != nil {
		return *x.Chairmangender
	}
	return Default_GuildSummaryData_Chairmangender
}

func (x *GuildSummaryData) GetChairmanname() string {
	if x != nil && x.Chairmanname != nil {
		return *x.Chairmanname
	}
	return ""
}

func (x *GuildSummaryData) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

func (x *GuildSummaryData) GetRecruitinfo() string {
	if x != nil && x.Recruitinfo != nil {
		return *x.Recruitinfo
	}
	return ""
}

func (x *GuildSummaryData) GetPortrait() string {
	if x != nil && x.Portrait != nil {
		return *x.Portrait
	}
	return ""
}

func (x *GuildSummaryData) GetChairmanportrait() uint32 {
	if x != nil && x.Chairmanportrait != nil {
		return *x.Chairmanportrait
	}
	return Default_GuildSummaryData_Chairmanportrait
}

func (x *GuildSummaryData) GetGvglevel() uint32 {
	if x != nil && x.Gvglevel != nil {
		return *x.Gvglevel
	}
	return Default_GuildSummaryData_Gvglevel
}

func (x *GuildSummaryData) GetNeedlevel() uint32 {
	if x != nil && x.Needlevel != nil {
		return *x.Needlevel
	}
	return Default_GuildSummaryData_Needlevel
}

func (x *GuildSummaryData) GetNextzoneid() uint32 {
	if x != nil && x.Nextzoneid != nil {
		return *x.Nextzoneid
	}
	return Default_GuildSummaryData_Nextzoneid
}

type GuildData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary              *GuildSummaryData `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
	Questresettime       *uint32           `protobuf:"varint,4,opt,name=questresettime,def=0" json:"questresettime,omitempty"`
	Asset                *uint32           `protobuf:"varint,5,opt,name=asset,def=0" json:"asset,omitempty"`
	Dismisstime          *uint32           `protobuf:"varint,6,opt,name=dismisstime,def=0" json:"dismisstime,omitempty"`
	Zonetime             *uint32           `protobuf:"varint,7,opt,name=zonetime,def=0" json:"zonetime,omitempty"`
	Createtime           *uint32           `protobuf:"varint,8,opt,name=createtime,def=0" json:"createtime,omitempty"`
	Nextzone             *uint32           `protobuf:"varint,9,opt,name=nextzone,def=0" json:"nextzone,omitempty"`
	Donatetime1          *uint32           `protobuf:"varint,10,opt,name=donatetime1,def=0" json:"donatetime1,omitempty"`
	Donatetime2          *uint32           `protobuf:"varint,11,opt,name=donatetime2,def=0" json:"donatetime2,omitempty"`
	Name                 *string           `protobuf:"bytes,12,opt,name=name" json:"name,omitempty"`
	Boardinfo            *string           `protobuf:"bytes,13,opt,name=boardinfo" json:"boardinfo,omitempty"`
	Recruitinfo          *string           `protobuf:"bytes,14,opt,name=recruitinfo" json:"recruitinfo,omitempty"`
	Members              []*GuildMember    `protobuf:"bytes,15,rep,name=members" json:"members,omitempty"`
	Applys               []*GuildApply     `protobuf:"bytes,16,rep,name=applys" json:"applys,omitempty"`
	Jobs                 []*GuildJob       `protobuf:"bytes,17,rep,name=jobs" json:"jobs,omitempty"`
	Assettoday           *uint32           `protobuf:"varint,18,opt,name=assettoday,def=0" json:"assettoday,omitempty"`
	Citygiveuptime       *uint32           `protobuf:"varint,19,opt,name=citygiveuptime,def=0" json:"citygiveuptime,omitempty"`
	Openfunction         *uint32           `protobuf:"varint,20,opt,name=openfunction,def=0" json:"openfunction,omitempty"`
	Challenges           []*GuildChallenge `protobuf:"bytes,21,rep,name=challenges" json:"challenges,omitempty"`
	GvgTreasureCount     *uint32           `protobuf:"varint,22,opt,name=gvg_treasure_count,json=gvgTreasureCount,def=0" json:"gvg_treasure_count,omitempty"`
	GuildTreasureCount   *uint32           `protobuf:"varint,23,opt,name=guild_treasure_count,json=guildTreasureCount,def=0" json:"guild_treasure_count,omitempty"`
	BcoinTreasureCount   *uint32           `protobuf:"varint,24,opt,name=bcoin_treasure_count,json=bcoinTreasureCount,def=0" json:"bcoin_treasure_count,omitempty"`
	Insupergvg           *bool             `protobuf:"varint,25,opt,name=insupergvg,def=0" json:"insupergvg,omitempty"`
	SupergvgLv           *uint32           `protobuf:"varint,26,opt,name=supergvg_lv,json=supergvgLv,def=0" json:"supergvg_lv,omitempty"`
	MaterialMachineCount *uint32           `protobuf:"varint,27,opt,name=material_machine_count,json=materialMachineCount,def=0" json:"material_machine_count,omitempty"`
}

// Default values for GuildData fields.
const (
	Default_GuildData_Questresettime       = uint32(0)
	Default_GuildData_Asset                = uint32(0)
	Default_GuildData_Dismisstime          = uint32(0)
	Default_GuildData_Zonetime             = uint32(0)
	Default_GuildData_Createtime           = uint32(0)
	Default_GuildData_Nextzone             = uint32(0)
	Default_GuildData_Donatetime1          = uint32(0)
	Default_GuildData_Donatetime2          = uint32(0)
	Default_GuildData_Assettoday           = uint32(0)
	Default_GuildData_Citygiveuptime       = uint32(0)
	Default_GuildData_Openfunction         = uint32(0)
	Default_GuildData_GvgTreasureCount     = uint32(0)
	Default_GuildData_GuildTreasureCount   = uint32(0)
	Default_GuildData_BcoinTreasureCount   = uint32(0)
	Default_GuildData_Insupergvg           = bool(false)
	Default_GuildData_SupergvgLv           = uint32(0)
	Default_GuildData_MaterialMachineCount = uint32(0)
)

func (x *GuildData) Reset() {
	*x = GuildData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildData) ProtoMessage() {}

func (x *GuildData) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildData.ProtoReflect.Descriptor instead.
func (*GuildData) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{37}
}

func (x *GuildData) GetSummary() *GuildSummaryData {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *GuildData) GetQuestresettime() uint32 {
	if x != nil && x.Questresettime != nil {
		return *x.Questresettime
	}
	return Default_GuildData_Questresettime
}

func (x *GuildData) GetAsset() uint32 {
	if x != nil && x.Asset != nil {
		return *x.Asset
	}
	return Default_GuildData_Asset
}

func (x *GuildData) GetDismisstime() uint32 {
	if x != nil && x.Dismisstime != nil {
		return *x.Dismisstime
	}
	return Default_GuildData_Dismisstime
}

func (x *GuildData) GetZonetime() uint32 {
	if x != nil && x.Zonetime != nil {
		return *x.Zonetime
	}
	return Default_GuildData_Zonetime
}

func (x *GuildData) GetCreatetime() uint32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return Default_GuildData_Createtime
}

func (x *GuildData) GetNextzone() uint32 {
	if x != nil && x.Nextzone != nil {
		return *x.Nextzone
	}
	return Default_GuildData_Nextzone
}

func (x *GuildData) GetDonatetime1() uint32 {
	if x != nil && x.Donatetime1 != nil {
		return *x.Donatetime1
	}
	return Default_GuildData_Donatetime1
}

func (x *GuildData) GetDonatetime2() uint32 {
	if x != nil && x.Donatetime2 != nil {
		return *x.Donatetime2
	}
	return Default_GuildData_Donatetime2
}

func (x *GuildData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GuildData) GetBoardinfo() string {
	if x != nil && x.Boardinfo != nil {
		return *x.Boardinfo
	}
	return ""
}

func (x *GuildData) GetRecruitinfo() string {
	if x != nil && x.Recruitinfo != nil {
		return *x.Recruitinfo
	}
	return ""
}

func (x *GuildData) GetMembers() []*GuildMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GuildData) GetApplys() []*GuildApply {
	if x != nil {
		return x.Applys
	}
	return nil
}

func (x *GuildData) GetJobs() []*GuildJob {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *GuildData) GetAssettoday() uint32 {
	if x != nil && x.Assettoday != nil {
		return *x.Assettoday
	}
	return Default_GuildData_Assettoday
}

func (x *GuildData) GetCitygiveuptime() uint32 {
	if x != nil && x.Citygiveuptime != nil {
		return *x.Citygiveuptime
	}
	return Default_GuildData_Citygiveuptime
}

func (x *GuildData) GetOpenfunction() uint32 {
	if x != nil && x.Openfunction != nil {
		return *x.Openfunction
	}
	return Default_GuildData_Openfunction
}

func (x *GuildData) GetChallenges() []*GuildChallenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

func (x *GuildData) GetGvgTreasureCount() uint32 {
	if x != nil && x.GvgTreasureCount != nil {
		return *x.GvgTreasureCount
	}
	return Default_GuildData_GvgTreasureCount
}

func (x *GuildData) GetGuildTreasureCount() uint32 {
	if x != nil && x.GuildTreasureCount != nil {
		return *x.GuildTreasureCount
	}
	return Default_GuildData_GuildTreasureCount
}

func (x *GuildData) GetBcoinTreasureCount() uint32 {
	if x != nil && x.BcoinTreasureCount != nil {
		return *x.BcoinTreasureCount
	}
	return Default_GuildData_BcoinTreasureCount
}

func (x *GuildData) GetInsupergvg() bool {
	if x != nil && x.Insupergvg != nil {
		return *x.Insupergvg
	}
	return Default_GuildData_Insupergvg
}

func (x *GuildData) GetSupergvgLv() uint32 {
	if x != nil && x.SupergvgLv != nil {
		return *x.SupergvgLv
	}
	return Default_GuildData_SupergvgLv
}

func (x *GuildData) GetMaterialMachineCount() uint32 {
	if x != nil && x.MaterialMachineCount != nil {
		return *x.MaterialMachineCount
	}
	return Default_GuildData_MaterialMachineCount
}

type QueryGuildListGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param   *GuildParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=1" json:"param,omitempty"`
	Keyword *string             `protobuf:"bytes,3,opt,name=keyword" json:"keyword,omitempty"`
	Page    *uint32             `protobuf:"varint,4,opt,name=page,def=0" json:"page,omitempty"`
	List    []*GuildSummaryData `protobuf:"bytes,5,rep,name=list" json:"list,omitempty"`
	Type    *uint32             `protobuf:"varint,6,opt,name=type,def=0" json:"type,omitempty"`
}

// Default values for QueryGuildListGuildCmd fields.
const (
	Default_QueryGuildListGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_QueryGuildListGuildCmd_Param = GuildParam_GUILDPARAM_GUILDLIST
	Default_QueryGuildListGuildCmd_Page  = uint32(0)
	Default_QueryGuildListGuildCmd_Type  = uint32(0)
)

func (x *QueryGuildListGuildCmd) Reset() {
	*x = QueryGuildListGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGuildListGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGuildListGuildCmd) ProtoMessage() {}

func (x *QueryGuildListGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGuildListGuildCmd.ProtoReflect.Descriptor instead.
func (*QueryGuildListGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{38}
}

func (x *QueryGuildListGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryGuildListGuildCmd_Cmd
}

func (x *QueryGuildListGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryGuildListGuildCmd_Param
}

func (x *QueryGuildListGuildCmd) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *QueryGuildListGuildCmd) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return Default_QueryGuildListGuildCmd_Page
}

func (x *QueryGuildListGuildCmd) GetList() []*GuildSummaryData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *QueryGuildListGuildCmd) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_QueryGuildListGuildCmd_Type
}

type CreateGuildGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=2" json:"param,omitempty"`
	Name  *string     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

// Default values for CreateGuildGuildCmd fields.
const (
	Default_CreateGuildGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_CreateGuildGuildCmd_Param = GuildParam_GUILDPARAM_CREATEGUILD
)

func (x *CreateGuildGuildCmd) Reset() {
	*x = CreateGuildGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGuildGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGuildGuildCmd) ProtoMessage() {}

func (x *CreateGuildGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGuildGuildCmd.ProtoReflect.Descriptor instead.
func (*CreateGuildGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{39}
}

func (x *CreateGuildGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CreateGuildGuildCmd_Cmd
}

func (x *CreateGuildGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CreateGuildGuildCmd_Param
}

func (x *CreateGuildGuildCmd) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type EnterGuildGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=3" json:"param,omitempty"`
	Data  *GuildData  `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

// Default values for EnterGuildGuildCmd fields.
const (
	Default_EnterGuildGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_EnterGuildGuildCmd_Param = GuildParam_GUILDPARAM_ENTERGUILD
)

func (x *EnterGuildGuildCmd) Reset() {
	*x = EnterGuildGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterGuildGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterGuildGuildCmd) ProtoMessage() {}

func (x *EnterGuildGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterGuildGuildCmd.ProtoReflect.Descriptor instead.
func (*EnterGuildGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{40}
}

func (x *EnterGuildGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnterGuildGuildCmd_Cmd
}

func (x *EnterGuildGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnterGuildGuildCmd_Param
}

func (x *EnterGuildGuildCmd) GetData() *GuildData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GuildMemberUpdateGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param   *GuildParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=4" json:"param,omitempty"`
	Updates []*GuildMember `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
	Dels    []uint64       `protobuf:"varint,4,rep,name=dels" json:"dels,omitempty"`
}

// Default values for GuildMemberUpdateGuildCmd fields.
const (
	Default_GuildMemberUpdateGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_GuildMemberUpdateGuildCmd_Param = GuildParam_GUILDPARAM_MEMBERUPDATE
)

func (x *GuildMemberUpdateGuildCmd) Reset() {
	*x = GuildMemberUpdateGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMemberUpdateGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMemberUpdateGuildCmd) ProtoMessage() {}

func (x *GuildMemberUpdateGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMemberUpdateGuildCmd.ProtoReflect.Descriptor instead.
func (*GuildMemberUpdateGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{41}
}

func (x *GuildMemberUpdateGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildMemberUpdateGuildCmd_Cmd
}

func (x *GuildMemberUpdateGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildMemberUpdateGuildCmd_Param
}

func (x *GuildMemberUpdateGuildCmd) GetUpdates() []*GuildMember {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *GuildMemberUpdateGuildCmd) GetDels() []uint64 {
	if x != nil {
		return x.Dels
	}
	return nil
}

type GuildApplyUpdateGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param   *GuildParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=5" json:"param,omitempty"`
	Updates []*GuildApply `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
	Dels    []uint64      `protobuf:"varint,4,rep,name=dels" json:"dels,omitempty"`
}

// Default values for GuildApplyUpdateGuildCmd fields.
const (
	Default_GuildApplyUpdateGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_GuildApplyUpdateGuildCmd_Param = GuildParam_GUILDPARAM_APPLYUPDATE
)

func (x *GuildApplyUpdateGuildCmd) Reset() {
	*x = GuildApplyUpdateGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildApplyUpdateGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildApplyUpdateGuildCmd) ProtoMessage() {}

func (x *GuildApplyUpdateGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildApplyUpdateGuildCmd.ProtoReflect.Descriptor instead.
func (*GuildApplyUpdateGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{42}
}

func (x *GuildApplyUpdateGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildApplyUpdateGuildCmd_Cmd
}

func (x *GuildApplyUpdateGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildApplyUpdateGuildCmd_Param
}

func (x *GuildApplyUpdateGuildCmd) GetUpdates() []*GuildApply {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *GuildApplyUpdateGuildCmd) GetDels() []uint64 {
	if x != nil {
		return x.Dels
	}
	return nil
}

type GuildDataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *EGuildData `protobuf:"varint,1,opt,name=type,enum=Cmd.EGuildData,def=0" json:"type,omitempty"`
	Value *uint64     `protobuf:"varint,2,opt,name=value,def=0" json:"value,omitempty"`
	Data  *string     `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

// Default values for GuildDataUpdate fields.
const (
	Default_GuildDataUpdate_Type  = EGuildData_EGUILDDATA_MIN
	Default_GuildDataUpdate_Value = uint64(0)
)

func (x *GuildDataUpdate) Reset() {
	*x = GuildDataUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildDataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildDataUpdate) ProtoMessage() {}

func (x *GuildDataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildDataUpdate.ProtoReflect.Descriptor instead.
func (*GuildDataUpdate) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{43}
}

func (x *GuildDataUpdate) GetType() EGuildData {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_GuildDataUpdate_Type
}

func (x *GuildDataUpdate) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_GuildDataUpdate_Value
}

func (x *GuildDataUpdate) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

type GuildDataUpdateGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param   *GuildParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=6" json:"param,omitempty"`
	Updates []*GuildDataUpdate `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
}

// Default values for GuildDataUpdateGuildCmd fields.
const (
	Default_GuildDataUpdateGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_GuildDataUpdateGuildCmd_Param = GuildParam_GUILDPARAM_GUILDDATAUPDATE
)

func (x *GuildDataUpdateGuildCmd) Reset() {
	*x = GuildDataUpdateGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildDataUpdateGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildDataUpdateGuildCmd) ProtoMessage() {}

func (x *GuildDataUpdateGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildDataUpdateGuildCmd.ProtoReflect.Descriptor instead.
func (*GuildDataUpdateGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{44}
}

func (x *GuildDataUpdateGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildDataUpdateGuildCmd_Cmd
}

func (x *GuildDataUpdateGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildDataUpdateGuildCmd_Param
}

func (x *GuildDataUpdateGuildCmd) GetUpdates() []*GuildDataUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type GuildMemberDataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *EGuildMemberData `protobuf:"varint,1,opt,name=type,enum=Cmd.EGuildMemberData,def=0" json:"type,omitempty"`
	Value *uint64           `protobuf:"varint,2,opt,name=value,def=0" json:"value,omitempty"`
	Data  *string           `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

// Default values for GuildMemberDataUpdate fields.
const (
	Default_GuildMemberDataUpdate_Type  = EGuildMemberData_EGUILDMEMBERDATA_MIN
	Default_GuildMemberDataUpdate_Value = uint64(0)
)

func (x *GuildMemberDataUpdate) Reset() {
	*x = GuildMemberDataUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMemberDataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMemberDataUpdate) ProtoMessage() {}

func (x *GuildMemberDataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMemberDataUpdate.ProtoReflect.Descriptor instead.
func (*GuildMemberDataUpdate) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{45}
}

func (x *GuildMemberDataUpdate) GetType() EGuildMemberData {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_GuildMemberDataUpdate_Type
}

func (x *GuildMemberDataUpdate) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_GuildMemberDataUpdate_Value
}

func (x *GuildMemberDataUpdate) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

type GuildMemberDataUpdateGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command                 `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param   *GuildParam              `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=7" json:"param,omitempty"`
	Type    *EGuildList              `protobuf:"varint,3,opt,name=type,enum=Cmd.EGuildList,def=1" json:"type,omitempty"`
	Charid  *uint64                  `protobuf:"varint,4,opt,name=charid,def=0" json:"charid,omitempty"`
	Updates []*GuildMemberDataUpdate `protobuf:"bytes,5,rep,name=updates" json:"updates,omitempty"`
}

// Default values for GuildMemberDataUpdateGuildCmd fields.
const (
	Default_GuildMemberDataUpdateGuildCmd_Cmd    = Command_SESSION_USER_GUILD_PROTOCMD
	Default_GuildMemberDataUpdateGuildCmd_Param  = GuildParam_GUILDPARAM_MEMBERDATAUPDATE
	Default_GuildMemberDataUpdateGuildCmd_Type   = EGuildList_EGUILDLIST_MEMBER
	Default_GuildMemberDataUpdateGuildCmd_Charid = uint64(0)
)

func (x *GuildMemberDataUpdateGuildCmd) Reset() {
	*x = GuildMemberDataUpdateGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMemberDataUpdateGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMemberDataUpdateGuildCmd) ProtoMessage() {}

func (x *GuildMemberDataUpdateGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMemberDataUpdateGuildCmd.ProtoReflect.Descriptor instead.
func (*GuildMemberDataUpdateGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{46}
}

func (x *GuildMemberDataUpdateGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildMemberDataUpdateGuildCmd_Cmd
}

func (x *GuildMemberDataUpdateGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildMemberDataUpdateGuildCmd_Param
}

func (x *GuildMemberDataUpdateGuildCmd) GetType() EGuildList {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_GuildMemberDataUpdateGuildCmd_Type
}

func (x *GuildMemberDataUpdateGuildCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_GuildMemberDataUpdateGuildCmd_Charid
}

func (x *GuildMemberDataUpdateGuildCmd) GetUpdates() []*GuildMemberDataUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type ApplyGuildGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=8" json:"param,omitempty"`
	Guid  *uint64     `protobuf:"varint,3,opt,name=guid,def=0" json:"guid,omitempty"`
}

// Default values for ApplyGuildGuildCmd fields.
const (
	Default_ApplyGuildGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_ApplyGuildGuildCmd_Param = GuildParam_GUILDPARAM_APPLYGUILD
	Default_ApplyGuildGuildCmd_Guid  = uint64(0)
)

func (x *ApplyGuildGuildCmd) Reset() {
	*x = ApplyGuildGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyGuildGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyGuildGuildCmd) ProtoMessage() {}

func (x *ApplyGuildGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyGuildGuildCmd.ProtoReflect.Descriptor instead.
func (*ApplyGuildGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{47}
}

func (x *ApplyGuildGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ApplyGuildGuildCmd_Cmd
}

func (x *ApplyGuildGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ApplyGuildGuildCmd_Param
}

func (x *ApplyGuildGuildCmd) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_ApplyGuildGuildCmd_Guid
}

type ProcessApplyGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param  *GuildParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=9" json:"param,omitempty"`
	Action *EGuildAction `protobuf:"varint,3,opt,name=action,enum=Cmd.EGuildAction,def=0" json:"action,omitempty"`
	Charid *uint64       `protobuf:"varint,4,opt,name=charid,def=0" json:"charid,omitempty"`
}

// Default values for ProcessApplyGuildCmd fields.
const (
	Default_ProcessApplyGuildCmd_Cmd    = Command_SESSION_USER_GUILD_PROTOCMD
	Default_ProcessApplyGuildCmd_Param  = GuildParam_GUILDPARAM_PROCESSAPPLY
	Default_ProcessApplyGuildCmd_Action = EGuildAction_EGUILDACTION_MIN
	Default_ProcessApplyGuildCmd_Charid = uint64(0)
)

func (x *ProcessApplyGuildCmd) Reset() {
	*x = ProcessApplyGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessApplyGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessApplyGuildCmd) ProtoMessage() {}

func (x *ProcessApplyGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessApplyGuildCmd.ProtoReflect.Descriptor instead.
func (*ProcessApplyGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{48}
}

func (x *ProcessApplyGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ProcessApplyGuildCmd_Cmd
}

func (x *ProcessApplyGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ProcessApplyGuildCmd_Param
}

func (x *ProcessApplyGuildCmd) GetAction() EGuildAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_ProcessApplyGuildCmd_Action
}

func (x *ProcessApplyGuildCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_ProcessApplyGuildCmd_Charid
}

type InviteMemberGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param      *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=10" json:"param,omitempty"`
	Charid     *uint64     `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Guildid    *uint64     `protobuf:"varint,4,opt,name=guildid,def=0" json:"guildid,omitempty"`
	Guildname  *string     `protobuf:"bytes,5,opt,name=guildname" json:"guildname,omitempty"`
	Invitename *string     `protobuf:"bytes,6,opt,name=invitename" json:"invitename,omitempty"`
}

// Default values for InviteMemberGuildCmd fields.
const (
	Default_InviteMemberGuildCmd_Cmd     = Command_SESSION_USER_GUILD_PROTOCMD
	Default_InviteMemberGuildCmd_Param   = GuildParam_GUILDPARAM_INVITEMEMBER
	Default_InviteMemberGuildCmd_Charid  = uint64(0)
	Default_InviteMemberGuildCmd_Guildid = uint64(0)
)

func (x *InviteMemberGuildCmd) Reset() {
	*x = InviteMemberGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteMemberGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteMemberGuildCmd) ProtoMessage() {}

func (x *InviteMemberGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteMemberGuildCmd.ProtoReflect.Descriptor instead.
func (*InviteMemberGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{49}
}

func (x *InviteMemberGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InviteMemberGuildCmd_Cmd
}

func (x *InviteMemberGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InviteMemberGuildCmd_Param
}

func (x *InviteMemberGuildCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_InviteMemberGuildCmd_Charid
}

func (x *InviteMemberGuildCmd) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return Default_InviteMemberGuildCmd_Guildid
}

func (x *InviteMemberGuildCmd) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

func (x *InviteMemberGuildCmd) GetInvitename() string {
	if x != nil && x.Invitename != nil {
		return *x.Invitename
	}
	return ""
}

type ProcessInviteGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param  *GuildParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=11" json:"param,omitempty"`
	Action *EGuildAction `protobuf:"varint,3,opt,name=action,enum=Cmd.EGuildAction,def=0" json:"action,omitempty"`
	Guid   *uint64       `protobuf:"varint,4,opt,name=guid,def=0" json:"guid,omitempty"`
}

// Default values for ProcessInviteGuildCmd fields.
const (
	Default_ProcessInviteGuildCmd_Cmd    = Command_SESSION_USER_GUILD_PROTOCMD
	Default_ProcessInviteGuildCmd_Param  = GuildParam_GUILDPARAM_PROCESSINVITEMEMBER
	Default_ProcessInviteGuildCmd_Action = EGuildAction_EGUILDACTION_MIN
	Default_ProcessInviteGuildCmd_Guid   = uint64(0)
)

func (x *ProcessInviteGuildCmd) Reset() {
	*x = ProcessInviteGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInviteGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInviteGuildCmd) ProtoMessage() {}

func (x *ProcessInviteGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInviteGuildCmd.ProtoReflect.Descriptor instead.
func (*ProcessInviteGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{50}
}

func (x *ProcessInviteGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ProcessInviteGuildCmd_Cmd
}

func (x *ProcessInviteGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ProcessInviteGuildCmd_Param
}

func (x *ProcessInviteGuildCmd) GetAction() EGuildAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_ProcessInviteGuildCmd_Action
}

func (x *ProcessInviteGuildCmd) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_ProcessInviteGuildCmd_Guid
}

type SetGuildOptionGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param     *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=12" json:"param,omitempty"`
	Board     *string     `protobuf:"bytes,3,opt,name=board" json:"board,omitempty"`
	Recruit   *string     `protobuf:"bytes,4,opt,name=recruit" json:"recruit,omitempty"`
	Portrait  *string     `protobuf:"bytes,5,opt,name=portrait" json:"portrait,omitempty"`
	Jobs      []*GuildJob `protobuf:"bytes,6,rep,name=jobs" json:"jobs,omitempty"`
	Applied   *bool       `protobuf:"varint,7,opt,name=applied,def=1" json:"applied,omitempty"`
	Checked   *bool       `protobuf:"varint,8,opt,name=checked,def=1" json:"checked,omitempty"`
	Needlevel *uint32     `protobuf:"varint,9,opt,name=needlevel,def=0" json:"needlevel,omitempty"`
}

// Default values for SetGuildOptionGuildCmd fields.
const (
	Default_SetGuildOptionGuildCmd_Cmd       = Command_SESSION_USER_GUILD_PROTOCMD
	Default_SetGuildOptionGuildCmd_Param     = GuildParam_GUILDPARAM_SETOPTION
	Default_SetGuildOptionGuildCmd_Applied   = bool(true)
	Default_SetGuildOptionGuildCmd_Checked   = bool(true)
	Default_SetGuildOptionGuildCmd_Needlevel = uint32(0)
)

func (x *SetGuildOptionGuildCmd) Reset() {
	*x = SetGuildOptionGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGuildOptionGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGuildOptionGuildCmd) ProtoMessage() {}

func (x *SetGuildOptionGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGuildOptionGuildCmd.ProtoReflect.Descriptor instead.
func (*SetGuildOptionGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{51}
}

func (x *SetGuildOptionGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SetGuildOptionGuildCmd_Cmd
}

func (x *SetGuildOptionGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SetGuildOptionGuildCmd_Param
}

func (x *SetGuildOptionGuildCmd) GetBoard() string {
	if x != nil && x.Board != nil {
		return *x.Board
	}
	return ""
}

func (x *SetGuildOptionGuildCmd) GetRecruit() string {
	if x != nil && x.Recruit != nil {
		return *x.Recruit
	}
	return ""
}

func (x *SetGuildOptionGuildCmd) GetPortrait() string {
	if x != nil && x.Portrait != nil {
		return *x.Portrait
	}
	return ""
}

func (x *SetGuildOptionGuildCmd) GetJobs() []*GuildJob {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *SetGuildOptionGuildCmd) GetApplied() bool {
	if x != nil && x.Applied != nil {
		return *x.Applied
	}
	return Default_SetGuildOptionGuildCmd_Applied
}

func (x *SetGuildOptionGuildCmd) GetChecked() bool {
	if x != nil && x.Checked != nil {
		return *x.Checked
	}
	return Default_SetGuildOptionGuildCmd_Checked
}

func (x *SetGuildOptionGuildCmd) GetNeedlevel() uint32 {
	if x != nil && x.Needlevel != nil {
		return *x.Needlevel
	}
	return Default_SetGuildOptionGuildCmd_Needlevel
}

type KickMemberGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param  *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=13" json:"param,omitempty"`
	Charid *uint64     `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
}

// Default values for KickMemberGuildCmd fields.
const (
	Default_KickMemberGuildCmd_Cmd    = Command_SESSION_USER_GUILD_PROTOCMD
	Default_KickMemberGuildCmd_Param  = GuildParam_GUILDPARAM_KICKMEMBER
	Default_KickMemberGuildCmd_Charid = uint64(0)
)

func (x *KickMemberGuildCmd) Reset() {
	*x = KickMemberGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickMemberGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickMemberGuildCmd) ProtoMessage() {}

func (x *KickMemberGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickMemberGuildCmd.ProtoReflect.Descriptor instead.
func (*KickMemberGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{52}
}

func (x *KickMemberGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_KickMemberGuildCmd_Cmd
}

func (x *KickMemberGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_KickMemberGuildCmd_Param
}

func (x *KickMemberGuildCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_KickMemberGuildCmd_Charid
}

type ChangeJobGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param  *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=14" json:"param,omitempty"`
	Charid *uint64     `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Job    *EGuildJob  `protobuf:"varint,4,opt,name=job,enum=Cmd.EGuildJob,def=0" json:"job,omitempty"`
}

// Default values for ChangeJobGuildCmd fields.
const (
	Default_ChangeJobGuildCmd_Cmd    = Command_SESSION_USER_GUILD_PROTOCMD
	Default_ChangeJobGuildCmd_Param  = GuildParam_GUILDPARAM_CHANGEJOB
	Default_ChangeJobGuildCmd_Charid = uint64(0)
	Default_ChangeJobGuildCmd_Job    = EGuildJob_EGUILDJOB_MIN
)

func (x *ChangeJobGuildCmd) Reset() {
	*x = ChangeJobGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeJobGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeJobGuildCmd) ProtoMessage() {}

func (x *ChangeJobGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeJobGuildCmd.ProtoReflect.Descriptor instead.
func (*ChangeJobGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{53}
}

func (x *ChangeJobGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChangeJobGuildCmd_Cmd
}

func (x *ChangeJobGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChangeJobGuildCmd_Param
}

func (x *ChangeJobGuildCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_ChangeJobGuildCmd_Charid
}

func (x *ChangeJobGuildCmd) GetJob() EGuildJob {
	if x != nil && x.Job != nil {
		return *x.Job
	}
	return Default_ChangeJobGuildCmd_Job
}

type ExitGuildGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=15" json:"param,omitempty"`
}

// Default values for ExitGuildGuildCmd fields.
const (
	Default_ExitGuildGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_ExitGuildGuildCmd_Param = GuildParam_GUILDPARAM_EXITGUILD
)

func (x *ExitGuildGuildCmd) Reset() {
	*x = ExitGuildGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitGuildGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitGuildGuildCmd) ProtoMessage() {}

func (x *ExitGuildGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitGuildGuildCmd.ProtoReflect.Descriptor instead.
func (*ExitGuildGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{54}
}

func (x *ExitGuildGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExitGuildGuildCmd_Cmd
}

func (x *ExitGuildGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExitGuildGuildCmd_Param
}

type ExchangeChairGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param     *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=16" json:"param,omitempty"`
	Newcharid *uint64     `protobuf:"varint,3,opt,name=newcharid,def=0" json:"newcharid,omitempty"`
}

// Default values for ExchangeChairGuildCmd fields.
const (
	Default_ExchangeChairGuildCmd_Cmd       = Command_SESSION_USER_GUILD_PROTOCMD
	Default_ExchangeChairGuildCmd_Param     = GuildParam_GUILDPARAM_EXCHANGECHAIR
	Default_ExchangeChairGuildCmd_Newcharid = uint64(0)
)

func (x *ExchangeChairGuildCmd) Reset() {
	*x = ExchangeChairGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeChairGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeChairGuildCmd) ProtoMessage() {}

func (x *ExchangeChairGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeChairGuildCmd.ProtoReflect.Descriptor instead.
func (*ExchangeChairGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{55}
}

func (x *ExchangeChairGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExchangeChairGuildCmd_Cmd
}

func (x *ExchangeChairGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExchangeChairGuildCmd_Param
}

func (x *ExchangeChairGuildCmd) GetNewcharid() uint64 {
	if x != nil && x.Newcharid != nil {
		return *x.Newcharid
	}
	return Default_ExchangeChairGuildCmd_Newcharid
}

type DismissGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=17" json:"param,omitempty"`
	Set   *bool       `protobuf:"varint,3,opt,name=set,def=0" json:"set,omitempty"`
}

// Default values for DismissGuildCmd fields.
const (
	Default_DismissGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_DismissGuildCmd_Param = GuildParam_GUILDPARAM_DISMISSGUILD
	Default_DismissGuildCmd_Set   = bool(false)
)

func (x *DismissGuildCmd) Reset() {
	*x = DismissGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DismissGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DismissGuildCmd) ProtoMessage() {}

func (x *DismissGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DismissGuildCmd.ProtoReflect.Descriptor instead.
func (*DismissGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{56}
}

func (x *DismissGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DismissGuildCmd_Cmd
}

func (x *DismissGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DismissGuildCmd_Param
}

func (x *DismissGuildCmd) GetSet() bool {
	if x != nil && x.Set != nil {
		return *x.Set
	}
	return Default_DismissGuildCmd_Set
}

type LevelupGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=18" json:"param,omitempty"`
}

// Default values for LevelupGuildCmd fields.
const (
	Default_LevelupGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_LevelupGuildCmd_Param = GuildParam_GUILDPARAM_LEVELUPGUILD
)

func (x *LevelupGuildCmd) Reset() {
	*x = LevelupGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelupGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelupGuildCmd) ProtoMessage() {}

func (x *LevelupGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelupGuildCmd.ProtoReflect.Descriptor instead.
func (*LevelupGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{57}
}

func (x *LevelupGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LevelupGuildCmd_Cmd
}

func (x *LevelupGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LevelupGuildCmd_Param
}

type DonateGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param    *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=19" json:"param,omitempty"`
	Configid *uint32     `protobuf:"varint,3,opt,name=configid,def=0" json:"configid,omitempty"`
	Time     *uint32     `protobuf:"varint,4,opt,name=time,def=0" json:"time,omitempty"`
	Count    *uint32     `protobuf:"varint,5,opt,name=count,def=0" json:"count,omitempty"`
}

// Default values for DonateGuildCmd fields.
const (
	Default_DonateGuildCmd_Cmd      = Command_SESSION_USER_GUILD_PROTOCMD
	Default_DonateGuildCmd_Param    = GuildParam_GUILDPARAM_DONATE
	Default_DonateGuildCmd_Configid = uint32(0)
	Default_DonateGuildCmd_Time     = uint32(0)
	Default_DonateGuildCmd_Count    = uint32(0)
)

func (x *DonateGuildCmd) Reset() {
	*x = DonateGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DonateGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonateGuildCmd) ProtoMessage() {}

func (x *DonateGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonateGuildCmd.ProtoReflect.Descriptor instead.
func (*DonateGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{58}
}

func (x *DonateGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DonateGuildCmd_Cmd
}

func (x *DonateGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DonateGuildCmd_Param
}

func (x *DonateGuildCmd) GetConfigid() uint32 {
	if x != nil && x.Configid != nil {
		return *x.Configid
	}
	return Default_DonateGuildCmd_Configid
}

func (x *DonateGuildCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_DonateGuildCmd_Time
}

func (x *DonateGuildCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_DonateGuildCmd_Count
}

type DonateReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Num *uint32 `protobuf:"varint,2,opt,name=num,def=0" json:"num,omitempty"`
}

// Default values for DonateReward fields.
const (
	Default_DonateReward_Id  = uint32(0)
	Default_DonateReward_Num = uint32(0)
)

func (x *DonateReward) Reset() {
	*x = DonateReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DonateReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonateReward) ProtoMessage() {}

func (x *DonateReward) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonateReward.ProtoReflect.Descriptor instead.
func (*DonateReward) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{59}
}

func (x *DonateReward) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_DonateReward_Id
}

func (x *DonateReward) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return Default_DonateReward_Num
}

type DonateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configid     *uint32         `protobuf:"varint,1,opt,name=configid,def=0" json:"configid,omitempty"`
	Count        *uint32         `protobuf:"varint,2,opt,name=count,def=0" json:"count,omitempty"`
	Time         *uint32         `protobuf:"varint,3,opt,name=time,def=0" json:"time,omitempty"`
	Itemid       *uint32         `protobuf:"varint,4,opt,name=itemid,def=0" json:"itemid,omitempty"`
	Itemcount    *uint32         `protobuf:"varint,5,opt,name=itemcount,def=0" json:"itemcount,omitempty"`
	Contribute   *uint32         `protobuf:"varint,6,opt,name=contribute,def=0" json:"contribute,omitempty"`
	Medal        *uint32         `protobuf:"varint,7,opt,name=medal,def=0" json:"medal,omitempty"`
	Nextconfigid *uint32         `protobuf:"varint,8,opt,name=nextconfigid,def=0" json:"nextconfigid,omitempty"`
	Con          []*DonateReward `protobuf:"bytes,9,rep,name=con" json:"con,omitempty"`
	Asset        []*DonateReward `protobuf:"bytes,10,rep,name=asset" json:"asset,omitempty"`
}

// Default values for DonateItem fields.
const (
	Default_DonateItem_Configid     = uint32(0)
	Default_DonateItem_Count        = uint32(0)
	Default_DonateItem_Time         = uint32(0)
	Default_DonateItem_Itemid       = uint32(0)
	Default_DonateItem_Itemcount    = uint32(0)
	Default_DonateItem_Contribute   = uint32(0)
	Default_DonateItem_Medal        = uint32(0)
	Default_DonateItem_Nextconfigid = uint32(0)
)

func (x *DonateItem) Reset() {
	*x = DonateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DonateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonateItem) ProtoMessage() {}

func (x *DonateItem) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonateItem.ProtoReflect.Descriptor instead.
func (*DonateItem) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{60}
}

func (x *DonateItem) GetConfigid() uint32 {
	if x != nil && x.Configid != nil {
		return *x.Configid
	}
	return Default_DonateItem_Configid
}

func (x *DonateItem) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_DonateItem_Count
}

func (x *DonateItem) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_DonateItem_Time
}

func (x *DonateItem) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_DonateItem_Itemid
}

func (x *DonateItem) GetItemcount() uint32 {
	if x != nil && x.Itemcount != nil {
		return *x.Itemcount
	}
	return Default_DonateItem_Itemcount
}

func (x *DonateItem) GetContribute() uint32 {
	if x != nil && x.Contribute != nil {
		return *x.Contribute
	}
	return Default_DonateItem_Contribute
}

func (x *DonateItem) GetMedal() uint32 {
	if x != nil && x.Medal != nil {
		return *x.Medal
	}
	return Default_DonateItem_Medal
}

func (x *DonateItem) GetNextconfigid() uint32 {
	if x != nil && x.Nextconfigid != nil {
		return *x.Nextconfigid
	}
	return Default_DonateItem_Nextconfigid
}

func (x *DonateItem) GetCon() []*DonateReward {
	if x != nil {
		return x.Con
	}
	return nil
}

func (x *DonateItem) GetAsset() []*DonateReward {
	if x != nil {
		return x.Asset
	}
	return nil
}

type DonateListGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=25" json:"param,omitempty"`
	Items []*DonateItem `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for DonateListGuildCmd fields.
const (
	Default_DonateListGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_DonateListGuildCmd_Param = GuildParam_GUILDPARAM_DONATELIST
)

func (x *DonateListGuildCmd) Reset() {
	*x = DonateListGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DonateListGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonateListGuildCmd) ProtoMessage() {}

func (x *DonateListGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonateListGuildCmd.ProtoReflect.Descriptor instead.
func (*DonateListGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{61}
}

func (x *DonateListGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DonateListGuildCmd_Cmd
}

func (x *DonateListGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DonateListGuildCmd_Param
}

func (x *DonateListGuildCmd) GetItems() []*DonateItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type UpdateDonateItemGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=26" json:"param,omitempty"`
	Item  *DonateItem `protobuf:"bytes,3,opt,name=item" json:"item,omitempty"`
	Del   *DonateItem `protobuf:"bytes,4,opt,name=del" json:"del,omitempty"`
}

// Default values for UpdateDonateItemGuildCmd fields.
const (
	Default_UpdateDonateItemGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_UpdateDonateItemGuildCmd_Param = GuildParam_GUILDPARAM_UPDATEDONATEITEM
)

func (x *UpdateDonateItemGuildCmd) Reset() {
	*x = UpdateDonateItemGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDonateItemGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDonateItemGuildCmd) ProtoMessage() {}

func (x *UpdateDonateItemGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDonateItemGuildCmd.ProtoReflect.Descriptor instead.
func (*UpdateDonateItemGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateDonateItemGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateDonateItemGuildCmd_Cmd
}

func (x *UpdateDonateItemGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateDonateItemGuildCmd_Param
}

func (x *UpdateDonateItemGuildCmd) GetItem() *DonateItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *UpdateDonateItemGuildCmd) GetDel() *DonateItem {
	if x != nil {
		return x.Del
	}
	return nil
}

type DonateFrameGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=27" json:"param,omitempty"`
	Open  *bool       `protobuf:"varint,3,opt,name=open,def=0" json:"open,omitempty"`
}

// Default values for DonateFrameGuildCmd fields.
const (
	Default_DonateFrameGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_DonateFrameGuildCmd_Param = GuildParam_GUILDPARAM_DONATEFRAMESTATUS
	Default_DonateFrameGuildCmd_Open  = bool(false)
)

func (x *DonateFrameGuildCmd) Reset() {
	*x = DonateFrameGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DonateFrameGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DonateFrameGuildCmd) ProtoMessage() {}

func (x *DonateFrameGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DonateFrameGuildCmd.ProtoReflect.Descriptor instead.
func (*DonateFrameGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{63}
}

func (x *DonateFrameGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DonateFrameGuildCmd_Cmd
}

func (x *DonateFrameGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DonateFrameGuildCmd_Param
}

func (x *DonateFrameGuildCmd) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return Default_DonateFrameGuildCmd_Open
}

type EnterTerritoryGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param  *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=20" json:"param,omitempty"`
	Handid *uint64     `protobuf:"varint,3,opt,name=handid,def=0" json:"handid,omitempty"`
}

// Default values for EnterTerritoryGuildCmd fields.
const (
	Default_EnterTerritoryGuildCmd_Cmd    = Command_SESSION_USER_GUILD_PROTOCMD
	Default_EnterTerritoryGuildCmd_Param  = GuildParam_GUILDPARAM_ENTERGUILDTERRITORY
	Default_EnterTerritoryGuildCmd_Handid = uint64(0)
)

func (x *EnterTerritoryGuildCmd) Reset() {
	*x = EnterTerritoryGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterTerritoryGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterTerritoryGuildCmd) ProtoMessage() {}

func (x *EnterTerritoryGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterTerritoryGuildCmd.ProtoReflect.Descriptor instead.
func (*EnterTerritoryGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{64}
}

func (x *EnterTerritoryGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnterTerritoryGuildCmd_Cmd
}

func (x *EnterTerritoryGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnterTerritoryGuildCmd_Param
}

func (x *EnterTerritoryGuildCmd) GetHandid() uint64 {
	if x != nil && x.Handid != nil {
		return *x.Handid
	}
	return Default_EnterTerritoryGuildCmd_Handid
}

type PrayGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param          *GuildParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=21" json:"param,omitempty"`
	Action         *EPrayAction `protobuf:"varint,3,opt,name=action,enum=Cmd.EPrayAction,def=0" json:"action,omitempty"`
	Pray           *uint32      `protobuf:"varint,4,opt,name=pray,def=0" json:"pray,omitempty"`
	Count          *uint32      `protobuf:"varint,5,opt,name=count,def=0" json:"count,omitempty"`
	Usecertificate *bool        `protobuf:"varint,6,opt,name=usecertificate,def=0" json:"usecertificate,omitempty"`
}

// Default values for PrayGuildCmd fields.
const (
	Default_PrayGuildCmd_Cmd            = Command_SESSION_USER_GUILD_PROTOCMD
	Default_PrayGuildCmd_Param          = GuildParam_GUILDPARAM_PRAY
	Default_PrayGuildCmd_Action         = EPrayAction_EPRAYACTION_MIN
	Default_PrayGuildCmd_Pray           = uint32(0)
	Default_PrayGuildCmd_Count          = uint32(0)
	Default_PrayGuildCmd_Usecertificate = bool(false)
)

func (x *PrayGuildCmd) Reset() {
	*x = PrayGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrayGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrayGuildCmd) ProtoMessage() {}

func (x *PrayGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrayGuildCmd.ProtoReflect.Descriptor instead.
func (*PrayGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{65}
}

func (x *PrayGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PrayGuildCmd_Cmd
}

func (x *PrayGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PrayGuildCmd_Param
}

func (x *PrayGuildCmd) GetAction() EPrayAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_PrayGuildCmd_Action
}

func (x *PrayGuildCmd) GetPray() uint32 {
	if x != nil && x.Pray != nil {
		return *x.Pray
	}
	return Default_PrayGuildCmd_Pray
}

func (x *PrayGuildCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_PrayGuildCmd_Count
}

func (x *PrayGuildCmd) GetUsecertificate() bool {
	if x != nil && x.Usecertificate != nil {
		return *x.Usecertificate
	}
	return Default_PrayGuildCmd_Usecertificate
}

type GuildInfoNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param  *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=22" json:"param,omitempty"`
	Charid *uint64     `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Id     *uint64     `protobuf:"varint,4,opt,name=id,def=0" json:"id,omitempty"`
	Name   *string     `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Icon   *string     `protobuf:"bytes,6,opt,name=icon" json:"icon,omitempty"`
	Job    *string     `protobuf:"bytes,7,opt,name=job" json:"job,omitempty"`
}

// Default values for GuildInfoNtf fields.
const (
	Default_GuildInfoNtf_Cmd    = Command_SESSION_USER_GUILD_PROTOCMD
	Default_GuildInfoNtf_Param  = GuildParam_GUILDPARAM_GUILDINFONTF
	Default_GuildInfoNtf_Charid = uint64(0)
	Default_GuildInfoNtf_Id     = uint64(0)
)

func (x *GuildInfoNtf) Reset() {
	*x = GuildInfoNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildInfoNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildInfoNtf) ProtoMessage() {}

func (x *GuildInfoNtf) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildInfoNtf.ProtoReflect.Descriptor instead.
func (*GuildInfoNtf) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{66}
}

func (x *GuildInfoNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildInfoNtf_Cmd
}

func (x *GuildInfoNtf) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildInfoNtf_Param
}

func (x *GuildInfoNtf) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_GuildInfoNtf_Charid
}

func (x *GuildInfoNtf) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_GuildInfoNtf_Id
}

func (x *GuildInfoNtf) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GuildInfoNtf) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *GuildInfoNtf) GetJob() string {
	if x != nil && x.Job != nil {
		return *x.Job
	}
	return ""
}

type GuildPrayNtfGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=23" json:"param,omitempty"`
	Prays []*GuildMemberPray `protobuf:"bytes,3,rep,name=prays" json:"prays,omitempty"`
}

// Default values for GuildPrayNtfGuildCmd fields.
const (
	Default_GuildPrayNtfGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_GuildPrayNtfGuildCmd_Param = GuildParam_GUILDPARAM_GUILDPRAYNTF
)

func (x *GuildPrayNtfGuildCmd) Reset() {
	*x = GuildPrayNtfGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildPrayNtfGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildPrayNtfGuildCmd) ProtoMessage() {}

func (x *GuildPrayNtfGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildPrayNtfGuildCmd.ProtoReflect.Descriptor instead.
func (*GuildPrayNtfGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{67}
}

func (x *GuildPrayNtfGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildPrayNtfGuildCmd_Cmd
}

func (x *GuildPrayNtfGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildPrayNtfGuildCmd_Param
}

func (x *GuildPrayNtfGuildCmd) GetPrays() []*GuildMemberPray {
	if x != nil {
		return x.Prays
	}
	return nil
}

type LevelupEffectGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=24" json:"param,omitempty"`
}

// Default values for LevelupEffectGuildCmd fields.
const (
	Default_LevelupEffectGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_LevelupEffectGuildCmd_Param = GuildParam_GUILDPARAM_LEVELUPEFFECT
)

func (x *LevelupEffectGuildCmd) Reset() {
	*x = LevelupEffectGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelupEffectGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelupEffectGuildCmd) ProtoMessage() {}

func (x *LevelupEffectGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelupEffectGuildCmd.ProtoReflect.Descriptor instead.
func (*LevelupEffectGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{68}
}

func (x *LevelupEffectGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LevelupEffectGuildCmd_Cmd
}

func (x *LevelupEffectGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LevelupEffectGuildCmd_Param
}

type QueryPackGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=28" json:"param,omitempty"`
	Items []*ItemData `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for QueryPackGuildCmd fields.
const (
	Default_QueryPackGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_QueryPackGuildCmd_Param = GuildParam_GUILDPARAM_QUERYPACK
)

func (x *QueryPackGuildCmd) Reset() {
	*x = QueryPackGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPackGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPackGuildCmd) ProtoMessage() {}

func (x *QueryPackGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPackGuildCmd.ProtoReflect.Descriptor instead.
func (*QueryPackGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{69}
}

func (x *QueryPackGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryPackGuildCmd_Cmd
}

func (x *QueryPackGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryPackGuildCmd_Param
}

func (x *QueryPackGuildCmd) GetItems() []*ItemData {
	if x != nil {
		return x.Items
	}
	return nil
}

type PackUpdateGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param   *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=32" json:"param,omitempty"`
	Updates []*ItemData `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
	Dels    []string    `protobuf:"bytes,4,rep,name=dels" json:"dels,omitempty"`
}

// Default values for PackUpdateGuildCmd fields.
const (
	Default_PackUpdateGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_PackUpdateGuildCmd_Param = GuildParam_GUILDPARAM_PACKUPDATE
)

func (x *PackUpdateGuildCmd) Reset() {
	*x = PackUpdateGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackUpdateGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackUpdateGuildCmd) ProtoMessage() {}

func (x *PackUpdateGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackUpdateGuildCmd.ProtoReflect.Descriptor instead.
func (*PackUpdateGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{70}
}

func (x *PackUpdateGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PackUpdateGuildCmd_Cmd
}

func (x *PackUpdateGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PackUpdateGuildCmd_Param
}

func (x *PackUpdateGuildCmd) GetUpdates() []*ItemData {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *PackUpdateGuildCmd) GetDels() []string {
	if x != nil {
		return x.Dels
	}
	return nil
}

type ExchangeZoneGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param  *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=29" json:"param,omitempty"`
	Zoneid *uint32     `protobuf:"varint,3,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Set    *bool       `protobuf:"varint,4,opt,name=set,def=0" json:"set,omitempty"`
}

// Default values for ExchangeZoneGuildCmd fields.
const (
	Default_ExchangeZoneGuildCmd_Cmd    = Command_SESSION_USER_GUILD_PROTOCMD
	Default_ExchangeZoneGuildCmd_Param  = GuildParam_GUILDPARAM_EXCHANGEZONE
	Default_ExchangeZoneGuildCmd_Zoneid = uint32(0)
	Default_ExchangeZoneGuildCmd_Set    = bool(false)
)

func (x *ExchangeZoneGuildCmd) Reset() {
	*x = ExchangeZoneGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeZoneGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeZoneGuildCmd) ProtoMessage() {}

func (x *ExchangeZoneGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeZoneGuildCmd.ProtoReflect.Descriptor instead.
func (*ExchangeZoneGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{71}
}

func (x *ExchangeZoneGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExchangeZoneGuildCmd_Cmd
}

func (x *ExchangeZoneGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExchangeZoneGuildCmd_Param
}

func (x *ExchangeZoneGuildCmd) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_ExchangeZoneGuildCmd_Zoneid
}

func (x *ExchangeZoneGuildCmd) GetSet() bool {
	if x != nil && x.Set != nil {
		return *x.Set
	}
	return Default_ExchangeZoneGuildCmd_Set
}

type ExchangeZoneNtfGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param      *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=30" json:"param,omitempty"`
	Nextzoneid *uint32     `protobuf:"varint,3,opt,name=nextzoneid,def=0" json:"nextzoneid,omitempty"`
	Curzoneid  *uint32     `protobuf:"varint,4,opt,name=curzoneid,def=0" json:"curzoneid,omitempty"`
}

// Default values for ExchangeZoneNtfGuildCmd fields.
const (
	Default_ExchangeZoneNtfGuildCmd_Cmd        = Command_SESSION_USER_GUILD_PROTOCMD
	Default_ExchangeZoneNtfGuildCmd_Param      = GuildParam_GUILDPARAM_EXCHANGEZONE_NTF
	Default_ExchangeZoneNtfGuildCmd_Nextzoneid = uint32(0)
	Default_ExchangeZoneNtfGuildCmd_Curzoneid  = uint32(0)
)

func (x *ExchangeZoneNtfGuildCmd) Reset() {
	*x = ExchangeZoneNtfGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeZoneNtfGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeZoneNtfGuildCmd) ProtoMessage() {}

func (x *ExchangeZoneNtfGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeZoneNtfGuildCmd.ProtoReflect.Descriptor instead.
func (*ExchangeZoneNtfGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{72}
}

func (x *ExchangeZoneNtfGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExchangeZoneNtfGuildCmd_Cmd
}

func (x *ExchangeZoneNtfGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExchangeZoneNtfGuildCmd_Param
}

func (x *ExchangeZoneNtfGuildCmd) GetNextzoneid() uint32 {
	if x != nil && x.Nextzoneid != nil {
		return *x.Nextzoneid
	}
	return Default_ExchangeZoneNtfGuildCmd_Nextzoneid
}

func (x *ExchangeZoneNtfGuildCmd) GetCurzoneid() uint32 {
	if x != nil && x.Curzoneid != nil {
		return *x.Curzoneid
	}
	return Default_ExchangeZoneNtfGuildCmd_Curzoneid
}

type ExchangeZoneAnswerGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=31" json:"param,omitempty"`
	Agree *bool       `protobuf:"varint,3,opt,name=agree,def=0" json:"agree,omitempty"`
}

// Default values for ExchangeZoneAnswerGuildCmd fields.
const (
	Default_ExchangeZoneAnswerGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_ExchangeZoneAnswerGuildCmd_Param = GuildParam_GUILDPARAM_EXCHANGEZONE_ANSWER
	Default_ExchangeZoneAnswerGuildCmd_Agree = bool(false)
)

func (x *ExchangeZoneAnswerGuildCmd) Reset() {
	*x = ExchangeZoneAnswerGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeZoneAnswerGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeZoneAnswerGuildCmd) ProtoMessage() {}

func (x *ExchangeZoneAnswerGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeZoneAnswerGuildCmd.ProtoReflect.Descriptor instead.
func (*ExchangeZoneAnswerGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{73}
}

func (x *ExchangeZoneAnswerGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExchangeZoneAnswerGuildCmd_Cmd
}

func (x *ExchangeZoneAnswerGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExchangeZoneAnswerGuildCmd_Param
}

func (x *ExchangeZoneAnswerGuildCmd) GetAgree() bool {
	if x != nil && x.Agree != nil {
		return *x.Agree
	}
	return Default_ExchangeZoneAnswerGuildCmd_Agree
}

type GuildEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid    *uint32  `protobuf:"varint,1,opt,name=guid,def=0" json:"guid,omitempty"`
	Eventid *uint32  `protobuf:"varint,2,opt,name=eventid,def=0" json:"eventid,omitempty"`
	Time    *uint32  `protobuf:"varint,3,opt,name=time,def=0" json:"time,omitempty"`
	Param   []string `protobuf:"bytes,4,rep,name=param" json:"param,omitempty"`
}

// Default values for GuildEvent fields.
const (
	Default_GuildEvent_Guid    = uint32(0)
	Default_GuildEvent_Eventid = uint32(0)
	Default_GuildEvent_Time    = uint32(0)
)

func (x *GuildEvent) Reset() {
	*x = GuildEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildEvent) ProtoMessage() {}

func (x *GuildEvent) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildEvent.ProtoReflect.Descriptor instead.
func (*GuildEvent) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{74}
}

func (x *GuildEvent) GetGuid() uint32 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_GuildEvent_Guid
}

func (x *GuildEvent) GetEventid() uint32 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return Default_GuildEvent_Eventid
}

func (x *GuildEvent) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_GuildEvent_Time
}

func (x *GuildEvent) GetParam() []string {
	if x != nil {
		return x.Param
	}
	return nil
}

type QueryEventListGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param  *GuildParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=33" json:"param,omitempty"`
	Events []*GuildEvent `protobuf:"bytes,3,rep,name=events" json:"events,omitempty"`
}

// Default values for QueryEventListGuildCmd fields.
const (
	Default_QueryEventListGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_QueryEventListGuildCmd_Param = GuildParam_GUILDPARAM_QUERY_EVENT_LIST
)

func (x *QueryEventListGuildCmd) Reset() {
	*x = QueryEventListGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEventListGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEventListGuildCmd) ProtoMessage() {}

func (x *QueryEventListGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEventListGuildCmd.ProtoReflect.Descriptor instead.
func (*QueryEventListGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{75}
}

func (x *QueryEventListGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryEventListGuildCmd_Cmd
}

func (x *QueryEventListGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryEventListGuildCmd_Param
}

func (x *QueryEventListGuildCmd) GetEvents() []*GuildEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type NewEventGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=34" json:"param,omitempty"`
	Del   *bool       `protobuf:"varint,3,opt,name=del,def=0" json:"del,omitempty"`
	Event *GuildEvent `protobuf:"bytes,4,opt,name=event" json:"event,omitempty"`
}

// Default values for NewEventGuildCmd fields.
const (
	Default_NewEventGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_NewEventGuildCmd_Param = GuildParam_GUILDPARAM_NEW_EVENT
	Default_NewEventGuildCmd_Del   = bool(false)
)

func (x *NewEventGuildCmd) Reset() {
	*x = NewEventGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewEventGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewEventGuildCmd) ProtoMessage() {}

func (x *NewEventGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewEventGuildCmd.ProtoReflect.Descriptor instead.
func (*NewEventGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{76}
}

func (x *NewEventGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NewEventGuildCmd_Cmd
}

func (x *NewEventGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NewEventGuildCmd_Param
}

func (x *NewEventGuildCmd) GetDel() bool {
	if x != nil && x.Del != nil {
		return *x.Del
	}
	return Default_NewEventGuildCmd_Del
}

func (x *NewEventGuildCmd) GetEvent() *GuildEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type FrameStatusGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=37" json:"param,omitempty"`
	Open  *bool       `protobuf:"varint,3,opt,name=open,def=0" json:"open,omitempty"`
}

// Default values for FrameStatusGuildCmd fields.
const (
	Default_FrameStatusGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_FrameStatusGuildCmd_Param = GuildParam_GUILDPARAM_FRAME_STATUS
	Default_FrameStatusGuildCmd_Open  = bool(false)
)

func (x *FrameStatusGuildCmd) Reset() {
	*x = FrameStatusGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameStatusGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameStatusGuildCmd) ProtoMessage() {}

func (x *FrameStatusGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameStatusGuildCmd.ProtoReflect.Descriptor instead.
func (*FrameStatusGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{77}
}

func (x *FrameStatusGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FrameStatusGuildCmd_Cmd
}

func (x *FrameStatusGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FrameStatusGuildCmd_Param
}

func (x *FrameStatusGuildCmd) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return Default_FrameStatusGuildCmd_Open
}

type ModifyAuthGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param  *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=38" json:"param,omitempty"`
	Add    *bool       `protobuf:"varint,3,opt,name=add,def=0" json:"add,omitempty"`
	Modify *EModify    `protobuf:"varint,4,opt,name=modify,enum=Cmd.EModify,def=0" json:"modify,omitempty"`
	Job    *EGuildJob  `protobuf:"varint,5,opt,name=job,enum=Cmd.EGuildJob,def=0" json:"job,omitempty"`
	Auth   *EAuth      `protobuf:"varint,6,opt,name=auth,enum=Cmd.EAuth,def=0" json:"auth,omitempty"`
}

// Default values for ModifyAuthGuildCmd fields.
const (
	Default_ModifyAuthGuildCmd_Cmd    = Command_SESSION_USER_GUILD_PROTOCMD
	Default_ModifyAuthGuildCmd_Param  = GuildParam_GUILDPARAM_MODIFY_AUTH
	Default_ModifyAuthGuildCmd_Add    = bool(false)
	Default_ModifyAuthGuildCmd_Modify = EModify_EMODIFY_MIN
	Default_ModifyAuthGuildCmd_Job    = EGuildJob_EGUILDJOB_MIN
	Default_ModifyAuthGuildCmd_Auth   = EAuth_EAUTH_MIN
)

func (x *ModifyAuthGuildCmd) Reset() {
	*x = ModifyAuthGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyAuthGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyAuthGuildCmd) ProtoMessage() {}

func (x *ModifyAuthGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyAuthGuildCmd.ProtoReflect.Descriptor instead.
func (*ModifyAuthGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{78}
}

func (x *ModifyAuthGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ModifyAuthGuildCmd_Cmd
}

func (x *ModifyAuthGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ModifyAuthGuildCmd_Param
}

func (x *ModifyAuthGuildCmd) GetAdd() bool {
	if x != nil && x.Add != nil {
		return *x.Add
	}
	return Default_ModifyAuthGuildCmd_Add
}

func (x *ModifyAuthGuildCmd) GetModify() EModify {
	if x != nil && x.Modify != nil {
		return *x.Modify
	}
	return Default_ModifyAuthGuildCmd_Modify
}

func (x *ModifyAuthGuildCmd) GetJob() EGuildJob {
	if x != nil && x.Job != nil {
		return *x.Job
	}
	return Default_ModifyAuthGuildCmd_Job
}

func (x *ModifyAuthGuildCmd) GetAuth() EAuth {
	if x != nil && x.Auth != nil {
		return *x.Auth
	}
	return Default_ModifyAuthGuildCmd_Auth
}

type JobUpdateGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=39" json:"param,omitempty"`
	Job   *GuildJob   `protobuf:"bytes,3,opt,name=job" json:"job,omitempty"`
}

// Default values for JobUpdateGuildCmd fields.
const (
	Default_JobUpdateGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_JobUpdateGuildCmd_Param = GuildParam_GUILDPARAM_JOB_UPDATE
)

func (x *JobUpdateGuildCmd) Reset() {
	*x = JobUpdateGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobUpdateGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobUpdateGuildCmd) ProtoMessage() {}

func (x *JobUpdateGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobUpdateGuildCmd.ProtoReflect.Descriptor instead.
func (*JobUpdateGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{79}
}

func (x *JobUpdateGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_JobUpdateGuildCmd_Cmd
}

func (x *JobUpdateGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_JobUpdateGuildCmd_Param
}

func (x *JobUpdateGuildCmd) GetJob() *GuildJob {
	if x != nil {
		return x.Job
	}
	return nil
}

type RenameQueryGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=40" json:"param,omitempty"`
	Name  *string         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Code  *ERenameErrCode `protobuf:"varint,4,opt,name=code,enum=Cmd.ERenameErrCode,def=0" json:"code,omitempty"`
}

// Default values for RenameQueryGuildCmd fields.
const (
	Default_RenameQueryGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_RenameQueryGuildCmd_Param = GuildParam_GUILDPARAM_RENAME_QUERY
	Default_RenameQueryGuildCmd_Code  = ERenameErrCode_ERENAME_SUCCESS
)

func (x *RenameQueryGuildCmd) Reset() {
	*x = RenameQueryGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameQueryGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameQueryGuildCmd) ProtoMessage() {}

func (x *RenameQueryGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameQueryGuildCmd.ProtoReflect.Descriptor instead.
func (*RenameQueryGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{80}
}

func (x *RenameQueryGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RenameQueryGuildCmd_Cmd
}

func (x *RenameQueryGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RenameQueryGuildCmd_Param
}

func (x *RenameQueryGuildCmd) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RenameQueryGuildCmd) GetCode() ERenameErrCode {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return Default_RenameQueryGuildCmd_Code
}

type GuildCityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint64 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Flag        *uint32 `protobuf:"varint,2,opt,name=flag,def=0" json:"flag,omitempty"`
	Lv          *uint32 `protobuf:"varint,3,opt,name=lv,def=0" json:"lv,omitempty"`
	Membercount *uint32 `protobuf:"varint,4,opt,name=membercount,def=0" json:"membercount,omitempty"`
	Name        *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Portrait    *string `protobuf:"bytes,6,opt,name=portrait" json:"portrait,omitempty"`
	Oldguild    *uint64 `protobuf:"varint,7,opt,name=oldguild,def=0" json:"oldguild,omitempty"`
	Times       *uint32 `protobuf:"varint,8,opt,name=times,def=0" json:"times,omitempty"`
	Leadername  *string `protobuf:"bytes,9,opt,name=leadername" json:"leadername,omitempty"`
}

// Default values for GuildCityInfo fields.
const (
	Default_GuildCityInfo_Id          = uint64(0)
	Default_GuildCityInfo_Flag        = uint32(0)
	Default_GuildCityInfo_Lv          = uint32(0)
	Default_GuildCityInfo_Membercount = uint32(0)
	Default_GuildCityInfo_Oldguild    = uint64(0)
	Default_GuildCityInfo_Times       = uint32(0)
)

func (x *GuildCityInfo) Reset() {
	*x = GuildCityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildCityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildCityInfo) ProtoMessage() {}

func (x *GuildCityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildCityInfo.ProtoReflect.Descriptor instead.
func (*GuildCityInfo) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{81}
}

func (x *GuildCityInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_GuildCityInfo_Id
}

func (x *GuildCityInfo) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return Default_GuildCityInfo_Flag
}

func (x *GuildCityInfo) GetLv() uint32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return Default_GuildCityInfo_Lv
}

func (x *GuildCityInfo) GetMembercount() uint32 {
	if x != nil && x.Membercount != nil {
		return *x.Membercount
	}
	return Default_GuildCityInfo_Membercount
}

func (x *GuildCityInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GuildCityInfo) GetPortrait() string {
	if x != nil && x.Portrait != nil {
		return *x.Portrait
	}
	return ""
}

func (x *GuildCityInfo) GetOldguild() uint64 {
	if x != nil && x.Oldguild != nil {
		return *x.Oldguild
	}
	return Default_GuildCityInfo_Oldguild
}

func (x *GuildCityInfo) GetTimes() uint32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return Default_GuildCityInfo_Times
}

func (x *GuildCityInfo) GetLeadername() string {
	if x != nil && x.Leadername != nil {
		return *x.Leadername
	}
	return ""
}

type QueryGuildCityInfoGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=41" json:"param,omitempty"`
	Infos []*GuildCityInfo `protobuf:"bytes,3,rep,name=infos" json:"infos,omitempty"`
}

// Default values for QueryGuildCityInfoGuildCmd fields.
const (
	Default_QueryGuildCityInfoGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_QueryGuildCityInfoGuildCmd_Param = GuildParam_GUILDPARAM_QUERY_CITYINFO
)

func (x *QueryGuildCityInfoGuildCmd) Reset() {
	*x = QueryGuildCityInfoGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGuildCityInfoGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGuildCityInfoGuildCmd) ProtoMessage() {}

func (x *QueryGuildCityInfoGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGuildCityInfoGuildCmd.ProtoReflect.Descriptor instead.
func (*QueryGuildCityInfoGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{82}
}

func (x *QueryGuildCityInfoGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryGuildCityInfoGuildCmd_Cmd
}

func (x *QueryGuildCityInfoGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryGuildCityInfoGuildCmd_Param
}

func (x *QueryGuildCityInfoGuildCmd) GetInfos() []*GuildCityInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CityActionGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param  *GuildParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=42" json:"param,omitempty"`
	Action *ECityAction `protobuf:"varint,3,opt,name=action,enum=Cmd.ECityAction,def=0" json:"action,omitempty"`
}

// Default values for CityActionGuildCmd fields.
const (
	Default_CityActionGuildCmd_Cmd    = Command_SESSION_USER_GUILD_PROTOCMD
	Default_CityActionGuildCmd_Param  = GuildParam_GUILDPARAM_CITY_ACTION
	Default_CityActionGuildCmd_Action = ECityAction_ECITYACTION_MIN
)

func (x *CityActionGuildCmd) Reset() {
	*x = CityActionGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityActionGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityActionGuildCmd) ProtoMessage() {}

func (x *CityActionGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityActionGuildCmd.ProtoReflect.Descriptor instead.
func (*CityActionGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{83}
}

func (x *CityActionGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CityActionGuildCmd_Cmd
}

func (x *CityActionGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CityActionGuildCmd_Param
}

func (x *CityActionGuildCmd) GetAction() ECityAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_CityActionGuildCmd_Action
}

type IconInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  *uint32     `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	State  *EIconState `protobuf:"varint,2,opt,name=state,enum=Cmd.EIconState" json:"state,omitempty"`
	Time   *uint32     `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	Isread *bool       `protobuf:"varint,4,opt,name=isread,def=1" json:"isread,omitempty"`
	Type   *string     `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
}

// Default values for IconInfo fields.
const (
	Default_IconInfo_Isread = bool(true)
)

func (x *IconInfo) Reset() {
	*x = IconInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IconInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IconInfo) ProtoMessage() {}

func (x *IconInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IconInfo.ProtoReflect.Descriptor instead.
func (*IconInfo) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{84}
}

func (x *IconInfo) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *IconInfo) GetState() EIconState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return EIconState_EICON_INIT
}

func (x *IconInfo) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *IconInfo) GetIsread() bool {
	if x != nil && x.Isread != nil {
		return *x.Isread
	}
	return Default_IconInfo_Isread
}

func (x *IconInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type GuildIconSyncGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=43" json:"param,omitempty"`
	Infos []*IconInfo `protobuf:"bytes,3,rep,name=infos" json:"infos,omitempty"`
	Dels  []uint32    `protobuf:"varint,4,rep,name=dels" json:"dels,omitempty"`
}

// Default values for GuildIconSyncGuildCmd fields.
const (
	Default_GuildIconSyncGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_GuildIconSyncGuildCmd_Param = GuildParam_GUILDPARAM_GUILD_ICON_SYNC
)

func (x *GuildIconSyncGuildCmd) Reset() {
	*x = GuildIconSyncGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildIconSyncGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildIconSyncGuildCmd) ProtoMessage() {}

func (x *GuildIconSyncGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildIconSyncGuildCmd.ProtoReflect.Descriptor instead.
func (*GuildIconSyncGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{85}
}

func (x *GuildIconSyncGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildIconSyncGuildCmd_Cmd
}

func (x *GuildIconSyncGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildIconSyncGuildCmd_Param
}

func (x *GuildIconSyncGuildCmd) GetInfos() []*IconInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GuildIconSyncGuildCmd) GetDels() []uint32 {
	if x != nil {
		return x.Dels
	}
	return nil
}

type GuildIconAddGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param      *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=44" json:"param,omitempty"`
	Index      *uint32     `protobuf:"varint,3,opt,name=index,def=0" json:"index,omitempty"`
	State      *EIconState `protobuf:"varint,4,opt,name=state,enum=Cmd.EIconState,def=0" json:"state,omitempty"`
	Createtime *uint32     `protobuf:"varint,5,opt,name=createtime,def=0" json:"createtime,omitempty"`
	Isdelete   *bool       `protobuf:"varint,6,opt,name=isdelete,def=0" json:"isdelete,omitempty"`
	Type       *string     `protobuf:"bytes,7,opt,name=type" json:"type,omitempty"`
}

// Default values for GuildIconAddGuildCmd fields.
const (
	Default_GuildIconAddGuildCmd_Cmd        = Command_SESSION_USER_GUILD_PROTOCMD
	Default_GuildIconAddGuildCmd_Param      = GuildParam_GUILDPARAM_GUILD_ICON_ADD
	Default_GuildIconAddGuildCmd_Index      = uint32(0)
	Default_GuildIconAddGuildCmd_State      = EIconState_EICON_INIT
	Default_GuildIconAddGuildCmd_Createtime = uint32(0)
	Default_GuildIconAddGuildCmd_Isdelete   = bool(false)
)

func (x *GuildIconAddGuildCmd) Reset() {
	*x = GuildIconAddGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildIconAddGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildIconAddGuildCmd) ProtoMessage() {}

func (x *GuildIconAddGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildIconAddGuildCmd.ProtoReflect.Descriptor instead.
func (*GuildIconAddGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{86}
}

func (x *GuildIconAddGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildIconAddGuildCmd_Cmd
}

func (x *GuildIconAddGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildIconAddGuildCmd_Param
}

func (x *GuildIconAddGuildCmd) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_GuildIconAddGuildCmd_Index
}

func (x *GuildIconAddGuildCmd) GetState() EIconState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_GuildIconAddGuildCmd_State
}

func (x *GuildIconAddGuildCmd) GetCreatetime() uint32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return Default_GuildIconAddGuildCmd_Createtime
}

func (x *GuildIconAddGuildCmd) GetIsdelete() bool {
	if x != nil && x.Isdelete != nil {
		return *x.Isdelete
	}
	return Default_GuildIconAddGuildCmd_Isdelete
}

func (x *GuildIconAddGuildCmd) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type GuildIconUploadGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param     *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=45" json:"param,omitempty"`
	Index     *uint32     `protobuf:"varint,3,opt,name=index,def=0" json:"index,omitempty"`
	Policy    *string     `protobuf:"bytes,4,opt,name=policy" json:"policy,omitempty"`
	Signature *string     `protobuf:"bytes,5,opt,name=signature" json:"signature,omitempty"`
	Type      *string     `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
}

// Default values for GuildIconUploadGuildCmd fields.
const (
	Default_GuildIconUploadGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_GuildIconUploadGuildCmd_Param = GuildParam_GUILDPARAM_GUILD_ICON_UPLOAD
	Default_GuildIconUploadGuildCmd_Index = uint32(0)
)

func (x *GuildIconUploadGuildCmd) Reset() {
	*x = GuildIconUploadGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildIconUploadGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildIconUploadGuildCmd) ProtoMessage() {}

func (x *GuildIconUploadGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildIconUploadGuildCmd.ProtoReflect.Descriptor instead.
func (*GuildIconUploadGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{87}
}

func (x *GuildIconUploadGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildIconUploadGuildCmd_Cmd
}

func (x *GuildIconUploadGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildIconUploadGuildCmd_Param
}

func (x *GuildIconUploadGuildCmd) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_GuildIconUploadGuildCmd_Index
}

func (x *GuildIconUploadGuildCmd) GetPolicy() string {
	if x != nil && x.Policy != nil {
		return *x.Policy
	}
	return ""
}

func (x *GuildIconUploadGuildCmd) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *GuildIconUploadGuildCmd) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type OpenFunctionGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=47" json:"param,omitempty"`
	Func  *EGuildFunction `protobuf:"varint,3,opt,name=func,enum=Cmd.EGuildFunction,def=0" json:"func,omitempty"`
}

// Default values for OpenFunctionGuildCmd fields.
const (
	Default_OpenFunctionGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_OpenFunctionGuildCmd_Param = GuildParam_GUILDPARAM_OPEN_FUNCTION
	Default_OpenFunctionGuildCmd_Func  = EGuildFunction_EGUILDFUNCTION_MIN
)

func (x *OpenFunctionGuildCmd) Reset() {
	*x = OpenFunctionGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenFunctionGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenFunctionGuildCmd) ProtoMessage() {}

func (x *OpenFunctionGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenFunctionGuildCmd.ProtoReflect.Descriptor instead.
func (*OpenFunctionGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{88}
}

func (x *OpenFunctionGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_OpenFunctionGuildCmd_Cmd
}

func (x *OpenFunctionGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_OpenFunctionGuildCmd_Param
}

func (x *OpenFunctionGuildCmd) GetFunc() EGuildFunction {
	if x != nil && x.Func != nil {
		return *x.Func
	}
	return Default_OpenFunctionGuildCmd_Func
}

type BuildGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param    *GuildParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=48" json:"param,omitempty"`
	Building *EGuildBuilding `protobuf:"varint,3,opt,name=building,enum=Cmd.EGuildBuilding,def=0" json:"building,omitempty"`
}

// Default values for BuildGuildCmd fields.
const (
	Default_BuildGuildCmd_Cmd      = Command_SESSION_USER_GUILD_PROTOCMD
	Default_BuildGuildCmd_Param    = GuildParam_GUILDPARAM_BUILD
	Default_BuildGuildCmd_Building = EGuildBuilding_EGUILDBUILDING_MIN
)

func (x *BuildGuildCmd) Reset() {
	*x = BuildGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildGuildCmd) ProtoMessage() {}

func (x *BuildGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildGuildCmd.ProtoReflect.Descriptor instead.
func (*BuildGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{89}
}

func (x *BuildGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuildGuildCmd_Cmd
}

func (x *BuildGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuildGuildCmd_Param
}

func (x *BuildGuildCmd) GetBuilding() EGuildBuilding {
	if x != nil && x.Building != nil {
		return *x.Building
	}
	return Default_BuildGuildCmd_Building
}

type SubmitMaterialGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param      *GuildParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=49" json:"param,omitempty"`
	Building   *EGuildBuilding `protobuf:"varint,3,opt,name=building,enum=Cmd.EGuildBuilding,def=0" json:"building,omitempty"`
	Materialid *uint32         `protobuf:"varint,4,opt,name=materialid,def=0" json:"materialid,omitempty"`
}

// Default values for SubmitMaterialGuildCmd fields.
const (
	Default_SubmitMaterialGuildCmd_Cmd        = Command_SESSION_USER_GUILD_PROTOCMD
	Default_SubmitMaterialGuildCmd_Param      = GuildParam_GUILDPARAM_SUBMIT_MATERIAL
	Default_SubmitMaterialGuildCmd_Building   = EGuildBuilding_EGUILDBUILDING_MIN
	Default_SubmitMaterialGuildCmd_Materialid = uint32(0)
)

func (x *SubmitMaterialGuildCmd) Reset() {
	*x = SubmitMaterialGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitMaterialGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitMaterialGuildCmd) ProtoMessage() {}

func (x *SubmitMaterialGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitMaterialGuildCmd.ProtoReflect.Descriptor instead.
func (*SubmitMaterialGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{90}
}

func (x *SubmitMaterialGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SubmitMaterialGuildCmd_Cmd
}

func (x *SubmitMaterialGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SubmitMaterialGuildCmd_Param
}

func (x *SubmitMaterialGuildCmd) GetBuilding() EGuildBuilding {
	if x != nil && x.Building != nil {
		return *x.Building
	}
	return Default_SubmitMaterialGuildCmd_Building
}

func (x *SubmitMaterialGuildCmd) GetMaterialid() uint32 {
	if x != nil && x.Materialid != nil {
		return *x.Materialid
	}
	return Default_SubmitMaterialGuildCmd_Materialid
}

type BuildingNtfGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param     *GuildParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=50" json:"param,omitempty"`
	Buildings []*GuildBuilding `protobuf:"bytes,3,rep,name=buildings" json:"buildings,omitempty"`
}

// Default values for BuildingNtfGuildCmd fields.
const (
	Default_BuildingNtfGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_BuildingNtfGuildCmd_Param = GuildParam_GUILDPARAM_BUILDING_NTF
)

func (x *BuildingNtfGuildCmd) Reset() {
	*x = BuildingNtfGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingNtfGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingNtfGuildCmd) ProtoMessage() {}

func (x *BuildingNtfGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingNtfGuildCmd.ProtoReflect.Descriptor instead.
func (*BuildingNtfGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{91}
}

func (x *BuildingNtfGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuildingNtfGuildCmd_Cmd
}

func (x *BuildingNtfGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuildingNtfGuildCmd_Param
}

func (x *BuildingNtfGuildCmd) GetBuildings() []*GuildBuilding {
	if x != nil {
		return x.Buildings
	}
	return nil
}

type BuildingSubmitCountGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=51" json:"param,omitempty"`
	Type  *EGuildBuilding `protobuf:"varint,3,opt,name=type,enum=Cmd.EGuildBuilding,def=0" json:"type,omitempty"`
	Count *uint32         `protobuf:"varint,4,opt,name=count,def=0" json:"count,omitempty"`
}

// Default values for BuildingSubmitCountGuildCmd fields.
const (
	Default_BuildingSubmitCountGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_BuildingSubmitCountGuildCmd_Param = GuildParam_GUILDPARAM_BUILDING_SUBMIT_COUNT
	Default_BuildingSubmitCountGuildCmd_Type  = EGuildBuilding_EGUILDBUILDING_MIN
	Default_BuildingSubmitCountGuildCmd_Count = uint32(0)
)

func (x *BuildingSubmitCountGuildCmd) Reset() {
	*x = BuildingSubmitCountGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingSubmitCountGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingSubmitCountGuildCmd) ProtoMessage() {}

func (x *BuildingSubmitCountGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingSubmitCountGuildCmd.ProtoReflect.Descriptor instead.
func (*BuildingSubmitCountGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{92}
}

func (x *BuildingSubmitCountGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuildingSubmitCountGuildCmd_Cmd
}

func (x *BuildingSubmitCountGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuildingSubmitCountGuildCmd_Param
}

func (x *BuildingSubmitCountGuildCmd) GetType() EGuildBuilding {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_BuildingSubmitCountGuildCmd_Type
}

func (x *BuildingSubmitCountGuildCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_BuildingSubmitCountGuildCmd_Count
}

type ChallengeUpdateNtfGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param       *GuildParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=52" json:"param,omitempty"`
	Updates     []*GuildChallenge `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
	Dels        []*GuildChallenge `protobuf:"bytes,4,rep,name=dels" json:"dels,omitempty"`
	Refreshtime *uint32           `protobuf:"varint,5,opt,name=refreshtime" json:"refreshtime,omitempty"`
}

// Default values for ChallengeUpdateNtfGuildCmd fields.
const (
	Default_ChallengeUpdateNtfGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_ChallengeUpdateNtfGuildCmd_Param = GuildParam_GUILDPARAM_CHALLENGE_UPDATE
)

func (x *ChallengeUpdateNtfGuildCmd) Reset() {
	*x = ChallengeUpdateNtfGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeUpdateNtfGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeUpdateNtfGuildCmd) ProtoMessage() {}

func (x *ChallengeUpdateNtfGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeUpdateNtfGuildCmd.ProtoReflect.Descriptor instead.
func (*ChallengeUpdateNtfGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{93}
}

func (x *ChallengeUpdateNtfGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChallengeUpdateNtfGuildCmd_Cmd
}

func (x *ChallengeUpdateNtfGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChallengeUpdateNtfGuildCmd_Param
}

func (x *ChallengeUpdateNtfGuildCmd) GetUpdates() []*GuildChallenge {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *ChallengeUpdateNtfGuildCmd) GetDels() []*GuildChallenge {
	if x != nil {
		return x.Dels
	}
	return nil
}

func (x *ChallengeUpdateNtfGuildCmd) GetRefreshtime() uint32 {
	if x != nil && x.Refreshtime != nil {
		return *x.Refreshtime
	}
	return 0
}

type WelfareNtfGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param   *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=53" json:"param,omitempty"`
	Welfare *bool       `protobuf:"varint,3,opt,name=welfare,def=0" json:"welfare,omitempty"`
}

// Default values for WelfareNtfGuildCmd fields.
const (
	Default_WelfareNtfGuildCmd_Cmd     = Command_SESSION_USER_GUILD_PROTOCMD
	Default_WelfareNtfGuildCmd_Param   = GuildParam_GUILDPARAM_WELFARE_NTF
	Default_WelfareNtfGuildCmd_Welfare = bool(false)
)

func (x *WelfareNtfGuildCmd) Reset() {
	*x = WelfareNtfGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WelfareNtfGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WelfareNtfGuildCmd) ProtoMessage() {}

func (x *WelfareNtfGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WelfareNtfGuildCmd.ProtoReflect.Descriptor instead.
func (*WelfareNtfGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{94}
}

func (x *WelfareNtfGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_WelfareNtfGuildCmd_Cmd
}

func (x *WelfareNtfGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_WelfareNtfGuildCmd_Param
}

func (x *WelfareNtfGuildCmd) GetWelfare() bool {
	if x != nil && x.Welfare != nil {
		return *x.Welfare
	}
	return Default_WelfareNtfGuildCmd_Welfare
}

type GetWelfareGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=54" json:"param,omitempty"`
}

// Default values for GetWelfareGuildCmd fields.
const (
	Default_GetWelfareGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_GetWelfareGuildCmd_Param = GuildParam_GUILDPARAM_GET_WELFARE
)

func (x *GetWelfareGuildCmd) Reset() {
	*x = GetWelfareGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWelfareGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWelfareGuildCmd) ProtoMessage() {}

func (x *GetWelfareGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWelfareGuildCmd.ProtoReflect.Descriptor instead.
func (*GetWelfareGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{95}
}

func (x *GetWelfareGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GetWelfareGuildCmd_Cmd
}

func (x *GetWelfareGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GetWelfareGuildCmd_Param
}

type BuildingLvupEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *EGuildBuilding `protobuf:"varint,1,opt,name=type,enum=Cmd.EGuildBuilding,def=0" json:"type,omitempty"`
	Level *uint32         `protobuf:"varint,2,opt,name=level,def=0" json:"level,omitempty"`
}

// Default values for BuildingLvupEffect fields.
const (
	Default_BuildingLvupEffect_Type  = EGuildBuilding_EGUILDBUILDING_MIN
	Default_BuildingLvupEffect_Level = uint32(0)
)

func (x *BuildingLvupEffect) Reset() {
	*x = BuildingLvupEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingLvupEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingLvupEffect) ProtoMessage() {}

func (x *BuildingLvupEffect) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingLvupEffect.ProtoReflect.Descriptor instead.
func (*BuildingLvupEffect) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{96}
}

func (x *BuildingLvupEffect) GetType() EGuildBuilding {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_BuildingLvupEffect_Type
}

func (x *BuildingLvupEffect) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return Default_BuildingLvupEffect_Level
}

type BuildingLvupEffGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param   *GuildParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=55" json:"param,omitempty"`
	Effects []*BuildingLvupEffect `protobuf:"bytes,3,rep,name=effects" json:"effects,omitempty"`
}

// Default values for BuildingLvupEffGuildCmd fields.
const (
	Default_BuildingLvupEffGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_BuildingLvupEffGuildCmd_Param = GuildParam_GUILDPARAM_BUILDING_LVUP_EFF
)

func (x *BuildingLvupEffGuildCmd) Reset() {
	*x = BuildingLvupEffGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingLvupEffGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingLvupEffGuildCmd) ProtoMessage() {}

func (x *BuildingLvupEffGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingLvupEffGuildCmd.ProtoReflect.Descriptor instead.
func (*BuildingLvupEffGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{97}
}

func (x *BuildingLvupEffGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuildingLvupEffGuildCmd_Cmd
}

func (x *BuildingLvupEffGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuildingLvupEffGuildCmd_Param
}

func (x *BuildingLvupEffGuildCmd) GetEffects() []*BuildingLvupEffect {
	if x != nil {
		return x.Effects
	}
	return nil
}

type ArtifactUpdateNtfGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param       *GuildParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=56" json:"param,omitempty"`
	Itemupdates []*GuildArtifactItem `protobuf:"bytes,3,rep,name=itemupdates" json:"itemupdates,omitempty"`
	Itemdels    []string             `protobuf:"bytes,4,rep,name=itemdels" json:"itemdels,omitempty"`
	Dataupdates []*GuildArtifactData `protobuf:"bytes,5,rep,name=dataupdates" json:"dataupdates,omitempty"`
}

// Default values for ArtifactUpdateNtfGuildCmd fields.
const (
	Default_ArtifactUpdateNtfGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_ArtifactUpdateNtfGuildCmd_Param = GuildParam_GUILDPARAM_ARTIFACT_UPDATE_NTF
)

func (x *ArtifactUpdateNtfGuildCmd) Reset() {
	*x = ArtifactUpdateNtfGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactUpdateNtfGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactUpdateNtfGuildCmd) ProtoMessage() {}

func (x *ArtifactUpdateNtfGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactUpdateNtfGuildCmd.ProtoReflect.Descriptor instead.
func (*ArtifactUpdateNtfGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{98}
}

func (x *ArtifactUpdateNtfGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ArtifactUpdateNtfGuildCmd_Cmd
}

func (x *ArtifactUpdateNtfGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ArtifactUpdateNtfGuildCmd_Param
}

func (x *ArtifactUpdateNtfGuildCmd) GetItemupdates() []*GuildArtifactItem {
	if x != nil {
		return x.Itemupdates
	}
	return nil
}

func (x *ArtifactUpdateNtfGuildCmd) GetItemdels() []string {
	if x != nil {
		return x.Itemdels
	}
	return nil
}

func (x *ArtifactUpdateNtfGuildCmd) GetDataupdates() []*GuildArtifactData {
	if x != nil {
		return x.Dataupdates
	}
	return nil
}

type ArtifactProduceGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=57" json:"param,omitempty"`
	Id    *uint32     `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
}

// Default values for ArtifactProduceGuildCmd fields.
const (
	Default_ArtifactProduceGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_ArtifactProduceGuildCmd_Param = GuildParam_GUILDPARAM_ARTIFACT_PRODUCE
	Default_ArtifactProduceGuildCmd_Id    = uint32(0)
)

func (x *ArtifactProduceGuildCmd) Reset() {
	*x = ArtifactProduceGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactProduceGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactProduceGuildCmd) ProtoMessage() {}

func (x *ArtifactProduceGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactProduceGuildCmd.ProtoReflect.Descriptor instead.
func (*ArtifactProduceGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{99}
}

func (x *ArtifactProduceGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ArtifactProduceGuildCmd_Cmd
}

func (x *ArtifactProduceGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ArtifactProduceGuildCmd_Param
}

func (x *ArtifactProduceGuildCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_ArtifactProduceGuildCmd_Id
}

type ArtifactOptGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param  *GuildParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=58" json:"param,omitempty"`
	Opt    *EArtifactOptType `protobuf:"varint,3,opt,name=opt,enum=Cmd.EArtifactOptType,def=0" json:"opt,omitempty"`
	Guid   []string          `protobuf:"bytes,4,rep,name=guid" json:"guid,omitempty"`
	Charid *uint64           `protobuf:"varint,5,opt,name=charid,def=0" json:"charid,omitempty"`
}

// Default values for ArtifactOptGuildCmd fields.
const (
	Default_ArtifactOptGuildCmd_Cmd    = Command_SESSION_USER_GUILD_PROTOCMD
	Default_ArtifactOptGuildCmd_Param  = GuildParam_GUILDPARAM_ARTIFACT_OPT
	Default_ArtifactOptGuildCmd_Opt    = EArtifactOptType_EARTIFACTOPTTYPE_MIN
	Default_ArtifactOptGuildCmd_Charid = uint64(0)
)

func (x *ArtifactOptGuildCmd) Reset() {
	*x = ArtifactOptGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactOptGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactOptGuildCmd) ProtoMessage() {}

func (x *ArtifactOptGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactOptGuildCmd.ProtoReflect.Descriptor instead.
func (*ArtifactOptGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{100}
}

func (x *ArtifactOptGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ArtifactOptGuildCmd_Cmd
}

func (x *ArtifactOptGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ArtifactOptGuildCmd_Param
}

func (x *ArtifactOptGuildCmd) GetOpt() EArtifactOptType {
	if x != nil && x.Opt != nil {
		return *x.Opt
	}
	return Default_ArtifactOptGuildCmd_Opt
}

func (x *ArtifactOptGuildCmd) GetGuid() []string {
	if x != nil {
		return x.Guid
	}
	return nil
}

func (x *ArtifactOptGuildCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_ArtifactOptGuildCmd_Charid
}

type QueryGQuestGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param        *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=59" json:"param,omitempty"`
	SubmitQuests []uint32    `protobuf:"varint,3,rep,name=submit_quests,json=submitQuests" json:"submit_quests,omitempty"`
}

// Default values for QueryGQuestGuildCmd fields.
const (
	Default_QueryGQuestGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_QueryGQuestGuildCmd_Param = GuildParam_GUILDPARAM_QUERY_GQUEST
)

func (x *QueryGQuestGuildCmd) Reset() {
	*x = QueryGQuestGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGQuestGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGQuestGuildCmd) ProtoMessage() {}

func (x *QueryGQuestGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGQuestGuildCmd.ProtoReflect.Descriptor instead.
func (*QueryGQuestGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{101}
}

func (x *QueryGQuestGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryGQuestGuildCmd_Cmd
}

func (x *QueryGQuestGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryGQuestGuildCmd_Param
}

func (x *QueryGQuestGuildCmd) GetSubmitQuests() []uint32 {
	if x != nil {
		return x.SubmitQuests
	}
	return nil
}

type TreasureActionGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd                *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param              *GuildParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=60" json:"param,omitempty"`
	Charid             *uint64          `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	GuildTreasureCount *uint32          `protobuf:"varint,4,opt,name=guild_treasure_count,json=guildTreasureCount,def=0" json:"guild_treasure_count,omitempty"`
	BcoinTreasureCount *uint32          `protobuf:"varint,5,opt,name=bcoin_treasure_count,json=bcoinTreasureCount,def=0" json:"bcoin_treasure_count,omitempty"`
	Action             *ETreasureAction `protobuf:"varint,6,opt,name=action,enum=Cmd.ETreasureAction,def=0" json:"action,omitempty"`
	Point              *ETreasurePoint  `protobuf:"varint,7,opt,name=point,enum=Cmd.ETreasurePoint,def=0" json:"point,omitempty"`
	Treasure           *GuildTreasure   `protobuf:"bytes,8,opt,name=treasure" json:"treasure,omitempty"`
}

// Default values for TreasureActionGuildCmd fields.
const (
	Default_TreasureActionGuildCmd_Cmd                = Command_SESSION_USER_GUILD_PROTOCMD
	Default_TreasureActionGuildCmd_Param              = GuildParam_GUILDPARAM_TREASURE_ACTION
	Default_TreasureActionGuildCmd_Charid             = uint64(0)
	Default_TreasureActionGuildCmd_GuildTreasureCount = uint32(0)
	Default_TreasureActionGuildCmd_BcoinTreasureCount = uint32(0)
	Default_TreasureActionGuildCmd_Action             = ETreasureAction_ETREASUREACTION_MIN
	Default_TreasureActionGuildCmd_Point              = ETreasurePoint_ETREASUREPOINT_MIN
)

func (x *TreasureActionGuildCmd) Reset() {
	*x = TreasureActionGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasureActionGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureActionGuildCmd) ProtoMessage() {}

func (x *TreasureActionGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureActionGuildCmd.ProtoReflect.Descriptor instead.
func (*TreasureActionGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{102}
}

func (x *TreasureActionGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TreasureActionGuildCmd_Cmd
}

func (x *TreasureActionGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TreasureActionGuildCmd_Param
}

func (x *TreasureActionGuildCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_TreasureActionGuildCmd_Charid
}

func (x *TreasureActionGuildCmd) GetGuildTreasureCount() uint32 {
	if x != nil && x.GuildTreasureCount != nil {
		return *x.GuildTreasureCount
	}
	return Default_TreasureActionGuildCmd_GuildTreasureCount
}

func (x *TreasureActionGuildCmd) GetBcoinTreasureCount() uint32 {
	if x != nil && x.BcoinTreasureCount != nil {
		return *x.BcoinTreasureCount
	}
	return Default_TreasureActionGuildCmd_BcoinTreasureCount
}

func (x *TreasureActionGuildCmd) GetAction() ETreasureAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_TreasureActionGuildCmd_Action
}

func (x *TreasureActionGuildCmd) GetPoint() ETreasurePoint {
	if x != nil && x.Point != nil {
		return *x.Point
	}
	return Default_TreasureActionGuildCmd_Point
}

func (x *TreasureActionGuildCmd) GetTreasure() *GuildTreasure {
	if x != nil {
		return x.Treasure
	}
	return nil
}

type BuildingSubmitRankItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid           *uint64 `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Submitcounttotal *uint32 `protobuf:"varint,2,opt,name=submitcounttotal,def=0" json:"submitcounttotal,omitempty"`
	Submittime       *uint32 `protobuf:"varint,3,opt,name=submittime,def=0" json:"submittime,omitempty"`
}

// Default values for BuildingSubmitRankItem fields.
const (
	Default_BuildingSubmitRankItem_Charid           = uint64(0)
	Default_BuildingSubmitRankItem_Submitcounttotal = uint32(0)
	Default_BuildingSubmitRankItem_Submittime       = uint32(0)
)

func (x *BuildingSubmitRankItem) Reset() {
	*x = BuildingSubmitRankItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingSubmitRankItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingSubmitRankItem) ProtoMessage() {}

func (x *BuildingSubmitRankItem) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingSubmitRankItem.ProtoReflect.Descriptor instead.
func (*BuildingSubmitRankItem) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{103}
}

func (x *BuildingSubmitRankItem) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_BuildingSubmitRankItem_Charid
}

func (x *BuildingSubmitRankItem) GetSubmitcounttotal() uint32 {
	if x != nil && x.Submitcounttotal != nil {
		return *x.Submitcounttotal
	}
	return Default_BuildingSubmitRankItem_Submitcounttotal
}

func (x *BuildingSubmitRankItem) GetSubmittime() uint32 {
	if x != nil && x.Submittime != nil {
		return *x.Submittime
	}
	return Default_BuildingSubmitRankItem_Submittime
}

type QueryBuildingRankGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command                  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam               `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=61" json:"param,omitempty"`
	Type  *EGuildBuilding           `protobuf:"varint,3,opt,name=type,enum=Cmd.EGuildBuilding,def=0" json:"type,omitempty"`
	Items []*BuildingSubmitRankItem `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

// Default values for QueryBuildingRankGuildCmd fields.
const (
	Default_QueryBuildingRankGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_QueryBuildingRankGuildCmd_Param = GuildParam_GUILDPARAM_QUERY_BUILDING_RANK
	Default_QueryBuildingRankGuildCmd_Type  = EGuildBuilding_EGUILDBUILDING_MIN
)

func (x *QueryBuildingRankGuildCmd) Reset() {
	*x = QueryBuildingRankGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBuildingRankGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBuildingRankGuildCmd) ProtoMessage() {}

func (x *QueryBuildingRankGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBuildingRankGuildCmd.ProtoReflect.Descriptor instead.
func (*QueryBuildingRankGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{104}
}

func (x *QueryBuildingRankGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryBuildingRankGuildCmd_Cmd
}

func (x *QueryBuildingRankGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryBuildingRankGuildCmd_Param
}

func (x *QueryBuildingRankGuildCmd) GetType() EGuildBuilding {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_QueryBuildingRankGuildCmd_Type
}

func (x *QueryBuildingRankGuildCmd) GetItems() []*BuildingSubmitRankItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type QueryTreasureResultGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param     *GuildParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=62" json:"param,omitempty"`
	Eventguid *uint32         `protobuf:"varint,3,opt,name=eventguid,def=0" json:"eventguid,omitempty"`
	Result    *TreasureResult `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
}

// Default values for QueryTreasureResultGuildCmd fields.
const (
	Default_QueryTreasureResultGuildCmd_Cmd       = Command_SESSION_USER_GUILD_PROTOCMD
	Default_QueryTreasureResultGuildCmd_Param     = GuildParam_GUILDPARAM_TREASURE_QUERYRESULT
	Default_QueryTreasureResultGuildCmd_Eventguid = uint32(0)
)

func (x *QueryTreasureResultGuildCmd) Reset() {
	*x = QueryTreasureResultGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTreasureResultGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTreasureResultGuildCmd) ProtoMessage() {}

func (x *QueryTreasureResultGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTreasureResultGuildCmd.ProtoReflect.Descriptor instead.
func (*QueryTreasureResultGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{105}
}

func (x *QueryTreasureResultGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryTreasureResultGuildCmd_Cmd
}

func (x *QueryTreasureResultGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryTreasureResultGuildCmd_Param
}

func (x *QueryTreasureResultGuildCmd) GetEventguid() uint32 {
	if x != nil && x.Eventguid != nil {
		return *x.Eventguid
	}
	return Default_QueryTreasureResultGuildCmd_Eventguid
}

func (x *QueryTreasureResultGuildCmd) GetResult() *TreasureResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type CityShowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cityid      *uint32      `protobuf:"varint,1,opt,name=cityid,def=0" json:"cityid,omitempty"`
	State       *EGCityState `protobuf:"varint,2,opt,name=state,enum=Cmd.EGCityState,def=0" json:"state,omitempty"`
	Guildid     *uint64      `protobuf:"varint,3,opt,name=guildid,def=0" json:"guildid,omitempty"`
	Name        *string      `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Portrait    *string      `protobuf:"bytes,5,opt,name=portrait" json:"portrait,omitempty"`
	Lv          *uint32      `protobuf:"varint,6,opt,name=lv,def=0" json:"lv,omitempty"`
	Membercount *uint32      `protobuf:"varint,7,opt,name=membercount,def=0" json:"membercount,omitempty"`
}

// Default values for CityShowInfo fields.
const (
	Default_CityShowInfo_Cityid      = uint32(0)
	Default_CityShowInfo_State       = EGCityState_EGCITYSTATE_MIN
	Default_CityShowInfo_Guildid     = uint64(0)
	Default_CityShowInfo_Lv          = uint32(0)
	Default_CityShowInfo_Membercount = uint32(0)
)

func (x *CityShowInfo) Reset() {
	*x = CityShowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityShowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityShowInfo) ProtoMessage() {}

func (x *CityShowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityShowInfo.ProtoReflect.Descriptor instead.
func (*CityShowInfo) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{106}
}

func (x *CityShowInfo) GetCityid() uint32 {
	if x != nil && x.Cityid != nil {
		return *x.Cityid
	}
	return Default_CityShowInfo_Cityid
}

func (x *CityShowInfo) GetState() EGCityState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_CityShowInfo_State
}

func (x *CityShowInfo) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return Default_CityShowInfo_Guildid
}

func (x *CityShowInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CityShowInfo) GetPortrait() string {
	if x != nil && x.Portrait != nil {
		return *x.Portrait
	}
	return ""
}

func (x *CityShowInfo) GetLv() uint32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return Default_CityShowInfo_Lv
}

func (x *CityShowInfo) GetMembercount() uint32 {
	if x != nil && x.Membercount != nil {
		return *x.Membercount
	}
	return Default_CityShowInfo_Membercount
}

type QueryGCityShowInfoGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=63" json:"param,omitempty"`
	Infos []*CityShowInfo `protobuf:"bytes,3,rep,name=infos" json:"infos,omitempty"`
}

// Default values for QueryGCityShowInfoGuildCmd fields.
const (
	Default_QueryGCityShowInfoGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_QueryGCityShowInfoGuildCmd_Param = GuildParam_GUILDPARAM_QUERY_CITYSHOW
)

func (x *QueryGCityShowInfoGuildCmd) Reset() {
	*x = QueryGCityShowInfoGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGCityShowInfoGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGCityShowInfoGuildCmd) ProtoMessage() {}

func (x *QueryGCityShowInfoGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGCityShowInfoGuildCmd.ProtoReflect.Descriptor instead.
func (*QueryGCityShowInfoGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{107}
}

func (x *QueryGCityShowInfoGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryGCityShowInfoGuildCmd_Cmd
}

func (x *QueryGCityShowInfoGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryGCityShowInfoGuildCmd_Param
}

func (x *QueryGCityShowInfoGuildCmd) GetInfos() []*CityShowInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GvgOpenFireGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=64" json:"param,omitempty"`
	Fire  *bool       `protobuf:"varint,3,opt,name=fire,def=0" json:"fire,omitempty"`
}

// Default values for GvgOpenFireGuildCmd fields.
const (
	Default_GvgOpenFireGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_GvgOpenFireGuildCmd_Param = GuildParam_GUILDPARAM_OEPN_GVG
	Default_GvgOpenFireGuildCmd_Fire  = bool(false)
)

func (x *GvgOpenFireGuildCmd) Reset() {
	*x = GvgOpenFireGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgOpenFireGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgOpenFireGuildCmd) ProtoMessage() {}

func (x *GvgOpenFireGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgOpenFireGuildCmd.ProtoReflect.Descriptor instead.
func (*GvgOpenFireGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{108}
}

func (x *GvgOpenFireGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GvgOpenFireGuildCmd_Cmd
}

func (x *GvgOpenFireGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GvgOpenFireGuildCmd_Param
}

func (x *GvgOpenFireGuildCmd) GetFire() bool {
	if x != nil && x.Fire != nil {
		return *x.Fire
	}
	return Default_GvgOpenFireGuildCmd_Fire
}

type EnterPunishTimeNtfGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param    *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=66" json:"param,omitempty"`
	Exittime *uint32     `protobuf:"varint,3,opt,name=exittime,def=0" json:"exittime,omitempty"`
}

// Default values for EnterPunishTimeNtfGuildCmd fields.
const (
	Default_EnterPunishTimeNtfGuildCmd_Cmd      = Command_SESSION_USER_GUILD_PROTOCMD
	Default_EnterPunishTimeNtfGuildCmd_Param    = GuildParam_GUILDPARAM_ENTERPUNISHTIME_NTF
	Default_EnterPunishTimeNtfGuildCmd_Exittime = uint32(0)
)

func (x *EnterPunishTimeNtfGuildCmd) Reset() {
	*x = EnterPunishTimeNtfGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterPunishTimeNtfGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterPunishTimeNtfGuildCmd) ProtoMessage() {}

func (x *EnterPunishTimeNtfGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterPunishTimeNtfGuildCmd.ProtoReflect.Descriptor instead.
func (*EnterPunishTimeNtfGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{109}
}

func (x *EnterPunishTimeNtfGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnterPunishTimeNtfGuildCmd_Cmd
}

func (x *EnterPunishTimeNtfGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnterPunishTimeNtfGuildCmd_Param
}

func (x *EnterPunishTimeNtfGuildCmd) GetExittime() uint32 {
	if x != nil && x.Exittime != nil {
		return *x.Exittime
	}
	return Default_EnterPunishTimeNtfGuildCmd_Exittime
}

type OpenRealtimeVoiceGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param  *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=65" json:"param,omitempty"`
	Charid *uint64     `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Open   *bool       `protobuf:"varint,4,opt,name=open,def=0" json:"open,omitempty"`
}

// Default values for OpenRealtimeVoiceGuildCmd fields.
const (
	Default_OpenRealtimeVoiceGuildCmd_Cmd    = Command_SESSION_USER_GUILD_PROTOCMD
	Default_OpenRealtimeVoiceGuildCmd_Param  = GuildParam_GUILDPARAM_OPEN_REALTIME_VOICE
	Default_OpenRealtimeVoiceGuildCmd_Charid = uint64(0)
	Default_OpenRealtimeVoiceGuildCmd_Open   = bool(false)
)

func (x *OpenRealtimeVoiceGuildCmd) Reset() {
	*x = OpenRealtimeVoiceGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenRealtimeVoiceGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenRealtimeVoiceGuildCmd) ProtoMessage() {}

func (x *OpenRealtimeVoiceGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenRealtimeVoiceGuildCmd.ProtoReflect.Descriptor instead.
func (*OpenRealtimeVoiceGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{110}
}

func (x *OpenRealtimeVoiceGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_OpenRealtimeVoiceGuildCmd_Cmd
}

func (x *OpenRealtimeVoiceGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_OpenRealtimeVoiceGuildCmd_Param
}

func (x *OpenRealtimeVoiceGuildCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_OpenRealtimeVoiceGuildCmd_Charid
}

func (x *OpenRealtimeVoiceGuildCmd) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return Default_OpenRealtimeVoiceGuildCmd_Open
}

type SuperGvgGuildData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guildid   *uint32 `protobuf:"varint,1,opt,name=guildid" json:"guildid,omitempty"`
	Grade     *uint32 `protobuf:"varint,2,opt,name=grade" json:"grade,omitempty"`
	Guildname *string `protobuf:"bytes,3,opt,name=guildname" json:"guildname,omitempty"`
	Zoneid    *uint32 `protobuf:"varint,4,opt,name=zoneid" json:"zoneid,omitempty"`
	Portrait  *string `protobuf:"bytes,5,opt,name=portrait" json:"portrait,omitempty"`
}

func (x *SuperGvgGuildData) Reset() {
	*x = SuperGvgGuildData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperGvgGuildData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperGvgGuildData) ProtoMessage() {}

func (x *SuperGvgGuildData) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperGvgGuildData.ProtoReflect.Descriptor instead.
func (*SuperGvgGuildData) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{111}
}

func (x *SuperGvgGuildData) GetGuildid() uint32 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return 0
}

func (x *SuperGvgGuildData) GetGrade() uint32 {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return 0
}

func (x *SuperGvgGuildData) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

func (x *SuperGvgGuildData) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return 0
}

func (x *SuperGvgGuildData) GetPortrait() string {
	if x != nil && x.Portrait != nil {
		return *x.Portrait
	}
	return ""
}

type QuerySuperGvgDataGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=67" json:"param,omitempty"`
	Datas []*SuperGvgGuildData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for QuerySuperGvgDataGuildCmd fields.
const (
	Default_QuerySuperGvgDataGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_QuerySuperGvgDataGuildCmd_Param = GuildParam_GUILDPARAM_QUERY_GVG
)

func (x *QuerySuperGvgDataGuildCmd) Reset() {
	*x = QuerySuperGvgDataGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySuperGvgDataGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySuperGvgDataGuildCmd) ProtoMessage() {}

func (x *QuerySuperGvgDataGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySuperGvgDataGuildCmd.ProtoReflect.Descriptor instead.
func (*QuerySuperGvgDataGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{112}
}

func (x *QuerySuperGvgDataGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuerySuperGvgDataGuildCmd_Cmd
}

func (x *QuerySuperGvgDataGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuerySuperGvgDataGuildCmd_Param
}

func (x *QuerySuperGvgDataGuildCmd) GetDatas() []*SuperGvgGuildData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type QueryGvgGuildInfoGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param      *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=68" json:"param,omitempty"`
	Guildid    *uint64     `protobuf:"varint,3,req,name=guildid" json:"guildid,omitempty"`
	Level      *uint32     `protobuf:"varint,4,opt,name=level,def=0" json:"level,omitempty"`
	Memnum     *uint32     `protobuf:"varint,5,opt,name=memnum,def=0" json:"memnum,omitempty"`
	Guildname  *string     `protobuf:"bytes,6,opt,name=guildname" json:"guildname,omitempty"`
	Leadername *string     `protobuf:"bytes,7,opt,name=leadername" json:"leadername,omitempty"`
}

// Default values for QueryGvgGuildInfoGuildCmd fields.
const (
	Default_QueryGvgGuildInfoGuildCmd_Cmd    = Command_SESSION_USER_GUILD_PROTOCMD
	Default_QueryGvgGuildInfoGuildCmd_Param  = GuildParam_GUILDPARAM_QUERY_GVG_GUILD
	Default_QueryGvgGuildInfoGuildCmd_Level  = uint32(0)
	Default_QueryGvgGuildInfoGuildCmd_Memnum = uint32(0)
)

func (x *QueryGvgGuildInfoGuildCmd) Reset() {
	*x = QueryGvgGuildInfoGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGvgGuildInfoGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGvgGuildInfoGuildCmd) ProtoMessage() {}

func (x *QueryGvgGuildInfoGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGvgGuildInfoGuildCmd.ProtoReflect.Descriptor instead.
func (*QueryGvgGuildInfoGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{113}
}

func (x *QueryGvgGuildInfoGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryGvgGuildInfoGuildCmd_Cmd
}

func (x *QueryGvgGuildInfoGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryGvgGuildInfoGuildCmd_Param
}

func (x *QueryGvgGuildInfoGuildCmd) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return 0
}

func (x *QueryGvgGuildInfoGuildCmd) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return Default_QueryGvgGuildInfoGuildCmd_Level
}

func (x *QueryGvgGuildInfoGuildCmd) GetMemnum() uint32 {
	if x != nil && x.Memnum != nil {
		return *x.Memnum
	}
	return Default_QueryGvgGuildInfoGuildCmd_Memnum
}

func (x *QueryGvgGuildInfoGuildCmd) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

func (x *QueryGvgGuildInfoGuildCmd) GetLeadername() string {
	if x != nil && x.Leadername != nil {
		return *x.Leadername
	}
	return ""
}

type GvgRewardNtfGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=69" json:"param,omitempty"`
	Has   *bool       `protobuf:"varint,3,opt,name=has,def=0" json:"has,omitempty"`
}

// Default values for GvgRewardNtfGuildCmd fields.
const (
	Default_GvgRewardNtfGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_GvgRewardNtfGuildCmd_Param = GuildParam_GUILDPARAM_GVG_REWARD_NTF
	Default_GvgRewardNtfGuildCmd_Has   = bool(false)
)

func (x *GvgRewardNtfGuildCmd) Reset() {
	*x = GvgRewardNtfGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgRewardNtfGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgRewardNtfGuildCmd) ProtoMessage() {}

func (x *GvgRewardNtfGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgRewardNtfGuildCmd.ProtoReflect.Descriptor instead.
func (*GvgRewardNtfGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{114}
}

func (x *GvgRewardNtfGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GvgRewardNtfGuildCmd_Cmd
}

func (x *GvgRewardNtfGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GvgRewardNtfGuildCmd_Param
}

func (x *GvgRewardNtfGuildCmd) GetHas() bool {
	if x != nil && x.Has != nil {
		return *x.Has
	}
	return Default_GvgRewardNtfGuildCmd_Has
}

type GetGvgRewardGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=70" json:"param,omitempty"`
}

// Default values for GetGvgRewardGuildCmd fields.
const (
	Default_GetGvgRewardGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_GetGvgRewardGuildCmd_Param = GuildParam_GUILDPARAM_GVG_REWARD_GET
)

func (x *GetGvgRewardGuildCmd) Reset() {
	*x = GetGvgRewardGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGvgRewardGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGvgRewardGuildCmd) ProtoMessage() {}

func (x *GetGvgRewardGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGvgRewardGuildCmd.ProtoReflect.Descriptor instead.
func (*GetGvgRewardGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{115}
}

func (x *GetGvgRewardGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GetGvgRewardGuildCmd_Cmd
}

func (x *GetGvgRewardGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GetGvgRewardGuildCmd_Param
}

type QueryCheckInfoGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param     *GuildParam `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=71" json:"param,omitempty"`
	Applied   *bool       `protobuf:"varint,3,opt,name=applied,def=1" json:"applied,omitempty"`
	Checked   *bool       `protobuf:"varint,4,opt,name=checked,def=1" json:"checked,omitempty"`
	Needlevel *uint32     `protobuf:"varint,5,opt,name=needlevel,def=1" json:"needlevel,omitempty"`
	Recruit   *string     `protobuf:"bytes,6,opt,name=recruit" json:"recruit,omitempty"`
}

// Default values for QueryCheckInfoGuildCmd fields.
const (
	Default_QueryCheckInfoGuildCmd_Cmd       = Command_SESSION_USER_GUILD_PROTOCMD
	Default_QueryCheckInfoGuildCmd_Param     = GuildParam_GUILDPARAM_QUERY_CHECK_INFO
	Default_QueryCheckInfoGuildCmd_Applied   = bool(true)
	Default_QueryCheckInfoGuildCmd_Checked   = bool(true)
	Default_QueryCheckInfoGuildCmd_Needlevel = uint32(1)
)

func (x *QueryCheckInfoGuildCmd) Reset() {
	*x = QueryCheckInfoGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCheckInfoGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCheckInfoGuildCmd) ProtoMessage() {}

func (x *QueryCheckInfoGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCheckInfoGuildCmd.ProtoReflect.Descriptor instead.
func (*QueryCheckInfoGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{116}
}

func (x *QueryCheckInfoGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryCheckInfoGuildCmd_Cmd
}

func (x *QueryCheckInfoGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryCheckInfoGuildCmd_Param
}

func (x *QueryCheckInfoGuildCmd) GetApplied() bool {
	if x != nil && x.Applied != nil {
		return *x.Applied
	}
	return Default_QueryCheckInfoGuildCmd_Applied
}

func (x *QueryCheckInfoGuildCmd) GetChecked() bool {
	if x != nil && x.Checked != nil {
		return *x.Checked
	}
	return Default_QueryCheckInfoGuildCmd_Checked
}

func (x *QueryCheckInfoGuildCmd) GetNeedlevel() uint32 {
	if x != nil && x.Needlevel != nil {
		return *x.Needlevel
	}
	return Default_QueryCheckInfoGuildCmd_Needlevel
}

func (x *QueryCheckInfoGuildCmd) GetRecruit() string {
	if x != nil && x.Recruit != nil {
		return *x.Recruit
	}
	return ""
}

type GuildScoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guildid      *uint64 `protobuf:"varint,1,opt,name=guildid,def=0" json:"guildid,omitempty"`
	Serverid     *uint32 `protobuf:"varint,2,opt,name=serverid" json:"serverid,omitempty"`
	Score        *uint32 `protobuf:"varint,3,opt,name=score,def=0" json:"score,omitempty"`
	Time         *uint32 `protobuf:"varint,4,opt,name=time,def=0" json:"time,omitempty"`
	Guildname    *string `protobuf:"bytes,5,opt,name=guildname" json:"guildname,omitempty"`
	Chairmanname *string `protobuf:"bytes,6,opt,name=chairmanname" json:"chairmanname,omitempty"`
}

// Default values for GuildScoreInfo fields.
const (
	Default_GuildScoreInfo_Guildid = uint64(0)
	Default_GuildScoreInfo_Score   = uint32(0)
	Default_GuildScoreInfo_Time    = uint32(0)
)

func (x *GuildScoreInfo) Reset() {
	*x = GuildScoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildScoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildScoreInfo) ProtoMessage() {}

func (x *GuildScoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildScoreInfo.ProtoReflect.Descriptor instead.
func (*GuildScoreInfo) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{117}
}

func (x *GuildScoreInfo) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return Default_GuildScoreInfo_Guildid
}

func (x *GuildScoreInfo) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return 0
}

func (x *GuildScoreInfo) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return Default_GuildScoreInfo_Score
}

func (x *GuildScoreInfo) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_GuildScoreInfo_Time
}

func (x *GuildScoreInfo) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

func (x *GuildScoreInfo) GetChairmanname() string {
	if x != nil && x.Chairmanname != nil {
		return *x.Chairmanname
	}
	return ""
}

type QueryBifrostRankGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=72" json:"param,omitempty"`
	Info  []*GuildScoreInfo `protobuf:"bytes,3,rep,name=info" json:"info,omitempty"`
}

// Default values for QueryBifrostRankGuildCmd fields.
const (
	Default_QueryBifrostRankGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_QueryBifrostRankGuildCmd_Param = GuildParam_GUILDPARAM_QUERY_BIFROST_RANK
)

func (x *QueryBifrostRankGuildCmd) Reset() {
	*x = QueryBifrostRankGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBifrostRankGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBifrostRankGuildCmd) ProtoMessage() {}

func (x *QueryBifrostRankGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBifrostRankGuildCmd.ProtoReflect.Descriptor instead.
func (*QueryBifrostRankGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{118}
}

func (x *QueryBifrostRankGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryBifrostRankGuildCmd_Cmd
}

func (x *QueryBifrostRankGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryBifrostRankGuildCmd_Param
}

func (x *QueryBifrostRankGuildCmd) GetInfo() []*GuildScoreInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GuildMemberBifrostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid     *uint64 `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Name       *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Dayscore   *uint32 `protobuf:"varint,3,opt,name=dayscore" json:"dayscore,omitempty"`
	Totalscore *uint32 `protobuf:"varint,4,opt,name=totalscore" json:"totalscore,omitempty"`
}

func (x *GuildMemberBifrostInfo) Reset() {
	*x = GuildMemberBifrostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMemberBifrostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMemberBifrostInfo) ProtoMessage() {}

func (x *GuildMemberBifrostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMemberBifrostInfo.ProtoReflect.Descriptor instead.
func (*GuildMemberBifrostInfo) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{119}
}

func (x *GuildMemberBifrostInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *GuildMemberBifrostInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GuildMemberBifrostInfo) GetDayscore() uint32 {
	if x != nil && x.Dayscore != nil {
		return *x.Dayscore
	}
	return 0
}

func (x *GuildMemberBifrostInfo) GetTotalscore() uint32 {
	if x != nil && x.Totalscore != nil {
		return *x.Totalscore
	}
	return 0
}

type QueryMemberBifrostInfoGuildCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command                  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=50" json:"cmd,omitempty"`
	Param *GuildParam               `protobuf:"varint,2,opt,name=param,enum=Cmd.GuildParam,def=73" json:"param,omitempty"`
	Score *uint32                   `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	Infos []*GuildMemberBifrostInfo `protobuf:"bytes,4,rep,name=infos" json:"infos,omitempty"`
}

// Default values for QueryMemberBifrostInfoGuildCmd fields.
const (
	Default_QueryMemberBifrostInfoGuildCmd_Cmd   = Command_SESSION_USER_GUILD_PROTOCMD
	Default_QueryMemberBifrostInfoGuildCmd_Param = GuildParam_GUILDPARAM_QUERY_MEMBER_BIFROST_INFO
)

func (x *QueryMemberBifrostInfoGuildCmd) Reset() {
	*x = QueryMemberBifrostInfoGuildCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GuildCmd_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMemberBifrostInfoGuildCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMemberBifrostInfoGuildCmd) ProtoMessage() {}

func (x *QueryMemberBifrostInfoGuildCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GuildCmd_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMemberBifrostInfoGuildCmd.ProtoReflect.Descriptor instead.
func (*QueryMemberBifrostInfoGuildCmd) Descriptor() ([]byte, []int) {
	return file_GuildCmd_proto_rawDescGZIP(), []int{120}
}

func (x *QueryMemberBifrostInfoGuildCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryMemberBifrostInfoGuildCmd_Cmd
}

func (x *QueryMemberBifrostInfoGuildCmd) GetParam() GuildParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryMemberBifrostInfoGuildCmd_Param
}

func (x *QueryMemberBifrostInfoGuildCmd) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *QueryMemberBifrostInfoGuildCmd) GetInfos() []*GuildMemberBifrostInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

var File_GuildCmd_proto protoreflect.FileDescriptor

var file_GuildCmd_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x44, 0x6f, 0x6a, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x01, 0x0a, 0x0c, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x50, 0x72, 0x61, 0x79, 0x43, 0x46, 0x47, 0x12, 0x19, 0x0a, 0x06, 0x70, 0x72, 0x61, 0x79, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x70, 0x72, 0x61, 0x79,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x70, 0x72, 0x61, 0x79, 0x6c, 0x76, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x70, 0x72, 0x61, 0x79, 0x6c, 0x76, 0x12, 0x35, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x50, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x45, 0x50, 0x52,
	0x41, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x44, 0x44, 0x45, 0x53, 0x53, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x63, 0x6f, 0x73,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x87,
	0x01, 0x0a, 0x0f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72,
	0x61, 0x79, 0x12, 0x15, 0x0a, 0x04, 0x70, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x04, 0x70, 0x72, 0x61, 0x79, 0x12, 0x11, 0x0a, 0x02, 0x6c, 0x76, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x6c, 0x76, 0x12, 0x23, 0x0a, 0x03,
	0x63, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x61, 0x79, 0x43, 0x46, 0x47, 0x52, 0x03, 0x63, 0x75,
	0x72, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x61, 0x79, 0x43,
	0x46, 0x47, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x22, 0x3b, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x62,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x72, 0x61,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x61, 0x79, 0x52, 0x05,
	0x70, 0x72, 0x61, 0x79, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x62, 0x44, 0x6f,
	0x6e, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70,
	0x73, 0x12, 0x23, 0x0a, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x31,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x31, 0x12, 0x23, 0x0a, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b,
	0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x12, 0x23, 0x0a, 0x0b, 0x64,
	0x6f, 0x6e, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x33,
	0x12, 0x23, 0x0a, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x34, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x34, 0x22, 0xa1, 0x02, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x12,
	0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d,
	0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x77, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x77,
	0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0d, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x75, 0x70, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x75,
	0x70, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x11, 0x42, 0x6c, 0x6f,
	0x62, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x34,
	0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0xb9, 0x0b, 0x0a, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1d, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12,
	0x17, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x77, 0x65, 0x65, 0x6b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x77, 0x65, 0x65, 0x6b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x67, 0x69, 0x66,
	0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x68, 0x61, 0x69, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x68, 0x61, 0x69, 0x72, 0x12, 0x1f, 0x0a,
	0x09, 0x68, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x09, 0x68, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x15,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x77, 0x65, 0x65,
	0x6b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x19, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x68, 0x65,
	0x61, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x68, 0x65, 0x61,
	0x64, 0x12, 0x15, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x74,
	0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x74,
	0x68, 0x12, 0x13, 0x0a, 0x03, 0x65, 0x79, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x03, 0x65, 0x79, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x3a,
	0x0b, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x0f, 0x45, 0x50, 0x52, 0x4f,
	0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x4a, 0x6f, 0x62, 0x3a, 0x0d, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4a, 0x4f, 0x42, 0x5f,
	0x4d, 0x49, 0x4e, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x76, 0x61, 0x72, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x72, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x61, 0x79,
	0x52, 0x04, 0x70, 0x72, 0x61, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x6c, 0x6f,
	0x62, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x06, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x12,
	0x2b, 0x0a, 0x0d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x0c,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1f, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x65, 0x78, 0x69, 0x74, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x65, 0x78, 0x69, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x72, 0x65, 0x64,
	0x74, 0x69, 0x70, 0x18, 0x22, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x72, 0x65,
	0x64, 0x74, 0x69, 0x70, 0x12, 0x2d, 0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x62, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x62, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x1f, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f,
	0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x62, 0x69, 0x66, 0x72,
	0x6f, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0c, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0x3d, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22,
	0x87, 0x04, 0x0a, 0x0a, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x19,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x7a, 0x6f, 0x6e,
	0x65, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x7a, 0x6f,
	0x6e, 0x65, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x04, 0x68, 0x61, 0x69, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x04, 0x68, 0x61, 0x69, 0x72, 0x12, 0x1f, 0x0a, 0x09, 0x68, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x68, 0x61, 0x69,
	0x72, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x15, 0x0a,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04,
	0x68, 0x65, 0x61, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6d,
	0x6f, 0x75, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d,
	0x6f, 0x75, 0x74, 0x68, 0x12, 0x13, 0x0a, 0x03, 0x65, 0x79, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x65, 0x79, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x3a, 0x0b, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x0f, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x49, 0x4e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x0e, 0x42, 0x6c, 0x6f,
	0x62, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x06, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x08, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f,
	0x62, 0x12, 0x2f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x62, 0x3a, 0x0d,
	0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x03, 0x6a,
	0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1d, 0x0a,
	0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x75, 0x74, 0x68, 0x22, 0x40, 0x0a, 0x0a,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x07, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x9b,
	0x01, 0x0a, 0x12, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64, 0x22, 0xf7, 0x02, 0x0a,
	0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x3a, 0x12, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x52, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0a, 0x69,
	0x73, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x77, 0x65, 0x6c, 0x66, 0x61, 0x72,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x77, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x62, 0x0a, 0x11, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x09, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x11, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x27,
	0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x49, 0x0a, 0x12, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x73, 0x22, 0x8b, 0x03, 0x0a, 0x10, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x57, 0x65, 0x6c, 0x66,
	0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x3a, 0x11, 0x45, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x57, 0x45, 0x4c, 0x46, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x3a, 0x0b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x6f, 0x76,
	0x65, 0x72, 0x64, 0x75, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x67, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x3b, 0x0a, 0x0c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65,
	0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x57, 0x65, 0x6c, 0x66, 0x61,
	0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb3, 0x01,
	0x0a, 0x11, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x69, 0x64, 0x22, 0x70, 0x0a, 0x11, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x6b, 0x0a, 0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x22, 0x49, 0x0a, 0x06, 0x47, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x63, 0x0a,
	0x0a, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x47, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x07, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x22, 0xe8, 0x02, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x47, 0x76, 0x67, 0x12,
	0x22, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x09, 0x73, 0x75, 0x67, 0x76, 0x67, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x73, 0x75,
	0x67, 0x76, 0x67, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x75, 0x67, 0x76, 0x67,
	0x63, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x75,
	0x67, 0x76, 0x67, 0x63, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x75, 0x67, 0x76, 0x67, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x73,
	0x75, 0x67, 0x76, 0x67, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x77, 0x65,
	0x65, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6a, 0x6f, 0x69,
	0x6e, 0x77, 0x65, 0x65, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3b, 0x0a,
	0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x11,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x62, 0x0a, 0x0c, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xfe,
	0x01, 0x0a, 0x0e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1b, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x67, 0x75, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x12, 0x45, 0x54, 0x52,
	0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x72, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x09, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x42, 0x0a, 0x11, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x73, 0x22, 0xe6, 0x07, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x62,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x69, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x76, 0x61, 0x72, 0x12, 0x1f, 0x0a, 0x03, 0x6a,
	0x6f, 0x62, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x23, 0x0a, 0x0b,
	0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x31, 0x12, 0x23, 0x0a, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x32,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x12, 0x25, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x71, 0x75, 0x65, 0x73, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x64, 0x6f, 0x6a, 0x6f, 0x6d, 0x73,
	0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x44, 0x6f,
	0x6a, 0x6f, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x07, 0x64, 0x6f, 0x6a, 0x6f, 0x6d,
	0x73, 0x67, 0x12, 0x23, 0x0a, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x64, 0x6f, 0x6e, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x33, 0x12, 0x23, 0x0a, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x34, 0x12, 0x21, 0x0a, 0x0a,
	0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x0a, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x10, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x75, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0e, 0x63, 0x69,
	0x74, 0x79, 0x47, 0x69, 0x76, 0x65, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0c,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x77, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x52, 0x07, 0x77, 0x65, 0x6c, 0x66, 0x61, 0x72,
	0x65, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x12, 0x27, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x09, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x03, 0x67, 0x76, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x47, 0x76, 0x67, 0x52, 0x03, 0x67, 0x76,
	0x67, 0x12, 0x28, 0x0a, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x76, 0x61, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x76, 0x61, 0x72, 0x12, 0x26, 0x0a, 0x0d, 0x62, 0x69, 0x66, 0x72,
	0x6f, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0c, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0x72, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x12, 0x1b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xfd, 0x01, 0x0a,
	0x0a, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x69, 0x64, 0x5f, 0x73, 0x76, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x08, 0x61, 0x63, 0x63, 0x69, 0x64, 0x53, 0x76, 0x72, 0x12, 0x17, 0x0a, 0x05, 0x61,
	0x63, 0x63, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61,
	0x63, 0x63, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x06, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x7a, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x0b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x0a,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0x39,
	0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x12, 0x27, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x8f, 0x04, 0x0a, 0x10, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15,
	0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19,
	0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x63, 0x75, 0x72,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x09, 0x63, 0x75, 0x72, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x06, 0x63,
	0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06,
	0x63, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x72, 0x6d,
	0x61, 0x6e, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x3a, 0x0b, 0x45, 0x47,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x72,
	0x6d, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x69, 0x72, 0x6d, 0x61, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x68, 0x61, 0x69, 0x72, 0x6d, 0x61, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x68, 0x61,
	0x69, 0x72, 0x6d, 0x61, 0x6e, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x63, 0x68, 0x61, 0x69, 0x72, 0x6d, 0x61, 0x6e,
	0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x76, 0x67, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x67,
	0x76, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x6e,
	0x65, 0x65, 0x64, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x0a, 0x6e, 0x65, 0x78, 0x74, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x22, 0xe5, 0x07, 0x0a, 0x09,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x0e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x72, 0x65, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x23,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74,
	0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x64, 0x6f,
	0x6e, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x31, 0x12, 0x23, 0x0a, 0x0b, 0x64, 0x6f, 0x6e,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x0b, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x27,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x06, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x12, 0x29, 0x0a,
	0x0e, 0x63, 0x69, 0x74, 0x79, 0x67, 0x69, 0x76, 0x65, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0e, 0x63, 0x69, 0x74, 0x79, 0x67, 0x69,
	0x76, 0x65, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x12, 0x67, 0x76, 0x67, 0x5f, 0x74, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x10, 0x67, 0x76, 0x67, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x62, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x12, 0x62, 0x63, 0x6f,
	0x69, 0x6e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x67, 0x76, 0x67, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x67, 0x76, 0x67, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x67,
	0x76, 0x67, 0x5f, 0x6c, 0x76, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x67, 0x76, 0x67, 0x4c, 0x76, 0x12, 0x37, 0x0a, 0x16, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x14, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4c, 0x49, 0x53,
	0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x16, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd8, 0x01, 0x0a, 0x19, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04,
	0x64, 0x65, 0x6c, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x18, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d,
	0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x29, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x73, 0x0a, 0x0f,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x0e,
	0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xc9, 0x01, 0x0a, 0x17, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x85, 0x01,
	0x0a, 0x15, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x14, 0x45, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d,
	0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x02, 0x0a, 0x1d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x11, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x14, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x3b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x10, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x14, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d,
	0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49,
	0x4e, 0x56, 0x49, 0x54, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x10, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0xe2, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d,
	0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x07, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x6e, 0x65,
	0x65, 0x64, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xaa, 0x01, 0x0a, 0x12,
	0x4b, 0x69, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x15, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4b, 0x49, 0x43, 0x4b,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0xd9, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4a, 0x6f, 0x62, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x4a, 0x4f,
	0x42, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x62,
	0x3a, 0x0d, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x03, 0x6a, 0x6f, 0x62, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x69, 0x74, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0xb6, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x69, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x43, 0x48, 0x41, 0x49, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x09,
	0x6e, 0x65, 0x77, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0xa7, 0x01,
	0x0a, 0x0f, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d,
	0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x4d, 0x49,
	0x53, 0x53, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17,
	0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x0f, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x75, 0x70, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xd6, 0x01, 0x0a, 0x0e, 0x44, 0x6f, 0x6e,
	0x61, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69,
	0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x36, 0x0a, 0x0c, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0xc8, 0x02, 0x0a, 0x0a, 0x44, 0x6f,
	0x6e, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x12,
	0x25, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x03, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x03, 0x63, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x12, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x44, 0x6f, 0x6e, 0x61,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe3, 0x01,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x12, 0x21, 0x0a, 0x03, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x03,
	0x64, 0x65, 0x6c, 0x22, 0xb2, 0x01, 0x0a, 0x13, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x1e, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x54, 0x45, 0x52, 0x52, 0x49, 0x54, 0x4f, 0x52, 0x59,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x22, 0x9d, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x61, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x0f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x41,
	0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x50, 0x72, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x0f, 0x45, 0x50, 0x52, 0x41,
	0x59, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x04, 0x70, 0x72, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x70, 0x72, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x0c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x4e, 0x74, 0x66, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x49, 0x4e, 0x46, 0x4f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x11, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x50, 0x72, 0x61, 0x79, 0x4e, 0x74, 0x66, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d,
	0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x50, 0x52, 0x41, 0x59, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a,
	0x0a, 0x05, 0x70, 0x72, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50,
	0x72, 0x61, 0x79, 0x52, 0x05, 0x70, 0x72, 0x61, 0x79, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x15, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x18, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x55, 0x50, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0xb2, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x63, 0x6b,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x50, 0x41, 0x43, 0x4b, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x63, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x14, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12,
	0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5a, 0x4f, 0x4e, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06,
	0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x03, 0x73, 0x65, 0x74,
	0x22, 0xde, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x4e, 0x74, 0x66, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5a, 0x4f,
	0x4e, 0x45, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a,
	0x0a, 0x6e, 0x65, 0x78, 0x74, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x63, 0x75, 0x72, 0x7a, 0x6f, 0x6e, 0x65, 0x69,
	0x64, 0x22, 0xbd, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64,
	0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x61, 0x67, 0x72, 0x65,
	0x65, 0x22, 0x6d, 0x0a, 0x0a, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x15, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x22, 0xc2, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x03, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x03, 0x64, 0x65, 0x6c, 0x12, 0x25, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x13, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x22, 0xb8, 0x02, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41,
	0x75, 0x74, 0x68, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x03, 0x61, 0x64, 0x64,
	0x12, 0x31, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x3a, 0x0b,
	0x45, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x12, 0x2f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x62,
	0x3a, 0x0d, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x03, 0x6a, 0x6f, 0x62, 0x12, 0x29, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x68, 0x3a, 0x09,
	0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22,
	0xaf, 0x01, 0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x15, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4a,
	0x4f, 0x42, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f,
	0x62, 0x22, 0xe0, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x0f, 0x45,
	0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x12, 0x11, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x02, 0x6c, 0x76, 0x12, 0x23, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6f,
	0x6c, 0x64, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xc5, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12,
	0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x49, 0x54, 0x59, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28,
	0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x12, 0x43, 0x69, 0x74,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12,
	0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x39, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x43, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x0f, 0x45,
	0x43, 0x49, 0x54, 0x59, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x49, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x69, 0x73, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x06, 0x69, 0x73, 0x72, 0x65,
	0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x15, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x63, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64,
	0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x23, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x14, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x19, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x17, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x49, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x0a, 0x45, 0x49, 0x43, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x08, 0x69, 0x73, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x69, 0x73, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x17, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x1c, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x14, 0x4f, 0x70, 0x65,
	0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d,
	0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x3b, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x12, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x22, 0xca, 0x01, 0x0a,
	0x0d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x10, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x43, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x12, 0x45, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x80, 0x02, 0x0a, 0x16, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1a, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x43, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x12, 0x45, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0a, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x0a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x64, 0x22, 0xc4, 0x01, 0x0a,
	0x13, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x74, 0x66, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x1b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x20, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x12, 0x45, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x49, 0x4e,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x97, 0x02, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x74, 0x66, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x2d, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x57, 0x65,
	0x6c, 0x66, 0x61, 0x72, 0x65, 0x4e, 0x74, 0x66, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64,
	0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x57, 0x45, 0x4c, 0x46, 0x41, 0x52,
	0x45, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x07,
	0x77, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x77, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x22, 0x90, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x16, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x57, 0x45, 0x4c, 0x46, 0x41, 0x52, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x22, 0x6a, 0x0a, 0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x76, 0x75, 0x70,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x12, 0x45, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xce, 0x01, 0x0a,
	0x17, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x76, 0x75, 0x70, 0x45, 0x66, 0x66,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x56, 0x55, 0x50, 0x5f,
	0x45, 0x46, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x07, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x76, 0x75, 0x70, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x22, 0xaf, 0x02,
	0x0a, 0x19, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x74, 0x66, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x38, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x69, 0x74,
	0x65, 0x6d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0xad, 0x01, 0x0a, 0x17, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x80, 0x02, 0x0a, 0x13, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x4f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x45, 0x41, 0x52, 0x54, 0x49, 0x46,
	0x41, 0x43, 0x54, 0x4f, 0x50, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x03,
	0x6f, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xcf, 0x03, 0x0a,
	0x16, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x12, 0x33, 0x0a, 0x14, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x62, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x12, 0x62, 0x63, 0x6f, 0x69, 0x6e, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x13, 0x45, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x3a, 0x12, 0x45, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x22, 0x85,
	0x01, 0x0a, 0x16, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x6b, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1e, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x12, 0x45, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x67, 0x75, 0x69, 0x64, 0x12, 0x2b,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x0c,
	0x43, 0x69, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x06,
	0x63, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x63, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x43,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x0f, 0x45, 0x47, 0x43, 0x49, 0x54, 0x59,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x11, 0x0a,
	0x02, 0x6c, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x6c, 0x76,
	0x12, 0x23, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47,
	0x43, 0x69, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x19, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x53, 0x48, 0x4f, 0x57, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x53, 0x68, 0x6f,
	0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xa9, 0x01, 0x0a,
	0x13, 0x47, 0x76, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x72, 0x65, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x13, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x45,
	0x50, 0x4e, 0x5f, 0x47, 0x56, 0x47, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a,
	0x04, 0x66, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x04, 0x66, 0x69, 0x72, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x1a, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x74, 0x66, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x55, 0x4e, 0x49, 0x53, 0x48, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x65,
	0x78, 0x69, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x19, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x56, 0x4f, 0x49, 0x43, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x76, 0x67, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x19, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x76, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x56, 0x47, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x76, 0x67,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x22, 0xa7, 0x02, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x76, 0x67, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x56,
	0x47, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x19, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x14, 0x47,
	0x76, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x74, 0x66, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x19, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x56, 0x47,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x17, 0x0a, 0x03, 0x68, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x03, 0x68, 0x61, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x47, 0x76, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x19, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x56,
	0x47, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0x94, 0x02, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1e, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x72, 0x6d, 0x61, 0x6e,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x69,
	0x72, 0x6d, 0x61, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1d, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x42, 0x49, 0x46, 0x52, 0x4f, 0x53, 0x54, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x79, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x79, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x24, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x42, 0x49,
	0x46, 0x52, 0x4f, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x2a, 0xd6, 0x10, 0x0a, 0x0a, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x08, 0x12,
	0x1b, 0x0a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49,
	0x4e, 0x56, 0x49, 0x54, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x18, 0x0a,
	0x14, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x4a, 0x4f, 0x42, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x43, 0x48, 0x41,
	0x49, 0x52, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10,
	0x11, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x12, 0x12, 0x15,
	0x0a, 0x11, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x4f, 0x4e,
	0x41, 0x54, 0x45, 0x10, 0x13, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x54, 0x45,
	0x52, 0x52, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x41, 0x59, 0x10, 0x15, 0x12, 0x1b,
	0x0a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x49, 0x4e, 0x46, 0x4f, 0x4e, 0x54, 0x46, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50,
	0x52, 0x41, 0x59, 0x4e, 0x54, 0x46, 0x10, 0x17, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x10, 0x18, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x19, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x10, 0x1a, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x1b, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x1c, 0x12, 0x19,
	0x0a, 0x15, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x20, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x1d, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5a, 0x4f, 0x4e,
	0x45, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x1e, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5a, 0x4f,
	0x4e, 0x45, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x1f, 0x12, 0x1f, 0x0a, 0x1b, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x21, 0x12, 0x18, 0x0a, 0x14,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x10, 0x22, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x25, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x26, 0x12,
	0x19, 0x0a, 0x15, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4a, 0x4f,
	0x42, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x27, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x28, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x49, 0x54, 0x59,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x29, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x2a, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x4e, 0x43,
	0x10, 0x2b, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x10,
	0x2c, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41,
	0x44, 0x10, 0x2d, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x2f, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x30, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x54,
	0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x31, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4e,
	0x54, 0x46, 0x10, 0x32, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x55, 0x42, 0x4d,
	0x49, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x33, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x34, 0x12, 0x1a, 0x0a, 0x16, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x57, 0x45, 0x4c, 0x46, 0x41, 0x52,
	0x45, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x35, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x57, 0x45, 0x4c, 0x46, 0x41, 0x52,
	0x45, 0x10, 0x36, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x56, 0x55, 0x50, 0x5f,
	0x45, 0x46, 0x46, 0x10, 0x37, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x38, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x10, 0x39, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43,
	0x54, 0x5f, 0x4f, 0x50, 0x54, 0x10, 0x3a, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x3b, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x3c, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x3d, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x3e, 0x12, 0x1d, 0x0a,
	0x19, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x3f, 0x12, 0x17, 0x0a, 0x13,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x45, 0x50, 0x4e, 0x5f,
	0x47, 0x56, 0x47, 0x10, 0x40, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x41, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x55, 0x4e,
	0x49, 0x53, 0x48, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x42, 0x12, 0x18, 0x0a,
	0x14, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x47, 0x56, 0x47, 0x10, 0x43, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x56, 0x47, 0x5f,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x44, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x56, 0x47, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44,
	0x5f, 0x4e, 0x54, 0x46, 0x10, 0x45, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x56, 0x47, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f,
	0x47, 0x45, 0x54, 0x10, 0x46, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x47, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x42, 0x49, 0x46, 0x52, 0x4f,
	0x53, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x48, 0x12, 0x28, 0x0a, 0x24, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x46, 0x52, 0x4f, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x49, 0x2a, 0x32, 0x0a, 0x0c, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x50, 0x45,
	0x52, 0x50, 0x41, 0x47, 0x45, 0x10, 0x14, 0x2a, 0xf8, 0x02, 0x0a, 0x09, 0x45, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x4a, 0x6f, 0x62, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4a,
	0x4f, 0x42, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x4a, 0x4f, 0x42, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x52, 0x4d, 0x41, 0x4e, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4a, 0x4f, 0x42, 0x5f, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x52, 0x4d, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x31, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4a, 0x4f,
	0x42, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x32, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x33,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4a, 0x4f, 0x42, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x4a, 0x4f, 0x42, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x07, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x34, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4a, 0x4f,
	0x42, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x35, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x36,
	0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4a, 0x4f, 0x42, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x37, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x38, 0x10, 0x0c,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x39, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x31, 0x30, 0x10, 0x0e, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x41, 0x58,
	0x10, 0x0f, 0x2a, 0x7a, 0x0a, 0x09, 0x45, 0x50, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x50, 0x52, 0x41, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x44,
	0x44, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x52, 0x41, 0x59, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x56, 0x47, 0x5f, 0x41, 0x54, 0x4b, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x50, 0x52, 0x41, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x56, 0x47, 0x5f, 0x44,
	0x45, 0x46, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x52, 0x41, 0x59, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x56, 0x47, 0x5f, 0x45, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x45,
	0x50, 0x52, 0x41, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x5d,
	0x0a, 0x0e, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x02, 0x2a, 0x90, 0x06,
	0x0a, 0x05, 0x45, 0x41, 0x75, 0x74, 0x68, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49,
	0x54, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x10, 0x06, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x5f,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x5f,
	0x54, 0x45, 0x43, 0x48, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0a, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x56, 0x49, 0x43, 0x45, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4a, 0x4f, 0x42, 0x10,
	0x0d, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x4a, 0x4f, 0x42, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x49, 0x56, 0x45,
	0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x44, 0x49, 0x53, 0x4d,
	0x49, 0x53, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x5a, 0x4f,
	0x4e, 0x45, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10,
	0x13, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x55, 0x50, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x10, 0x15,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x17, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x18, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x52,
	0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x10, 0x19,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41,
	0x43, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x10, 0x1b,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x53, 0x48, 0x4f, 0x50, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x1d, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x10, 0x1e, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10,
	0x20, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x21,
	0x2a, 0xc6, 0x02, 0x0a, 0x0e, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x42, 0x41, 0x52, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4c, 0x49,
	0x54, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x47,
	0x49, 0x43, 0x5f, 0x53, 0x45, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52,
	0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x06, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x41, 0x54, 0x5f, 0x50, 0x49, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f,
	0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d,
	0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x10,
	0x08, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x09, 0x2a, 0x92, 0x01, 0x0a, 0x0d, 0x45, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x57, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x57, 0x45, 0x4c, 0x46, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x57, 0x45, 0x4c, 0x46,
	0x41, 0x52, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x57, 0x45, 0x4c, 0x46, 0x41, 0x52, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x57, 0x45, 0x4c, 0x46, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x52, 0x45,
	0x41, 0x53, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x57, 0x45, 0x4c, 0x46, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x93,
	0x01, 0x0a, 0x0e, 0x45, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x54, 0x52,
	0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x47, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55,
	0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d,
	0x41, 0x58, 0x10, 0x04, 0x2a, 0xb8, 0x08, 0x0a, 0x0a, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x06, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45,
	0x43, 0x52, 0x55, 0x49, 0x54, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41,
	0x49, 0x54, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x49, 0x53, 0x4d, 0x49, 0x53, 0x53,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x12, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x50, 0x50, 0x4c,
	0x59, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x15, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x5a, 0x4f, 0x4e, 0x45,
	0x49, 0x44, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x17, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x45, 0x58, 0x54,
	0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x18, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x31,
	0x10, 0x19, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x32, 0x10, 0x1a, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x1b, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x33, 0x10, 0x1c,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44,
	0x4f, 0x4e, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x34, 0x10, 0x1d, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54,
	0x5f, 0x44, 0x41, 0x59, 0x10, 0x25, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x26, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x49,
	0x44, 0x10, 0x2b, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x55, 0x50, 0x5f, 0x43, 0x44,
	0x10, 0x2c, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2d,
	0x12, 0x21, 0x0a, 0x1d, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54,
	0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x47, 0x56, 0x47, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x2e, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x2f, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f,
	0x42, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x30, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x55, 0x50, 0x45,
	0x52, 0x47, 0x56, 0x47, 0x10, 0x31, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x47, 0x56, 0x47, 0x5f, 0x4c, 0x56,
	0x10, 0x32, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e,
	0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x33, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x10,
	0x34, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x35, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x10, 0x36, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x52, 0x4d, 0x41, 0x4e, 0x10, 0x37, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4f, 0x4c, 0x44, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x38, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x58, 0x4e, 0x55, 0x4d, 0x10, 0x39, 0x12, 0x1d, 0x0a, 0x19,
	0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x3a, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x3b, 0x2a,
	0x39, 0x0a, 0x0a, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x02, 0x2a, 0x98, 0x08, 0x0a, 0x10, 0x45,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x57, 0x45,
	0x45, 0x4b, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x1f, 0x0a,
	0x1b, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x10, 0x07, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x48, 0x41,
	0x49, 0x52, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x0b, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x4a, 0x4f, 0x42, 0x10, 0x0c, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x55, 0x50, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x0f, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x41, 0x53, 0x53, 0x45, 0x54, 0x10, 0x10, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x5a, 0x4f,
	0x4e, 0x45, 0x49, 0x44, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x13, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x15, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x4f, 0x55,
	0x54, 0x48, 0x10, 0x17, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x59, 0x45, 0x10, 0x18, 0x12, 0x23,
	0x0a, 0x1f, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x45, 0x46, 0x46, 0x45, 0x43,
	0x54, 0x10, 0x19, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x1a,
	0x12, 0x22, 0x0a, 0x1e, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x10, 0x1b, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x42, 0x43, 0x4f,
	0x49, 0x4e, 0x10, 0x1c, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x42, 0x43,
	0x4f, 0x49, 0x4e, 0x10, 0x1d, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x1e, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x52, 0x4f,
	0x4f, 0x4d, 0x49, 0x44, 0x10, 0x1f, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x52,
	0x41, 0x49, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x20, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x21, 0x2a, 0x6d, 0x0a, 0x0c, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x47, 0x52, 0x45,
	0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x47, 0x52, 0x45, 0x45, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x41, 0x58, 0x10, 0x03, 0x2a, 0x64, 0x0a, 0x0b, 0x45, 0x50, 0x72, 0x61, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x50, 0x52, 0x41, 0x59, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x50, 0x52, 0x41,
	0x59, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x41, 0x59, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x50, 0x52, 0x41, 0x59, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x50, 0x52, 0x41, 0x59, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x53, 0x0a, 0x07, 0x45, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4d, 0x4f, 0x44, 0x49, 0x46,
	0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4d, 0x4f, 0x44,
	0x49, 0x46, 0x59, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x41, 0x55, 0x54, 0x48, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x45, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a,
	0xb8, 0x01, 0x0a, 0x10, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x43, 0x49,
	0x54, 0x59, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x43, 0x49, 0x54, 0x59, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x43, 0x49, 0x54, 0x59, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x43,
	0x43, 0x55, 0x50, 0x59, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x43, 0x49, 0x54, 0x59, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x55,
	0x50, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x43, 0x49, 0x54,
	0x59, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x43, 0x49, 0x54, 0x59, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0x6e, 0x0a, 0x0b, 0x45, 0x43,
	0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x43, 0x49,
	0x54, 0x59, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x43, 0x49, 0x54, 0x59, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x49,
	0x56, 0x45, 0x55, 0x50, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x43, 0x49, 0x54, 0x59, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x47, 0x49, 0x56,
	0x45, 0x55, 0x50, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x43, 0x49, 0x54, 0x59, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x3e, 0x0a, 0x0a, 0x45, 0x49,
	0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x49, 0x43, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x49, 0x43, 0x4f,
	0x4e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x49, 0x43, 0x4f,
	0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x10, 0x02, 0x2a, 0xcb, 0x01, 0x0a, 0x10, 0x45,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x50, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x41, 0x52,
	0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x50, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49,
	0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x41,
	0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x50, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x45, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x41, 0x52,
	0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x50, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x54, 0x52, 0x49, 0x45, 0x56, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x03, 0x12,
	0x1d, 0x0a, 0x19, 0x45, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x50, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x50, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0xd0, 0x01, 0x0a, 0x12, 0x45, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x56, 0x47, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x42, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x10, 0x03, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x04, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0x9b, 0x02, 0x0a, 0x0f,
	0x45, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x54, 0x52, 0x45,
	0x41, 0x53, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x56, 0x47, 0x5f,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x54,
	0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x54, 0x52, 0x45, 0x41,
	0x53, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54,
	0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x47, 0x56, 0x47, 0x10, 0x06,
	0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x07,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x08, 0x2a, 0x8c, 0x01, 0x0a, 0x0e, 0x45, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4d,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52,
	0x45, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x52, 0x45, 0x41,
	0x53, 0x55, 0x52, 0x45, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x2a, 0xd3, 0x01, 0x0a, 0x0b, 0x45, 0x47, 0x43,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x47, 0x43, 0x49,
	0x54, 0x59, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x47, 0x43, 0x49, 0x54, 0x59, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x49,
	0x46, 0x49, 0x52, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x47, 0x43, 0x49, 0x54, 0x59,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x46, 0x49, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x47, 0x43, 0x49, 0x54, 0x59, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x46, 0x46, 0x49, 0x52, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x47, 0x43, 0x49,
	0x54, 0x59, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x46, 0x49,
	0x52, 0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x47, 0x43, 0x49, 0x54, 0x59, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x45, 0x43, 0x54, 0x10, 0x05, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x47, 0x43, 0x49, 0x54, 0x59, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4f,
	0x57, 0x4e, 0x45, 0x52, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x43, 0x49, 0x54, 0x59,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x59, 0x10, 0x07,
}

var (
	file_GuildCmd_proto_rawDescOnce sync.Once
	file_GuildCmd_proto_rawDescData = file_GuildCmd_proto_rawDesc
)

func file_GuildCmd_proto_rawDescGZIP() []byte {
	file_GuildCmd_proto_rawDescOnce.Do(func() {
		file_GuildCmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_GuildCmd_proto_rawDescData)
	})
	return file_GuildCmd_proto_rawDescData
}

var file_GuildCmd_proto_enumTypes = make([]protoimpl.EnumInfo, 23)
var file_GuildCmd_proto_msgTypes = make([]protoimpl.MessageInfo, 121)
var file_GuildCmd_proto_goTypes = []interface{}{
	(GuildParam)(0),                        // 0: Cmd.GuildParam
	(EGuildGlobal)(0),                      // 1: Cmd.EGuildGlobal
	(EGuildJob)(0),                         // 2: Cmd.EGuildJob
	(EPrayType)(0),                         // 3: Cmd.EPrayType
	(EGuildFunction)(0),                    // 4: Cmd.EGuildFunction
	(EAuth)(0),                             // 5: Cmd.EAuth
	(EGuildBuilding)(0),                    // 6: Cmd.EGuildBuilding
	(EGuildWelfare)(0),                     // 7: Cmd.EGuildWelfare
	(ETreasureState)(0),                    // 8: Cmd.ETreasureState
	(EGuildData)(0),                        // 9: Cmd.EGuildData
	(EGuildList)(0),                        // 10: Cmd.EGuildList
	(EGuildMemberData)(0),                  // 11: Cmd.EGuildMemberData
	(EGuildAction)(0),                      // 12: Cmd.EGuildAction
	(EPrayAction)(0),                       // 13: Cmd.EPrayAction
	(EModify)(0),                           // 14: Cmd.EModify
	(EGuildCityStatus)(0),                  // 15: Cmd.EGuildCityStatus
	(ECityAction)(0),                       // 16: Cmd.ECityAction
	(EIconState)(0),                        // 17: Cmd.EIconState
	(EArtifactOptType)(0),                  // 18: Cmd.EArtifactOptType
	(EGuildTreasureType)(0),                // 19: Cmd.EGuildTreasureType
	(ETreasureAction)(0),                   // 20: Cmd.ETreasureAction
	(ETreasurePoint)(0),                    // 21: Cmd.ETreasurePoint
	(EGCityState)(0),                       // 22: Cmd.EGCityState
	(*GuildPrayCFG)(nil),                   // 23: Cmd.GuildPrayCFG
	(*GuildMemberPray)(nil),                // 24: Cmd.GuildMemberPray
	(*BlobGuildPray)(nil),                  // 25: Cmd.BlobGuildPray
	(*BlobDonate)(nil),                     // 26: Cmd.BlobDonate
	(*UserGuildBuilding)(nil),              // 27: Cmd.UserGuildBuilding
	(*BlobGuildBuilding)(nil),              // 28: Cmd.BlobGuildBuilding
	(*GuildMember)(nil),                    // 29: Cmd.GuildMember
	(*BlobGuildMember)(nil),                // 30: Cmd.BlobGuildMember
	(*GuildApply)(nil),                     // 31: Cmd.GuildApply
	(*BlobGuildApply)(nil),                 // 32: Cmd.BlobGuildApply
	(*GuildJob)(nil),                       // 33: Cmd.GuildJob
	(*GuildQuest)(nil),                     // 34: Cmd.GuildQuest
	(*GuildBuildMaterial)(nil),             // 35: Cmd.GuildBuildMaterial
	(*GuildBuilding)(nil),                  // 36: Cmd.GuildBuilding
	(*GuildBuildingData)(nil),              // 37: Cmd.GuildBuildingData
	(*GuildChallenge)(nil),                 // 38: Cmd.GuildChallenge
	(*GuildChallengeData)(nil),             // 39: Cmd.GuildChallengeData
	(*GuildWelfareItem)(nil),               // 40: Cmd.GuildWelfareItem
	(*GuildWelfare)(nil),                   // 41: Cmd.GuildWelfare
	(*GuildArtifactItem)(nil),              // 42: Cmd.GuildArtifactItem
	(*GuildArtifactData)(nil),              // 43: Cmd.GuildArtifactData
	(*GuildArtifact)(nil),                  // 44: Cmd.GuildArtifact
	(*GQuest)(nil),                         // 45: Cmd.GQuest
	(*BlobGQuest)(nil),                     // 46: Cmd.BlobGQuest
	(*BlobGGvg)(nil),                       // 47: Cmd.BlobGGvg
	(*GuildTreasure)(nil),                  // 48: Cmd.GuildTreasure
	(*TreasureItem)(nil),                   // 49: Cmd.TreasureItem
	(*TreasureResult)(nil),                 // 50: Cmd.TreasureResult
	(*BlobGuildTreasure)(nil),              // 51: Cmd.BlobGuildTreasure
	(*GuildActiveMember)(nil),              // 52: Cmd.GuildActiveMember
	(*BlobGuildMisc)(nil),                  // 53: Cmd.BlobGuildMisc
	(*BlobGuildPack)(nil),                  // 54: Cmd.BlobGuildPack
	(*BlobGuildEvent)(nil),                 // 55: Cmd.BlobGuildEvent
	(*GuildPhoto)(nil),                     // 56: Cmd.GuildPhoto
	(*PhotoFrame)(nil),                     // 57: Cmd.PhotoFrame
	(*BlobGuildPhoto)(nil),                 // 58: Cmd.BlobGuildPhoto
	(*GuildSummaryData)(nil),               // 59: Cmd.GuildSummaryData
	(*GuildData)(nil),                      // 60: Cmd.GuildData
	(*QueryGuildListGuildCmd)(nil),         // 61: Cmd.QueryGuildListGuildCmd
	(*CreateGuildGuildCmd)(nil),            // 62: Cmd.CreateGuildGuildCmd
	(*EnterGuildGuildCmd)(nil),             // 63: Cmd.EnterGuildGuildCmd
	(*GuildMemberUpdateGuildCmd)(nil),      // 64: Cmd.GuildMemberUpdateGuildCmd
	(*GuildApplyUpdateGuildCmd)(nil),       // 65: Cmd.GuildApplyUpdateGuildCmd
	(*GuildDataUpdate)(nil),                // 66: Cmd.GuildDataUpdate
	(*GuildDataUpdateGuildCmd)(nil),        // 67: Cmd.GuildDataUpdateGuildCmd
	(*GuildMemberDataUpdate)(nil),          // 68: Cmd.GuildMemberDataUpdate
	(*GuildMemberDataUpdateGuildCmd)(nil),  // 69: Cmd.GuildMemberDataUpdateGuildCmd
	(*ApplyGuildGuildCmd)(nil),             // 70: Cmd.ApplyGuildGuildCmd
	(*ProcessApplyGuildCmd)(nil),           // 71: Cmd.ProcessApplyGuildCmd
	(*InviteMemberGuildCmd)(nil),           // 72: Cmd.InviteMemberGuildCmd
	(*ProcessInviteGuildCmd)(nil),          // 73: Cmd.ProcessInviteGuildCmd
	(*SetGuildOptionGuildCmd)(nil),         // 74: Cmd.SetGuildOptionGuildCmd
	(*KickMemberGuildCmd)(nil),             // 75: Cmd.KickMemberGuildCmd
	(*ChangeJobGuildCmd)(nil),              // 76: Cmd.ChangeJobGuildCmd
	(*ExitGuildGuildCmd)(nil),              // 77: Cmd.ExitGuildGuildCmd
	(*ExchangeChairGuildCmd)(nil),          // 78: Cmd.ExchangeChairGuildCmd
	(*DismissGuildCmd)(nil),                // 79: Cmd.DismissGuildCmd
	(*LevelupGuildCmd)(nil),                // 80: Cmd.LevelupGuildCmd
	(*DonateGuildCmd)(nil),                 // 81: Cmd.DonateGuildCmd
	(*DonateReward)(nil),                   // 82: Cmd.DonateReward
	(*DonateItem)(nil),                     // 83: Cmd.DonateItem
	(*DonateListGuildCmd)(nil),             // 84: Cmd.DonateListGuildCmd
	(*UpdateDonateItemGuildCmd)(nil),       // 85: Cmd.UpdateDonateItemGuildCmd
	(*DonateFrameGuildCmd)(nil),            // 86: Cmd.DonateFrameGuildCmd
	(*EnterTerritoryGuildCmd)(nil),         // 87: Cmd.EnterTerritoryGuildCmd
	(*PrayGuildCmd)(nil),                   // 88: Cmd.PrayGuildCmd
	(*GuildInfoNtf)(nil),                   // 89: Cmd.GuildInfoNtf
	(*GuildPrayNtfGuildCmd)(nil),           // 90: Cmd.GuildPrayNtfGuildCmd
	(*LevelupEffectGuildCmd)(nil),          // 91: Cmd.LevelupEffectGuildCmd
	(*QueryPackGuildCmd)(nil),              // 92: Cmd.QueryPackGuildCmd
	(*PackUpdateGuildCmd)(nil),             // 93: Cmd.PackUpdateGuildCmd
	(*ExchangeZoneGuildCmd)(nil),           // 94: Cmd.ExchangeZoneGuildCmd
	(*ExchangeZoneNtfGuildCmd)(nil),        // 95: Cmd.ExchangeZoneNtfGuildCmd
	(*ExchangeZoneAnswerGuildCmd)(nil),     // 96: Cmd.ExchangeZoneAnswerGuildCmd
	(*GuildEvent)(nil),                     // 97: Cmd.GuildEvent
	(*QueryEventListGuildCmd)(nil),         // 98: Cmd.QueryEventListGuildCmd
	(*NewEventGuildCmd)(nil),               // 99: Cmd.NewEventGuildCmd
	(*FrameStatusGuildCmd)(nil),            // 100: Cmd.FrameStatusGuildCmd
	(*ModifyAuthGuildCmd)(nil),             // 101: Cmd.ModifyAuthGuildCmd
	(*JobUpdateGuildCmd)(nil),              // 102: Cmd.JobUpdateGuildCmd
	(*RenameQueryGuildCmd)(nil),            // 103: Cmd.RenameQueryGuildCmd
	(*GuildCityInfo)(nil),                  // 104: Cmd.GuildCityInfo
	(*QueryGuildCityInfoGuildCmd)(nil),     // 105: Cmd.QueryGuildCityInfoGuildCmd
	(*CityActionGuildCmd)(nil),             // 106: Cmd.CityActionGuildCmd
	(*IconInfo)(nil),                       // 107: Cmd.IconInfo
	(*GuildIconSyncGuildCmd)(nil),          // 108: Cmd.GuildIconSyncGuildCmd
	(*GuildIconAddGuildCmd)(nil),           // 109: Cmd.GuildIconAddGuildCmd
	(*GuildIconUploadGuildCmd)(nil),        // 110: Cmd.GuildIconUploadGuildCmd
	(*OpenFunctionGuildCmd)(nil),           // 111: Cmd.OpenFunctionGuildCmd
	(*BuildGuildCmd)(nil),                  // 112: Cmd.BuildGuildCmd
	(*SubmitMaterialGuildCmd)(nil),         // 113: Cmd.SubmitMaterialGuildCmd
	(*BuildingNtfGuildCmd)(nil),            // 114: Cmd.BuildingNtfGuildCmd
	(*BuildingSubmitCountGuildCmd)(nil),    // 115: Cmd.BuildingSubmitCountGuildCmd
	(*ChallengeUpdateNtfGuildCmd)(nil),     // 116: Cmd.ChallengeUpdateNtfGuildCmd
	(*WelfareNtfGuildCmd)(nil),             // 117: Cmd.WelfareNtfGuildCmd
	(*GetWelfareGuildCmd)(nil),             // 118: Cmd.GetWelfareGuildCmd
	(*BuildingLvupEffect)(nil),             // 119: Cmd.BuildingLvupEffect
	(*BuildingLvupEffGuildCmd)(nil),        // 120: Cmd.BuildingLvupEffGuildCmd
	(*ArtifactUpdateNtfGuildCmd)(nil),      // 121: Cmd.ArtifactUpdateNtfGuildCmd
	(*ArtifactProduceGuildCmd)(nil),        // 122: Cmd.ArtifactProduceGuildCmd
	(*ArtifactOptGuildCmd)(nil),            // 123: Cmd.ArtifactOptGuildCmd
	(*QueryGQuestGuildCmd)(nil),            // 124: Cmd.QueryGQuestGuildCmd
	(*TreasureActionGuildCmd)(nil),         // 125: Cmd.TreasureActionGuildCmd
	(*BuildingSubmitRankItem)(nil),         // 126: Cmd.BuildingSubmitRankItem
	(*QueryBuildingRankGuildCmd)(nil),      // 127: Cmd.QueryBuildingRankGuildCmd
	(*QueryTreasureResultGuildCmd)(nil),    // 128: Cmd.QueryTreasureResultGuildCmd
	(*CityShowInfo)(nil),                   // 129: Cmd.CityShowInfo
	(*QueryGCityShowInfoGuildCmd)(nil),     // 130: Cmd.QueryGCityShowInfoGuildCmd
	(*GvgOpenFireGuildCmd)(nil),            // 131: Cmd.GvgOpenFireGuildCmd
	(*EnterPunishTimeNtfGuildCmd)(nil),     // 132: Cmd.EnterPunishTimeNtfGuildCmd
	(*OpenRealtimeVoiceGuildCmd)(nil),      // 133: Cmd.OpenRealtimeVoiceGuildCmd
	(*SuperGvgGuildData)(nil),              // 134: Cmd.SuperGvgGuildData
	(*QuerySuperGvgDataGuildCmd)(nil),      // 135: Cmd.QuerySuperGvgDataGuildCmd
	(*QueryGvgGuildInfoGuildCmd)(nil),      // 136: Cmd.QueryGvgGuildInfoGuildCmd
	(*GvgRewardNtfGuildCmd)(nil),           // 137: Cmd.GvgRewardNtfGuildCmd
	(*GetGvgRewardGuildCmd)(nil),           // 138: Cmd.GetGvgRewardGuildCmd
	(*QueryCheckInfoGuildCmd)(nil),         // 139: Cmd.QueryCheckInfoGuildCmd
	(*GuildScoreInfo)(nil),                 // 140: Cmd.GuildScoreInfo
	(*QueryBifrostRankGuildCmd)(nil),       // 141: Cmd.QueryBifrostRankGuildCmd
	(*GuildMemberBifrostInfo)(nil),         // 142: Cmd.GuildMemberBifrostInfo
	(*QueryMemberBifrostInfoGuildCmd)(nil), // 143: Cmd.QueryMemberBifrostInfoGuildCmd
	(*UserAttr)(nil),                       // 144: Cmd.UserAttr
	(*ItemInfo)(nil),                       // 145: Cmd.ItemInfo
	(EGender)(0),                           // 146: Cmd.EGender
	(EProfession)(0),                       // 147: Cmd.EProfession
	(ESource)(0),                           // 148: Cmd.ESource
	(*QuestData)(nil),                      // 149: Cmd.QuestData
	(*ItemData)(nil),                       // 150: Cmd.ItemData
	(*DojoMsgBlob)(nil),                    // 151: Cmd.DojoMsgBlob
	(Command)(0),                           // 152: Cmd.Command
	(ERenameErrCode)(0),                    // 153: Cmd.ERenameErrCode
}
var file_GuildCmd_proto_depIdxs = []int32{
	3,   // 0: Cmd.GuildPrayCFG.type:type_name -> Cmd.EPrayType
	144, // 1: Cmd.GuildPrayCFG.attrs:type_name -> Cmd.UserAttr
	145, // 2: Cmd.GuildPrayCFG.costs:type_name -> Cmd.ItemInfo
	23,  // 3: Cmd.GuildMemberPray.cur:type_name -> Cmd.GuildPrayCFG
	23,  // 4: Cmd.GuildMemberPray.next:type_name -> Cmd.GuildPrayCFG
	24,  // 5: Cmd.BlobGuildPray.prays:type_name -> Cmd.GuildMemberPray
	83,  // 6: Cmd.BlobDonate.items:type_name -> Cmd.DonateItem
	6,   // 7: Cmd.UserGuildBuilding.type:type_name -> Cmd.EGuildBuilding
	27,  // 8: Cmd.BlobGuildBuilding.buildings:type_name -> Cmd.UserGuildBuilding
	146, // 9: Cmd.GuildMember.gender:type_name -> Cmd.EGender
	147, // 10: Cmd.GuildMember.profession:type_name -> Cmd.EProfession
	2,   // 11: Cmd.GuildMember.job:type_name -> Cmd.EGuildJob
	25,  // 12: Cmd.GuildMember.pray:type_name -> Cmd.BlobGuildPray
	26,  // 13: Cmd.GuildMember.donate:type_name -> Cmd.BlobDonate
	28,  // 14: Cmd.GuildMember.building:type_name -> Cmd.BlobGuildBuilding
	29,  // 15: Cmd.BlobGuildMember.members:type_name -> Cmd.GuildMember
	146, // 16: Cmd.GuildApply.gender:type_name -> Cmd.EGender
	147, // 17: Cmd.GuildApply.profession:type_name -> Cmd.EProfession
	31,  // 18: Cmd.BlobGuildApply.applys:type_name -> Cmd.GuildApply
	2,   // 19: Cmd.GuildJob.job:type_name -> Cmd.EGuildJob
	6,   // 20: Cmd.GuildBuilding.type:type_name -> Cmd.EGuildBuilding
	35,  // 21: Cmd.GuildBuilding.materials:type_name -> Cmd.GuildBuildMaterial
	35,  // 22: Cmd.GuildBuilding.restmaterials:type_name -> Cmd.GuildBuildMaterial
	36,  // 23: Cmd.GuildBuildingData.buildings:type_name -> Cmd.GuildBuilding
	38,  // 24: Cmd.GuildChallengeData.challenges:type_name -> Cmd.GuildChallenge
	7,   // 25: Cmd.GuildWelfareItem.type:type_name -> Cmd.EGuildWelfare
	148, // 26: Cmd.GuildWelfareItem.source:type_name -> Cmd.ESource
	40,  // 27: Cmd.GuildWelfare.items:type_name -> Cmd.GuildWelfareItem
	42,  // 28: Cmd.GuildArtifact.items:type_name -> Cmd.GuildArtifactItem
	43,  // 29: Cmd.GuildArtifact.datas:type_name -> Cmd.GuildArtifactData
	149, // 30: Cmd.GQuest.datas:type_name -> Cmd.QuestData
	45,  // 31: Cmd.BlobGQuest.quests:type_name -> Cmd.GQuest
	150, // 32: Cmd.TreasureItem.datas:type_name -> Cmd.ItemData
	8,   // 33: Cmd.TreasureResult.state:type_name -> Cmd.ETreasureState
	49,  // 34: Cmd.TreasureResult.items:type_name -> Cmd.TreasureItem
	48,  // 35: Cmd.BlobGuildTreasure.treasures:type_name -> Cmd.GuildTreasure
	50,  // 36: Cmd.BlobGuildTreasure.result:type_name -> Cmd.TreasureResult
	33,  // 37: Cmd.BlobGuildMisc.job:type_name -> Cmd.GuildJob
	34,  // 38: Cmd.BlobGuildMisc.quest:type_name -> Cmd.GuildQuest
	151, // 39: Cmd.BlobGuildMisc.dojomsg:type_name -> Cmd.DojoMsgBlob
	37,  // 40: Cmd.BlobGuildMisc.building:type_name -> Cmd.GuildBuildingData
	39,  // 41: Cmd.BlobGuildMisc.challenge:type_name -> Cmd.GuildChallengeData
	41,  // 42: Cmd.BlobGuildMisc.welfare:type_name -> Cmd.GuildWelfare
	44,  // 43: Cmd.BlobGuildMisc.artifact:type_name -> Cmd.GuildArtifact
	46,  // 44: Cmd.BlobGuildMisc.quests:type_name -> Cmd.BlobGQuest
	51,  // 45: Cmd.BlobGuildMisc.treasures:type_name -> Cmd.BlobGuildTreasure
	47,  // 46: Cmd.BlobGuildMisc.gvg:type_name -> Cmd.BlobGGvg
	52,  // 47: Cmd.BlobGuildMisc.active_members:type_name -> Cmd.GuildActiveMember
	145, // 48: Cmd.BlobGuildPack.item:type_name -> Cmd.ItemInfo
	150, // 49: Cmd.BlobGuildPack.data:type_name -> Cmd.ItemData
	97,  // 50: Cmd.BlobGuildEvent.events:type_name -> Cmd.GuildEvent
	148, // 51: Cmd.GuildPhoto.source:type_name -> Cmd.ESource
	56,  // 52: Cmd.PhotoFrame.photo:type_name -> Cmd.GuildPhoto
	57,  // 53: Cmd.BlobGuildPhoto.frames:type_name -> Cmd.PhotoFrame
	146, // 54: Cmd.GuildSummaryData.chairmangender:type_name -> Cmd.EGender
	59,  // 55: Cmd.GuildData.summary:type_name -> Cmd.GuildSummaryData
	29,  // 56: Cmd.GuildData.members:type_name -> Cmd.GuildMember
	31,  // 57: Cmd.GuildData.applys:type_name -> Cmd.GuildApply
	33,  // 58: Cmd.GuildData.jobs:type_name -> Cmd.GuildJob
	38,  // 59: Cmd.GuildData.challenges:type_name -> Cmd.GuildChallenge
	152, // 60: Cmd.QueryGuildListGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 61: Cmd.QueryGuildListGuildCmd.param:type_name -> Cmd.GuildParam
	59,  // 62: Cmd.QueryGuildListGuildCmd.list:type_name -> Cmd.GuildSummaryData
	152, // 63: Cmd.CreateGuildGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 64: Cmd.CreateGuildGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 65: Cmd.EnterGuildGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 66: Cmd.EnterGuildGuildCmd.param:type_name -> Cmd.GuildParam
	60,  // 67: Cmd.EnterGuildGuildCmd.data:type_name -> Cmd.GuildData
	152, // 68: Cmd.GuildMemberUpdateGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 69: Cmd.GuildMemberUpdateGuildCmd.param:type_name -> Cmd.GuildParam
	29,  // 70: Cmd.GuildMemberUpdateGuildCmd.updates:type_name -> Cmd.GuildMember
	152, // 71: Cmd.GuildApplyUpdateGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 72: Cmd.GuildApplyUpdateGuildCmd.param:type_name -> Cmd.GuildParam
	31,  // 73: Cmd.GuildApplyUpdateGuildCmd.updates:type_name -> Cmd.GuildApply
	9,   // 74: Cmd.GuildDataUpdate.type:type_name -> Cmd.EGuildData
	152, // 75: Cmd.GuildDataUpdateGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 76: Cmd.GuildDataUpdateGuildCmd.param:type_name -> Cmd.GuildParam
	66,  // 77: Cmd.GuildDataUpdateGuildCmd.updates:type_name -> Cmd.GuildDataUpdate
	11,  // 78: Cmd.GuildMemberDataUpdate.type:type_name -> Cmd.EGuildMemberData
	152, // 79: Cmd.GuildMemberDataUpdateGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 80: Cmd.GuildMemberDataUpdateGuildCmd.param:type_name -> Cmd.GuildParam
	10,  // 81: Cmd.GuildMemberDataUpdateGuildCmd.type:type_name -> Cmd.EGuildList
	68,  // 82: Cmd.GuildMemberDataUpdateGuildCmd.updates:type_name -> Cmd.GuildMemberDataUpdate
	152, // 83: Cmd.ApplyGuildGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 84: Cmd.ApplyGuildGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 85: Cmd.ProcessApplyGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 86: Cmd.ProcessApplyGuildCmd.param:type_name -> Cmd.GuildParam
	12,  // 87: Cmd.ProcessApplyGuildCmd.action:type_name -> Cmd.EGuildAction
	152, // 88: Cmd.InviteMemberGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 89: Cmd.InviteMemberGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 90: Cmd.ProcessInviteGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 91: Cmd.ProcessInviteGuildCmd.param:type_name -> Cmd.GuildParam
	12,  // 92: Cmd.ProcessInviteGuildCmd.action:type_name -> Cmd.EGuildAction
	152, // 93: Cmd.SetGuildOptionGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 94: Cmd.SetGuildOptionGuildCmd.param:type_name -> Cmd.GuildParam
	33,  // 95: Cmd.SetGuildOptionGuildCmd.jobs:type_name -> Cmd.GuildJob
	152, // 96: Cmd.KickMemberGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 97: Cmd.KickMemberGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 98: Cmd.ChangeJobGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 99: Cmd.ChangeJobGuildCmd.param:type_name -> Cmd.GuildParam
	2,   // 100: Cmd.ChangeJobGuildCmd.job:type_name -> Cmd.EGuildJob
	152, // 101: Cmd.ExitGuildGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 102: Cmd.ExitGuildGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 103: Cmd.ExchangeChairGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 104: Cmd.ExchangeChairGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 105: Cmd.DismissGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 106: Cmd.DismissGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 107: Cmd.LevelupGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 108: Cmd.LevelupGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 109: Cmd.DonateGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 110: Cmd.DonateGuildCmd.param:type_name -> Cmd.GuildParam
	82,  // 111: Cmd.DonateItem.con:type_name -> Cmd.DonateReward
	82,  // 112: Cmd.DonateItem.asset:type_name -> Cmd.DonateReward
	152, // 113: Cmd.DonateListGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 114: Cmd.DonateListGuildCmd.param:type_name -> Cmd.GuildParam
	83,  // 115: Cmd.DonateListGuildCmd.items:type_name -> Cmd.DonateItem
	152, // 116: Cmd.UpdateDonateItemGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 117: Cmd.UpdateDonateItemGuildCmd.param:type_name -> Cmd.GuildParam
	83,  // 118: Cmd.UpdateDonateItemGuildCmd.item:type_name -> Cmd.DonateItem
	83,  // 119: Cmd.UpdateDonateItemGuildCmd.del:type_name -> Cmd.DonateItem
	152, // 120: Cmd.DonateFrameGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 121: Cmd.DonateFrameGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 122: Cmd.EnterTerritoryGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 123: Cmd.EnterTerritoryGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 124: Cmd.PrayGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 125: Cmd.PrayGuildCmd.param:type_name -> Cmd.GuildParam
	13,  // 126: Cmd.PrayGuildCmd.action:type_name -> Cmd.EPrayAction
	152, // 127: Cmd.GuildInfoNtf.cmd:type_name -> Cmd.Command
	0,   // 128: Cmd.GuildInfoNtf.param:type_name -> Cmd.GuildParam
	152, // 129: Cmd.GuildPrayNtfGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 130: Cmd.GuildPrayNtfGuildCmd.param:type_name -> Cmd.GuildParam
	24,  // 131: Cmd.GuildPrayNtfGuildCmd.prays:type_name -> Cmd.GuildMemberPray
	152, // 132: Cmd.LevelupEffectGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 133: Cmd.LevelupEffectGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 134: Cmd.QueryPackGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 135: Cmd.QueryPackGuildCmd.param:type_name -> Cmd.GuildParam
	150, // 136: Cmd.QueryPackGuildCmd.items:type_name -> Cmd.ItemData
	152, // 137: Cmd.PackUpdateGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 138: Cmd.PackUpdateGuildCmd.param:type_name -> Cmd.GuildParam
	150, // 139: Cmd.PackUpdateGuildCmd.updates:type_name -> Cmd.ItemData
	152, // 140: Cmd.ExchangeZoneGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 141: Cmd.ExchangeZoneGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 142: Cmd.ExchangeZoneNtfGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 143: Cmd.ExchangeZoneNtfGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 144: Cmd.ExchangeZoneAnswerGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 145: Cmd.ExchangeZoneAnswerGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 146: Cmd.QueryEventListGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 147: Cmd.QueryEventListGuildCmd.param:type_name -> Cmd.GuildParam
	97,  // 148: Cmd.QueryEventListGuildCmd.events:type_name -> Cmd.GuildEvent
	152, // 149: Cmd.NewEventGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 150: Cmd.NewEventGuildCmd.param:type_name -> Cmd.GuildParam
	97,  // 151: Cmd.NewEventGuildCmd.event:type_name -> Cmd.GuildEvent
	152, // 152: Cmd.FrameStatusGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 153: Cmd.FrameStatusGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 154: Cmd.ModifyAuthGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 155: Cmd.ModifyAuthGuildCmd.param:type_name -> Cmd.GuildParam
	14,  // 156: Cmd.ModifyAuthGuildCmd.modify:type_name -> Cmd.EModify
	2,   // 157: Cmd.ModifyAuthGuildCmd.job:type_name -> Cmd.EGuildJob
	5,   // 158: Cmd.ModifyAuthGuildCmd.auth:type_name -> Cmd.EAuth
	152, // 159: Cmd.JobUpdateGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 160: Cmd.JobUpdateGuildCmd.param:type_name -> Cmd.GuildParam
	33,  // 161: Cmd.JobUpdateGuildCmd.job:type_name -> Cmd.GuildJob
	152, // 162: Cmd.RenameQueryGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 163: Cmd.RenameQueryGuildCmd.param:type_name -> Cmd.GuildParam
	153, // 164: Cmd.RenameQueryGuildCmd.code:type_name -> Cmd.ERenameErrCode
	152, // 165: Cmd.QueryGuildCityInfoGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 166: Cmd.QueryGuildCityInfoGuildCmd.param:type_name -> Cmd.GuildParam
	104, // 167: Cmd.QueryGuildCityInfoGuildCmd.infos:type_name -> Cmd.GuildCityInfo
	152, // 168: Cmd.CityActionGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 169: Cmd.CityActionGuildCmd.param:type_name -> Cmd.GuildParam
	16,  // 170: Cmd.CityActionGuildCmd.action:type_name -> Cmd.ECityAction
	17,  // 171: Cmd.IconInfo.state:type_name -> Cmd.EIconState
	152, // 172: Cmd.GuildIconSyncGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 173: Cmd.GuildIconSyncGuildCmd.param:type_name -> Cmd.GuildParam
	107, // 174: Cmd.GuildIconSyncGuildCmd.infos:type_name -> Cmd.IconInfo
	152, // 175: Cmd.GuildIconAddGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 176: Cmd.GuildIconAddGuildCmd.param:type_name -> Cmd.GuildParam
	17,  // 177: Cmd.GuildIconAddGuildCmd.state:type_name -> Cmd.EIconState
	152, // 178: Cmd.GuildIconUploadGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 179: Cmd.GuildIconUploadGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 180: Cmd.OpenFunctionGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 181: Cmd.OpenFunctionGuildCmd.param:type_name -> Cmd.GuildParam
	4,   // 182: Cmd.OpenFunctionGuildCmd.func:type_name -> Cmd.EGuildFunction
	152, // 183: Cmd.BuildGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 184: Cmd.BuildGuildCmd.param:type_name -> Cmd.GuildParam
	6,   // 185: Cmd.BuildGuildCmd.building:type_name -> Cmd.EGuildBuilding
	152, // 186: Cmd.SubmitMaterialGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 187: Cmd.SubmitMaterialGuildCmd.param:type_name -> Cmd.GuildParam
	6,   // 188: Cmd.SubmitMaterialGuildCmd.building:type_name -> Cmd.EGuildBuilding
	152, // 189: Cmd.BuildingNtfGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 190: Cmd.BuildingNtfGuildCmd.param:type_name -> Cmd.GuildParam
	36,  // 191: Cmd.BuildingNtfGuildCmd.buildings:type_name -> Cmd.GuildBuilding
	152, // 192: Cmd.BuildingSubmitCountGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 193: Cmd.BuildingSubmitCountGuildCmd.param:type_name -> Cmd.GuildParam
	6,   // 194: Cmd.BuildingSubmitCountGuildCmd.type:type_name -> Cmd.EGuildBuilding
	152, // 195: Cmd.ChallengeUpdateNtfGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 196: Cmd.ChallengeUpdateNtfGuildCmd.param:type_name -> Cmd.GuildParam
	38,  // 197: Cmd.ChallengeUpdateNtfGuildCmd.updates:type_name -> Cmd.GuildChallenge
	38,  // 198: Cmd.ChallengeUpdateNtfGuildCmd.dels:type_name -> Cmd.GuildChallenge
	152, // 199: Cmd.WelfareNtfGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 200: Cmd.WelfareNtfGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 201: Cmd.GetWelfareGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 202: Cmd.GetWelfareGuildCmd.param:type_name -> Cmd.GuildParam
	6,   // 203: Cmd.BuildingLvupEffect.type:type_name -> Cmd.EGuildBuilding
	152, // 204: Cmd.BuildingLvupEffGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 205: Cmd.BuildingLvupEffGuildCmd.param:type_name -> Cmd.GuildParam
	119, // 206: Cmd.BuildingLvupEffGuildCmd.effects:type_name -> Cmd.BuildingLvupEffect
	152, // 207: Cmd.ArtifactUpdateNtfGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 208: Cmd.ArtifactUpdateNtfGuildCmd.param:type_name -> Cmd.GuildParam
	42,  // 209: Cmd.ArtifactUpdateNtfGuildCmd.itemupdates:type_name -> Cmd.GuildArtifactItem
	43,  // 210: Cmd.ArtifactUpdateNtfGuildCmd.dataupdates:type_name -> Cmd.GuildArtifactData
	152, // 211: Cmd.ArtifactProduceGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 212: Cmd.ArtifactProduceGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 213: Cmd.ArtifactOptGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 214: Cmd.ArtifactOptGuildCmd.param:type_name -> Cmd.GuildParam
	18,  // 215: Cmd.ArtifactOptGuildCmd.opt:type_name -> Cmd.EArtifactOptType
	152, // 216: Cmd.QueryGQuestGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 217: Cmd.QueryGQuestGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 218: Cmd.TreasureActionGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 219: Cmd.TreasureActionGuildCmd.param:type_name -> Cmd.GuildParam
	20,  // 220: Cmd.TreasureActionGuildCmd.action:type_name -> Cmd.ETreasureAction
	21,  // 221: Cmd.TreasureActionGuildCmd.point:type_name -> Cmd.ETreasurePoint
	48,  // 222: Cmd.TreasureActionGuildCmd.treasure:type_name -> Cmd.GuildTreasure
	152, // 223: Cmd.QueryBuildingRankGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 224: Cmd.QueryBuildingRankGuildCmd.param:type_name -> Cmd.GuildParam
	6,   // 225: Cmd.QueryBuildingRankGuildCmd.type:type_name -> Cmd.EGuildBuilding
	126, // 226: Cmd.QueryBuildingRankGuildCmd.items:type_name -> Cmd.BuildingSubmitRankItem
	152, // 227: Cmd.QueryTreasureResultGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 228: Cmd.QueryTreasureResultGuildCmd.param:type_name -> Cmd.GuildParam
	50,  // 229: Cmd.QueryTreasureResultGuildCmd.result:type_name -> Cmd.TreasureResult
	22,  // 230: Cmd.CityShowInfo.state:type_name -> Cmd.EGCityState
	152, // 231: Cmd.QueryGCityShowInfoGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 232: Cmd.QueryGCityShowInfoGuildCmd.param:type_name -> Cmd.GuildParam
	129, // 233: Cmd.QueryGCityShowInfoGuildCmd.infos:type_name -> Cmd.CityShowInfo
	152, // 234: Cmd.GvgOpenFireGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 235: Cmd.GvgOpenFireGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 236: Cmd.EnterPunishTimeNtfGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 237: Cmd.EnterPunishTimeNtfGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 238: Cmd.OpenRealtimeVoiceGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 239: Cmd.OpenRealtimeVoiceGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 240: Cmd.QuerySuperGvgDataGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 241: Cmd.QuerySuperGvgDataGuildCmd.param:type_name -> Cmd.GuildParam
	134, // 242: Cmd.QuerySuperGvgDataGuildCmd.datas:type_name -> Cmd.SuperGvgGuildData
	152, // 243: Cmd.QueryGvgGuildInfoGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 244: Cmd.QueryGvgGuildInfoGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 245: Cmd.GvgRewardNtfGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 246: Cmd.GvgRewardNtfGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 247: Cmd.GetGvgRewardGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 248: Cmd.GetGvgRewardGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 249: Cmd.QueryCheckInfoGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 250: Cmd.QueryCheckInfoGuildCmd.param:type_name -> Cmd.GuildParam
	152, // 251: Cmd.QueryBifrostRankGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 252: Cmd.QueryBifrostRankGuildCmd.param:type_name -> Cmd.GuildParam
	140, // 253: Cmd.QueryBifrostRankGuildCmd.info:type_name -> Cmd.GuildScoreInfo
	152, // 254: Cmd.QueryMemberBifrostInfoGuildCmd.cmd:type_name -> Cmd.Command
	0,   // 255: Cmd.QueryMemberBifrostInfoGuildCmd.param:type_name -> Cmd.GuildParam
	142, // 256: Cmd.QueryMemberBifrostInfoGuildCmd.infos:type_name -> Cmd.GuildMemberBifrostInfo
	257, // [257:257] is the sub-list for method output_type
	257, // [257:257] is the sub-list for method input_type
	257, // [257:257] is the sub-list for extension type_name
	257, // [257:257] is the sub-list for extension extendee
	0,   // [0:257] is the sub-list for field type_name
}

func init() { file_GuildCmd_proto_init() }
func file_GuildCmd_proto_init() {
	if File_GuildCmd_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	file_SceneItem_proto_init()
	file_SceneUser_proto_init()
	file_SceneUser2_proto_init()
	file_SceneQuest_proto_init()
	file_Dojo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_GuildCmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildPrayCFG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMemberPray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobGuildPray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobDonate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGuildBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobGuildBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobGuildMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobGuildApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildQuest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBuildMaterial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBuilding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBuildingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildChallengeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildWelfareItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildWelfare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildArtifactItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildArtifactData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GQuest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobGQuest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobGGvg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildTreasure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobGuildTreasure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildActiveMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobGuildMisc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobGuildPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobGuildEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobGuildPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildSummaryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGuildListGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGuildGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterGuildGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMemberUpdateGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildApplyUpdateGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildDataUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildDataUpdateGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMemberDataUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMemberDataUpdateGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyGuildGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessApplyGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteMemberGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInviteGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGuildOptionGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickMemberGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeJobGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitGuildGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeChairGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DismissGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelupGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DonateGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DonateReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DonateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DonateListGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDonateItemGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DonateFrameGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterTerritoryGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrayGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildInfoNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildPrayNtfGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelupEffectGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPackGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackUpdateGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeZoneGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeZoneNtfGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeZoneAnswerGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryEventListGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewEventGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameStatusGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyAuthGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobUpdateGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameQueryGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildCityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGuildCityInfoGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityActionGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IconInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildIconSyncGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildIconAddGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildIconUploadGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenFunctionGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitMaterialGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingNtfGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingSubmitCountGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeUpdateNtfGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WelfareNtfGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWelfareGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingLvupEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingLvupEffGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactUpdateNtfGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactProduceGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactOptGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGQuestGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasureActionGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingSubmitRankItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBuildingRankGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTreasureResultGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityShowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGCityShowInfoGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgOpenFireGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterPunishTimeNtfGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenRealtimeVoiceGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperGvgGuildData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySuperGvgDataGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGvgGuildInfoGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgRewardNtfGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGvgRewardGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCheckInfoGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildScoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBifrostRankGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMemberBifrostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GuildCmd_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMemberBifrostInfoGuildCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GuildCmd_proto_rawDesc,
			NumEnums:      23,
			NumMessages:   121,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GuildCmd_proto_goTypes,
		DependencyIndexes: file_GuildCmd_proto_depIdxs,
		EnumInfos:         file_GuildCmd_proto_enumTypes,
		MessageInfos:      file_GuildCmd_proto_msgTypes,
	}.Build()
	File_GuildCmd_proto = out.File
	file_GuildCmd_proto_rawDesc = nil
	file_GuildCmd_proto_goTypes = nil
	file_GuildCmd_proto_depIdxs = nil
}
