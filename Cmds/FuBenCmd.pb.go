// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: FuBenCmd.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FuBenParam int32

const (
	FuBenParam_TRACK_FUBEN_USER_CMD             FuBenParam = 1
	FuBenParam_FAIL_FUBEN_USER_CMD              FuBenParam = 2
	FuBenParam_LEAVE_FUBEN_USER_CMD             FuBenParam = 3
	FuBenParam_SUCCESS_FUBEN_USER_CMD           FuBenParam = 4
	FuBenParam_WORLD_STAGE_USER_CMD             FuBenParam = 5
	FuBenParam_SUB_STAGE_USER_CMD               FuBenParam = 6
	FuBenParam_START_STAGE_USER_CMD             FuBenParam = 7
	FuBenParam_GET_REWARD_STAGE_USER_CMD        FuBenParam = 8
	FuBenParam_STAGE_STEP_STAR_USER_CMD         FuBenParam = 9
	FuBenParam_JOIN_FUBEN_USER_CMD              FuBenParam = 10
	FuBenParam_MONSTER_COUNT_USER_CMD           FuBenParam = 11
	FuBenParam_FUBEN_STEP_SYNC                  FuBenParam = 12
	FuBenParam_FUBEN_GOAL_SYNC                  FuBenParam = 13
	FuBenParam_FUBEN_CLEAR_SYNC                 FuBenParam = 15
	FuBenParam_GUILD_RAID_USER_INFO             FuBenParam = 16
	FuBenParam_GUILD_RAID_GATE_OPT              FuBenParam = 17
	FuBenParam_GUILD_FIRE_INFO                  FuBenParam = 18
	FuBenParam_GUILD_FIRE_STOP                  FuBenParam = 19
	FuBenParam_GUILD_FIRE_DANGER                FuBenParam = 20
	FuBenParam_GUILD_FIRE_METALHP               FuBenParam = 21
	FuBenParam_GUILD_FIRE_CALM                  FuBenParam = 22
	FuBenParam_GUILD_FIRE_CHANGE_GUILD          FuBenParam = 23
	FuBenParam_GUILD_FIRE_RESTART               FuBenParam = 24
	FuBenParam_GUILD_FIRE_STATUS                FuBenParam = 25
	FuBenParam_GVG_DATA_SYNC_CMD                FuBenParam = 26
	FuBenParam_GVG_DATA_UPDATE_CMD              FuBenParam = 27
	FuBenParam_GUILD_FIRE_CHANGE_GUILD_NAME     FuBenParam = 28
	FuBenParam_MVPBATTLE_SYNC_MVPINFO           FuBenParam = 29
	FuBenParam_MVPBATTLE_BOSS_DIE               FuBenParam = 30
	FuBenParam_FUBEN_USERNUM_COUNT              FuBenParam = 31
	FuBenParam_SUPERGVG_INFO_SYNC               FuBenParam = 32
	FuBenParam_SUPERGVG_TOWERINFO_UPDATE        FuBenParam = 33
	FuBenParam_SUPERGVG_METALINFO_UPDATE        FuBenParam = 34
	FuBenParam_SUPERGVG_QUERY_TOWERINFO         FuBenParam = 35
	FuBenParam_SUPERGVG_REWARD_INFO             FuBenParam = 36
	FuBenParam_SUPERGVG_QUERY_USER_DATA         FuBenParam = 37
	FuBenParam_MVPBATTLE_END_REPORT             FuBenParam = 38
	FuBenParam_SUPERGVG_METAL_DIE               FuBenParam = 39
	FuBenParam_INVITE_SUMMON_DEADBOSS           FuBenParam = 40
	FuBenParam_REPLY_SUMMON_DEADBOSS            FuBenParam = 41
	FuBenParam_QUERY_RAID_TEAMPWS_USERINFO      FuBenParam = 42
	FuBenParam_TEAMPWS_END_REPORT               FuBenParam = 43
	FuBenParam_TEAMPWS_SYNC_INFO                FuBenParam = 44
	FuBenParam_TEAMPWS_SELECT_MAGIC             FuBenParam = 45
	FuBenParam_TEAMPWS_UPDATE_MAGIC             FuBenParam = 46
	FuBenParam_TEAMPWS_UPDATE_INFO              FuBenParam = 47
	FuBenParam_EXIT_RAID_CMD                    FuBenParam = 48
	FuBenParam_BEGIN_FIRE_FUBENCMD              FuBenParam = 49
	FuBenParam_TEAMEXP_RAID_REPORT              FuBenParam = 50
	FuBenParam_TEAMEXP_BUY_ITEM                 FuBenParam = 51
	FuBenParam_TEAMEXP_SYNC_CMD                 FuBenParam = 52
	FuBenParam_TEAM_RELIVE_COUNT                FuBenParam = 53
	FuBenParam_TEAM_GROUP_RAID_CHIP             FuBenParam = 54
	FuBenParam_TEAM_GROUP_RAID_QUERY_INFO       FuBenParam = 55
	FuBenParam_TEAMEXP_QUERY_INFO               FuBenParam = 56
	FuBenParam_TEAM_GROUP_RAID_STATE            FuBenParam = 57
	FuBenParam_KUMAMOTO_OPER_CMD                FuBenParam = 58
	FuBenParam_TEAM_GROUP_FOURTH_QUERY          FuBenParam = 59
	FuBenParam_TEAM_GROUP_FOURTH_UPDATE         FuBenParam = 60
	FuBenParam_TEAM_GROUP_FOURTH_GOOUTER        FuBenParam = 61
	FuBenParam_RAID_STAGE_SYNC                  FuBenParam = 62
	FuBenParam_THANKSGIVING_MONSTER_NUM         FuBenParam = 63
	FuBenParam_OTHELLO_POINT_OCCUPY_POWER       FuBenParam = 64
	FuBenParam_OTHELLO_SYNC_INFO                FuBenParam = 65
	FuBenParam_QUERY_RAID_OTHELLO_USERINFO      FuBenParam = 66
	FuBenParam_OTHELLO_END_REPORT               FuBenParam = 67
	FuBenParam_ROGUELIKE_SYNC_UNLOCKSCENES      FuBenParam = 68
	FuBenParam_TRANSFERFIGHT_CHOOSE             FuBenParam = 69
	FuBenParam_TRANSFERFIGHT_RANK               FuBenParam = 70
	FuBenParam_TRANSFERFIGHT_END                FuBenParam = 71
	FuBenParam_TWELVEPVP_DATA_SYNC              FuBenParam = 72
	FuBenParam_TWELVEPVP_ITEM_SYNC              FuBenParam = 73
	FuBenParam_TWELVEPVP_ITEM_UPDATE            FuBenParam = 74
	FuBenParam_TWELVEPVP_SHOP_UPDATE            FuBenParam = 75
	FuBenParam_TWELVEPVP_QUEST_QUERY            FuBenParam = 76
	FuBenParam_TWELVEPVP_GROUP_INFO_QUERY       FuBenParam = 77
	FuBenParam_TWELVEPVP_RESULT                 FuBenParam = 78
	FuBenParam_TWELVEPVP_BUILDING_HP_UPDATE     FuBenParam = 79
	FuBenParam_TWELVEPVP_QUERY_UI_OPER          FuBenParam = 80
	FuBenParam_TWELVEPVP_USE_ITEM               FuBenParam = 81
	FuBenParam_INVITE_ROLL_RAID_REWARD          FuBenParam = 82
	FuBenParam_REPLY_ROLL_RAID_REARD            FuBenParam = 83
	FuBenParam_TEAMMEMBER_ROLL_PROCESS          FuBenParam = 84
	FuBenParam_PRE_REPLY_ROLL_RAID_REARD        FuBenParam = 85
	FuBenParam_RELIVE_CD                        FuBenParam = 86
	FuBenParam_POS_SYNC                         FuBenParam = 87
	FuBenParam_REQ_ENTER_TOWERPRIVATE           FuBenParam = 88
	FuBenParam_TOWERPRIVATE_LAYINFO             FuBenParam = 89
	FuBenParam_TOWERPRIVATE_LAYER_COUNTDOWN_NTF FuBenParam = 90
	FuBenParam_FUBEN_RESULT_NTF                 FuBenParam = 91
	FuBenParam_ENDTIME_SYNC                     FuBenParam = 92
	FuBenParam_RESULT_SYNC                      FuBenParam = 93
	FuBenParam_COMODO_PHASE                     FuBenParam = 97
	FuBenParam_COMODO_STAT                      FuBenParam = 98
	FuBenParam_TEAMPWS_STATE_SYNC               FuBenParam = 99
	FuBenParam_OBSERVER_FLASH                   FuBenParam = 100
	FuBenParam_OBSERVER_ATTACH                  FuBenParam = 101
	FuBenParam_OBSERVER_SELECT                  FuBenParam = 102
	FuBenParam_OB_HPSP_UPDATE                   FuBenParam = 104
	FuBenParam_OB_PLAYER_OFFLINE                FuBenParam = 105
	FuBenParam_MULTI_BOSS_PHASE                 FuBenParam = 106
	FuBenParam_MULTI_BOSS_STAT                  FuBenParam = 107
	FuBenParam_OB_CAMERA_MOVE_PREPARE           FuBenParam = 108
	FuBenParam_OB_CAMERA_MOVE_END               FuBenParam = 109
)

// Enum value maps for FuBenParam.
var (
	FuBenParam_name = map[int32]string{
		1:   "TRACK_FUBEN_USER_CMD",
		2:   "FAIL_FUBEN_USER_CMD",
		3:   "LEAVE_FUBEN_USER_CMD",
		4:   "SUCCESS_FUBEN_USER_CMD",
		5:   "WORLD_STAGE_USER_CMD",
		6:   "SUB_STAGE_USER_CMD",
		7:   "START_STAGE_USER_CMD",
		8:   "GET_REWARD_STAGE_USER_CMD",
		9:   "STAGE_STEP_STAR_USER_CMD",
		10:  "JOIN_FUBEN_USER_CMD",
		11:  "MONSTER_COUNT_USER_CMD",
		12:  "FUBEN_STEP_SYNC",
		13:  "FUBEN_GOAL_SYNC",
		15:  "FUBEN_CLEAR_SYNC",
		16:  "GUILD_RAID_USER_INFO",
		17:  "GUILD_RAID_GATE_OPT",
		18:  "GUILD_FIRE_INFO",
		19:  "GUILD_FIRE_STOP",
		20:  "GUILD_FIRE_DANGER",
		21:  "GUILD_FIRE_METALHP",
		22:  "GUILD_FIRE_CALM",
		23:  "GUILD_FIRE_CHANGE_GUILD",
		24:  "GUILD_FIRE_RESTART",
		25:  "GUILD_FIRE_STATUS",
		26:  "GVG_DATA_SYNC_CMD",
		27:  "GVG_DATA_UPDATE_CMD",
		28:  "GUILD_FIRE_CHANGE_GUILD_NAME",
		29:  "MVPBATTLE_SYNC_MVPINFO",
		30:  "MVPBATTLE_BOSS_DIE",
		31:  "FUBEN_USERNUM_COUNT",
		32:  "SUPERGVG_INFO_SYNC",
		33:  "SUPERGVG_TOWERINFO_UPDATE",
		34:  "SUPERGVG_METALINFO_UPDATE",
		35:  "SUPERGVG_QUERY_TOWERINFO",
		36:  "SUPERGVG_REWARD_INFO",
		37:  "SUPERGVG_QUERY_USER_DATA",
		38:  "MVPBATTLE_END_REPORT",
		39:  "SUPERGVG_METAL_DIE",
		40:  "INVITE_SUMMON_DEADBOSS",
		41:  "REPLY_SUMMON_DEADBOSS",
		42:  "QUERY_RAID_TEAMPWS_USERINFO",
		43:  "TEAMPWS_END_REPORT",
		44:  "TEAMPWS_SYNC_INFO",
		45:  "TEAMPWS_SELECT_MAGIC",
		46:  "TEAMPWS_UPDATE_MAGIC",
		47:  "TEAMPWS_UPDATE_INFO",
		48:  "EXIT_RAID_CMD",
		49:  "BEGIN_FIRE_FUBENCMD",
		50:  "TEAMEXP_RAID_REPORT",
		51:  "TEAMEXP_BUY_ITEM",
		52:  "TEAMEXP_SYNC_CMD",
		53:  "TEAM_RELIVE_COUNT",
		54:  "TEAM_GROUP_RAID_CHIP",
		55:  "TEAM_GROUP_RAID_QUERY_INFO",
		56:  "TEAMEXP_QUERY_INFO",
		57:  "TEAM_GROUP_RAID_STATE",
		58:  "KUMAMOTO_OPER_CMD",
		59:  "TEAM_GROUP_FOURTH_QUERY",
		60:  "TEAM_GROUP_FOURTH_UPDATE",
		61:  "TEAM_GROUP_FOURTH_GOOUTER",
		62:  "RAID_STAGE_SYNC",
		63:  "THANKSGIVING_MONSTER_NUM",
		64:  "OTHELLO_POINT_OCCUPY_POWER",
		65:  "OTHELLO_SYNC_INFO",
		66:  "QUERY_RAID_OTHELLO_USERINFO",
		67:  "OTHELLO_END_REPORT",
		68:  "ROGUELIKE_SYNC_UNLOCKSCENES",
		69:  "TRANSFERFIGHT_CHOOSE",
		70:  "TRANSFERFIGHT_RANK",
		71:  "TRANSFERFIGHT_END",
		72:  "TWELVEPVP_DATA_SYNC",
		73:  "TWELVEPVP_ITEM_SYNC",
		74:  "TWELVEPVP_ITEM_UPDATE",
		75:  "TWELVEPVP_SHOP_UPDATE",
		76:  "TWELVEPVP_QUEST_QUERY",
		77:  "TWELVEPVP_GROUP_INFO_QUERY",
		78:  "TWELVEPVP_RESULT",
		79:  "TWELVEPVP_BUILDING_HP_UPDATE",
		80:  "TWELVEPVP_QUERY_UI_OPER",
		81:  "TWELVEPVP_USE_ITEM",
		82:  "INVITE_ROLL_RAID_REWARD",
		83:  "REPLY_ROLL_RAID_REARD",
		84:  "TEAMMEMBER_ROLL_PROCESS",
		85:  "PRE_REPLY_ROLL_RAID_REARD",
		86:  "RELIVE_CD",
		87:  "POS_SYNC",
		88:  "REQ_ENTER_TOWERPRIVATE",
		89:  "TOWERPRIVATE_LAYINFO",
		90:  "TOWERPRIVATE_LAYER_COUNTDOWN_NTF",
		91:  "FUBEN_RESULT_NTF",
		92:  "ENDTIME_SYNC",
		93:  "RESULT_SYNC",
		97:  "COMODO_PHASE",
		98:  "COMODO_STAT",
		99:  "TEAMPWS_STATE_SYNC",
		100: "OBSERVER_FLASH",
		101: "OBSERVER_ATTACH",
		102: "OBSERVER_SELECT",
		104: "OB_HPSP_UPDATE",
		105: "OB_PLAYER_OFFLINE",
		106: "MULTI_BOSS_PHASE",
		107: "MULTI_BOSS_STAT",
		108: "OB_CAMERA_MOVE_PREPARE",
		109: "OB_CAMERA_MOVE_END",
	}
	FuBenParam_value = map[string]int32{
		"TRACK_FUBEN_USER_CMD":             1,
		"FAIL_FUBEN_USER_CMD":              2,
		"LEAVE_FUBEN_USER_CMD":             3,
		"SUCCESS_FUBEN_USER_CMD":           4,
		"WORLD_STAGE_USER_CMD":             5,
		"SUB_STAGE_USER_CMD":               6,
		"START_STAGE_USER_CMD":             7,
		"GET_REWARD_STAGE_USER_CMD":        8,
		"STAGE_STEP_STAR_USER_CMD":         9,
		"JOIN_FUBEN_USER_CMD":              10,
		"MONSTER_COUNT_USER_CMD":           11,
		"FUBEN_STEP_SYNC":                  12,
		"FUBEN_GOAL_SYNC":                  13,
		"FUBEN_CLEAR_SYNC":                 15,
		"GUILD_RAID_USER_INFO":             16,
		"GUILD_RAID_GATE_OPT":              17,
		"GUILD_FIRE_INFO":                  18,
		"GUILD_FIRE_STOP":                  19,
		"GUILD_FIRE_DANGER":                20,
		"GUILD_FIRE_METALHP":               21,
		"GUILD_FIRE_CALM":                  22,
		"GUILD_FIRE_CHANGE_GUILD":          23,
		"GUILD_FIRE_RESTART":               24,
		"GUILD_FIRE_STATUS":                25,
		"GVG_DATA_SYNC_CMD":                26,
		"GVG_DATA_UPDATE_CMD":              27,
		"GUILD_FIRE_CHANGE_GUILD_NAME":     28,
		"MVPBATTLE_SYNC_MVPINFO":           29,
		"MVPBATTLE_BOSS_DIE":               30,
		"FUBEN_USERNUM_COUNT":              31,
		"SUPERGVG_INFO_SYNC":               32,
		"SUPERGVG_TOWERINFO_UPDATE":        33,
		"SUPERGVG_METALINFO_UPDATE":        34,
		"SUPERGVG_QUERY_TOWERINFO":         35,
		"SUPERGVG_REWARD_INFO":             36,
		"SUPERGVG_QUERY_USER_DATA":         37,
		"MVPBATTLE_END_REPORT":             38,
		"SUPERGVG_METAL_DIE":               39,
		"INVITE_SUMMON_DEADBOSS":           40,
		"REPLY_SUMMON_DEADBOSS":            41,
		"QUERY_RAID_TEAMPWS_USERINFO":      42,
		"TEAMPWS_END_REPORT":               43,
		"TEAMPWS_SYNC_INFO":                44,
		"TEAMPWS_SELECT_MAGIC":             45,
		"TEAMPWS_UPDATE_MAGIC":             46,
		"TEAMPWS_UPDATE_INFO":              47,
		"EXIT_RAID_CMD":                    48,
		"BEGIN_FIRE_FUBENCMD":              49,
		"TEAMEXP_RAID_REPORT":              50,
		"TEAMEXP_BUY_ITEM":                 51,
		"TEAMEXP_SYNC_CMD":                 52,
		"TEAM_RELIVE_COUNT":                53,
		"TEAM_GROUP_RAID_CHIP":             54,
		"TEAM_GROUP_RAID_QUERY_INFO":       55,
		"TEAMEXP_QUERY_INFO":               56,
		"TEAM_GROUP_RAID_STATE":            57,
		"KUMAMOTO_OPER_CMD":                58,
		"TEAM_GROUP_FOURTH_QUERY":          59,
		"TEAM_GROUP_FOURTH_UPDATE":         60,
		"TEAM_GROUP_FOURTH_GOOUTER":        61,
		"RAID_STAGE_SYNC":                  62,
		"THANKSGIVING_MONSTER_NUM":         63,
		"OTHELLO_POINT_OCCUPY_POWER":       64,
		"OTHELLO_SYNC_INFO":                65,
		"QUERY_RAID_OTHELLO_USERINFO":      66,
		"OTHELLO_END_REPORT":               67,
		"ROGUELIKE_SYNC_UNLOCKSCENES":      68,
		"TRANSFERFIGHT_CHOOSE":             69,
		"TRANSFERFIGHT_RANK":               70,
		"TRANSFERFIGHT_END":                71,
		"TWELVEPVP_DATA_SYNC":              72,
		"TWELVEPVP_ITEM_SYNC":              73,
		"TWELVEPVP_ITEM_UPDATE":            74,
		"TWELVEPVP_SHOP_UPDATE":            75,
		"TWELVEPVP_QUEST_QUERY":            76,
		"TWELVEPVP_GROUP_INFO_QUERY":       77,
		"TWELVEPVP_RESULT":                 78,
		"TWELVEPVP_BUILDING_HP_UPDATE":     79,
		"TWELVEPVP_QUERY_UI_OPER":          80,
		"TWELVEPVP_USE_ITEM":               81,
		"INVITE_ROLL_RAID_REWARD":          82,
		"REPLY_ROLL_RAID_REARD":            83,
		"TEAMMEMBER_ROLL_PROCESS":          84,
		"PRE_REPLY_ROLL_RAID_REARD":        85,
		"RELIVE_CD":                        86,
		"POS_SYNC":                         87,
		"REQ_ENTER_TOWERPRIVATE":           88,
		"TOWERPRIVATE_LAYINFO":             89,
		"TOWERPRIVATE_LAYER_COUNTDOWN_NTF": 90,
		"FUBEN_RESULT_NTF":                 91,
		"ENDTIME_SYNC":                     92,
		"RESULT_SYNC":                      93,
		"COMODO_PHASE":                     97,
		"COMODO_STAT":                      98,
		"TEAMPWS_STATE_SYNC":               99,
		"OBSERVER_FLASH":                   100,
		"OBSERVER_ATTACH":                  101,
		"OBSERVER_SELECT":                  102,
		"OB_HPSP_UPDATE":                   104,
		"OB_PLAYER_OFFLINE":                105,
		"MULTI_BOSS_PHASE":                 106,
		"MULTI_BOSS_STAT":                  107,
		"OB_CAMERA_MOVE_PREPARE":           108,
		"OB_CAMERA_MOVE_END":               109,
	}
)

func (x FuBenParam) Enum() *FuBenParam {
	p := new(FuBenParam)
	*p = x
	return p
}

func (x FuBenParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FuBenParam) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[0].Descriptor()
}

func (FuBenParam) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[0]
}

func (x FuBenParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FuBenParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FuBenParam(num)
	return nil
}

// Deprecated: Use FuBenParam.Descriptor instead.
func (FuBenParam) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{0}
}

type ERaidType int32

const (
	ERaidType_ERAIDTYPE_MIN                    ERaidType = 0
	ERaidType_ERAIDTYPE_FERRISWHEEL            ERaidType = 1
	ERaidType_ERAIDTYPE_NORMAL                 ERaidType = 2
	ERaidType_ERAIDTYPE_EXCHANGE               ERaidType = 3
	ERaidType_ERAIDTYPE_TOWER                  ERaidType = 4
	ERaidType_ERAIDTYPE_LABORATORY             ERaidType = 5
	ERaidType_ERAIDTYPE_EXCHANGEGALLERY        ERaidType = 6
	ERaidType_ERAIDTYPE_SEAL                   ERaidType = 7
	ERaidType_ERAIDTYPE_RAIDTEMP2              ERaidType = 8
	ERaidType_ERAIDTYPE_DOJO                   ERaidType = 9
	ERaidType_ERAIDTYPE_GUILD                  ERaidType = 10
	ERaidType_ERAIDTYPE_RAIDTEMP4              ERaidType = 11
	ERaidType_ERAIDTYPE_ITEMIMAGE              ERaidType = 12
	ERaidType_ERAIDTYPE_GUILDRAID              ERaidType = 13
	ERaidType_ERAIDTYPE_GUILDFIRE              ERaidType = 14
	ERaidType_ERAIDTYPE_PVP_LLH                ERaidType = 21
	ERaidType_ERAIDTYPE_PVP_SMZL               ERaidType = 22
	ERaidType_ERAIDTYPE_PVP_HLJS               ERaidType = 23
	ERaidType_ERAIDTYPE_DATELAND               ERaidType = 24
	ERaidType_ERAIDTYPE_PVP_POLLY              ERaidType = 25
	ERaidType_ERAIDTYPE_WEDDING                ERaidType = 26
	ERaidType_ERAIDTYPE_DIVORCE_ROLLER_COASTER ERaidType = 27
	ERaidType_ERAIDTYPE_PVECARD                ERaidType = 28
	ERaidType_ERAIDTYPE_MVPBATTLE              ERaidType = 29
	ERaidType_ERAIDTYPE_SUPERGVG               ERaidType = 30
	ERaidType_ERAIDTYPE_ALTMAN                 ERaidType = 31
	ERaidType_ERAIDTYPE_TEAMPWS                ERaidType = 32
	ERaidType_ERAIDTYPE_TEAMEXP                ERaidType = 34
	ERaidType_ERAIDTYPE_THANATOS               ERaidType = 35
	ERaidType_ERAIDTYPE_THANATOS_MID           ERaidType = 36
	ERaidType_ERAIDTYPE_HOUSE                  ERaidType = 37
	ERaidType_ERAIDTYPE_THANATOS_SCENE3        ERaidType = 38
	ERaidType_ERAIDTYPE_KUMAMOTO               ERaidType = 39
	ERaidType_ERAIDTYPE_THANATOS_FOURTH        ERaidType = 40
	ERaidType_ERAIDTYPE_GARDEN                 ERaidType = 41
	ERaidType_ERAIDTYPE_THANKSGIVING           ERaidType = 42
	ERaidType_ERAIDTYPE_HEADWEAR               ERaidType = 43
	ERaidType_ERAIDTYPE_OTHELLO                ERaidType = 44
	ERaidType_ERAIDTYPE_SPRING                 ERaidType = 45
	ERaidType_ERAIDTYPE_ROGUELIKE              ERaidType = 46
	ERaidType_ERAIDTYPE_MONSTER_ANSWER         ERaidType = 47
	ERaidType_ERAIDTYPE_MONSTER_PHOTO          ERaidType = 48
	ERaidType_ERAIDTYPE_TRANSFERFIGHT          ERaidType = 49
	ERaidType_ERAIDTYPE_TWELVE_PVP             ERaidType = 50
	ERaidType_ERAIDTYPE_DEADBOSS               ERaidType = 51
	ERaidType_ERAIDTYPE_EINHERJAR              ERaidType = 52
	ERaidType_ERAIDTYPE_QTE_CHASING            ERaidType = 53
	ERaidType_ERAIDTYPE_SLAYERS                ERaidType = 54
	ERaidType_ERAIDTYPE_ENDLESSTOWER_PRIVATE   ERaidType = 55
	ERaidType_ERAIDTYPE_JANUARY                ERaidType = 56
	ERaidType_ERAIDTYPE_MAY                    ERaidType = 57
	ERaidType_ERAIDTYPE_COMODO_TEAM_RAID       ERaidType = 59
	ERaidType_ERAIDTYPE_MANOR                  ERaidType = 60
	ERaidType_ERAIDTYPE_DISNEY_MUSIC           ERaidType = 61
	ERaidType_ERAIDTYPE_SEVEN_ROYAL_TEAM_RAID  ERaidType = 62
	ERaidType_ERAIDTYPE_HEART_LOCK             ERaidType = 63
	ERaidType_ERAIDTYPE_MAX                    ERaidType = 64
)

// Enum value maps for ERaidType.
var (
	ERaidType_name = map[int32]string{
		0:  "ERAIDTYPE_MIN",
		1:  "ERAIDTYPE_FERRISWHEEL",
		2:  "ERAIDTYPE_NORMAL",
		3:  "ERAIDTYPE_EXCHANGE",
		4:  "ERAIDTYPE_TOWER",
		5:  "ERAIDTYPE_LABORATORY",
		6:  "ERAIDTYPE_EXCHANGEGALLERY",
		7:  "ERAIDTYPE_SEAL",
		8:  "ERAIDTYPE_RAIDTEMP2",
		9:  "ERAIDTYPE_DOJO",
		10: "ERAIDTYPE_GUILD",
		11: "ERAIDTYPE_RAIDTEMP4",
		12: "ERAIDTYPE_ITEMIMAGE",
		13: "ERAIDTYPE_GUILDRAID",
		14: "ERAIDTYPE_GUILDFIRE",
		21: "ERAIDTYPE_PVP_LLH",
		22: "ERAIDTYPE_PVP_SMZL",
		23: "ERAIDTYPE_PVP_HLJS",
		24: "ERAIDTYPE_DATELAND",
		25: "ERAIDTYPE_PVP_POLLY",
		26: "ERAIDTYPE_WEDDING",
		27: "ERAIDTYPE_DIVORCE_ROLLER_COASTER",
		28: "ERAIDTYPE_PVECARD",
		29: "ERAIDTYPE_MVPBATTLE",
		30: "ERAIDTYPE_SUPERGVG",
		31: "ERAIDTYPE_ALTMAN",
		32: "ERAIDTYPE_TEAMPWS",
		34: "ERAIDTYPE_TEAMEXP",
		35: "ERAIDTYPE_THANATOS",
		36: "ERAIDTYPE_THANATOS_MID",
		37: "ERAIDTYPE_HOUSE",
		38: "ERAIDTYPE_THANATOS_SCENE3",
		39: "ERAIDTYPE_KUMAMOTO",
		40: "ERAIDTYPE_THANATOS_FOURTH",
		41: "ERAIDTYPE_GARDEN",
		42: "ERAIDTYPE_THANKSGIVING",
		43: "ERAIDTYPE_HEADWEAR",
		44: "ERAIDTYPE_OTHELLO",
		45: "ERAIDTYPE_SPRING",
		46: "ERAIDTYPE_ROGUELIKE",
		47: "ERAIDTYPE_MONSTER_ANSWER",
		48: "ERAIDTYPE_MONSTER_PHOTO",
		49: "ERAIDTYPE_TRANSFERFIGHT",
		50: "ERAIDTYPE_TWELVE_PVP",
		51: "ERAIDTYPE_DEADBOSS",
		52: "ERAIDTYPE_EINHERJAR",
		53: "ERAIDTYPE_QTE_CHASING",
		54: "ERAIDTYPE_SLAYERS",
		55: "ERAIDTYPE_ENDLESSTOWER_PRIVATE",
		56: "ERAIDTYPE_JANUARY",
		57: "ERAIDTYPE_MAY",
		59: "ERAIDTYPE_COMODO_TEAM_RAID",
		60: "ERAIDTYPE_MANOR",
		61: "ERAIDTYPE_DISNEY_MUSIC",
		62: "ERAIDTYPE_SEVEN_ROYAL_TEAM_RAID",
		63: "ERAIDTYPE_HEART_LOCK",
		64: "ERAIDTYPE_MAX",
	}
	ERaidType_value = map[string]int32{
		"ERAIDTYPE_MIN":                    0,
		"ERAIDTYPE_FERRISWHEEL":            1,
		"ERAIDTYPE_NORMAL":                 2,
		"ERAIDTYPE_EXCHANGE":               3,
		"ERAIDTYPE_TOWER":                  4,
		"ERAIDTYPE_LABORATORY":             5,
		"ERAIDTYPE_EXCHANGEGALLERY":        6,
		"ERAIDTYPE_SEAL":                   7,
		"ERAIDTYPE_RAIDTEMP2":              8,
		"ERAIDTYPE_DOJO":                   9,
		"ERAIDTYPE_GUILD":                  10,
		"ERAIDTYPE_RAIDTEMP4":              11,
		"ERAIDTYPE_ITEMIMAGE":              12,
		"ERAIDTYPE_GUILDRAID":              13,
		"ERAIDTYPE_GUILDFIRE":              14,
		"ERAIDTYPE_PVP_LLH":                21,
		"ERAIDTYPE_PVP_SMZL":               22,
		"ERAIDTYPE_PVP_HLJS":               23,
		"ERAIDTYPE_DATELAND":               24,
		"ERAIDTYPE_PVP_POLLY":              25,
		"ERAIDTYPE_WEDDING":                26,
		"ERAIDTYPE_DIVORCE_ROLLER_COASTER": 27,
		"ERAIDTYPE_PVECARD":                28,
		"ERAIDTYPE_MVPBATTLE":              29,
		"ERAIDTYPE_SUPERGVG":               30,
		"ERAIDTYPE_ALTMAN":                 31,
		"ERAIDTYPE_TEAMPWS":                32,
		"ERAIDTYPE_TEAMEXP":                34,
		"ERAIDTYPE_THANATOS":               35,
		"ERAIDTYPE_THANATOS_MID":           36,
		"ERAIDTYPE_HOUSE":                  37,
		"ERAIDTYPE_THANATOS_SCENE3":        38,
		"ERAIDTYPE_KUMAMOTO":               39,
		"ERAIDTYPE_THANATOS_FOURTH":        40,
		"ERAIDTYPE_GARDEN":                 41,
		"ERAIDTYPE_THANKSGIVING":           42,
		"ERAIDTYPE_HEADWEAR":               43,
		"ERAIDTYPE_OTHELLO":                44,
		"ERAIDTYPE_SPRING":                 45,
		"ERAIDTYPE_ROGUELIKE":              46,
		"ERAIDTYPE_MONSTER_ANSWER":         47,
		"ERAIDTYPE_MONSTER_PHOTO":          48,
		"ERAIDTYPE_TRANSFERFIGHT":          49,
		"ERAIDTYPE_TWELVE_PVP":             50,
		"ERAIDTYPE_DEADBOSS":               51,
		"ERAIDTYPE_EINHERJAR":              52,
		"ERAIDTYPE_QTE_CHASING":            53,
		"ERAIDTYPE_SLAYERS":                54,
		"ERAIDTYPE_ENDLESSTOWER_PRIVATE":   55,
		"ERAIDTYPE_JANUARY":                56,
		"ERAIDTYPE_MAY":                    57,
		"ERAIDTYPE_COMODO_TEAM_RAID":       59,
		"ERAIDTYPE_MANOR":                  60,
		"ERAIDTYPE_DISNEY_MUSIC":           61,
		"ERAIDTYPE_SEVEN_ROYAL_TEAM_RAID":  62,
		"ERAIDTYPE_HEART_LOCK":             63,
		"ERAIDTYPE_MAX":                    64,
	}
)

func (x ERaidType) Enum() *ERaidType {
	p := new(ERaidType)
	*p = x
	return p
}

func (x ERaidType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERaidType) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[1].Descriptor()
}

func (ERaidType) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[1]
}

func (x ERaidType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERaidType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERaidType(num)
	return nil
}

// Deprecated: Use ERaidType.Descriptor instead.
func (ERaidType) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{1}
}

type EEndlessPrivateMonsterType int32

const (
	EEndlessPrivateMonsterType_EEENDLESSPRIVATE_MONSTER_NORMAL  EEndlessPrivateMonsterType = 0
	EEndlessPrivateMonsterType_EEENDLESSPRIVATE_MONSTER_ADVANCE EEndlessPrivateMonsterType = 1
)

// Enum value maps for EEndlessPrivateMonsterType.
var (
	EEndlessPrivateMonsterType_name = map[int32]string{
		0: "EEENDLESSPRIVATE_MONSTER_NORMAL",
		1: "EEENDLESSPRIVATE_MONSTER_ADVANCE",
	}
	EEndlessPrivateMonsterType_value = map[string]int32{
		"EEENDLESSPRIVATE_MONSTER_NORMAL":  0,
		"EEENDLESSPRIVATE_MONSTER_ADVANCE": 1,
	}
)

func (x EEndlessPrivateMonsterType) Enum() *EEndlessPrivateMonsterType {
	p := new(EEndlessPrivateMonsterType)
	*p = x
	return p
}

func (x EEndlessPrivateMonsterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEndlessPrivateMonsterType) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[2].Descriptor()
}

func (EEndlessPrivateMonsterType) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[2]
}

func (x EEndlessPrivateMonsterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEndlessPrivateMonsterType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEndlessPrivateMonsterType(num)
	return nil
}

// Deprecated: Use EEndlessPrivateMonsterType.Descriptor instead.
func (EEndlessPrivateMonsterType) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{2}
}

type EGuildGateState int32

const (
	EGuildGateState_EGUILDGATESTATE_MIN   EGuildGateState = 0
	EGuildGateState_EGUILDGATESTATE_LOCK  EGuildGateState = 1
	EGuildGateState_EGUILDGATESTATE_CLOSE EGuildGateState = 2
	EGuildGateState_EGUILDGATESTATE_OPEN  EGuildGateState = 3
)

// Enum value maps for EGuildGateState.
var (
	EGuildGateState_name = map[int32]string{
		0: "EGUILDGATESTATE_MIN",
		1: "EGUILDGATESTATE_LOCK",
		2: "EGUILDGATESTATE_CLOSE",
		3: "EGUILDGATESTATE_OPEN",
	}
	EGuildGateState_value = map[string]int32{
		"EGUILDGATESTATE_MIN":   0,
		"EGUILDGATESTATE_LOCK":  1,
		"EGUILDGATESTATE_CLOSE": 2,
		"EGUILDGATESTATE_OPEN":  3,
	}
)

func (x EGuildGateState) Enum() *EGuildGateState {
	p := new(EGuildGateState)
	*p = x
	return p
}

func (x EGuildGateState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGuildGateState) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[3].Descriptor()
}

func (EGuildGateState) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[3]
}

func (x EGuildGateState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGuildGateState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGuildGateState(num)
	return nil
}

// Deprecated: Use EGuildGateState.Descriptor instead.
func (EGuildGateState) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{3}
}

type EGuildGateOpt int32

const (
	EGuildGateOpt_EGUILDGATEOPT_UNLOCK     EGuildGateOpt = 1
	EGuildGateOpt_EGUILDGATEOPT_OPEN       EGuildGateOpt = 2
	EGuildGateOpt_EGUILDGATEOPT_ENTER      EGuildGateOpt = 3
	EGuildGateOpt_EGUILDGATEOPT_OPEN_ENTER EGuildGateOpt = 4
)

// Enum value maps for EGuildGateOpt.
var (
	EGuildGateOpt_name = map[int32]string{
		1: "EGUILDGATEOPT_UNLOCK",
		2: "EGUILDGATEOPT_OPEN",
		3: "EGUILDGATEOPT_ENTER",
		4: "EGUILDGATEOPT_OPEN_ENTER",
	}
	EGuildGateOpt_value = map[string]int32{
		"EGUILDGATEOPT_UNLOCK":     1,
		"EGUILDGATEOPT_OPEN":       2,
		"EGUILDGATEOPT_ENTER":      3,
		"EGUILDGATEOPT_OPEN_ENTER": 4,
	}
)

func (x EGuildGateOpt) Enum() *EGuildGateOpt {
	p := new(EGuildGateOpt)
	*p = x
	return p
}

func (x EGuildGateOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGuildGateOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[4].Descriptor()
}

func (EGuildGateOpt) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[4]
}

func (x EGuildGateOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGuildGateOpt) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGuildGateOpt(num)
	return nil
}

// Deprecated: Use EGuildGateOpt.Descriptor instead.
func (EGuildGateOpt) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{4}
}

type EGuildFireResult int32

const (
	EGuildFireResult_EGUILDFIRERESULT_DEF     EGuildFireResult = 1
	EGuildFireResult_EGUILDFIRERESULT_DEFSPEC EGuildFireResult = 2
	EGuildFireResult_EGUILDFIRERESULT_ATTACK  EGuildFireResult = 3
)

// Enum value maps for EGuildFireResult.
var (
	EGuildFireResult_name = map[int32]string{
		1: "EGUILDFIRERESULT_DEF",
		2: "EGUILDFIRERESULT_DEFSPEC",
		3: "EGUILDFIRERESULT_ATTACK",
	}
	EGuildFireResult_value = map[string]int32{
		"EGUILDFIRERESULT_DEF":     1,
		"EGUILDFIRERESULT_DEFSPEC": 2,
		"EGUILDFIRERESULT_ATTACK":  3,
	}
)

func (x EGuildFireResult) Enum() *EGuildFireResult {
	p := new(EGuildFireResult)
	*p = x
	return p
}

func (x EGuildFireResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGuildFireResult) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[5].Descriptor()
}

func (EGuildFireResult) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[5]
}

func (x EGuildFireResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGuildFireResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGuildFireResult(num)
	return nil
}

// Deprecated: Use EGuildFireResult.Descriptor instead.
func (EGuildFireResult) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{5}
}

type EGvgDataType int32

const (
	EGvgDataType_EGVGDATA_MIN        EGvgDataType = 0
	EGvgDataType_EGVGDATA_PARTINTIME EGvgDataType = 1
	EGvgDataType_EGVGDATA_KILLMON    EGvgDataType = 2
	EGvgDataType_EGVGDATA_RELIVE     EGvgDataType = 3
	EGvgDataType_EGVGDATA_EXPEL      EGvgDataType = 4
	EGvgDataType_EGVGDATA_DAMMETAL   EGvgDataType = 5
	EGvgDataType_EGVGDATA_KILLMETAL  EGvgDataType = 6
	EGvgDataType_EGVGDATA_KILLUSER   EGvgDataType = 7
	EGvgDataType_EGVGDATA_HONOR      EGvgDataType = 8
)

// Enum value maps for EGvgDataType.
var (
	EGvgDataType_name = map[int32]string{
		0: "EGVGDATA_MIN",
		1: "EGVGDATA_PARTINTIME",
		2: "EGVGDATA_KILLMON",
		3: "EGVGDATA_RELIVE",
		4: "EGVGDATA_EXPEL",
		5: "EGVGDATA_DAMMETAL",
		6: "EGVGDATA_KILLMETAL",
		7: "EGVGDATA_KILLUSER",
		8: "EGVGDATA_HONOR",
	}
	EGvgDataType_value = map[string]int32{
		"EGVGDATA_MIN":        0,
		"EGVGDATA_PARTINTIME": 1,
		"EGVGDATA_KILLMON":    2,
		"EGVGDATA_RELIVE":     3,
		"EGVGDATA_EXPEL":      4,
		"EGVGDATA_DAMMETAL":   5,
		"EGVGDATA_KILLMETAL":  6,
		"EGVGDATA_KILLUSER":   7,
		"EGVGDATA_HONOR":      8,
	}
)

func (x EGvgDataType) Enum() *EGvgDataType {
	p := new(EGvgDataType)
	*p = x
	return p
}

func (x EGvgDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGvgDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[6].Descriptor()
}

func (EGvgDataType) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[6]
}

func (x EGvgDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGvgDataType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGvgDataType(num)
	return nil
}

// Deprecated: Use EGvgDataType.Descriptor instead.
func (EGvgDataType) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{6}
}

type EGvgTowerState int32

const (
	EGvgTowerState_EGVGTOWERSTATE_INITFREE EGvgTowerState = 1
	EGvgTowerState_EGVGTOWERSTATE_OCCUPY   EGvgTowerState = 2
	EGvgTowerState_EGVGTOWERSTATE_FREE     EGvgTowerState = 3
)

// Enum value maps for EGvgTowerState.
var (
	EGvgTowerState_name = map[int32]string{
		1: "EGVGTOWERSTATE_INITFREE",
		2: "EGVGTOWERSTATE_OCCUPY",
		3: "EGVGTOWERSTATE_FREE",
	}
	EGvgTowerState_value = map[string]int32{
		"EGVGTOWERSTATE_INITFREE": 1,
		"EGVGTOWERSTATE_OCCUPY":   2,
		"EGVGTOWERSTATE_FREE":     3,
	}
)

func (x EGvgTowerState) Enum() *EGvgTowerState {
	p := new(EGvgTowerState)
	*p = x
	return p
}

func (x EGvgTowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGvgTowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[7].Descriptor()
}

func (EGvgTowerState) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[7]
}

func (x EGvgTowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGvgTowerState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGvgTowerState(num)
	return nil
}

// Deprecated: Use EGvgTowerState.Descriptor instead.
func (EGvgTowerState) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{7}
}

type EGvgTowerType int32

const (
	EGvgTowerType_EGVGTOWERTYPE_MIN  EGvgTowerType = 0
	EGvgTowerType_EGVGTOWERTYPE_CORE EGvgTowerType = 1
	EGvgTowerType_EGVGTOWERTYPE_WEST EGvgTowerType = 2
	EGvgTowerType_EGVGTOWERTYPE_EAST EGvgTowerType = 3
)

// Enum value maps for EGvgTowerType.
var (
	EGvgTowerType_name = map[int32]string{
		0: "EGVGTOWERTYPE_MIN",
		1: "EGVGTOWERTYPE_CORE",
		2: "EGVGTOWERTYPE_WEST",
		3: "EGVGTOWERTYPE_EAST",
	}
	EGvgTowerType_value = map[string]int32{
		"EGVGTOWERTYPE_MIN":  0,
		"EGVGTOWERTYPE_CORE": 1,
		"EGVGTOWERTYPE_WEST": 2,
		"EGVGTOWERTYPE_EAST": 3,
	}
)

func (x EGvgTowerType) Enum() *EGvgTowerType {
	p := new(EGvgTowerType)
	*p = x
	return p
}

func (x EGvgTowerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGvgTowerType) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[8].Descriptor()
}

func (EGvgTowerType) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[8]
}

func (x EGvgTowerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGvgTowerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGvgTowerType(num)
	return nil
}

// Deprecated: Use EGvgTowerType.Descriptor instead.
func (EGvgTowerType) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{8}
}

type EDeadBossDifficulty int32

const (
	EDeadBossDifficulty_EDEADBOSSDIFF_MIN    EDeadBossDifficulty = 0
	EDeadBossDifficulty_EDEADBOSSDIFF_NORMAL EDeadBossDifficulty = 2
	EDeadBossDifficulty_EDEADBOSSDIFF_HARD   EDeadBossDifficulty = 3
	EDeadBossDifficulty_EDEADBOSSDIFF_SUPER  EDeadBossDifficulty = 4
)

// Enum value maps for EDeadBossDifficulty.
var (
	EDeadBossDifficulty_name = map[int32]string{
		0: "EDEADBOSSDIFF_MIN",
		2: "EDEADBOSSDIFF_NORMAL",
		3: "EDEADBOSSDIFF_HARD",
		4: "EDEADBOSSDIFF_SUPER",
	}
	EDeadBossDifficulty_value = map[string]int32{
		"EDEADBOSSDIFF_MIN":    0,
		"EDEADBOSSDIFF_NORMAL": 2,
		"EDEADBOSSDIFF_HARD":   3,
		"EDEADBOSSDIFF_SUPER":  4,
	}
)

func (x EDeadBossDifficulty) Enum() *EDeadBossDifficulty {
	p := new(EDeadBossDifficulty)
	*p = x
	return p
}

func (x EDeadBossDifficulty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDeadBossDifficulty) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[9].Descriptor()
}

func (EDeadBossDifficulty) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[9]
}

func (x EDeadBossDifficulty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDeadBossDifficulty) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDeadBossDifficulty(num)
	return nil
}

// Deprecated: Use EDeadBossDifficulty.Descriptor instead.
func (EDeadBossDifficulty) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{9}
}

type ETeamPwsColor int32

const (
	ETeamPwsColor_ETEAMPWS_RED  ETeamPwsColor = 1
	ETeamPwsColor_ETEAMPWS_BLUE ETeamPwsColor = 2
)

// Enum value maps for ETeamPwsColor.
var (
	ETeamPwsColor_name = map[int32]string{
		1: "ETEAMPWS_RED",
		2: "ETEAMPWS_BLUE",
	}
	ETeamPwsColor_value = map[string]int32{
		"ETEAMPWS_RED":  1,
		"ETEAMPWS_BLUE": 2,
	}
)

func (x ETeamPwsColor) Enum() *ETeamPwsColor {
	p := new(ETeamPwsColor)
	*p = x
	return p
}

func (x ETeamPwsColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETeamPwsColor) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[10].Descriptor()
}

func (ETeamPwsColor) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[10]
}

func (x ETeamPwsColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETeamPwsColor) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETeamPwsColor(num)
	return nil
}

// Deprecated: Use ETeamPwsColor.Descriptor instead.
func (ETeamPwsColor) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{10}
}

type EMagicBallType int32

const (
	EMagicBallType_EMAGICBALL_MIN   EMagicBallType = 0
	EMagicBallType_EMAGICBALL_WIND  EMagicBallType = 1
	EMagicBallType_EMAGICBALL_EARTH EMagicBallType = 2
	EMagicBallType_EMAGICBALL_WATER EMagicBallType = 3
	EMagicBallType_EMAGICBALL_FIRE  EMagicBallType = 4
)

// Enum value maps for EMagicBallType.
var (
	EMagicBallType_name = map[int32]string{
		0: "EMAGICBALL_MIN",
		1: "EMAGICBALL_WIND",
		2: "EMAGICBALL_EARTH",
		3: "EMAGICBALL_WATER",
		4: "EMAGICBALL_FIRE",
	}
	EMagicBallType_value = map[string]int32{
		"EMAGICBALL_MIN":   0,
		"EMAGICBALL_WIND":  1,
		"EMAGICBALL_EARTH": 2,
		"EMAGICBALL_WATER": 3,
		"EMAGICBALL_FIRE":  4,
	}
)

func (x EMagicBallType) Enum() *EMagicBallType {
	p := new(EMagicBallType)
	*p = x
	return p
}

func (x EMagicBallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMagicBallType) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[11].Descriptor()
}

func (EMagicBallType) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[11]
}

func (x EMagicBallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMagicBallType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMagicBallType(num)
	return nil
}

// Deprecated: Use EMagicBallType.Descriptor instead.
func (EMagicBallType) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{11}
}

type EGroupRaidSceneState int32

const (
	EGroupRaidSceneState_EGROUPRAIDSCENE_MIN  EGroupRaidSceneState = 0
	EGroupRaidSceneState_EGROUPRAIDSCENE_FIRE EGroupRaidSceneState = 1
	EGroupRaidSceneState_EGROUPRAIDSCENE_OVER EGroupRaidSceneState = 2
)

// Enum value maps for EGroupRaidSceneState.
var (
	EGroupRaidSceneState_name = map[int32]string{
		0: "EGROUPRAIDSCENE_MIN",
		1: "EGROUPRAIDSCENE_FIRE",
		2: "EGROUPRAIDSCENE_OVER",
	}
	EGroupRaidSceneState_value = map[string]int32{
		"EGROUPRAIDSCENE_MIN":  0,
		"EGROUPRAIDSCENE_FIRE": 1,
		"EGROUPRAIDSCENE_OVER": 2,
	}
)

func (x EGroupRaidSceneState) Enum() *EGroupRaidSceneState {
	p := new(EGroupRaidSceneState)
	*p = x
	return p
}

func (x EGroupRaidSceneState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGroupRaidSceneState) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[12].Descriptor()
}

func (EGroupRaidSceneState) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[12]
}

func (x EGroupRaidSceneState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGroupRaidSceneState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGroupRaidSceneState(num)
	return nil
}

// Deprecated: Use EGroupRaidSceneState.Descriptor instead.
func (EGroupRaidSceneState) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{12}
}

type EKumamotoOper int32

const (
	EKumamotoOper_EKUMAMOTOOPER_CREATE EKumamotoOper = 1
	EKumamotoOper_EKUMAMOTOOPER_REWARD EKumamotoOper = 2
	EKumamotoOper_EKUMAMOTOOPER_SCORE  EKumamotoOper = 3
)

// Enum value maps for EKumamotoOper.
var (
	EKumamotoOper_name = map[int32]string{
		1: "EKUMAMOTOOPER_CREATE",
		2: "EKUMAMOTOOPER_REWARD",
		3: "EKUMAMOTOOPER_SCORE",
	}
	EKumamotoOper_value = map[string]int32{
		"EKUMAMOTOOPER_CREATE": 1,
		"EKUMAMOTOOPER_REWARD": 2,
		"EKUMAMOTOOPER_SCORE":  3,
	}
)

func (x EKumamotoOper) Enum() *EKumamotoOper {
	p := new(EKumamotoOper)
	*p = x
	return p
}

func (x EKumamotoOper) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EKumamotoOper) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[13].Descriptor()
}

func (EKumamotoOper) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[13]
}

func (x EKumamotoOper) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EKumamotoOper) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EKumamotoOper(num)
	return nil
}

// Deprecated: Use EKumamotoOper.Descriptor instead.
func (EKumamotoOper) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{13}
}

type ERollRaidRewardType int32

const (
	ERollRaidRewardType_EROLLRAIDREWARD_MIN                   ERollRaidRewardType = 0
	ERollRaidRewardType_EROLLRAIDREWARD_PVERAID               ERollRaidRewardType = 1
	ERollRaidRewardType_EROLLRAIDREWARD_GROUPRAID             ERollRaidRewardType = 2
	ERollRaidRewardType_EROLLRAIDREWARD_WORLDBOSS             ERollRaidRewardType = 3
	ERollRaidRewardType_EROLLRAIDREWARD_DEADBOSS              ERollRaidRewardType = 4
	ERollRaidRewardType_EROLLRAIDREWARD_GUILD                 ERollRaidRewardType = 5
	ERollRaidRewardType_EROLLRAIDREWARD_COMODO_TEAM_RAID      ERollRaidRewardType = 6
	ERollRaidRewardType_EROLLRAIDREWARD_SEVEN_ROYAL_TEAM_RAID ERollRaidRewardType = 7
)

// Enum value maps for ERollRaidRewardType.
var (
	ERollRaidRewardType_name = map[int32]string{
		0: "EROLLRAIDREWARD_MIN",
		1: "EROLLRAIDREWARD_PVERAID",
		2: "EROLLRAIDREWARD_GROUPRAID",
		3: "EROLLRAIDREWARD_WORLDBOSS",
		4: "EROLLRAIDREWARD_DEADBOSS",
		5: "EROLLRAIDREWARD_GUILD",
		6: "EROLLRAIDREWARD_COMODO_TEAM_RAID",
		7: "EROLLRAIDREWARD_SEVEN_ROYAL_TEAM_RAID",
	}
	ERollRaidRewardType_value = map[string]int32{
		"EROLLRAIDREWARD_MIN":                   0,
		"EROLLRAIDREWARD_PVERAID":               1,
		"EROLLRAIDREWARD_GROUPRAID":             2,
		"EROLLRAIDREWARD_WORLDBOSS":             3,
		"EROLLRAIDREWARD_DEADBOSS":              4,
		"EROLLRAIDREWARD_GUILD":                 5,
		"EROLLRAIDREWARD_COMODO_TEAM_RAID":      6,
		"EROLLRAIDREWARD_SEVEN_ROYAL_TEAM_RAID": 7,
	}
)

func (x ERollRaidRewardType) Enum() *ERollRaidRewardType {
	p := new(ERollRaidRewardType)
	*p = x
	return p
}

func (x ERollRaidRewardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERollRaidRewardType) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[14].Descriptor()
}

func (ERollRaidRewardType) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[14]
}

func (x ERollRaidRewardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERollRaidRewardType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERollRaidRewardType(num)
	return nil
}

// Deprecated: Use ERollRaidRewardType.Descriptor instead.
func (ERollRaidRewardType) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{14}
}

type EGroupCamp int32

const (
	EGroupCamp_EGROUPCAMP_MIN      EGroupCamp = 0
	EGroupCamp_EGROUPCAMP_RED      EGroupCamp = 1
	EGroupCamp_EGROUPCAMP_BLUE     EGroupCamp = 2
	EGroupCamp_EGROUPCAMP_OBSERVER EGroupCamp = 3
)

// Enum value maps for EGroupCamp.
var (
	EGroupCamp_name = map[int32]string{
		0: "EGROUPCAMP_MIN",
		1: "EGROUPCAMP_RED",
		2: "EGROUPCAMP_BLUE",
		3: "EGROUPCAMP_OBSERVER",
	}
	EGroupCamp_value = map[string]int32{
		"EGROUPCAMP_MIN":      0,
		"EGROUPCAMP_RED":      1,
		"EGROUPCAMP_BLUE":     2,
		"EGROUPCAMP_OBSERVER": 3,
	}
)

func (x EGroupCamp) Enum() *EGroupCamp {
	p := new(EGroupCamp)
	*p = x
	return p
}

func (x EGroupCamp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGroupCamp) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[15].Descriptor()
}

func (EGroupCamp) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[15]
}

func (x EGroupCamp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGroupCamp) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGroupCamp(num)
	return nil
}

// Deprecated: Use EGroupCamp.Descriptor instead.
func (EGroupCamp) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{15}
}

type ETwelvePvpDataType int32

const (
	ETwelvePvpDataType_ETWELVEPVP_DATA_MIN             ETwelvePvpDataType = 0
	ETwelvePvpDataType_ETWELVEPVP_DATA_CRYSTAL_EXP     ETwelvePvpDataType = 3
	ETwelvePvpDataType_ETWELVEPVP_DATA_GOLD            ETwelvePvpDataType = 4
	ETwelvePvpDataType_ETWELVEPVP_DATA_CAR_POINT       ETwelvePvpDataType = 5
	ETwelvePvpDataType_ETWELVEPVP_DATA_PUSH_PLAYER_NUM ETwelvePvpDataType = 6
	ETwelvePvpDataType_ETWELVEPVP_DATA_END_TIME        ETwelvePvpDataType = 7
	ETwelvePvpDataType_ETWELVEPVP_DATA_SHOP_CD         ETwelvePvpDataType = 8
	ETwelvePvpDataType_ETWELVEPVP_DATA_CAMP            ETwelvePvpDataType = 9
	ETwelvePvpDataType_ETWELVEPVP_DATA_BARRACK_HP      ETwelvePvpDataType = 10
	ETwelvePvpDataType_ETWELVEPVP_DATA_CRYSTAL_HP      ETwelvePvpDataType = 11
	ETwelvePvpDataType_ETWELVEPVP_DATA_PVP_TYPE        ETwelvePvpDataType = 12
	ETwelvePvpDataType_ETWELVEPVP_DATA_CRYSTAL_LEVEL   ETwelvePvpDataType = 13
	ETwelvePvpDataType_ETWELVEPVP_DATA_KILL_NUM        ETwelvePvpDataType = 14
	ETwelvePvpDataType_ETWELVEPVP_DATA_MAX             ETwelvePvpDataType = 15
)

// Enum value maps for ETwelvePvpDataType.
var (
	ETwelvePvpDataType_name = map[int32]string{
		0:  "ETWELVEPVP_DATA_MIN",
		3:  "ETWELVEPVP_DATA_CRYSTAL_EXP",
		4:  "ETWELVEPVP_DATA_GOLD",
		5:  "ETWELVEPVP_DATA_CAR_POINT",
		6:  "ETWELVEPVP_DATA_PUSH_PLAYER_NUM",
		7:  "ETWELVEPVP_DATA_END_TIME",
		8:  "ETWELVEPVP_DATA_SHOP_CD",
		9:  "ETWELVEPVP_DATA_CAMP",
		10: "ETWELVEPVP_DATA_BARRACK_HP",
		11: "ETWELVEPVP_DATA_CRYSTAL_HP",
		12: "ETWELVEPVP_DATA_PVP_TYPE",
		13: "ETWELVEPVP_DATA_CRYSTAL_LEVEL",
		14: "ETWELVEPVP_DATA_KILL_NUM",
		15: "ETWELVEPVP_DATA_MAX",
	}
	ETwelvePvpDataType_value = map[string]int32{
		"ETWELVEPVP_DATA_MIN":             0,
		"ETWELVEPVP_DATA_CRYSTAL_EXP":     3,
		"ETWELVEPVP_DATA_GOLD":            4,
		"ETWELVEPVP_DATA_CAR_POINT":       5,
		"ETWELVEPVP_DATA_PUSH_PLAYER_NUM": 6,
		"ETWELVEPVP_DATA_END_TIME":        7,
		"ETWELVEPVP_DATA_SHOP_CD":         8,
		"ETWELVEPVP_DATA_CAMP":            9,
		"ETWELVEPVP_DATA_BARRACK_HP":      10,
		"ETWELVEPVP_DATA_CRYSTAL_HP":      11,
		"ETWELVEPVP_DATA_PVP_TYPE":        12,
		"ETWELVEPVP_DATA_CRYSTAL_LEVEL":   13,
		"ETWELVEPVP_DATA_KILL_NUM":        14,
		"ETWELVEPVP_DATA_MAX":             15,
	}
)

func (x ETwelvePvpDataType) Enum() *ETwelvePvpDataType {
	p := new(ETwelvePvpDataType)
	*p = x
	return p
}

func (x ETwelvePvpDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETwelvePvpDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[16].Descriptor()
}

func (ETwelvePvpDataType) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[16]
}

func (x ETwelvePvpDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETwelvePvpDataType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETwelvePvpDataType(num)
	return nil
}

// Deprecated: Use ETwelvePvpDataType.Descriptor instead.
func (ETwelvePvpDataType) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{16}
}

type ETwelvePvpUI int32

const (
	ETwelvePvpUI_ETWELVEPVP_UI_MIN           ETwelvePvpUI = 0
	ETwelvePvpUI_ETWELVEPVP_UI_CRYSTAL       ETwelvePvpUI = 1
	ETwelvePvpUI_ETWELVEPVP_UI_SHOP          ETwelvePvpUI = 2
	ETwelvePvpUI_ETWELVEPVP_OBSERVER_UI_MIN  ETwelvePvpUI = 1000
	ETwelvePvpUI_ETWELVEPVP_OBSERVER_UI_ITEM ETwelvePvpUI = 1001
)

// Enum value maps for ETwelvePvpUI.
var (
	ETwelvePvpUI_name = map[int32]string{
		0:    "ETWELVEPVP_UI_MIN",
		1:    "ETWELVEPVP_UI_CRYSTAL",
		2:    "ETWELVEPVP_UI_SHOP",
		1000: "ETWELVEPVP_OBSERVER_UI_MIN",
		1001: "ETWELVEPVP_OBSERVER_UI_ITEM",
	}
	ETwelvePvpUI_value = map[string]int32{
		"ETWELVEPVP_UI_MIN":           0,
		"ETWELVEPVP_UI_CRYSTAL":       1,
		"ETWELVEPVP_UI_SHOP":          2,
		"ETWELVEPVP_OBSERVER_UI_MIN":  1000,
		"ETWELVEPVP_OBSERVER_UI_ITEM": 1001,
	}
)

func (x ETwelvePvpUI) Enum() *ETwelvePvpUI {
	p := new(ETwelvePvpUI)
	*p = x
	return p
}

func (x ETwelvePvpUI) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETwelvePvpUI) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[17].Descriptor()
}

func (ETwelvePvpUI) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[17]
}

func (x ETwelvePvpUI) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETwelvePvpUI) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETwelvePvpUI(num)
	return nil
}

// Deprecated: Use ETwelvePvpUI.Descriptor instead.
func (ETwelvePvpUI) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{17}
}

type EComodoTeamRaidBoss int32

const (
	EComodoTeamRaidBoss_ECOMODO_BOSS_MIN    EComodoTeamRaidBoss = 0
	EComodoTeamRaidBoss_ECOMODO_BOSS_DRAGON EComodoTeamRaidBoss = 1
	EComodoTeamRaidBoss_ECOMODO_BOSS_CHESS  EComodoTeamRaidBoss = 2
	EComodoTeamRaidBoss_ECOMODO_BOSS_HERO   EComodoTeamRaidBoss = 3
	EComodoTeamRaidBoss_ECOMODO_BOSS_MAX    EComodoTeamRaidBoss = 4
)

// Enum value maps for EComodoTeamRaidBoss.
var (
	EComodoTeamRaidBoss_name = map[int32]string{
		0: "ECOMODO_BOSS_MIN",
		1: "ECOMODO_BOSS_DRAGON",
		2: "ECOMODO_BOSS_CHESS",
		3: "ECOMODO_BOSS_HERO",
		4: "ECOMODO_BOSS_MAX",
	}
	EComodoTeamRaidBoss_value = map[string]int32{
		"ECOMODO_BOSS_MIN":    0,
		"ECOMODO_BOSS_DRAGON": 1,
		"ECOMODO_BOSS_CHESS":  2,
		"ECOMODO_BOSS_HERO":   3,
		"ECOMODO_BOSS_MAX":    4,
	}
)

func (x EComodoTeamRaidBoss) Enum() *EComodoTeamRaidBoss {
	p := new(EComodoTeamRaidBoss)
	*p = x
	return p
}

func (x EComodoTeamRaidBoss) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EComodoTeamRaidBoss) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[18].Descriptor()
}

func (EComodoTeamRaidBoss) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[18]
}

func (x EComodoTeamRaidBoss) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EComodoTeamRaidBoss) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EComodoTeamRaidBoss(num)
	return nil
}

// Deprecated: Use EComodoTeamRaidBoss.Descriptor instead.
func (EComodoTeamRaidBoss) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{18}
}

type EComodoTeamRaidPhase int32

const (
	EComodoTeamRaidPhase_ECOMODO_PHASE_MIN      EComodoTeamRaidPhase = 0
	EComodoTeamRaidPhase_ECOMODO_PHASE_DRAGON   EComodoTeamRaidPhase = 1
	EComodoTeamRaidPhase_ECOMODO_PHASE_CHESS    EComodoTeamRaidPhase = 2
	EComodoTeamRaidPhase_ECOMODO_PHASE_HERO     EComodoTeamRaidPhase = 3
	EComodoTeamRaidPhase_ECOMODO_PHASE_SAVE_NPC EComodoTeamRaidPhase = 4
)

// Enum value maps for EComodoTeamRaidPhase.
var (
	EComodoTeamRaidPhase_name = map[int32]string{
		0: "ECOMODO_PHASE_MIN",
		1: "ECOMODO_PHASE_DRAGON",
		2: "ECOMODO_PHASE_CHESS",
		3: "ECOMODO_PHASE_HERO",
		4: "ECOMODO_PHASE_SAVE_NPC",
	}
	EComodoTeamRaidPhase_value = map[string]int32{
		"ECOMODO_PHASE_MIN":      0,
		"ECOMODO_PHASE_DRAGON":   1,
		"ECOMODO_PHASE_CHESS":    2,
		"ECOMODO_PHASE_HERO":     3,
		"ECOMODO_PHASE_SAVE_NPC": 4,
	}
)

func (x EComodoTeamRaidPhase) Enum() *EComodoTeamRaidPhase {
	p := new(EComodoTeamRaidPhase)
	*p = x
	return p
}

func (x EComodoTeamRaidPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EComodoTeamRaidPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_FuBenCmd_proto_enumTypes[19].Descriptor()
}

func (EComodoTeamRaidPhase) Type() protoreflect.EnumType {
	return &file_FuBenCmd_proto_enumTypes[19]
}

func (x EComodoTeamRaidPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EComodoTeamRaidPhase) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EComodoTeamRaidPhase(num)
	return nil
}

// Deprecated: Use EComodoTeamRaidPhase.Descriptor instead.
func (EComodoTeamRaidPhase) EnumDescriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{19}
}

type TrackData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Star *uint32 `protobuf:"varint,1,opt,name=star" json:"star,omitempty"`
	Id   *uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (x *TrackData) Reset() {
	*x = TrackData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackData) ProtoMessage() {}

func (x *TrackData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackData.ProtoReflect.Descriptor instead.
func (*TrackData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{0}
}

func (x *TrackData) GetStar() uint32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

func (x *TrackData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type RaidPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaidID       *uint32      `protobuf:"varint,1,opt,name=RaidID,def=0" json:"RaidID,omitempty"`
	StarID       *uint32      `protobuf:"varint,2,opt,name=starID,def=0" json:"starID,omitempty"`
	Auto         *uint32      `protobuf:"varint,3,opt,name=Auto,def=0" json:"Auto,omitempty"`
	WhetherTrace *uint32      `protobuf:"varint,4,opt,name=WhetherTrace,def=0" json:"WhetherTrace,omitempty"`
	FinishJump   *uint32      `protobuf:"varint,9,opt,name=FinishJump,def=0" json:"FinishJump,omitempty"`
	FailJump     *uint32      `protobuf:"varint,10,opt,name=FailJump,def=0" json:"FailJump,omitempty"`
	DescInfo     *string      `protobuf:"bytes,5,opt,name=DescInfo" json:"DescInfo,omitempty"`
	Content      *string      `protobuf:"bytes,6,opt,name=Content" json:"Content,omitempty"`
	TraceInfo    *string      `protobuf:"bytes,7,opt,name=TraceInfo" json:"TraceInfo,omitempty"`
	Params       *ConfigParam `protobuf:"bytes,8,opt,name=params" json:"params,omitempty"`
}

// Default values for RaidPConfig fields.
const (
	Default_RaidPConfig_RaidID       = uint32(0)
	Default_RaidPConfig_StarID       = uint32(0)
	Default_RaidPConfig_Auto         = uint32(0)
	Default_RaidPConfig_WhetherTrace = uint32(0)
	Default_RaidPConfig_FinishJump   = uint32(0)
	Default_RaidPConfig_FailJump     = uint32(0)
)

func (x *RaidPConfig) Reset() {
	*x = RaidPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidPConfig) ProtoMessage() {}

func (x *RaidPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidPConfig.ProtoReflect.Descriptor instead.
func (*RaidPConfig) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{1}
}

func (x *RaidPConfig) GetRaidID() uint32 {
	if x != nil && x.RaidID != nil {
		return *x.RaidID
	}
	return Default_RaidPConfig_RaidID
}

func (x *RaidPConfig) GetStarID() uint32 {
	if x != nil && x.StarID != nil {
		return *x.StarID
	}
	return Default_RaidPConfig_StarID
}

func (x *RaidPConfig) GetAuto() uint32 {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return Default_RaidPConfig_Auto
}

func (x *RaidPConfig) GetWhetherTrace() uint32 {
	if x != nil && x.WhetherTrace != nil {
		return *x.WhetherTrace
	}
	return Default_RaidPConfig_WhetherTrace
}

func (x *RaidPConfig) GetFinishJump() uint32 {
	if x != nil && x.FinishJump != nil {
		return *x.FinishJump
	}
	return Default_RaidPConfig_FinishJump
}

func (x *RaidPConfig) GetFailJump() uint32 {
	if x != nil && x.FailJump != nil {
		return *x.FailJump
	}
	return Default_RaidPConfig_FailJump
}

func (x *RaidPConfig) GetDescInfo() string {
	if x != nil && x.DescInfo != nil {
		return *x.DescInfo
	}
	return ""
}

func (x *RaidPConfig) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *RaidPConfig) GetTraceInfo() string {
	if x != nil && x.TraceInfo != nil {
		return *x.TraceInfo
	}
	return ""
}

func (x *RaidPConfig) GetParams() *ConfigParam {
	if x != nil {
		return x.Params
	}
	return nil
}

type TrackFuBenUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=1" json:"param,omitempty"`
	Data    []*TrackData `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	Dmapid  *uint32      `protobuf:"varint,4,opt,name=dmapid" json:"dmapid,omitempty"`
	Endtime *uint32      `protobuf:"varint,5,opt,name=endtime" json:"endtime,omitempty"`
}

// Default values for TrackFuBenUserCmd fields.
const (
	Default_TrackFuBenUserCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_TrackFuBenUserCmd_Param = FuBenParam_TRACK_FUBEN_USER_CMD
)

func (x *TrackFuBenUserCmd) Reset() {
	*x = TrackFuBenUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackFuBenUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackFuBenUserCmd) ProtoMessage() {}

func (x *TrackFuBenUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackFuBenUserCmd.ProtoReflect.Descriptor instead.
func (*TrackFuBenUserCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{2}
}

func (x *TrackFuBenUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TrackFuBenUserCmd_Cmd
}

func (x *TrackFuBenUserCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TrackFuBenUserCmd_Param
}

func (x *TrackFuBenUserCmd) GetData() []*TrackData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TrackFuBenUserCmd) GetDmapid() uint32 {
	if x != nil && x.Dmapid != nil {
		return *x.Dmapid
	}
	return 0
}

func (x *TrackFuBenUserCmd) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

type FailFuBenUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=2" json:"param,omitempty"`
}

// Default values for FailFuBenUserCmd fields.
const (
	Default_FailFuBenUserCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_FailFuBenUserCmd_Param = FuBenParam_FAIL_FUBEN_USER_CMD
)

func (x *FailFuBenUserCmd) Reset() {
	*x = FailFuBenUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailFuBenUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailFuBenUserCmd) ProtoMessage() {}

func (x *FailFuBenUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailFuBenUserCmd.ProtoReflect.Descriptor instead.
func (*FailFuBenUserCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{3}
}

func (x *FailFuBenUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FailFuBenUserCmd_Cmd
}

func (x *FailFuBenUserCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FailFuBenUserCmd_Param
}

type LeaveFuBenUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=3" json:"param,omitempty"`
	Mapid *uint32     `protobuf:"varint,3,opt,name=mapid" json:"mapid,omitempty"`
}

// Default values for LeaveFuBenUserCmd fields.
const (
	Default_LeaveFuBenUserCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_LeaveFuBenUserCmd_Param = FuBenParam_LEAVE_FUBEN_USER_CMD
)

func (x *LeaveFuBenUserCmd) Reset() {
	*x = LeaveFuBenUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveFuBenUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveFuBenUserCmd) ProtoMessage() {}

func (x *LeaveFuBenUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveFuBenUserCmd.ProtoReflect.Descriptor instead.
func (*LeaveFuBenUserCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{4}
}

func (x *LeaveFuBenUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LeaveFuBenUserCmd_Cmd
}

func (x *LeaveFuBenUserCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LeaveFuBenUserCmd_Param
}

func (x *LeaveFuBenUserCmd) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return 0
}

type SuccessFuBenUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param  *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=4" json:"param,omitempty"`
	Type   *ERaidType  `protobuf:"varint,3,opt,name=type,enum=Cmd.ERaidType,def=0" json:"type,omitempty"`
	Param1 *uint32     `protobuf:"varint,4,opt,name=param1,def=0" json:"param1,omitempty"`
	Param2 *uint32     `protobuf:"varint,5,opt,name=param2,def=0" json:"param2,omitempty"`
	Param3 *uint32     `protobuf:"varint,6,opt,name=param3,def=0" json:"param3,omitempty"`
	Param4 *uint32     `protobuf:"varint,7,opt,name=param4,def=0" json:"param4,omitempty"`
}

// Default values for SuccessFuBenUserCmd fields.
const (
	Default_SuccessFuBenUserCmd_Cmd    = Command_FUBEN_PROTOCMD
	Default_SuccessFuBenUserCmd_Param  = FuBenParam_SUCCESS_FUBEN_USER_CMD
	Default_SuccessFuBenUserCmd_Type   = ERaidType_ERAIDTYPE_MIN
	Default_SuccessFuBenUserCmd_Param1 = uint32(0)
	Default_SuccessFuBenUserCmd_Param2 = uint32(0)
	Default_SuccessFuBenUserCmd_Param3 = uint32(0)
	Default_SuccessFuBenUserCmd_Param4 = uint32(0)
)

func (x *SuccessFuBenUserCmd) Reset() {
	*x = SuccessFuBenUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessFuBenUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessFuBenUserCmd) ProtoMessage() {}

func (x *SuccessFuBenUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessFuBenUserCmd.ProtoReflect.Descriptor instead.
func (*SuccessFuBenUserCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{5}
}

func (x *SuccessFuBenUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SuccessFuBenUserCmd_Cmd
}

func (x *SuccessFuBenUserCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SuccessFuBenUserCmd_Param
}

func (x *SuccessFuBenUserCmd) GetType() ERaidType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_SuccessFuBenUserCmd_Type
}

func (x *SuccessFuBenUserCmd) GetParam1() uint32 {
	if x != nil && x.Param1 != nil {
		return *x.Param1
	}
	return Default_SuccessFuBenUserCmd_Param1
}

func (x *SuccessFuBenUserCmd) GetParam2() uint32 {
	if x != nil && x.Param2 != nil {
		return *x.Param2
	}
	return Default_SuccessFuBenUserCmd_Param2
}

func (x *SuccessFuBenUserCmd) GetParam3() uint32 {
	if x != nil && x.Param3 != nil {
		return *x.Param3
	}
	return Default_SuccessFuBenUserCmd_Param3
}

func (x *SuccessFuBenUserCmd) GetParam4() uint32 {
	if x != nil && x.Param4 != nil {
		return *x.Param4
	}
	return Default_SuccessFuBenUserCmd_Param4
}

type WorldStageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Star    *uint32  `protobuf:"varint,2,opt,name=star" json:"star,omitempty"`
	GetList []uint32 `protobuf:"varint,3,rep,name=getList" json:"getList,omitempty"`
}

func (x *WorldStageItem) Reset() {
	*x = WorldStageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldStageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldStageItem) ProtoMessage() {}

func (x *WorldStageItem) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldStageItem.ProtoReflect.Descriptor instead.
func (*WorldStageItem) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{6}
}

func (x *WorldStageItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *WorldStageItem) GetStar() uint32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

func (x *WorldStageItem) GetGetList() []uint32 {
	if x != nil {
		return x.GetList
	}
	return nil
}

type StageStepItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stageid *uint32 `protobuf:"varint,1,opt,name=stageid" json:"stageid,omitempty"`
	Stepid  *uint32 `protobuf:"varint,2,opt,name=stepid" json:"stepid,omitempty"`
	Type    *uint32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
}

func (x *StageStepItem) Reset() {
	*x = StageStepItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageStepItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageStepItem) ProtoMessage() {}

func (x *StageStepItem) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageStepItem.ProtoReflect.Descriptor instead.
func (*StageStepItem) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{7}
}

func (x *StageStepItem) GetStageid() uint32 {
	if x != nil && x.Stageid != nil {
		return *x.Stageid
	}
	return 0
}

func (x *StageStepItem) GetStepid() uint32 {
	if x != nil && x.Stepid != nil {
		return *x.Stepid
	}
	return 0
}

func (x *StageStepItem) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type WorldStageUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=5" json:"param,omitempty"`
	List    []*WorldStageItem `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Curinfo []*StageStepItem  `protobuf:"bytes,4,rep,name=curinfo" json:"curinfo,omitempty"`
}

// Default values for WorldStageUserCmd fields.
const (
	Default_WorldStageUserCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_WorldStageUserCmd_Param = FuBenParam_WORLD_STAGE_USER_CMD
)

func (x *WorldStageUserCmd) Reset() {
	*x = WorldStageUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldStageUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldStageUserCmd) ProtoMessage() {}

func (x *WorldStageUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldStageUserCmd.ProtoReflect.Descriptor instead.
func (*WorldStageUserCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{8}
}

func (x *WorldStageUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_WorldStageUserCmd_Cmd
}

func (x *WorldStageUserCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_WorldStageUserCmd_Param
}

func (x *WorldStageUserCmd) GetList() []*WorldStageItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *WorldStageUserCmd) GetCurinfo() []*StageStepItem {
	if x != nil {
		return x.Curinfo
	}
	return nil
}

type StageNormalStepItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stepid *uint32 `protobuf:"varint,1,opt,name=stepid" json:"stepid,omitempty"`
	Star   *uint32 `protobuf:"varint,2,opt,name=star" json:"star,omitempty"`
}

func (x *StageNormalStepItem) Reset() {
	*x = StageNormalStepItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageNormalStepItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageNormalStepItem) ProtoMessage() {}

func (x *StageNormalStepItem) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageNormalStepItem.ProtoReflect.Descriptor instead.
func (*StageNormalStepItem) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{9}
}

func (x *StageNormalStepItem) GetStepid() uint32 {
	if x != nil && x.Stepid != nil {
		return *x.Stepid
	}
	return 0
}

func (x *StageNormalStepItem) GetStar() uint32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

type StageHardStepItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stepid        *uint32 `protobuf:"varint,1,opt,name=stepid" json:"stepid,omitempty"`
	Finish        *uint32 `protobuf:"varint,2,opt,name=finish" json:"finish,omitempty"`
	ChallengeTime *uint32 `protobuf:"varint,3,opt,name=challengeTime" json:"challengeTime,omitempty"`
}

func (x *StageHardStepItem) Reset() {
	*x = StageHardStepItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageHardStepItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageHardStepItem) ProtoMessage() {}

func (x *StageHardStepItem) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageHardStepItem.ProtoReflect.Descriptor instead.
func (*StageHardStepItem) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{10}
}

func (x *StageHardStepItem) GetStepid() uint32 {
	if x != nil && x.Stepid != nil {
		return *x.Stepid
	}
	return 0
}

func (x *StageHardStepItem) GetFinish() uint32 {
	if x != nil && x.Finish != nil {
		return *x.Finish
	}
	return 0
}

func (x *StageHardStepItem) GetChallengeTime() uint32 {
	if x != nil && x.ChallengeTime != nil {
		return *x.ChallengeTime
	}
	return 0
}

type StageStepUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command               `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param     *FuBenParam            `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=6" json:"param,omitempty"`
	Stageid   *uint32                `protobuf:"varint,3,opt,name=stageid" json:"stageid,omitempty"`
	Normalist []*StageNormalStepItem `protobuf:"bytes,4,rep,name=normalist" json:"normalist,omitempty"`
	Hardlist  []*StageHardStepItem   `protobuf:"bytes,5,rep,name=hardlist" json:"hardlist,omitempty"`
}

// Default values for StageStepUserCmd fields.
const (
	Default_StageStepUserCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_StageStepUserCmd_Param = FuBenParam_SUB_STAGE_USER_CMD
)

func (x *StageStepUserCmd) Reset() {
	*x = StageStepUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageStepUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageStepUserCmd) ProtoMessage() {}

func (x *StageStepUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageStepUserCmd.ProtoReflect.Descriptor instead.
func (*StageStepUserCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{11}
}

func (x *StageStepUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StageStepUserCmd_Cmd
}

func (x *StageStepUserCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StageStepUserCmd_Param
}

func (x *StageStepUserCmd) GetStageid() uint32 {
	if x != nil && x.Stageid != nil {
		return *x.Stageid
	}
	return 0
}

func (x *StageStepUserCmd) GetNormalist() []*StageNormalStepItem {
	if x != nil {
		return x.Normalist
	}
	return nil
}

func (x *StageStepUserCmd) GetHardlist() []*StageHardStepItem {
	if x != nil {
		return x.Hardlist
	}
	return nil
}

type StartStageUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=7" json:"param,omitempty"`
	Stageid *uint32     `protobuf:"varint,3,opt,name=stageid" json:"stageid,omitempty"`
	Stepid  *uint32     `protobuf:"varint,4,opt,name=stepid" json:"stepid,omitempty"`
	Type    *uint32     `protobuf:"varint,5,opt,name=type" json:"type,omitempty"`
}

// Default values for StartStageUserCmd fields.
const (
	Default_StartStageUserCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_StartStageUserCmd_Param = FuBenParam_START_STAGE_USER_CMD
)

func (x *StartStageUserCmd) Reset() {
	*x = StartStageUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartStageUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartStageUserCmd) ProtoMessage() {}

func (x *StartStageUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartStageUserCmd.ProtoReflect.Descriptor instead.
func (*StartStageUserCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{12}
}

func (x *StartStageUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StartStageUserCmd_Cmd
}

func (x *StartStageUserCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StartStageUserCmd_Param
}

func (x *StartStageUserCmd) GetStageid() uint32 {
	if x != nil && x.Stageid != nil {
		return *x.Stageid
	}
	return 0
}

func (x *StartStageUserCmd) GetStepid() uint32 {
	if x != nil && x.Stepid != nil {
		return *x.Stepid
	}
	return 0
}

func (x *StartStageUserCmd) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type GetRewardStageUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=8" json:"param,omitempty"`
	Stageid *uint32     `protobuf:"varint,3,opt,name=stageid" json:"stageid,omitempty"`
	Starid  *uint32     `protobuf:"varint,4,opt,name=starid" json:"starid,omitempty"`
}

// Default values for GetRewardStageUserCmd fields.
const (
	Default_GetRewardStageUserCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_GetRewardStageUserCmd_Param = FuBenParam_GET_REWARD_STAGE_USER_CMD
)

func (x *GetRewardStageUserCmd) Reset() {
	*x = GetRewardStageUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardStageUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardStageUserCmd) ProtoMessage() {}

func (x *GetRewardStageUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardStageUserCmd.ProtoReflect.Descriptor instead.
func (*GetRewardStageUserCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{13}
}

func (x *GetRewardStageUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GetRewardStageUserCmd_Cmd
}

func (x *GetRewardStageUserCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GetRewardStageUserCmd_Param
}

func (x *GetRewardStageUserCmd) GetStageid() uint32 {
	if x != nil && x.Stageid != nil {
		return *x.Stageid
	}
	return 0
}

func (x *GetRewardStageUserCmd) GetStarid() uint32 {
	if x != nil && x.Starid != nil {
		return *x.Starid
	}
	return 0
}

type StageStepStarUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=9" json:"param,omitempty"`
	Stageid *uint32     `protobuf:"varint,3,opt,name=stageid" json:"stageid,omitempty"`
	Stepid  *uint32     `protobuf:"varint,4,opt,name=stepid" json:"stepid,omitempty"`
	Star    *uint32     `protobuf:"varint,5,opt,name=star" json:"star,omitempty"`
	Type    *uint32     `protobuf:"varint,6,opt,name=type" json:"type,omitempty"`
}

// Default values for StageStepStarUserCmd fields.
const (
	Default_StageStepStarUserCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_StageStepStarUserCmd_Param = FuBenParam_STAGE_STEP_STAR_USER_CMD
)

func (x *StageStepStarUserCmd) Reset() {
	*x = StageStepStarUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageStepStarUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageStepStarUserCmd) ProtoMessage() {}

func (x *StageStepStarUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageStepStarUserCmd.ProtoReflect.Descriptor instead.
func (*StageStepStarUserCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{14}
}

func (x *StageStepStarUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StageStepStarUserCmd_Cmd
}

func (x *StageStepStarUserCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StageStepStarUserCmd_Param
}

func (x *StageStepStarUserCmd) GetStageid() uint32 {
	if x != nil && x.Stageid != nil {
		return *x.Stageid
	}
	return 0
}

func (x *StageStepStarUserCmd) GetStepid() uint32 {
	if x != nil && x.Stepid != nil {
		return *x.Stepid
	}
	return 0
}

func (x *StageStepStarUserCmd) GetStar() uint32 {
	if x != nil && x.Star != nil {
		return *x.Star
	}
	return 0
}

func (x *StageStepStarUserCmd) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type MonsterCountUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=11" json:"param,omitempty"`
	Num   *uint32     `protobuf:"varint,3,opt,name=num" json:"num,omitempty"`
}

// Default values for MonsterCountUserCmd fields.
const (
	Default_MonsterCountUserCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_MonsterCountUserCmd_Param = FuBenParam_MONSTER_COUNT_USER_CMD
)

func (x *MonsterCountUserCmd) Reset() {
	*x = MonsterCountUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonsterCountUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonsterCountUserCmd) ProtoMessage() {}

func (x *MonsterCountUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonsterCountUserCmd.ProtoReflect.Descriptor instead.
func (*MonsterCountUserCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{15}
}

func (x *MonsterCountUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MonsterCountUserCmd_Cmd
}

func (x *MonsterCountUserCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MonsterCountUserCmd_Param
}

func (x *MonsterCountUserCmd) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type FubenStepSyncCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=12" json:"param,omitempty"`
	Id      *uint32      `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Del     *bool        `protobuf:"varint,4,opt,name=del,def=0" json:"del,omitempty"`
	Groupid *uint32      `protobuf:"varint,6,opt,name=groupid,def=0" json:"groupid,omitempty"`
	Config  *RaidPConfig `protobuf:"bytes,5,opt,name=config" json:"config,omitempty"`
}

// Default values for FubenStepSyncCmd fields.
const (
	Default_FubenStepSyncCmd_Cmd     = Command_FUBEN_PROTOCMD
	Default_FubenStepSyncCmd_Param   = FuBenParam_FUBEN_STEP_SYNC
	Default_FubenStepSyncCmd_Id      = uint32(0)
	Default_FubenStepSyncCmd_Del     = bool(false)
	Default_FubenStepSyncCmd_Groupid = uint32(0)
)

func (x *FubenStepSyncCmd) Reset() {
	*x = FubenStepSyncCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FubenStepSyncCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FubenStepSyncCmd) ProtoMessage() {}

func (x *FubenStepSyncCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FubenStepSyncCmd.ProtoReflect.Descriptor instead.
func (*FubenStepSyncCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{16}
}

func (x *FubenStepSyncCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FubenStepSyncCmd_Cmd
}

func (x *FubenStepSyncCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FubenStepSyncCmd_Param
}

func (x *FubenStepSyncCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_FubenStepSyncCmd_Id
}

func (x *FubenStepSyncCmd) GetDel() bool {
	if x != nil && x.Del != nil {
		return *x.Del
	}
	return Default_FubenStepSyncCmd_Del
}

func (x *FubenStepSyncCmd) GetGroupid() uint32 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return Default_FubenStepSyncCmd_Groupid
}

func (x *FubenStepSyncCmd) GetConfig() *RaidPConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type FuBenProgressSyncCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param    *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=13" json:"param,omitempty"`
	Id       *uint32     `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Progress *uint32     `protobuf:"varint,4,opt,name=progress,def=0" json:"progress,omitempty"`
	Starid   *uint32     `protobuf:"varint,5,opt,name=starid,def=0" json:"starid,omitempty"`
}

// Default values for FuBenProgressSyncCmd fields.
const (
	Default_FuBenProgressSyncCmd_Cmd      = Command_FUBEN_PROTOCMD
	Default_FuBenProgressSyncCmd_Param    = FuBenParam_FUBEN_GOAL_SYNC
	Default_FuBenProgressSyncCmd_Id       = uint32(0)
	Default_FuBenProgressSyncCmd_Progress = uint32(0)
	Default_FuBenProgressSyncCmd_Starid   = uint32(0)
)

func (x *FuBenProgressSyncCmd) Reset() {
	*x = FuBenProgressSyncCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuBenProgressSyncCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuBenProgressSyncCmd) ProtoMessage() {}

func (x *FuBenProgressSyncCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuBenProgressSyncCmd.ProtoReflect.Descriptor instead.
func (*FuBenProgressSyncCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{17}
}

func (x *FuBenProgressSyncCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FuBenProgressSyncCmd_Cmd
}

func (x *FuBenProgressSyncCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FuBenProgressSyncCmd_Param
}

func (x *FuBenProgressSyncCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_FuBenProgressSyncCmd_Id
}

func (x *FuBenProgressSyncCmd) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return Default_FuBenProgressSyncCmd_Progress
}

func (x *FuBenProgressSyncCmd) GetStarid() uint32 {
	if x != nil && x.Starid != nil {
		return *x.Starid
	}
	return Default_FuBenProgressSyncCmd_Starid
}

type FuBenClearInfoCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=15" json:"param,omitempty"`
}

// Default values for FuBenClearInfoCmd fields.
const (
	Default_FuBenClearInfoCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_FuBenClearInfoCmd_Param = FuBenParam_FUBEN_CLEAR_SYNC
)

func (x *FuBenClearInfoCmd) Reset() {
	*x = FuBenClearInfoCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuBenClearInfoCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuBenClearInfoCmd) ProtoMessage() {}

func (x *FuBenClearInfoCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuBenClearInfoCmd.ProtoReflect.Descriptor instead.
func (*FuBenClearInfoCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{18}
}

func (x *FuBenClearInfoCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FuBenClearInfoCmd_Cmd
}

func (x *FuBenClearInfoCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FuBenClearInfoCmd_Param
}

type GuildGateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gatenpcid     *uint64          `protobuf:"varint,1,req,name=gatenpcid" json:"gatenpcid,omitempty"`
	Killedbossnum *uint32          `protobuf:"varint,2,opt,name=killedbossnum,def=0" json:"killedbossnum,omitempty"`
	Groupindex    *uint32          `protobuf:"varint,3,opt,name=groupindex,def=0" json:"groupindex,omitempty"`
	Closetime     *uint32          `protobuf:"varint,4,opt,name=closetime,def=0" json:"closetime,omitempty"`
	Level         *uint32          `protobuf:"varint,5,opt,name=level,def=0" json:"level,omitempty"`
	Isspecial     *bool            `protobuf:"varint,6,opt,name=isspecial,def=0" json:"isspecial,omitempty"`
	State         *EGuildGateState `protobuf:"varint,7,opt,name=state,enum=Cmd.EGuildGateState,def=1" json:"state,omitempty"`
}

// Default values for GuildGateData fields.
const (
	Default_GuildGateData_Killedbossnum = uint32(0)
	Default_GuildGateData_Groupindex    = uint32(0)
	Default_GuildGateData_Closetime     = uint32(0)
	Default_GuildGateData_Level         = uint32(0)
	Default_GuildGateData_Isspecial     = bool(false)
	Default_GuildGateData_State         = EGuildGateState_EGUILDGATESTATE_LOCK
)

func (x *GuildGateData) Reset() {
	*x = GuildGateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildGateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildGateData) ProtoMessage() {}

func (x *GuildGateData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildGateData.ProtoReflect.Descriptor instead.
func (*GuildGateData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{19}
}

func (x *GuildGateData) GetGatenpcid() uint64 {
	if x != nil && x.Gatenpcid != nil {
		return *x.Gatenpcid
	}
	return 0
}

func (x *GuildGateData) GetKilledbossnum() uint32 {
	if x != nil && x.Killedbossnum != nil {
		return *x.Killedbossnum
	}
	return Default_GuildGateData_Killedbossnum
}

func (x *GuildGateData) GetGroupindex() uint32 {
	if x != nil && x.Groupindex != nil {
		return *x.Groupindex
	}
	return Default_GuildGateData_Groupindex
}

func (x *GuildGateData) GetClosetime() uint32 {
	if x != nil && x.Closetime != nil {
		return *x.Closetime
	}
	return Default_GuildGateData_Closetime
}

func (x *GuildGateData) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return Default_GuildGateData_Level
}

func (x *GuildGateData) GetIsspecial() bool {
	if x != nil && x.Isspecial != nil {
		return *x.Isspecial
	}
	return Default_GuildGateData_Isspecial
}

func (x *GuildGateData) GetState() EGuildGateState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_GuildGateData_State
}

type UserGuildRaidFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param    *FuBenParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=16" json:"param,omitempty"`
	Gatedata []*GuildGateData `protobuf:"bytes,3,rep,name=gatedata" json:"gatedata,omitempty"`
}

// Default values for UserGuildRaidFubenCmd fields.
const (
	Default_UserGuildRaidFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_UserGuildRaidFubenCmd_Param = FuBenParam_GUILD_RAID_USER_INFO
)

func (x *UserGuildRaidFubenCmd) Reset() {
	*x = UserGuildRaidFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGuildRaidFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGuildRaidFubenCmd) ProtoMessage() {}

func (x *UserGuildRaidFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGuildRaidFubenCmd.ProtoReflect.Descriptor instead.
func (*UserGuildRaidFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{20}
}

func (x *UserGuildRaidFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserGuildRaidFubenCmd_Cmd
}

func (x *UserGuildRaidFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserGuildRaidFubenCmd_Param
}

func (x *UserGuildRaidFubenCmd) GetGatedata() []*GuildGateData {
	if x != nil {
		return x.Gatedata
	}
	return nil
}

type GuildGateOptCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param       *FuBenParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=17" json:"param,omitempty"`
	Gatenpcid   *uint64        `protobuf:"varint,3,opt,name=gatenpcid" json:"gatenpcid,omitempty"`
	Opt         *EGuildGateOpt `protobuf:"varint,4,opt,name=opt,enum=Cmd.EGuildGateOpt" json:"opt,omitempty"`
	Uplocklevel *uint32        `protobuf:"varint,5,opt,name=uplocklevel,def=0" json:"uplocklevel,omitempty"`
}

// Default values for GuildGateOptCmd fields.
const (
	Default_GuildGateOptCmd_Cmd         = Command_FUBEN_PROTOCMD
	Default_GuildGateOptCmd_Param       = FuBenParam_GUILD_RAID_GATE_OPT
	Default_GuildGateOptCmd_Uplocklevel = uint32(0)
)

func (x *GuildGateOptCmd) Reset() {
	*x = GuildGateOptCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildGateOptCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildGateOptCmd) ProtoMessage() {}

func (x *GuildGateOptCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildGateOptCmd.ProtoReflect.Descriptor instead.
func (*GuildGateOptCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{21}
}

func (x *GuildGateOptCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildGateOptCmd_Cmd
}

func (x *GuildGateOptCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildGateOptCmd_Param
}

func (x *GuildGateOptCmd) GetGatenpcid() uint64 {
	if x != nil && x.Gatenpcid != nil {
		return *x.Gatenpcid
	}
	return 0
}

func (x *GuildGateOptCmd) GetOpt() EGuildGateOpt {
	if x != nil && x.Opt != nil {
		return *x.Opt
	}
	return EGuildGateOpt_EGUILDGATEOPT_UNLOCK
}

func (x *GuildGateOptCmd) GetUplocklevel() uint32 {
	if x != nil && x.Uplocklevel != nil {
		return *x.Uplocklevel
	}
	return Default_GuildGateOptCmd_Uplocklevel
}

type GuildFireInfoFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param        *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=18" json:"param,omitempty"`
	Fire         *bool       `protobuf:"varint,3,opt,name=fire,def=0" json:"fire,omitempty"`
	DefGuildid   *uint64     `protobuf:"varint,4,opt,name=def_guildid,json=defGuildid,def=0" json:"def_guildid,omitempty"`
	EndfireTime  *uint32     `protobuf:"varint,5,opt,name=endfire_time,json=endfireTime,def=0" json:"endfire_time,omitempty"`
	Danger       *bool       `protobuf:"varint,6,opt,name=danger,def=0" json:"danger,omitempty"`
	DangerTime   *uint32     `protobuf:"varint,7,opt,name=danger_time,json=dangerTime,def=0" json:"danger_time,omitempty"`
	MetalHpper   *uint32     `protobuf:"varint,8,opt,name=metal_hpper,json=metalHpper,def=0" json:"metal_hpper,omitempty"`
	Calmdown     *bool       `protobuf:"varint,9,opt,name=calmdown,def=0" json:"calmdown,omitempty"`
	CalmTime     *uint32     `protobuf:"varint,10,opt,name=calm_time,json=calmTime,def=0" json:"calm_time,omitempty"`
	DefGuildname *string     `protobuf:"bytes,11,opt,name=def_guildname,json=defGuildname" json:"def_guildname,omitempty"`
	DefPerfect   *bool       `protobuf:"varint,12,opt,name=def_perfect,json=defPerfect,def=0" json:"def_perfect,omitempty"`
}

// Default values for GuildFireInfoFubenCmd fields.
const (
	Default_GuildFireInfoFubenCmd_Cmd         = Command_FUBEN_PROTOCMD
	Default_GuildFireInfoFubenCmd_Param       = FuBenParam_GUILD_FIRE_INFO
	Default_GuildFireInfoFubenCmd_Fire        = bool(false)
	Default_GuildFireInfoFubenCmd_DefGuildid  = uint64(0)
	Default_GuildFireInfoFubenCmd_EndfireTime = uint32(0)
	Default_GuildFireInfoFubenCmd_Danger      = bool(false)
	Default_GuildFireInfoFubenCmd_DangerTime  = uint32(0)
	Default_GuildFireInfoFubenCmd_MetalHpper  = uint32(0)
	Default_GuildFireInfoFubenCmd_Calmdown    = bool(false)
	Default_GuildFireInfoFubenCmd_CalmTime    = uint32(0)
	Default_GuildFireInfoFubenCmd_DefPerfect  = bool(false)
)

func (x *GuildFireInfoFubenCmd) Reset() {
	*x = GuildFireInfoFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildFireInfoFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildFireInfoFubenCmd) ProtoMessage() {}

func (x *GuildFireInfoFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildFireInfoFubenCmd.ProtoReflect.Descriptor instead.
func (*GuildFireInfoFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{22}
}

func (x *GuildFireInfoFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildFireInfoFubenCmd_Cmd
}

func (x *GuildFireInfoFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildFireInfoFubenCmd_Param
}

func (x *GuildFireInfoFubenCmd) GetFire() bool {
	if x != nil && x.Fire != nil {
		return *x.Fire
	}
	return Default_GuildFireInfoFubenCmd_Fire
}

func (x *GuildFireInfoFubenCmd) GetDefGuildid() uint64 {
	if x != nil && x.DefGuildid != nil {
		return *x.DefGuildid
	}
	return Default_GuildFireInfoFubenCmd_DefGuildid
}

func (x *GuildFireInfoFubenCmd) GetEndfireTime() uint32 {
	if x != nil && x.EndfireTime != nil {
		return *x.EndfireTime
	}
	return Default_GuildFireInfoFubenCmd_EndfireTime
}

func (x *GuildFireInfoFubenCmd) GetDanger() bool {
	if x != nil && x.Danger != nil {
		return *x.Danger
	}
	return Default_GuildFireInfoFubenCmd_Danger
}

func (x *GuildFireInfoFubenCmd) GetDangerTime() uint32 {
	if x != nil && x.DangerTime != nil {
		return *x.DangerTime
	}
	return Default_GuildFireInfoFubenCmd_DangerTime
}

func (x *GuildFireInfoFubenCmd) GetMetalHpper() uint32 {
	if x != nil && x.MetalHpper != nil {
		return *x.MetalHpper
	}
	return Default_GuildFireInfoFubenCmd_MetalHpper
}

func (x *GuildFireInfoFubenCmd) GetCalmdown() bool {
	if x != nil && x.Calmdown != nil {
		return *x.Calmdown
	}
	return Default_GuildFireInfoFubenCmd_Calmdown
}

func (x *GuildFireInfoFubenCmd) GetCalmTime() uint32 {
	if x != nil && x.CalmTime != nil {
		return *x.CalmTime
	}
	return Default_GuildFireInfoFubenCmd_CalmTime
}

func (x *GuildFireInfoFubenCmd) GetDefGuildname() string {
	if x != nil && x.DefGuildname != nil {
		return *x.DefGuildname
	}
	return ""
}

func (x *GuildFireInfoFubenCmd) GetDefPerfect() bool {
	if x != nil && x.DefPerfect != nil {
		return *x.DefPerfect
	}
	return Default_GuildFireInfoFubenCmd_DefPerfect
}

type GuildFireStopFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param  *FuBenParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=19" json:"param,omitempty"`
	Result *EGuildFireResult `protobuf:"varint,3,req,name=result,enum=Cmd.EGuildFireResult" json:"result,omitempty"`
}

// Default values for GuildFireStopFubenCmd fields.
const (
	Default_GuildFireStopFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_GuildFireStopFubenCmd_Param = FuBenParam_GUILD_FIRE_STOP
)

func (x *GuildFireStopFubenCmd) Reset() {
	*x = GuildFireStopFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildFireStopFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildFireStopFubenCmd) ProtoMessage() {}

func (x *GuildFireStopFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildFireStopFubenCmd.ProtoReflect.Descriptor instead.
func (*GuildFireStopFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{23}
}

func (x *GuildFireStopFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildFireStopFubenCmd_Cmd
}

func (x *GuildFireStopFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildFireStopFubenCmd_Param
}

func (x *GuildFireStopFubenCmd) GetResult() EGuildFireResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return EGuildFireResult_EGUILDFIRERESULT_DEF
}

type GuildFireDangerFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param      *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=20" json:"param,omitempty"`
	Danger     *bool       `protobuf:"varint,3,opt,name=danger,def=0" json:"danger,omitempty"`
	DangerTime *uint32     `protobuf:"varint,4,opt,name=danger_time,json=dangerTime,def=0" json:"danger_time,omitempty"`
}

// Default values for GuildFireDangerFubenCmd fields.
const (
	Default_GuildFireDangerFubenCmd_Cmd        = Command_FUBEN_PROTOCMD
	Default_GuildFireDangerFubenCmd_Param      = FuBenParam_GUILD_FIRE_DANGER
	Default_GuildFireDangerFubenCmd_Danger     = bool(false)
	Default_GuildFireDangerFubenCmd_DangerTime = uint32(0)
)

func (x *GuildFireDangerFubenCmd) Reset() {
	*x = GuildFireDangerFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildFireDangerFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildFireDangerFubenCmd) ProtoMessage() {}

func (x *GuildFireDangerFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildFireDangerFubenCmd.ProtoReflect.Descriptor instead.
func (*GuildFireDangerFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{24}
}

func (x *GuildFireDangerFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildFireDangerFubenCmd_Cmd
}

func (x *GuildFireDangerFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildFireDangerFubenCmd_Param
}

func (x *GuildFireDangerFubenCmd) GetDanger() bool {
	if x != nil && x.Danger != nil {
		return *x.Danger
	}
	return Default_GuildFireDangerFubenCmd_Danger
}

func (x *GuildFireDangerFubenCmd) GetDangerTime() uint32 {
	if x != nil && x.DangerTime != nil {
		return *x.DangerTime
	}
	return Default_GuildFireDangerFubenCmd_DangerTime
}

type GuildFireMetalHpFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=21" json:"param,omitempty"`
	Hpper *uint32     `protobuf:"varint,3,opt,name=hpper,def=0" json:"hpper,omitempty"`
}

// Default values for GuildFireMetalHpFubenCmd fields.
const (
	Default_GuildFireMetalHpFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_GuildFireMetalHpFubenCmd_Param = FuBenParam_GUILD_FIRE_METALHP
	Default_GuildFireMetalHpFubenCmd_Hpper = uint32(0)
)

func (x *GuildFireMetalHpFubenCmd) Reset() {
	*x = GuildFireMetalHpFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildFireMetalHpFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildFireMetalHpFubenCmd) ProtoMessage() {}

func (x *GuildFireMetalHpFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildFireMetalHpFubenCmd.ProtoReflect.Descriptor instead.
func (*GuildFireMetalHpFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{25}
}

func (x *GuildFireMetalHpFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildFireMetalHpFubenCmd_Cmd
}

func (x *GuildFireMetalHpFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildFireMetalHpFubenCmd_Param
}

func (x *GuildFireMetalHpFubenCmd) GetHpper() uint32 {
	if x != nil && x.Hpper != nil {
		return *x.Hpper
	}
	return Default_GuildFireMetalHpFubenCmd_Hpper
}

type GuildFireCalmFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=22" json:"param,omitempty"`
	Calm  *bool       `protobuf:"varint,3,opt,name=calm,def=0" json:"calm,omitempty"`
}

// Default values for GuildFireCalmFubenCmd fields.
const (
	Default_GuildFireCalmFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_GuildFireCalmFubenCmd_Param = FuBenParam_GUILD_FIRE_CALM
	Default_GuildFireCalmFubenCmd_Calm  = bool(false)
)

func (x *GuildFireCalmFubenCmd) Reset() {
	*x = GuildFireCalmFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildFireCalmFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildFireCalmFubenCmd) ProtoMessage() {}

func (x *GuildFireCalmFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildFireCalmFubenCmd.ProtoReflect.Descriptor instead.
func (*GuildFireCalmFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{26}
}

func (x *GuildFireCalmFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildFireCalmFubenCmd_Cmd
}

func (x *GuildFireCalmFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildFireCalmFubenCmd_Param
}

func (x *GuildFireCalmFubenCmd) GetCalm() bool {
	if x != nil && x.Calm != nil {
		return *x.Calm
	}
	return Default_GuildFireCalmFubenCmd_Calm
}

type GuildFireNewDefFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param     *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=23" json:"param,omitempty"`
	Guildid   *uint64     `protobuf:"varint,3,opt,name=guildid,def=0" json:"guildid,omitempty"`
	Guildname *string     `protobuf:"bytes,4,opt,name=guildname" json:"guildname,omitempty"`
}

// Default values for GuildFireNewDefFubenCmd fields.
const (
	Default_GuildFireNewDefFubenCmd_Cmd     = Command_FUBEN_PROTOCMD
	Default_GuildFireNewDefFubenCmd_Param   = FuBenParam_GUILD_FIRE_CHANGE_GUILD
	Default_GuildFireNewDefFubenCmd_Guildid = uint64(0)
)

func (x *GuildFireNewDefFubenCmd) Reset() {
	*x = GuildFireNewDefFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildFireNewDefFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildFireNewDefFubenCmd) ProtoMessage() {}

func (x *GuildFireNewDefFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildFireNewDefFubenCmd.ProtoReflect.Descriptor instead.
func (*GuildFireNewDefFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{27}
}

func (x *GuildFireNewDefFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildFireNewDefFubenCmd_Cmd
}

func (x *GuildFireNewDefFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildFireNewDefFubenCmd_Param
}

func (x *GuildFireNewDefFubenCmd) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return Default_GuildFireNewDefFubenCmd_Guildid
}

func (x *GuildFireNewDefFubenCmd) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

type GuildFireRestartFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=24" json:"param,omitempty"`
}

// Default values for GuildFireRestartFubenCmd fields.
const (
	Default_GuildFireRestartFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_GuildFireRestartFubenCmd_Param = FuBenParam_GUILD_FIRE_RESTART
)

func (x *GuildFireRestartFubenCmd) Reset() {
	*x = GuildFireRestartFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildFireRestartFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildFireRestartFubenCmd) ProtoMessage() {}

func (x *GuildFireRestartFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildFireRestartFubenCmd.ProtoReflect.Descriptor instead.
func (*GuildFireRestartFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{28}
}

func (x *GuildFireRestartFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildFireRestartFubenCmd_Cmd
}

func (x *GuildFireRestartFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildFireRestartFubenCmd_Param
}

type GuildFireStatusFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param     *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=25" json:"param,omitempty"`
	Open      *bool       `protobuf:"varint,3,opt,name=open,def=0" json:"open,omitempty"`
	Starttime *uint32     `protobuf:"varint,4,opt,name=starttime,def=0" json:"starttime,omitempty"`
	Cityid    *uint32     `protobuf:"varint,5,req,name=cityid" json:"cityid,omitempty"`
	Cityopen  *bool       `protobuf:"varint,6,opt,name=cityopen,def=0" json:"cityopen,omitempty"`
}

// Default values for GuildFireStatusFubenCmd fields.
const (
	Default_GuildFireStatusFubenCmd_Cmd       = Command_FUBEN_PROTOCMD
	Default_GuildFireStatusFubenCmd_Param     = FuBenParam_GUILD_FIRE_STATUS
	Default_GuildFireStatusFubenCmd_Open      = bool(false)
	Default_GuildFireStatusFubenCmd_Starttime = uint32(0)
	Default_GuildFireStatusFubenCmd_Cityopen  = bool(false)
)

func (x *GuildFireStatusFubenCmd) Reset() {
	*x = GuildFireStatusFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildFireStatusFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildFireStatusFubenCmd) ProtoMessage() {}

func (x *GuildFireStatusFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildFireStatusFubenCmd.ProtoReflect.Descriptor instead.
func (*GuildFireStatusFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{29}
}

func (x *GuildFireStatusFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuildFireStatusFubenCmd_Cmd
}

func (x *GuildFireStatusFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuildFireStatusFubenCmd_Param
}

func (x *GuildFireStatusFubenCmd) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return Default_GuildFireStatusFubenCmd_Open
}

func (x *GuildFireStatusFubenCmd) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return Default_GuildFireStatusFubenCmd_Starttime
}

func (x *GuildFireStatusFubenCmd) GetCityid() uint32 {
	if x != nil && x.Cityid != nil {
		return *x.Cityid
	}
	return 0
}

func (x *GuildFireStatusFubenCmd) GetCityopen() bool {
	if x != nil && x.Cityopen != nil {
		return *x.Cityopen
	}
	return Default_GuildFireStatusFubenCmd_Cityopen
}

type GvgData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *EGvgDataType `protobuf:"varint,1,opt,name=type,enum=Cmd.EGvgDataType,def=0" json:"type,omitempty"`
	Value *uint32       `protobuf:"varint,2,opt,name=value,def=0" json:"value,omitempty"`
}

// Default values for GvgData fields.
const (
	Default_GvgData_Type  = EGvgDataType_EGVGDATA_MIN
	Default_GvgData_Value = uint32(0)
)

func (x *GvgData) Reset() {
	*x = GvgData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgData) ProtoMessage() {}

func (x *GvgData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgData.ProtoReflect.Descriptor instead.
func (*GvgData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{30}
}

func (x *GvgData) GetType() EGvgDataType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_GvgData_Type
}

func (x *GvgData) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_GvgData_Value
}

type GvgDataSyncCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=26" json:"param,omitempty"`
	Datas []*GvgData  `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for GvgDataSyncCmd fields.
const (
	Default_GvgDataSyncCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_GvgDataSyncCmd_Param = FuBenParam_GVG_DATA_SYNC_CMD
)

func (x *GvgDataSyncCmd) Reset() {
	*x = GvgDataSyncCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgDataSyncCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgDataSyncCmd) ProtoMessage() {}

func (x *GvgDataSyncCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgDataSyncCmd.ProtoReflect.Descriptor instead.
func (*GvgDataSyncCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{31}
}

func (x *GvgDataSyncCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GvgDataSyncCmd_Cmd
}

func (x *GvgDataSyncCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GvgDataSyncCmd_Param
}

func (x *GvgDataSyncCmd) GetDatas() []*GvgData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type GvgDataUpdateCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=27" json:"param,omitempty"`
	Data  *GvgData    `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

// Default values for GvgDataUpdateCmd fields.
const (
	Default_GvgDataUpdateCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_GvgDataUpdateCmd_Param = FuBenParam_GVG_DATA_UPDATE_CMD
)

func (x *GvgDataUpdateCmd) Reset() {
	*x = GvgDataUpdateCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgDataUpdateCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgDataUpdateCmd) ProtoMessage() {}

func (x *GvgDataUpdateCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgDataUpdateCmd.ProtoReflect.Descriptor instead.
func (*GvgDataUpdateCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{32}
}

func (x *GvgDataUpdateCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GvgDataUpdateCmd_Cmd
}

func (x *GvgDataUpdateCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GvgDataUpdateCmd_Param
}

func (x *GvgDataUpdateCmd) GetData() *GvgData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GvgDefNameChangeFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=28" json:"param,omitempty"`
	Newname *string     `protobuf:"bytes,3,req,name=newname" json:"newname,omitempty"`
}

// Default values for GvgDefNameChangeFubenCmd fields.
const (
	Default_GvgDefNameChangeFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_GvgDefNameChangeFubenCmd_Param = FuBenParam_GUILD_FIRE_CHANGE_GUILD_NAME
)

func (x *GvgDefNameChangeFubenCmd) Reset() {
	*x = GvgDefNameChangeFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgDefNameChangeFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgDefNameChangeFubenCmd) ProtoMessage() {}

func (x *GvgDefNameChangeFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgDefNameChangeFubenCmd.ProtoReflect.Descriptor instead.
func (*GvgDefNameChangeFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{33}
}

func (x *GvgDefNameChangeFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GvgDefNameChangeFubenCmd_Cmd
}

func (x *GvgDefNameChangeFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GvgDefNameChangeFubenCmd_Param
}

func (x *GvgDefNameChangeFubenCmd) GetNewname() string {
	if x != nil && x.Newname != nil {
		return *x.Newname
	}
	return ""
}

type SyncMvpInfoFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param    *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=29" json:"param,omitempty"`
	Usernum  *uint32     `protobuf:"varint,3,opt,name=usernum,def=0" json:"usernum,omitempty"`
	Liveboss []uint32    `protobuf:"varint,4,rep,name=liveboss" json:"liveboss,omitempty"`
	Dieboss  []uint32    `protobuf:"varint,5,rep,name=dieboss" json:"dieboss,omitempty"`
}

// Default values for SyncMvpInfoFubenCmd fields.
const (
	Default_SyncMvpInfoFubenCmd_Cmd     = Command_FUBEN_PROTOCMD
	Default_SyncMvpInfoFubenCmd_Param   = FuBenParam_MVPBATTLE_SYNC_MVPINFO
	Default_SyncMvpInfoFubenCmd_Usernum = uint32(0)
)

func (x *SyncMvpInfoFubenCmd) Reset() {
	*x = SyncMvpInfoFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMvpInfoFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMvpInfoFubenCmd) ProtoMessage() {}

func (x *SyncMvpInfoFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMvpInfoFubenCmd.ProtoReflect.Descriptor instead.
func (*SyncMvpInfoFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{34}
}

func (x *SyncMvpInfoFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SyncMvpInfoFubenCmd_Cmd
}

func (x *SyncMvpInfoFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SyncMvpInfoFubenCmd_Param
}

func (x *SyncMvpInfoFubenCmd) GetUsernum() uint32 {
	if x != nil && x.Usernum != nil {
		return *x.Usernum
	}
	return Default_SyncMvpInfoFubenCmd_Usernum
}

func (x *SyncMvpInfoFubenCmd) GetLiveboss() []uint32 {
	if x != nil {
		return x.Liveboss
	}
	return nil
}

func (x *SyncMvpInfoFubenCmd) GetDieboss() []uint32 {
	if x != nil {
		return x.Dieboss
	}
	return nil
}

type BossDieFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=30" json:"param,omitempty"`
	Npcid *uint32     `protobuf:"varint,3,req,name=npcid" json:"npcid,omitempty"`
}

// Default values for BossDieFubenCmd fields.
const (
	Default_BossDieFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_BossDieFubenCmd_Param = FuBenParam_MVPBATTLE_BOSS_DIE
)

func (x *BossDieFubenCmd) Reset() {
	*x = BossDieFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BossDieFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BossDieFubenCmd) ProtoMessage() {}

func (x *BossDieFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BossDieFubenCmd.ProtoReflect.Descriptor instead.
func (*BossDieFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{35}
}

func (x *BossDieFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BossDieFubenCmd_Cmd
}

func (x *BossDieFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BossDieFubenCmd_Param
}

func (x *BossDieFubenCmd) GetNpcid() uint32 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return 0
}

type UpdateUserNumFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=31" json:"param,omitempty"`
	Usernum *uint32     `protobuf:"varint,3,opt,name=usernum,def=0" json:"usernum,omitempty"`
}

// Default values for UpdateUserNumFubenCmd fields.
const (
	Default_UpdateUserNumFubenCmd_Cmd     = Command_FUBEN_PROTOCMD
	Default_UpdateUserNumFubenCmd_Param   = FuBenParam_FUBEN_USERNUM_COUNT
	Default_UpdateUserNumFubenCmd_Usernum = uint32(0)
)

func (x *UpdateUserNumFubenCmd) Reset() {
	*x = UpdateUserNumFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserNumFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserNumFubenCmd) ProtoMessage() {}

func (x *UpdateUserNumFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserNumFubenCmd.ProtoReflect.Descriptor instead.
func (*UpdateUserNumFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateUserNumFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateUserNumFubenCmd_Cmd
}

func (x *UpdateUserNumFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateUserNumFubenCmd_Param
}

func (x *UpdateUserNumFubenCmd) GetUsernum() uint32 {
	if x != nil && x.Usernum != nil {
		return *x.Usernum
	}
	return Default_UpdateUserNumFubenCmd_Usernum
}

type GvgTowerValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guildid *uint64 `protobuf:"varint,1,opt,name=guildid" json:"guildid,omitempty"`
	Value   *uint32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (x *GvgTowerValue) Reset() {
	*x = GvgTowerValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgTowerValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgTowerValue) ProtoMessage() {}

func (x *GvgTowerValue) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgTowerValue.ProtoReflect.Descriptor instead.
func (*GvgTowerValue) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{37}
}

func (x *GvgTowerValue) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return 0
}

func (x *GvgTowerValue) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type GvgTowerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etype      *EGvgTowerType   `protobuf:"varint,1,opt,name=etype,enum=Cmd.EGvgTowerType" json:"etype,omitempty"`
	Estate     *EGvgTowerState  `protobuf:"varint,2,opt,name=estate,enum=Cmd.EGvgTowerState" json:"estate,omitempty"`
	OwnerGuild *uint64          `protobuf:"varint,3,opt,name=owner_guild,json=ownerGuild" json:"owner_guild,omitempty"`
	Info       []*GvgTowerValue `protobuf:"bytes,4,rep,name=info" json:"info,omitempty"`
}

func (x *GvgTowerData) Reset() {
	*x = GvgTowerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgTowerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgTowerData) ProtoMessage() {}

func (x *GvgTowerData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgTowerData.ProtoReflect.Descriptor instead.
func (*GvgTowerData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{38}
}

func (x *GvgTowerData) GetEtype() EGvgTowerType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return EGvgTowerType_EGVGTOWERTYPE_MIN
}

func (x *GvgTowerData) GetEstate() EGvgTowerState {
	if x != nil && x.Estate != nil {
		return *x.Estate
	}
	return EGvgTowerState_EGVGTOWERSTATE_INITFREE
}

func (x *GvgTowerData) GetOwnerGuild() uint64 {
	if x != nil && x.OwnerGuild != nil {
		return *x.OwnerGuild
	}
	return 0
}

func (x *GvgTowerData) GetInfo() []*GvgTowerValue {
	if x != nil {
		return x.Info
	}
	return nil
}

type GvgCrystalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank       *uint32 `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	Guildid    *uint64 `protobuf:"varint,2,opt,name=guildid" json:"guildid,omitempty"`
	Crystalnum *uint32 `protobuf:"varint,3,opt,name=crystalnum,def=0" json:"crystalnum,omitempty"`
	Chipnum    *uint32 `protobuf:"varint,4,opt,name=chipnum,def=0" json:"chipnum,omitempty"`
}

// Default values for GvgCrystalInfo fields.
const (
	Default_GvgCrystalInfo_Crystalnum = uint32(0)
	Default_GvgCrystalInfo_Chipnum    = uint32(0)
)

func (x *GvgCrystalInfo) Reset() {
	*x = GvgCrystalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgCrystalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgCrystalInfo) ProtoMessage() {}

func (x *GvgCrystalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgCrystalInfo.ProtoReflect.Descriptor instead.
func (*GvgCrystalInfo) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{39}
}

func (x *GvgCrystalInfo) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *GvgCrystalInfo) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return 0
}

func (x *GvgCrystalInfo) GetCrystalnum() uint32 {
	if x != nil && x.Crystalnum != nil {
		return *x.Crystalnum
	}
	return Default_GvgCrystalInfo_Crystalnum
}

func (x *GvgCrystalInfo) GetChipnum() uint32 {
	if x != nil && x.Chipnum != nil {
		return *x.Chipnum
	}
	return Default_GvgCrystalInfo_Chipnum
}

type GvgGuildInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     *uint32         `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Guildid   *uint64         `protobuf:"varint,2,opt,name=guildid" json:"guildid,omitempty"`
	Guildname *string         `protobuf:"bytes,3,opt,name=guildname" json:"guildname,omitempty"`
	Icon      *string         `protobuf:"bytes,4,opt,name=icon" json:"icon,omitempty"`
	MetalLive *bool           `protobuf:"varint,5,opt,name=metal_live,json=metalLive,def=0" json:"metal_live,omitempty"`
	Crystal   *GvgCrystalInfo `protobuf:"bytes,6,opt,name=crystal" json:"crystal,omitempty"`
}

// Default values for GvgGuildInfo fields.
const (
	Default_GvgGuildInfo_MetalLive = bool(false)
)

func (x *GvgGuildInfo) Reset() {
	*x = GvgGuildInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgGuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgGuildInfo) ProtoMessage() {}

func (x *GvgGuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgGuildInfo.ProtoReflect.Descriptor instead.
func (*GvgGuildInfo) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{40}
}

func (x *GvgGuildInfo) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *GvgGuildInfo) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return 0
}

func (x *GvgGuildInfo) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

func (x *GvgGuildInfo) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *GvgGuildInfo) GetMetalLive() bool {
	if x != nil && x.MetalLive != nil {
		return *x.MetalLive
	}
	return Default_GvgGuildInfo_MetalLive
}

func (x *GvgGuildInfo) GetCrystal() *GvgCrystalInfo {
	if x != nil {
		return x.Crystal
	}
	return nil
}

type SuperGvgSyncFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param         *FuBenParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=32" json:"param,omitempty"`
	Towers        []*GvgTowerData `protobuf:"bytes,3,rep,name=towers" json:"towers,omitempty"`
	Guildinfo     []*GvgGuildInfo `protobuf:"bytes,4,rep,name=guildinfo" json:"guildinfo,omitempty"`
	Firebegintime *uint32         `protobuf:"varint,5,opt,name=firebegintime,def=0" json:"firebegintime,omitempty"`
}

// Default values for SuperGvgSyncFubenCmd fields.
const (
	Default_SuperGvgSyncFubenCmd_Cmd           = Command_FUBEN_PROTOCMD
	Default_SuperGvgSyncFubenCmd_Param         = FuBenParam_SUPERGVG_INFO_SYNC
	Default_SuperGvgSyncFubenCmd_Firebegintime = uint32(0)
)

func (x *SuperGvgSyncFubenCmd) Reset() {
	*x = SuperGvgSyncFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperGvgSyncFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperGvgSyncFubenCmd) ProtoMessage() {}

func (x *SuperGvgSyncFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperGvgSyncFubenCmd.ProtoReflect.Descriptor instead.
func (*SuperGvgSyncFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{41}
}

func (x *SuperGvgSyncFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SuperGvgSyncFubenCmd_Cmd
}

func (x *SuperGvgSyncFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SuperGvgSyncFubenCmd_Param
}

func (x *SuperGvgSyncFubenCmd) GetTowers() []*GvgTowerData {
	if x != nil {
		return x.Towers
	}
	return nil
}

func (x *SuperGvgSyncFubenCmd) GetGuildinfo() []*GvgGuildInfo {
	if x != nil {
		return x.Guildinfo
	}
	return nil
}

func (x *SuperGvgSyncFubenCmd) GetFirebegintime() uint32 {
	if x != nil && x.Firebegintime != nil {
		return *x.Firebegintime
	}
	return Default_SuperGvgSyncFubenCmd_Firebegintime
}

type GvgTowerUpdateFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param  *FuBenParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=33" json:"param,omitempty"`
	Towers []*GvgTowerData `protobuf:"bytes,3,rep,name=towers" json:"towers,omitempty"`
}

// Default values for GvgTowerUpdateFubenCmd fields.
const (
	Default_GvgTowerUpdateFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_GvgTowerUpdateFubenCmd_Param = FuBenParam_SUPERGVG_TOWERINFO_UPDATE
)

func (x *GvgTowerUpdateFubenCmd) Reset() {
	*x = GvgTowerUpdateFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgTowerUpdateFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgTowerUpdateFubenCmd) ProtoMessage() {}

func (x *GvgTowerUpdateFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgTowerUpdateFubenCmd.ProtoReflect.Descriptor instead.
func (*GvgTowerUpdateFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{42}
}

func (x *GvgTowerUpdateFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GvgTowerUpdateFubenCmd_Cmd
}

func (x *GvgTowerUpdateFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GvgTowerUpdateFubenCmd_Param
}

func (x *GvgTowerUpdateFubenCmd) GetTowers() []*GvgTowerData {
	if x != nil {
		return x.Towers
	}
	return nil
}

type GvgMetalDieFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=39" json:"param,omitempty"`
	Index *uint32     `protobuf:"varint,3,opt,name=index,def=0" json:"index,omitempty"`
}

// Default values for GvgMetalDieFubenCmd fields.
const (
	Default_GvgMetalDieFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_GvgMetalDieFubenCmd_Param = FuBenParam_SUPERGVG_METAL_DIE
	Default_GvgMetalDieFubenCmd_Index = uint32(0)
)

func (x *GvgMetalDieFubenCmd) Reset() {
	*x = GvgMetalDieFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgMetalDieFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgMetalDieFubenCmd) ProtoMessage() {}

func (x *GvgMetalDieFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgMetalDieFubenCmd.ProtoReflect.Descriptor instead.
func (*GvgMetalDieFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{43}
}

func (x *GvgMetalDieFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GvgMetalDieFubenCmd_Cmd
}

func (x *GvgMetalDieFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GvgMetalDieFubenCmd_Param
}

func (x *GvgMetalDieFubenCmd) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_GvgMetalDieFubenCmd_Index
}

type GvgCrystalUpdateFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param    *FuBenParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=34" json:"param,omitempty"`
	Crystals []*GvgCrystalInfo `protobuf:"bytes,3,rep,name=crystals" json:"crystals,omitempty"`
}

// Default values for GvgCrystalUpdateFubenCmd fields.
const (
	Default_GvgCrystalUpdateFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_GvgCrystalUpdateFubenCmd_Param = FuBenParam_SUPERGVG_METALINFO_UPDATE
)

func (x *GvgCrystalUpdateFubenCmd) Reset() {
	*x = GvgCrystalUpdateFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgCrystalUpdateFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgCrystalUpdateFubenCmd) ProtoMessage() {}

func (x *GvgCrystalUpdateFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgCrystalUpdateFubenCmd.ProtoReflect.Descriptor instead.
func (*GvgCrystalUpdateFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{44}
}

func (x *GvgCrystalUpdateFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GvgCrystalUpdateFubenCmd_Cmd
}

func (x *GvgCrystalUpdateFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GvgCrystalUpdateFubenCmd_Param
}

func (x *GvgCrystalUpdateFubenCmd) GetCrystals() []*GvgCrystalInfo {
	if x != nil {
		return x.Crystals
	}
	return nil
}

type QueryGvgTowerInfoFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=35" json:"param,omitempty"`
	Etype *EGvgTowerType `protobuf:"varint,3,req,name=etype,enum=Cmd.EGvgTowerType" json:"etype,omitempty"`
	Open  *bool          `protobuf:"varint,4,opt,name=open,def=0" json:"open,omitempty"`
}

// Default values for QueryGvgTowerInfoFubenCmd fields.
const (
	Default_QueryGvgTowerInfoFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_QueryGvgTowerInfoFubenCmd_Param = FuBenParam_SUPERGVG_QUERY_TOWERINFO
	Default_QueryGvgTowerInfoFubenCmd_Open  = bool(false)
)

func (x *QueryGvgTowerInfoFubenCmd) Reset() {
	*x = QueryGvgTowerInfoFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGvgTowerInfoFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGvgTowerInfoFubenCmd) ProtoMessage() {}

func (x *QueryGvgTowerInfoFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGvgTowerInfoFubenCmd.ProtoReflect.Descriptor instead.
func (*QueryGvgTowerInfoFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{45}
}

func (x *QueryGvgTowerInfoFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryGvgTowerInfoFubenCmd_Cmd
}

func (x *QueryGvgTowerInfoFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryGvgTowerInfoFubenCmd_Param
}

func (x *QueryGvgTowerInfoFubenCmd) GetEtype() EGvgTowerType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return EGvgTowerType_EGVGTOWERTYPE_MIN
}

func (x *QueryGvgTowerInfoFubenCmd) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return Default_QueryGvgTowerInfoFubenCmd_Open
}

type RewardItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid *uint32 `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	Count  *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *RewardItemData) Reset() {
	*x = RewardItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardItemData) ProtoMessage() {}

func (x *RewardItemData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardItemData.ProtoReflect.Descriptor instead.
func (*RewardItemData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{46}
}

func (x *RewardItemData) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *RewardItemData) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type SuperGvgRewardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guildid *uint64           `protobuf:"varint,1,opt,name=guildid" json:"guildid,omitempty"`
	Rank    *uint32           `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
	Items   []*RewardItemData `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

func (x *SuperGvgRewardData) Reset() {
	*x = SuperGvgRewardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperGvgRewardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperGvgRewardData) ProtoMessage() {}

func (x *SuperGvgRewardData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperGvgRewardData.ProtoReflect.Descriptor instead.
func (*SuperGvgRewardData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{47}
}

func (x *SuperGvgRewardData) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return 0
}

func (x *SuperGvgRewardData) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *SuperGvgRewardData) GetItems() []*RewardItemData {
	if x != nil {
		return x.Items
	}
	return nil
}

type SuperGvgRewardInfoFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param      *FuBenParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=36" json:"param,omitempty"`
	Rewardinfo []*SuperGvgRewardData `protobuf:"bytes,3,rep,name=rewardinfo" json:"rewardinfo,omitempty"`
}

// Default values for SuperGvgRewardInfoFubenCmd fields.
const (
	Default_SuperGvgRewardInfoFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_SuperGvgRewardInfoFubenCmd_Param = FuBenParam_SUPERGVG_REWARD_INFO
)

func (x *SuperGvgRewardInfoFubenCmd) Reset() {
	*x = SuperGvgRewardInfoFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperGvgRewardInfoFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperGvgRewardInfoFubenCmd) ProtoMessage() {}

func (x *SuperGvgRewardInfoFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperGvgRewardInfoFubenCmd.ProtoReflect.Descriptor instead.
func (*SuperGvgRewardInfoFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{48}
}

func (x *SuperGvgRewardInfoFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SuperGvgRewardInfoFubenCmd_Cmd
}

func (x *SuperGvgRewardInfoFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SuperGvgRewardInfoFubenCmd_Param
}

func (x *SuperGvgRewardInfoFubenCmd) GetRewardinfo() []*SuperGvgRewardData {
	if x != nil {
		return x.Rewardinfo
	}
	return nil
}

type SuperGvgUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    *string `protobuf:"bytes,1,req,name=username" json:"username,omitempty"`
	Profession  *uint32 `protobuf:"varint,2,req,name=profession" json:"profession,omitempty"`
	Killusernum *uint32 `protobuf:"varint,3,opt,name=killusernum,def=0" json:"killusernum,omitempty"`
	Dienum      *uint32 `protobuf:"varint,4,opt,name=dienum,def=0" json:"dienum,omitempty"`
	Chipnum     *uint32 `protobuf:"varint,5,opt,name=chipnum,def=0" json:"chipnum,omitempty"`
	Towertime   *uint32 `protobuf:"varint,6,opt,name=towertime,def=0" json:"towertime,omitempty"`
	Healhp      *uint32 `protobuf:"varint,7,opt,name=healhp,def=0" json:"healhp,omitempty"`
	Relivenum   *uint32 `protobuf:"varint,8,opt,name=relivenum,def=0" json:"relivenum,omitempty"`
	Metaldamage *uint32 `protobuf:"varint,9,opt,name=metaldamage,def=0" json:"metaldamage,omitempty"`
}

// Default values for SuperGvgUserData fields.
const (
	Default_SuperGvgUserData_Killusernum = uint32(0)
	Default_SuperGvgUserData_Dienum      = uint32(0)
	Default_SuperGvgUserData_Chipnum     = uint32(0)
	Default_SuperGvgUserData_Towertime   = uint32(0)
	Default_SuperGvgUserData_Healhp      = uint32(0)
	Default_SuperGvgUserData_Relivenum   = uint32(0)
	Default_SuperGvgUserData_Metaldamage = uint32(0)
)

func (x *SuperGvgUserData) Reset() {
	*x = SuperGvgUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperGvgUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperGvgUserData) ProtoMessage() {}

func (x *SuperGvgUserData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperGvgUserData.ProtoReflect.Descriptor instead.
func (*SuperGvgUserData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{49}
}

func (x *SuperGvgUserData) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *SuperGvgUserData) GetProfession() uint32 {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return 0
}

func (x *SuperGvgUserData) GetKillusernum() uint32 {
	if x != nil && x.Killusernum != nil {
		return *x.Killusernum
	}
	return Default_SuperGvgUserData_Killusernum
}

func (x *SuperGvgUserData) GetDienum() uint32 {
	if x != nil && x.Dienum != nil {
		return *x.Dienum
	}
	return Default_SuperGvgUserData_Dienum
}

func (x *SuperGvgUserData) GetChipnum() uint32 {
	if x != nil && x.Chipnum != nil {
		return *x.Chipnum
	}
	return Default_SuperGvgUserData_Chipnum
}

func (x *SuperGvgUserData) GetTowertime() uint32 {
	if x != nil && x.Towertime != nil {
		return *x.Towertime
	}
	return Default_SuperGvgUserData_Towertime
}

func (x *SuperGvgUserData) GetHealhp() uint32 {
	if x != nil && x.Healhp != nil {
		return *x.Healhp
	}
	return Default_SuperGvgUserData_Healhp
}

func (x *SuperGvgUserData) GetRelivenum() uint32 {
	if x != nil && x.Relivenum != nil {
		return *x.Relivenum
	}
	return Default_SuperGvgUserData_Relivenum
}

func (x *SuperGvgUserData) GetMetaldamage() uint32 {
	if x != nil && x.Metaldamage != nil {
		return *x.Metaldamage
	}
	return Default_SuperGvgUserData_Metaldamage
}

type SuperGvgGuildUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guildid   *uint64             `protobuf:"varint,1,req,name=guildid" json:"guildid,omitempty"`
	Userdatas []*SuperGvgUserData `protobuf:"bytes,2,rep,name=userdatas" json:"userdatas,omitempty"`
}

func (x *SuperGvgGuildUserData) Reset() {
	*x = SuperGvgGuildUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperGvgGuildUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperGvgGuildUserData) ProtoMessage() {}

func (x *SuperGvgGuildUserData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperGvgGuildUserData.ProtoReflect.Descriptor instead.
func (*SuperGvgGuildUserData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{50}
}

func (x *SuperGvgGuildUserData) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return 0
}

func (x *SuperGvgGuildUserData) GetUserdatas() []*SuperGvgUserData {
	if x != nil {
		return x.Userdatas
	}
	return nil
}

type SuperGvgQueryUserDataFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command                 `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param         *FuBenParam              `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=37" json:"param,omitempty"`
	Guilduserdata []*SuperGvgGuildUserData `protobuf:"bytes,3,rep,name=guilduserdata" json:"guilduserdata,omitempty"`
}

// Default values for SuperGvgQueryUserDataFubenCmd fields.
const (
	Default_SuperGvgQueryUserDataFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_SuperGvgQueryUserDataFubenCmd_Param = FuBenParam_SUPERGVG_QUERY_USER_DATA
)

func (x *SuperGvgQueryUserDataFubenCmd) Reset() {
	*x = SuperGvgQueryUserDataFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperGvgQueryUserDataFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperGvgQueryUserDataFubenCmd) ProtoMessage() {}

func (x *SuperGvgQueryUserDataFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuperGvgQueryUserDataFubenCmd.ProtoReflect.Descriptor instead.
func (*SuperGvgQueryUserDataFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{51}
}

func (x *SuperGvgQueryUserDataFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SuperGvgQueryUserDataFubenCmd_Cmd
}

func (x *SuperGvgQueryUserDataFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SuperGvgQueryUserDataFubenCmd_Param
}

func (x *SuperGvgQueryUserDataFubenCmd) GetGuilduserdata() []*SuperGvgGuildUserData {
	if x != nil {
		return x.Guilduserdata
	}
	return nil
}

type MvpBattleTeamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teamid      *uint64  `protobuf:"varint,1,req,name=teamid" json:"teamid,omitempty"`
	Teamname    *string  `protobuf:"bytes,2,opt,name=teamname" json:"teamname,omitempty"`
	Killmvps    []uint32 `protobuf:"varint,3,rep,name=killmvps" json:"killmvps,omitempty"`
	Killminis   []uint32 `protobuf:"varint,4,rep,name=killminis" json:"killminis,omitempty"`
	Killusernum *uint32  `protobuf:"varint,5,opt,name=killusernum,def=0" json:"killusernum,omitempty"`
	Deadboss    []uint32 `protobuf:"varint,6,rep,name=deadboss" json:"deadboss,omitempty"`
}

// Default values for MvpBattleTeamData fields.
const (
	Default_MvpBattleTeamData_Killusernum = uint32(0)
)

func (x *MvpBattleTeamData) Reset() {
	*x = MvpBattleTeamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvpBattleTeamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvpBattleTeamData) ProtoMessage() {}

func (x *MvpBattleTeamData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvpBattleTeamData.ProtoReflect.Descriptor instead.
func (*MvpBattleTeamData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{52}
}

func (x *MvpBattleTeamData) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return 0
}

func (x *MvpBattleTeamData) GetTeamname() string {
	if x != nil && x.Teamname != nil {
		return *x.Teamname
	}
	return ""
}

func (x *MvpBattleTeamData) GetKillmvps() []uint32 {
	if x != nil {
		return x.Killmvps
	}
	return nil
}

func (x *MvpBattleTeamData) GetKillminis() []uint32 {
	if x != nil {
		return x.Killminis
	}
	return nil
}

func (x *MvpBattleTeamData) GetKillusernum() uint32 {
	if x != nil && x.Killusernum != nil {
		return *x.Killusernum
	}
	return Default_MvpBattleTeamData_Killusernum
}

func (x *MvpBattleTeamData) GetDeadboss() []uint32 {
	if x != nil {
		return x.Deadboss
	}
	return nil
}

type MvpBattleReportFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=38" json:"param,omitempty"`
	Datas []*MvpBattleTeamData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for MvpBattleReportFubenCmd fields.
const (
	Default_MvpBattleReportFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_MvpBattleReportFubenCmd_Param = FuBenParam_MVPBATTLE_END_REPORT
)

func (x *MvpBattleReportFubenCmd) Reset() {
	*x = MvpBattleReportFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MvpBattleReportFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MvpBattleReportFubenCmd) ProtoMessage() {}

func (x *MvpBattleReportFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MvpBattleReportFubenCmd.ProtoReflect.Descriptor instead.
func (*MvpBattleReportFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{53}
}

func (x *MvpBattleReportFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MvpBattleReportFubenCmd_Cmd
}

func (x *MvpBattleReportFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MvpBattleReportFubenCmd_Param
}

func (x *MvpBattleReportFubenCmd) GetDatas() []*MvpBattleTeamData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type InviteSummonBossFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd               *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param             *FuBenParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=40" json:"param,omitempty"`
	Difficulty        *EDeadBossDifficulty `protobuf:"varint,3,opt,name=difficulty,enum=Cmd.EDeadBossDifficulty" json:"difficulty,omitempty"`
	DeadbossRaidIndex *uint32              `protobuf:"varint,4,opt,name=deadboss_raid_index,json=deadbossRaidIndex" json:"deadboss_raid_index,omitempty"`
}

// Default values for InviteSummonBossFubenCmd fields.
const (
	Default_InviteSummonBossFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_InviteSummonBossFubenCmd_Param = FuBenParam_INVITE_SUMMON_DEADBOSS
)

func (x *InviteSummonBossFubenCmd) Reset() {
	*x = InviteSummonBossFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteSummonBossFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteSummonBossFubenCmd) ProtoMessage() {}

func (x *InviteSummonBossFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteSummonBossFubenCmd.ProtoReflect.Descriptor instead.
func (*InviteSummonBossFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{54}
}

func (x *InviteSummonBossFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InviteSummonBossFubenCmd_Cmd
}

func (x *InviteSummonBossFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InviteSummonBossFubenCmd_Param
}

func (x *InviteSummonBossFubenCmd) GetDifficulty() EDeadBossDifficulty {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return EDeadBossDifficulty_EDEADBOSSDIFF_MIN
}

func (x *InviteSummonBossFubenCmd) GetDeadbossRaidIndex() uint32 {
	if x != nil && x.DeadbossRaidIndex != nil {
		return *x.DeadbossRaidIndex
	}
	return 0
}

type ReplySummonBossFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param  *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=41" json:"param,omitempty"`
	Isfull *bool       `protobuf:"varint,3,opt,name=isfull,def=0" json:"isfull,omitempty"`
	Agree  *bool       `protobuf:"varint,4,opt,name=agree,def=0" json:"agree,omitempty"`
	Charid *uint64     `protobuf:"varint,5,opt,name=charid" json:"charid,omitempty"`
}

// Default values for ReplySummonBossFubenCmd fields.
const (
	Default_ReplySummonBossFubenCmd_Cmd    = Command_FUBEN_PROTOCMD
	Default_ReplySummonBossFubenCmd_Param  = FuBenParam_REPLY_SUMMON_DEADBOSS
	Default_ReplySummonBossFubenCmd_Isfull = bool(false)
	Default_ReplySummonBossFubenCmd_Agree  = bool(false)
)

func (x *ReplySummonBossFubenCmd) Reset() {
	*x = ReplySummonBossFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplySummonBossFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplySummonBossFubenCmd) ProtoMessage() {}

func (x *ReplySummonBossFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplySummonBossFubenCmd.ProtoReflect.Descriptor instead.
func (*ReplySummonBossFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{55}
}

func (x *ReplySummonBossFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReplySummonBossFubenCmd_Cmd
}

func (x *ReplySummonBossFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReplySummonBossFubenCmd_Param
}

func (x *ReplySummonBossFubenCmd) GetIsfull() bool {
	if x != nil && x.Isfull != nil {
		return *x.Isfull
	}
	return Default_ReplySummonBossFubenCmd_Isfull
}

func (x *ReplySummonBossFubenCmd) GetAgree() bool {
	if x != nil && x.Agree != nil {
		return *x.Agree
	}
	return Default_ReplySummonBossFubenCmd_Agree
}

func (x *ReplySummonBossFubenCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

type TeamPwsRaidUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid      *uint64      `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Name        *string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Killnum     *uint32      `protobuf:"varint,3,opt,name=killnum" json:"killnum,omitempty"`
	Heal        *uint32      `protobuf:"varint,4,opt,name=heal" json:"heal,omitempty"`
	Killscore   *uint32      `protobuf:"varint,5,opt,name=killscore" json:"killscore,omitempty"`
	Ballscore   *uint32      `protobuf:"varint,6,opt,name=ballscore" json:"ballscore,omitempty"`
	Buffscore   *uint32      `protobuf:"varint,7,opt,name=buffscore" json:"buffscore,omitempty"`
	Dienum      *uint32      `protobuf:"varint,8,opt,name=dienum" json:"dienum,omitempty"`
	Profession  *EProfession `protobuf:"varint,9,opt,name=profession,enum=Cmd.EProfession" json:"profession,omitempty"`
	Seasonscore *uint32      `protobuf:"varint,10,opt,name=seasonscore" json:"seasonscore,omitempty"`
}

func (x *TeamPwsRaidUserInfo) Reset() {
	*x = TeamPwsRaidUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamPwsRaidUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamPwsRaidUserInfo) ProtoMessage() {}

func (x *TeamPwsRaidUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamPwsRaidUserInfo.ProtoReflect.Descriptor instead.
func (*TeamPwsRaidUserInfo) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{56}
}

func (x *TeamPwsRaidUserInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *TeamPwsRaidUserInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TeamPwsRaidUserInfo) GetKillnum() uint32 {
	if x != nil && x.Killnum != nil {
		return *x.Killnum
	}
	return 0
}

func (x *TeamPwsRaidUserInfo) GetHeal() uint32 {
	if x != nil && x.Heal != nil {
		return *x.Heal
	}
	return 0
}

func (x *TeamPwsRaidUserInfo) GetKillscore() uint32 {
	if x != nil && x.Killscore != nil {
		return *x.Killscore
	}
	return 0
}

func (x *TeamPwsRaidUserInfo) GetBallscore() uint32 {
	if x != nil && x.Ballscore != nil {
		return *x.Ballscore
	}
	return 0
}

func (x *TeamPwsRaidUserInfo) GetBuffscore() uint32 {
	if x != nil && x.Buffscore != nil {
		return *x.Buffscore
	}
	return 0
}

func (x *TeamPwsRaidUserInfo) GetDienum() uint32 {
	if x != nil && x.Dienum != nil {
		return *x.Dienum
	}
	return 0
}

func (x *TeamPwsRaidUserInfo) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return EProfession_EPROFESSION_MIN
}

func (x *TeamPwsRaidUserInfo) GetSeasonscore() uint32 {
	if x != nil && x.Seasonscore != nil {
		return *x.Seasonscore
	}
	return 0
}

type TeamPwsRaidTeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teamid    *uint64                `protobuf:"varint,1,opt,name=teamid" json:"teamid,omitempty"`
	Color     *ETeamPwsColor         `protobuf:"varint,2,opt,name=color,enum=Cmd.ETeamPwsColor" json:"color,omitempty"`
	Userinfos []*TeamPwsRaidUserInfo `protobuf:"bytes,3,rep,name=userinfos" json:"userinfos,omitempty"`
	Avescore  *uint32                `protobuf:"varint,4,opt,name=avescore" json:"avescore,omitempty"`
}

func (x *TeamPwsRaidTeamInfo) Reset() {
	*x = TeamPwsRaidTeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamPwsRaidTeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamPwsRaidTeamInfo) ProtoMessage() {}

func (x *TeamPwsRaidTeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamPwsRaidTeamInfo.ProtoReflect.Descriptor instead.
func (*TeamPwsRaidTeamInfo) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{57}
}

func (x *TeamPwsRaidTeamInfo) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return 0
}

func (x *TeamPwsRaidTeamInfo) GetColor() ETeamPwsColor {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ETeamPwsColor_ETEAMPWS_RED
}

func (x *TeamPwsRaidTeamInfo) GetUserinfos() []*TeamPwsRaidUserInfo {
	if x != nil {
		return x.Userinfos
	}
	return nil
}

func (x *TeamPwsRaidTeamInfo) GetAvescore() uint32 {
	if x != nil && x.Avescore != nil {
		return *x.Avescore
	}
	return 0
}

type QueryTeamPwsUserInfoFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command               `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param    *FuBenParam            `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=42" json:"param,omitempty"`
	Teaminfo []*TeamPwsRaidTeamInfo `protobuf:"bytes,3,rep,name=teaminfo" json:"teaminfo,omitempty"`
}

// Default values for QueryTeamPwsUserInfoFubenCmd fields.
const (
	Default_QueryTeamPwsUserInfoFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_QueryTeamPwsUserInfoFubenCmd_Param = FuBenParam_QUERY_RAID_TEAMPWS_USERINFO
)

func (x *QueryTeamPwsUserInfoFubenCmd) Reset() {
	*x = QueryTeamPwsUserInfoFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTeamPwsUserInfoFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTeamPwsUserInfoFubenCmd) ProtoMessage() {}

func (x *QueryTeamPwsUserInfoFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTeamPwsUserInfoFubenCmd.ProtoReflect.Descriptor instead.
func (*QueryTeamPwsUserInfoFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{58}
}

func (x *QueryTeamPwsUserInfoFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryTeamPwsUserInfoFubenCmd_Cmd
}

func (x *QueryTeamPwsUserInfoFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryTeamPwsUserInfoFubenCmd_Param
}

func (x *QueryTeamPwsUserInfoFubenCmd) GetTeaminfo() []*TeamPwsRaidTeamInfo {
	if x != nil {
		return x.Teaminfo
	}
	return nil
}

type TeamPwsReportFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command               `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param       *FuBenParam            `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=43" json:"param,omitempty"`
	Teaminfo    []*TeamPwsRaidTeamInfo `protobuf:"bytes,3,rep,name=teaminfo" json:"teaminfo,omitempty"`
	Mvpuserinfo *QueryUserInfo         `protobuf:"bytes,4,opt,name=mvpuserinfo" json:"mvpuserinfo,omitempty"`
	Winteam     *ETeamPwsColor         `protobuf:"varint,5,req,name=winteam,enum=Cmd.ETeamPwsColor" json:"winteam,omitempty"`
}

// Default values for TeamPwsReportFubenCmd fields.
const (
	Default_TeamPwsReportFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_TeamPwsReportFubenCmd_Param = FuBenParam_TEAMPWS_END_REPORT
)

func (x *TeamPwsReportFubenCmd) Reset() {
	*x = TeamPwsReportFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamPwsReportFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamPwsReportFubenCmd) ProtoMessage() {}

func (x *TeamPwsReportFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamPwsReportFubenCmd.ProtoReflect.Descriptor instead.
func (*TeamPwsReportFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{59}
}

func (x *TeamPwsReportFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamPwsReportFubenCmd_Cmd
}

func (x *TeamPwsReportFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamPwsReportFubenCmd_Param
}

func (x *TeamPwsReportFubenCmd) GetTeaminfo() []*TeamPwsRaidTeamInfo {
	if x != nil {
		return x.Teaminfo
	}
	return nil
}

func (x *TeamPwsReportFubenCmd) GetMvpuserinfo() *QueryUserInfo {
	if x != nil {
		return x.Mvpuserinfo
	}
	return nil
}

func (x *TeamPwsReportFubenCmd) GetWinteam() ETeamPwsColor {
	if x != nil && x.Winteam != nil {
		return *x.Winteam
	}
	return ETeamPwsColor_ETEAMPWS_RED
}

type TeamPwsInfoSyncData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teamid   *uint64          `protobuf:"varint,1,opt,name=teamid" json:"teamid,omitempty"`
	Teamname *string          `protobuf:"bytes,2,opt,name=teamname" json:"teamname,omitempty"`
	Color    *ETeamPwsColor   `protobuf:"varint,3,opt,name=color,enum=Cmd.ETeamPwsColor" json:"color,omitempty"`
	Score    *uint32          `protobuf:"varint,4,opt,name=score,def=0" json:"score,omitempty"`
	Effectcd *uint32          `protobuf:"varint,5,opt,name=effectcd,def=0" json:"effectcd,omitempty"`
	Magicid  *uint32          `protobuf:"varint,6,opt,name=magicid,def=0" json:"magicid,omitempty"`
	Balls    []EMagicBallType `protobuf:"varint,7,rep,name=balls,enum=Cmd.EMagicBallType" json:"balls,omitempty"`
}

// Default values for TeamPwsInfoSyncData fields.
const (
	Default_TeamPwsInfoSyncData_Score    = uint32(0)
	Default_TeamPwsInfoSyncData_Effectcd = uint32(0)
	Default_TeamPwsInfoSyncData_Magicid  = uint32(0)
)

func (x *TeamPwsInfoSyncData) Reset() {
	*x = TeamPwsInfoSyncData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamPwsInfoSyncData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamPwsInfoSyncData) ProtoMessage() {}

func (x *TeamPwsInfoSyncData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamPwsInfoSyncData.ProtoReflect.Descriptor instead.
func (*TeamPwsInfoSyncData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{60}
}

func (x *TeamPwsInfoSyncData) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return 0
}

func (x *TeamPwsInfoSyncData) GetTeamname() string {
	if x != nil && x.Teamname != nil {
		return *x.Teamname
	}
	return ""
}

func (x *TeamPwsInfoSyncData) GetColor() ETeamPwsColor {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ETeamPwsColor_ETEAMPWS_RED
}

func (x *TeamPwsInfoSyncData) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return Default_TeamPwsInfoSyncData_Score
}

func (x *TeamPwsInfoSyncData) GetEffectcd() uint32 {
	if x != nil && x.Effectcd != nil {
		return *x.Effectcd
	}
	return Default_TeamPwsInfoSyncData_Effectcd
}

func (x *TeamPwsInfoSyncData) GetMagicid() uint32 {
	if x != nil && x.Magicid != nil {
		return *x.Magicid
	}
	return Default_TeamPwsInfoSyncData_Magicid
}

func (x *TeamPwsInfoSyncData) GetBalls() []EMagicBallType {
	if x != nil {
		return x.Balls
	}
	return nil
}

type TeamPwsInfoSyncFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command               `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param    *FuBenParam            `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=44" json:"param,omitempty"`
	Teaminfo []*TeamPwsInfoSyncData `protobuf:"bytes,3,rep,name=teaminfo" json:"teaminfo,omitempty"`
	Endtime  *uint32                `protobuf:"varint,4,opt,name=endtime" json:"endtime,omitempty"`
}

// Default values for TeamPwsInfoSyncFubenCmd fields.
const (
	Default_TeamPwsInfoSyncFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_TeamPwsInfoSyncFubenCmd_Param = FuBenParam_TEAMPWS_SYNC_INFO
)

func (x *TeamPwsInfoSyncFubenCmd) Reset() {
	*x = TeamPwsInfoSyncFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamPwsInfoSyncFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamPwsInfoSyncFubenCmd) ProtoMessage() {}

func (x *TeamPwsInfoSyncFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamPwsInfoSyncFubenCmd.ProtoReflect.Descriptor instead.
func (*TeamPwsInfoSyncFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{61}
}

func (x *TeamPwsInfoSyncFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamPwsInfoSyncFubenCmd_Cmd
}

func (x *TeamPwsInfoSyncFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamPwsInfoSyncFubenCmd_Param
}

func (x *TeamPwsInfoSyncFubenCmd) GetTeaminfo() []*TeamPwsInfoSyncData {
	if x != nil {
		return x.Teaminfo
	}
	return nil
}

func (x *TeamPwsInfoSyncFubenCmd) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

type UpdateTeamPwsInfoFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command               `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param    *FuBenParam            `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=47" json:"param,omitempty"`
	Teaminfo []*TeamPwsInfoSyncData `protobuf:"bytes,3,rep,name=teaminfo" json:"teaminfo,omitempty"`
}

// Default values for UpdateTeamPwsInfoFubenCmd fields.
const (
	Default_UpdateTeamPwsInfoFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_UpdateTeamPwsInfoFubenCmd_Param = FuBenParam_TEAMPWS_UPDATE_INFO
)

func (x *UpdateTeamPwsInfoFubenCmd) Reset() {
	*x = UpdateTeamPwsInfoFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeamPwsInfoFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamPwsInfoFubenCmd) ProtoMessage() {}

func (x *UpdateTeamPwsInfoFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamPwsInfoFubenCmd.ProtoReflect.Descriptor instead.
func (*UpdateTeamPwsInfoFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateTeamPwsInfoFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateTeamPwsInfoFubenCmd_Cmd
}

func (x *UpdateTeamPwsInfoFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateTeamPwsInfoFubenCmd_Param
}

func (x *UpdateTeamPwsInfoFubenCmd) GetTeaminfo() []*TeamPwsInfoSyncData {
	if x != nil {
		return x.Teaminfo
	}
	return nil
}

type SelectTeamPwsMagicFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=45" json:"param,omitempty"`
	Magicid *uint32     `protobuf:"varint,3,req,name=magicid" json:"magicid,omitempty"`
}

// Default values for SelectTeamPwsMagicFubenCmd fields.
const (
	Default_SelectTeamPwsMagicFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_SelectTeamPwsMagicFubenCmd_Param = FuBenParam_TEAMPWS_SELECT_MAGIC
)

func (x *SelectTeamPwsMagicFubenCmd) Reset() {
	*x = SelectTeamPwsMagicFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectTeamPwsMagicFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectTeamPwsMagicFubenCmd) ProtoMessage() {}

func (x *SelectTeamPwsMagicFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectTeamPwsMagicFubenCmd.ProtoReflect.Descriptor instead.
func (*SelectTeamPwsMagicFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{63}
}

func (x *SelectTeamPwsMagicFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SelectTeamPwsMagicFubenCmd_Cmd
}

func (x *SelectTeamPwsMagicFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SelectTeamPwsMagicFubenCmd_Param
}

func (x *SelectTeamPwsMagicFubenCmd) GetMagicid() uint32 {
	if x != nil && x.Magicid != nil {
		return *x.Magicid
	}
	return 0
}

type ExitMapFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=48" json:"param,omitempty"`
}

// Default values for ExitMapFubenCmd fields.
const (
	Default_ExitMapFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_ExitMapFubenCmd_Param = FuBenParam_EXIT_RAID_CMD
)

func (x *ExitMapFubenCmd) Reset() {
	*x = ExitMapFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitMapFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitMapFubenCmd) ProtoMessage() {}

func (x *ExitMapFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitMapFubenCmd.ProtoReflect.Descriptor instead.
func (*ExitMapFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{64}
}

func (x *ExitMapFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExitMapFubenCmd_Cmd
}

func (x *ExitMapFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExitMapFubenCmd_Param
}

type BeginFireFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=49" json:"param,omitempty"`
}

// Default values for BeginFireFubenCmd fields.
const (
	Default_BeginFireFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_BeginFireFubenCmd_Param = FuBenParam_BEGIN_FIRE_FUBENCMD
)

func (x *BeginFireFubenCmd) Reset() {
	*x = BeginFireFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginFireFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginFireFubenCmd) ProtoMessage() {}

func (x *BeginFireFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginFireFubenCmd.ProtoReflect.Descriptor instead.
func (*BeginFireFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{65}
}

func (x *BeginFireFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BeginFireFubenCmd_Cmd
}

func (x *BeginFireFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BeginFireFubenCmd_Param
}

type TeamExpReportFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param     *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=50" json:"param,omitempty"`
	Baseexp   *uint32     `protobuf:"varint,3,opt,name=baseexp" json:"baseexp,omitempty"`
	Jobexp    *uint32     `protobuf:"varint,4,opt,name=jobexp" json:"jobexp,omitempty"`
	Items     []*ItemInfo `protobuf:"bytes,5,rep,name=items" json:"items,omitempty"`
	Closetime *uint32     `protobuf:"varint,6,opt,name=closetime" json:"closetime,omitempty"`
}

// Default values for TeamExpReportFubenCmd fields.
const (
	Default_TeamExpReportFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_TeamExpReportFubenCmd_Param = FuBenParam_TEAMEXP_RAID_REPORT
)

func (x *TeamExpReportFubenCmd) Reset() {
	*x = TeamExpReportFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamExpReportFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamExpReportFubenCmd) ProtoMessage() {}

func (x *TeamExpReportFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamExpReportFubenCmd.ProtoReflect.Descriptor instead.
func (*TeamExpReportFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{66}
}

func (x *TeamExpReportFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamExpReportFubenCmd_Cmd
}

func (x *TeamExpReportFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamExpReportFubenCmd_Param
}

func (x *TeamExpReportFubenCmd) GetBaseexp() uint32 {
	if x != nil && x.Baseexp != nil {
		return *x.Baseexp
	}
	return 0
}

func (x *TeamExpReportFubenCmd) GetJobexp() uint32 {
	if x != nil && x.Jobexp != nil {
		return *x.Jobexp
	}
	return 0
}

func (x *TeamExpReportFubenCmd) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *TeamExpReportFubenCmd) GetClosetime() uint32 {
	if x != nil && x.Closetime != nil {
		return *x.Closetime
	}
	return 0
}

type BuyExpRaidItemFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param  *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=51" json:"param,omitempty"`
	Itemid *uint32     `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	Num    *uint32     `protobuf:"varint,4,opt,name=num" json:"num,omitempty"`
}

// Default values for BuyExpRaidItemFubenCmd fields.
const (
	Default_BuyExpRaidItemFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_BuyExpRaidItemFubenCmd_Param = FuBenParam_TEAMEXP_BUY_ITEM
)

func (x *BuyExpRaidItemFubenCmd) Reset() {
	*x = BuyExpRaidItemFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyExpRaidItemFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyExpRaidItemFubenCmd) ProtoMessage() {}

func (x *BuyExpRaidItemFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyExpRaidItemFubenCmd.ProtoReflect.Descriptor instead.
func (*BuyExpRaidItemFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{67}
}

func (x *BuyExpRaidItemFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuyExpRaidItemFubenCmd_Cmd
}

func (x *BuyExpRaidItemFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuyExpRaidItemFubenCmd_Param
}

func (x *BuyExpRaidItemFubenCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *BuyExpRaidItemFubenCmd) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type TeamExpSyncFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=52" json:"param,omitempty"`
	Endtime *uint32     `protobuf:"varint,3,opt,name=endtime,def=0" json:"endtime,omitempty"`
}

// Default values for TeamExpSyncFubenCmd fields.
const (
	Default_TeamExpSyncFubenCmd_Cmd     = Command_FUBEN_PROTOCMD
	Default_TeamExpSyncFubenCmd_Param   = FuBenParam_TEAMEXP_SYNC_CMD
	Default_TeamExpSyncFubenCmd_Endtime = uint32(0)
)

func (x *TeamExpSyncFubenCmd) Reset() {
	*x = TeamExpSyncFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamExpSyncFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamExpSyncFubenCmd) ProtoMessage() {}

func (x *TeamExpSyncFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamExpSyncFubenCmd.ProtoReflect.Descriptor instead.
func (*TeamExpSyncFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{68}
}

func (x *TeamExpSyncFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamExpSyncFubenCmd_Cmd
}

func (x *TeamExpSyncFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamExpSyncFubenCmd_Param
}

func (x *TeamExpSyncFubenCmd) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return Default_TeamExpSyncFubenCmd_Endtime
}

type TeamReliveCountFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param    *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=53" json:"param,omitempty"`
	Count    *uint32     `protobuf:"varint,3,opt,name=count,def=0" json:"count,omitempty"`
	Maxcount *uint32     `protobuf:"varint,4,opt,name=maxcount" json:"maxcount,omitempty"`
}

// Default values for TeamReliveCountFubenCmd fields.
const (
	Default_TeamReliveCountFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_TeamReliveCountFubenCmd_Param = FuBenParam_TEAM_RELIVE_COUNT
	Default_TeamReliveCountFubenCmd_Count = uint32(0)
)

func (x *TeamReliveCountFubenCmd) Reset() {
	*x = TeamReliveCountFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamReliveCountFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamReliveCountFubenCmd) ProtoMessage() {}

func (x *TeamReliveCountFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamReliveCountFubenCmd.ProtoReflect.Descriptor instead.
func (*TeamReliveCountFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{69}
}

func (x *TeamReliveCountFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamReliveCountFubenCmd_Cmd
}

func (x *TeamReliveCountFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamReliveCountFubenCmd_Param
}

func (x *TeamReliveCountFubenCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_TeamReliveCountFubenCmd_Count
}

func (x *TeamReliveCountFubenCmd) GetMaxcount() uint32 {
	if x != nil && x.Maxcount != nil {
		return *x.Maxcount
	}
	return 0
}

type TeamGroupRaidUpdateChipNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=54" json:"param,omitempty"`
	Chipnum *uint32     `protobuf:"varint,3,opt,name=chipnum,def=0" json:"chipnum,omitempty"`
}

// Default values for TeamGroupRaidUpdateChipNum fields.
const (
	Default_TeamGroupRaidUpdateChipNum_Cmd     = Command_FUBEN_PROTOCMD
	Default_TeamGroupRaidUpdateChipNum_Param   = FuBenParam_TEAM_GROUP_RAID_CHIP
	Default_TeamGroupRaidUpdateChipNum_Chipnum = uint32(0)
)

func (x *TeamGroupRaidUpdateChipNum) Reset() {
	*x = TeamGroupRaidUpdateChipNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamGroupRaidUpdateChipNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamGroupRaidUpdateChipNum) ProtoMessage() {}

func (x *TeamGroupRaidUpdateChipNum) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamGroupRaidUpdateChipNum.ProtoReflect.Descriptor instead.
func (*TeamGroupRaidUpdateChipNum) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{70}
}

func (x *TeamGroupRaidUpdateChipNum) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamGroupRaidUpdateChipNum_Cmd
}

func (x *TeamGroupRaidUpdateChipNum) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamGroupRaidUpdateChipNum_Param
}

func (x *TeamGroupRaidUpdateChipNum) GetChipnum() uint32 {
	if x != nil && x.Chipnum != nil {
		return *x.Chipnum
	}
	return Default_TeamGroupRaidUpdateChipNum_Chipnum
}

type GroupRaidShowData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid     *uint64 `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Profession *uint32 `protobuf:"varint,2,opt,name=profession" json:"profession,omitempty"`
	Name       *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Damage     *uint32 `protobuf:"varint,4,opt,name=damage,def=0" json:"damage,omitempty"`
	Bedamage   *uint32 `protobuf:"varint,5,opt,name=bedamage,def=0" json:"bedamage,omitempty"`
	Heal       *uint32 `protobuf:"varint,6,opt,name=heal,def=0" json:"heal,omitempty"`
	Dienum     *uint32 `protobuf:"varint,7,opt,name=dienum,def=0" json:"dienum,omitempty"`
}

// Default values for GroupRaidShowData fields.
const (
	Default_GroupRaidShowData_Damage   = uint32(0)
	Default_GroupRaidShowData_Bedamage = uint32(0)
	Default_GroupRaidShowData_Heal     = uint32(0)
	Default_GroupRaidShowData_Dienum   = uint32(0)
)

func (x *GroupRaidShowData) Reset() {
	*x = GroupRaidShowData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRaidShowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRaidShowData) ProtoMessage() {}

func (x *GroupRaidShowData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRaidShowData.ProtoReflect.Descriptor instead.
func (*GroupRaidShowData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{71}
}

func (x *GroupRaidShowData) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *GroupRaidShowData) GetProfession() uint32 {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return 0
}

func (x *GroupRaidShowData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GroupRaidShowData) GetDamage() uint32 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return Default_GroupRaidShowData_Damage
}

func (x *GroupRaidShowData) GetBedamage() uint32 {
	if x != nil && x.Bedamage != nil {
		return *x.Bedamage
	}
	return Default_GroupRaidShowData_Bedamage
}

func (x *GroupRaidShowData) GetHeal() uint32 {
	if x != nil && x.Heal != nil {
		return *x.Heal
	}
	return Default_GroupRaidShowData_Heal
}

func (x *GroupRaidShowData) GetDienum() uint32 {
	if x != nil && x.Dienum != nil {
		return *x.Dienum
	}
	return Default_GroupRaidShowData_Dienum
}

type GroupRaidTeamShowData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raidid    *uint32              `protobuf:"varint,1,opt,name=raidid,def=0" json:"raidid,omitempty"`
	Datas     []*GroupRaidShowData `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
	BossIndex *uint32              `protobuf:"varint,3,opt,name=boss_index,json=bossIndex" json:"boss_index,omitempty"`
}

// Default values for GroupRaidTeamShowData fields.
const (
	Default_GroupRaidTeamShowData_Raidid = uint32(0)
)

func (x *GroupRaidTeamShowData) Reset() {
	*x = GroupRaidTeamShowData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRaidTeamShowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRaidTeamShowData) ProtoMessage() {}

func (x *GroupRaidTeamShowData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRaidTeamShowData.ProtoReflect.Descriptor instead.
func (*GroupRaidTeamShowData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{72}
}

func (x *GroupRaidTeamShowData) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return Default_GroupRaidTeamShowData_Raidid
}

func (x *GroupRaidTeamShowData) GetDatas() []*GroupRaidShowData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *GroupRaidTeamShowData) GetBossIndex() uint32 {
	if x != nil && x.BossIndex != nil {
		return *x.BossIndex
	}
	return 0
}

type QueryTeamGroupRaidUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command                 `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam              `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=55" json:"param,omitempty"`
	Current *GroupRaidTeamShowData   `protobuf:"bytes,3,opt,name=current" json:"current,omitempty"`
	History []*GroupRaidTeamShowData `protobuf:"bytes,4,rep,name=history" json:"history,omitempty"`
}

// Default values for QueryTeamGroupRaidUserInfo fields.
const (
	Default_QueryTeamGroupRaidUserInfo_Cmd   = Command_FUBEN_PROTOCMD
	Default_QueryTeamGroupRaidUserInfo_Param = FuBenParam_TEAM_GROUP_RAID_QUERY_INFO
)

func (x *QueryTeamGroupRaidUserInfo) Reset() {
	*x = QueryTeamGroupRaidUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTeamGroupRaidUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTeamGroupRaidUserInfo) ProtoMessage() {}

func (x *QueryTeamGroupRaidUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTeamGroupRaidUserInfo.ProtoReflect.Descriptor instead.
func (*QueryTeamGroupRaidUserInfo) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{73}
}

func (x *QueryTeamGroupRaidUserInfo) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryTeamGroupRaidUserInfo_Cmd
}

func (x *QueryTeamGroupRaidUserInfo) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryTeamGroupRaidUserInfo_Param
}

func (x *QueryTeamGroupRaidUserInfo) GetCurrent() *GroupRaidTeamShowData {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *QueryTeamGroupRaidUserInfo) GetHistory() []*GroupRaidTeamShowData {
	if x != nil {
		return x.History
	}
	return nil
}

type GroupRaidStateSyncFuBenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=57" json:"param,omitempty"`
	State *EGroupRaidSceneState `protobuf:"varint,3,opt,name=state,enum=Cmd.EGroupRaidSceneState,def=0" json:"state,omitempty"`
}

// Default values for GroupRaidStateSyncFuBenCmd fields.
const (
	Default_GroupRaidStateSyncFuBenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_GroupRaidStateSyncFuBenCmd_Param = FuBenParam_TEAM_GROUP_RAID_STATE
	Default_GroupRaidStateSyncFuBenCmd_State = EGroupRaidSceneState_EGROUPRAIDSCENE_MIN
)

func (x *GroupRaidStateSyncFuBenCmd) Reset() {
	*x = GroupRaidStateSyncFuBenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRaidStateSyncFuBenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRaidStateSyncFuBenCmd) ProtoMessage() {}

func (x *GroupRaidStateSyncFuBenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRaidStateSyncFuBenCmd.ProtoReflect.Descriptor instead.
func (*GroupRaidStateSyncFuBenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{74}
}

func (x *GroupRaidStateSyncFuBenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GroupRaidStateSyncFuBenCmd_Cmd
}

func (x *GroupRaidStateSyncFuBenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GroupRaidStateSyncFuBenCmd_Param
}

func (x *GroupRaidStateSyncFuBenCmd) GetState() EGroupRaidSceneState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_GroupRaidStateSyncFuBenCmd_State
}

type TeamExpQueryInfoFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param       *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=56" json:"param,omitempty"`
	Rewardtimes *uint32     `protobuf:"varint,3,opt,name=rewardtimes,def=0" json:"rewardtimes,omitempty"`
	Totaltimes  *uint32     `protobuf:"varint,4,opt,name=totaltimes,def=0" json:"totaltimes,omitempty"`
}

// Default values for TeamExpQueryInfoFubenCmd fields.
const (
	Default_TeamExpQueryInfoFubenCmd_Cmd         = Command_FUBEN_PROTOCMD
	Default_TeamExpQueryInfoFubenCmd_Param       = FuBenParam_TEAMEXP_QUERY_INFO
	Default_TeamExpQueryInfoFubenCmd_Rewardtimes = uint32(0)
	Default_TeamExpQueryInfoFubenCmd_Totaltimes  = uint32(0)
)

func (x *TeamExpQueryInfoFubenCmd) Reset() {
	*x = TeamExpQueryInfoFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamExpQueryInfoFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamExpQueryInfoFubenCmd) ProtoMessage() {}

func (x *TeamExpQueryInfoFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamExpQueryInfoFubenCmd.ProtoReflect.Descriptor instead.
func (*TeamExpQueryInfoFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{75}
}

func (x *TeamExpQueryInfoFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamExpQueryInfoFubenCmd_Cmd
}

func (x *TeamExpQueryInfoFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamExpQueryInfoFubenCmd_Param
}

func (x *TeamExpQueryInfoFubenCmd) GetRewardtimes() uint32 {
	if x != nil && x.Rewardtimes != nil {
		return *x.Rewardtimes
	}
	return Default_TeamExpQueryInfoFubenCmd_Rewardtimes
}

func (x *TeamExpQueryInfoFubenCmd) GetTotaltimes() uint32 {
	if x != nil && x.Totaltimes != nil {
		return *x.Totaltimes
	}
	return Default_TeamExpQueryInfoFubenCmd_Totaltimes
}

type GroupRaidFourthShowData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid *uint64 `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Layer  *uint32 `protobuf:"varint,2,opt,name=layer" json:"layer,omitempty"`
}

func (x *GroupRaidFourthShowData) Reset() {
	*x = GroupRaidFourthShowData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRaidFourthShowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRaidFourthShowData) ProtoMessage() {}

func (x *GroupRaidFourthShowData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRaidFourthShowData.ProtoReflect.Descriptor instead.
func (*GroupRaidFourthShowData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{76}
}

func (x *GroupRaidFourthShowData) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *GroupRaidFourthShowData) GetLayer() uint32 {
	if x != nil && x.Layer != nil {
		return *x.Layer
	}
	return 0
}

type UpdateGroupRaidFourthShowData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command                   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam                `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=60" json:"param,omitempty"`
	Inner []*GroupRaidFourthShowData `protobuf:"bytes,3,rep,name=inner" json:"inner,omitempty"`
	Outer []*GroupRaidFourthShowData `protobuf:"bytes,4,rep,name=outer" json:"outer,omitempty"`
}

// Default values for UpdateGroupRaidFourthShowData fields.
const (
	Default_UpdateGroupRaidFourthShowData_Cmd   = Command_FUBEN_PROTOCMD
	Default_UpdateGroupRaidFourthShowData_Param = FuBenParam_TEAM_GROUP_FOURTH_UPDATE
)

func (x *UpdateGroupRaidFourthShowData) Reset() {
	*x = UpdateGroupRaidFourthShowData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupRaidFourthShowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupRaidFourthShowData) ProtoMessage() {}

func (x *UpdateGroupRaidFourthShowData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupRaidFourthShowData.ProtoReflect.Descriptor instead.
func (*UpdateGroupRaidFourthShowData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{77}
}

func (x *UpdateGroupRaidFourthShowData) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateGroupRaidFourthShowData_Cmd
}

func (x *UpdateGroupRaidFourthShowData) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateGroupRaidFourthShowData_Param
}

func (x *UpdateGroupRaidFourthShowData) GetInner() []*GroupRaidFourthShowData {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *UpdateGroupRaidFourthShowData) GetOuter() []*GroupRaidFourthShowData {
	if x != nil {
		return x.Outer
	}
	return nil
}

type QueryGroupRaidFourthShowData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=59" json:"param,omitempty"`
	Open  *bool       `protobuf:"varint,3,opt,name=open,def=0" json:"open,omitempty"`
}

// Default values for QueryGroupRaidFourthShowData fields.
const (
	Default_QueryGroupRaidFourthShowData_Cmd   = Command_FUBEN_PROTOCMD
	Default_QueryGroupRaidFourthShowData_Param = FuBenParam_TEAM_GROUP_FOURTH_QUERY
	Default_QueryGroupRaidFourthShowData_Open  = bool(false)
)

func (x *QueryGroupRaidFourthShowData) Reset() {
	*x = QueryGroupRaidFourthShowData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGroupRaidFourthShowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGroupRaidFourthShowData) ProtoMessage() {}

func (x *QueryGroupRaidFourthShowData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGroupRaidFourthShowData.ProtoReflect.Descriptor instead.
func (*QueryGroupRaidFourthShowData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{78}
}

func (x *QueryGroupRaidFourthShowData) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryGroupRaidFourthShowData_Cmd
}

func (x *QueryGroupRaidFourthShowData) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryGroupRaidFourthShowData_Param
}

func (x *QueryGroupRaidFourthShowData) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return Default_QueryGroupRaidFourthShowData_Open
}

type GroupRaidFourthGoOuterCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=61" json:"param,omitempty"`
	Npcguid *uint64     `protobuf:"varint,3,req,name=npcguid" json:"npcguid,omitempty"`
}

// Default values for GroupRaidFourthGoOuterCmd fields.
const (
	Default_GroupRaidFourthGoOuterCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_GroupRaidFourthGoOuterCmd_Param = FuBenParam_TEAM_GROUP_FOURTH_GOOUTER
)

func (x *GroupRaidFourthGoOuterCmd) Reset() {
	*x = GroupRaidFourthGoOuterCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRaidFourthGoOuterCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRaidFourthGoOuterCmd) ProtoMessage() {}

func (x *GroupRaidFourthGoOuterCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRaidFourthGoOuterCmd.ProtoReflect.Descriptor instead.
func (*GroupRaidFourthGoOuterCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{79}
}

func (x *GroupRaidFourthGoOuterCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GroupRaidFourthGoOuterCmd_Cmd
}

func (x *GroupRaidFourthGoOuterCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GroupRaidFourthGoOuterCmd_Param
}

func (x *GroupRaidFourthGoOuterCmd) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return 0
}

type RaidStageSyncFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=62" json:"param,omitempty"`
	Stage *uint32     `protobuf:"varint,3,opt,name=stage,def=0" json:"stage,omitempty"`
}

// Default values for RaidStageSyncFubenCmd fields.
const (
	Default_RaidStageSyncFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_RaidStageSyncFubenCmd_Param = FuBenParam_RAID_STAGE_SYNC
	Default_RaidStageSyncFubenCmd_Stage = uint32(0)
)

func (x *RaidStageSyncFubenCmd) Reset() {
	*x = RaidStageSyncFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidStageSyncFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidStageSyncFubenCmd) ProtoMessage() {}

func (x *RaidStageSyncFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidStageSyncFubenCmd.ProtoReflect.Descriptor instead.
func (*RaidStageSyncFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{80}
}

func (x *RaidStageSyncFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RaidStageSyncFubenCmd_Cmd
}

func (x *RaidStageSyncFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RaidStageSyncFubenCmd_Param
}

func (x *RaidStageSyncFubenCmd) GetStage() uint32 {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return Default_RaidStageSyncFubenCmd_Stage
}

type ThanksGivingMonsterFuBenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param    *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=63" json:"param,omitempty"`
	Elitenum *int32      `protobuf:"varint,3,opt,name=elitenum,def=0" json:"elitenum,omitempty"`
	Mininum  *int32      `protobuf:"varint,4,opt,name=mininum,def=-1" json:"mininum,omitempty"`
	Mvpnum   *int32      `protobuf:"varint,5,opt,name=mvpnum,def=-1" json:"mvpnum,omitempty"`
}

// Default values for ThanksGivingMonsterFuBenCmd fields.
const (
	Default_ThanksGivingMonsterFuBenCmd_Cmd      = Command_FUBEN_PROTOCMD
	Default_ThanksGivingMonsterFuBenCmd_Param    = FuBenParam_THANKSGIVING_MONSTER_NUM
	Default_ThanksGivingMonsterFuBenCmd_Elitenum = int32(0)
	Default_ThanksGivingMonsterFuBenCmd_Mininum  = int32(-1)
	Default_ThanksGivingMonsterFuBenCmd_Mvpnum   = int32(-1)
)

func (x *ThanksGivingMonsterFuBenCmd) Reset() {
	*x = ThanksGivingMonsterFuBenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThanksGivingMonsterFuBenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThanksGivingMonsterFuBenCmd) ProtoMessage() {}

func (x *ThanksGivingMonsterFuBenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThanksGivingMonsterFuBenCmd.ProtoReflect.Descriptor instead.
func (*ThanksGivingMonsterFuBenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{81}
}

func (x *ThanksGivingMonsterFuBenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ThanksGivingMonsterFuBenCmd_Cmd
}

func (x *ThanksGivingMonsterFuBenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ThanksGivingMonsterFuBenCmd_Param
}

func (x *ThanksGivingMonsterFuBenCmd) GetElitenum() int32 {
	if x != nil && x.Elitenum != nil {
		return *x.Elitenum
	}
	return Default_ThanksGivingMonsterFuBenCmd_Elitenum
}

func (x *ThanksGivingMonsterFuBenCmd) GetMininum() int32 {
	if x != nil && x.Mininum != nil {
		return *x.Mininum
	}
	return Default_ThanksGivingMonsterFuBenCmd_Mininum
}

func (x *ThanksGivingMonsterFuBenCmd) GetMvpnum() int32 {
	if x != nil && x.Mvpnum != nil {
		return *x.Mvpnum
	}
	return Default_ThanksGivingMonsterFuBenCmd_Mvpnum
}

type KumamotoOperFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=58" json:"param,omitempty"`
	Type  *EKumamotoOper `protobuf:"varint,3,opt,name=type,enum=Cmd.EKumamotoOper,def=1" json:"type,omitempty"`
	Value *uint32        `protobuf:"varint,4,opt,name=value,def=0" json:"value,omitempty"`
}

// Default values for KumamotoOperFubenCmd fields.
const (
	Default_KumamotoOperFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_KumamotoOperFubenCmd_Param = FuBenParam_KUMAMOTO_OPER_CMD
	Default_KumamotoOperFubenCmd_Type  = EKumamotoOper_EKUMAMOTOOPER_CREATE
	Default_KumamotoOperFubenCmd_Value = uint32(0)
)

func (x *KumamotoOperFubenCmd) Reset() {
	*x = KumamotoOperFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KumamotoOperFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KumamotoOperFubenCmd) ProtoMessage() {}

func (x *KumamotoOperFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KumamotoOperFubenCmd.ProtoReflect.Descriptor instead.
func (*KumamotoOperFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{82}
}

func (x *KumamotoOperFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_KumamotoOperFubenCmd_Cmd
}

func (x *KumamotoOperFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_KumamotoOperFubenCmd_Param
}

func (x *KumamotoOperFubenCmd) GetType() EKumamotoOper {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_KumamotoOperFubenCmd_Type
}

func (x *KumamotoOperFubenCmd) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_KumamotoOperFubenCmd_Value
}

type OthelloOccupyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pointid      *uint32 `protobuf:"varint,1,opt,name=pointid,def=0" json:"pointid,omitempty"`
	Occupycolor  *uint32 `protobuf:"varint,2,opt,name=occupycolor,def=0" json:"occupycolor,omitempty"`
	Redprogress  *uint32 `protobuf:"varint,3,opt,name=redprogress,def=0" json:"redprogress,omitempty"`
	Blueprogress *uint32 `protobuf:"varint,4,opt,name=blueprogress,def=0" json:"blueprogress,omitempty"`
}

// Default values for OthelloOccupyItem fields.
const (
	Default_OthelloOccupyItem_Pointid      = uint32(0)
	Default_OthelloOccupyItem_Occupycolor  = uint32(0)
	Default_OthelloOccupyItem_Redprogress  = uint32(0)
	Default_OthelloOccupyItem_Blueprogress = uint32(0)
)

func (x *OthelloOccupyItem) Reset() {
	*x = OthelloOccupyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OthelloOccupyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OthelloOccupyItem) ProtoMessage() {}

func (x *OthelloOccupyItem) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OthelloOccupyItem.ProtoReflect.Descriptor instead.
func (*OthelloOccupyItem) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{83}
}

func (x *OthelloOccupyItem) GetPointid() uint32 {
	if x != nil && x.Pointid != nil {
		return *x.Pointid
	}
	return Default_OthelloOccupyItem_Pointid
}

func (x *OthelloOccupyItem) GetOccupycolor() uint32 {
	if x != nil && x.Occupycolor != nil {
		return *x.Occupycolor
	}
	return Default_OthelloOccupyItem_Occupycolor
}

func (x *OthelloOccupyItem) GetRedprogress() uint32 {
	if x != nil && x.Redprogress != nil {
		return *x.Redprogress
	}
	return Default_OthelloOccupyItem_Redprogress
}

func (x *OthelloOccupyItem) GetBlueprogress() uint32 {
	if x != nil && x.Blueprogress != nil {
		return *x.Blueprogress
	}
	return Default_OthelloOccupyItem_Blueprogress
}

type OthelloPointOccupyPowerFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param  *FuBenParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=64" json:"param,omitempty"`
	Occupy []*OthelloOccupyItem `protobuf:"bytes,3,rep,name=occupy" json:"occupy,omitempty"`
}

// Default values for OthelloPointOccupyPowerFubenCmd fields.
const (
	Default_OthelloPointOccupyPowerFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_OthelloPointOccupyPowerFubenCmd_Param = FuBenParam_OTHELLO_POINT_OCCUPY_POWER
)

func (x *OthelloPointOccupyPowerFubenCmd) Reset() {
	*x = OthelloPointOccupyPowerFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OthelloPointOccupyPowerFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OthelloPointOccupyPowerFubenCmd) ProtoMessage() {}

func (x *OthelloPointOccupyPowerFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OthelloPointOccupyPowerFubenCmd.ProtoReflect.Descriptor instead.
func (*OthelloPointOccupyPowerFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{84}
}

func (x *OthelloPointOccupyPowerFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_OthelloPointOccupyPowerFubenCmd_Cmd
}

func (x *OthelloPointOccupyPowerFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_OthelloPointOccupyPowerFubenCmd_Param
}

func (x *OthelloPointOccupyPowerFubenCmd) GetOccupy() []*OthelloOccupyItem {
	if x != nil {
		return x.Occupy
	}
	return nil
}

type OthelloInfoSyncData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teamid *uint64 `protobuf:"varint,1,opt,name=teamid" json:"teamid,omitempty"`
	Color  *uint32 `protobuf:"varint,2,opt,name=color" json:"color,omitempty"`
	Score  *uint32 `protobuf:"varint,3,opt,name=score,def=0" json:"score,omitempty"`
}

// Default values for OthelloInfoSyncData fields.
const (
	Default_OthelloInfoSyncData_Score = uint32(0)
)

func (x *OthelloInfoSyncData) Reset() {
	*x = OthelloInfoSyncData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OthelloInfoSyncData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OthelloInfoSyncData) ProtoMessage() {}

func (x *OthelloInfoSyncData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OthelloInfoSyncData.ProtoReflect.Descriptor instead.
func (*OthelloInfoSyncData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{85}
}

func (x *OthelloInfoSyncData) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return 0
}

func (x *OthelloInfoSyncData) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *OthelloInfoSyncData) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return Default_OthelloInfoSyncData_Score
}

type OthelloInfoSyncFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command               `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param    *FuBenParam            `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=65" json:"param,omitempty"`
	Teaminfo []*OthelloInfoSyncData `protobuf:"bytes,3,rep,name=teaminfo" json:"teaminfo,omitempty"`
	Endtime  *uint32                `protobuf:"varint,4,opt,name=endtime" json:"endtime,omitempty"`
}

// Default values for OthelloInfoSyncFubenCmd fields.
const (
	Default_OthelloInfoSyncFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_OthelloInfoSyncFubenCmd_Param = FuBenParam_OTHELLO_SYNC_INFO
)

func (x *OthelloInfoSyncFubenCmd) Reset() {
	*x = OthelloInfoSyncFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OthelloInfoSyncFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OthelloInfoSyncFubenCmd) ProtoMessage() {}

func (x *OthelloInfoSyncFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OthelloInfoSyncFubenCmd.ProtoReflect.Descriptor instead.
func (*OthelloInfoSyncFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{86}
}

func (x *OthelloInfoSyncFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_OthelloInfoSyncFubenCmd_Cmd
}

func (x *OthelloInfoSyncFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_OthelloInfoSyncFubenCmd_Param
}

func (x *OthelloInfoSyncFubenCmd) GetTeaminfo() []*OthelloInfoSyncData {
	if x != nil {
		return x.Teaminfo
	}
	return nil
}

func (x *OthelloInfoSyncFubenCmd) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

type OthelloRaidUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid      *uint64      `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Name        *string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Profession  *EProfession `protobuf:"varint,3,opt,name=profession,enum=Cmd.EProfession" json:"profession,omitempty"`
	Killnum     *uint32      `protobuf:"varint,4,opt,name=killnum" json:"killnum,omitempty"`
	Dienum      *uint32      `protobuf:"varint,5,opt,name=dienum" json:"dienum,omitempty"`
	Heal        *uint32      `protobuf:"varint,6,opt,name=heal" json:"heal,omitempty"`
	Killscore   *uint32      `protobuf:"varint,7,opt,name=killscore" json:"killscore,omitempty"`
	Occupyscore *uint32      `protobuf:"varint,8,opt,name=occupyscore" json:"occupyscore,omitempty"`
	Seasonscore *uint32      `protobuf:"varint,9,opt,name=seasonscore" json:"seasonscore,omitempty"`
}

func (x *OthelloRaidUserInfo) Reset() {
	*x = OthelloRaidUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OthelloRaidUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OthelloRaidUserInfo) ProtoMessage() {}

func (x *OthelloRaidUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OthelloRaidUserInfo.ProtoReflect.Descriptor instead.
func (*OthelloRaidUserInfo) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{87}
}

func (x *OthelloRaidUserInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *OthelloRaidUserInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OthelloRaidUserInfo) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return EProfession_EPROFESSION_MIN
}

func (x *OthelloRaidUserInfo) GetKillnum() uint32 {
	if x != nil && x.Killnum != nil {
		return *x.Killnum
	}
	return 0
}

func (x *OthelloRaidUserInfo) GetDienum() uint32 {
	if x != nil && x.Dienum != nil {
		return *x.Dienum
	}
	return 0
}

func (x *OthelloRaidUserInfo) GetHeal() uint32 {
	if x != nil && x.Heal != nil {
		return *x.Heal
	}
	return 0
}

func (x *OthelloRaidUserInfo) GetKillscore() uint32 {
	if x != nil && x.Killscore != nil {
		return *x.Killscore
	}
	return 0
}

func (x *OthelloRaidUserInfo) GetOccupyscore() uint32 {
	if x != nil && x.Occupyscore != nil {
		return *x.Occupyscore
	}
	return 0
}

func (x *OthelloRaidUserInfo) GetSeasonscore() uint32 {
	if x != nil && x.Seasonscore != nil {
		return *x.Seasonscore
	}
	return 0
}

type OthelloRaidTeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teamid    *uint64                `protobuf:"varint,1,opt,name=teamid" json:"teamid,omitempty"`
	Color     *uint32                `protobuf:"varint,2,opt,name=color" json:"color,omitempty"`
	Avescore  *uint32                `protobuf:"varint,3,opt,name=avescore" json:"avescore,omitempty"`
	Userinfos []*OthelloRaidUserInfo `protobuf:"bytes,4,rep,name=userinfos" json:"userinfos,omitempty"`
}

func (x *OthelloRaidTeamInfo) Reset() {
	*x = OthelloRaidTeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OthelloRaidTeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OthelloRaidTeamInfo) ProtoMessage() {}

func (x *OthelloRaidTeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OthelloRaidTeamInfo.ProtoReflect.Descriptor instead.
func (*OthelloRaidTeamInfo) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{88}
}

func (x *OthelloRaidTeamInfo) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return 0
}

func (x *OthelloRaidTeamInfo) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *OthelloRaidTeamInfo) GetAvescore() uint32 {
	if x != nil && x.Avescore != nil {
		return *x.Avescore
	}
	return 0
}

func (x *OthelloRaidTeamInfo) GetUserinfos() []*OthelloRaidUserInfo {
	if x != nil {
		return x.Userinfos
	}
	return nil
}

type QueryOthelloUserInfoFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command               `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param    *FuBenParam            `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=66" json:"param,omitempty"`
	Teaminfo []*OthelloRaidTeamInfo `protobuf:"bytes,3,rep,name=teaminfo" json:"teaminfo,omitempty"`
}

// Default values for QueryOthelloUserInfoFubenCmd fields.
const (
	Default_QueryOthelloUserInfoFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_QueryOthelloUserInfoFubenCmd_Param = FuBenParam_QUERY_RAID_OTHELLO_USERINFO
)

func (x *QueryOthelloUserInfoFubenCmd) Reset() {
	*x = QueryOthelloUserInfoFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOthelloUserInfoFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOthelloUserInfoFubenCmd) ProtoMessage() {}

func (x *QueryOthelloUserInfoFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOthelloUserInfoFubenCmd.ProtoReflect.Descriptor instead.
func (*QueryOthelloUserInfoFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{89}
}

func (x *QueryOthelloUserInfoFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryOthelloUserInfoFubenCmd_Cmd
}

func (x *QueryOthelloUserInfoFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryOthelloUserInfoFubenCmd_Param
}

func (x *QueryOthelloUserInfoFubenCmd) GetTeaminfo() []*OthelloRaidTeamInfo {
	if x != nil {
		return x.Teaminfo
	}
	return nil
}

type OthelloReportFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command               `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param       *FuBenParam            `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=67" json:"param,omitempty"`
	Winteam     *uint32                `protobuf:"varint,3,req,name=winteam,def=0" json:"winteam,omitempty"`
	Teaminfo    []*OthelloRaidTeamInfo `protobuf:"bytes,4,rep,name=teaminfo" json:"teaminfo,omitempty"`
	Mvpuserinfo *QueryUserInfo         `protobuf:"bytes,5,opt,name=mvpuserinfo" json:"mvpuserinfo,omitempty"`
}

// Default values for OthelloReportFubenCmd fields.
const (
	Default_OthelloReportFubenCmd_Cmd     = Command_FUBEN_PROTOCMD
	Default_OthelloReportFubenCmd_Param   = FuBenParam_OTHELLO_END_REPORT
	Default_OthelloReportFubenCmd_Winteam = uint32(0)
)

func (x *OthelloReportFubenCmd) Reset() {
	*x = OthelloReportFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OthelloReportFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OthelloReportFubenCmd) ProtoMessage() {}

func (x *OthelloReportFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OthelloReportFubenCmd.ProtoReflect.Descriptor instead.
func (*OthelloReportFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{90}
}

func (x *OthelloReportFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_OthelloReportFubenCmd_Cmd
}

func (x *OthelloReportFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_OthelloReportFubenCmd_Param
}

func (x *OthelloReportFubenCmd) GetWinteam() uint32 {
	if x != nil && x.Winteam != nil {
		return *x.Winteam
	}
	return Default_OthelloReportFubenCmd_Winteam
}

func (x *OthelloReportFubenCmd) GetTeaminfo() []*OthelloRaidTeamInfo {
	if x != nil {
		return x.Teaminfo
	}
	return nil
}

func (x *OthelloReportFubenCmd) GetMvpuserinfo() *QueryUserInfo {
	if x != nil {
		return x.Mvpuserinfo
	}
	return nil
}

type RoguelikeUnlockSceneSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param     *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=68" json:"param,omitempty"`
	Unlockids []uint32    `protobuf:"varint,3,rep,name=unlockids" json:"unlockids,omitempty"`
}

// Default values for RoguelikeUnlockSceneSync fields.
const (
	Default_RoguelikeUnlockSceneSync_Cmd   = Command_FUBEN_PROTOCMD
	Default_RoguelikeUnlockSceneSync_Param = FuBenParam_ROGUELIKE_SYNC_UNLOCKSCENES
)

func (x *RoguelikeUnlockSceneSync) Reset() {
	*x = RoguelikeUnlockSceneSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoguelikeUnlockSceneSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoguelikeUnlockSceneSync) ProtoMessage() {}

func (x *RoguelikeUnlockSceneSync) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoguelikeUnlockSceneSync.ProtoReflect.Descriptor instead.
func (*RoguelikeUnlockSceneSync) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{91}
}

func (x *RoguelikeUnlockSceneSync) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RoguelikeUnlockSceneSync_Cmd
}

func (x *RoguelikeUnlockSceneSync) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RoguelikeUnlockSceneSync_Param
}

func (x *RoguelikeUnlockSceneSync) GetUnlockids() []uint32 {
	if x != nil {
		return x.Unlockids
	}
	return nil
}

type TransferFightChooseFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param    *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=69" json:"param,omitempty"`
	Coldtime *uint32     `protobuf:"varint,3,opt,name=coldtime" json:"coldtime,omitempty"`
	Index    *uint32     `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
}

// Default values for TransferFightChooseFubenCmd fields.
const (
	Default_TransferFightChooseFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_TransferFightChooseFubenCmd_Param = FuBenParam_TRANSFERFIGHT_CHOOSE
)

func (x *TransferFightChooseFubenCmd) Reset() {
	*x = TransferFightChooseFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferFightChooseFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFightChooseFubenCmd) ProtoMessage() {}

func (x *TransferFightChooseFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFightChooseFubenCmd.ProtoReflect.Descriptor instead.
func (*TransferFightChooseFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{92}
}

func (x *TransferFightChooseFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TransferFightChooseFubenCmd_Cmd
}

func (x *TransferFightChooseFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TransferFightChooseFubenCmd_Param
}

func (x *TransferFightChooseFubenCmd) GetColdtime() uint32 {
	if x != nil && x.Coldtime != nil {
		return *x.Coldtime
	}
	return 0
}

func (x *TransferFightChooseFubenCmd) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type RankScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank  *uint32 `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	Score *uint32 `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Name  *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *RankScore) Reset() {
	*x = RankScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankScore) ProtoMessage() {}

func (x *RankScore) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankScore.ProtoReflect.Descriptor instead.
func (*RankScore) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{93}
}

func (x *RankScore) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *RankScore) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *RankScore) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type TransferFightRankFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param    *FuBenParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=70" json:"param,omitempty"`
	Coldtime *uint32      `protobuf:"varint,3,opt,name=coldtime" json:"coldtime,omitempty"`
	Myscore  *uint32      `protobuf:"varint,4,opt,name=myscore" json:"myscore,omitempty"`
	Rank     []*RankScore `protobuf:"bytes,5,rep,name=rank" json:"rank,omitempty"`
}

// Default values for TransferFightRankFubenCmd fields.
const (
	Default_TransferFightRankFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_TransferFightRankFubenCmd_Param = FuBenParam_TRANSFERFIGHT_RANK
)

func (x *TransferFightRankFubenCmd) Reset() {
	*x = TransferFightRankFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferFightRankFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFightRankFubenCmd) ProtoMessage() {}

func (x *TransferFightRankFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFightRankFubenCmd.ProtoReflect.Descriptor instead.
func (*TransferFightRankFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{94}
}

func (x *TransferFightRankFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TransferFightRankFubenCmd_Cmd
}

func (x *TransferFightRankFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TransferFightRankFubenCmd_Param
}

func (x *TransferFightRankFubenCmd) GetColdtime() uint32 {
	if x != nil && x.Coldtime != nil {
		return *x.Coldtime
	}
	return 0
}

func (x *TransferFightRankFubenCmd) GetMyscore() uint32 {
	if x != nil && x.Myscore != nil {
		return *x.Myscore
	}
	return 0
}

func (x *TransferFightRankFubenCmd) GetRank() []*RankScore {
	if x != nil {
		return x.Rank
	}
	return nil
}

type TransferFightEndFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param  *FuBenParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=71" json:"param,omitempty"`
	Rank   []*RankScore `protobuf:"bytes,3,rep,name=rank" json:"rank,omitempty"`
	Myrank *RankScore   `protobuf:"bytes,4,opt,name=myrank" json:"myrank,omitempty"`
}

// Default values for TransferFightEndFubenCmd fields.
const (
	Default_TransferFightEndFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_TransferFightEndFubenCmd_Param = FuBenParam_TRANSFERFIGHT_END
)

func (x *TransferFightEndFubenCmd) Reset() {
	*x = TransferFightEndFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferFightEndFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFightEndFubenCmd) ProtoMessage() {}

func (x *TransferFightEndFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFightEndFubenCmd.ProtoReflect.Descriptor instead.
func (*TransferFightEndFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{95}
}

func (x *TransferFightEndFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TransferFightEndFubenCmd_Cmd
}

func (x *TransferFightEndFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TransferFightEndFubenCmd_Param
}

func (x *TransferFightEndFubenCmd) GetRank() []*RankScore {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *TransferFightEndFubenCmd) GetMyrank() *RankScore {
	if x != nil {
		return x.Myrank
	}
	return nil
}

type InviteRollRewardFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param    *FuBenParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=82" json:"param,omitempty"`
	Etype    *ERollRaidRewardType `protobuf:"varint,3,opt,name=etype,enum=Cmd.ERollRaidRewardType,def=0" json:"etype,omitempty"`
	Param1   *uint32              `protobuf:"varint,4,opt,name=param1" json:"param1,omitempty"`
	Costcoin *uint32              `protobuf:"varint,5,opt,name=costcoin" json:"costcoin,omitempty"`
	Count    *uint32              `protobuf:"varint,6,opt,name=count" json:"count,omitempty"`
}

// Default values for InviteRollRewardFubenCmd fields.
const (
	Default_InviteRollRewardFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_InviteRollRewardFubenCmd_Param = FuBenParam_INVITE_ROLL_RAID_REWARD
	Default_InviteRollRewardFubenCmd_Etype = ERollRaidRewardType_EROLLRAIDREWARD_MIN
)

func (x *InviteRollRewardFubenCmd) Reset() {
	*x = InviteRollRewardFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteRollRewardFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteRollRewardFubenCmd) ProtoMessage() {}

func (x *InviteRollRewardFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteRollRewardFubenCmd.ProtoReflect.Descriptor instead.
func (*InviteRollRewardFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{96}
}

func (x *InviteRollRewardFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InviteRollRewardFubenCmd_Cmd
}

func (x *InviteRollRewardFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InviteRollRewardFubenCmd_Param
}

func (x *InviteRollRewardFubenCmd) GetEtype() ERollRaidRewardType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_InviteRollRewardFubenCmd_Etype
}

func (x *InviteRollRewardFubenCmd) GetParam1() uint32 {
	if x != nil && x.Param1 != nil {
		return *x.Param1
	}
	return 0
}

func (x *InviteRollRewardFubenCmd) GetCostcoin() uint32 {
	if x != nil && x.Costcoin != nil {
		return *x.Costcoin
	}
	return 0
}

func (x *InviteRollRewardFubenCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type ReplyRollRewardFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param  *FuBenParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=83" json:"param,omitempty"`
	Agree  *bool                `protobuf:"varint,3,opt,name=agree" json:"agree,omitempty"`
	Etype  *ERollRaidRewardType `protobuf:"varint,4,opt,name=etype,enum=Cmd.ERollRaidRewardType" json:"etype,omitempty"`
	Param1 *uint32              `protobuf:"varint,5,opt,name=param1" json:"param1,omitempty"`
}

// Default values for ReplyRollRewardFubenCmd fields.
const (
	Default_ReplyRollRewardFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_ReplyRollRewardFubenCmd_Param = FuBenParam_REPLY_ROLL_RAID_REARD
)

func (x *ReplyRollRewardFubenCmd) Reset() {
	*x = ReplyRollRewardFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyRollRewardFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyRollRewardFubenCmd) ProtoMessage() {}

func (x *ReplyRollRewardFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyRollRewardFubenCmd.ProtoReflect.Descriptor instead.
func (*ReplyRollRewardFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{97}
}

func (x *ReplyRollRewardFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReplyRollRewardFubenCmd_Cmd
}

func (x *ReplyRollRewardFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReplyRollRewardFubenCmd_Param
}

func (x *ReplyRollRewardFubenCmd) GetAgree() bool {
	if x != nil && x.Agree != nil {
		return *x.Agree
	}
	return false
}

func (x *ReplyRollRewardFubenCmd) GetEtype() ERollRaidRewardType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return ERollRaidRewardType_EROLLRAIDREWARD_MIN
}

func (x *ReplyRollRewardFubenCmd) GetParam1() uint32 {
	if x != nil && x.Param1 != nil {
		return *x.Param1
	}
	return 0
}

type TeamRollStatusFuBenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param  *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=84" json:"param,omitempty"`
	Addids []uint32    `protobuf:"varint,3,rep,name=addids" json:"addids,omitempty"`
	Delid  *uint32     `protobuf:"varint,4,opt,name=delid" json:"delid,omitempty"`
}

// Default values for TeamRollStatusFuBenCmd fields.
const (
	Default_TeamRollStatusFuBenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_TeamRollStatusFuBenCmd_Param = FuBenParam_TEAMMEMBER_ROLL_PROCESS
)

func (x *TeamRollStatusFuBenCmd) Reset() {
	*x = TeamRollStatusFuBenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamRollStatusFuBenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamRollStatusFuBenCmd) ProtoMessage() {}

func (x *TeamRollStatusFuBenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamRollStatusFuBenCmd.ProtoReflect.Descriptor instead.
func (*TeamRollStatusFuBenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{98}
}

func (x *TeamRollStatusFuBenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamRollStatusFuBenCmd_Cmd
}

func (x *TeamRollStatusFuBenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamRollStatusFuBenCmd_Param
}

func (x *TeamRollStatusFuBenCmd) GetAddids() []uint32 {
	if x != nil {
		return x.Addids
	}
	return nil
}

func (x *TeamRollStatusFuBenCmd) GetDelid() uint32 {
	if x != nil && x.Delid != nil {
		return *x.Delid
	}
	return 0
}

type PreReplyRollRewardFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param  *FuBenParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=85" json:"param,omitempty"`
	Charid *uint64              `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Etype  *ERollRaidRewardType `protobuf:"varint,4,opt,name=etype,enum=Cmd.ERollRaidRewardType" json:"etype,omitempty"`
	Param1 *uint32              `protobuf:"varint,5,opt,name=param1" json:"param1,omitempty"`
}

// Default values for PreReplyRollRewardFubenCmd fields.
const (
	Default_PreReplyRollRewardFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_PreReplyRollRewardFubenCmd_Param = FuBenParam_PRE_REPLY_ROLL_RAID_REARD
)

func (x *PreReplyRollRewardFubenCmd) Reset() {
	*x = PreReplyRollRewardFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreReplyRollRewardFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreReplyRollRewardFubenCmd) ProtoMessage() {}

func (x *PreReplyRollRewardFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreReplyRollRewardFubenCmd.ProtoReflect.Descriptor instead.
func (*PreReplyRollRewardFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{99}
}

func (x *PreReplyRollRewardFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PreReplyRollRewardFubenCmd_Cmd
}

func (x *PreReplyRollRewardFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PreReplyRollRewardFubenCmd_Param
}

func (x *PreReplyRollRewardFubenCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *PreReplyRollRewardFubenCmd) GetEtype() ERollRaidRewardType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return ERollRaidRewardType_EROLLRAIDREWARD_MIN
}

func (x *PreReplyRollRewardFubenCmd) GetParam1() uint32 {
	if x != nil && x.Param1 != nil {
		return *x.Param1
	}
	return 0
}

type TwelvePvpData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *ETwelvePvpDataType `protobuf:"varint,1,opt,name=type,enum=Cmd.ETwelvePvpDataType" json:"type,omitempty"`
	Value *int32              `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (x *TwelvePvpData) Reset() {
	*x = TwelvePvpData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelvePvpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelvePvpData) ProtoMessage() {}

func (x *TwelvePvpData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelvePvpData.ProtoReflect.Descriptor instead.
func (*TwelvePvpData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{100}
}

func (x *TwelvePvpData) GetType() ETwelvePvpDataType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ETwelvePvpDataType_ETWELVEPVP_DATA_MIN
}

func (x *TwelvePvpData) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type TwelvePvpSyncCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param  *FuBenParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=72" json:"param,omitempty"`
	Datas  []*TwelvePvpData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
	Camp   *EGroupCamp      `protobuf:"varint,4,opt,name=camp,enum=Cmd.EGroupCamp" json:"camp,omitempty"`
	Charid *uint64          `protobuf:"varint,5,opt,name=charid" json:"charid,omitempty"`
}

// Default values for TwelvePvpSyncCmd fields.
const (
	Default_TwelvePvpSyncCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_TwelvePvpSyncCmd_Param = FuBenParam_TWELVEPVP_DATA_SYNC
)

func (x *TwelvePvpSyncCmd) Reset() {
	*x = TwelvePvpSyncCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelvePvpSyncCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelvePvpSyncCmd) ProtoMessage() {}

func (x *TwelvePvpSyncCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelvePvpSyncCmd.ProtoReflect.Descriptor instead.
func (*TwelvePvpSyncCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{101}
}

func (x *TwelvePvpSyncCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelvePvpSyncCmd_Cmd
}

func (x *TwelvePvpSyncCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelvePvpSyncCmd_Param
}

func (x *TwelvePvpSyncCmd) GetDatas() []*TwelvePvpData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *TwelvePvpSyncCmd) GetCamp() EGroupCamp {
	if x != nil && x.Camp != nil {
		return *x.Camp
	}
	return EGroupCamp_EGROUPCAMP_MIN
}

func (x *TwelvePvpSyncCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

type TweItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid *uint32 `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	Count  *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *TweItemInfo) Reset() {
	*x = TweItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweItemInfo) ProtoMessage() {}

func (x *TweItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweItemInfo.ProtoReflect.Descriptor instead.
func (*TweItemInfo) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{102}
}

func (x *TweItemInfo) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *TweItemInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type RaidItemSyncCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param  *FuBenParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=73" json:"param,omitempty"`
	Items  []*TweItemInfo `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	Charid *uint64        `protobuf:"varint,5,opt,name=charid" json:"charid,omitempty"`
}

// Default values for RaidItemSyncCmd fields.
const (
	Default_RaidItemSyncCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_RaidItemSyncCmd_Param = FuBenParam_TWELVEPVP_ITEM_SYNC
)

func (x *RaidItemSyncCmd) Reset() {
	*x = RaidItemSyncCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidItemSyncCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidItemSyncCmd) ProtoMessage() {}

func (x *RaidItemSyncCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidItemSyncCmd.ProtoReflect.Descriptor instead.
func (*RaidItemSyncCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{103}
}

func (x *RaidItemSyncCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RaidItemSyncCmd_Cmd
}

func (x *RaidItemSyncCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RaidItemSyncCmd_Param
}

func (x *RaidItemSyncCmd) GetItems() []*TweItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *RaidItemSyncCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

type RaidItemUpdateCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param  *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=74" json:"param,omitempty"`
	Itemid *uint32     `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	Count  *uint32     `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Charid *uint64     `protobuf:"varint,5,opt,name=charid" json:"charid,omitempty"`
}

// Default values for RaidItemUpdateCmd fields.
const (
	Default_RaidItemUpdateCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_RaidItemUpdateCmd_Param = FuBenParam_TWELVEPVP_ITEM_UPDATE
)

func (x *RaidItemUpdateCmd) Reset() {
	*x = RaidItemUpdateCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidItemUpdateCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidItemUpdateCmd) ProtoMessage() {}

func (x *RaidItemUpdateCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidItemUpdateCmd.ProtoReflect.Descriptor instead.
func (*RaidItemUpdateCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{104}
}

func (x *RaidItemUpdateCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RaidItemUpdateCmd_Cmd
}

func (x *RaidItemUpdateCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RaidItemUpdateCmd_Param
}

func (x *RaidItemUpdateCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *RaidItemUpdateCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *RaidItemUpdateCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

type TwelvePvpUseItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param  *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=81" json:"param,omitempty"`
	Itemid *uint32     `protobuf:"varint,3,opt,name=itemid,def=0" json:"itemid,omitempty"`
	Count  *uint32     `protobuf:"varint,4,opt,name=count,def=0" json:"count,omitempty"`
}

// Default values for TwelvePvpUseItemCmd fields.
const (
	Default_TwelvePvpUseItemCmd_Cmd    = Command_FUBEN_PROTOCMD
	Default_TwelvePvpUseItemCmd_Param  = FuBenParam_TWELVEPVP_USE_ITEM
	Default_TwelvePvpUseItemCmd_Itemid = uint32(0)
	Default_TwelvePvpUseItemCmd_Count  = uint32(0)
)

func (x *TwelvePvpUseItemCmd) Reset() {
	*x = TwelvePvpUseItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelvePvpUseItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelvePvpUseItemCmd) ProtoMessage() {}

func (x *TwelvePvpUseItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelvePvpUseItemCmd.ProtoReflect.Descriptor instead.
func (*TwelvePvpUseItemCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{105}
}

func (x *TwelvePvpUseItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelvePvpUseItemCmd_Cmd
}

func (x *TwelvePvpUseItemCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelvePvpUseItemCmd_Param
}

func (x *TwelvePvpUseItemCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_TwelvePvpUseItemCmd_Itemid
}

func (x *TwelvePvpUseItemCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_TwelvePvpUseItemCmd_Count
}

type RaidShopUpdateCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd               *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param             *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=75" json:"param,omitempty"`
	ShopitemId        *uint32     `protobuf:"varint,3,opt,name=shopitem_id,json=shopitemId" json:"shopitem_id,omitempty"`
	NextAvailableTime *uint32     `protobuf:"varint,4,opt,name=next_available_time,json=nextAvailableTime" json:"next_available_time,omitempty"`
}

// Default values for RaidShopUpdateCmd fields.
const (
	Default_RaidShopUpdateCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_RaidShopUpdateCmd_Param = FuBenParam_TWELVEPVP_SHOP_UPDATE
)

func (x *RaidShopUpdateCmd) Reset() {
	*x = RaidShopUpdateCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidShopUpdateCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidShopUpdateCmd) ProtoMessage() {}

func (x *RaidShopUpdateCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidShopUpdateCmd.ProtoReflect.Descriptor instead.
func (*RaidShopUpdateCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{106}
}

func (x *RaidShopUpdateCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RaidShopUpdateCmd_Cmd
}

func (x *RaidShopUpdateCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RaidShopUpdateCmd_Param
}

func (x *RaidShopUpdateCmd) GetShopitemId() uint32 {
	if x != nil && x.ShopitemId != nil {
		return *x.ShopitemId
	}
	return 0
}

func (x *RaidShopUpdateCmd) GetNextAvailableTime() uint32 {
	if x != nil && x.NextAvailableTime != nil {
		return *x.NextAvailableTime
	}
	return 0
}

type TwelvePvpQuestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questid  *uint32 `protobuf:"varint,1,opt,name=questid" json:"questid,omitempty"`
	Progress *uint32 `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
	Finished *bool   `protobuf:"varint,3,opt,name=finished" json:"finished,omitempty"`
}

func (x *TwelvePvpQuestData) Reset() {
	*x = TwelvePvpQuestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelvePvpQuestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelvePvpQuestData) ProtoMessage() {}

func (x *TwelvePvpQuestData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelvePvpQuestData.ProtoReflect.Descriptor instead.
func (*TwelvePvpQuestData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{107}
}

func (x *TwelvePvpQuestData) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return 0
}

func (x *TwelvePvpQuestData) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *TwelvePvpQuestData) GetFinished() bool {
	if x != nil && x.Finished != nil {
		return *x.Finished
	}
	return false
}

type TwelvePvpQuestQueryCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=76" json:"param,omitempty"`
	Datas []*TwelvePvpQuestData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for TwelvePvpQuestQueryCmd fields.
const (
	Default_TwelvePvpQuestQueryCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_TwelvePvpQuestQueryCmd_Param = FuBenParam_TWELVEPVP_QUEST_QUERY
)

func (x *TwelvePvpQuestQueryCmd) Reset() {
	*x = TwelvePvpQuestQueryCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelvePvpQuestQueryCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelvePvpQuestQueryCmd) ProtoMessage() {}

func (x *TwelvePvpQuestQueryCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelvePvpQuestQueryCmd.ProtoReflect.Descriptor instead.
func (*TwelvePvpQuestQueryCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{108}
}

func (x *TwelvePvpQuestQueryCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelvePvpQuestQueryCmd_Cmd
}

func (x *TwelvePvpQuestQueryCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelvePvpQuestQueryCmd_Param
}

func (x *TwelvePvpQuestQueryCmd) GetDatas() []*TwelvePvpQuestData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type TwelvePvpUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid     *uint64      `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Name       *string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Killnum    *uint32      `protobuf:"varint,3,opt,name=killnum" json:"killnum,omitempty"`
	Dienum     *uint32      `protobuf:"varint,4,opt,name=dienum" json:"dienum,omitempty"`
	Heal       *uint32      `protobuf:"varint,5,opt,name=heal" json:"heal,omitempty"`
	Gold       *uint32      `protobuf:"varint,6,opt,name=gold" json:"gold,omitempty"`
	CrystalExp *uint32      `protobuf:"varint,7,opt,name=crystal_exp,json=crystalExp" json:"crystal_exp,omitempty"`
	PushTime   *uint32      `protobuf:"varint,8,opt,name=push_time,json=pushTime" json:"push_time,omitempty"`
	KillMvp    *uint32      `protobuf:"varint,9,opt,name=kill_mvp,json=killMvp" json:"kill_mvp,omitempty"`
	Profession *EProfession `protobuf:"varint,10,opt,name=profession,enum=Cmd.EProfession" json:"profession,omitempty"`
}

func (x *TwelvePvpUserInfo) Reset() {
	*x = TwelvePvpUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelvePvpUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelvePvpUserInfo) ProtoMessage() {}

func (x *TwelvePvpUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelvePvpUserInfo.ProtoReflect.Descriptor instead.
func (*TwelvePvpUserInfo) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{109}
}

func (x *TwelvePvpUserInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *TwelvePvpUserInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TwelvePvpUserInfo) GetKillnum() uint32 {
	if x != nil && x.Killnum != nil {
		return *x.Killnum
	}
	return 0
}

func (x *TwelvePvpUserInfo) GetDienum() uint32 {
	if x != nil && x.Dienum != nil {
		return *x.Dienum
	}
	return 0
}

func (x *TwelvePvpUserInfo) GetHeal() uint32 {
	if x != nil && x.Heal != nil {
		return *x.Heal
	}
	return 0
}

func (x *TwelvePvpUserInfo) GetGold() uint32 {
	if x != nil && x.Gold != nil {
		return *x.Gold
	}
	return 0
}

func (x *TwelvePvpUserInfo) GetCrystalExp() uint32 {
	if x != nil && x.CrystalExp != nil {
		return *x.CrystalExp
	}
	return 0
}

func (x *TwelvePvpUserInfo) GetPushTime() uint32 {
	if x != nil && x.PushTime != nil {
		return *x.PushTime
	}
	return 0
}

func (x *TwelvePvpUserInfo) GetKillMvp() uint32 {
	if x != nil && x.KillMvp != nil {
		return *x.KillMvp
	}
	return 0
}

func (x *TwelvePvpUserInfo) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return EProfession_EPROFESSION_MIN
}

type TwelvePvpGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color     *EGroupCamp          `protobuf:"varint,1,opt,name=color,enum=Cmd.EGroupCamp" json:"color,omitempty"`
	Userinfos []*TwelvePvpUserInfo `protobuf:"bytes,2,rep,name=userinfos" json:"userinfos,omitempty"`
}

func (x *TwelvePvpGroupInfo) Reset() {
	*x = TwelvePvpGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelvePvpGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelvePvpGroupInfo) ProtoMessage() {}

func (x *TwelvePvpGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelvePvpGroupInfo.ProtoReflect.Descriptor instead.
func (*TwelvePvpGroupInfo) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{110}
}

func (x *TwelvePvpGroupInfo) GetColor() EGroupCamp {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return EGroupCamp_EGROUPCAMP_MIN
}

func (x *TwelvePvpGroupInfo) GetUserinfos() []*TwelvePvpUserInfo {
	if x != nil {
		return x.Userinfos
	}
	return nil
}

type TwelvePvpQueryGroupInfoCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param     *FuBenParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=77" json:"param,omitempty"`
	Groupinfo []*TwelvePvpGroupInfo `protobuf:"bytes,3,rep,name=groupinfo" json:"groupinfo,omitempty"`
}

// Default values for TwelvePvpQueryGroupInfoCmd fields.
const (
	Default_TwelvePvpQueryGroupInfoCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_TwelvePvpQueryGroupInfoCmd_Param = FuBenParam_TWELVEPVP_GROUP_INFO_QUERY
)

func (x *TwelvePvpQueryGroupInfoCmd) Reset() {
	*x = TwelvePvpQueryGroupInfoCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelvePvpQueryGroupInfoCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelvePvpQueryGroupInfoCmd) ProtoMessage() {}

func (x *TwelvePvpQueryGroupInfoCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelvePvpQueryGroupInfoCmd.ProtoReflect.Descriptor instead.
func (*TwelvePvpQueryGroupInfoCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{111}
}

func (x *TwelvePvpQueryGroupInfoCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelvePvpQueryGroupInfoCmd_Cmd
}

func (x *TwelvePvpQueryGroupInfoCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelvePvpQueryGroupInfoCmd_Param
}

func (x *TwelvePvpQueryGroupInfoCmd) GetGroupinfo() []*TwelvePvpGroupInfo {
	if x != nil {
		return x.Groupinfo
	}
	return nil
}

type CampResultData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Camp    *EGroupCamp `protobuf:"varint,1,opt,name=camp,enum=Cmd.EGroupCamp" json:"camp,omitempty"`
	KillNum *uint32     `protobuf:"varint,2,opt,name=kill_num,json=killNum" json:"kill_num,omitempty"`
	Exp     *uint32     `protobuf:"varint,3,opt,name=exp" json:"exp,omitempty"`
	KillMvp *uint32     `protobuf:"varint,4,opt,name=kill_mvp,json=killMvp" json:"kill_mvp,omitempty"`
}

func (x *CampResultData) Reset() {
	*x = CampResultData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampResultData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampResultData) ProtoMessage() {}

func (x *CampResultData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampResultData.ProtoReflect.Descriptor instead.
func (*CampResultData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{112}
}

func (x *CampResultData) GetCamp() EGroupCamp {
	if x != nil && x.Camp != nil {
		return *x.Camp
	}
	return EGroupCamp_EGROUPCAMP_MIN
}

func (x *CampResultData) GetKillNum() uint32 {
	if x != nil && x.KillNum != nil {
		return *x.KillNum
	}
	return 0
}

func (x *CampResultData) GetExp() uint32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *CampResultData) GetKillMvp() uint32 {
	if x != nil && x.KillMvp != nil {
		return *x.KillMvp
	}
	return 0
}

type TwelvePvpResultCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command                    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param          *FuBenParam                 `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=78" json:"param,omitempty"`
	GroupinfoCmd   *TwelvePvpQueryGroupInfoCmd `protobuf:"bytes,3,opt,name=groupinfo_cmd,json=groupinfoCmd" json:"groupinfo_cmd,omitempty"`
	Winteam        *EGroupCamp                 `protobuf:"varint,4,opt,name=winteam,enum=Cmd.EGroupCamp" json:"winteam,omitempty"`
	CampResultData []*CampResultData           `protobuf:"bytes,5,rep,name=camp_result_data,json=campResultData" json:"camp_result_data,omitempty"`
}

// Default values for TwelvePvpResultCmd fields.
const (
	Default_TwelvePvpResultCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_TwelvePvpResultCmd_Param = FuBenParam_TWELVEPVP_RESULT
)

func (x *TwelvePvpResultCmd) Reset() {
	*x = TwelvePvpResultCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelvePvpResultCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelvePvpResultCmd) ProtoMessage() {}

func (x *TwelvePvpResultCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelvePvpResultCmd.ProtoReflect.Descriptor instead.
func (*TwelvePvpResultCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{113}
}

func (x *TwelvePvpResultCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelvePvpResultCmd_Cmd
}

func (x *TwelvePvpResultCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelvePvpResultCmd_Param
}

func (x *TwelvePvpResultCmd) GetGroupinfoCmd() *TwelvePvpQueryGroupInfoCmd {
	if x != nil {
		return x.GroupinfoCmd
	}
	return nil
}

func (x *TwelvePvpResultCmd) GetWinteam() EGroupCamp {
	if x != nil && x.Winteam != nil {
		return *x.Winteam
	}
	return EGroupCamp_EGROUPCAMP_MIN
}

func (x *TwelvePvpResultCmd) GetCampResultData() []*CampResultData {
	if x != nil {
		return x.CampResultData
	}
	return nil
}

type BuildingHp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildingId *uint32 `protobuf:"varint,1,opt,name=building_id,json=buildingId" json:"building_id,omitempty"`
	HpPer      *uint32 `protobuf:"varint,2,opt,name=hp_per,json=hpPer" json:"hp_per,omitempty"`
}

func (x *BuildingHp) Reset() {
	*x = BuildingHp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingHp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingHp) ProtoMessage() {}

func (x *BuildingHp) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingHp.ProtoReflect.Descriptor instead.
func (*BuildingHp) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{114}
}

func (x *BuildingHp) GetBuildingId() uint32 {
	if x != nil && x.BuildingId != nil {
		return *x.BuildingId
	}
	return 0
}

func (x *BuildingHp) GetHpPer() uint32 {
	if x != nil && x.HpPer != nil {
		return *x.HpPer
	}
	return 0
}

type TwelvePvpBuildingHpUpdateCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=79" json:"param,omitempty"`
	Data  []*BuildingHp `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

// Default values for TwelvePvpBuildingHpUpdateCmd fields.
const (
	Default_TwelvePvpBuildingHpUpdateCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_TwelvePvpBuildingHpUpdateCmd_Param = FuBenParam_TWELVEPVP_BUILDING_HP_UPDATE
)

func (x *TwelvePvpBuildingHpUpdateCmd) Reset() {
	*x = TwelvePvpBuildingHpUpdateCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelvePvpBuildingHpUpdateCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelvePvpBuildingHpUpdateCmd) ProtoMessage() {}

func (x *TwelvePvpBuildingHpUpdateCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelvePvpBuildingHpUpdateCmd.ProtoReflect.Descriptor instead.
func (*TwelvePvpBuildingHpUpdateCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{115}
}

func (x *TwelvePvpBuildingHpUpdateCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelvePvpBuildingHpUpdateCmd_Cmd
}

func (x *TwelvePvpBuildingHpUpdateCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelvePvpBuildingHpUpdateCmd_Param
}

func (x *TwelvePvpBuildingHpUpdateCmd) GetData() []*BuildingHp {
	if x != nil {
		return x.Data
	}
	return nil
}

type TwelvePvpUIOperCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=80" json:"param,omitempty"`
	Ui    *ETwelvePvpUI `protobuf:"varint,3,opt,name=ui,enum=Cmd.ETwelvePvpUI" json:"ui,omitempty"`
	Open  *bool         `protobuf:"varint,4,opt,name=open" json:"open,omitempty"`
}

// Default values for TwelvePvpUIOperCmd fields.
const (
	Default_TwelvePvpUIOperCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_TwelvePvpUIOperCmd_Param = FuBenParam_TWELVEPVP_QUERY_UI_OPER
)

func (x *TwelvePvpUIOperCmd) Reset() {
	*x = TwelvePvpUIOperCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelvePvpUIOperCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelvePvpUIOperCmd) ProtoMessage() {}

func (x *TwelvePvpUIOperCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelvePvpUIOperCmd.ProtoReflect.Descriptor instead.
func (*TwelvePvpUIOperCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{116}
}

func (x *TwelvePvpUIOperCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelvePvpUIOperCmd_Cmd
}

func (x *TwelvePvpUIOperCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelvePvpUIOperCmd_Param
}

func (x *TwelvePvpUIOperCmd) GetUi() ETwelvePvpUI {
	if x != nil && x.Ui != nil {
		return *x.Ui
	}
	return ETwelvePvpUI_ETWELVEPVP_UI_MIN
}

func (x *TwelvePvpUIOperCmd) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return false
}

type ReliveCdFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param          *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=86" json:"param,omitempty"`
	NextReliveTime *uint32     `protobuf:"varint,3,opt,name=next_relive_time,json=nextReliveTime" json:"next_relive_time,omitempty"`
}

// Default values for ReliveCdFubenCmd fields.
const (
	Default_ReliveCdFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_ReliveCdFubenCmd_Param = FuBenParam_RELIVE_CD
)

func (x *ReliveCdFubenCmd) Reset() {
	*x = ReliveCdFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReliveCdFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReliveCdFubenCmd) ProtoMessage() {}

func (x *ReliveCdFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReliveCdFubenCmd.ProtoReflect.Descriptor instead.
func (*ReliveCdFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{117}
}

func (x *ReliveCdFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReliveCdFubenCmd_Cmd
}

func (x *ReliveCdFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReliveCdFubenCmd_Param
}

func (x *ReliveCdFubenCmd) GetNextReliveTime() uint32 {
	if x != nil && x.NextReliveTime != nil {
		return *x.NextReliveTime
	}
	return 0
}

type PosData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *uint64   `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Pos   *ScenePos `protobuf:"bytes,4,opt,name=pos" json:"pos,omitempty"`
	Npcid *uint32   `protobuf:"varint,5,opt,name=npcid" json:"npcid,omitempty"`
}

func (x *PosData) Reset() {
	*x = PosData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosData) ProtoMessage() {}

func (x *PosData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosData.ProtoReflect.Descriptor instead.
func (*PosData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{118}
}

func (x *PosData) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PosData) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *PosData) GetNpcid() uint32 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return 0
}

type PosSyncFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param       *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=87" json:"param,omitempty"`
	Datas       []*PosData  `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
	OutScopeIds []uint64    `protobuf:"varint,4,rep,name=out_scope_ids,json=outScopeIds" json:"out_scope_ids,omitempty"`
}

// Default values for PosSyncFubenCmd fields.
const (
	Default_PosSyncFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_PosSyncFubenCmd_Param = FuBenParam_POS_SYNC
)

func (x *PosSyncFubenCmd) Reset() {
	*x = PosSyncFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosSyncFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosSyncFubenCmd) ProtoMessage() {}

func (x *PosSyncFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosSyncFubenCmd.ProtoReflect.Descriptor instead.
func (*PosSyncFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{119}
}

func (x *PosSyncFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PosSyncFubenCmd_Cmd
}

func (x *PosSyncFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PosSyncFubenCmd_Param
}

func (x *PosSyncFubenCmd) GetDatas() []*PosData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *PosSyncFubenCmd) GetOutScopeIds() []uint64 {
	if x != nil {
		return x.OutScopeIds
	}
	return nil
}

type ReqEnterTowerPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=88" json:"param,omitempty"`
}

// Default values for ReqEnterTowerPrivate fields.
const (
	Default_ReqEnterTowerPrivate_Cmd   = Command_FUBEN_PROTOCMD
	Default_ReqEnterTowerPrivate_Param = FuBenParam_REQ_ENTER_TOWERPRIVATE
)

func (x *ReqEnterTowerPrivate) Reset() {
	*x = ReqEnterTowerPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEnterTowerPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEnterTowerPrivate) ProtoMessage() {}

func (x *ReqEnterTowerPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEnterTowerPrivate.ProtoReflect.Descriptor instead.
func (*ReqEnterTowerPrivate) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{120}
}

func (x *ReqEnterTowerPrivate) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqEnterTowerPrivate_Cmd
}

func (x *ReqEnterTowerPrivate) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqEnterTowerPrivate_Param
}

type LayerMonsterTowerPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *uint32                     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type  *EEndlessPrivateMonsterType `protobuf:"varint,2,opt,name=type,enum=Cmd.EEndlessPrivateMonsterType" json:"type,omitempty"`
	Count *uint32                     `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Icon  *uint32                     `protobuf:"varint,4,opt,name=icon" json:"icon,omitempty"`
}

func (x *LayerMonsterTowerPrivate) Reset() {
	*x = LayerMonsterTowerPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayerMonsterTowerPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerMonsterTowerPrivate) ProtoMessage() {}

func (x *LayerMonsterTowerPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerMonsterTowerPrivate.ProtoReflect.Descriptor instead.
func (*LayerMonsterTowerPrivate) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{121}
}

func (x *LayerMonsterTowerPrivate) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *LayerMonsterTowerPrivate) GetType() EEndlessPrivateMonsterType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EEndlessPrivateMonsterType_EEENDLESSPRIVATE_MONSTER_NORMAL
}

func (x *LayerMonsterTowerPrivate) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *LayerMonsterTowerPrivate) GetIcon() uint32 {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return 0
}

type LayerRewardTowerPrivate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid *uint32 `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	Count  *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *LayerRewardTowerPrivate) Reset() {
	*x = LayerRewardTowerPrivate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayerRewardTowerPrivate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerRewardTowerPrivate) ProtoMessage() {}

func (x *LayerRewardTowerPrivate) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerRewardTowerPrivate.ProtoReflect.Descriptor instead.
func (*LayerRewardTowerPrivate) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{122}
}

func (x *LayerRewardTowerPrivate) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *LayerRewardTowerPrivate) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type TowerPrivateLayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command                    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param    *FuBenParam                 `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=89" json:"param,omitempty"`
	Layer    *uint32                     `protobuf:"varint,3,opt,name=layer" json:"layer,omitempty"`
	Monsters []*LayerMonsterTowerPrivate `protobuf:"bytes,4,rep,name=monsters" json:"monsters,omitempty"`
	Rewards  []*LayerRewardTowerPrivate  `protobuf:"bytes,5,rep,name=rewards" json:"rewards,omitempty"`
}

// Default values for TowerPrivateLayerInfo fields.
const (
	Default_TowerPrivateLayerInfo_Cmd   = Command_FUBEN_PROTOCMD
	Default_TowerPrivateLayerInfo_Param = FuBenParam_TOWERPRIVATE_LAYINFO
)

func (x *TowerPrivateLayerInfo) Reset() {
	*x = TowerPrivateLayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerPrivateLayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerPrivateLayerInfo) ProtoMessage() {}

func (x *TowerPrivateLayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerPrivateLayerInfo.ProtoReflect.Descriptor instead.
func (*TowerPrivateLayerInfo) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{123}
}

func (x *TowerPrivateLayerInfo) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TowerPrivateLayerInfo_Cmd
}

func (x *TowerPrivateLayerInfo) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TowerPrivateLayerInfo_Param
}

func (x *TowerPrivateLayerInfo) GetLayer() uint32 {
	if x != nil && x.Layer != nil {
		return *x.Layer
	}
	return 0
}

func (x *TowerPrivateLayerInfo) GetMonsters() []*LayerMonsterTowerPrivate {
	if x != nil {
		return x.Monsters
	}
	return nil
}

func (x *TowerPrivateLayerInfo) GetRewards() []*LayerRewardTowerPrivate {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type TowerPrivateLayerCountdownNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param  *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=90" json:"param,omitempty"`
	Overat *uint32     `protobuf:"varint,3,opt,name=overat" json:"overat,omitempty"`
}

// Default values for TowerPrivateLayerCountdownNtf fields.
const (
	Default_TowerPrivateLayerCountdownNtf_Cmd   = Command_FUBEN_PROTOCMD
	Default_TowerPrivateLayerCountdownNtf_Param = FuBenParam_TOWERPRIVATE_LAYER_COUNTDOWN_NTF
)

func (x *TowerPrivateLayerCountdownNtf) Reset() {
	*x = TowerPrivateLayerCountdownNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TowerPrivateLayerCountdownNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TowerPrivateLayerCountdownNtf) ProtoMessage() {}

func (x *TowerPrivateLayerCountdownNtf) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TowerPrivateLayerCountdownNtf.ProtoReflect.Descriptor instead.
func (*TowerPrivateLayerCountdownNtf) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{124}
}

func (x *TowerPrivateLayerCountdownNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TowerPrivateLayerCountdownNtf_Cmd
}

func (x *TowerPrivateLayerCountdownNtf) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TowerPrivateLayerCountdownNtf_Param
}

func (x *TowerPrivateLayerCountdownNtf) GetOverat() uint32 {
	if x != nil && x.Overat != nil {
		return *x.Overat
	}
	return 0
}

type FubenResultNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param    *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=91" json:"param,omitempty"`
	Raidtype *ERaidType  `protobuf:"varint,3,opt,name=raidtype,enum=Cmd.ERaidType,def=0" json:"raidtype,omitempty"`
	Iswin    *bool       `protobuf:"varint,4,opt,name=iswin" json:"iswin,omitempty"`
}

// Default values for FubenResultNtf fields.
const (
	Default_FubenResultNtf_Cmd      = Command_FUBEN_PROTOCMD
	Default_FubenResultNtf_Param    = FuBenParam_FUBEN_RESULT_NTF
	Default_FubenResultNtf_Raidtype = ERaidType_ERAIDTYPE_MIN
)

func (x *FubenResultNtf) Reset() {
	*x = FubenResultNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FubenResultNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FubenResultNtf) ProtoMessage() {}

func (x *FubenResultNtf) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FubenResultNtf.ProtoReflect.Descriptor instead.
func (*FubenResultNtf) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{125}
}

func (x *FubenResultNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FubenResultNtf_Cmd
}

func (x *FubenResultNtf) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FubenResultNtf_Param
}

func (x *FubenResultNtf) GetRaidtype() ERaidType {
	if x != nil && x.Raidtype != nil {
		return *x.Raidtype
	}
	return Default_FubenResultNtf_Raidtype
}

func (x *FubenResultNtf) GetIswin() bool {
	if x != nil && x.Iswin != nil {
		return *x.Iswin
	}
	return false
}

type EndTimeSyncFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=92" json:"param,omitempty"`
	Endtime *uint32     `protobuf:"varint,3,opt,name=endtime,def=0" json:"endtime,omitempty"`
}

// Default values for EndTimeSyncFubenCmd fields.
const (
	Default_EndTimeSyncFubenCmd_Cmd     = Command_FUBEN_PROTOCMD
	Default_EndTimeSyncFubenCmd_Param   = FuBenParam_ENDTIME_SYNC
	Default_EndTimeSyncFubenCmd_Endtime = uint32(0)
)

func (x *EndTimeSyncFubenCmd) Reset() {
	*x = EndTimeSyncFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndTimeSyncFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndTimeSyncFubenCmd) ProtoMessage() {}

func (x *EndTimeSyncFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndTimeSyncFubenCmd.ProtoReflect.Descriptor instead.
func (*EndTimeSyncFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{126}
}

func (x *EndTimeSyncFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EndTimeSyncFubenCmd_Cmd
}

func (x *EndTimeSyncFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EndTimeSyncFubenCmd_Param
}

func (x *EndTimeSyncFubenCmd) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return Default_EndTimeSyncFubenCmd_Endtime
}

type ResultSyncFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=93" json:"param,omitempty"`
	Score *uint32     `protobuf:"varint,3,opt,name=score,def=0" json:"score,omitempty"`
}

// Default values for ResultSyncFubenCmd fields.
const (
	Default_ResultSyncFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_ResultSyncFubenCmd_Param = FuBenParam_RESULT_SYNC
	Default_ResultSyncFubenCmd_Score = uint32(0)
)

func (x *ResultSyncFubenCmd) Reset() {
	*x = ResultSyncFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultSyncFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultSyncFubenCmd) ProtoMessage() {}

func (x *ResultSyncFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultSyncFubenCmd.ProtoReflect.Descriptor instead.
func (*ResultSyncFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{127}
}

func (x *ResultSyncFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ResultSyncFubenCmd_Cmd
}

func (x *ResultSyncFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ResultSyncFubenCmd_Param
}

func (x *ResultSyncFubenCmd) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return Default_ResultSyncFubenCmd_Score
}

type ComodoPhaseFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=97" json:"param,omitempty"`
	Phase *EComodoTeamRaidPhase `protobuf:"varint,3,opt,name=phase,enum=Cmd.EComodoTeamRaidPhase" json:"phase,omitempty"`
}

// Default values for ComodoPhaseFubenCmd fields.
const (
	Default_ComodoPhaseFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_ComodoPhaseFubenCmd_Param = FuBenParam_COMODO_PHASE
)

func (x *ComodoPhaseFubenCmd) Reset() {
	*x = ComodoPhaseFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComodoPhaseFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComodoPhaseFubenCmd) ProtoMessage() {}

func (x *ComodoPhaseFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComodoPhaseFubenCmd.ProtoReflect.Descriptor instead.
func (*ComodoPhaseFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{128}
}

func (x *ComodoPhaseFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ComodoPhaseFubenCmd_Cmd
}

func (x *ComodoPhaseFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ComodoPhaseFubenCmd_Param
}

func (x *ComodoPhaseFubenCmd) GetPhase() EComodoTeamRaidPhase {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return EComodoTeamRaidPhase_ECOMODO_PHASE_MIN
}

type ComodoTeamRaidStatData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boss  *EComodoTeamRaidBoss `protobuf:"varint,1,opt,name=boss,enum=Cmd.EComodoTeamRaidBoss" json:"boss,omitempty"`
	Datas []*GroupRaidShowData `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
}

func (x *ComodoTeamRaidStatData) Reset() {
	*x = ComodoTeamRaidStatData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComodoTeamRaidStatData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComodoTeamRaidStatData) ProtoMessage() {}

func (x *ComodoTeamRaidStatData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComodoTeamRaidStatData.ProtoReflect.Descriptor instead.
func (*ComodoTeamRaidStatData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{129}
}

func (x *ComodoTeamRaidStatData) GetBoss() EComodoTeamRaidBoss {
	if x != nil && x.Boss != nil {
		return *x.Boss
	}
	return EComodoTeamRaidBoss_ECOMODO_BOSS_MIN
}

func (x *ComodoTeamRaidStatData) GetDatas() []*GroupRaidShowData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type QueryComodoTeamRaidStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command                 `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam              `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=98" json:"param,omitempty"`
	Current *GroupRaidTeamShowData   `protobuf:"bytes,3,opt,name=current" json:"current,omitempty"`
	Total   *GroupRaidTeamShowData   `protobuf:"bytes,4,opt,name=total" json:"total,omitempty"`
	History []*GroupRaidTeamShowData `protobuf:"bytes,5,rep,name=history" json:"history,omitempty"`
}

// Default values for QueryComodoTeamRaidStat fields.
const (
	Default_QueryComodoTeamRaidStat_Cmd   = Command_FUBEN_PROTOCMD
	Default_QueryComodoTeamRaidStat_Param = FuBenParam_COMODO_STAT
)

func (x *QueryComodoTeamRaidStat) Reset() {
	*x = QueryComodoTeamRaidStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryComodoTeamRaidStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryComodoTeamRaidStat) ProtoMessage() {}

func (x *QueryComodoTeamRaidStat) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryComodoTeamRaidStat.ProtoReflect.Descriptor instead.
func (*QueryComodoTeamRaidStat) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{130}
}

func (x *QueryComodoTeamRaidStat) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryComodoTeamRaidStat_Cmd
}

func (x *QueryComodoTeamRaidStat) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryComodoTeamRaidStat_Param
}

func (x *QueryComodoTeamRaidStat) GetCurrent() *GroupRaidTeamShowData {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *QueryComodoTeamRaidStat) GetTotal() *GroupRaidTeamShowData {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *QueryComodoTeamRaidStat) GetHistory() []*GroupRaidTeamShowData {
	if x != nil {
		return x.History
	}
	return nil
}

type TeamPwsStateSyncFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=99" json:"param,omitempty"`
	Fire  *bool       `protobuf:"varint,3,opt,name=fire" json:"fire,omitempty"`
}

// Default values for TeamPwsStateSyncFubenCmd fields.
const (
	Default_TeamPwsStateSyncFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_TeamPwsStateSyncFubenCmd_Param = FuBenParam_TEAMPWS_STATE_SYNC
)

func (x *TeamPwsStateSyncFubenCmd) Reset() {
	*x = TeamPwsStateSyncFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamPwsStateSyncFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamPwsStateSyncFubenCmd) ProtoMessage() {}

func (x *TeamPwsStateSyncFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamPwsStateSyncFubenCmd.ProtoReflect.Descriptor instead.
func (*TeamPwsStateSyncFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{131}
}

func (x *TeamPwsStateSyncFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamPwsStateSyncFubenCmd_Cmd
}

func (x *TeamPwsStateSyncFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamPwsStateSyncFubenCmd_Param
}

func (x *TeamPwsStateSyncFubenCmd) GetFire() bool {
	if x != nil && x.Fire != nil {
		return *x.Fire
	}
	return false
}

type ObserverFlashFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=100" json:"param,omitempty"`
	X     *float32    `protobuf:"fixed32,3,opt,name=x" json:"x,omitempty"`
	Y     *float32    `protobuf:"fixed32,4,opt,name=y" json:"y,omitempty"`
	Z     *float32    `protobuf:"fixed32,5,opt,name=z" json:"z,omitempty"`
}

// Default values for ObserverFlashFubenCmd fields.
const (
	Default_ObserverFlashFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_ObserverFlashFubenCmd_Param = FuBenParam_OBSERVER_FLASH
)

func (x *ObserverFlashFubenCmd) Reset() {
	*x = ObserverFlashFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserverFlashFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserverFlashFubenCmd) ProtoMessage() {}

func (x *ObserverFlashFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserverFlashFubenCmd.ProtoReflect.Descriptor instead.
func (*ObserverFlashFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{132}
}

func (x *ObserverFlashFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ObserverFlashFubenCmd_Cmd
}

func (x *ObserverFlashFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ObserverFlashFubenCmd_Param
}

func (x *ObserverFlashFubenCmd) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *ObserverFlashFubenCmd) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *ObserverFlashFubenCmd) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type ObserverAttachFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param        *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=101" json:"param,omitempty"`
	AttachPlayer *uint64     `protobuf:"varint,3,opt,name=attach_player,json=attachPlayer" json:"attach_player,omitempty"`
}

// Default values for ObserverAttachFubenCmd fields.
const (
	Default_ObserverAttachFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_ObserverAttachFubenCmd_Param = FuBenParam_OBSERVER_ATTACH
)

func (x *ObserverAttachFubenCmd) Reset() {
	*x = ObserverAttachFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserverAttachFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserverAttachFubenCmd) ProtoMessage() {}

func (x *ObserverAttachFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserverAttachFubenCmd.ProtoReflect.Descriptor instead.
func (*ObserverAttachFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{133}
}

func (x *ObserverAttachFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ObserverAttachFubenCmd_Cmd
}

func (x *ObserverAttachFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ObserverAttachFubenCmd_Param
}

func (x *ObserverAttachFubenCmd) GetAttachPlayer() uint64 {
	if x != nil && x.AttachPlayer != nil {
		return *x.AttachPlayer
	}
	return 0
}

type ObserverSelectFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param        *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=102" json:"param,omitempty"`
	SelectPlayer *uint64     `protobuf:"varint,3,opt,name=select_player,json=selectPlayer" json:"select_player,omitempty"`
}

// Default values for ObserverSelectFubenCmd fields.
const (
	Default_ObserverSelectFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_ObserverSelectFubenCmd_Param = FuBenParam_OBSERVER_SELECT
)

func (x *ObserverSelectFubenCmd) Reset() {
	*x = ObserverSelectFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserverSelectFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserverSelectFubenCmd) ProtoMessage() {}

func (x *ObserverSelectFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserverSelectFubenCmd.ProtoReflect.Descriptor instead.
func (*ObserverSelectFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{134}
}

func (x *ObserverSelectFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ObserverSelectFubenCmd_Cmd
}

func (x *ObserverSelectFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ObserverSelectFubenCmd_Param
}

func (x *ObserverSelectFubenCmd) GetSelectPlayer() uint64 {
	if x != nil && x.SelectPlayer != nil {
		return *x.SelectPlayer
	}
	return 0
}

type PlayerHpSpUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid *uint64 `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Hpper  *uint32 `protobuf:"varint,2,opt,name=hpper" json:"hpper,omitempty"`
	Spper  *uint32 `protobuf:"varint,3,opt,name=spper" json:"spper,omitempty"`
}

func (x *PlayerHpSpUpdate) Reset() {
	*x = PlayerHpSpUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerHpSpUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerHpSpUpdate) ProtoMessage() {}

func (x *PlayerHpSpUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerHpSpUpdate.ProtoReflect.Descriptor instead.
func (*PlayerHpSpUpdate) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{135}
}

func (x *PlayerHpSpUpdate) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *PlayerHpSpUpdate) GetHpper() uint32 {
	if x != nil && x.Hpper != nil {
		return *x.Hpper
	}
	return 0
}

func (x *PlayerHpSpUpdate) GetSpper() uint32 {
	if x != nil && x.Spper != nil {
		return *x.Spper
	}
	return 0
}

type ObHpspUpdateFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=104" json:"param,omitempty"`
	Updates []*PlayerHpSpUpdate `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
}

// Default values for ObHpspUpdateFubenCmd fields.
const (
	Default_ObHpspUpdateFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_ObHpspUpdateFubenCmd_Param = FuBenParam_OB_HPSP_UPDATE
)

func (x *ObHpspUpdateFubenCmd) Reset() {
	*x = ObHpspUpdateFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObHpspUpdateFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObHpspUpdateFubenCmd) ProtoMessage() {}

func (x *ObHpspUpdateFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObHpspUpdateFubenCmd.ProtoReflect.Descriptor instead.
func (*ObHpspUpdateFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{136}
}

func (x *ObHpspUpdateFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ObHpspUpdateFubenCmd_Cmd
}

func (x *ObHpspUpdateFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ObHpspUpdateFubenCmd_Param
}

func (x *ObHpspUpdateFubenCmd) GetUpdates() []*PlayerHpSpUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type ObPlayerOfflineFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param       *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=105" json:"param,omitempty"`
	OfflineChar *uint64     `protobuf:"varint,3,opt,name=offline_char,json=offlineChar" json:"offline_char,omitempty"`
}

// Default values for ObPlayerOfflineFubenCmd fields.
const (
	Default_ObPlayerOfflineFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_ObPlayerOfflineFubenCmd_Param = FuBenParam_OB_PLAYER_OFFLINE
)

func (x *ObPlayerOfflineFubenCmd) Reset() {
	*x = ObPlayerOfflineFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObPlayerOfflineFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObPlayerOfflineFubenCmd) ProtoMessage() {}

func (x *ObPlayerOfflineFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObPlayerOfflineFubenCmd.ProtoReflect.Descriptor instead.
func (*ObPlayerOfflineFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{137}
}

func (x *ObPlayerOfflineFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ObPlayerOfflineFubenCmd_Cmd
}

func (x *ObPlayerOfflineFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ObPlayerOfflineFubenCmd_Param
}

func (x *ObPlayerOfflineFubenCmd) GetOfflineChar() uint64 {
	if x != nil && x.OfflineChar != nil {
		return *x.OfflineChar
	}
	return 0
}

type MultiBossPhaseFubenCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param     *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=106" json:"param,omitempty"`
	BossIndex *uint32     `protobuf:"varint,3,opt,name=boss_index,json=bossIndex" json:"boss_index,omitempty"`
}

// Default values for MultiBossPhaseFubenCmd fields.
const (
	Default_MultiBossPhaseFubenCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_MultiBossPhaseFubenCmd_Param = FuBenParam_MULTI_BOSS_PHASE
)

func (x *MultiBossPhaseFubenCmd) Reset() {
	*x = MultiBossPhaseFubenCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiBossPhaseFubenCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiBossPhaseFubenCmd) ProtoMessage() {}

func (x *MultiBossPhaseFubenCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiBossPhaseFubenCmd.ProtoReflect.Descriptor instead.
func (*MultiBossPhaseFubenCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{138}
}

func (x *MultiBossPhaseFubenCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MultiBossPhaseFubenCmd_Cmd
}

func (x *MultiBossPhaseFubenCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MultiBossPhaseFubenCmd_Param
}

func (x *MultiBossPhaseFubenCmd) GetBossIndex() uint32 {
	if x != nil && x.BossIndex != nil {
		return *x.BossIndex
	}
	return 0
}

type MultiBossRaidStatData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BossIndex *uint32              `protobuf:"varint,1,opt,name=boss_index,json=bossIndex" json:"boss_index,omitempty"`
	Datas     []*GroupRaidShowData `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
}

func (x *MultiBossRaidStatData) Reset() {
	*x = MultiBossRaidStatData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiBossRaidStatData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiBossRaidStatData) ProtoMessage() {}

func (x *MultiBossRaidStatData) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiBossRaidStatData.ProtoReflect.Descriptor instead.
func (*MultiBossRaidStatData) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{139}
}

func (x *MultiBossRaidStatData) GetBossIndex() uint32 {
	if x != nil && x.BossIndex != nil {
		return *x.BossIndex
	}
	return 0
}

func (x *MultiBossRaidStatData) GetDatas() []*GroupRaidShowData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type QueryMultiBossRaidStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command                 `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param   *FuBenParam              `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=107" json:"param,omitempty"`
	Current *GroupRaidTeamShowData   `protobuf:"bytes,4,opt,name=current" json:"current,omitempty"`
	Total   *GroupRaidTeamShowData   `protobuf:"bytes,5,opt,name=total" json:"total,omitempty"`
	History []*GroupRaidTeamShowData `protobuf:"bytes,6,rep,name=history" json:"history,omitempty"`
}

// Default values for QueryMultiBossRaidStat fields.
const (
	Default_QueryMultiBossRaidStat_Cmd   = Command_FUBEN_PROTOCMD
	Default_QueryMultiBossRaidStat_Param = FuBenParam_MULTI_BOSS_STAT
)

func (x *QueryMultiBossRaidStat) Reset() {
	*x = QueryMultiBossRaidStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMultiBossRaidStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMultiBossRaidStat) ProtoMessage() {}

func (x *QueryMultiBossRaidStat) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMultiBossRaidStat.ProtoReflect.Descriptor instead.
func (*QueryMultiBossRaidStat) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{140}
}

func (x *QueryMultiBossRaidStat) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryMultiBossRaidStat_Cmd
}

func (x *QueryMultiBossRaidStat) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryMultiBossRaidStat_Param
}

func (x *QueryMultiBossRaidStat) GetCurrent() *GroupRaidTeamShowData {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *QueryMultiBossRaidStat) GetTotal() *GroupRaidTeamShowData {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *QueryMultiBossRaidStat) GetHistory() []*GroupRaidTeamShowData {
	if x != nil {
		return x.History
	}
	return nil
}

type ObMoveCameraPrepareCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=108" json:"param,omitempty"`
}

// Default values for ObMoveCameraPrepareCmd fields.
const (
	Default_ObMoveCameraPrepareCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_ObMoveCameraPrepareCmd_Param = FuBenParam_OB_CAMERA_MOVE_PREPARE
)

func (x *ObMoveCameraPrepareCmd) Reset() {
	*x = ObMoveCameraPrepareCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObMoveCameraPrepareCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObMoveCameraPrepareCmd) ProtoMessage() {}

func (x *ObMoveCameraPrepareCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObMoveCameraPrepareCmd.ProtoReflect.Descriptor instead.
func (*ObMoveCameraPrepareCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{141}
}

func (x *ObMoveCameraPrepareCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ObMoveCameraPrepareCmd_Cmd
}

func (x *ObMoveCameraPrepareCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ObMoveCameraPrepareCmd_Param
}

type ObCameraMoveEndCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=11" json:"cmd,omitempty"`
	Param *FuBenParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FuBenParam,def=109" json:"param,omitempty"`
}

// Default values for ObCameraMoveEndCmd fields.
const (
	Default_ObCameraMoveEndCmd_Cmd   = Command_FUBEN_PROTOCMD
	Default_ObCameraMoveEndCmd_Param = FuBenParam_OB_CAMERA_MOVE_END
)

func (x *ObCameraMoveEndCmd) Reset() {
	*x = ObCameraMoveEndCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_FuBenCmd_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObCameraMoveEndCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObCameraMoveEndCmd) ProtoMessage() {}

func (x *ObCameraMoveEndCmd) ProtoReflect() protoreflect.Message {
	mi := &file_FuBenCmd_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObCameraMoveEndCmd.ProtoReflect.Descriptor instead.
func (*ObCameraMoveEndCmd) Descriptor() ([]byte, []int) {
	return file_FuBenCmd_proto_rawDescGZIP(), []int{142}
}

func (x *ObCameraMoveEndCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ObCameraMoveEndCmd_Cmd
}

func (x *ObCameraMoveEndCmd) GetParam() FuBenParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ObCameraMoveEndCmd_Param
}

var File_FuBenCmd_proto protoreflect.FileDescriptor

var file_FuBenCmd_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc1, 0x02, 0x0a, 0x0b, 0x52, 0x61, 0x69, 0x64, 0x50, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x06, 0x52, 0x61, 0x69, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x52, 0x61, 0x69, 0x64, 0x49, 0x44,
	0x12, 0x19, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x04, 0x41,
	0x75, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x41, 0x75,
	0x74, 0x6f, 0x12, 0x25, 0x0a, 0x0c, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x57, 0x68, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x4a, 0x75, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4a, 0x75, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x08,
	0x46, 0x61, 0x69, 0x6c, 0x4a, 0x75, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x08, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x75, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x44,
	0x65, 0x73, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44,
	0x65, 0x73, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12,
	0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x14, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x64, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x10, 0x46, 0x61, 0x69, 0x6c, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x55, 0x42,
	0x45, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0x96, 0x01, 0x0a, 0x11, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x46, 0x75, 0x42, 0x65,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75,
	0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f,
	0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x22, 0xa3, 0x02, 0x0a, 0x13,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e,
	0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x16, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x55, 0x42,
	0x45, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x61, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x0d, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31,
	0x12, 0x19, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x19, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x12, 0x19, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x34,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x34, 0x22, 0x4e, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x55, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x65, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74,
	0x65, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x11, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x2e,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14,
	0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x63, 0x75, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x53, 0x74, 0x65, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x65,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x65, 0x70, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x74, 0x61, 0x72, 0x22, 0x69, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x67, 0x65, 0x48, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x65, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x65, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x65, 0x70,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x83, 0x02, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x65, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53,
	0x74, 0x65, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x48, 0x61, 0x72, 0x64, 0x53, 0x74, 0x65, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x68, 0x61,
	0x72, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43,
	0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x65, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x65, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xbb, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46,
	0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x47, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x72, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x69, 0x64, 0x22, 0xe1, 0x01,
	0x0a, 0x14, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54,
	0x45, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x65, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x74, 0x65, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x96, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46,
	0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x4d, 0x4f, 0x4e, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d,
	0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0xed, 0x01, 0x0a, 0x10, 0x46,
	0x75, 0x62, 0x65, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6d, 0x64, 0x12,
	0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x0f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x43,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x03, 0x64, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x03,
	0x64, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x50, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xcb, 0x01, 0x0a, 0x14, 0x46,
	0x75, 0x42, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e,
	0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x0f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x11, 0x46, 0x75, 0x42, 0x65,
	0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x10, 0x46,
	0x55, 0x42, 0x45, 0x4e, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x9a, 0x02, 0x0a, 0x0d, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x47, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x74, 0x65,
	0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x67, 0x61, 0x74,
	0x65, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x62, 0x6f, 0x73, 0x73, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x62, 0x6f, 0x73, 0x73, 0x6e, 0x75, 0x6d, 0x12,
	0x21, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1f, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x09,
	0x69, 0x73, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x14, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x47, 0x41,
	0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x61, 0x69, 0x64, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x08, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe6, 0x01, 0x0a, 0x0f, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x47, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x2e,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x5f,
	0x4f, 0x50, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61,
	0x74, 0x65, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x67,
	0x61, 0x74, 0x65, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x47, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x23,
	0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0xdb, 0x03, 0x0a, 0x15, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x36, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0f, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x04, 0x66, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x66, 0x69, 0x72, 0x65,
	0x12, 0x22, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x66, 0x69, 0x72, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x65,
	0x6e, 0x64, 0x66, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x06, 0x64, 0x61,
	0x6e, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x06, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x61, 0x6e,
	0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x0a, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0b, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x70, 0x70, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x48, 0x70, 0x70, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6d, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6d,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1e, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6d, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6d,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x5f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0b, 0x64, 0x65, 0x66,
	0x5f, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x50, 0x65, 0x72, 0x66, 0x65, 0x63,
	0x74, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x72, 0x65, 0x53,
	0x74, 0x6f, 0x70, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x46, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x17, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x72, 0x65,
	0x44, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x44, 0x41, 0x4e, 0x47, 0x45,
	0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x06, 0x64, 0x61, 0x6e, 0x67,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x06, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x61, 0x6e, 0x67, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x0a, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x18,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x48, 0x70,
	0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75,
	0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x46, 0x49, 0x52, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x48, 0x50, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x68, 0x70, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x68, 0x70, 0x70, 0x65, 0x72, 0x22, 0x9a, 0x01, 0x0a,
	0x15, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6d, 0x46, 0x75,
	0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x49,
	0x52, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19,
	0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6d, 0x22, 0xc4, 0x01, 0x0a, 0x17, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x46, 0x69, 0x72, 0x65, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x66, 0x46, 0x75, 0x62,
	0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x49, 0x52,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x85, 0x01, 0x0a, 0x18, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xfa, 0x01, 0x0a, 0x17, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x46, 0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x75, 0x62, 0x65,
	0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69,
	0x74, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x63, 0x69, 0x74,
	0x79, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0x57, 0x0a, 0x07, 0x47, 0x76, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x76, 0x67, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x0c, 0x45, 0x47, 0x56, 0x47, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9e,
	0x01, 0x0a, 0x0e, 0x47, 0x76, 0x67, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6d,
	0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55,
	0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x11, 0x47, 0x56, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x59, 0x4e, 0x43,
	0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x47, 0x76, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22,
	0xa0, 0x01, 0x0a, 0x10, 0x47, 0x76, 0x67, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x47, 0x56, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x20, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x76, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xa9, 0x01, 0x0a, 0x18, 0x47, 0x76, 0x67, 0x44, 0x65, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12,
	0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x1c, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd7,
	0x01, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x76, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75,
	0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x4d, 0x56, 0x50, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4d, 0x56, 0x50, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x62, 0x6f, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x69, 0x65, 0x62, 0x6f, 0x73, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x07, 0x64, 0x69, 0x65, 0x62, 0x6f, 0x73, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x0f, 0x42, 0x6f, 0x73,
	0x73, 0x44, 0x69, 0x65, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x4d, 0x56,
	0x50, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x22, 0xa0, 0x01,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x46,
	0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42,
	0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x75, 0x6d,
	0x22, 0x3f, 0x0a, 0x0d, 0x47, 0x76, 0x67, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xae, 0x01, 0x0a, 0x0c, 0x47, 0x76, 0x67, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x76, 0x67, 0x54, 0x6f, 0x77, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x47, 0x76, 0x67, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x06, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47,
	0x76, 0x67, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0x7e, 0x0a, 0x0e, 0x47, 0x76, 0x67, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x6e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x63, 0x72, 0x79, 0x73, 0x74,
	0x61, 0x6c, 0x6e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x63, 0x68, 0x69, 0x70, 0x6e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x63, 0x68, 0x69, 0x70, 0x6e,
	0x75, 0x6d, 0x22, 0xc5, 0x01, 0x0a, 0x0c, 0x47, 0x76, 0x67, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x63,
	0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x47, 0x76, 0x67, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x22, 0x86, 0x02, 0x0a, 0x14, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x47, 0x76, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x75, 0x62, 0x65, 0x6e,
	0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e,
	0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x12, 0x53, 0x55, 0x50, 0x45, 0x52, 0x47, 0x56, 0x47, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x29,
	0x0a, 0x06, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x76, 0x67, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x06, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x47, 0x76, 0x67, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0d, 0x66, 0x69,
	0x72, 0x65, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x65, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x16, 0x47, 0x76, 0x67, 0x54, 0x6f, 0x77, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19,
	0x53, 0x55, 0x50, 0x45, 0x52, 0x47, 0x56, 0x47, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x29, 0x0a, 0x06, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x76, 0x67, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x13,
	0x47, 0x76, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x65, 0x46, 0x75, 0x62, 0x65, 0x6e,
	0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e,
	0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x12, 0x53, 0x55, 0x50, 0x45, 0x52, 0x47, 0x56, 0x47, 0x5f, 0x4d, 0x45,
	0x54, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xbd, 0x01, 0x0a, 0x18, 0x47, 0x76, 0x67, 0x43,
	0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x75, 0x62, 0x65,
	0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x53, 0x55, 0x50, 0x45, 0x52, 0x47, 0x56, 0x47, 0x5f, 0x4d,
	0x45, 0x54, 0x41, 0x4c, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47,
	0x76, 0x67, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63,
	0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x76, 0x67, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x62,
	0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x53, 0x55, 0x50, 0x45, 0x52, 0x47, 0x56, 0x47, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x76, 0x67,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0x3e, 0x0a, 0x0e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x12, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x47, 0x76, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x1a, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x47, 0x76, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46,
	0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x53, 0x55, 0x50, 0x45, 0x52,
	0x47, 0x56, 0x47, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x76, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0xad, 0x02, 0x0a, 0x10, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x76, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x64, 0x69, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x64, 0x69, 0x65, 0x6e, 0x75, 0x6d,
	0x12, 0x1b, 0x0a, 0x07, 0x63, 0x68, 0x69, 0x70, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x63, 0x68, 0x69, 0x70, 0x6e, 0x75, 0x6d, 0x12, 0x1f, 0x0a,
	0x09, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x09, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x68, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x68, 0x70, 0x12, 0x1f, 0x0a, 0x09, 0x72, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x09, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0b, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x22,
	0x66, 0x0a, 0x15, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x76, 0x67, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x47, 0x76, 0x67, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x1d, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x47, 0x76, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46,
	0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x53, 0x55, 0x50, 0x45, 0x52,
	0x47, 0x56, 0x47, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x40, 0x0a, 0x0d, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x47, 0x76, 0x67,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x75, 0x73, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc2, 0x01, 0x0a,
	0x11, 0x4d, 0x76, 0x70, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x69, 0x6c, 0x6c, 0x6d, 0x76,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x6b, 0x69, 0x6c, 0x6c, 0x6d, 0x76,
	0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x12, 0x23, 0x0a, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x62, 0x6f, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x62, 0x6f, 0x73,
	0x73, 0x22, 0xb4, 0x01, 0x0a, 0x17, 0x4d, 0x76, 0x70, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x4d,
	0x56, 0x50, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4d, 0x76, 0x70, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x6f, 0x73, 0x73, 0x46, 0x75, 0x62,
	0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x55,
	0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x42, 0x4f, 0x53, 0x53, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x44, 0x65, 0x61, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x65, 0x61, 0x64, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x69, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x65, 0x61,
	0x64, 0x62, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xdb,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x6f,
	0x73, 0x73, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x42, 0x4f, 0x53,
	0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x06, 0x69, 0x73, 0x66, 0x75,
	0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x06, 0x69, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x61,
	0x67, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0xb5, 0x02, 0x0a,
	0x13, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x52, 0x61, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x69, 0x6c, 0x6c, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6b, 0x69, 0x6c, 0x6c, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x61, 0x6c, 0x6c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75,
	0x66, 0x66, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x75, 0x66, 0x66, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x69, 0x65, 0x6e, 0x75, 0x6d,
	0x12, 0x30, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73,
	0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x50,
	0x77, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x36,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x52,
	0x61, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x76, 0x65, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x65, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x50, 0x77, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x62, 0x65, 0x6e,
	0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e,
	0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x9c, 0x02,
	0x0a, 0x15, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42,
	0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53,
	0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50,
	0x77, 0x73, 0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0b, 0x6d, 0x76, 0x70, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x6d, 0x76, 0x70, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2c,
	0x0a, 0x07, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x61, 0x6d, 0x22, 0xf3, 0x01, 0x0a,
	0x13, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54,
	0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x17, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x63, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x08, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x63, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07,
	0x6d, 0x61, 0x67, 0x69, 0x63, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x61, 0x6c, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x61,
	0x67, 0x69, 0x63, 0x42, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x62, 0x61, 0x6c,
	0x6c, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x17, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11,
	0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75,
	0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50,
	0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x46,
	0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42,
	0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53,
	0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x69, 0x64, 0x22, 0x77,
	0x0a, 0x0f, 0x45, 0x78, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d,
	0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55,
	0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x0d, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x43, 0x4d, 0x44,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x7f, 0x0a, 0x11, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x46, 0x69, 0x72, 0x65, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x42, 0x45,
	0x47, 0x49, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x43, 0x4d,
	0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xf8, 0x01, 0x0a, 0x15, 0x54, 0x65, 0x61,
	0x6d, 0x45, 0x78, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43,
	0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46,
	0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x13, 0x54, 0x45, 0x41, 0x4d, 0x45, 0x58, 0x50, 0x5f, 0x52, 0x41, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x62, 0x61, 0x73, 0x65, 0x65, 0x78, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x65,
	0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x65, 0x78, 0x70,
	0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x16, 0x42, 0x75, 0x79, 0x45, 0x78, 0x70, 0x52, 0x61,
	0x69, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x10,
	0x54, 0x45, 0x41, 0x4d, 0x45, 0x58, 0x50, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x75,
	0x6d, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x70, 0x53, 0x79, 0x6e,
	0x63, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46,
	0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x10, 0x54, 0x45, 0x41, 0x4d, 0x45,
	0x58, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xb8, 0x01, 0x0a, 0x17, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x1a, 0x54,
	0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x69, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46,
	0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x54, 0x45, 0x41, 0x4d, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x63, 0x68, 0x69, 0x70, 0x6e, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x63, 0x68, 0x69, 0x70,
	0x6e, 0x75, 0x6d, 0x22, 0xcb, 0x01, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69,
	0x64, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x08, 0x62, 0x65, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x62, 0x65, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x15, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x06, 0x64, 0x69, 0x65, 0x6e, 0x75, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x64, 0x69, 0x65, 0x6e, 0x75,
	0x6d, 0x22, 0x7f, 0x0a, 0x15, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x06, 0x72, 0x61,
	0x69, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x72,
	0x61, 0x69, 0x64, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x61, 0x69, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0xfb, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55,
	0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1a, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x41,
	0x49, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x22, 0xd0, 0x01, 0x0a, 0x1a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12,
	0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x15, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x41, 0x49, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x44, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x13, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x52,
	0x41, 0x49, 0x44, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x18, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x70, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64,
	0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42,
	0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x12, 0x54, 0x45, 0x41, 0x4d, 0x45, 0x58, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64,
	0x46, 0x6f, 0x75, 0x72, 0x74, 0x68, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xf8, 0x01, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64,
	0x46, 0x6f, 0x75, 0x72, 0x74, 0x68, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x54,
	0x48, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x32, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x46, 0x6f,
	0x75, 0x72, 0x74, 0x68, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61,
	0x69, 0x64, 0x46, 0x6f, 0x75, 0x72, 0x74, 0x68, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0xa9, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x46, 0x6f, 0x75, 0x72, 0x74, 0x68,
	0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75,
	0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x54, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x19, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69,
	0x64, 0x46, 0x6f, 0x75, 0x72, 0x74, 0x68, 0x47, 0x6f, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6d,
	0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55,
	0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x19, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x4f,
	0x55, 0x52, 0x54, 0x48, 0x5f, 0x47, 0x4f, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x22, 0x98, 0x01,
	0x0a, 0x15, 0x52, 0x61, 0x69, 0x64, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x46,
	0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42,
	0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x17, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x1b, 0x54, 0x68, 0x61,
	0x6e, 0x6b, 0x73, 0x47, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x75, 0x42, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75,
	0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x54, 0x48, 0x41, 0x4e, 0x4b, 0x53,
	0x47, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e,
	0x55, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x65, 0x6c, 0x69,
	0x74, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x08,
	0x65, 0x6c, 0x69, 0x74, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69,
	0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x07, 0x6d,
	0x69, 0x6e, 0x69, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x06, 0x6d, 0x76, 0x70, 0x6e, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x06, 0x6d, 0x76, 0x70, 0x6e,
	0x75, 0x6d, 0x22, 0xd7, 0x01, 0x0a, 0x14, 0x4b, 0x75, 0x6d, 0x61, 0x6d, 0x6f, 0x74, 0x6f, 0x4f,
	0x70, 0x65, 0x72, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x4b, 0x55, 0x4d,
	0x41, 0x4d, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4b, 0x75, 0x6d, 0x61, 0x6d,
	0x6f, 0x74, 0x6f, 0x4f, 0x70, 0x65, 0x72, 0x3a, 0x14, 0x45, 0x4b, 0x55, 0x4d, 0x41, 0x4d, 0x4f,
	0x54, 0x4f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa1, 0x01, 0x0a,
	0x11, 0x4f, 0x74, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x72, 0x65,
	0x64, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x6c, 0x75,
	0x65, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0c, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x22, 0xc4, 0x01, 0x0a, 0x1f, 0x4f, 0x74, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x75, 0x62, 0x65,
	0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x4f, 0x54, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x5f, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x59, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x63, 0x63, 0x75, 0x70,
	0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4f, 0x74,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x06, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x22, 0x5c, 0x0a, 0x13, 0x4f, 0x74, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x17, 0x4f, 0x74, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d,
	0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55,
	0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x11, 0x4f, 0x54, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x13,
	0x4f, 0x74, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x61, 0x69, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x69, 0x6c, 0x6c, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6b, 0x69, 0x6c, 0x6c, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x69, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x69, 0x65,
	0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x68, 0x65, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x79, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75,
	0x70, 0x79, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x4f, 0x74,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x76, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x61, 0x76, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x61, 0x69, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x74, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x62, 0x65,
	0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x41, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x4f, 0x74, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x8b,
	0x02, 0x0a, 0x15, 0x4f, 0x74, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75,
	0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x4f, 0x54, 0x48, 0x45, 0x4c, 0x4c,
	0x4f, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x61, 0x6d,
	0x12, 0x34, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0b, 0x6d, 0x76, 0x70, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x6d, 0x76, 0x70, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xac, 0x01, 0x0a,
	0x18, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46,
	0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x52, 0x4f, 0x47, 0x55, 0x45,
	0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x09, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x1b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x6f,
	0x6f, 0x73, 0x65, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53,
	0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x64,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x64,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x49, 0x0a, 0x09, 0x52, 0x61,
	0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x46, 0x75, 0x62, 0x65, 0x6e,
	0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e,
	0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x46, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x79,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x79, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0xd0, 0x01, 0x0a, 0x18, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x64, 0x46, 0x75, 0x62,
	0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x46,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x22, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x06, 0x6d, 0x79, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x06, 0x6d, 0x79, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x99, 0x02, 0x0a, 0x18,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75,
	0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45,
	0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x43, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52,
	0x6f, 0x6c, 0x6c, 0x52, 0x61, 0x69, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x13, 0x45, 0x52, 0x4f, 0x4c, 0x4c, 0x52, 0x41, 0x49, 0x44, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x46, 0x75, 0x62, 0x65, 0x6e,
	0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e,
	0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x15, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x5f,
	0x52, 0x41, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x6f,
	0x6c, 0x6c, 0x52, 0x61, 0x69, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x22,
	0xb6, 0x01, 0x0a, 0x16, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x54, 0x45, 0x41, 0x4d,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64,
	0x64, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x64, 0x64, 0x69,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x69, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x1a, 0x50, 0x72, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x46,
	0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42,
	0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x50, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41,
	0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x61, 0x69, 0x64,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x22, 0x52, 0x0a, 0x0d, 0x54, 0x77, 0x65,
	0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe5, 0x01,
	0x0a, 0x10, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x43,
	0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46,
	0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x13, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x63, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x0b, 0x54, 0x77, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x0f, 0x52, 0x61, 0x69, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56,
	0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x77, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x11, 0x52, 0x61, 0x69, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75,
	0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45,
	0x50, 0x56, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0xb4, 0x01, 0x0a,
	0x13, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f,
	0x55, 0x53, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x19, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x11, 0x52, 0x61, 0x69, 0x64, 0x53, 0x68, 0x6f, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46,
	0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x54, 0x57, 0x45, 0x4c, 0x56,
	0x45, 0x50, 0x56, 0x50, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x70, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68,
	0x6f, 0x70, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x12, 0x54, 0x77, 0x65, 0x6c,
	0x76, 0x65, 0x50, 0x76, 0x70, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x22, 0xb5, 0x01, 0x0a, 0x16, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x54, 0x57, 0x45,
	0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54,
	0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xa4, 0x02, 0x0a, 0x11, 0x54, 0x77, 0x65,
	0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x69,
	0x6c, 0x6c, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6b, 0x69, 0x6c,
	0x6c, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x69, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x65, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x65, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x67, 0x6f, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x79, 0x73, 0x74,
	0x61, 0x6c, 0x45, 0x78, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x76, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x76, 0x70, 0x12, 0x30, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x71, 0x0a, 0x12, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x1a, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x76, 0x70,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6d,
	0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55,
	0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1a, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x77,
	0x65, 0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x7d, 0x0a, 0x0e, 0x43,
	0x61, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a,
	0x04, 0x63, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x63, 0x61,
	0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x76, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6b, 0x69, 0x6c, 0x6c, 0x4d, 0x76, 0x70, 0x22, 0xad, 0x02, 0x0a, 0x12, 0x54,
	0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6d,
	0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55,
	0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x10, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x44, 0x0a, 0x0d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x76,
	0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6d, 0x64, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x43, 0x6d, 0x64,
	0x12, 0x29, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x10, 0x63,
	0x61, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x61, 0x6d, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x63, 0x61, 0x6d, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x0a, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x68, 0x70, 0x5f,
	0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x70, 0x50, 0x65, 0x72,
	0x22, 0xb8, 0x01, 0x0a, 0x1c, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6d,
	0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55,
	0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1c, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x48, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbb, 0x01, 0x0a, 0x12,
	0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x55, 0x49, 0x4f, 0x70, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46,
	0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x17, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x21, 0x0a, 0x02, 0x75, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x55,
	0x49, 0x52, 0x02, 0x75, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x52, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x43, 0x64, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x30,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x09,
	0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x07, 0x50, 0x6f,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f,
	0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x22, 0xba, 0x01, 0x0a,
	0x0f, 0x50, 0x6f, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64,
	0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42,
	0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x2f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x08, 0x50, 0x4f, 0x53, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x22, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x75,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x71, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46,
	0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x16, 0x52, 0x45, 0x51, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x4f,
	0x57, 0x45, 0x52, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x47, 0x0a,
	0x17, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x77, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8d, 0x02, 0x0a, 0x15, 0x54, 0x6f, 0x77, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42,
	0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x14, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4c,
	0x41, 0x59, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x36,
	0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x1d, 0x54, 0x6f, 0x77, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x4e, 0x74, 0x66, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75,
	0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x0e, 0x46, 0x75,
	0x62, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x74, 0x66, 0x12, 0x2e, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x10, 0x46, 0x55,
	0x42, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x61, 0x69, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52,
	0x61, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0d, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x08, 0x72, 0x61, 0x69, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x77, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x77, 0x69, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x33,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0c,
	0x45, 0x4e, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x91, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x46,
	0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42,
	0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6f, 0x64, 0x6f, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0c, 0x43, 0x4f,
	0x4d, 0x4f, 0x44, 0x4f, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x43, 0x6f, 0x6d, 0x6f, 0x64, 0x6f, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x61, 0x69, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x22, 0x74, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6f, 0x64, 0x6f, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x61, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04,
	0x62, 0x6f, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x43, 0x6f, 0x6d, 0x6f, 0x64, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x69, 0x64,
	0x42, 0x6f, 0x73, 0x73, 0x52, 0x04, 0x62, 0x6f, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x17, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6f, 0x64, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x69, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0b, 0x43, 0x4f, 0x4d, 0x4f, 0x44, 0x4f, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x68, 0x6f,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x34, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69,
	0x64, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x18, 0x54, 0x65, 0x61, 0x6d, 0x50,
	0x77, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x75, 0x62, 0x65, 0x6e,
	0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e,
	0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x12, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x69,
	0x72, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46,
	0x6c, 0x61, 0x73, 0x68, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x35, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0e, 0x4f, 0x42,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0xa5, 0x01,
	0x0a, 0x16, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75,
	0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64,
	0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42,
	0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x0f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43,
	0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x56, 0x0a,
	0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x70, 0x53, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x70, 0x70,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x70, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x70, 0x70, 0x65, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x14, 0x4f, 0x62, 0x48, 0x70, 0x73, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x35,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0e,
	0x4f, 0x42, 0x5f, 0x48, 0x50, 0x53, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x70, 0x53, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x17, 0x4f, 0x62, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43,
	0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46,
	0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x11, 0x4f, 0x42, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4f, 0x46,
	0x46, 0x4c, 0x49, 0x4e, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x22,
	0xa0, 0x01, 0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x6f, 0x73, 0x73, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x46, 0x75, 0x62, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x10, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x64, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x6f, 0x73, 0x73, 0x52,
	0x61, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6f, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x6f, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x16, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x69, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e,
	0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x0f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x69, 0x64,
	0x54, 0x65, 0x61, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x61, 0x69, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x87, 0x01, 0x0a, 0x16, 0x4f, 0x62,
	0x4d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x4f, 0x42, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f,
	0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0x7f, 0x0a, 0x12, 0x4f, 0x62, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d,
	0x6f, 0x76, 0x65, 0x45, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46,
	0x75, 0x42, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x4f, 0x42, 0x5f, 0x43, 0x41,
	0x4d, 0x45, 0x52, 0x41, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x2a, 0xdd, 0x14, 0x0a, 0x0a, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x46, 0x55, 0x42,
	0x45, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x4d, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f,
	0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x55, 0x42, 0x45,
	0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14,
	0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x4d, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x06, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x45, 0x54, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x47, 0x45,
	0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x4d, 0x44, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x46, 0x55,
	0x42, 0x45, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x0a, 0x12, 0x1a,
	0x0a, 0x16, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x55,
	0x42, 0x45, 0x4e, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x0c, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x43, 0x4c,
	0x45, 0x41, 0x52, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x52, 0x41,
	0x49, 0x44, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x10, 0x11, 0x12, 0x13, 0x0a,
	0x0f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x45,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x14, 0x12, 0x16,
	0x0a, 0x12, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x4d, 0x45, 0x54,
	0x41, 0x4c, 0x48, 0x50, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x46, 0x49, 0x52, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4d, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x17, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x18,
	0x12, 0x15, 0x0a, 0x11, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x19, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x56, 0x47, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x1a, 0x12, 0x17,
	0x0a, 0x13, 0x47, 0x56, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x1b, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x56, 0x50,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4d, 0x56, 0x50, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x1d, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x56, 0x50, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x45, 0x10, 0x1e, 0x12, 0x17, 0x0a,
	0x13, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x55, 0x4d, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x1f, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x55, 0x50, 0x45, 0x52, 0x47,
	0x56, 0x47, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x20, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x55, 0x50, 0x45, 0x52, 0x47, 0x56, 0x47, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x21, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x55, 0x50, 0x45, 0x52, 0x47, 0x56, 0x47, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x22, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x55, 0x50, 0x45, 0x52, 0x47, 0x56, 0x47, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54,
	0x4f, 0x57, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x23, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x55,
	0x50, 0x45, 0x52, 0x47, 0x56, 0x47, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x24, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x55, 0x50, 0x45, 0x52, 0x47, 0x56, 0x47,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x10, 0x25, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x56, 0x50, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f,
	0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x26, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x55, 0x50, 0x45, 0x52, 0x47, 0x56, 0x47, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x5f, 0x44,
	0x49, 0x45, 0x10, 0x27, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x53,
	0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x42, 0x4f, 0x53, 0x53, 0x10, 0x28,
	0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x41, 0x44, 0x42, 0x4f, 0x53, 0x53, 0x10, 0x29, 0x12, 0x1f, 0x0a, 0x1b, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57,
	0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x2a, 0x12, 0x16, 0x0a, 0x12,
	0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x2b, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x2c, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x41,
	0x47, 0x49, 0x43, 0x10, 0x2d, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x10, 0x2e, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x2f, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x58, 0x49, 0x54,
	0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x30, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x45, 0x47, 0x49, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x43,
	0x4d, 0x44, 0x10, 0x31, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x41, 0x4d, 0x45, 0x58, 0x50, 0x5f,
	0x52, 0x41, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x32, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x45, 0x41, 0x4d, 0x45, 0x58, 0x50, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x10, 0x33, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x41, 0x4d, 0x45, 0x58, 0x50, 0x5f, 0x53,
	0x59, 0x4e, 0x43, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x34, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x35,
	0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52,
	0x41, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x10, 0x36, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45,
	0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x37, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45,
	0x41, 0x4d, 0x45, 0x58, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x10, 0x38, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x39, 0x12, 0x15, 0x0a,
	0x11, 0x4b, 0x55, 0x4d, 0x41, 0x4d, 0x4f, 0x54, 0x4f, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x43,
	0x4d, 0x44, 0x10, 0x3a, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x54, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0x3b, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x46, 0x4f, 0x55, 0x52, 0x54, 0x48, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x3c, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x46, 0x4f,
	0x55, 0x52, 0x54, 0x48, 0x5f, 0x47, 0x4f, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x3d, 0x12, 0x13,
	0x0a, 0x0f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x10, 0x3e, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x48, 0x41, 0x4e, 0x4b, 0x53, 0x47, 0x49, 0x56,
	0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x10,
	0x3f, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x54, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x5f, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x59, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10,
	0x40, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x54, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x41, 0x12, 0x1f, 0x0a, 0x1b, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x42, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x54, 0x48,
	0x45, 0x4c, 0x4c, 0x4f, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x43, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x53,
	0x59, 0x4e, 0x43, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x53,
	0x10, 0x44, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x46, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x10, 0x45, 0x12, 0x16, 0x0a, 0x12,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x10, 0x46, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x47, 0x12, 0x17, 0x0a, 0x13, 0x54,
	0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0x48, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56,
	0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x49, 0x12, 0x19, 0x0a,
	0x15, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x4a, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x57, 0x45, 0x4c,
	0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x4b, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50,
	0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x4c, 0x12, 0x1e,
	0x0a, 0x1a, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x4d, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x10, 0x4e, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56,
	0x50, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x50, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x4f, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45,
	0x50, 0x56, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x10, 0x50, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50,
	0x5f, 0x55, 0x53, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x51, 0x12, 0x1b, 0x0a, 0x17, 0x49,
	0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x52, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x52,
	0x44, 0x10, 0x53, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x45, 0x41, 0x4d, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x54,
	0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x4f,
	0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x52, 0x44, 0x10, 0x55, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x44, 0x10, 0x56, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x4f, 0x53, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x57, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x45, 0x51, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x58, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x4f, 0x57, 0x45,
	0x52, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x59, 0x49, 0x4e, 0x46, 0x4f,
	0x10, 0x59, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f,
	0x57, 0x4e, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x5a, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x55, 0x42, 0x45,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x5b, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x4e, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x5c,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10,
	0x5d, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x4f, 0x44, 0x4f, 0x5f, 0x50, 0x48, 0x41, 0x53,
	0x45, 0x10, 0x61, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4d, 0x4f, 0x44, 0x4f, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x10, 0x62, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x63, 0x12, 0x12, 0x0a, 0x0e,
	0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x10, 0x64,
	0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x48, 0x10, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x66, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x42,
	0x5f, 0x48, 0x50, 0x53, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x68, 0x12, 0x15,
	0x0a, 0x11, 0x4f, 0x42, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x69, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x42,
	0x4f, 0x53, 0x53, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x10, 0x6a, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x10, 0x6b,
	0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x42, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x4d, 0x4f,
	0x56, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x6c, 0x12, 0x16, 0x0a, 0x12,
	0x4f, 0x42, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x45,
	0x4e, 0x44, 0x10, 0x6d, 0x2a, 0xa5, 0x0b, 0x0a, 0x09, 0x45, 0x52, 0x61, 0x69, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x45, 0x52, 0x52, 0x49, 0x53, 0x57, 0x48, 0x45, 0x45, 0x4c, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x57, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x41, 0x42, 0x4f, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x05, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x4c, 0x10, 0x07,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41,
	0x49, 0x44, 0x54, 0x45, 0x4d, 0x50, 0x32, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x41,
	0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x4a, 0x4f, 0x10, 0x09, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x41, 0x49, 0x44, 0x54, 0x45, 0x4d, 0x50, 0x34, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x52, 0x41, 0x49, 0x44, 0x10, 0x0d, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x46, 0x49, 0x52, 0x45, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x4c, 0x4c, 0x48, 0x10, 0x15, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x53,
	0x4d, 0x5a, 0x4c, 0x10, 0x16, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x48, 0x4c, 0x4a, 0x53, 0x10, 0x17, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x4c,
	0x41, 0x4e, 0x44, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x59, 0x10, 0x19, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x1a, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x1b, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x56, 0x45, 0x43, 0x41, 0x52, 0x44,
	0x10, 0x1c, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x56, 0x50, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x1d, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x47, 0x56,
	0x47, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x4c, 0x54, 0x4d, 0x41, 0x4e, 0x10, 0x1f, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x41,
	0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x10, 0x20,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x45, 0x58, 0x50, 0x10, 0x22, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x41, 0x49, 0x44,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x41, 0x54, 0x4f, 0x53, 0x10, 0x23, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x41,
	0x4e, 0x41, 0x54, 0x4f, 0x53, 0x5f, 0x4d, 0x49, 0x44, 0x10, 0x24, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x25,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x41, 0x54, 0x4f, 0x53, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x33, 0x10, 0x26, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x55, 0x4d,
	0x41, 0x4d, 0x4f, 0x54, 0x4f, 0x10, 0x27, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x41, 0x49, 0x44,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x41, 0x54, 0x4f, 0x53, 0x5f, 0x46, 0x4f,
	0x55, 0x52, 0x54, 0x48, 0x10, 0x28, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x41, 0x52, 0x44, 0x45, 0x4e, 0x10, 0x29, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x4b, 0x53,
	0x47, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x2a, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x41, 0x49,
	0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52, 0x10, 0x2b,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x10, 0x2c, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x41, 0x49, 0x44,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x2d, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45,
	0x4c, 0x49, 0x4b, 0x45, 0x10, 0x2e, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x53, 0x57,
	0x45, 0x52, 0x10, 0x2f, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10,
	0x30, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x46, 0x49, 0x47, 0x48, 0x54, 0x10, 0x31, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x57, 0x45, 0x4c,
	0x56, 0x45, 0x5f, 0x50, 0x56, 0x50, 0x10, 0x32, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x41, 0x49,
	0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x42, 0x4f, 0x53, 0x53, 0x10, 0x33,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x49,
	0x4e, 0x48, 0x45, 0x52, 0x4a, 0x41, 0x52, 0x10, 0x34, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x41,
	0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0x35, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x10, 0x36, 0x12, 0x22, 0x0a, 0x1e, 0x45,
	0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x4c, 0x45, 0x53, 0x53,
	0x54, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x37, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x41, 0x4e,
	0x55, 0x41, 0x52, 0x59, 0x10, 0x38, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x59, 0x10, 0x39, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x41,
	0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4f, 0x44, 0x4f, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x10, 0x3b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x41,
	0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x10, 0x3c, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4e,
	0x45, 0x59, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x10, 0x3d, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x52,
	0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x4e, 0x5f, 0x52, 0x4f,
	0x59, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x10, 0x3e, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41,
	0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x3f, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x41,
	0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x40, 0x2a, 0x67, 0x0a, 0x1a,
	0x45, 0x45, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x45,
	0x45, 0x4e, 0x44, 0x4c, 0x45, 0x53, 0x53, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4d,
	0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x20, 0x45, 0x45, 0x45, 0x4e, 0x44, 0x4c, 0x45, 0x53, 0x53, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x41,
	0x4e, 0x43, 0x45, 0x10, 0x01, 0x2a, 0x79, 0x0a, 0x0f, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x47,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x47, 0x41, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x47, 0x41, 0x54, 0x45, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x47, 0x41, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x47, 0x41, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03,
	0x2a, 0x78, 0x0a, 0x0d, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x61, 0x74, 0x65, 0x4f, 0x70,
	0x74, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x47, 0x41, 0x54, 0x45, 0x4f,
	0x50, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x47, 0x41, 0x54, 0x45, 0x4f, 0x50, 0x54, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x47, 0x41, 0x54,
	0x45, 0x4f, 0x50, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x47, 0x41, 0x54, 0x45, 0x4f, 0x50, 0x54, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x67, 0x0a, 0x10, 0x45, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x46, 0x49, 0x52, 0x45, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x46, 0x49, 0x52, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x44, 0x45, 0x46,
	0x53, 0x50, 0x45, 0x43, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x46, 0x49, 0x52, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x4b, 0x10, 0x03, 0x2a, 0xd2, 0x01, 0x0a, 0x0c, 0x45, 0x47, 0x76, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x47, 0x56, 0x47, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x47, 0x56, 0x47, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x47, 0x56, 0x47, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4b, 0x49, 0x4c, 0x4c,
	0x4d, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x47, 0x56, 0x47, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x47,
	0x56, 0x47, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x47, 0x56, 0x47, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x41, 0x4d, 0x4d, 0x45,
	0x54, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x56, 0x47, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x47, 0x56, 0x47, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x47, 0x56, 0x47, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x48, 0x4f, 0x4e, 0x4f, 0x52, 0x10, 0x08, 0x2a, 0x61, 0x0a, 0x0e, 0x45, 0x47, 0x76, 0x67,
	0x54, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x47,
	0x56, 0x47, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x46, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x47, 0x56, 0x47, 0x54,
	0x4f, 0x57, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x59,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x47, 0x56, 0x47, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x03, 0x2a, 0x6e, 0x0a, 0x0d, 0x45,
	0x47, 0x76, 0x67, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x47, 0x56, 0x47, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x56, 0x47, 0x54, 0x4f, 0x57, 0x45, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x47, 0x56, 0x47, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x53,
	0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x56, 0x47, 0x54, 0x4f, 0x57, 0x45, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x10, 0x03, 0x2a, 0x77, 0x0a, 0x13, 0x45,
	0x44, 0x65, 0x61, 0x64, 0x42, 0x6f, 0x73, 0x73, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x44, 0x45, 0x41, 0x44, 0x42, 0x4f, 0x53, 0x53, 0x44,
	0x49, 0x46, 0x46, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x44, 0x45,
	0x41, 0x44, 0x42, 0x4f, 0x53, 0x53, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x44, 0x45, 0x41, 0x44, 0x42, 0x4f, 0x53, 0x53,
	0x44, 0x49, 0x46, 0x46, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x44, 0x45, 0x41, 0x44, 0x42, 0x4f, 0x53, 0x53, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x53, 0x55, 0x50,
	0x45, 0x52, 0x10, 0x04, 0x2a, 0x34, 0x0a, 0x0d, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57,
	0x53, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x54, 0x45, 0x41, 0x4d,
	0x50, 0x57, 0x53, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x2a, 0x7a, 0x0a, 0x0e, 0x45, 0x4d,
	0x61, 0x67, 0x69, 0x63, 0x42, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x57,
	0x49, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x42,
	0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x41, 0x52, 0x54, 0x48, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4d, 0x41, 0x47, 0x49, 0x43, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x42, 0x41, 0x4c, 0x4c, 0x5f,
	0x46, 0x49, 0x52, 0x45, 0x10, 0x04, 0x2a, 0x63, 0x0a, 0x14, 0x45, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x61, 0x69, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x52, 0x41, 0x49, 0x44, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x52, 0x41, 0x49, 0x44, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x52, 0x41, 0x49, 0x44, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x5c, 0x0a, 0x0d, 0x45,
	0x4b, 0x75, 0x6d, 0x61, 0x6d, 0x6f, 0x74, 0x6f, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x4b, 0x55, 0x4d, 0x41, 0x4d, 0x4f, 0x54, 0x4f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4b, 0x55, 0x4d, 0x41, 0x4d,
	0x4f, 0x54, 0x4f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x4b, 0x55, 0x4d, 0x41, 0x4d, 0x4f, 0x54, 0x4f, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x03, 0x2a, 0x93, 0x02, 0x0a, 0x13, 0x45, 0x52,
	0x6f, 0x6c, 0x6c, 0x52, 0x61, 0x69, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x4f, 0x4c, 0x4c, 0x52, 0x41, 0x49, 0x44, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52,
	0x4f, 0x4c, 0x4c, 0x52, 0x41, 0x49, 0x44, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x56,
	0x45, 0x52, 0x41, 0x49, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x4f, 0x4c, 0x4c,
	0x52, 0x41, 0x49, 0x44, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x52, 0x41, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x4f, 0x4c, 0x4c, 0x52,
	0x41, 0x49, 0x44, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x42,
	0x4f, 0x53, 0x53, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x4f, 0x4c, 0x4c, 0x52, 0x41,
	0x49, 0x44, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x42, 0x4f, 0x53,
	0x53, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x4f, 0x4c, 0x4c, 0x52, 0x41, 0x49, 0x44,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x05, 0x12, 0x24,
	0x0a, 0x20, 0x45, 0x52, 0x4f, 0x4c, 0x4c, 0x52, 0x41, 0x49, 0x44, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4f, 0x44, 0x4f, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52, 0x41,
	0x49, 0x44, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x52, 0x4f, 0x4c, 0x4c, 0x52, 0x41, 0x49,
	0x44, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x4e, 0x5f, 0x52, 0x4f,
	0x59, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x10, 0x07, 0x2a,
	0x62, 0x0a, 0x0a, 0x45, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4d, 0x50, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4d, 0x50, 0x5f,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43,
	0x41, 0x4d, 0x50, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4d, 0x50, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x10, 0x03, 0x2a, 0xb9, 0x03, 0x0a, 0x12, 0x45, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50,
	0x76, 0x70, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54,
	0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56,
	0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x52, 0x59, 0x53, 0x54, 0x41, 0x4c, 0x5f, 0x45,
	0x58, 0x50, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50,
	0x56, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x43, 0x41, 0x52, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x23, 0x0a,
	0x1f, 0x45, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d,
	0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x07,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x43, 0x44, 0x10, 0x08, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x43, 0x41, 0x4d, 0x50, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x54, 0x57, 0x45, 0x4c,
	0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x41,
	0x43, 0x4b, 0x5f, 0x48, 0x50, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x54, 0x57, 0x45, 0x4c,
	0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x52, 0x59, 0x53, 0x54,
	0x41, 0x4c, 0x5f, 0x48, 0x50, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x54, 0x57, 0x45, 0x4c,
	0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45,
	0x50, 0x56, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x52, 0x59, 0x53, 0x54, 0x41, 0x4c,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x54, 0x57, 0x45,
	0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x57, 0x45, 0x4c, 0x56,
	0x45, 0x50, 0x56, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x0f, 0x2a,
	0x9b, 0x01, 0x0a, 0x0c, 0x45, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x55, 0x49,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x55,
	0x49, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x54, 0x57, 0x45, 0x4c,
	0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x55, 0x49, 0x5f, 0x43, 0x52, 0x59, 0x53, 0x54, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50,
	0x5f, 0x55, 0x49, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x54,
	0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x55, 0x49, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0xe8, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x45,
	0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x55, 0x49, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0xe9, 0x07, 0x2a, 0x89, 0x01,
	0x0a, 0x13, 0x45, 0x43, 0x6f, 0x6d, 0x6f, 0x64, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x69,
	0x64, 0x42, 0x6f, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x43, 0x4f, 0x4d, 0x4f, 0x44, 0x4f,
	0x5f, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x43, 0x4f, 0x4d, 0x4f, 0x44, 0x4f, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x47,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x43, 0x4f, 0x4d, 0x4f, 0x44, 0x4f, 0x5f,
	0x42, 0x4f, 0x53, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x43, 0x4f, 0x4d, 0x4f, 0x44, 0x4f, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x48, 0x45, 0x52,
	0x4f, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x43, 0x4f, 0x4d, 0x4f, 0x44, 0x4f, 0x5f, 0x42,
	0x4f, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x94, 0x01, 0x0a, 0x14, 0x45, 0x43,
	0x6f, 0x6d, 0x6f, 0x64, 0x6f, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x69, 0x64, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x43, 0x4f, 0x4d, 0x4f, 0x44, 0x4f, 0x5f, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x43, 0x4f,
	0x4d, 0x4f, 0x44, 0x4f, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x43, 0x4f, 0x4d, 0x4f, 0x44, 0x4f, 0x5f, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x43, 0x4f, 0x4d, 0x4f, 0x44, 0x4f, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x43, 0x4f, 0x4d, 0x4f, 0x44, 0x4f, 0x5f,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x4e, 0x50, 0x43, 0x10, 0x04,
}

var (
	file_FuBenCmd_proto_rawDescOnce sync.Once
	file_FuBenCmd_proto_rawDescData = file_FuBenCmd_proto_rawDesc
)

func file_FuBenCmd_proto_rawDescGZIP() []byte {
	file_FuBenCmd_proto_rawDescOnce.Do(func() {
		file_FuBenCmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_FuBenCmd_proto_rawDescData)
	})
	return file_FuBenCmd_proto_rawDescData
}

var file_FuBenCmd_proto_enumTypes = make([]protoimpl.EnumInfo, 20)
var file_FuBenCmd_proto_msgTypes = make([]protoimpl.MessageInfo, 143)
var file_FuBenCmd_proto_goTypes = []interface{}{
	(FuBenParam)(0),                         // 0: Cmd.FuBenParam
	(ERaidType)(0),                          // 1: Cmd.ERaidType
	(EEndlessPrivateMonsterType)(0),         // 2: Cmd.EEndlessPrivateMonsterType
	(EGuildGateState)(0),                    // 3: Cmd.EGuildGateState
	(EGuildGateOpt)(0),                      // 4: Cmd.EGuildGateOpt
	(EGuildFireResult)(0),                   // 5: Cmd.EGuildFireResult
	(EGvgDataType)(0),                       // 6: Cmd.EGvgDataType
	(EGvgTowerState)(0),                     // 7: Cmd.EGvgTowerState
	(EGvgTowerType)(0),                      // 8: Cmd.EGvgTowerType
	(EDeadBossDifficulty)(0),                // 9: Cmd.EDeadBossDifficulty
	(ETeamPwsColor)(0),                      // 10: Cmd.ETeamPwsColor
	(EMagicBallType)(0),                     // 11: Cmd.EMagicBallType
	(EGroupRaidSceneState)(0),               // 12: Cmd.EGroupRaidSceneState
	(EKumamotoOper)(0),                      // 13: Cmd.EKumamotoOper
	(ERollRaidRewardType)(0),                // 14: Cmd.ERollRaidRewardType
	(EGroupCamp)(0),                         // 15: Cmd.EGroupCamp
	(ETwelvePvpDataType)(0),                 // 16: Cmd.ETwelvePvpDataType
	(ETwelvePvpUI)(0),                       // 17: Cmd.ETwelvePvpUI
	(EComodoTeamRaidBoss)(0),                // 18: Cmd.EComodoTeamRaidBoss
	(EComodoTeamRaidPhase)(0),               // 19: Cmd.EComodoTeamRaidPhase
	(*TrackData)(nil),                       // 20: Cmd.TrackData
	(*RaidPConfig)(nil),                     // 21: Cmd.RaidPConfig
	(*TrackFuBenUserCmd)(nil),               // 22: Cmd.TrackFuBenUserCmd
	(*FailFuBenUserCmd)(nil),                // 23: Cmd.FailFuBenUserCmd
	(*LeaveFuBenUserCmd)(nil),               // 24: Cmd.LeaveFuBenUserCmd
	(*SuccessFuBenUserCmd)(nil),             // 25: Cmd.SuccessFuBenUserCmd
	(*WorldStageItem)(nil),                  // 26: Cmd.WorldStageItem
	(*StageStepItem)(nil),                   // 27: Cmd.StageStepItem
	(*WorldStageUserCmd)(nil),               // 28: Cmd.WorldStageUserCmd
	(*StageNormalStepItem)(nil),             // 29: Cmd.StageNormalStepItem
	(*StageHardStepItem)(nil),               // 30: Cmd.StageHardStepItem
	(*StageStepUserCmd)(nil),                // 31: Cmd.StageStepUserCmd
	(*StartStageUserCmd)(nil),               // 32: Cmd.StartStageUserCmd
	(*GetRewardStageUserCmd)(nil),           // 33: Cmd.GetRewardStageUserCmd
	(*StageStepStarUserCmd)(nil),            // 34: Cmd.StageStepStarUserCmd
	(*MonsterCountUserCmd)(nil),             // 35: Cmd.MonsterCountUserCmd
	(*FubenStepSyncCmd)(nil),                // 36: Cmd.FubenStepSyncCmd
	(*FuBenProgressSyncCmd)(nil),            // 37: Cmd.FuBenProgressSyncCmd
	(*FuBenClearInfoCmd)(nil),               // 38: Cmd.FuBenClearInfoCmd
	(*GuildGateData)(nil),                   // 39: Cmd.GuildGateData
	(*UserGuildRaidFubenCmd)(nil),           // 40: Cmd.UserGuildRaidFubenCmd
	(*GuildGateOptCmd)(nil),                 // 41: Cmd.GuildGateOptCmd
	(*GuildFireInfoFubenCmd)(nil),           // 42: Cmd.GuildFireInfoFubenCmd
	(*GuildFireStopFubenCmd)(nil),           // 43: Cmd.GuildFireStopFubenCmd
	(*GuildFireDangerFubenCmd)(nil),         // 44: Cmd.GuildFireDangerFubenCmd
	(*GuildFireMetalHpFubenCmd)(nil),        // 45: Cmd.GuildFireMetalHpFubenCmd
	(*GuildFireCalmFubenCmd)(nil),           // 46: Cmd.GuildFireCalmFubenCmd
	(*GuildFireNewDefFubenCmd)(nil),         // 47: Cmd.GuildFireNewDefFubenCmd
	(*GuildFireRestartFubenCmd)(nil),        // 48: Cmd.GuildFireRestartFubenCmd
	(*GuildFireStatusFubenCmd)(nil),         // 49: Cmd.GuildFireStatusFubenCmd
	(*GvgData)(nil),                         // 50: Cmd.GvgData
	(*GvgDataSyncCmd)(nil),                  // 51: Cmd.GvgDataSyncCmd
	(*GvgDataUpdateCmd)(nil),                // 52: Cmd.GvgDataUpdateCmd
	(*GvgDefNameChangeFubenCmd)(nil),        // 53: Cmd.GvgDefNameChangeFubenCmd
	(*SyncMvpInfoFubenCmd)(nil),             // 54: Cmd.SyncMvpInfoFubenCmd
	(*BossDieFubenCmd)(nil),                 // 55: Cmd.BossDieFubenCmd
	(*UpdateUserNumFubenCmd)(nil),           // 56: Cmd.UpdateUserNumFubenCmd
	(*GvgTowerValue)(nil),                   // 57: Cmd.GvgTowerValue
	(*GvgTowerData)(nil),                    // 58: Cmd.GvgTowerData
	(*GvgCrystalInfo)(nil),                  // 59: Cmd.GvgCrystalInfo
	(*GvgGuildInfo)(nil),                    // 60: Cmd.GvgGuildInfo
	(*SuperGvgSyncFubenCmd)(nil),            // 61: Cmd.SuperGvgSyncFubenCmd
	(*GvgTowerUpdateFubenCmd)(nil),          // 62: Cmd.GvgTowerUpdateFubenCmd
	(*GvgMetalDieFubenCmd)(nil),             // 63: Cmd.GvgMetalDieFubenCmd
	(*GvgCrystalUpdateFubenCmd)(nil),        // 64: Cmd.GvgCrystalUpdateFubenCmd
	(*QueryGvgTowerInfoFubenCmd)(nil),       // 65: Cmd.QueryGvgTowerInfoFubenCmd
	(*RewardItemData)(nil),                  // 66: Cmd.RewardItemData
	(*SuperGvgRewardData)(nil),              // 67: Cmd.SuperGvgRewardData
	(*SuperGvgRewardInfoFubenCmd)(nil),      // 68: Cmd.SuperGvgRewardInfoFubenCmd
	(*SuperGvgUserData)(nil),                // 69: Cmd.SuperGvgUserData
	(*SuperGvgGuildUserData)(nil),           // 70: Cmd.SuperGvgGuildUserData
	(*SuperGvgQueryUserDataFubenCmd)(nil),   // 71: Cmd.SuperGvgQueryUserDataFubenCmd
	(*MvpBattleTeamData)(nil),               // 72: Cmd.MvpBattleTeamData
	(*MvpBattleReportFubenCmd)(nil),         // 73: Cmd.MvpBattleReportFubenCmd
	(*InviteSummonBossFubenCmd)(nil),        // 74: Cmd.InviteSummonBossFubenCmd
	(*ReplySummonBossFubenCmd)(nil),         // 75: Cmd.ReplySummonBossFubenCmd
	(*TeamPwsRaidUserInfo)(nil),             // 76: Cmd.TeamPwsRaidUserInfo
	(*TeamPwsRaidTeamInfo)(nil),             // 77: Cmd.TeamPwsRaidTeamInfo
	(*QueryTeamPwsUserInfoFubenCmd)(nil),    // 78: Cmd.QueryTeamPwsUserInfoFubenCmd
	(*TeamPwsReportFubenCmd)(nil),           // 79: Cmd.TeamPwsReportFubenCmd
	(*TeamPwsInfoSyncData)(nil),             // 80: Cmd.TeamPwsInfoSyncData
	(*TeamPwsInfoSyncFubenCmd)(nil),         // 81: Cmd.TeamPwsInfoSyncFubenCmd
	(*UpdateTeamPwsInfoFubenCmd)(nil),       // 82: Cmd.UpdateTeamPwsInfoFubenCmd
	(*SelectTeamPwsMagicFubenCmd)(nil),      // 83: Cmd.SelectTeamPwsMagicFubenCmd
	(*ExitMapFubenCmd)(nil),                 // 84: Cmd.ExitMapFubenCmd
	(*BeginFireFubenCmd)(nil),               // 85: Cmd.BeginFireFubenCmd
	(*TeamExpReportFubenCmd)(nil),           // 86: Cmd.TeamExpReportFubenCmd
	(*BuyExpRaidItemFubenCmd)(nil),          // 87: Cmd.BuyExpRaidItemFubenCmd
	(*TeamExpSyncFubenCmd)(nil),             // 88: Cmd.TeamExpSyncFubenCmd
	(*TeamReliveCountFubenCmd)(nil),         // 89: Cmd.TeamReliveCountFubenCmd
	(*TeamGroupRaidUpdateChipNum)(nil),      // 90: Cmd.TeamGroupRaidUpdateChipNum
	(*GroupRaidShowData)(nil),               // 91: Cmd.GroupRaidShowData
	(*GroupRaidTeamShowData)(nil),           // 92: Cmd.GroupRaidTeamShowData
	(*QueryTeamGroupRaidUserInfo)(nil),      // 93: Cmd.QueryTeamGroupRaidUserInfo
	(*GroupRaidStateSyncFuBenCmd)(nil),      // 94: Cmd.GroupRaidStateSyncFuBenCmd
	(*TeamExpQueryInfoFubenCmd)(nil),        // 95: Cmd.TeamExpQueryInfoFubenCmd
	(*GroupRaidFourthShowData)(nil),         // 96: Cmd.GroupRaidFourthShowData
	(*UpdateGroupRaidFourthShowData)(nil),   // 97: Cmd.UpdateGroupRaidFourthShowData
	(*QueryGroupRaidFourthShowData)(nil),    // 98: Cmd.QueryGroupRaidFourthShowData
	(*GroupRaidFourthGoOuterCmd)(nil),       // 99: Cmd.GroupRaidFourthGoOuterCmd
	(*RaidStageSyncFubenCmd)(nil),           // 100: Cmd.RaidStageSyncFubenCmd
	(*ThanksGivingMonsterFuBenCmd)(nil),     // 101: Cmd.ThanksGivingMonsterFuBenCmd
	(*KumamotoOperFubenCmd)(nil),            // 102: Cmd.KumamotoOperFubenCmd
	(*OthelloOccupyItem)(nil),               // 103: Cmd.OthelloOccupyItem
	(*OthelloPointOccupyPowerFubenCmd)(nil), // 104: Cmd.OthelloPointOccupyPowerFubenCmd
	(*OthelloInfoSyncData)(nil),             // 105: Cmd.OthelloInfoSyncData
	(*OthelloInfoSyncFubenCmd)(nil),         // 106: Cmd.OthelloInfoSyncFubenCmd
	(*OthelloRaidUserInfo)(nil),             // 107: Cmd.OthelloRaidUserInfo
	(*OthelloRaidTeamInfo)(nil),             // 108: Cmd.OthelloRaidTeamInfo
	(*QueryOthelloUserInfoFubenCmd)(nil),    // 109: Cmd.QueryOthelloUserInfoFubenCmd
	(*OthelloReportFubenCmd)(nil),           // 110: Cmd.OthelloReportFubenCmd
	(*RoguelikeUnlockSceneSync)(nil),        // 111: Cmd.RoguelikeUnlockSceneSync
	(*TransferFightChooseFubenCmd)(nil),     // 112: Cmd.TransferFightChooseFubenCmd
	(*RankScore)(nil),                       // 113: Cmd.RankScore
	(*TransferFightRankFubenCmd)(nil),       // 114: Cmd.TransferFightRankFubenCmd
	(*TransferFightEndFubenCmd)(nil),        // 115: Cmd.TransferFightEndFubenCmd
	(*InviteRollRewardFubenCmd)(nil),        // 116: Cmd.InviteRollRewardFubenCmd
	(*ReplyRollRewardFubenCmd)(nil),         // 117: Cmd.ReplyRollRewardFubenCmd
	(*TeamRollStatusFuBenCmd)(nil),          // 118: Cmd.TeamRollStatusFuBenCmd
	(*PreReplyRollRewardFubenCmd)(nil),      // 119: Cmd.PreReplyRollRewardFubenCmd
	(*TwelvePvpData)(nil),                   // 120: Cmd.TwelvePvpData
	(*TwelvePvpSyncCmd)(nil),                // 121: Cmd.TwelvePvpSyncCmd
	(*TweItemInfo)(nil),                     // 122: Cmd.TweItemInfo
	(*RaidItemSyncCmd)(nil),                 // 123: Cmd.RaidItemSyncCmd
	(*RaidItemUpdateCmd)(nil),               // 124: Cmd.RaidItemUpdateCmd
	(*TwelvePvpUseItemCmd)(nil),             // 125: Cmd.TwelvePvpUseItemCmd
	(*RaidShopUpdateCmd)(nil),               // 126: Cmd.RaidShopUpdateCmd
	(*TwelvePvpQuestData)(nil),              // 127: Cmd.TwelvePvpQuestData
	(*TwelvePvpQuestQueryCmd)(nil),          // 128: Cmd.TwelvePvpQuestQueryCmd
	(*TwelvePvpUserInfo)(nil),               // 129: Cmd.TwelvePvpUserInfo
	(*TwelvePvpGroupInfo)(nil),              // 130: Cmd.TwelvePvpGroupInfo
	(*TwelvePvpQueryGroupInfoCmd)(nil),      // 131: Cmd.TwelvePvpQueryGroupInfoCmd
	(*CampResultData)(nil),                  // 132: Cmd.CampResultData
	(*TwelvePvpResultCmd)(nil),              // 133: Cmd.TwelvePvpResultCmd
	(*BuildingHp)(nil),                      // 134: Cmd.BuildingHp
	(*TwelvePvpBuildingHpUpdateCmd)(nil),    // 135: Cmd.TwelvePvpBuildingHpUpdateCmd
	(*TwelvePvpUIOperCmd)(nil),              // 136: Cmd.TwelvePvpUIOperCmd
	(*ReliveCdFubenCmd)(nil),                // 137: Cmd.ReliveCdFubenCmd
	(*PosData)(nil),                         // 138: Cmd.PosData
	(*PosSyncFubenCmd)(nil),                 // 139: Cmd.PosSyncFubenCmd
	(*ReqEnterTowerPrivate)(nil),            // 140: Cmd.ReqEnterTowerPrivate
	(*LayerMonsterTowerPrivate)(nil),        // 141: Cmd.LayerMonsterTowerPrivate
	(*LayerRewardTowerPrivate)(nil),         // 142: Cmd.LayerRewardTowerPrivate
	(*TowerPrivateLayerInfo)(nil),           // 143: Cmd.TowerPrivateLayerInfo
	(*TowerPrivateLayerCountdownNtf)(nil),   // 144: Cmd.TowerPrivateLayerCountdownNtf
	(*FubenResultNtf)(nil),                  // 145: Cmd.FubenResultNtf
	(*EndTimeSyncFubenCmd)(nil),             // 146: Cmd.EndTimeSyncFubenCmd
	(*ResultSyncFubenCmd)(nil),              // 147: Cmd.ResultSyncFubenCmd
	(*ComodoPhaseFubenCmd)(nil),             // 148: Cmd.ComodoPhaseFubenCmd
	(*ComodoTeamRaidStatData)(nil),          // 149: Cmd.ComodoTeamRaidStatData
	(*QueryComodoTeamRaidStat)(nil),         // 150: Cmd.QueryComodoTeamRaidStat
	(*TeamPwsStateSyncFubenCmd)(nil),        // 151: Cmd.TeamPwsStateSyncFubenCmd
	(*ObserverFlashFubenCmd)(nil),           // 152: Cmd.ObserverFlashFubenCmd
	(*ObserverAttachFubenCmd)(nil),          // 153: Cmd.ObserverAttachFubenCmd
	(*ObserverSelectFubenCmd)(nil),          // 154: Cmd.ObserverSelectFubenCmd
	(*PlayerHpSpUpdate)(nil),                // 155: Cmd.PlayerHpSpUpdate
	(*ObHpspUpdateFubenCmd)(nil),            // 156: Cmd.ObHpspUpdateFubenCmd
	(*ObPlayerOfflineFubenCmd)(nil),         // 157: Cmd.ObPlayerOfflineFubenCmd
	(*MultiBossPhaseFubenCmd)(nil),          // 158: Cmd.MultiBossPhaseFubenCmd
	(*MultiBossRaidStatData)(nil),           // 159: Cmd.MultiBossRaidStatData
	(*QueryMultiBossRaidStat)(nil),          // 160: Cmd.QueryMultiBossRaidStat
	(*ObMoveCameraPrepareCmd)(nil),          // 161: Cmd.ObMoveCameraPrepareCmd
	(*ObCameraMoveEndCmd)(nil),              // 162: Cmd.ObCameraMoveEndCmd
	(*ConfigParam)(nil),                     // 163: Cmd.ConfigParam
	(Command)(0),                            // 164: Cmd.Command
	(EProfession)(0),                        // 165: Cmd.EProfession
	(*QueryUserInfo)(nil),                   // 166: Cmd.QueryUserInfo
	(*ItemInfo)(nil),                        // 167: Cmd.ItemInfo
	(*ScenePos)(nil),                        // 168: Cmd.ScenePos
}
var file_FuBenCmd_proto_depIdxs = []int32{
	163, // 0: Cmd.RaidPConfig.params:type_name -> Cmd.ConfigParam
	164, // 1: Cmd.TrackFuBenUserCmd.cmd:type_name -> Cmd.Command
	0,   // 2: Cmd.TrackFuBenUserCmd.param:type_name -> Cmd.FuBenParam
	20,  // 3: Cmd.TrackFuBenUserCmd.data:type_name -> Cmd.TrackData
	164, // 4: Cmd.FailFuBenUserCmd.cmd:type_name -> Cmd.Command
	0,   // 5: Cmd.FailFuBenUserCmd.param:type_name -> Cmd.FuBenParam
	164, // 6: Cmd.LeaveFuBenUserCmd.cmd:type_name -> Cmd.Command
	0,   // 7: Cmd.LeaveFuBenUserCmd.param:type_name -> Cmd.FuBenParam
	164, // 8: Cmd.SuccessFuBenUserCmd.cmd:type_name -> Cmd.Command
	0,   // 9: Cmd.SuccessFuBenUserCmd.param:type_name -> Cmd.FuBenParam
	1,   // 10: Cmd.SuccessFuBenUserCmd.type:type_name -> Cmd.ERaidType
	164, // 11: Cmd.WorldStageUserCmd.cmd:type_name -> Cmd.Command
	0,   // 12: Cmd.WorldStageUserCmd.param:type_name -> Cmd.FuBenParam
	26,  // 13: Cmd.WorldStageUserCmd.list:type_name -> Cmd.WorldStageItem
	27,  // 14: Cmd.WorldStageUserCmd.curinfo:type_name -> Cmd.StageStepItem
	164, // 15: Cmd.StageStepUserCmd.cmd:type_name -> Cmd.Command
	0,   // 16: Cmd.StageStepUserCmd.param:type_name -> Cmd.FuBenParam
	29,  // 17: Cmd.StageStepUserCmd.normalist:type_name -> Cmd.StageNormalStepItem
	30,  // 18: Cmd.StageStepUserCmd.hardlist:type_name -> Cmd.StageHardStepItem
	164, // 19: Cmd.StartStageUserCmd.cmd:type_name -> Cmd.Command
	0,   // 20: Cmd.StartStageUserCmd.param:type_name -> Cmd.FuBenParam
	164, // 21: Cmd.GetRewardStageUserCmd.cmd:type_name -> Cmd.Command
	0,   // 22: Cmd.GetRewardStageUserCmd.param:type_name -> Cmd.FuBenParam
	164, // 23: Cmd.StageStepStarUserCmd.cmd:type_name -> Cmd.Command
	0,   // 24: Cmd.StageStepStarUserCmd.param:type_name -> Cmd.FuBenParam
	164, // 25: Cmd.MonsterCountUserCmd.cmd:type_name -> Cmd.Command
	0,   // 26: Cmd.MonsterCountUserCmd.param:type_name -> Cmd.FuBenParam
	164, // 27: Cmd.FubenStepSyncCmd.cmd:type_name -> Cmd.Command
	0,   // 28: Cmd.FubenStepSyncCmd.param:type_name -> Cmd.FuBenParam
	21,  // 29: Cmd.FubenStepSyncCmd.config:type_name -> Cmd.RaidPConfig
	164, // 30: Cmd.FuBenProgressSyncCmd.cmd:type_name -> Cmd.Command
	0,   // 31: Cmd.FuBenProgressSyncCmd.param:type_name -> Cmd.FuBenParam
	164, // 32: Cmd.FuBenClearInfoCmd.cmd:type_name -> Cmd.Command
	0,   // 33: Cmd.FuBenClearInfoCmd.param:type_name -> Cmd.FuBenParam
	3,   // 34: Cmd.GuildGateData.state:type_name -> Cmd.EGuildGateState
	164, // 35: Cmd.UserGuildRaidFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 36: Cmd.UserGuildRaidFubenCmd.param:type_name -> Cmd.FuBenParam
	39,  // 37: Cmd.UserGuildRaidFubenCmd.gatedata:type_name -> Cmd.GuildGateData
	164, // 38: Cmd.GuildGateOptCmd.cmd:type_name -> Cmd.Command
	0,   // 39: Cmd.GuildGateOptCmd.param:type_name -> Cmd.FuBenParam
	4,   // 40: Cmd.GuildGateOptCmd.opt:type_name -> Cmd.EGuildGateOpt
	164, // 41: Cmd.GuildFireInfoFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 42: Cmd.GuildFireInfoFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 43: Cmd.GuildFireStopFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 44: Cmd.GuildFireStopFubenCmd.param:type_name -> Cmd.FuBenParam
	5,   // 45: Cmd.GuildFireStopFubenCmd.result:type_name -> Cmd.EGuildFireResult
	164, // 46: Cmd.GuildFireDangerFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 47: Cmd.GuildFireDangerFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 48: Cmd.GuildFireMetalHpFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 49: Cmd.GuildFireMetalHpFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 50: Cmd.GuildFireCalmFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 51: Cmd.GuildFireCalmFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 52: Cmd.GuildFireNewDefFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 53: Cmd.GuildFireNewDefFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 54: Cmd.GuildFireRestartFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 55: Cmd.GuildFireRestartFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 56: Cmd.GuildFireStatusFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 57: Cmd.GuildFireStatusFubenCmd.param:type_name -> Cmd.FuBenParam
	6,   // 58: Cmd.GvgData.type:type_name -> Cmd.EGvgDataType
	164, // 59: Cmd.GvgDataSyncCmd.cmd:type_name -> Cmd.Command
	0,   // 60: Cmd.GvgDataSyncCmd.param:type_name -> Cmd.FuBenParam
	50,  // 61: Cmd.GvgDataSyncCmd.datas:type_name -> Cmd.GvgData
	164, // 62: Cmd.GvgDataUpdateCmd.cmd:type_name -> Cmd.Command
	0,   // 63: Cmd.GvgDataUpdateCmd.param:type_name -> Cmd.FuBenParam
	50,  // 64: Cmd.GvgDataUpdateCmd.data:type_name -> Cmd.GvgData
	164, // 65: Cmd.GvgDefNameChangeFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 66: Cmd.GvgDefNameChangeFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 67: Cmd.SyncMvpInfoFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 68: Cmd.SyncMvpInfoFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 69: Cmd.BossDieFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 70: Cmd.BossDieFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 71: Cmd.UpdateUserNumFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 72: Cmd.UpdateUserNumFubenCmd.param:type_name -> Cmd.FuBenParam
	8,   // 73: Cmd.GvgTowerData.etype:type_name -> Cmd.EGvgTowerType
	7,   // 74: Cmd.GvgTowerData.estate:type_name -> Cmd.EGvgTowerState
	57,  // 75: Cmd.GvgTowerData.info:type_name -> Cmd.GvgTowerValue
	59,  // 76: Cmd.GvgGuildInfo.crystal:type_name -> Cmd.GvgCrystalInfo
	164, // 77: Cmd.SuperGvgSyncFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 78: Cmd.SuperGvgSyncFubenCmd.param:type_name -> Cmd.FuBenParam
	58,  // 79: Cmd.SuperGvgSyncFubenCmd.towers:type_name -> Cmd.GvgTowerData
	60,  // 80: Cmd.SuperGvgSyncFubenCmd.guildinfo:type_name -> Cmd.GvgGuildInfo
	164, // 81: Cmd.GvgTowerUpdateFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 82: Cmd.GvgTowerUpdateFubenCmd.param:type_name -> Cmd.FuBenParam
	58,  // 83: Cmd.GvgTowerUpdateFubenCmd.towers:type_name -> Cmd.GvgTowerData
	164, // 84: Cmd.GvgMetalDieFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 85: Cmd.GvgMetalDieFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 86: Cmd.GvgCrystalUpdateFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 87: Cmd.GvgCrystalUpdateFubenCmd.param:type_name -> Cmd.FuBenParam
	59,  // 88: Cmd.GvgCrystalUpdateFubenCmd.crystals:type_name -> Cmd.GvgCrystalInfo
	164, // 89: Cmd.QueryGvgTowerInfoFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 90: Cmd.QueryGvgTowerInfoFubenCmd.param:type_name -> Cmd.FuBenParam
	8,   // 91: Cmd.QueryGvgTowerInfoFubenCmd.etype:type_name -> Cmd.EGvgTowerType
	66,  // 92: Cmd.SuperGvgRewardData.items:type_name -> Cmd.RewardItemData
	164, // 93: Cmd.SuperGvgRewardInfoFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 94: Cmd.SuperGvgRewardInfoFubenCmd.param:type_name -> Cmd.FuBenParam
	67,  // 95: Cmd.SuperGvgRewardInfoFubenCmd.rewardinfo:type_name -> Cmd.SuperGvgRewardData
	69,  // 96: Cmd.SuperGvgGuildUserData.userdatas:type_name -> Cmd.SuperGvgUserData
	164, // 97: Cmd.SuperGvgQueryUserDataFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 98: Cmd.SuperGvgQueryUserDataFubenCmd.param:type_name -> Cmd.FuBenParam
	70,  // 99: Cmd.SuperGvgQueryUserDataFubenCmd.guilduserdata:type_name -> Cmd.SuperGvgGuildUserData
	164, // 100: Cmd.MvpBattleReportFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 101: Cmd.MvpBattleReportFubenCmd.param:type_name -> Cmd.FuBenParam
	72,  // 102: Cmd.MvpBattleReportFubenCmd.datas:type_name -> Cmd.MvpBattleTeamData
	164, // 103: Cmd.InviteSummonBossFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 104: Cmd.InviteSummonBossFubenCmd.param:type_name -> Cmd.FuBenParam
	9,   // 105: Cmd.InviteSummonBossFubenCmd.difficulty:type_name -> Cmd.EDeadBossDifficulty
	164, // 106: Cmd.ReplySummonBossFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 107: Cmd.ReplySummonBossFubenCmd.param:type_name -> Cmd.FuBenParam
	165, // 108: Cmd.TeamPwsRaidUserInfo.profession:type_name -> Cmd.EProfession
	10,  // 109: Cmd.TeamPwsRaidTeamInfo.color:type_name -> Cmd.ETeamPwsColor
	76,  // 110: Cmd.TeamPwsRaidTeamInfo.userinfos:type_name -> Cmd.TeamPwsRaidUserInfo
	164, // 111: Cmd.QueryTeamPwsUserInfoFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 112: Cmd.QueryTeamPwsUserInfoFubenCmd.param:type_name -> Cmd.FuBenParam
	77,  // 113: Cmd.QueryTeamPwsUserInfoFubenCmd.teaminfo:type_name -> Cmd.TeamPwsRaidTeamInfo
	164, // 114: Cmd.TeamPwsReportFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 115: Cmd.TeamPwsReportFubenCmd.param:type_name -> Cmd.FuBenParam
	77,  // 116: Cmd.TeamPwsReportFubenCmd.teaminfo:type_name -> Cmd.TeamPwsRaidTeamInfo
	166, // 117: Cmd.TeamPwsReportFubenCmd.mvpuserinfo:type_name -> Cmd.QueryUserInfo
	10,  // 118: Cmd.TeamPwsReportFubenCmd.winteam:type_name -> Cmd.ETeamPwsColor
	10,  // 119: Cmd.TeamPwsInfoSyncData.color:type_name -> Cmd.ETeamPwsColor
	11,  // 120: Cmd.TeamPwsInfoSyncData.balls:type_name -> Cmd.EMagicBallType
	164, // 121: Cmd.TeamPwsInfoSyncFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 122: Cmd.TeamPwsInfoSyncFubenCmd.param:type_name -> Cmd.FuBenParam
	80,  // 123: Cmd.TeamPwsInfoSyncFubenCmd.teaminfo:type_name -> Cmd.TeamPwsInfoSyncData
	164, // 124: Cmd.UpdateTeamPwsInfoFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 125: Cmd.UpdateTeamPwsInfoFubenCmd.param:type_name -> Cmd.FuBenParam
	80,  // 126: Cmd.UpdateTeamPwsInfoFubenCmd.teaminfo:type_name -> Cmd.TeamPwsInfoSyncData
	164, // 127: Cmd.SelectTeamPwsMagicFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 128: Cmd.SelectTeamPwsMagicFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 129: Cmd.ExitMapFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 130: Cmd.ExitMapFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 131: Cmd.BeginFireFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 132: Cmd.BeginFireFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 133: Cmd.TeamExpReportFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 134: Cmd.TeamExpReportFubenCmd.param:type_name -> Cmd.FuBenParam
	167, // 135: Cmd.TeamExpReportFubenCmd.items:type_name -> Cmd.ItemInfo
	164, // 136: Cmd.BuyExpRaidItemFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 137: Cmd.BuyExpRaidItemFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 138: Cmd.TeamExpSyncFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 139: Cmd.TeamExpSyncFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 140: Cmd.TeamReliveCountFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 141: Cmd.TeamReliveCountFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 142: Cmd.TeamGroupRaidUpdateChipNum.cmd:type_name -> Cmd.Command
	0,   // 143: Cmd.TeamGroupRaidUpdateChipNum.param:type_name -> Cmd.FuBenParam
	91,  // 144: Cmd.GroupRaidTeamShowData.datas:type_name -> Cmd.GroupRaidShowData
	164, // 145: Cmd.QueryTeamGroupRaidUserInfo.cmd:type_name -> Cmd.Command
	0,   // 146: Cmd.QueryTeamGroupRaidUserInfo.param:type_name -> Cmd.FuBenParam
	92,  // 147: Cmd.QueryTeamGroupRaidUserInfo.current:type_name -> Cmd.GroupRaidTeamShowData
	92,  // 148: Cmd.QueryTeamGroupRaidUserInfo.history:type_name -> Cmd.GroupRaidTeamShowData
	164, // 149: Cmd.GroupRaidStateSyncFuBenCmd.cmd:type_name -> Cmd.Command
	0,   // 150: Cmd.GroupRaidStateSyncFuBenCmd.param:type_name -> Cmd.FuBenParam
	12,  // 151: Cmd.GroupRaidStateSyncFuBenCmd.state:type_name -> Cmd.EGroupRaidSceneState
	164, // 152: Cmd.TeamExpQueryInfoFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 153: Cmd.TeamExpQueryInfoFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 154: Cmd.UpdateGroupRaidFourthShowData.cmd:type_name -> Cmd.Command
	0,   // 155: Cmd.UpdateGroupRaidFourthShowData.param:type_name -> Cmd.FuBenParam
	96,  // 156: Cmd.UpdateGroupRaidFourthShowData.inner:type_name -> Cmd.GroupRaidFourthShowData
	96,  // 157: Cmd.UpdateGroupRaidFourthShowData.outer:type_name -> Cmd.GroupRaidFourthShowData
	164, // 158: Cmd.QueryGroupRaidFourthShowData.cmd:type_name -> Cmd.Command
	0,   // 159: Cmd.QueryGroupRaidFourthShowData.param:type_name -> Cmd.FuBenParam
	164, // 160: Cmd.GroupRaidFourthGoOuterCmd.cmd:type_name -> Cmd.Command
	0,   // 161: Cmd.GroupRaidFourthGoOuterCmd.param:type_name -> Cmd.FuBenParam
	164, // 162: Cmd.RaidStageSyncFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 163: Cmd.RaidStageSyncFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 164: Cmd.ThanksGivingMonsterFuBenCmd.cmd:type_name -> Cmd.Command
	0,   // 165: Cmd.ThanksGivingMonsterFuBenCmd.param:type_name -> Cmd.FuBenParam
	164, // 166: Cmd.KumamotoOperFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 167: Cmd.KumamotoOperFubenCmd.param:type_name -> Cmd.FuBenParam
	13,  // 168: Cmd.KumamotoOperFubenCmd.type:type_name -> Cmd.EKumamotoOper
	164, // 169: Cmd.OthelloPointOccupyPowerFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 170: Cmd.OthelloPointOccupyPowerFubenCmd.param:type_name -> Cmd.FuBenParam
	103, // 171: Cmd.OthelloPointOccupyPowerFubenCmd.occupy:type_name -> Cmd.OthelloOccupyItem
	164, // 172: Cmd.OthelloInfoSyncFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 173: Cmd.OthelloInfoSyncFubenCmd.param:type_name -> Cmd.FuBenParam
	105, // 174: Cmd.OthelloInfoSyncFubenCmd.teaminfo:type_name -> Cmd.OthelloInfoSyncData
	165, // 175: Cmd.OthelloRaidUserInfo.profession:type_name -> Cmd.EProfession
	107, // 176: Cmd.OthelloRaidTeamInfo.userinfos:type_name -> Cmd.OthelloRaidUserInfo
	164, // 177: Cmd.QueryOthelloUserInfoFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 178: Cmd.QueryOthelloUserInfoFubenCmd.param:type_name -> Cmd.FuBenParam
	108, // 179: Cmd.QueryOthelloUserInfoFubenCmd.teaminfo:type_name -> Cmd.OthelloRaidTeamInfo
	164, // 180: Cmd.OthelloReportFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 181: Cmd.OthelloReportFubenCmd.param:type_name -> Cmd.FuBenParam
	108, // 182: Cmd.OthelloReportFubenCmd.teaminfo:type_name -> Cmd.OthelloRaidTeamInfo
	166, // 183: Cmd.OthelloReportFubenCmd.mvpuserinfo:type_name -> Cmd.QueryUserInfo
	164, // 184: Cmd.RoguelikeUnlockSceneSync.cmd:type_name -> Cmd.Command
	0,   // 185: Cmd.RoguelikeUnlockSceneSync.param:type_name -> Cmd.FuBenParam
	164, // 186: Cmd.TransferFightChooseFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 187: Cmd.TransferFightChooseFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 188: Cmd.TransferFightRankFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 189: Cmd.TransferFightRankFubenCmd.param:type_name -> Cmd.FuBenParam
	113, // 190: Cmd.TransferFightRankFubenCmd.rank:type_name -> Cmd.RankScore
	164, // 191: Cmd.TransferFightEndFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 192: Cmd.TransferFightEndFubenCmd.param:type_name -> Cmd.FuBenParam
	113, // 193: Cmd.TransferFightEndFubenCmd.rank:type_name -> Cmd.RankScore
	113, // 194: Cmd.TransferFightEndFubenCmd.myrank:type_name -> Cmd.RankScore
	164, // 195: Cmd.InviteRollRewardFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 196: Cmd.InviteRollRewardFubenCmd.param:type_name -> Cmd.FuBenParam
	14,  // 197: Cmd.InviteRollRewardFubenCmd.etype:type_name -> Cmd.ERollRaidRewardType
	164, // 198: Cmd.ReplyRollRewardFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 199: Cmd.ReplyRollRewardFubenCmd.param:type_name -> Cmd.FuBenParam
	14,  // 200: Cmd.ReplyRollRewardFubenCmd.etype:type_name -> Cmd.ERollRaidRewardType
	164, // 201: Cmd.TeamRollStatusFuBenCmd.cmd:type_name -> Cmd.Command
	0,   // 202: Cmd.TeamRollStatusFuBenCmd.param:type_name -> Cmd.FuBenParam
	164, // 203: Cmd.PreReplyRollRewardFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 204: Cmd.PreReplyRollRewardFubenCmd.param:type_name -> Cmd.FuBenParam
	14,  // 205: Cmd.PreReplyRollRewardFubenCmd.etype:type_name -> Cmd.ERollRaidRewardType
	16,  // 206: Cmd.TwelvePvpData.type:type_name -> Cmd.ETwelvePvpDataType
	164, // 207: Cmd.TwelvePvpSyncCmd.cmd:type_name -> Cmd.Command
	0,   // 208: Cmd.TwelvePvpSyncCmd.param:type_name -> Cmd.FuBenParam
	120, // 209: Cmd.TwelvePvpSyncCmd.datas:type_name -> Cmd.TwelvePvpData
	15,  // 210: Cmd.TwelvePvpSyncCmd.camp:type_name -> Cmd.EGroupCamp
	164, // 211: Cmd.RaidItemSyncCmd.cmd:type_name -> Cmd.Command
	0,   // 212: Cmd.RaidItemSyncCmd.param:type_name -> Cmd.FuBenParam
	122, // 213: Cmd.RaidItemSyncCmd.items:type_name -> Cmd.TweItemInfo
	164, // 214: Cmd.RaidItemUpdateCmd.cmd:type_name -> Cmd.Command
	0,   // 215: Cmd.RaidItemUpdateCmd.param:type_name -> Cmd.FuBenParam
	164, // 216: Cmd.TwelvePvpUseItemCmd.cmd:type_name -> Cmd.Command
	0,   // 217: Cmd.TwelvePvpUseItemCmd.param:type_name -> Cmd.FuBenParam
	164, // 218: Cmd.RaidShopUpdateCmd.cmd:type_name -> Cmd.Command
	0,   // 219: Cmd.RaidShopUpdateCmd.param:type_name -> Cmd.FuBenParam
	164, // 220: Cmd.TwelvePvpQuestQueryCmd.cmd:type_name -> Cmd.Command
	0,   // 221: Cmd.TwelvePvpQuestQueryCmd.param:type_name -> Cmd.FuBenParam
	127, // 222: Cmd.TwelvePvpQuestQueryCmd.datas:type_name -> Cmd.TwelvePvpQuestData
	165, // 223: Cmd.TwelvePvpUserInfo.profession:type_name -> Cmd.EProfession
	15,  // 224: Cmd.TwelvePvpGroupInfo.color:type_name -> Cmd.EGroupCamp
	129, // 225: Cmd.TwelvePvpGroupInfo.userinfos:type_name -> Cmd.TwelvePvpUserInfo
	164, // 226: Cmd.TwelvePvpQueryGroupInfoCmd.cmd:type_name -> Cmd.Command
	0,   // 227: Cmd.TwelvePvpQueryGroupInfoCmd.param:type_name -> Cmd.FuBenParam
	130, // 228: Cmd.TwelvePvpQueryGroupInfoCmd.groupinfo:type_name -> Cmd.TwelvePvpGroupInfo
	15,  // 229: Cmd.CampResultData.camp:type_name -> Cmd.EGroupCamp
	164, // 230: Cmd.TwelvePvpResultCmd.cmd:type_name -> Cmd.Command
	0,   // 231: Cmd.TwelvePvpResultCmd.param:type_name -> Cmd.FuBenParam
	131, // 232: Cmd.TwelvePvpResultCmd.groupinfo_cmd:type_name -> Cmd.TwelvePvpQueryGroupInfoCmd
	15,  // 233: Cmd.TwelvePvpResultCmd.winteam:type_name -> Cmd.EGroupCamp
	132, // 234: Cmd.TwelvePvpResultCmd.camp_result_data:type_name -> Cmd.CampResultData
	164, // 235: Cmd.TwelvePvpBuildingHpUpdateCmd.cmd:type_name -> Cmd.Command
	0,   // 236: Cmd.TwelvePvpBuildingHpUpdateCmd.param:type_name -> Cmd.FuBenParam
	134, // 237: Cmd.TwelvePvpBuildingHpUpdateCmd.data:type_name -> Cmd.BuildingHp
	164, // 238: Cmd.TwelvePvpUIOperCmd.cmd:type_name -> Cmd.Command
	0,   // 239: Cmd.TwelvePvpUIOperCmd.param:type_name -> Cmd.FuBenParam
	17,  // 240: Cmd.TwelvePvpUIOperCmd.ui:type_name -> Cmd.ETwelvePvpUI
	164, // 241: Cmd.ReliveCdFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 242: Cmd.ReliveCdFubenCmd.param:type_name -> Cmd.FuBenParam
	168, // 243: Cmd.PosData.pos:type_name -> Cmd.ScenePos
	164, // 244: Cmd.PosSyncFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 245: Cmd.PosSyncFubenCmd.param:type_name -> Cmd.FuBenParam
	138, // 246: Cmd.PosSyncFubenCmd.datas:type_name -> Cmd.PosData
	164, // 247: Cmd.ReqEnterTowerPrivate.cmd:type_name -> Cmd.Command
	0,   // 248: Cmd.ReqEnterTowerPrivate.param:type_name -> Cmd.FuBenParam
	2,   // 249: Cmd.LayerMonsterTowerPrivate.type:type_name -> Cmd.EEndlessPrivateMonsterType
	164, // 250: Cmd.TowerPrivateLayerInfo.cmd:type_name -> Cmd.Command
	0,   // 251: Cmd.TowerPrivateLayerInfo.param:type_name -> Cmd.FuBenParam
	141, // 252: Cmd.TowerPrivateLayerInfo.monsters:type_name -> Cmd.LayerMonsterTowerPrivate
	142, // 253: Cmd.TowerPrivateLayerInfo.rewards:type_name -> Cmd.LayerRewardTowerPrivate
	164, // 254: Cmd.TowerPrivateLayerCountdownNtf.cmd:type_name -> Cmd.Command
	0,   // 255: Cmd.TowerPrivateLayerCountdownNtf.param:type_name -> Cmd.FuBenParam
	164, // 256: Cmd.FubenResultNtf.cmd:type_name -> Cmd.Command
	0,   // 257: Cmd.FubenResultNtf.param:type_name -> Cmd.FuBenParam
	1,   // 258: Cmd.FubenResultNtf.raidtype:type_name -> Cmd.ERaidType
	164, // 259: Cmd.EndTimeSyncFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 260: Cmd.EndTimeSyncFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 261: Cmd.ResultSyncFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 262: Cmd.ResultSyncFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 263: Cmd.ComodoPhaseFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 264: Cmd.ComodoPhaseFubenCmd.param:type_name -> Cmd.FuBenParam
	19,  // 265: Cmd.ComodoPhaseFubenCmd.phase:type_name -> Cmd.EComodoTeamRaidPhase
	18,  // 266: Cmd.ComodoTeamRaidStatData.boss:type_name -> Cmd.EComodoTeamRaidBoss
	91,  // 267: Cmd.ComodoTeamRaidStatData.datas:type_name -> Cmd.GroupRaidShowData
	164, // 268: Cmd.QueryComodoTeamRaidStat.cmd:type_name -> Cmd.Command
	0,   // 269: Cmd.QueryComodoTeamRaidStat.param:type_name -> Cmd.FuBenParam
	92,  // 270: Cmd.QueryComodoTeamRaidStat.current:type_name -> Cmd.GroupRaidTeamShowData
	92,  // 271: Cmd.QueryComodoTeamRaidStat.total:type_name -> Cmd.GroupRaidTeamShowData
	92,  // 272: Cmd.QueryComodoTeamRaidStat.history:type_name -> Cmd.GroupRaidTeamShowData
	164, // 273: Cmd.TeamPwsStateSyncFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 274: Cmd.TeamPwsStateSyncFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 275: Cmd.ObserverFlashFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 276: Cmd.ObserverFlashFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 277: Cmd.ObserverAttachFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 278: Cmd.ObserverAttachFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 279: Cmd.ObserverSelectFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 280: Cmd.ObserverSelectFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 281: Cmd.ObHpspUpdateFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 282: Cmd.ObHpspUpdateFubenCmd.param:type_name -> Cmd.FuBenParam
	155, // 283: Cmd.ObHpspUpdateFubenCmd.updates:type_name -> Cmd.PlayerHpSpUpdate
	164, // 284: Cmd.ObPlayerOfflineFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 285: Cmd.ObPlayerOfflineFubenCmd.param:type_name -> Cmd.FuBenParam
	164, // 286: Cmd.MultiBossPhaseFubenCmd.cmd:type_name -> Cmd.Command
	0,   // 287: Cmd.MultiBossPhaseFubenCmd.param:type_name -> Cmd.FuBenParam
	91,  // 288: Cmd.MultiBossRaidStatData.datas:type_name -> Cmd.GroupRaidShowData
	164, // 289: Cmd.QueryMultiBossRaidStat.cmd:type_name -> Cmd.Command
	0,   // 290: Cmd.QueryMultiBossRaidStat.param:type_name -> Cmd.FuBenParam
	92,  // 291: Cmd.QueryMultiBossRaidStat.current:type_name -> Cmd.GroupRaidTeamShowData
	92,  // 292: Cmd.QueryMultiBossRaidStat.total:type_name -> Cmd.GroupRaidTeamShowData
	92,  // 293: Cmd.QueryMultiBossRaidStat.history:type_name -> Cmd.GroupRaidTeamShowData
	164, // 294: Cmd.ObMoveCameraPrepareCmd.cmd:type_name -> Cmd.Command
	0,   // 295: Cmd.ObMoveCameraPrepareCmd.param:type_name -> Cmd.FuBenParam
	164, // 296: Cmd.ObCameraMoveEndCmd.cmd:type_name -> Cmd.Command
	0,   // 297: Cmd.ObCameraMoveEndCmd.param:type_name -> Cmd.FuBenParam
	298, // [298:298] is the sub-list for method output_type
	298, // [298:298] is the sub-list for method input_type
	298, // [298:298] is the sub-list for extension type_name
	298, // [298:298] is the sub-list for extension extendee
	0,   // [0:298] is the sub-list for field type_name
}

func init() { file_FuBenCmd_proto_init() }
func file_FuBenCmd_proto_init() {
	if File_FuBenCmd_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	file_ChatCmd_proto_init()
	file_SceneItem_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_FuBenCmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackFuBenUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailFuBenUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveFuBenUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessFuBenUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldStageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageStepItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldStageUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageNormalStepItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageHardStepItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageStepUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartStageUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardStageUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageStepStarUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonsterCountUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FubenStepSyncCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuBenProgressSyncCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuBenClearInfoCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildGateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGuildRaidFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildGateOptCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildFireInfoFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildFireStopFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildFireDangerFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildFireMetalHpFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildFireCalmFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildFireNewDefFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildFireRestartFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildFireStatusFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgDataSyncCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgDataUpdateCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgDefNameChangeFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncMvpInfoFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BossDieFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserNumFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgTowerValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgTowerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgCrystalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgGuildInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperGvgSyncFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgTowerUpdateFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgMetalDieFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgCrystalUpdateFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGvgTowerInfoFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperGvgRewardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperGvgRewardInfoFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperGvgUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperGvgGuildUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperGvgQueryUserDataFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvpBattleTeamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MvpBattleReportFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteSummonBossFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplySummonBossFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamPwsRaidUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamPwsRaidTeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTeamPwsUserInfoFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamPwsReportFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamPwsInfoSyncData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamPwsInfoSyncFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTeamPwsInfoFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectTeamPwsMagicFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitMapFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginFireFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamExpReportFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyExpRaidItemFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamExpSyncFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamReliveCountFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamGroupRaidUpdateChipNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRaidShowData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRaidTeamShowData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTeamGroupRaidUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRaidStateSyncFuBenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamExpQueryInfoFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRaidFourthShowData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupRaidFourthShowData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGroupRaidFourthShowData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRaidFourthGoOuterCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidStageSyncFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThanksGivingMonsterFuBenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KumamotoOperFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OthelloOccupyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OthelloPointOccupyPowerFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OthelloInfoSyncData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OthelloInfoSyncFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OthelloRaidUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OthelloRaidTeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOthelloUserInfoFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OthelloReportFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoguelikeUnlockSceneSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferFightChooseFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferFightRankFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferFightEndFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteRollRewardFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyRollRewardFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamRollStatusFuBenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreReplyRollRewardFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelvePvpData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelvePvpSyncCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidItemSyncCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidItemUpdateCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelvePvpUseItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidShopUpdateCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelvePvpQuestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelvePvpQuestQueryCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelvePvpUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelvePvpGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelvePvpQueryGroupInfoCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampResultData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelvePvpResultCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingHp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelvePvpBuildingHpUpdateCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelvePvpUIOperCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReliveCdFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosSyncFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEnterTowerPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayerMonsterTowerPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayerRewardTowerPrivate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerPrivateLayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TowerPrivateLayerCountdownNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FubenResultNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndTimeSyncFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultSyncFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComodoPhaseFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComodoTeamRaidStatData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryComodoTeamRaidStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamPwsStateSyncFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserverFlashFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserverAttachFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserverSelectFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerHpSpUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObHpspUpdateFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObPlayerOfflineFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiBossPhaseFubenCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiBossRaidStatData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMultiBossRaidStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObMoveCameraPrepareCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_FuBenCmd_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObCameraMoveEndCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_FuBenCmd_proto_rawDesc,
			NumEnums:      20,
			NumMessages:   143,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_FuBenCmd_proto_goTypes,
		DependencyIndexes: file_FuBenCmd_proto_depIdxs,
		EnumInfos:         file_FuBenCmd_proto_enumTypes,
		MessageInfos:      file_FuBenCmd_proto_msgTypes,
	}.Build()
	File_FuBenCmd_proto = out.File
	file_FuBenCmd_proto_rawDesc = nil
	file_FuBenCmd_proto_goTypes = nil
	file_FuBenCmd_proto_depIdxs = nil
}
