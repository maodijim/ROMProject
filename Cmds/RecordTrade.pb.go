// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: RecordTrade.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RecordUserTradeParam int32

const (
	RecordUserTradeParam_BRIEF_PENDING_LIST_RECORDTRADE  RecordUserTradeParam = 1
	RecordUserTradeParam_DETAIL_PENDING_LIST_RECORDTRADE RecordUserTradeParam = 3
	RecordUserTradeParam_ITEM_SELL_INFO_RECORDTRADE      RecordUserTradeParam = 4
	RecordUserTradeParam_MY_PENDING_LIST_RECORDTRADE     RecordUserTradeParam = 7
	RecordUserTradeParam_MY_TRADE_LOG_LIST_RECORDTRADE   RecordUserTradeParam = 9
	RecordUserTradeParam_REQ_SERVER_PRICE_RECORDTRADE    RecordUserTradeParam = 14
	RecordUserTradeParam_BUY_ITEM_RECORDTRADE            RecordUserTradeParam = 15
	RecordUserTradeParam_SELL_ITEM_RECORDTRADE           RecordUserTradeParam = 20
	RecordUserTradeParam_CANCEL_PENDING_RECORDTRADE      RecordUserTradeParam = 22
	RecordUserTradeParam_RESELL_PENDING_RECORDTRADE      RecordUserTradeParam = 23
	RecordUserTradeParam_PANEL_RECORDTRADE               RecordUserTradeParam = 24
	RecordUserTradeParam_LIST_NTF_RECORDTRADE            RecordUserTradeParam = 25
	RecordUserTradeParam_HOT_ITEMID_RECORDTRADE          RecordUserTradeParam = 26
	RecordUserTradeParam_TAKE_LOG_TRADE_PARAM            RecordUserTradeParam = 27
	RecordUserTradeParam_ADD_NEWLOG_TRADE_PARAM          RecordUserTradeParam = 28
	RecordUserTradeParam_FETCH_NAMEINFO_TRADE_PARAM      RecordUserTradeParam = 29
	RecordUserTradeParam_NTF_CAN_TAKE_COUNT_TRADE_PARAM  RecordUserTradeParam = 30
	RecordUserTradeParam_GIVE_TRADE_PARAM                RecordUserTradeParam = 31
	RecordUserTradeParam_REQ_GIVE_ITEM_INFO_TRADE_PARAM  RecordUserTradeParam = 32
	RecordUserTradeParam_ACCEPT_TRADE_PARAM              RecordUserTradeParam = 33
	RecordUserTradeParam_REFUSE_TRADE_PARAM              RecordUserTradeParam = 34
	RecordUserTradeParam_CHECK_PACKAGE_SIZE_TRADE_CMD    RecordUserTradeParam = 35
	RecordUserTradeParam_QUICK_TAKE_LOG_TRADE_PARAM      RecordUserTradeParam = 36
	RecordUserTradeParam_QUERY_ITEM_COUNT_TRADE_PARAM    RecordUserTradeParam = 37
	RecordUserTradeParam_QUERY_LOTTERY_GIVE_TRADE_PARAM  RecordUserTradeParam = 38
	RecordUserTradeParam_QUERY_SERVANT_FINANCE_RANK      RecordUserTradeParam = 39
	RecordUserTradeParam_QUERY_SERVANT_FINANCE_DETAIL    RecordUserTradeParam = 40
	RecordUserTradeParam_BOOTH_PLAYER_PENDING_LIST       RecordUserTradeParam = 41
	RecordUserTradeParam_UPDATE_ORDER_TRADE_PARAM        RecordUserTradeParam = 42
	RecordUserTradeParam_TAKE_ALL_LOG_TRADE_PARAM        RecordUserTradeParam = 43
)

// Enum value maps for RecordUserTradeParam.
var (
	RecordUserTradeParam_name = map[int32]string{
		1:  "BRIEF_PENDING_LIST_RECORDTRADE",
		3:  "DETAIL_PENDING_LIST_RECORDTRADE",
		4:  "ITEM_SELL_INFO_RECORDTRADE",
		7:  "MY_PENDING_LIST_RECORDTRADE",
		9:  "MY_TRADE_LOG_LIST_RECORDTRADE",
		14: "REQ_SERVER_PRICE_RECORDTRADE",
		15: "BUY_ITEM_RECORDTRADE",
		20: "SELL_ITEM_RECORDTRADE",
		22: "CANCEL_PENDING_RECORDTRADE",
		23: "RESELL_PENDING_RECORDTRADE",
		24: "PANEL_RECORDTRADE",
		25: "LIST_NTF_RECORDTRADE",
		26: "HOT_ITEMID_RECORDTRADE",
		27: "TAKE_LOG_TRADE_PARAM",
		28: "ADD_NEWLOG_TRADE_PARAM",
		29: "FETCH_NAMEINFO_TRADE_PARAM",
		30: "NTF_CAN_TAKE_COUNT_TRADE_PARAM",
		31: "GIVE_TRADE_PARAM",
		32: "REQ_GIVE_ITEM_INFO_TRADE_PARAM",
		33: "ACCEPT_TRADE_PARAM",
		34: "REFUSE_TRADE_PARAM",
		35: "CHECK_PACKAGE_SIZE_TRADE_CMD",
		36: "QUICK_TAKE_LOG_TRADE_PARAM",
		37: "QUERY_ITEM_COUNT_TRADE_PARAM",
		38: "QUERY_LOTTERY_GIVE_TRADE_PARAM",
		39: "QUERY_SERVANT_FINANCE_RANK",
		40: "QUERY_SERVANT_FINANCE_DETAIL",
		41: "BOOTH_PLAYER_PENDING_LIST",
		42: "UPDATE_ORDER_TRADE_PARAM",
		43: "TAKE_ALL_LOG_TRADE_PARAM",
	}
	RecordUserTradeParam_value = map[string]int32{
		"BRIEF_PENDING_LIST_RECORDTRADE":  1,
		"DETAIL_PENDING_LIST_RECORDTRADE": 3,
		"ITEM_SELL_INFO_RECORDTRADE":      4,
		"MY_PENDING_LIST_RECORDTRADE":     7,
		"MY_TRADE_LOG_LIST_RECORDTRADE":   9,
		"REQ_SERVER_PRICE_RECORDTRADE":    14,
		"BUY_ITEM_RECORDTRADE":            15,
		"SELL_ITEM_RECORDTRADE":           20,
		"CANCEL_PENDING_RECORDTRADE":      22,
		"RESELL_PENDING_RECORDTRADE":      23,
		"PANEL_RECORDTRADE":               24,
		"LIST_NTF_RECORDTRADE":            25,
		"HOT_ITEMID_RECORDTRADE":          26,
		"TAKE_LOG_TRADE_PARAM":            27,
		"ADD_NEWLOG_TRADE_PARAM":          28,
		"FETCH_NAMEINFO_TRADE_PARAM":      29,
		"NTF_CAN_TAKE_COUNT_TRADE_PARAM":  30,
		"GIVE_TRADE_PARAM":                31,
		"REQ_GIVE_ITEM_INFO_TRADE_PARAM":  32,
		"ACCEPT_TRADE_PARAM":              33,
		"REFUSE_TRADE_PARAM":              34,
		"CHECK_PACKAGE_SIZE_TRADE_CMD":    35,
		"QUICK_TAKE_LOG_TRADE_PARAM":      36,
		"QUERY_ITEM_COUNT_TRADE_PARAM":    37,
		"QUERY_LOTTERY_GIVE_TRADE_PARAM":  38,
		"QUERY_SERVANT_FINANCE_RANK":      39,
		"QUERY_SERVANT_FINANCE_DETAIL":    40,
		"BOOTH_PLAYER_PENDING_LIST":       41,
		"UPDATE_ORDER_TRADE_PARAM":        42,
		"TAKE_ALL_LOG_TRADE_PARAM":        43,
	}
)

func (x RecordUserTradeParam) Enum() *RecordUserTradeParam {
	p := new(RecordUserTradeParam)
	*p = x
	return p
}

func (x RecordUserTradeParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordUserTradeParam) Descriptor() protoreflect.EnumDescriptor {
	return file_RecordTrade_proto_enumTypes[0].Descriptor()
}

func (RecordUserTradeParam) Type() protoreflect.EnumType {
	return &file_RecordTrade_proto_enumTypes[0]
}

func (x RecordUserTradeParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RecordUserTradeParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RecordUserTradeParam(num)
	return nil
}

// Deprecated: Use RecordUserTradeParam.Descriptor instead.
func (RecordUserTradeParam) EnumDescriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{0}
}

type RankType int32

const (
	RankType_RANKTYPE_ITEM_ID_INC      RankType = 1
	RankType_RANKTYPE_ITEM_ID_DES      RankType = 2
	RankType_RANKTYPE_REFINE_LV_INC    RankType = 3
	RankType_RANKTYPE_REFINE_LV_DES    RankType = 4
	RankType_RANKTYPE_ITEM_PRICE_INC   RankType = 5
	RankType_RANKTYPE_ITEM_PRICE_DES   RankType = 6
	RankType_RANKTYPE_PENDING_TIME_INC RankType = 7
	RankType_RANKTYPE_PENDING_TIME_DES RankType = 8
)

// Enum value maps for RankType.
var (
	RankType_name = map[int32]string{
		1: "RANKTYPE_ITEM_ID_INC",
		2: "RANKTYPE_ITEM_ID_DES",
		3: "RANKTYPE_REFINE_LV_INC",
		4: "RANKTYPE_REFINE_LV_DES",
		5: "RANKTYPE_ITEM_PRICE_INC",
		6: "RANKTYPE_ITEM_PRICE_DES",
		7: "RANKTYPE_PENDING_TIME_INC",
		8: "RANKTYPE_PENDING_TIME_DES",
	}
	RankType_value = map[string]int32{
		"RANKTYPE_ITEM_ID_INC":      1,
		"RANKTYPE_ITEM_ID_DES":      2,
		"RANKTYPE_REFINE_LV_INC":    3,
		"RANKTYPE_REFINE_LV_DES":    4,
		"RANKTYPE_ITEM_PRICE_INC":   5,
		"RANKTYPE_ITEM_PRICE_DES":   6,
		"RANKTYPE_PENDING_TIME_INC": 7,
		"RANKTYPE_PENDING_TIME_DES": 8,
	}
)

func (x RankType) Enum() *RankType {
	p := new(RankType)
	*p = x
	return p
}

func (x RankType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RankType) Descriptor() protoreflect.EnumDescriptor {
	return file_RecordTrade_proto_enumTypes[1].Descriptor()
}

func (RankType) Type() protoreflect.EnumType {
	return &file_RecordTrade_proto_enumTypes[1]
}

func (x RankType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RankType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RankType(num)
	return nil
}

// Deprecated: Use RankType.Descriptor instead.
func (RankType) EnumDescriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{1}
}

type EOperType int32

const (
	EOperType_EOperType_PayPending           EOperType = 0
	EOperType_EOperType_NormalSell           EOperType = 1
	EOperType_EOperType_NoramlBuy            EOperType = 2
	EOperType_EOperType_Publicity            EOperType = 3
	EOperType_EOperType_PublicitySellSuccess EOperType = 4
	EOperType_EOperType_PublicitySellFail    EOperType = 5
	EOperType_EOperType_PublicityBuySuccess  EOperType = 6
	EOperType_EOperType_PublicityBuyFail     EOperType = 7
	EOperType_EOperType_PublicityBuying      EOperType = 8
	EOperType_EOperType_AutoOffTheShelf      EOperType = 9
	EOperType_EOperType_PayFail              EOperType = 10
	EOperType_EOperType_PayTimeout           EOperType = 11
)

// Enum value maps for EOperType.
var (
	EOperType_name = map[int32]string{
		0:  "EOperType_PayPending",
		1:  "EOperType_NormalSell",
		2:  "EOperType_NoramlBuy",
		3:  "EOperType_Publicity",
		4:  "EOperType_PublicitySellSuccess",
		5:  "EOperType_PublicitySellFail",
		6:  "EOperType_PublicityBuySuccess",
		7:  "EOperType_PublicityBuyFail",
		8:  "EOperType_PublicityBuying",
		9:  "EOperType_AutoOffTheShelf",
		10: "EOperType_PayFail",
		11: "EOperType_PayTimeout",
	}
	EOperType_value = map[string]int32{
		"EOperType_PayPending":           0,
		"EOperType_NormalSell":           1,
		"EOperType_NoramlBuy":            2,
		"EOperType_Publicity":            3,
		"EOperType_PublicitySellSuccess": 4,
		"EOperType_PublicitySellFail":    5,
		"EOperType_PublicityBuySuccess":  6,
		"EOperType_PublicityBuyFail":     7,
		"EOperType_PublicityBuying":      8,
		"EOperType_AutoOffTheShelf":      9,
		"EOperType_PayFail":              10,
		"EOperType_PayTimeout":           11,
	}
)

func (x EOperType) Enum() *EOperType {
	p := new(EOperType)
	*p = x
	return p
}

func (x EOperType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOperType) Descriptor() protoreflect.EnumDescriptor {
	return file_RecordTrade_proto_enumTypes[2].Descriptor()
}

func (EOperType) Type() protoreflect.EnumType {
	return &file_RecordTrade_proto_enumTypes[2]
}

func (x EOperType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EOperType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EOperType(num)
	return nil
}

// Deprecated: Use EOperType.Descriptor instead.
func (EOperType) EnumDescriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{2}
}

type ETakeStatus int32

const (
	ETakeStatus_ETakeStatus_CanTakeGive     ETakeStatus = 0
	ETakeStatus_ETakeStatus_Took            ETakeStatus = 1
	ETakeStatus_ETakeStatus_Taking          ETakeStatus = 2
	ETakeStatus_ETakeStatus_Giving          ETakeStatus = 3
	ETakeStatus_ETakeStatus_Give_Accepting  ETakeStatus = 4
	ETakeStatus_ETakeStatus_Give_Accepted_1 ETakeStatus = 5
	ETakeStatus_ETakeStatus_Give_Accepted_2 ETakeStatus = 6
	ETakeStatus_ETakeStatus_Invalid         ETakeStatus = 9
)

// Enum value maps for ETakeStatus.
var (
	ETakeStatus_name = map[int32]string{
		0: "ETakeStatus_CanTakeGive",
		1: "ETakeStatus_Took",
		2: "ETakeStatus_Taking",
		3: "ETakeStatus_Giving",
		4: "ETakeStatus_Give_Accepting",
		5: "ETakeStatus_Give_Accepted_1",
		6: "ETakeStatus_Give_Accepted_2",
		9: "ETakeStatus_Invalid",
	}
	ETakeStatus_value = map[string]int32{
		"ETakeStatus_CanTakeGive":     0,
		"ETakeStatus_Took":            1,
		"ETakeStatus_Taking":          2,
		"ETakeStatus_Giving":          3,
		"ETakeStatus_Give_Accepting":  4,
		"ETakeStatus_Give_Accepted_1": 5,
		"ETakeStatus_Give_Accepted_2": 6,
		"ETakeStatus_Invalid":         9,
	}
)

func (x ETakeStatus) Enum() *ETakeStatus {
	p := new(ETakeStatus)
	*p = x
	return p
}

func (x ETakeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETakeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_RecordTrade_proto_enumTypes[3].Descriptor()
}

func (ETakeStatus) Type() protoreflect.EnumType {
	return &file_RecordTrade_proto_enumTypes[3]
}

func (x ETakeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETakeStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETakeStatus(num)
	return nil
}

// Deprecated: Use ETakeStatus.Descriptor instead.
func (ETakeStatus) EnumDescriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{3}
}

type StateType int32

const (
	StateType_St_OverlapNormal    StateType = 1
	StateType_St_NonoverlapNormal StateType = 2
	StateType_St_WillPublicity    StateType = 3
	StateType_St_InPublicity      StateType = 4
)

// Enum value maps for StateType.
var (
	StateType_name = map[int32]string{
		1: "St_OverlapNormal",
		2: "St_NonoverlapNormal",
		3: "St_WillPublicity",
		4: "St_InPublicity",
	}
	StateType_value = map[string]int32{
		"St_OverlapNormal":    1,
		"St_NonoverlapNormal": 2,
		"St_WillPublicity":    3,
		"St_InPublicity":      4,
	}
)

func (x StateType) Enum() *StateType {
	p := new(StateType)
	*p = x
	return p
}

func (x StateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StateType) Descriptor() protoreflect.EnumDescriptor {
	return file_RecordTrade_proto_enumTypes[4].Descriptor()
}

func (StateType) Type() protoreflect.EnumType {
	return &file_RecordTrade_proto_enumTypes[4]
}

func (x StateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StateType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StateType(num)
	return nil
}

// Deprecated: Use StateType.Descriptor instead.
func (StateType) EnumDescriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{4}
}

type EPanelOperType int32

const (
	EPanelOperType_EPANEL_OPEN  EPanelOperType = 1
	EPanelOperType_EPANEL_CLOSE EPanelOperType = 2
)

// Enum value maps for EPanelOperType.
var (
	EPanelOperType_name = map[int32]string{
		1: "EPANEL_OPEN",
		2: "EPANEL_CLOSE",
	}
	EPanelOperType_value = map[string]int32{
		"EPANEL_OPEN":  1,
		"EPANEL_CLOSE": 2,
	}
)

func (x EPanelOperType) Enum() *EPanelOperType {
	p := new(EPanelOperType)
	*p = x
	return p
}

func (x EPanelOperType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPanelOperType) Descriptor() protoreflect.EnumDescriptor {
	return file_RecordTrade_proto_enumTypes[5].Descriptor()
}

func (EPanelOperType) Type() protoreflect.EnumType {
	return &file_RecordTrade_proto_enumTypes[5]
}

func (x EPanelOperType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPanelOperType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPanelOperType(num)
	return nil
}

// Deprecated: Use EPanelOperType.Descriptor instead.
func (EPanelOperType) EnumDescriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{5}
}

type EListNtfType int32

const (
	EListNtfType_ELIST_NTF_MY_PENDING EListNtfType = 1
	EListNtfType_ELIST_NTF_MY_LOG     EListNtfType = 2
)

// Enum value maps for EListNtfType.
var (
	EListNtfType_name = map[int32]string{
		1: "ELIST_NTF_MY_PENDING",
		2: "ELIST_NTF_MY_LOG",
	}
	EListNtfType_value = map[string]int32{
		"ELIST_NTF_MY_PENDING": 1,
		"ELIST_NTF_MY_LOG":     2,
	}
)

func (x EListNtfType) Enum() *EListNtfType {
	p := new(EListNtfType)
	*p = x
	return p
}

func (x EListNtfType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EListNtfType) Descriptor() protoreflect.EnumDescriptor {
	return file_RecordTrade_proto_enumTypes[6].Descriptor()
}

func (EListNtfType) Type() protoreflect.EnumType {
	return &file_RecordTrade_proto_enumTypes[6]
}

func (x EListNtfType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EListNtfType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EListNtfType(num)
	return nil
}

// Deprecated: Use EListNtfType.Descriptor instead.
func (EListNtfType) EnumDescriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{6}
}

type ETradeItemQueryType int32

const (
	ETradeItemQueryType_ETRADEITEM_All        ETradeItemQueryType = 0
	ETradeItemQueryType_ETRADEITEM_NON_DAMAGE ETradeItemQueryType = 1
)

// Enum value maps for ETradeItemQueryType.
var (
	ETradeItemQueryType_name = map[int32]string{
		0: "ETRADEITEM_All",
		1: "ETRADEITEM_NON_DAMAGE",
	}
	ETradeItemQueryType_value = map[string]int32{
		"ETRADEITEM_All":        0,
		"ETRADEITEM_NON_DAMAGE": 1,
	}
)

func (x ETradeItemQueryType) Enum() *ETradeItemQueryType {
	p := new(ETradeItemQueryType)
	*p = x
	return p
}

func (x ETradeItemQueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETradeItemQueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_RecordTrade_proto_enumTypes[7].Descriptor()
}

func (ETradeItemQueryType) Type() protoreflect.EnumType {
	return &file_RecordTrade_proto_enumTypes[7]
}

func (x ETradeItemQueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETradeItemQueryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETradeItemQueryType(num)
	return nil
}

// Deprecated: Use ETradeItemQueryType.Descriptor instead.
func (ETradeItemQueryType) EnumDescriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{7}
}

type EFinanceDateType int32

const (
	EFinanceDateType_EFINANCE_DATE_THREE EFinanceDateType = 1
	EFinanceDateType_EFINANCE_DATE_SEVEN EFinanceDateType = 2
)

// Enum value maps for EFinanceDateType.
var (
	EFinanceDateType_name = map[int32]string{
		1: "EFINANCE_DATE_THREE",
		2: "EFINANCE_DATE_SEVEN",
	}
	EFinanceDateType_value = map[string]int32{
		"EFINANCE_DATE_THREE": 1,
		"EFINANCE_DATE_SEVEN": 2,
	}
)

func (x EFinanceDateType) Enum() *EFinanceDateType {
	p := new(EFinanceDateType)
	*p = x
	return p
}

func (x EFinanceDateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFinanceDateType) Descriptor() protoreflect.EnumDescriptor {
	return file_RecordTrade_proto_enumTypes[8].Descriptor()
}

func (EFinanceDateType) Type() protoreflect.EnumType {
	return &file_RecordTrade_proto_enumTypes[8]
}

func (x EFinanceDateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFinanceDateType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFinanceDateType(num)
	return nil
}

// Deprecated: Use EFinanceDateType.Descriptor instead.
func (EFinanceDateType) EnumDescriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{8}
}

type EFinanceRankType int32

const (
	EFinanceRankType_EFINANCE_RANK_DEALCOUNT EFinanceRankType = 1
	EFinanceRankType_EFINANCE_RANK_UPRATIO   EFinanceRankType = 2
	EFinanceRankType_EFINANCE_RANK_DOWNRATIO EFinanceRankType = 3
)

// Enum value maps for EFinanceRankType.
var (
	EFinanceRankType_name = map[int32]string{
		1: "EFINANCE_RANK_DEALCOUNT",
		2: "EFINANCE_RANK_UPRATIO",
		3: "EFINANCE_RANK_DOWNRATIO",
	}
	EFinanceRankType_value = map[string]int32{
		"EFINANCE_RANK_DEALCOUNT": 1,
		"EFINANCE_RANK_UPRATIO":   2,
		"EFINANCE_RANK_DOWNRATIO": 3,
	}
)

func (x EFinanceRankType) Enum() *EFinanceRankType {
	p := new(EFinanceRankType)
	*p = x
	return p
}

func (x EFinanceRankType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFinanceRankType) Descriptor() protoreflect.EnumDescriptor {
	return file_RecordTrade_proto_enumTypes[9].Descriptor()
}

func (EFinanceRankType) Type() protoreflect.EnumType {
	return &file_RecordTrade_proto_enumTypes[9]
}

func (x EFinanceRankType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFinanceRankType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFinanceRankType(num)
	return nil
}

// Deprecated: Use EFinanceRankType.Descriptor instead.
func (EFinanceRankType) EnumDescriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{9}
}

type SearchCond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId    *uint32     `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	PageIndex *uint32     `protobuf:"varint,7,opt,name=page_index,json=pageIndex" json:"page_index,omitempty"`
	PageCount *uint32     `protobuf:"varint,8,opt,name=page_count,json=pageCount" json:"page_count,omitempty"`
	RankType  *RankType   `protobuf:"varint,9,opt,name=rank_type,json=rankType,enum=Cmd.RankType,def=1" json:"rank_type,omitempty"`
	TradeType *ETradeType `protobuf:"varint,10,opt,name=trade_type,json=tradeType,enum=Cmd.ETradeType,def=1" json:"trade_type,omitempty"`
}

// Default values for SearchCond fields.
const (
	Default_SearchCond_RankType  = RankType_RANKTYPE_ITEM_ID_INC
	Default_SearchCond_TradeType = ETradeType_ETRADETYPE_TRADE
)

func (x *SearchCond) Reset() {
	*x = SearchCond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCond) ProtoMessage() {}

func (x *SearchCond) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCond.ProtoReflect.Descriptor instead.
func (*SearchCond) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{0}
}

func (x *SearchCond) GetItemId() uint32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *SearchCond) GetPageIndex() uint32 {
	if x != nil && x.PageIndex != nil {
		return *x.PageIndex
	}
	return 0
}

func (x *SearchCond) GetPageCount() uint32 {
	if x != nil && x.PageCount != nil {
		return *x.PageCount
	}
	return 0
}

func (x *SearchCond) GetRankType() RankType {
	if x != nil && x.RankType != nil {
		return *x.RankType
	}
	return Default_SearchCond_RankType
}

func (x *SearchCond) GetTradeType() ETradeType {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return Default_SearchCond_TradeType
}

type BriefPendingListRecordTradeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param    *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=1" json:"param,omitempty"`
	Charid   *uint64               `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Category *uint32               `protobuf:"varint,4,opt,name=category" json:"category,omitempty"`
	Job      *uint32               `protobuf:"varint,5,opt,name=job" json:"job,omitempty"`
	Fashion  *uint32               `protobuf:"varint,6,opt,name=fashion" json:"fashion,omitempty"`
	PubLists []uint32              `protobuf:"varint,7,rep,name=pub_lists,json=pubLists" json:"pub_lists,omitempty"`
	Lists    []uint32              `protobuf:"varint,8,rep,name=lists" json:"lists,omitempty"`
}

// Default values for BriefPendingListRecordTradeCmd fields.
const (
	Default_BriefPendingListRecordTradeCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_BriefPendingListRecordTradeCmd_Param = RecordUserTradeParam_BRIEF_PENDING_LIST_RECORDTRADE
)

func (x *BriefPendingListRecordTradeCmd) Reset() {
	*x = BriefPendingListRecordTradeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BriefPendingListRecordTradeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BriefPendingListRecordTradeCmd) ProtoMessage() {}

func (x *BriefPendingListRecordTradeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BriefPendingListRecordTradeCmd.ProtoReflect.Descriptor instead.
func (*BriefPendingListRecordTradeCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{1}
}

func (x *BriefPendingListRecordTradeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BriefPendingListRecordTradeCmd_Cmd
}

func (x *BriefPendingListRecordTradeCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BriefPendingListRecordTradeCmd_Param
}

func (x *BriefPendingListRecordTradeCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *BriefPendingListRecordTradeCmd) GetCategory() uint32 {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return 0
}

func (x *BriefPendingListRecordTradeCmd) GetJob() uint32 {
	if x != nil && x.Job != nil {
		return *x.Job
	}
	return 0
}

func (x *BriefPendingListRecordTradeCmd) GetFashion() uint32 {
	if x != nil && x.Fashion != nil {
		return *x.Fashion
	}
	return 0
}

func (x *BriefPendingListRecordTradeCmd) GetPubLists() []uint32 {
	if x != nil {
		return x.PubLists
	}
	return nil
}

func (x *BriefPendingListRecordTradeCmd) GetLists() []uint32 {
	if x != nil {
		return x.Lists
	}
	return nil
}

type DetailPendingListRecordTradeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param          *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=3" json:"param,omitempty"`
	SearchCond     *SearchCond           `protobuf:"bytes,3,opt,name=search_cond,json=searchCond" json:"search_cond,omitempty"`
	Charid         *uint64               `protobuf:"varint,4,opt,name=charid" json:"charid,omitempty"`
	Lists          []*TradeItemBaseInfo  `protobuf:"bytes,5,rep,name=lists" json:"lists,omitempty"`
	TotalPageCount *uint32               `protobuf:"varint,6,opt,name=total_page_count,json=totalPageCount" json:"total_page_count,omitempty"`
}

// Default values for DetailPendingListRecordTradeCmd fields.
const (
	Default_DetailPendingListRecordTradeCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_DetailPendingListRecordTradeCmd_Param = RecordUserTradeParam_DETAIL_PENDING_LIST_RECORDTRADE
)

func (x *DetailPendingListRecordTradeCmd) Reset() {
	*x = DetailPendingListRecordTradeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailPendingListRecordTradeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailPendingListRecordTradeCmd) ProtoMessage() {}

func (x *DetailPendingListRecordTradeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailPendingListRecordTradeCmd.ProtoReflect.Descriptor instead.
func (*DetailPendingListRecordTradeCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{2}
}

func (x *DetailPendingListRecordTradeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DetailPendingListRecordTradeCmd_Cmd
}

func (x *DetailPendingListRecordTradeCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DetailPendingListRecordTradeCmd_Param
}

func (x *DetailPendingListRecordTradeCmd) GetSearchCond() *SearchCond {
	if x != nil {
		return x.SearchCond
	}
	return nil
}

func (x *DetailPendingListRecordTradeCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *DetailPendingListRecordTradeCmd) GetLists() []*TradeItemBaseInfo {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *DetailPendingListRecordTradeCmd) GetTotalPageCount() uint32 {
	if x != nil && x.TotalPageCount != nil {
		return *x.TotalPageCount
	}
	return 0
}

type BriefBuyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Time *uint32 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
}

func (x *BriefBuyInfo) Reset() {
	*x = BriefBuyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BriefBuyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BriefBuyInfo) ProtoMessage() {}

func (x *BriefBuyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BriefBuyInfo.ProtoReflect.Descriptor instead.
func (*BriefBuyInfo) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{3}
}

func (x *BriefBuyInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BriefBuyInfo) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type ItemSellInfoRecordTradeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param       *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=4" json:"param,omitempty"`
	Charid      *uint64               `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Itemid      *uint32               `protobuf:"varint,4,opt,name=itemid" json:"itemid,omitempty"`
	RefineLv    *uint32               `protobuf:"varint,5,opt,name=refine_lv,json=refineLv" json:"refine_lv,omitempty"`
	PublicityId *uint32               `protobuf:"varint,6,opt,name=publicity_id,json=publicityId" json:"publicity_id,omitempty"`
	Statetype   *StateType            `protobuf:"varint,7,opt,name=statetype,enum=Cmd.StateType" json:"statetype,omitempty"`
	Count       *uint32               `protobuf:"varint,8,opt,name=count,def=0" json:"count,omitempty"`
	BuyerCount  *uint32               `protobuf:"varint,9,opt,name=buyer_count,json=buyerCount,def=0" json:"buyer_count,omitempty"`
	BuyInfo     []*BriefBuyInfo       `protobuf:"bytes,10,rep,name=buy_info,json=buyInfo" json:"buy_info,omitempty"`
	OrderId     *uint64               `protobuf:"varint,11,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	Type        *ETradeType           `protobuf:"varint,12,opt,name=type,enum=Cmd.ETradeType,def=1" json:"type,omitempty"`
	Quota       *uint64               `protobuf:"varint,13,opt,name=quota" json:"quota,omitempty"`
}

// Default values for ItemSellInfoRecordTradeCmd fields.
const (
	Default_ItemSellInfoRecordTradeCmd_Cmd        = Command_RECORD_USER_TRADE_PROTOCMD
	Default_ItemSellInfoRecordTradeCmd_Param      = RecordUserTradeParam_ITEM_SELL_INFO_RECORDTRADE
	Default_ItemSellInfoRecordTradeCmd_Count      = uint32(0)
	Default_ItemSellInfoRecordTradeCmd_BuyerCount = uint32(0)
	Default_ItemSellInfoRecordTradeCmd_Type       = ETradeType_ETRADETYPE_TRADE
)

func (x *ItemSellInfoRecordTradeCmd) Reset() {
	*x = ItemSellInfoRecordTradeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemSellInfoRecordTradeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemSellInfoRecordTradeCmd) ProtoMessage() {}

func (x *ItemSellInfoRecordTradeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemSellInfoRecordTradeCmd.ProtoReflect.Descriptor instead.
func (*ItemSellInfoRecordTradeCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{4}
}

func (x *ItemSellInfoRecordTradeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ItemSellInfoRecordTradeCmd_Cmd
}

func (x *ItemSellInfoRecordTradeCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ItemSellInfoRecordTradeCmd_Param
}

func (x *ItemSellInfoRecordTradeCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *ItemSellInfoRecordTradeCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *ItemSellInfoRecordTradeCmd) GetRefineLv() uint32 {
	if x != nil && x.RefineLv != nil {
		return *x.RefineLv
	}
	return 0
}

func (x *ItemSellInfoRecordTradeCmd) GetPublicityId() uint32 {
	if x != nil && x.PublicityId != nil {
		return *x.PublicityId
	}
	return 0
}

func (x *ItemSellInfoRecordTradeCmd) GetStatetype() StateType {
	if x != nil && x.Statetype != nil {
		return *x.Statetype
	}
	return StateType_St_OverlapNormal
}

func (x *ItemSellInfoRecordTradeCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_ItemSellInfoRecordTradeCmd_Count
}

func (x *ItemSellInfoRecordTradeCmd) GetBuyerCount() uint32 {
	if x != nil && x.BuyerCount != nil {
		return *x.BuyerCount
	}
	return Default_ItemSellInfoRecordTradeCmd_BuyerCount
}

func (x *ItemSellInfoRecordTradeCmd) GetBuyInfo() []*BriefBuyInfo {
	if x != nil {
		return x.BuyInfo
	}
	return nil
}

func (x *ItemSellInfoRecordTradeCmd) GetOrderId() uint64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *ItemSellInfoRecordTradeCmd) GetType() ETradeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ItemSellInfoRecordTradeCmd_Type
}

func (x *ItemSellInfoRecordTradeCmd) GetQuota() uint64 {
	if x != nil && x.Quota != nil {
		return *x.Quota
	}
	return 0
}

type MyPendingListRecordTradeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param      *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=7" json:"param,omitempty"`
	SearchCond *SearchCond           `protobuf:"bytes,3,opt,name=search_cond,json=searchCond" json:"search_cond,omitempty"`
	Charid     *uint64               `protobuf:"varint,4,opt,name=charid" json:"charid,omitempty"`
	Lists      []*TradeItemBaseInfo  `protobuf:"bytes,6,rep,name=lists" json:"lists,omitempty"`
}

// Default values for MyPendingListRecordTradeCmd fields.
const (
	Default_MyPendingListRecordTradeCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_MyPendingListRecordTradeCmd_Param = RecordUserTradeParam_MY_PENDING_LIST_RECORDTRADE
)

func (x *MyPendingListRecordTradeCmd) Reset() {
	*x = MyPendingListRecordTradeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyPendingListRecordTradeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyPendingListRecordTradeCmd) ProtoMessage() {}

func (x *MyPendingListRecordTradeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyPendingListRecordTradeCmd.ProtoReflect.Descriptor instead.
func (*MyPendingListRecordTradeCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{5}
}

func (x *MyPendingListRecordTradeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MyPendingListRecordTradeCmd_Cmd
}

func (x *MyPendingListRecordTradeCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MyPendingListRecordTradeCmd_Param
}

func (x *MyPendingListRecordTradeCmd) GetSearchCond() *SearchCond {
	if x != nil {
		return x.SearchCond
	}
	return nil
}

func (x *MyPendingListRecordTradeCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *MyPendingListRecordTradeCmd) GetLists() []*TradeItemBaseInfo {
	if x != nil {
		return x.Lists
	}
	return nil
}

type NameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Zoneid *uint32 `protobuf:"varint,2,opt,name=zoneid" json:"zoneid,omitempty"`
	Count  *uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (x *NameInfo) Reset() {
	*x = NameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameInfo) ProtoMessage() {}

func (x *NameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameInfo.ProtoReflect.Descriptor instead.
func (*NameInfo) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{6}
}

func (x *NameInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NameInfo) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return 0
}

func (x *NameInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type NameInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameInfos []*NameInfo `protobuf:"bytes,1,rep,name=name_infos,json=nameInfos" json:"name_infos,omitempty"`
}

func (x *NameInfoList) Reset() {
	*x = NameInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameInfoList) ProtoMessage() {}

func (x *NameInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameInfoList.ProtoReflect.Descriptor instead.
func (*NameInfoList) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{7}
}

func (x *NameInfoList) GetNameInfos() []*NameInfo {
	if x != nil {
		return x.NameInfos
	}
	return nil
}

type LogItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *uint64       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Status         *ETakeStatus  `protobuf:"varint,2,opt,name=status,enum=Cmd.ETakeStatus" json:"status,omitempty"`
	Logtype        *EOperType    `protobuf:"varint,3,opt,name=logtype,enum=Cmd.EOperType" json:"logtype,omitempty"`
	Itemid         *uint32       `protobuf:"varint,4,opt,name=itemid" json:"itemid,omitempty"`
	RefineLv       *uint32       `protobuf:"varint,5,opt,name=refine_lv,json=refineLv" json:"refine_lv,omitempty"`
	Damage         *bool         `protobuf:"varint,6,opt,name=damage" json:"damage,omitempty"`
	Tradetime      *uint32       `protobuf:"varint,7,opt,name=tradetime" json:"tradetime,omitempty"`
	Count          *uint32       `protobuf:"varint,8,opt,name=count" json:"count,omitempty"`
	Price          *uint64       `protobuf:"varint,20,opt,name=price" json:"price,omitempty"`
	Tax            *uint64       `protobuf:"varint,9,opt,name=tax" json:"tax,omitempty"`
	Getmoney       *uint64       `protobuf:"varint,10,opt,name=getmoney" json:"getmoney,omitempty"`
	Costmoney      *uint64       `protobuf:"varint,11,opt,name=costmoney" json:"costmoney,omitempty"`
	Failcount      *uint32       `protobuf:"varint,12,opt,name=failcount" json:"failcount,omitempty"`
	Retmoney       *uint64       `protobuf:"varint,13,opt,name=retmoney" json:"retmoney,omitempty"`
	Totalcount     *uint32       `protobuf:"varint,14,opt,name=totalcount" json:"totalcount,omitempty"`
	Endtime        *uint32       `protobuf:"varint,15,opt,name=endtime" json:"endtime,omitempty"`
	NameInfo       *NameInfo     `protobuf:"bytes,16,opt,name=name_info,json=nameInfo" json:"name_info,omitempty"`
	IsManyPeople   *bool         `protobuf:"varint,17,opt,name=is_many_people,json=isManyPeople" json:"is_many_people,omitempty"`
	NameList       *NameInfoList `protobuf:"bytes,18,opt,name=name_list,json=nameList" json:"name_list,omitempty"`
	Itemdata       *ItemData     `protobuf:"bytes,19,opt,name=itemdata" json:"itemdata,omitempty"`
	Receiverid     *uint64       `protobuf:"varint,21,opt,name=receiverid" json:"receiverid,omitempty"`
	Receivername   *string       `protobuf:"bytes,22,opt,name=receivername" json:"receivername,omitempty"`
	Receiverzoneid *uint32       `protobuf:"varint,23,opt,name=receiverzoneid" json:"receiverzoneid,omitempty"`
	Quota          *uint64       `protobuf:"varint,24,opt,name=quota" json:"quota,omitempty"`
	Background     *uint32       `protobuf:"varint,25,opt,name=background" json:"background,omitempty"`
	Expiretime     *uint32       `protobuf:"varint,26,opt,name=expiretime" json:"expiretime,omitempty"`
	RetCost        *uint64       `protobuf:"varint,27,opt,name=ret_cost,json=retCost" json:"ret_cost,omitempty"`
	Cangive        *bool         `protobuf:"varint,28,opt,name=cangive" json:"cangive,omitempty"`
	TradeType      *ETradeType   `protobuf:"varint,29,opt,name=trade_type,json=tradeType,enum=Cmd.ETradeType,def=1" json:"trade_type,omitempty"`
	IsPublic       *bool         `protobuf:"varint,30,opt,name=is_public,json=isPublic" json:"is_public,omitempty"`
	QuotaCost      *uint64       `protobuf:"varint,31,opt,name=quota_cost,json=quotaCost,def=0" json:"quota_cost,omitempty"`
}

// Default values for LogItemInfo fields.
const (
	Default_LogItemInfo_TradeType = ETradeType_ETRADETYPE_TRADE
	Default_LogItemInfo_QuotaCost = uint64(0)
)

func (x *LogItemInfo) Reset() {
	*x = LogItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogItemInfo) ProtoMessage() {}

func (x *LogItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogItemInfo.ProtoReflect.Descriptor instead.
func (*LogItemInfo) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{8}
}

func (x *LogItemInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *LogItemInfo) GetStatus() ETakeStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ETakeStatus_ETakeStatus_CanTakeGive
}

func (x *LogItemInfo) GetLogtype() EOperType {
	if x != nil && x.Logtype != nil {
		return *x.Logtype
	}
	return EOperType_EOperType_PayPending
}

func (x *LogItemInfo) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *LogItemInfo) GetRefineLv() uint32 {
	if x != nil && x.RefineLv != nil {
		return *x.RefineLv
	}
	return 0
}

func (x *LogItemInfo) GetDamage() bool {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return false
}

func (x *LogItemInfo) GetTradetime() uint32 {
	if x != nil && x.Tradetime != nil {
		return *x.Tradetime
	}
	return 0
}

func (x *LogItemInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *LogItemInfo) GetPrice() uint64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *LogItemInfo) GetTax() uint64 {
	if x != nil && x.Tax != nil {
		return *x.Tax
	}
	return 0
}

func (x *LogItemInfo) GetGetmoney() uint64 {
	if x != nil && x.Getmoney != nil {
		return *x.Getmoney
	}
	return 0
}

func (x *LogItemInfo) GetCostmoney() uint64 {
	if x != nil && x.Costmoney != nil {
		return *x.Costmoney
	}
	return 0
}

func (x *LogItemInfo) GetFailcount() uint32 {
	if x != nil && x.Failcount != nil {
		return *x.Failcount
	}
	return 0
}

func (x *LogItemInfo) GetRetmoney() uint64 {
	if x != nil && x.Retmoney != nil {
		return *x.Retmoney
	}
	return 0
}

func (x *LogItemInfo) GetTotalcount() uint32 {
	if x != nil && x.Totalcount != nil {
		return *x.Totalcount
	}
	return 0
}

func (x *LogItemInfo) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

func (x *LogItemInfo) GetNameInfo() *NameInfo {
	if x != nil {
		return x.NameInfo
	}
	return nil
}

func (x *LogItemInfo) GetIsManyPeople() bool {
	if x != nil && x.IsManyPeople != nil {
		return *x.IsManyPeople
	}
	return false
}

func (x *LogItemInfo) GetNameList() *NameInfoList {
	if x != nil {
		return x.NameList
	}
	return nil
}

func (x *LogItemInfo) GetItemdata() *ItemData {
	if x != nil {
		return x.Itemdata
	}
	return nil
}

func (x *LogItemInfo) GetReceiverid() uint64 {
	if x != nil && x.Receiverid != nil {
		return *x.Receiverid
	}
	return 0
}

func (x *LogItemInfo) GetReceivername() string {
	if x != nil && x.Receivername != nil {
		return *x.Receivername
	}
	return ""
}

func (x *LogItemInfo) GetReceiverzoneid() uint32 {
	if x != nil && x.Receiverzoneid != nil {
		return *x.Receiverzoneid
	}
	return 0
}

func (x *LogItemInfo) GetQuota() uint64 {
	if x != nil && x.Quota != nil {
		return *x.Quota
	}
	return 0
}

func (x *LogItemInfo) GetBackground() uint32 {
	if x != nil && x.Background != nil {
		return *x.Background
	}
	return 0
}

func (x *LogItemInfo) GetExpiretime() uint32 {
	if x != nil && x.Expiretime != nil {
		return *x.Expiretime
	}
	return 0
}

func (x *LogItemInfo) GetRetCost() uint64 {
	if x != nil && x.RetCost != nil {
		return *x.RetCost
	}
	return 0
}

func (x *LogItemInfo) GetCangive() bool {
	if x != nil && x.Cangive != nil {
		return *x.Cangive
	}
	return false
}

func (x *LogItemInfo) GetTradeType() ETradeType {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return Default_LogItemInfo_TradeType
}

func (x *LogItemInfo) GetIsPublic() bool {
	if x != nil && x.IsPublic != nil {
		return *x.IsPublic
	}
	return false
}

func (x *LogItemInfo) GetQuotaCost() uint64 {
	if x != nil && x.QuotaCost != nil {
		return *x.QuotaCost
	}
	return Default_LogItemInfo_QuotaCost
}

type MyTradeLogRecordTradeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param          *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=9" json:"param,omitempty"`
	Charid         *uint64               `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Index          *uint32               `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
	TotalPageCount *uint32               `protobuf:"varint,5,opt,name=total_page_count,json=totalPageCount" json:"total_page_count,omitempty"`
	LogList        []*LogItemInfo        `protobuf:"bytes,6,rep,name=log_list,json=logList" json:"log_list,omitempty"`
	TradeType      *ETradeType           `protobuf:"varint,7,opt,name=trade_type,json=tradeType,enum=Cmd.ETradeType,def=1" json:"trade_type,omitempty"`
}

// Default values for MyTradeLogRecordTradeCmd fields.
const (
	Default_MyTradeLogRecordTradeCmd_Cmd       = Command_RECORD_USER_TRADE_PROTOCMD
	Default_MyTradeLogRecordTradeCmd_Param     = RecordUserTradeParam_MY_TRADE_LOG_LIST_RECORDTRADE
	Default_MyTradeLogRecordTradeCmd_TradeType = ETradeType_ETRADETYPE_TRADE
)

func (x *MyTradeLogRecordTradeCmd) Reset() {
	*x = MyTradeLogRecordTradeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyTradeLogRecordTradeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyTradeLogRecordTradeCmd) ProtoMessage() {}

func (x *MyTradeLogRecordTradeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyTradeLogRecordTradeCmd.ProtoReflect.Descriptor instead.
func (*MyTradeLogRecordTradeCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{9}
}

func (x *MyTradeLogRecordTradeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MyTradeLogRecordTradeCmd_Cmd
}

func (x *MyTradeLogRecordTradeCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MyTradeLogRecordTradeCmd_Param
}

func (x *MyTradeLogRecordTradeCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *MyTradeLogRecordTradeCmd) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *MyTradeLogRecordTradeCmd) GetTotalPageCount() uint32 {
	if x != nil && x.TotalPageCount != nil {
		return *x.TotalPageCount
	}
	return 0
}

func (x *MyTradeLogRecordTradeCmd) GetLogList() []*LogItemInfo {
	if x != nil {
		return x.LogList
	}
	return nil
}

func (x *MyTradeLogRecordTradeCmd) GetTradeType() ETradeType {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return Default_MyTradeLogRecordTradeCmd_TradeType
}

type TakeLogCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param   *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=27" json:"param,omitempty"`
	Log     *LogItemInfo          `protobuf:"bytes,3,opt,name=log" json:"log,omitempty"`
	Success *bool                 `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
}

// Default values for TakeLogCmd fields.
const (
	Default_TakeLogCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_TakeLogCmd_Param = RecordUserTradeParam_TAKE_LOG_TRADE_PARAM
)

func (x *TakeLogCmd) Reset() {
	*x = TakeLogCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeLogCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeLogCmd) ProtoMessage() {}

func (x *TakeLogCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeLogCmd.ProtoReflect.Descriptor instead.
func (*TakeLogCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{10}
}

func (x *TakeLogCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TakeLogCmd_Cmd
}

func (x *TakeLogCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TakeLogCmd_Param
}

func (x *TakeLogCmd) GetLog() *LogItemInfo {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *TakeLogCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type AddNewLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param          *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=28" json:"param,omitempty"`
	Charid         *uint64               `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Log            *LogItemInfo          `protobuf:"bytes,4,opt,name=log" json:"log,omitempty"`
	TotalPageCount *uint32               `protobuf:"varint,5,opt,name=total_page_count,json=totalPageCount" json:"total_page_count,omitempty"`
}

// Default values for AddNewLog fields.
const (
	Default_AddNewLog_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_AddNewLog_Param = RecordUserTradeParam_ADD_NEWLOG_TRADE_PARAM
)

func (x *AddNewLog) Reset() {
	*x = AddNewLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNewLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNewLog) ProtoMessage() {}

func (x *AddNewLog) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNewLog.ProtoReflect.Descriptor instead.
func (*AddNewLog) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{11}
}

func (x *AddNewLog) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AddNewLog_Cmd
}

func (x *AddNewLog) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AddNewLog_Param
}

func (x *AddNewLog) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *AddNewLog) GetLog() *LogItemInfo {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *AddNewLog) GetTotalPageCount() uint32 {
	if x != nil && x.TotalPageCount != nil {
		return *x.TotalPageCount
	}
	return 0
}

type FetchNameInfoCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param          *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=29" json:"param,omitempty"`
	Id             *uint64               `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Type           *EOperType            `protobuf:"varint,4,opt,name=type,enum=Cmd.EOperType" json:"type,omitempty"`
	Index          *uint32               `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	TotalPageCount *uint32               `protobuf:"varint,6,opt,name=total_page_count,json=totalPageCount" json:"total_page_count,omitempty"`
	NameList       *NameInfoList         `protobuf:"bytes,7,opt,name=name_list,json=nameList" json:"name_list,omitempty"`
}

// Default values for FetchNameInfoCmd fields.
const (
	Default_FetchNameInfoCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_FetchNameInfoCmd_Param = RecordUserTradeParam_FETCH_NAMEINFO_TRADE_PARAM
)

func (x *FetchNameInfoCmd) Reset() {
	*x = FetchNameInfoCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchNameInfoCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchNameInfoCmd) ProtoMessage() {}

func (x *FetchNameInfoCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchNameInfoCmd.ProtoReflect.Descriptor instead.
func (*FetchNameInfoCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{12}
}

func (x *FetchNameInfoCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FetchNameInfoCmd_Cmd
}

func (x *FetchNameInfoCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FetchNameInfoCmd_Param
}

func (x *FetchNameInfoCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FetchNameInfoCmd) GetType() EOperType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EOperType_EOperType_PayPending
}

func (x *FetchNameInfoCmd) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *FetchNameInfoCmd) GetTotalPageCount() uint32 {
	if x != nil && x.TotalPageCount != nil {
		return *x.TotalPageCount
	}
	return 0
}

func (x *FetchNameInfoCmd) GetNameList() *NameInfoList {
	if x != nil {
		return x.NameList
	}
	return nil
}

type ReqServerPriceRecordTradeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param      *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=14" json:"param,omitempty"`
	Charid     *uint64               `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	ItemData   *ItemData             `protobuf:"bytes,4,opt,name=itemData" json:"itemData,omitempty"`
	Price      *uint64               `protobuf:"varint,5,opt,name=price" json:"price,omitempty"`
	Issell     *bool                 `protobuf:"varint,6,opt,name=issell,def=0" json:"issell,omitempty"`
	Statetype  *StateType            `protobuf:"varint,7,opt,name=statetype,enum=Cmd.StateType" json:"statetype,omitempty"`
	Count      *uint32               `protobuf:"varint,8,opt,name=count,def=0" json:"count,omitempty"`
	BuyerCount *uint32               `protobuf:"varint,9,opt,name=buyer_count,json=buyerCount,def=0" json:"buyer_count,omitempty"`
	EndTime    *uint32               `protobuf:"varint,10,opt,name=end_time,json=endTime,def=0" json:"end_time,omitempty"`
	TradeType  *ETradeType           `protobuf:"varint,11,opt,name=trade_type,json=tradeType,enum=Cmd.ETradeType,def=1" json:"trade_type,omitempty"`
}

// Default values for ReqServerPriceRecordTradeCmd fields.
const (
	Default_ReqServerPriceRecordTradeCmd_Cmd        = Command_RECORD_USER_TRADE_PROTOCMD
	Default_ReqServerPriceRecordTradeCmd_Param      = RecordUserTradeParam_REQ_SERVER_PRICE_RECORDTRADE
	Default_ReqServerPriceRecordTradeCmd_Issell     = bool(false)
	Default_ReqServerPriceRecordTradeCmd_Count      = uint32(0)
	Default_ReqServerPriceRecordTradeCmd_BuyerCount = uint32(0)
	Default_ReqServerPriceRecordTradeCmd_EndTime    = uint32(0)
	Default_ReqServerPriceRecordTradeCmd_TradeType  = ETradeType_ETRADETYPE_TRADE
)

func (x *ReqServerPriceRecordTradeCmd) Reset() {
	*x = ReqServerPriceRecordTradeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqServerPriceRecordTradeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqServerPriceRecordTradeCmd) ProtoMessage() {}

func (x *ReqServerPriceRecordTradeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqServerPriceRecordTradeCmd.ProtoReflect.Descriptor instead.
func (*ReqServerPriceRecordTradeCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{13}
}

func (x *ReqServerPriceRecordTradeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqServerPriceRecordTradeCmd_Cmd
}

func (x *ReqServerPriceRecordTradeCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqServerPriceRecordTradeCmd_Param
}

func (x *ReqServerPriceRecordTradeCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *ReqServerPriceRecordTradeCmd) GetItemData() *ItemData {
	if x != nil {
		return x.ItemData
	}
	return nil
}

func (x *ReqServerPriceRecordTradeCmd) GetPrice() uint64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *ReqServerPriceRecordTradeCmd) GetIssell() bool {
	if x != nil && x.Issell != nil {
		return *x.Issell
	}
	return Default_ReqServerPriceRecordTradeCmd_Issell
}

func (x *ReqServerPriceRecordTradeCmd) GetStatetype() StateType {
	if x != nil && x.Statetype != nil {
		return *x.Statetype
	}
	return StateType_St_OverlapNormal
}

func (x *ReqServerPriceRecordTradeCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_ReqServerPriceRecordTradeCmd_Count
}

func (x *ReqServerPriceRecordTradeCmd) GetBuyerCount() uint32 {
	if x != nil && x.BuyerCount != nil {
		return *x.BuyerCount
	}
	return Default_ReqServerPriceRecordTradeCmd_BuyerCount
}

func (x *ReqServerPriceRecordTradeCmd) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return Default_ReqServerPriceRecordTradeCmd_EndTime
}

func (x *ReqServerPriceRecordTradeCmd) GetTradeType() ETradeType {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return Default_ReqServerPriceRecordTradeCmd_TradeType
}

type BuyItemRecordTradeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param    *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=15" json:"param,omitempty"`
	ItemInfo *TradeItemBaseInfo    `protobuf:"bytes,3,opt,name=item_info,json=itemInfo" json:"item_info,omitempty"`
	Charid   *uint64               `protobuf:"varint,4,opt,name=charid" json:"charid,omitempty"`
	Ret      *ETRADE_RET_CODE      `protobuf:"varint,5,opt,name=ret,enum=Cmd.ETRADE_RET_CODE" json:"ret,omitempty"`
	Type     *ETradeType           `protobuf:"varint,6,opt,name=type,enum=Cmd.ETradeType,def=1" json:"type,omitempty"`
}

// Default values for BuyItemRecordTradeCmd fields.
const (
	Default_BuyItemRecordTradeCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_BuyItemRecordTradeCmd_Param = RecordUserTradeParam_BUY_ITEM_RECORDTRADE
	Default_BuyItemRecordTradeCmd_Type  = ETradeType_ETRADETYPE_TRADE
)

func (x *BuyItemRecordTradeCmd) Reset() {
	*x = BuyItemRecordTradeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyItemRecordTradeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyItemRecordTradeCmd) ProtoMessage() {}

func (x *BuyItemRecordTradeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyItemRecordTradeCmd.ProtoReflect.Descriptor instead.
func (*BuyItemRecordTradeCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{14}
}

func (x *BuyItemRecordTradeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuyItemRecordTradeCmd_Cmd
}

func (x *BuyItemRecordTradeCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuyItemRecordTradeCmd_Param
}

func (x *BuyItemRecordTradeCmd) GetItemInfo() *TradeItemBaseInfo {
	if x != nil {
		return x.ItemInfo
	}
	return nil
}

func (x *BuyItemRecordTradeCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *BuyItemRecordTradeCmd) GetRet() ETRADE_RET_CODE {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return ETRADE_RET_CODE_ETRADE_RET_CODE_SUCCESS
}

func (x *BuyItemRecordTradeCmd) GetType() ETradeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_BuyItemRecordTradeCmd_Type
}

type SellItemRecordTradeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param    *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=20" json:"param,omitempty"`
	ItemInfo *TradeItemBaseInfo    `protobuf:"bytes,3,opt,name=item_info,json=itemInfo" json:"item_info,omitempty"`
	Charid   *uint64               `protobuf:"varint,4,opt,name=charid" json:"charid,omitempty"`
	Ret      *ETRADE_RET_CODE      `protobuf:"varint,5,opt,name=ret,enum=Cmd.ETRADE_RET_CODE" json:"ret,omitempty"`
	Type     *ETradeType           `protobuf:"varint,6,opt,name=type,enum=Cmd.ETradeType,def=1" json:"type,omitempty"`
}

// Default values for SellItemRecordTradeCmd fields.
const (
	Default_SellItemRecordTradeCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_SellItemRecordTradeCmd_Param = RecordUserTradeParam_SELL_ITEM_RECORDTRADE
	Default_SellItemRecordTradeCmd_Type  = ETradeType_ETRADETYPE_TRADE
)

func (x *SellItemRecordTradeCmd) Reset() {
	*x = SellItemRecordTradeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellItemRecordTradeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellItemRecordTradeCmd) ProtoMessage() {}

func (x *SellItemRecordTradeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellItemRecordTradeCmd.ProtoReflect.Descriptor instead.
func (*SellItemRecordTradeCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{15}
}

func (x *SellItemRecordTradeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SellItemRecordTradeCmd_Cmd
}

func (x *SellItemRecordTradeCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SellItemRecordTradeCmd_Param
}

func (x *SellItemRecordTradeCmd) GetItemInfo() *TradeItemBaseInfo {
	if x != nil {
		return x.ItemInfo
	}
	return nil
}

func (x *SellItemRecordTradeCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *SellItemRecordTradeCmd) GetRet() ETRADE_RET_CODE {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return ETRADE_RET_CODE_ETRADE_RET_CODE_SUCCESS
}

func (x *SellItemRecordTradeCmd) GetType() ETradeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_SellItemRecordTradeCmd_Type
}

type CancelItemRecordTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param    *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=22" json:"param,omitempty"`
	ItemInfo *TradeItemBaseInfo    `protobuf:"bytes,3,opt,name=item_info,json=itemInfo" json:"item_info,omitempty"`
	Charid   *uint64               `protobuf:"varint,4,opt,name=charid" json:"charid,omitempty"`
	Ret      *ETRADE_RET_CODE      `protobuf:"varint,5,opt,name=ret,enum=Cmd.ETRADE_RET_CODE" json:"ret,omitempty"`
	OrderId  *uint64               `protobuf:"varint,6,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	Type     *ETradeType           `protobuf:"varint,7,opt,name=type,enum=Cmd.ETradeType,def=1" json:"type,omitempty"`
	Quota    *uint64               `protobuf:"varint,8,opt,name=quota" json:"quota,omitempty"`
	ItemId   *uint64               `protobuf:"varint,9,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
}

// Default values for CancelItemRecordTrade fields.
const (
	Default_CancelItemRecordTrade_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_CancelItemRecordTrade_Param = RecordUserTradeParam_CANCEL_PENDING_RECORDTRADE
	Default_CancelItemRecordTrade_Type  = ETradeType_ETRADETYPE_TRADE
)

func (x *CancelItemRecordTrade) Reset() {
	*x = CancelItemRecordTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelItemRecordTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelItemRecordTrade) ProtoMessage() {}

func (x *CancelItemRecordTrade) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelItemRecordTrade.ProtoReflect.Descriptor instead.
func (*CancelItemRecordTrade) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{16}
}

func (x *CancelItemRecordTrade) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CancelItemRecordTrade_Cmd
}

func (x *CancelItemRecordTrade) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CancelItemRecordTrade_Param
}

func (x *CancelItemRecordTrade) GetItemInfo() *TradeItemBaseInfo {
	if x != nil {
		return x.ItemInfo
	}
	return nil
}

func (x *CancelItemRecordTrade) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *CancelItemRecordTrade) GetRet() ETRADE_RET_CODE {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return ETRADE_RET_CODE_ETRADE_RET_CODE_SUCCESS
}

func (x *CancelItemRecordTrade) GetOrderId() uint64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *CancelItemRecordTrade) GetType() ETradeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CancelItemRecordTrade_Type
}

func (x *CancelItemRecordTrade) GetQuota() uint64 {
	if x != nil && x.Quota != nil {
		return *x.Quota
	}
	return 0
}

func (x *CancelItemRecordTrade) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type ResellPendingRecordTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param    *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=23" json:"param,omitempty"`
	ItemInfo *TradeItemBaseInfo    `protobuf:"bytes,3,opt,name=item_info,json=itemInfo" json:"item_info,omitempty"`
	Charid   *uint64               `protobuf:"varint,4,opt,name=charid" json:"charid,omitempty"`
	Ret      *ETRADE_RET_CODE      `protobuf:"varint,5,opt,name=ret,enum=Cmd.ETRADE_RET_CODE" json:"ret,omitempty"`
	OrderId  *uint64               `protobuf:"varint,6,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	Type     *ETradeType           `protobuf:"varint,7,opt,name=type,enum=Cmd.ETradeType,def=1" json:"type,omitempty"`
	Quota    *uint64               `protobuf:"varint,8,opt,name=quota" json:"quota,omitempty"`
}

// Default values for ResellPendingRecordTrade fields.
const (
	Default_ResellPendingRecordTrade_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_ResellPendingRecordTrade_Param = RecordUserTradeParam_RESELL_PENDING_RECORDTRADE
	Default_ResellPendingRecordTrade_Type  = ETradeType_ETRADETYPE_TRADE
)

func (x *ResellPendingRecordTrade) Reset() {
	*x = ResellPendingRecordTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResellPendingRecordTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResellPendingRecordTrade) ProtoMessage() {}

func (x *ResellPendingRecordTrade) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResellPendingRecordTrade.ProtoReflect.Descriptor instead.
func (*ResellPendingRecordTrade) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{17}
}

func (x *ResellPendingRecordTrade) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ResellPendingRecordTrade_Cmd
}

func (x *ResellPendingRecordTrade) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ResellPendingRecordTrade_Param
}

func (x *ResellPendingRecordTrade) GetItemInfo() *TradeItemBaseInfo {
	if x != nil {
		return x.ItemInfo
	}
	return nil
}

func (x *ResellPendingRecordTrade) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *ResellPendingRecordTrade) GetRet() ETRADE_RET_CODE {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return ETRADE_RET_CODE_ETRADE_RET_CODE_SUCCESS
}

func (x *ResellPendingRecordTrade) GetOrderId() uint64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *ResellPendingRecordTrade) GetType() ETradeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ResellPendingRecordTrade_Type
}

func (x *ResellPendingRecordTrade) GetQuota() uint64 {
	if x != nil && x.Quota != nil {
		return *x.Quota
	}
	return 0
}

type PanelRecordTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param     *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=24" json:"param,omitempty"`
	Charid    *uint64               `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Oper      *EPanelOperType       `protobuf:"varint,4,opt,name=oper,enum=Cmd.EPanelOperType" json:"oper,omitempty"`
	TradeType *ETradeType           `protobuf:"varint,5,opt,name=trade_type,json=tradeType,enum=Cmd.ETradeType,def=1" json:"trade_type,omitempty"`
}

// Default values for PanelRecordTrade fields.
const (
	Default_PanelRecordTrade_Cmd       = Command_RECORD_USER_TRADE_PROTOCMD
	Default_PanelRecordTrade_Param     = RecordUserTradeParam_PANEL_RECORDTRADE
	Default_PanelRecordTrade_TradeType = ETradeType_ETRADETYPE_TRADE
)

func (x *PanelRecordTrade) Reset() {
	*x = PanelRecordTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PanelRecordTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PanelRecordTrade) ProtoMessage() {}

func (x *PanelRecordTrade) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PanelRecordTrade.ProtoReflect.Descriptor instead.
func (*PanelRecordTrade) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{18}
}

func (x *PanelRecordTrade) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PanelRecordTrade_Cmd
}

func (x *PanelRecordTrade) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PanelRecordTrade_Param
}

func (x *PanelRecordTrade) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *PanelRecordTrade) GetOper() EPanelOperType {
	if x != nil && x.Oper != nil {
		return *x.Oper
	}
	return EPanelOperType_EPANEL_OPEN
}

func (x *PanelRecordTrade) GetTradeType() ETradeType {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return Default_PanelRecordTrade_TradeType
}

type ListNtfRecordTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param     *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=25" json:"param,omitempty"`
	Charid    *uint64               `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Type      *EListNtfType         `protobuf:"varint,4,opt,name=type,enum=Cmd.EListNtfType" json:"type,omitempty"`
	TradeType *ETradeType           `protobuf:"varint,5,opt,name=trade_type,json=tradeType,enum=Cmd.ETradeType,def=1" json:"trade_type,omitempty"`
}

// Default values for ListNtfRecordTrade fields.
const (
	Default_ListNtfRecordTrade_Cmd       = Command_RECORD_USER_TRADE_PROTOCMD
	Default_ListNtfRecordTrade_Param     = RecordUserTradeParam_LIST_NTF_RECORDTRADE
	Default_ListNtfRecordTrade_TradeType = ETradeType_ETRADETYPE_TRADE
)

func (x *ListNtfRecordTrade) Reset() {
	*x = ListNtfRecordTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNtfRecordTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNtfRecordTrade) ProtoMessage() {}

func (x *ListNtfRecordTrade) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNtfRecordTrade.ProtoReflect.Descriptor instead.
func (*ListNtfRecordTrade) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{19}
}

func (x *ListNtfRecordTrade) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ListNtfRecordTrade_Cmd
}

func (x *ListNtfRecordTrade) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ListNtfRecordTrade_Param
}

func (x *ListNtfRecordTrade) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *ListNtfRecordTrade) GetType() EListNtfType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EListNtfType_ELIST_NTF_MY_PENDING
}

func (x *ListNtfRecordTrade) GetTradeType() ETradeType {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return Default_ListNtfRecordTrade_TradeType
}

type HotItemidRecordTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param    *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=26" json:"param,omitempty"`
	Charid   *uint64               `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Job      *uint32               `protobuf:"varint,4,opt,name=job" json:"job,omitempty"`
	PubLists []uint32              `protobuf:"varint,5,rep,name=pub_lists,json=pubLists" json:"pub_lists,omitempty"`
	Lists    []uint32              `protobuf:"varint,6,rep,name=lists" json:"lists,omitempty"`
}

// Default values for HotItemidRecordTrade fields.
const (
	Default_HotItemidRecordTrade_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_HotItemidRecordTrade_Param = RecordUserTradeParam_HOT_ITEMID_RECORDTRADE
)

func (x *HotItemidRecordTrade) Reset() {
	*x = HotItemidRecordTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotItemidRecordTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotItemidRecordTrade) ProtoMessage() {}

func (x *HotItemidRecordTrade) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotItemidRecordTrade.ProtoReflect.Descriptor instead.
func (*HotItemidRecordTrade) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{20}
}

func (x *HotItemidRecordTrade) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HotItemidRecordTrade_Cmd
}

func (x *HotItemidRecordTrade) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HotItemidRecordTrade_Param
}

func (x *HotItemidRecordTrade) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *HotItemidRecordTrade) GetJob() uint32 {
	if x != nil && x.Job != nil {
		return *x.Job
	}
	return 0
}

func (x *HotItemidRecordTrade) GetPubLists() []uint32 {
	if x != nil {
		return x.PubLists
	}
	return nil
}

func (x *HotItemidRecordTrade) GetLists() []uint32 {
	if x != nil {
		return x.Lists
	}
	return nil
}

type NtfCanTakeCountTradeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param     *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=30" json:"param,omitempty"`
	Count     *uint32               `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	TradeType *ETradeType           `protobuf:"varint,4,opt,name=trade_type,json=tradeType,enum=Cmd.ETradeType,def=1" json:"trade_type,omitempty"`
}

// Default values for NtfCanTakeCountTradeCmd fields.
const (
	Default_NtfCanTakeCountTradeCmd_Cmd       = Command_RECORD_USER_TRADE_PROTOCMD
	Default_NtfCanTakeCountTradeCmd_Param     = RecordUserTradeParam_NTF_CAN_TAKE_COUNT_TRADE_PARAM
	Default_NtfCanTakeCountTradeCmd_TradeType = ETradeType_ETRADETYPE_TRADE
)

func (x *NtfCanTakeCountTradeCmd) Reset() {
	*x = NtfCanTakeCountTradeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfCanTakeCountTradeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfCanTakeCountTradeCmd) ProtoMessage() {}

func (x *NtfCanTakeCountTradeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfCanTakeCountTradeCmd.ProtoReflect.Descriptor instead.
func (*NtfCanTakeCountTradeCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{21}
}

func (x *NtfCanTakeCountTradeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfCanTakeCountTradeCmd_Cmd
}

func (x *NtfCanTakeCountTradeCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfCanTakeCountTradeCmd_Param
}

func (x *NtfCanTakeCountTradeCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *NtfCanTakeCountTradeCmd) GetTradeType() ETradeType {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return Default_NtfCanTakeCountTradeCmd_TradeType
}

type GiveTradeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param      *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=31" json:"param,omitempty"`
	Id         *uint64               `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Logtype    *EOperType            `protobuf:"varint,4,opt,name=logtype,enum=Cmd.EOperType" json:"logtype,omitempty"`
	Friendid   *uint64               `protobuf:"varint,5,opt,name=friendid" json:"friendid,omitempty"`
	Content    *string               `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	Anonymous  *bool                 `protobuf:"varint,7,opt,name=anonymous" json:"anonymous,omitempty"`
	Background *uint32               `protobuf:"varint,8,opt,name=background" json:"background,omitempty"`
	Success    *bool                 `protobuf:"varint,9,opt,name=success" json:"success,omitempty"`
}

// Default values for GiveTradeCmd fields.
const (
	Default_GiveTradeCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_GiveTradeCmd_Param = RecordUserTradeParam_GIVE_TRADE_PARAM
)

func (x *GiveTradeCmd) Reset() {
	*x = GiveTradeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiveTradeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveTradeCmd) ProtoMessage() {}

func (x *GiveTradeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveTradeCmd.ProtoReflect.Descriptor instead.
func (*GiveTradeCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{22}
}

func (x *GiveTradeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GiveTradeCmd_Cmd
}

func (x *GiveTradeCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GiveTradeCmd_Param
}

func (x *GiveTradeCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GiveTradeCmd) GetLogtype() EOperType {
	if x != nil && x.Logtype != nil {
		return *x.Logtype
	}
	return EOperType_EOperType_PayPending
}

func (x *GiveTradeCmd) GetFriendid() uint64 {
	if x != nil && x.Friendid != nil {
		return *x.Friendid
	}
	return 0
}

func (x *GiveTradeCmd) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *GiveTradeCmd) GetAnonymous() bool {
	if x != nil && x.Anonymous != nil {
		return *x.Anonymous
	}
	return false
}

func (x *GiveTradeCmd) GetBackground() uint32 {
	if x != nil && x.Background != nil {
		return *x.Background
	}
	return 0
}

func (x *GiveTradeCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type AcceptTradeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param   *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=33" json:"param,omitempty"`
	Id      *uint64               `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Success *bool                 `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
}

// Default values for AcceptTradeCmd fields.
const (
	Default_AcceptTradeCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_AcceptTradeCmd_Param = RecordUserTradeParam_ACCEPT_TRADE_PARAM
)

func (x *AcceptTradeCmd) Reset() {
	*x = AcceptTradeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptTradeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptTradeCmd) ProtoMessage() {}

func (x *AcceptTradeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptTradeCmd.ProtoReflect.Descriptor instead.
func (*AcceptTradeCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{23}
}

func (x *AcceptTradeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AcceptTradeCmd_Cmd
}

func (x *AcceptTradeCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AcceptTradeCmd_Param
}

func (x *AcceptTradeCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AcceptTradeCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type RefuseTradeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param   *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=34" json:"param,omitempty"`
	Id      *uint64               `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Success *bool                 `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
}

// Default values for RefuseTradeCmd fields.
const (
	Default_RefuseTradeCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_RefuseTradeCmd_Param = RecordUserTradeParam_REFUSE_TRADE_PARAM
)

func (x *RefuseTradeCmd) Reset() {
	*x = RefuseTradeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefuseTradeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefuseTradeCmd) ProtoMessage() {}

func (x *RefuseTradeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefuseTradeCmd.ProtoReflect.Descriptor instead.
func (*RefuseTradeCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{24}
}

func (x *RefuseTradeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RefuseTradeCmd_Cmd
}

func (x *RefuseTradeCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RefuseTradeCmd_Param
}

func (x *RefuseTradeCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *RefuseTradeCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type GiveItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *uint64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Status       *ETakeStatus `protobuf:"varint,2,opt,name=status,enum=Cmd.ETakeStatus" json:"status,omitempty"`
	Itemid       *uint32      `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	Count        *uint32      `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Itemdata     *ItemData    `protobuf:"bytes,5,opt,name=itemdata" json:"itemdata,omitempty"`
	Senderid     *uint64      `protobuf:"varint,6,opt,name=senderid" json:"senderid,omitempty"`
	Sendername   *string      `protobuf:"bytes,7,opt,name=sendername" json:"sendername,omitempty"`
	Anonymous    *bool        `protobuf:"varint,8,opt,name=anonymous" json:"anonymous,omitempty"`
	Expiretime   *uint32      `protobuf:"varint,9,opt,name=expiretime" json:"expiretime,omitempty"`
	Content      *string      `protobuf:"bytes,10,opt,name=content" json:"content,omitempty"`
	Quota        *uint64      `protobuf:"varint,11,opt,name=quota" json:"quota,omitempty"`
	Receivername *string      `protobuf:"bytes,12,opt,name=receivername" json:"receivername,omitempty"`
	Background   *uint32      `protobuf:"varint,13,opt,name=background" json:"background,omitempty"`
}

func (x *GiveItemInfo) Reset() {
	*x = GiveItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiveItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveItemInfo) ProtoMessage() {}

func (x *GiveItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveItemInfo.ProtoReflect.Descriptor instead.
func (*GiveItemInfo) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{25}
}

func (x *GiveItemInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GiveItemInfo) GetStatus() ETakeStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ETakeStatus_ETakeStatus_CanTakeGive
}

func (x *GiveItemInfo) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *GiveItemInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *GiveItemInfo) GetItemdata() *ItemData {
	if x != nil {
		return x.Itemdata
	}
	return nil
}

func (x *GiveItemInfo) GetSenderid() uint64 {
	if x != nil && x.Senderid != nil {
		return *x.Senderid
	}
	return 0
}

func (x *GiveItemInfo) GetSendername() string {
	if x != nil && x.Sendername != nil {
		return *x.Sendername
	}
	return ""
}

func (x *GiveItemInfo) GetAnonymous() bool {
	if x != nil && x.Anonymous != nil {
		return *x.Anonymous
	}
	return false
}

func (x *GiveItemInfo) GetExpiretime() uint32 {
	if x != nil && x.Expiretime != nil {
		return *x.Expiretime
	}
	return 0
}

func (x *GiveItemInfo) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *GiveItemInfo) GetQuota() uint64 {
	if x != nil && x.Quota != nil {
		return *x.Quota
	}
	return 0
}

func (x *GiveItemInfo) GetReceivername() string {
	if x != nil && x.Receivername != nil {
		return *x.Receivername
	}
	return ""
}

func (x *GiveItemInfo) GetBackground() uint32 {
	if x != nil && x.Background != nil {
		return *x.Background
	}
	return 0
}

type ReqGiveItemInfoCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param    *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=32" json:"param,omitempty"`
	Id       *uint64               `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Iteminfo *GiveItemInfo         `protobuf:"bytes,4,opt,name=iteminfo" json:"iteminfo,omitempty"`
}

// Default values for ReqGiveItemInfoCmd fields.
const (
	Default_ReqGiveItemInfoCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_ReqGiveItemInfoCmd_Param = RecordUserTradeParam_REQ_GIVE_ITEM_INFO_TRADE_PARAM
)

func (x *ReqGiveItemInfoCmd) Reset() {
	*x = ReqGiveItemInfoCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGiveItemInfoCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGiveItemInfoCmd) ProtoMessage() {}

func (x *ReqGiveItemInfoCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGiveItemInfoCmd.ProtoReflect.Descriptor instead.
func (*ReqGiveItemInfoCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{26}
}

func (x *ReqGiveItemInfoCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqGiveItemInfoCmd_Cmd
}

func (x *ReqGiveItemInfoCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqGiveItemInfoCmd_Param
}

func (x *ReqGiveItemInfoCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ReqGiveItemInfoCmd) GetIteminfo() *GiveItemInfo {
	if x != nil {
		return x.Iteminfo
	}
	return nil
}

type CheckPackageSizeTradeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=35" json:"param,omitempty"`
	Items []*ItemInfo           `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	Ret   *bool                 `protobuf:"varint,4,opt,name=ret" json:"ret,omitempty"`
}

// Default values for CheckPackageSizeTradeCmd fields.
const (
	Default_CheckPackageSizeTradeCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_CheckPackageSizeTradeCmd_Param = RecordUserTradeParam_CHECK_PACKAGE_SIZE_TRADE_CMD
)

func (x *CheckPackageSizeTradeCmd) Reset() {
	*x = CheckPackageSizeTradeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPackageSizeTradeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPackageSizeTradeCmd) ProtoMessage() {}

func (x *CheckPackageSizeTradeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPackageSizeTradeCmd.ProtoReflect.Descriptor instead.
func (*CheckPackageSizeTradeCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{27}
}

func (x *CheckPackageSizeTradeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CheckPackageSizeTradeCmd_Cmd
}

func (x *CheckPackageSizeTradeCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CheckPackageSizeTradeCmd_Param
}

func (x *CheckPackageSizeTradeCmd) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CheckPackageSizeTradeCmd) GetRet() bool {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return false
}

type QucikTakeLogTradeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param     *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=36" json:"param,omitempty"`
	TradeType *ETradeType           `protobuf:"varint,3,opt,name=trade_type,json=tradeType,enum=Cmd.ETradeType,def=1" json:"trade_type,omitempty"`
	Ids       []uint64              `protobuf:"varint,4,rep,name=ids" json:"ids,omitempty"`
}

// Default values for QucikTakeLogTradeCmd fields.
const (
	Default_QucikTakeLogTradeCmd_Cmd       = Command_RECORD_USER_TRADE_PROTOCMD
	Default_QucikTakeLogTradeCmd_Param     = RecordUserTradeParam_QUICK_TAKE_LOG_TRADE_PARAM
	Default_QucikTakeLogTradeCmd_TradeType = ETradeType_ETRADETYPE_TRADE
)

func (x *QucikTakeLogTradeCmd) Reset() {
	*x = QucikTakeLogTradeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QucikTakeLogTradeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QucikTakeLogTradeCmd) ProtoMessage() {}

func (x *QucikTakeLogTradeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QucikTakeLogTradeCmd.ProtoReflect.Descriptor instead.
func (*QucikTakeLogTradeCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{28}
}

func (x *QucikTakeLogTradeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QucikTakeLogTradeCmd_Cmd
}

func (x *QucikTakeLogTradeCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QucikTakeLogTradeCmd_Param
}

func (x *QucikTakeLogTradeCmd) GetTradeType() ETradeType {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return Default_QucikTakeLogTradeCmd_TradeType
}

func (x *QucikTakeLogTradeCmd) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ItemCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid *uint32 `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	Count  *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *ItemCount) Reset() {
	*x = ItemCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemCount) ProtoMessage() {}

func (x *ItemCount) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemCount.ProtoReflect.Descriptor instead.
func (*ItemCount) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{29}
}

func (x *ItemCount) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *ItemCount) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type QueryItemCountTradeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param    *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=37" json:"param,omitempty"`
	Charid   *uint64               `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Items    []*ItemCount          `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
	ResItems []*TradeItemBaseInfo  `protobuf:"bytes,5,rep,name=res_items,json=resItems" json:"res_items,omitempty"`
	Type     *ETradeItemQueryType  `protobuf:"varint,6,opt,name=type,enum=Cmd.ETradeItemQueryType,def=0" json:"type,omitempty"`
}

// Default values for QueryItemCountTradeCmd fields.
const (
	Default_QueryItemCountTradeCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_QueryItemCountTradeCmd_Param = RecordUserTradeParam_QUERY_ITEM_COUNT_TRADE_PARAM
	Default_QueryItemCountTradeCmd_Type  = ETradeItemQueryType_ETRADEITEM_All
)

func (x *QueryItemCountTradeCmd) Reset() {
	*x = QueryItemCountTradeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryItemCountTradeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryItemCountTradeCmd) ProtoMessage() {}

func (x *QueryItemCountTradeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryItemCountTradeCmd.ProtoReflect.Descriptor instead.
func (*QueryItemCountTradeCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{30}
}

func (x *QueryItemCountTradeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryItemCountTradeCmd_Cmd
}

func (x *QueryItemCountTradeCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryItemCountTradeCmd_Param
}

func (x *QueryItemCountTradeCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *QueryItemCountTradeCmd) GetItems() []*ItemCount {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *QueryItemCountTradeCmd) GetResItems() []*TradeItemBaseInfo {
	if x != nil {
		return x.ResItems
	}
	return nil
}

func (x *QueryItemCountTradeCmd) GetType() ETradeItemQueryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_QueryItemCountTradeCmd_Type
}

type LotteryGiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year       *uint32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month      *uint32 `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	Count      *uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Content    *string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	Configid   *uint32 `protobuf:"varint,5,opt,name=configid" json:"configid,omitempty"`
	Receiverid *uint64 `protobuf:"varint,6,opt,name=receiverid" json:"receiverid,omitempty"`
}

func (x *LotteryGiveInfo) Reset() {
	*x = LotteryGiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryGiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryGiveInfo) ProtoMessage() {}

func (x *LotteryGiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryGiveInfo.ProtoReflect.Descriptor instead.
func (*LotteryGiveInfo) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{31}
}

func (x *LotteryGiveInfo) GetYear() uint32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *LotteryGiveInfo) GetMonth() uint32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *LotteryGiveInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *LotteryGiveInfo) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *LotteryGiveInfo) GetConfigid() uint32 {
	if x != nil && x.Configid != nil {
		return *x.Configid
	}
	return 0
}

func (x *LotteryGiveInfo) GetReceiverid() uint64 {
	if x != nil && x.Receiverid != nil {
		return *x.Receiverid
	}
	return 0
}

type LotteryGiveCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param    *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=38" json:"param,omitempty"`
	Iteminfo *LotteryGiveInfo      `protobuf:"bytes,3,opt,name=iteminfo" json:"iteminfo,omitempty"`
}

// Default values for LotteryGiveCmd fields.
const (
	Default_LotteryGiveCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_LotteryGiveCmd_Param = RecordUserTradeParam_QUERY_LOTTERY_GIVE_TRADE_PARAM
)

func (x *LotteryGiveCmd) Reset() {
	*x = LotteryGiveCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryGiveCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryGiveCmd) ProtoMessage() {}

func (x *LotteryGiveCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryGiveCmd.ProtoReflect.Descriptor instead.
func (*LotteryGiveCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{32}
}

func (x *LotteryGiveCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LotteryGiveCmd_Cmd
}

func (x *LotteryGiveCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LotteryGiveCmd_Param
}

func (x *LotteryGiveCmd) GetIteminfo() *LotteryGiveInfo {
	if x != nil {
		return x.Iteminfo
	}
	return nil
}

type TodayFinanceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId *uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	Ratio  *uint32 `protobuf:"varint,2,opt,name=ratio" json:"ratio,omitempty"`
	Time   *uint32 `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	Price  *uint64 `protobuf:"varint,4,opt,name=price" json:"price,omitempty"`
}

func (x *TodayFinanceItem) Reset() {
	*x = TodayFinanceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TodayFinanceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodayFinanceItem) ProtoMessage() {}

func (x *TodayFinanceItem) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodayFinanceItem.ProtoReflect.Descriptor instead.
func (*TodayFinanceItem) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{33}
}

func (x *TodayFinanceItem) GetItemId() uint32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *TodayFinanceItem) GetRatio() uint32 {
	if x != nil && x.Ratio != nil {
		return *x.Ratio
	}
	return 0
}

func (x *TodayFinanceItem) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *TodayFinanceItem) GetPrice() uint64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

type TodayFinanceRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param    *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=39" json:"param,omitempty"`
	RankType *EFinanceRankType     `protobuf:"varint,3,opt,name=rank_type,json=rankType,enum=Cmd.EFinanceRankType,def=1" json:"rank_type,omitempty"`
	DateType *EFinanceDateType     `protobuf:"varint,4,opt,name=date_type,json=dateType,enum=Cmd.EFinanceDateType,def=1" json:"date_type,omitempty"`
	Lists    []*TodayFinanceItem   `protobuf:"bytes,5,rep,name=lists" json:"lists,omitempty"`
}

// Default values for TodayFinanceRank fields.
const (
	Default_TodayFinanceRank_Cmd      = Command_RECORD_USER_TRADE_PROTOCMD
	Default_TodayFinanceRank_Param    = RecordUserTradeParam_QUERY_SERVANT_FINANCE_RANK
	Default_TodayFinanceRank_RankType = EFinanceRankType_EFINANCE_RANK_DEALCOUNT
	Default_TodayFinanceRank_DateType = EFinanceDateType_EFINANCE_DATE_THREE
)

func (x *TodayFinanceRank) Reset() {
	*x = TodayFinanceRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TodayFinanceRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodayFinanceRank) ProtoMessage() {}

func (x *TodayFinanceRank) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodayFinanceRank.ProtoReflect.Descriptor instead.
func (*TodayFinanceRank) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{34}
}

func (x *TodayFinanceRank) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TodayFinanceRank_Cmd
}

func (x *TodayFinanceRank) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TodayFinanceRank_Param
}

func (x *TodayFinanceRank) GetRankType() EFinanceRankType {
	if x != nil && x.RankType != nil {
		return *x.RankType
	}
	return Default_TodayFinanceRank_RankType
}

func (x *TodayFinanceRank) GetDateType() EFinanceDateType {
	if x != nil && x.DateType != nil {
		return *x.DateType
	}
	return Default_TodayFinanceRank_DateType
}

func (x *TodayFinanceRank) GetLists() []*TodayFinanceItem {
	if x != nil {
		return x.Lists
	}
	return nil
}

type TodayFinanceDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param    *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=40" json:"param,omitempty"`
	ItemId   *uint32               `protobuf:"varint,3,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	RankType *EFinanceRankType     `protobuf:"varint,4,opt,name=rank_type,json=rankType,enum=Cmd.EFinanceRankType,def=1" json:"rank_type,omitempty"`
	DateType *EFinanceDateType     `protobuf:"varint,5,opt,name=date_type,json=dateType,enum=Cmd.EFinanceDateType,def=1" json:"date_type,omitempty"`
	Lists    []*TodayFinanceItem   `protobuf:"bytes,6,rep,name=lists" json:"lists,omitempty"`
}

// Default values for TodayFinanceDetail fields.
const (
	Default_TodayFinanceDetail_Cmd      = Command_RECORD_USER_TRADE_PROTOCMD
	Default_TodayFinanceDetail_Param    = RecordUserTradeParam_QUERY_SERVANT_FINANCE_DETAIL
	Default_TodayFinanceDetail_RankType = EFinanceRankType_EFINANCE_RANK_DEALCOUNT
	Default_TodayFinanceDetail_DateType = EFinanceDateType_EFINANCE_DATE_THREE
)

func (x *TodayFinanceDetail) Reset() {
	*x = TodayFinanceDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TodayFinanceDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodayFinanceDetail) ProtoMessage() {}

func (x *TodayFinanceDetail) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodayFinanceDetail.ProtoReflect.Descriptor instead.
func (*TodayFinanceDetail) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{35}
}

func (x *TodayFinanceDetail) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TodayFinanceDetail_Cmd
}

func (x *TodayFinanceDetail) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TodayFinanceDetail_Param
}

func (x *TodayFinanceDetail) GetItemId() uint32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *TodayFinanceDetail) GetRankType() EFinanceRankType {
	if x != nil && x.RankType != nil {
		return *x.RankType
	}
	return Default_TodayFinanceDetail_RankType
}

func (x *TodayFinanceDetail) GetDateType() EFinanceDateType {
	if x != nil && x.DateType != nil {
		return *x.DateType
	}
	return Default_TodayFinanceDetail_DateType
}

func (x *TodayFinanceDetail) GetLists() []*TodayFinanceItem {
	if x != nil {
		return x.Lists
	}
	return nil
}

type BoothPlayerPendingListCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param  *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=41" json:"param,omitempty"`
	Charid *uint64               `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Lists  []*TradeItemBaseInfo  `protobuf:"bytes,4,rep,name=lists" json:"lists,omitempty"`
}

// Default values for BoothPlayerPendingListCmd fields.
const (
	Default_BoothPlayerPendingListCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_BoothPlayerPendingListCmd_Param = RecordUserTradeParam_BOOTH_PLAYER_PENDING_LIST
)

func (x *BoothPlayerPendingListCmd) Reset() {
	*x = BoothPlayerPendingListCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoothPlayerPendingListCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoothPlayerPendingListCmd) ProtoMessage() {}

func (x *BoothPlayerPendingListCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoothPlayerPendingListCmd.ProtoReflect.Descriptor instead.
func (*BoothPlayerPendingListCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{36}
}

func (x *BoothPlayerPendingListCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BoothPlayerPendingListCmd_Cmd
}

func (x *BoothPlayerPendingListCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BoothPlayerPendingListCmd_Param
}

func (x *BoothPlayerPendingListCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *BoothPlayerPendingListCmd) GetLists() []*TradeItemBaseInfo {
	if x != nil {
		return x.Lists
	}
	return nil
}

type UpdateOrderTradeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param  *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=42" json:"param,omitempty"`
	Charid *uint64               `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Info   *TradeItemBaseInfo    `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
	Type   *ETradeType           `protobuf:"varint,5,opt,name=type,enum=Cmd.ETradeType,def=1" json:"type,omitempty"`
}

// Default values for UpdateOrderTradeCmd fields.
const (
	Default_UpdateOrderTradeCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_UpdateOrderTradeCmd_Param = RecordUserTradeParam_UPDATE_ORDER_TRADE_PARAM
	Default_UpdateOrderTradeCmd_Type  = ETradeType_ETRADETYPE_TRADE
)

func (x *UpdateOrderTradeCmd) Reset() {
	*x = UpdateOrderTradeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderTradeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderTradeCmd) ProtoMessage() {}

func (x *UpdateOrderTradeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderTradeCmd.ProtoReflect.Descriptor instead.
func (*UpdateOrderTradeCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateOrderTradeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateOrderTradeCmd_Cmd
}

func (x *UpdateOrderTradeCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateOrderTradeCmd_Param
}

func (x *UpdateOrderTradeCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *UpdateOrderTradeCmd) GetInfo() *TradeItemBaseInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *UpdateOrderTradeCmd) GetType() ETradeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_UpdateOrderTradeCmd_Type
}

type TradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint64     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Tradetype *ETradeType `protobuf:"varint,2,opt,name=tradetype,enum=Cmd.ETradeType" json:"tradetype,omitempty"`
	Logtype   *EOperType  `protobuf:"varint,3,opt,name=logtype,enum=Cmd.EOperType" json:"logtype,omitempty"`
}

func (x *TradeInfo) Reset() {
	*x = TradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeInfo) ProtoMessage() {}

func (x *TradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeInfo.ProtoReflect.Descriptor instead.
func (*TradeInfo) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{38}
}

func (x *TradeInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TradeInfo) GetTradetype() ETradeType {
	if x != nil && x.Tradetype != nil {
		return *x.Tradetype
	}
	return ETradeType_ETRADETYPE_ALL
}

func (x *TradeInfo) GetLogtype() EOperType {
	if x != nil && x.Logtype != nil {
		return *x.Logtype
	}
	return EOperType_EOperType_PayPending
}

type TakeAllLogCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=57" json:"cmd,omitempty"`
	Param *RecordUserTradeParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RecordUserTradeParam,def=43" json:"param,omitempty"`
	Infos []*TradeInfo          `protobuf:"bytes,3,rep,name=infos" json:"infos,omitempty"`
}

// Default values for TakeAllLogCmd fields.
const (
	Default_TakeAllLogCmd_Cmd   = Command_RECORD_USER_TRADE_PROTOCMD
	Default_TakeAllLogCmd_Param = RecordUserTradeParam_TAKE_ALL_LOG_TRADE_PARAM
)

func (x *TakeAllLogCmd) Reset() {
	*x = TakeAllLogCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RecordTrade_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeAllLogCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeAllLogCmd) ProtoMessage() {}

func (x *TakeAllLogCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RecordTrade_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeAllLogCmd.ProtoReflect.Descriptor instead.
func (*TakeAllLogCmd) Descriptor() ([]byte, []int) {
	return file_RecordTrade_proto_rawDescGZIP(), []int{39}
}

func (x *TakeAllLogCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TakeAllLogCmd_Cmd
}

func (x *TakeAllLogCmd) GetParam() RecordUserTradeParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TakeAllLogCmd_Param
}

func (x *TakeAllLogCmd) GetInfos() []*TradeInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

var File_RecordTrade_proto protoreflect.FileDescriptor

var file_RecordTrade_proto_rawDesc = []byte{
	0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40,
	0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x14, 0x52, 0x41, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x40, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xc0, 0x02, 0x0a, 0x1e, 0x42, 0x72, 0x69, 0x65, 0x66, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x4f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x42, 0x52, 0x49,
	0x45, 0x46, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x73, 0x68,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x61, 0x73, 0x68, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x1f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x50, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x1f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x0a, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x12, 0x2c, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x0c, 0x42, 0x72, 0x69,
	0x65, 0x66, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x96, 0x04, 0x0a, 0x1a, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6d, 0x64,
	0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x4c,
	0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x4c, 0x76, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x72, 0x69,
	0x65, 0x66, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x62, 0x75, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x22, 0x9f, 0x02, 0x0a, 0x1b, 0x4d,
	0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x1b, 0x4d, 0x59, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x08,
	0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6f,
	0x6e, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x0c, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xed, 0x07, 0x0a, 0x0b, 0x4c, 0x6f, 0x67,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x54, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x6c,
	0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x4c,
	0x76, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x65, 0x74, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x74, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x72, 0x65, 0x74, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x65, 0x6f, 0x70, 0x6c,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x50,
	0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x6e, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x61, 0x6e, 0x67, 0x69, 0x76, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x63, 0x61, 0x6e, 0x67, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x43, 0x6f, 0x73, 0x74, 0x22, 0xed, 0x02, 0x0a, 0x18, 0x4d, 0x79, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x4e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x4d, 0x59, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x6b,
	0x65, 0x4c, 0x6f, 0x67, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x54,
	0x41, 0x4b, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x03, 0x6c, 0x6f,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f,
	0x67, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x64,
	0x4e, 0x65, 0x77, 0x4c, 0x6f, 0x67, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x41, 0x44,
	0x44, 0x5f, 0x4e, 0x45, 0x57, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xbf, 0x02, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x46, 0x45,
	0x54, 0x43, 0x48, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xec, 0x03, 0x0a, 0x1c, 0x52, 0x65, 0x71, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x4d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x52, 0x45, 0x51, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x65,
	0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x15, 0x42, 0x75, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x14, 0x42, 0x55, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x33, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x16,
	0x53, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x53, 0x45,
	0x4c, 0x4c, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x33, 0x0a, 0x09, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12,
	0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10,
	0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x96, 0x03, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x33, 0x0a, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22,
	0x80, 0x03, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1a, 0x52, 0x45, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x33, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x22, 0x95, 0x02, 0x0a, 0x10, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x50,
	0x41, 0x4e, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x74, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4e, 0x54,
	0x46, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x74, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x14, 0x48, 0x6f, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x69, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x48, 0x4f, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6a,
	0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x75, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x22, 0xfe, 0x01, 0x0a, 0x17, 0x4e, 0x74, 0x66, 0x43, 0x61, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1e, 0x4e, 0x54, 0x46, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x41, 0x4b, 0x45,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x40, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xd5, 0x02, 0x0a, 0x0c, 0x47, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x10, 0x47, 0x49, 0x56, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x12, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x75,
	0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x12, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x8f, 0x03, 0x0a, 0x0c, 0x47, 0x69, 0x76, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x61,
	0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x6f, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x47,
	0x69, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6d, 0x64, 0x12, 0x3a,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4f, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x52, 0x45, 0x51, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xdc, 0x01, 0x0a, 0x18, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x4d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x49, 0x5a,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0xf3, 0x01, 0x0a, 0x14, 0x51, 0x75,
	0x63, 0x69, 0x6b, 0x54, 0x61, 0x6b, 0x65, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f,
	0x54, 0x41, 0x4b, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x40, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x10, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x39, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd4, 0x02, 0x0a, 0x16, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x4d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x33,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0e, 0x45, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x6c, 0x6c, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x47, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x69, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x0e,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x47, 0x69, 0x76, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x3a,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4f, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x54, 0x54,
	0x45, 0x52, 0x59, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x47, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x6b, 0x0a,
	0x10, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x10, 0x54,
	0x6f, 0x64, 0x61, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x41, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x4b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x17, 0x45, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x08, 0x72, 0x61, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x13, 0x45, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x48, 0x52, 0x45, 0x45, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b,
	0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0xfb, 0x02, 0x0a, 0x12,
	0x54, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4d,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x17, 0x45, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x44, 0x45, 0x41, 0x4c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x13, 0x45,
	0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x48, 0x52,
	0x45, 0x45, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x05,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x19, 0x42, 0x6f,
	0x6f, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x42,
	0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x97, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x74, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6c,
	0x6f, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x6c,
	0x6c, 0x4c, 0x6f, 0x67, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1a, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x54,
	0x41, 0x4b, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x24,
	0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x2a, 0xb0, 0x07, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a,
	0x1e, 0x42, 0x52, 0x49, 0x45, 0x46, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53,
	0x45, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x59, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x59, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45,
	0x51, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14,
	0x42, 0x55, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10,
	0x14, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10,
	0x16, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10,
	0x17, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x18, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x10, 0x19, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x4f, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x1a, 0x12, 0x18,
	0x0a, 0x14, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x1b, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x44, 0x44, 0x5f,
	0x4e, 0x45, 0x57, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x10, 0x1c, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x10, 0x1d, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x54, 0x46, 0x5f, 0x43, 0x41, 0x4e, 0x5f,
	0x54, 0x41, 0x4b, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x1e, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x49, 0x56, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x1f, 0x12, 0x22,
	0x0a, 0x1e, 0x52, 0x45, 0x51, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x10, 0x20, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x21, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45,
	0x46, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x10, 0x22, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43,
	0x4d, 0x44, 0x10, 0x23, 0x12, 0x1e, 0x0a, 0x1a, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f, 0x54, 0x41,
	0x4b, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x10, 0x24, 0x12, 0x20, 0x0a, 0x1c, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x10, 0x25, 0x12, 0x22, 0x0a, 0x1e, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x26, 0x12, 0x1e, 0x0a, 0x1a, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x27, 0x12, 0x20, 0x0a, 0x1c, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x28, 0x12, 0x1d, 0x0a, 0x19,
	0x42, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x29, 0x12, 0x1c, 0x0a, 0x18, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x2a, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x41, 0x4b,
	0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x2b, 0x2a, 0xee, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x41, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x52, 0x41, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x49, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x41, 0x4e, 0x4b,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x56, 0x5f, 0x49,
	0x4e, 0x43, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x41, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x56, 0x5f, 0x44, 0x45, 0x53, 0x10, 0x04,
	0x12, 0x1b, 0x0a, 0x17, 0x52, 0x41, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x10, 0x05, 0x12, 0x1b, 0x0a,
	0x17, 0x52, 0x41, 0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x41,
	0x4e, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x41, 0x4e,
	0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x10, 0x08, 0x2a, 0xe8, 0x02, 0x0a, 0x09, 0x45, 0x4f, 0x70,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x50, 0x61, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4f,
	0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x72, 0x61, 0x6d, 0x6c, 0x42, 0x75,
	0x79, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x79, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e,
	0x45, 0x4f, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x04,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x10,
	0x05, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x79, 0x42, 0x75, 0x79, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x79, 0x42, 0x75, 0x79, 0x46, 0x61,
	0x69, 0x6c, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x79, 0x42, 0x75, 0x79, 0x69, 0x6e,
	0x67, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x41, 0x75, 0x74, 0x6f, 0x4f, 0x66, 0x66, 0x54, 0x68, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x66,
	0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4f, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x50, 0x61, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4f, 0x70,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x10, 0x0b, 0x2a, 0xeb, 0x01, 0x0a, 0x0b, 0x45, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x43, 0x61, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x47, 0x69, 0x76, 0x65, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x54, 0x6f, 0x6f, 0x6b, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x61, 0x6b, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x54, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x47, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x54, 0x61, 0x6b, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x47, 0x69, 0x76, 0x65, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x54, 0x61, 0x6b, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x47, 0x69, 0x76, 0x65, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x31, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x54, 0x61, 0x6b, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x47, 0x69, 0x76, 0x65, 0x5f, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x5f, 0x32, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x61, 0x6b,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x09, 0x2a, 0x64, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x74, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x5f, 0x4e, 0x6f, 0x6e, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x70, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x74, 0x5f, 0x57, 0x69, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x5f, 0x49, 0x6e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x10, 0x04, 0x2a, 0x33, 0x0a, 0x0e, 0x45, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x50, 0x41,
	0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x50,
	0x41, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x2a, 0x3e, 0x0a, 0x0c,
	0x45, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x74, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x4d, 0x59, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x4e, 0x54, 0x46, 0x5f, 0x4d, 0x59, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x02, 0x2a, 0x44, 0x0a, 0x13,
	0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x41, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45,
	0x10, 0x01, 0x2a, 0x44, 0x0a, 0x10, 0x45, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x46, 0x49, 0x4e, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x4e, 0x10, 0x02, 0x2a, 0x67, 0x0a, 0x10, 0x45, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x46, 0x49,
	0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x55, 0x50, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10,
	0x03,
}

var (
	file_RecordTrade_proto_rawDescOnce sync.Once
	file_RecordTrade_proto_rawDescData = file_RecordTrade_proto_rawDesc
)

func file_RecordTrade_proto_rawDescGZIP() []byte {
	file_RecordTrade_proto_rawDescOnce.Do(func() {
		file_RecordTrade_proto_rawDescData = protoimpl.X.CompressGZIP(file_RecordTrade_proto_rawDescData)
	})
	return file_RecordTrade_proto_rawDescData
}

var file_RecordTrade_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_RecordTrade_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_RecordTrade_proto_goTypes = []interface{}{
	(RecordUserTradeParam)(0),               // 0: Cmd.RecordUserTradeParam
	(RankType)(0),                           // 1: Cmd.RankType
	(EOperType)(0),                          // 2: Cmd.EOperType
	(ETakeStatus)(0),                        // 3: Cmd.ETakeStatus
	(StateType)(0),                          // 4: Cmd.StateType
	(EPanelOperType)(0),                     // 5: Cmd.EPanelOperType
	(EListNtfType)(0),                       // 6: Cmd.EListNtfType
	(ETradeItemQueryType)(0),                // 7: Cmd.ETradeItemQueryType
	(EFinanceDateType)(0),                   // 8: Cmd.EFinanceDateType
	(EFinanceRankType)(0),                   // 9: Cmd.EFinanceRankType
	(*SearchCond)(nil),                      // 10: Cmd.SearchCond
	(*BriefPendingListRecordTradeCmd)(nil),  // 11: Cmd.BriefPendingListRecordTradeCmd
	(*DetailPendingListRecordTradeCmd)(nil), // 12: Cmd.DetailPendingListRecordTradeCmd
	(*BriefBuyInfo)(nil),                    // 13: Cmd.BriefBuyInfo
	(*ItemSellInfoRecordTradeCmd)(nil),      // 14: Cmd.ItemSellInfoRecordTradeCmd
	(*MyPendingListRecordTradeCmd)(nil),     // 15: Cmd.MyPendingListRecordTradeCmd
	(*NameInfo)(nil),                        // 16: Cmd.NameInfo
	(*NameInfoList)(nil),                    // 17: Cmd.NameInfoList
	(*LogItemInfo)(nil),                     // 18: Cmd.LogItemInfo
	(*MyTradeLogRecordTradeCmd)(nil),        // 19: Cmd.MyTradeLogRecordTradeCmd
	(*TakeLogCmd)(nil),                      // 20: Cmd.TakeLogCmd
	(*AddNewLog)(nil),                       // 21: Cmd.AddNewLog
	(*FetchNameInfoCmd)(nil),                // 22: Cmd.FetchNameInfoCmd
	(*ReqServerPriceRecordTradeCmd)(nil),    // 23: Cmd.ReqServerPriceRecordTradeCmd
	(*BuyItemRecordTradeCmd)(nil),           // 24: Cmd.BuyItemRecordTradeCmd
	(*SellItemRecordTradeCmd)(nil),          // 25: Cmd.SellItemRecordTradeCmd
	(*CancelItemRecordTrade)(nil),           // 26: Cmd.CancelItemRecordTrade
	(*ResellPendingRecordTrade)(nil),        // 27: Cmd.ResellPendingRecordTrade
	(*PanelRecordTrade)(nil),                // 28: Cmd.PanelRecordTrade
	(*ListNtfRecordTrade)(nil),              // 29: Cmd.ListNtfRecordTrade
	(*HotItemidRecordTrade)(nil),            // 30: Cmd.HotItemidRecordTrade
	(*NtfCanTakeCountTradeCmd)(nil),         // 31: Cmd.NtfCanTakeCountTradeCmd
	(*GiveTradeCmd)(nil),                    // 32: Cmd.GiveTradeCmd
	(*AcceptTradeCmd)(nil),                  // 33: Cmd.AcceptTradeCmd
	(*RefuseTradeCmd)(nil),                  // 34: Cmd.RefuseTradeCmd
	(*GiveItemInfo)(nil),                    // 35: Cmd.GiveItemInfo
	(*ReqGiveItemInfoCmd)(nil),              // 36: Cmd.ReqGiveItemInfoCmd
	(*CheckPackageSizeTradeCmd)(nil),        // 37: Cmd.CheckPackageSizeTradeCmd
	(*QucikTakeLogTradeCmd)(nil),            // 38: Cmd.QucikTakeLogTradeCmd
	(*ItemCount)(nil),                       // 39: Cmd.ItemCount
	(*QueryItemCountTradeCmd)(nil),          // 40: Cmd.QueryItemCountTradeCmd
	(*LotteryGiveInfo)(nil),                 // 41: Cmd.LotteryGiveInfo
	(*LotteryGiveCmd)(nil),                  // 42: Cmd.LotteryGiveCmd
	(*TodayFinanceItem)(nil),                // 43: Cmd.TodayFinanceItem
	(*TodayFinanceRank)(nil),                // 44: Cmd.TodayFinanceRank
	(*TodayFinanceDetail)(nil),              // 45: Cmd.TodayFinanceDetail
	(*BoothPlayerPendingListCmd)(nil),       // 46: Cmd.BoothPlayerPendingListCmd
	(*UpdateOrderTradeCmd)(nil),             // 47: Cmd.UpdateOrderTradeCmd
	(*TradeInfo)(nil),                       // 48: Cmd.TradeInfo
	(*TakeAllLogCmd)(nil),                   // 49: Cmd.TakeAllLogCmd
	(ETradeType)(0),                         // 50: Cmd.ETradeType
	(Command)(0),                            // 51: Cmd.Command
	(*TradeItemBaseInfo)(nil),               // 52: Cmd.TradeItemBaseInfo
	(*ItemData)(nil),                        // 53: Cmd.ItemData
	(ETRADE_RET_CODE)(0),                    // 54: Cmd.ETRADE_RET_CODE
	(*ItemInfo)(nil),                        // 55: Cmd.ItemInfo
}
var file_RecordTrade_proto_depIdxs = []int32{
	1,   // 0: Cmd.SearchCond.rank_type:type_name -> Cmd.RankType
	50,  // 1: Cmd.SearchCond.trade_type:type_name -> Cmd.ETradeType
	51,  // 2: Cmd.BriefPendingListRecordTradeCmd.cmd:type_name -> Cmd.Command
	0,   // 3: Cmd.BriefPendingListRecordTradeCmd.param:type_name -> Cmd.RecordUserTradeParam
	51,  // 4: Cmd.DetailPendingListRecordTradeCmd.cmd:type_name -> Cmd.Command
	0,   // 5: Cmd.DetailPendingListRecordTradeCmd.param:type_name -> Cmd.RecordUserTradeParam
	10,  // 6: Cmd.DetailPendingListRecordTradeCmd.search_cond:type_name -> Cmd.SearchCond
	52,  // 7: Cmd.DetailPendingListRecordTradeCmd.lists:type_name -> Cmd.TradeItemBaseInfo
	51,  // 8: Cmd.ItemSellInfoRecordTradeCmd.cmd:type_name -> Cmd.Command
	0,   // 9: Cmd.ItemSellInfoRecordTradeCmd.param:type_name -> Cmd.RecordUserTradeParam
	4,   // 10: Cmd.ItemSellInfoRecordTradeCmd.statetype:type_name -> Cmd.StateType
	13,  // 11: Cmd.ItemSellInfoRecordTradeCmd.buy_info:type_name -> Cmd.BriefBuyInfo
	50,  // 12: Cmd.ItemSellInfoRecordTradeCmd.type:type_name -> Cmd.ETradeType
	51,  // 13: Cmd.MyPendingListRecordTradeCmd.cmd:type_name -> Cmd.Command
	0,   // 14: Cmd.MyPendingListRecordTradeCmd.param:type_name -> Cmd.RecordUserTradeParam
	10,  // 15: Cmd.MyPendingListRecordTradeCmd.search_cond:type_name -> Cmd.SearchCond
	52,  // 16: Cmd.MyPendingListRecordTradeCmd.lists:type_name -> Cmd.TradeItemBaseInfo
	16,  // 17: Cmd.NameInfoList.name_infos:type_name -> Cmd.NameInfo
	3,   // 18: Cmd.LogItemInfo.status:type_name -> Cmd.ETakeStatus
	2,   // 19: Cmd.LogItemInfo.logtype:type_name -> Cmd.EOperType
	16,  // 20: Cmd.LogItemInfo.name_info:type_name -> Cmd.NameInfo
	17,  // 21: Cmd.LogItemInfo.name_list:type_name -> Cmd.NameInfoList
	53,  // 22: Cmd.LogItemInfo.itemdata:type_name -> Cmd.ItemData
	50,  // 23: Cmd.LogItemInfo.trade_type:type_name -> Cmd.ETradeType
	51,  // 24: Cmd.MyTradeLogRecordTradeCmd.cmd:type_name -> Cmd.Command
	0,   // 25: Cmd.MyTradeLogRecordTradeCmd.param:type_name -> Cmd.RecordUserTradeParam
	18,  // 26: Cmd.MyTradeLogRecordTradeCmd.log_list:type_name -> Cmd.LogItemInfo
	50,  // 27: Cmd.MyTradeLogRecordTradeCmd.trade_type:type_name -> Cmd.ETradeType
	51,  // 28: Cmd.TakeLogCmd.cmd:type_name -> Cmd.Command
	0,   // 29: Cmd.TakeLogCmd.param:type_name -> Cmd.RecordUserTradeParam
	18,  // 30: Cmd.TakeLogCmd.log:type_name -> Cmd.LogItemInfo
	51,  // 31: Cmd.AddNewLog.cmd:type_name -> Cmd.Command
	0,   // 32: Cmd.AddNewLog.param:type_name -> Cmd.RecordUserTradeParam
	18,  // 33: Cmd.AddNewLog.log:type_name -> Cmd.LogItemInfo
	51,  // 34: Cmd.FetchNameInfoCmd.cmd:type_name -> Cmd.Command
	0,   // 35: Cmd.FetchNameInfoCmd.param:type_name -> Cmd.RecordUserTradeParam
	2,   // 36: Cmd.FetchNameInfoCmd.type:type_name -> Cmd.EOperType
	17,  // 37: Cmd.FetchNameInfoCmd.name_list:type_name -> Cmd.NameInfoList
	51,  // 38: Cmd.ReqServerPriceRecordTradeCmd.cmd:type_name -> Cmd.Command
	0,   // 39: Cmd.ReqServerPriceRecordTradeCmd.param:type_name -> Cmd.RecordUserTradeParam
	53,  // 40: Cmd.ReqServerPriceRecordTradeCmd.itemData:type_name -> Cmd.ItemData
	4,   // 41: Cmd.ReqServerPriceRecordTradeCmd.statetype:type_name -> Cmd.StateType
	50,  // 42: Cmd.ReqServerPriceRecordTradeCmd.trade_type:type_name -> Cmd.ETradeType
	51,  // 43: Cmd.BuyItemRecordTradeCmd.cmd:type_name -> Cmd.Command
	0,   // 44: Cmd.BuyItemRecordTradeCmd.param:type_name -> Cmd.RecordUserTradeParam
	52,  // 45: Cmd.BuyItemRecordTradeCmd.item_info:type_name -> Cmd.TradeItemBaseInfo
	54,  // 46: Cmd.BuyItemRecordTradeCmd.ret:type_name -> Cmd.ETRADE_RET_CODE
	50,  // 47: Cmd.BuyItemRecordTradeCmd.type:type_name -> Cmd.ETradeType
	51,  // 48: Cmd.SellItemRecordTradeCmd.cmd:type_name -> Cmd.Command
	0,   // 49: Cmd.SellItemRecordTradeCmd.param:type_name -> Cmd.RecordUserTradeParam
	52,  // 50: Cmd.SellItemRecordTradeCmd.item_info:type_name -> Cmd.TradeItemBaseInfo
	54,  // 51: Cmd.SellItemRecordTradeCmd.ret:type_name -> Cmd.ETRADE_RET_CODE
	50,  // 52: Cmd.SellItemRecordTradeCmd.type:type_name -> Cmd.ETradeType
	51,  // 53: Cmd.CancelItemRecordTrade.cmd:type_name -> Cmd.Command
	0,   // 54: Cmd.CancelItemRecordTrade.param:type_name -> Cmd.RecordUserTradeParam
	52,  // 55: Cmd.CancelItemRecordTrade.item_info:type_name -> Cmd.TradeItemBaseInfo
	54,  // 56: Cmd.CancelItemRecordTrade.ret:type_name -> Cmd.ETRADE_RET_CODE
	50,  // 57: Cmd.CancelItemRecordTrade.type:type_name -> Cmd.ETradeType
	51,  // 58: Cmd.ResellPendingRecordTrade.cmd:type_name -> Cmd.Command
	0,   // 59: Cmd.ResellPendingRecordTrade.param:type_name -> Cmd.RecordUserTradeParam
	52,  // 60: Cmd.ResellPendingRecordTrade.item_info:type_name -> Cmd.TradeItemBaseInfo
	54,  // 61: Cmd.ResellPendingRecordTrade.ret:type_name -> Cmd.ETRADE_RET_CODE
	50,  // 62: Cmd.ResellPendingRecordTrade.type:type_name -> Cmd.ETradeType
	51,  // 63: Cmd.PanelRecordTrade.cmd:type_name -> Cmd.Command
	0,   // 64: Cmd.PanelRecordTrade.param:type_name -> Cmd.RecordUserTradeParam
	5,   // 65: Cmd.PanelRecordTrade.oper:type_name -> Cmd.EPanelOperType
	50,  // 66: Cmd.PanelRecordTrade.trade_type:type_name -> Cmd.ETradeType
	51,  // 67: Cmd.ListNtfRecordTrade.cmd:type_name -> Cmd.Command
	0,   // 68: Cmd.ListNtfRecordTrade.param:type_name -> Cmd.RecordUserTradeParam
	6,   // 69: Cmd.ListNtfRecordTrade.type:type_name -> Cmd.EListNtfType
	50,  // 70: Cmd.ListNtfRecordTrade.trade_type:type_name -> Cmd.ETradeType
	51,  // 71: Cmd.HotItemidRecordTrade.cmd:type_name -> Cmd.Command
	0,   // 72: Cmd.HotItemidRecordTrade.param:type_name -> Cmd.RecordUserTradeParam
	51,  // 73: Cmd.NtfCanTakeCountTradeCmd.cmd:type_name -> Cmd.Command
	0,   // 74: Cmd.NtfCanTakeCountTradeCmd.param:type_name -> Cmd.RecordUserTradeParam
	50,  // 75: Cmd.NtfCanTakeCountTradeCmd.trade_type:type_name -> Cmd.ETradeType
	51,  // 76: Cmd.GiveTradeCmd.cmd:type_name -> Cmd.Command
	0,   // 77: Cmd.GiveTradeCmd.param:type_name -> Cmd.RecordUserTradeParam
	2,   // 78: Cmd.GiveTradeCmd.logtype:type_name -> Cmd.EOperType
	51,  // 79: Cmd.AcceptTradeCmd.cmd:type_name -> Cmd.Command
	0,   // 80: Cmd.AcceptTradeCmd.param:type_name -> Cmd.RecordUserTradeParam
	51,  // 81: Cmd.RefuseTradeCmd.cmd:type_name -> Cmd.Command
	0,   // 82: Cmd.RefuseTradeCmd.param:type_name -> Cmd.RecordUserTradeParam
	3,   // 83: Cmd.GiveItemInfo.status:type_name -> Cmd.ETakeStatus
	53,  // 84: Cmd.GiveItemInfo.itemdata:type_name -> Cmd.ItemData
	51,  // 85: Cmd.ReqGiveItemInfoCmd.cmd:type_name -> Cmd.Command
	0,   // 86: Cmd.ReqGiveItemInfoCmd.param:type_name -> Cmd.RecordUserTradeParam
	35,  // 87: Cmd.ReqGiveItemInfoCmd.iteminfo:type_name -> Cmd.GiveItemInfo
	51,  // 88: Cmd.CheckPackageSizeTradeCmd.cmd:type_name -> Cmd.Command
	0,   // 89: Cmd.CheckPackageSizeTradeCmd.param:type_name -> Cmd.RecordUserTradeParam
	55,  // 90: Cmd.CheckPackageSizeTradeCmd.items:type_name -> Cmd.ItemInfo
	51,  // 91: Cmd.QucikTakeLogTradeCmd.cmd:type_name -> Cmd.Command
	0,   // 92: Cmd.QucikTakeLogTradeCmd.param:type_name -> Cmd.RecordUserTradeParam
	50,  // 93: Cmd.QucikTakeLogTradeCmd.trade_type:type_name -> Cmd.ETradeType
	51,  // 94: Cmd.QueryItemCountTradeCmd.cmd:type_name -> Cmd.Command
	0,   // 95: Cmd.QueryItemCountTradeCmd.param:type_name -> Cmd.RecordUserTradeParam
	39,  // 96: Cmd.QueryItemCountTradeCmd.items:type_name -> Cmd.ItemCount
	52,  // 97: Cmd.QueryItemCountTradeCmd.res_items:type_name -> Cmd.TradeItemBaseInfo
	7,   // 98: Cmd.QueryItemCountTradeCmd.type:type_name -> Cmd.ETradeItemQueryType
	51,  // 99: Cmd.LotteryGiveCmd.cmd:type_name -> Cmd.Command
	0,   // 100: Cmd.LotteryGiveCmd.param:type_name -> Cmd.RecordUserTradeParam
	41,  // 101: Cmd.LotteryGiveCmd.iteminfo:type_name -> Cmd.LotteryGiveInfo
	51,  // 102: Cmd.TodayFinanceRank.cmd:type_name -> Cmd.Command
	0,   // 103: Cmd.TodayFinanceRank.param:type_name -> Cmd.RecordUserTradeParam
	9,   // 104: Cmd.TodayFinanceRank.rank_type:type_name -> Cmd.EFinanceRankType
	8,   // 105: Cmd.TodayFinanceRank.date_type:type_name -> Cmd.EFinanceDateType
	43,  // 106: Cmd.TodayFinanceRank.lists:type_name -> Cmd.TodayFinanceItem
	51,  // 107: Cmd.TodayFinanceDetail.cmd:type_name -> Cmd.Command
	0,   // 108: Cmd.TodayFinanceDetail.param:type_name -> Cmd.RecordUserTradeParam
	9,   // 109: Cmd.TodayFinanceDetail.rank_type:type_name -> Cmd.EFinanceRankType
	8,   // 110: Cmd.TodayFinanceDetail.date_type:type_name -> Cmd.EFinanceDateType
	43,  // 111: Cmd.TodayFinanceDetail.lists:type_name -> Cmd.TodayFinanceItem
	51,  // 112: Cmd.BoothPlayerPendingListCmd.cmd:type_name -> Cmd.Command
	0,   // 113: Cmd.BoothPlayerPendingListCmd.param:type_name -> Cmd.RecordUserTradeParam
	52,  // 114: Cmd.BoothPlayerPendingListCmd.lists:type_name -> Cmd.TradeItemBaseInfo
	51,  // 115: Cmd.UpdateOrderTradeCmd.cmd:type_name -> Cmd.Command
	0,   // 116: Cmd.UpdateOrderTradeCmd.param:type_name -> Cmd.RecordUserTradeParam
	52,  // 117: Cmd.UpdateOrderTradeCmd.info:type_name -> Cmd.TradeItemBaseInfo
	50,  // 118: Cmd.UpdateOrderTradeCmd.type:type_name -> Cmd.ETradeType
	50,  // 119: Cmd.TradeInfo.tradetype:type_name -> Cmd.ETradeType
	2,   // 120: Cmd.TradeInfo.logtype:type_name -> Cmd.EOperType
	51,  // 121: Cmd.TakeAllLogCmd.cmd:type_name -> Cmd.Command
	0,   // 122: Cmd.TakeAllLogCmd.param:type_name -> Cmd.RecordUserTradeParam
	48,  // 123: Cmd.TakeAllLogCmd.infos:type_name -> Cmd.TradeInfo
	124, // [124:124] is the sub-list for method output_type
	124, // [124:124] is the sub-list for method input_type
	124, // [124:124] is the sub-list for extension type_name
	124, // [124:124] is the sub-list for extension extendee
	0,   // [0:124] is the sub-list for field type_name
}

func init() { file_RecordTrade_proto_init() }
func file_RecordTrade_proto_init() {
	if File_RecordTrade_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	file_SceneItem_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_RecordTrade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BriefPendingListRecordTradeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailPendingListRecordTradeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BriefBuyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemSellInfoRecordTradeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyPendingListRecordTradeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyTradeLogRecordTradeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeLogCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNewLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchNameInfoCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqServerPriceRecordTradeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyItemRecordTradeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellItemRecordTradeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelItemRecordTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResellPendingRecordTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PanelRecordTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNtfRecordTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotItemidRecordTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfCanTakeCountTradeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiveTradeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptTradeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefuseTradeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiveItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGiveItemInfoCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPackageSizeTradeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QucikTakeLogTradeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryItemCountTradeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryGiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryGiveCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TodayFinanceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TodayFinanceRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TodayFinanceDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoothPlayerPendingListCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderTradeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RecordTrade_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeAllLogCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RecordTrade_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_RecordTrade_proto_goTypes,
		DependencyIndexes: file_RecordTrade_proto_depIdxs,
		EnumInfos:         file_RecordTrade_proto_enumTypes,
		MessageInfos:      file_RecordTrade_proto_msgTypes,
	}.Build()
	File_RecordTrade_proto = out.File
	file_RecordTrade_proto_rawDesc = nil
	file_RecordTrade_proto_goTypes = nil
	file_RecordTrade_proto_depIdxs = nil
}
