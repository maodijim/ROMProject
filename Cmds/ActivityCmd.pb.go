// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: ActivityCmd.proto

package Cmd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActivityParam int32

const (
	ActivityParam_ACTIVITYPARAM_ACT_START           ActivityParam = 1
	ActivityParam_ACTIVITYPARAM_BCAT_UFOPOS         ActivityParam = 2
	ActivityParam_ACTIVITYPARAM_PROGRESS_NTF        ActivityParam = 3
	ActivityParam_ACTIVITYPARAM_ACT_STOP            ActivityParam = 4
	ActivityParam_ACTIVITYPARAM_GLOBAL_ACT_START    ActivityParam = 5
	ActivityParam_ACTIVITYPARAM_PROGRESS_EXCEPT_NTF ActivityParam = 6
)

// Enum value maps for ActivityParam.
var (
	ActivityParam_name = map[int32]string{
		1: "ACTIVITYPARAM_ACT_START",
		2: "ACTIVITYPARAM_BCAT_UFOPOS",
		3: "ACTIVITYPARAM_PROGRESS_NTF",
		4: "ACTIVITYPARAM_ACT_STOP",
		5: "ACTIVITYPARAM_GLOBAL_ACT_START",
		6: "ACTIVITYPARAM_PROGRESS_EXCEPT_NTF",
	}
	ActivityParam_value = map[string]int32{
		"ACTIVITYPARAM_ACT_START":           1,
		"ACTIVITYPARAM_BCAT_UFOPOS":         2,
		"ACTIVITYPARAM_PROGRESS_NTF":        3,
		"ACTIVITYPARAM_ACT_STOP":            4,
		"ACTIVITYPARAM_GLOBAL_ACT_START":    5,
		"ACTIVITYPARAM_PROGRESS_EXCEPT_NTF": 6,
	}
)

func (x ActivityParam) Enum() *ActivityParam {
	p := new(ActivityParam)
	*p = x
	return p
}

func (x ActivityParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityParam) Descriptor() protoreflect.EnumDescriptor {
	return file_ActivityCmd_proto_enumTypes[0].Descriptor()
}

func (ActivityParam) Type() protoreflect.EnumType {
	return &file_ActivityCmd_proto_enumTypes[0]
}

func (x ActivityParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActivityParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActivityParam(num)
	return nil
}

// Deprecated: Use ActivityParam.Descriptor instead.
func (ActivityParam) EnumDescriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{0}
}

type GlobalActivityType int32

const (
	GlobalActivityType_GACTIVITY_MIN                          GlobalActivityType = 0
	GlobalActivityType_GACTIVITY_AUGURY                       GlobalActivityType = 14
	GlobalActivityType_GACTIVITY_GUILD_QUEST                  GlobalActivityType = 15
	GlobalActivityType_GACTIVITY_GUILD_DONATE                 GlobalActivityType = 16
	GlobalActivityType_GACTIVITY_GUILD_FUBEN                  GlobalActivityType = 17
	GlobalActivityType_GACTIVITY_NOVICE_WELFARE               GlobalActivityType = 18
	GlobalActivityType_GACTIVITY_NORMAL_REFINE                GlobalActivityType = 20
	GlobalActivityType_GACTIVITY_SAFE_REFINE                  GlobalActivityType = 21
	GlobalActivityType_GACTIVITY_SAFE_REFINE_DISCOUNT         GlobalActivityType = 22
	GlobalActivityType_GACTIVITY_RECALL                       GlobalActivityType = 23
	GlobalActivityType_GACTIVITY_SPRING_LOTTERY               GlobalActivityType = 24
	GlobalActivityType_GACTIVITY_WEDDING_SERVICE              GlobalActivityType = 26
	GlobalActivityType_GACTIVITY_FOOD_RECIPE                  GlobalActivityType = 27
	GlobalActivityType_GACTIVITY_COUNT_DOWN                   GlobalActivityType = 28
	GlobalActivityType_GACTIVITY_CHARGE_EXTRA_REWARD          GlobalActivityType = 30
	GlobalActivityType_GACTIVITY_CHARGE_DISCOUNT              GlobalActivityType = 31
	GlobalActivityType_GACTIVITY_CHARGE_EXTRA_COUNT           GlobalActivityType = 32
	GlobalActivityType_GACTIVITY_BARRAGE_FRAME_FREE           GlobalActivityType = 33
	GlobalActivityType_GACTIVITY_IMAGE_RAID                   GlobalActivityType = 34
	GlobalActivityType_GACTIVITY_TEAM_GROUP                   GlobalActivityType = 51
	GlobalActivityType_GACTIVITY_WORLD_LABEL                  GlobalActivityType = 60
	GlobalActivityType_GACTIVITY_RIDE_LOTTERY                 GlobalActivityType = 70
	GlobalActivityType_GACTIVITY_EASTROLOGYTYPE_CONSTELLATION GlobalActivityType = 80
	GlobalActivityType_GACTIVITY_EASTROLOGYTYPE_ACTIVITY      GlobalActivityType = 81
	GlobalActivityType_GACTIVITY_RECALL_PRIVILEGE             GlobalActivityType = 82
	GlobalActivityType_GACTIVITY_KUMAMOTO_BEAR                GlobalActivityType = 90
	GlobalActivityType_GACTIVITY_ALTMAN                       GlobalActivityType = 101
	GlobalActivityType_GACTIVITY_THANKSGIVING                 GlobalActivityType = 102
	GlobalActivityType_GACTIVITY_SPRING_RAID                  GlobalActivityType = 103
	GlobalActivityType_GACTIVITY_EXTRACT_DISCOUNT             GlobalActivityType = 110
	GlobalActivityType_GACTIVITY_PAY_SIGN                     GlobalActivityType = 120
	GlobalActivityType_GACTIVITY_MENROCO                      GlobalActivityType = 1001
	GlobalActivityType_GACTIVITY_HITPOLLY                     GlobalActivityType = 1003
	GlobalActivityType_GACTIVITY_LINKCHARACTER                GlobalActivityType = 1004
	GlobalActivityType_GACTIVITY_PUZZLE                       GlobalActivityType = 1005
	GlobalActivityType_GACTIVITY_BIFROST                      GlobalActivityType = 1006
	GlobalActivityType_GACTIVITY_GUILD_SCORE_RANK             GlobalActivityType = 1007
	GlobalActivityType_GACTIVITY_PUZZLE_2                     GlobalActivityType = 1008
	GlobalActivityType_GACTIVITY_PUZZLE_3                     GlobalActivityType = 1009
	GlobalActivityType_GACTIVITY_PUZZLE_4                     GlobalActivityType = 1010
	GlobalActivityType_GACTIVITY_HEIMDALLR_EYE                GlobalActivityType = 1012
	GlobalActivityType_GACTIVITY_GROUPON                      GlobalActivityType = 1014
	GlobalActivityType_GACTIVITY_MAX                          GlobalActivityType = 1015
)

// Enum value maps for GlobalActivityType.
var (
	GlobalActivityType_name = map[int32]string{
		0:    "GACTIVITY_MIN",
		14:   "GACTIVITY_AUGURY",
		15:   "GACTIVITY_GUILD_QUEST",
		16:   "GACTIVITY_GUILD_DONATE",
		17:   "GACTIVITY_GUILD_FUBEN",
		18:   "GACTIVITY_NOVICE_WELFARE",
		20:   "GACTIVITY_NORMAL_REFINE",
		21:   "GACTIVITY_SAFE_REFINE",
		22:   "GACTIVITY_SAFE_REFINE_DISCOUNT",
		23:   "GACTIVITY_RECALL",
		24:   "GACTIVITY_SPRING_LOTTERY",
		26:   "GACTIVITY_WEDDING_SERVICE",
		27:   "GACTIVITY_FOOD_RECIPE",
		28:   "GACTIVITY_COUNT_DOWN",
		30:   "GACTIVITY_CHARGE_EXTRA_REWARD",
		31:   "GACTIVITY_CHARGE_DISCOUNT",
		32:   "GACTIVITY_CHARGE_EXTRA_COUNT",
		33:   "GACTIVITY_BARRAGE_FRAME_FREE",
		34:   "GACTIVITY_IMAGE_RAID",
		51:   "GACTIVITY_TEAM_GROUP",
		60:   "GACTIVITY_WORLD_LABEL",
		70:   "GACTIVITY_RIDE_LOTTERY",
		80:   "GACTIVITY_EASTROLOGYTYPE_CONSTELLATION",
		81:   "GACTIVITY_EASTROLOGYTYPE_ACTIVITY",
		82:   "GACTIVITY_RECALL_PRIVILEGE",
		90:   "GACTIVITY_KUMAMOTO_BEAR",
		101:  "GACTIVITY_ALTMAN",
		102:  "GACTIVITY_THANKSGIVING",
		103:  "GACTIVITY_SPRING_RAID",
		110:  "GACTIVITY_EXTRACT_DISCOUNT",
		120:  "GACTIVITY_PAY_SIGN",
		1001: "GACTIVITY_MENROCO",
		1003: "GACTIVITY_HITPOLLY",
		1004: "GACTIVITY_LINKCHARACTER",
		1005: "GACTIVITY_PUZZLE",
		1006: "GACTIVITY_BIFROST",
		1007: "GACTIVITY_GUILD_SCORE_RANK",
		1008: "GACTIVITY_PUZZLE_2",
		1009: "GACTIVITY_PUZZLE_3",
		1010: "GACTIVITY_PUZZLE_4",
		1012: "GACTIVITY_HEIMDALLR_EYE",
		1014: "GACTIVITY_GROUPON",
		1015: "GACTIVITY_MAX",
	}
	GlobalActivityType_value = map[string]int32{
		"GACTIVITY_MIN":                          0,
		"GACTIVITY_AUGURY":                       14,
		"GACTIVITY_GUILD_QUEST":                  15,
		"GACTIVITY_GUILD_DONATE":                 16,
		"GACTIVITY_GUILD_FUBEN":                  17,
		"GACTIVITY_NOVICE_WELFARE":               18,
		"GACTIVITY_NORMAL_REFINE":                20,
		"GACTIVITY_SAFE_REFINE":                  21,
		"GACTIVITY_SAFE_REFINE_DISCOUNT":         22,
		"GACTIVITY_RECALL":                       23,
		"GACTIVITY_SPRING_LOTTERY":               24,
		"GACTIVITY_WEDDING_SERVICE":              26,
		"GACTIVITY_FOOD_RECIPE":                  27,
		"GACTIVITY_COUNT_DOWN":                   28,
		"GACTIVITY_CHARGE_EXTRA_REWARD":          30,
		"GACTIVITY_CHARGE_DISCOUNT":              31,
		"GACTIVITY_CHARGE_EXTRA_COUNT":           32,
		"GACTIVITY_BARRAGE_FRAME_FREE":           33,
		"GACTIVITY_IMAGE_RAID":                   34,
		"GACTIVITY_TEAM_GROUP":                   51,
		"GACTIVITY_WORLD_LABEL":                  60,
		"GACTIVITY_RIDE_LOTTERY":                 70,
		"GACTIVITY_EASTROLOGYTYPE_CONSTELLATION": 80,
		"GACTIVITY_EASTROLOGYTYPE_ACTIVITY":      81,
		"GACTIVITY_RECALL_PRIVILEGE":             82,
		"GACTIVITY_KUMAMOTO_BEAR":                90,
		"GACTIVITY_ALTMAN":                       101,
		"GACTIVITY_THANKSGIVING":                 102,
		"GACTIVITY_SPRING_RAID":                  103,
		"GACTIVITY_EXTRACT_DISCOUNT":             110,
		"GACTIVITY_PAY_SIGN":                     120,
		"GACTIVITY_MENROCO":                      1001,
		"GACTIVITY_HITPOLLY":                     1003,
		"GACTIVITY_LINKCHARACTER":                1004,
		"GACTIVITY_PUZZLE":                       1005,
		"GACTIVITY_BIFROST":                      1006,
		"GACTIVITY_GUILD_SCORE_RANK":             1007,
		"GACTIVITY_PUZZLE_2":                     1008,
		"GACTIVITY_PUZZLE_3":                     1009,
		"GACTIVITY_PUZZLE_4":                     1010,
		"GACTIVITY_HEIMDALLR_EYE":                1012,
		"GACTIVITY_GROUPON":                      1014,
		"GACTIVITY_MAX":                          1015,
	}
)

func (x GlobalActivityType) Enum() *GlobalActivityType {
	p := new(GlobalActivityType)
	*p = x
	return p
}

func (x GlobalActivityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GlobalActivityType) Descriptor() protoreflect.EnumDescriptor {
	return file_ActivityCmd_proto_enumTypes[1].Descriptor()
}

func (GlobalActivityType) Type() protoreflect.EnumType {
	return &file_ActivityCmd_proto_enumTypes[1]
}

func (x GlobalActivityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GlobalActivityType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GlobalActivityType(num)
	return nil
}

// Deprecated: Use GlobalActivityType.Descriptor instead.
func (GlobalActivityType) EnumDescriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{1}
}

type EActProgress int32

const (
	EActProgress_EACTPROGRESS_NONE    EActProgress = 0
	EActProgress_EACTPROGRESS_1       EActProgress = 1
	EActProgress_EACTPROGRESS_2       EActProgress = 2
	EActProgress_EACTPROGRESS_3       EActProgress = 3
	EActProgress_EACTPROGRESS_4       EActProgress = 4
	EActProgress_EACTPROGRESS_5       EActProgress = 5
	EActProgress_EACTPROGRESS_6       EActProgress = 6
	EActProgress_EACTPROGRESS_7       EActProgress = 7
	EActProgress_EACTPROGRESS_FAIL    EActProgress = 100
	EActProgress_EACTPROGRESS_SUCCESS EActProgress = 101
)

// Enum value maps for EActProgress.
var (
	EActProgress_name = map[int32]string{
		0:   "EACTPROGRESS_NONE",
		1:   "EACTPROGRESS_1",
		2:   "EACTPROGRESS_2",
		3:   "EACTPROGRESS_3",
		4:   "EACTPROGRESS_4",
		5:   "EACTPROGRESS_5",
		6:   "EACTPROGRESS_6",
		7:   "EACTPROGRESS_7",
		100: "EACTPROGRESS_FAIL",
		101: "EACTPROGRESS_SUCCESS",
	}
	EActProgress_value = map[string]int32{
		"EACTPROGRESS_NONE":    0,
		"EACTPROGRESS_1":       1,
		"EACTPROGRESS_2":       2,
		"EACTPROGRESS_3":       3,
		"EACTPROGRESS_4":       4,
		"EACTPROGRESS_5":       5,
		"EACTPROGRESS_6":       6,
		"EACTPROGRESS_7":       7,
		"EACTPROGRESS_FAIL":    100,
		"EACTPROGRESS_SUCCESS": 101,
	}
)

func (x EActProgress) Enum() *EActProgress {
	p := new(EActProgress)
	*p = x
	return p
}

func (x EActProgress) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EActProgress) Descriptor() protoreflect.EnumDescriptor {
	return file_ActivityCmd_proto_enumTypes[2].Descriptor()
}

func (EActProgress) Type() protoreflect.EnumType {
	return &file_ActivityCmd_proto_enumTypes[2]
}

func (x EActProgress) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EActProgress) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EActProgress(num)
	return nil
}

// Deprecated: Use EActProgress.Descriptor instead.
func (EActProgress) EnumDescriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{2}
}

type StartActCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param     *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=1" json:"param,omitempty"`
	Id        *uint32        `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Mapid     *uint32        `protobuf:"varint,4,opt,name=mapid,def=0" json:"mapid,omitempty"`
	Starttime *uint32        `protobuf:"varint,5,opt,name=starttime,def=0" json:"starttime,omitempty"`
	Endtime   *uint32        `protobuf:"varint,6,opt,name=endtime,def=0" json:"endtime,omitempty"`
	Path      *uint32        `protobuf:"varint,7,opt,name=path" json:"path,omitempty"`
	Unshowmap []uint32       `protobuf:"varint,8,rep,name=unshowmap" json:"unshowmap,omitempty"`
}

// Default values for StartActCmd fields.
const (
	Default_StartActCmd_Cmd       = Command_ACTIVITY_PROTOCMD
	Default_StartActCmd_Param     = ActivityParam_ACTIVITYPARAM_ACT_START
	Default_StartActCmd_Mapid     = uint32(0)
	Default_StartActCmd_Starttime = uint32(0)
	Default_StartActCmd_Endtime   = uint32(0)
)

func (x *StartActCmd) Reset() {
	*x = StartActCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartActCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartActCmd) ProtoMessage() {}

func (x *StartActCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartActCmd.ProtoReflect.Descriptor instead.
func (*StartActCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{0}
}

func (x *StartActCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StartActCmd_Cmd
}

func (x *StartActCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StartActCmd_Param
}

func (x *StartActCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *StartActCmd) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_StartActCmd_Mapid
}

func (x *StartActCmd) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return Default_StartActCmd_Starttime
}

func (x *StartActCmd) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return Default_StartActCmd_Endtime
}

func (x *StartActCmd) GetPath() uint32 {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return 0
}

func (x *StartActCmd) GetUnshowmap() []uint32 {
	if x != nil {
		return x.Unshowmap
	}
	return nil
}

type StopActCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=4" json:"param,omitempty"`
	Id    *uint32        `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

// Default values for StopActCmd fields.
const (
	Default_StopActCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_StopActCmd_Param = ActivityParam_ACTIVITYPARAM_ACT_STOP
)

func (x *StopActCmd) Reset() {
	*x = StopActCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopActCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopActCmd) ProtoMessage() {}

func (x *StopActCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopActCmd.ProtoReflect.Descriptor instead.
func (*StopActCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{1}
}

func (x *StopActCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StopActCmd_Cmd
}

func (x *StopActCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StopActCmd_Param
}

func (x *StopActCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type BCatUFOPosActCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=2" json:"param,omitempty"`
	Pos   *ScenePos      `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
}

// Default values for BCatUFOPosActCmd fields.
const (
	Default_BCatUFOPosActCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_BCatUFOPosActCmd_Param = ActivityParam_ACTIVITYPARAM_BCAT_UFOPOS
)

func (x *BCatUFOPosActCmd) Reset() {
	*x = BCatUFOPosActCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BCatUFOPosActCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BCatUFOPosActCmd) ProtoMessage() {}

func (x *BCatUFOPosActCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BCatUFOPosActCmd.ProtoReflect.Descriptor instead.
func (*BCatUFOPosActCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{2}
}

func (x *BCatUFOPosActCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BCatUFOPosActCmd_Cmd
}

func (x *BCatUFOPosActCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BCatUFOPosActCmd_Param
}

func (x *BCatUFOPosActCmd) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

type ActProgressNtfCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param     *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=3" json:"param,omitempty"`
	Id        *uint32        `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Progress  *EActProgress  `protobuf:"varint,4,opt,name=progress,enum=Cmd.EActProgress" json:"progress,omitempty"`
	Endtime   *uint32        `protobuf:"varint,5,opt,name=endtime" json:"endtime,omitempty"`
	Starttime *uint32        `protobuf:"varint,6,opt,name=starttime" json:"starttime,omitempty"`
}

// Default values for ActProgressNtfCmd fields.
const (
	Default_ActProgressNtfCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_ActProgressNtfCmd_Param = ActivityParam_ACTIVITYPARAM_PROGRESS_NTF
)

func (x *ActProgressNtfCmd) Reset() {
	*x = ActProgressNtfCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActProgressNtfCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActProgressNtfCmd) ProtoMessage() {}

func (x *ActProgressNtfCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActProgressNtfCmd.ProtoReflect.Descriptor instead.
func (*ActProgressNtfCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{3}
}

func (x *ActProgressNtfCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ActProgressNtfCmd_Cmd
}

func (x *ActProgressNtfCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ActProgressNtfCmd_Param
}

func (x *ActProgressNtfCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ActProgressNtfCmd) GetProgress() EActProgress {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return EActProgress_EACTPROGRESS_NONE
}

func (x *ActProgressNtfCmd) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

func (x *ActProgressNtfCmd) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

type StartGlobalActCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param     *ActivityParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=5" json:"param,omitempty"`
	Id        *uint32             `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Type      *GlobalActivityType `protobuf:"varint,4,opt,name=type,enum=Cmd.GlobalActivityType" json:"type,omitempty"`
	Params    []uint32            `protobuf:"varint,5,rep,name=params" json:"params,omitempty"`
	Starttime *uint32             `protobuf:"varint,6,opt,name=starttime" json:"starttime,omitempty"`
	Endtime   *uint32             `protobuf:"varint,7,opt,name=endtime" json:"endtime,omitempty"`
	Open      *bool               `protobuf:"varint,8,opt,name=open" json:"open,omitempty"`
	Count     *uint32             `protobuf:"varint,9,opt,name=count" json:"count,omitempty"`
}

// Default values for StartGlobalActCmd fields.
const (
	Default_StartGlobalActCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_StartGlobalActCmd_Param = ActivityParam_ACTIVITYPARAM_GLOBAL_ACT_START
)

func (x *StartGlobalActCmd) Reset() {
	*x = StartGlobalActCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartGlobalActCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartGlobalActCmd) ProtoMessage() {}

func (x *StartGlobalActCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartGlobalActCmd.ProtoReflect.Descriptor instead.
func (*StartGlobalActCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{4}
}

func (x *StartGlobalActCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StartGlobalActCmd_Cmd
}

func (x *StartGlobalActCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StartGlobalActCmd_Param
}

func (x *StartGlobalActCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *StartGlobalActCmd) GetType() GlobalActivityType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return GlobalActivityType_GACTIVITY_MIN
}

func (x *StartGlobalActCmd) GetParams() []uint32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *StartGlobalActCmd) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

func (x *StartGlobalActCmd) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

func (x *StartGlobalActCmd) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return false
}

func (x *StartGlobalActCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type ActivityProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actid     *uint32 `protobuf:"varint,1,opt,name=actid" json:"actid,omitempty"`
	Progress  *uint32 `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
	Starttime *uint32 `protobuf:"varint,3,opt,name=starttime" json:"starttime,omitempty"`
	Endtime   *uint32 `protobuf:"varint,4,opt,name=endtime" json:"endtime,omitempty"`
}

func (x *ActivityProgress) Reset() {
	*x = ActivityProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityProgress) ProtoMessage() {}

func (x *ActivityProgress) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityProgress.ProtoReflect.Descriptor instead.
func (*ActivityProgress) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{5}
}

func (x *ActivityProgress) GetActid() uint32 {
	if x != nil && x.Actid != nil {
		return *x.Actid
	}
	return 0
}

func (x *ActivityProgress) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *ActivityProgress) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

func (x *ActivityProgress) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

type ActProgressExceptNtfCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=6" json:"param,omitempty"`
	Ids   []uint32       `protobuf:"varint,3,rep,name=ids" json:"ids,omitempty"`
}

// Default values for ActProgressExceptNtfCmd fields.
const (
	Default_ActProgressExceptNtfCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_ActProgressExceptNtfCmd_Param = ActivityParam_ACTIVITYPARAM_PROGRESS_EXCEPT_NTF
)

func (x *ActProgressExceptNtfCmd) Reset() {
	*x = ActProgressExceptNtfCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActProgressExceptNtfCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActProgressExceptNtfCmd) ProtoMessage() {}

func (x *ActProgressExceptNtfCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActProgressExceptNtfCmd.ProtoReflect.Descriptor instead.
func (*ActProgressExceptNtfCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{6}
}

func (x *ActProgressExceptNtfCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ActProgressExceptNtfCmd_Cmd
}

func (x *ActProgressExceptNtfCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ActProgressExceptNtfCmd_Param
}

func (x *ActProgressExceptNtfCmd) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_ActivityCmd_proto protoreflect.FileDescriptor

var file_ActivityCmd_proto_rawDesc = []byte{
	0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x63, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x73, 0x68,
	0x6f, 0x77, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e, 0x73,
	0x68, 0x6f, 0x77, 0x6d, 0x61, 0x70, 0x22, 0x91, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x41,
	0x63, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x10, 0x42,
	0x43, 0x61, 0x74, 0x55, 0x46, 0x4f, 0x50, 0x6f, 0x73, 0x41, 0x63, 0x74, 0x43, 0x6d, 0x64, 0x12,
	0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x43, 0x41, 0x54, 0x5f, 0x55, 0x46, 0x4f, 0x50, 0x4f, 0x53,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x11, 0x41, 0x63, 0x74,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x74, 0x66, 0x43, 0x6d, 0x64, 0x12, 0x31,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x54, 0x46,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x41, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc7,
	0x02, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x63,
	0x74, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7c, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x63, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x63, 0x74,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x74, 0x66, 0x43,
	0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x2a, 0xd2, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x43, 0x41, 0x54, 0x5f, 0x55, 0x46, 0x4f, 0x50, 0x4f, 0x53,
	0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x54, 0x46,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x04, 0x12, 0x22,
	0x0a, 0x1e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x50, 0x54, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x06, 0x2a, 0xcb, 0x09, 0x0a, 0x12, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x10,
	0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x47,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x57, 0x45, 0x4c, 0x46, 0x41, 0x52, 0x45, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x52, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10,
	0x15, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x41, 0x46, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x17, 0x12, 0x1c, 0x0a, 0x18, 0x47,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x50, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x18, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x1a, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x50,
	0x45, 0x10, 0x1b, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x1c, 0x12, 0x21, 0x0a,
	0x1d, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47,
	0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x1e,
	0x12, 0x1d, 0x0a, 0x19, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x48,
	0x41, 0x52, 0x47, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x1f, 0x12,
	0x20, 0x0a, 0x1c, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x48, 0x41,
	0x52, 0x47, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x20, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x42,
	0x41, 0x52, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x52, 0x45,
	0x45, 0x10, 0x21, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x10, 0x22, 0x12, 0x18, 0x0a,
	0x14, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x33, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x10, 0x3c, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x49, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x46, 0x12, 0x2a,
	0x0a, 0x26, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x41, 0x53, 0x54,
	0x52, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54,
	0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x50, 0x12, 0x25, 0x0a, 0x21, 0x47, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x4c, 0x4f,
	0x47, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10,
	0x51, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52,
	0x45, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x10,
	0x52, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4b,
	0x55, 0x4d, 0x41, 0x4d, 0x4f, 0x54, 0x4f, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x10, 0x5a, 0x12, 0x14,
	0x0a, 0x10, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x54, 0x4d,
	0x41, 0x4e, 0x10, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x4b, 0x53, 0x47, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x66,
	0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x50,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x10, 0x67, 0x12, 0x1e, 0x0a, 0x1a, 0x47,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x47,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x10, 0x78, 0x12, 0x16, 0x0a, 0x11, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x45, 0x4e, 0x52, 0x4f, 0x43, 0x4f, 0x10, 0xe9, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x47,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x54, 0x50, 0x4f, 0x4c, 0x4c,
	0x59, 0x10, 0xeb, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x10,
	0xec, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x10, 0xed, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x47, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x49, 0x46, 0x52, 0x4f, 0x53, 0x54, 0x10, 0xee,
	0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10,
	0xef, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x32, 0x10, 0xf0, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x47,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f,
	0x33, 0x10, 0xf1, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x34, 0x10, 0xf2, 0x07, 0x12, 0x1c, 0x0a,
	0x17, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x45, 0x49, 0x4d, 0x44,
	0x41, 0x4c, 0x4c, 0x52, 0x5f, 0x45, 0x59, 0x45, 0x10, 0xf4, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x47,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4f, 0x4e,
	0x10, 0xf6, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0xf7, 0x07, 0x2a, 0xe2, 0x01, 0x0a, 0x0c, 0x45, 0x41, 0x63, 0x74,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x41, 0x43, 0x54,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x41, 0x43, 0x54, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x31, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x41, 0x43, 0x54, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x41, 0x43, 0x54, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x41, 0x43, 0x54, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x34, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x41, 0x43, 0x54, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x35, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x41, 0x43, 0x54, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x36, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x41, 0x43, 0x54, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x41, 0x43, 0x54, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x10, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x41, 0x43, 0x54, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x65,
}

var (
	file_ActivityCmd_proto_rawDescOnce sync.Once
	file_ActivityCmd_proto_rawDescData = file_ActivityCmd_proto_rawDesc
)

func file_ActivityCmd_proto_rawDescGZIP() []byte {
	file_ActivityCmd_proto_rawDescOnce.Do(func() {
		file_ActivityCmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_ActivityCmd_proto_rawDescData)
	})
	return file_ActivityCmd_proto_rawDescData
}

var file_ActivityCmd_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ActivityCmd_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_ActivityCmd_proto_goTypes = []interface{}{
	(ActivityParam)(0),              // 0: Cmd.ActivityParam
	(GlobalActivityType)(0),         // 1: Cmd.GlobalActivityType
	(EActProgress)(0),               // 2: Cmd.EActProgress
	(*StartActCmd)(nil),             // 3: Cmd.StartActCmd
	(*StopActCmd)(nil),              // 4: Cmd.StopActCmd
	(*BCatUFOPosActCmd)(nil),        // 5: Cmd.BCatUFOPosActCmd
	(*ActProgressNtfCmd)(nil),       // 6: Cmd.ActProgressNtfCmd
	(*StartGlobalActCmd)(nil),       // 7: Cmd.StartGlobalActCmd
	(*ActivityProgress)(nil),        // 8: Cmd.ActivityProgress
	(*ActProgressExceptNtfCmd)(nil), // 9: Cmd.ActProgressExceptNtfCmd
	(Command)(0),                    // 10: Cmd.Command
	(*ScenePos)(nil),                // 11: Cmd.ScenePos
}
var file_ActivityCmd_proto_depIdxs = []int32{
	10, // 0: Cmd.StartActCmd.cmd:type_name -> Cmd.Command
	0,  // 1: Cmd.StartActCmd.param:type_name -> Cmd.ActivityParam
	10, // 2: Cmd.StopActCmd.cmd:type_name -> Cmd.Command
	0,  // 3: Cmd.StopActCmd.param:type_name -> Cmd.ActivityParam
	10, // 4: Cmd.BCatUFOPosActCmd.cmd:type_name -> Cmd.Command
	0,  // 5: Cmd.BCatUFOPosActCmd.param:type_name -> Cmd.ActivityParam
	11, // 6: Cmd.BCatUFOPosActCmd.pos:type_name -> Cmd.ScenePos
	10, // 7: Cmd.ActProgressNtfCmd.cmd:type_name -> Cmd.Command
	0,  // 8: Cmd.ActProgressNtfCmd.param:type_name -> Cmd.ActivityParam
	2,  // 9: Cmd.ActProgressNtfCmd.progress:type_name -> Cmd.EActProgress
	10, // 10: Cmd.StartGlobalActCmd.cmd:type_name -> Cmd.Command
	0,  // 11: Cmd.StartGlobalActCmd.param:type_name -> Cmd.ActivityParam
	1,  // 12: Cmd.StartGlobalActCmd.type:type_name -> Cmd.GlobalActivityType
	10, // 13: Cmd.ActProgressExceptNtfCmd.cmd:type_name -> Cmd.Command
	0,  // 14: Cmd.ActProgressExceptNtfCmd.param:type_name -> Cmd.ActivityParam
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_ActivityCmd_proto_init() }
func file_ActivityCmd_proto_init() {
	if File_ActivityCmd_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ActivityCmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartActCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopActCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BCatUFOPosActCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActProgressNtfCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartGlobalActCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActProgressExceptNtfCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ActivityCmd_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ActivityCmd_proto_goTypes,
		DependencyIndexes: file_ActivityCmd_proto_depIdxs,
		EnumInfos:         file_ActivityCmd_proto_enumTypes,
		MessageInfos:      file_ActivityCmd_proto_msgTypes,
	}.Build()
	File_ActivityCmd_proto = out.File
	file_ActivityCmd_proto_rawDesc = nil
	file_ActivityCmd_proto_goTypes = nil
	file_ActivityCmd_proto_depIdxs = nil
}
