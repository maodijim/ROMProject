// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: ActivityCmd.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ActivityParam int32

const (
	ActivityParam_ACTIVITYPARAM_ACT_START                      ActivityParam = 1
	ActivityParam_ACTIVITYPARAM_BCAT_UFOPOS                    ActivityParam = 2
	ActivityParam_ACTIVITYPARAM_PROGRESS_NTF                   ActivityParam = 3
	ActivityParam_ACTIVITYPARAM_ACT_STOP                       ActivityParam = 4
	ActivityParam_ACTIVITYPARAM_GLOBAL_ACT_START               ActivityParam = 5
	ActivityParam_ACTIVITYPARAM_PROGRESS_EXCEPT_NTF            ActivityParam = 6
	ActivityParam_ACTIVITYPARAM_TIMELIMIT_SHOPPAGE             ActivityParam = 7
	ActivityParam_ACTIVITYPARAM_ANIMATION_LOGIN                ActivityParam = 8
	ActivityParam_ACTIVITYPARAM_GLOBAL_DONATIONACTIVITY_INFO   ActivityParam = 9
	ActivityParam_ACTIVITYPARAM_GLOBAL_DONATIONACTIVITY_DONATE ActivityParam = 10
	ActivityParam_ACTIVITYPARAM_GLOBAL_DONATIONACTIVITY_AWARD  ActivityParam = 11
	ActivityParam_ACTIVITYPARAM_USERINVITE_INFO                ActivityParam = 12
	ActivityParam_ACTIVITYPARAM_USERINVITE_BIND_USER           ActivityParam = 13
	ActivityParam_ACTIVITYPARAM_USERINVITE_INVITE_AWARD        ActivityParam = 14
	ActivityParam_ACTIVITYPARAM_USERINVITE_SHARE_AWARD         ActivityParam = 15
	ActivityParam_ACTIVITYPARAM_USERINVITE_INVITE_LOGIN_AWARD  ActivityParam = 16
	ActivityParam_ACTIVITYPARAM_USERINVITE_RECALL_LOGIN_AWARD  ActivityParam = 17
	ActivityParam_ACTIVITYPARAM_USERRETURN_INFO                ActivityParam = 18
	ActivityParam_ACTIVITYPARAM_USERRETURN_QUEST_AWARD         ActivityParam = 19
	ActivityParam_ACTIVITYPARAM_USERRETURN_QUEST_ADD           ActivityParam = 20
	ActivityParam_ACTIVITYPARAM_USERRETURN_ENTER_CHATROOM      ActivityParam = 21
	ActivityParam_ACTIVITYPARAM_USERRETURN_LEAVE_CHATROOM      ActivityParam = 22
	ActivityParam_ACTIVITYPARAM_USERRETURN_LOGINAWARD          ActivityParam = 23
	ActivityParam_ACTIVITYPARAM_USERRETURN_CHATRECORD          ActivityParam = 24
	ActivityParam_ACTIVITYPARAM_USERRETURN_RAIDAWARD           ActivityParam = 25
	ActivityParam_ACTIVITYPARAM_WISHACTIVITY_INFO              ActivityParam = 30
	ActivityParam_ACTIVITYPARAM_WISHACTIVITY_WISH              ActivityParam = 31
	ActivityParam_ACTIVITYPARAM_WISHACTIVITY_LIKE              ActivityParam = 32
	ActivityParam_ACTIVITYPARAM_WISHACTIVITY_LIKE_RECORD       ActivityParam = 33
)

// Enum value maps for ActivityParam.
var (
	ActivityParam_name = map[int32]string{
		1:  "ACTIVITYPARAM_ACT_START",
		2:  "ACTIVITYPARAM_BCAT_UFOPOS",
		3:  "ACTIVITYPARAM_PROGRESS_NTF",
		4:  "ACTIVITYPARAM_ACT_STOP",
		5:  "ACTIVITYPARAM_GLOBAL_ACT_START",
		6:  "ACTIVITYPARAM_PROGRESS_EXCEPT_NTF",
		7:  "ACTIVITYPARAM_TIMELIMIT_SHOPPAGE",
		8:  "ACTIVITYPARAM_ANIMATION_LOGIN",
		9:  "ACTIVITYPARAM_GLOBAL_DONATIONACTIVITY_INFO",
		10: "ACTIVITYPARAM_GLOBAL_DONATIONACTIVITY_DONATE",
		11: "ACTIVITYPARAM_GLOBAL_DONATIONACTIVITY_AWARD",
		12: "ACTIVITYPARAM_USERINVITE_INFO",
		13: "ACTIVITYPARAM_USERINVITE_BIND_USER",
		14: "ACTIVITYPARAM_USERINVITE_INVITE_AWARD",
		15: "ACTIVITYPARAM_USERINVITE_SHARE_AWARD",
		16: "ACTIVITYPARAM_USERINVITE_INVITE_LOGIN_AWARD",
		17: "ACTIVITYPARAM_USERINVITE_RECALL_LOGIN_AWARD",
		18: "ACTIVITYPARAM_USERRETURN_INFO",
		19: "ACTIVITYPARAM_USERRETURN_QUEST_AWARD",
		20: "ACTIVITYPARAM_USERRETURN_QUEST_ADD",
		21: "ACTIVITYPARAM_USERRETURN_ENTER_CHATROOM",
		22: "ACTIVITYPARAM_USERRETURN_LEAVE_CHATROOM",
		23: "ACTIVITYPARAM_USERRETURN_LOGINAWARD",
		24: "ACTIVITYPARAM_USERRETURN_CHATRECORD",
		25: "ACTIVITYPARAM_USERRETURN_RAIDAWARD",
		30: "ACTIVITYPARAM_WISHACTIVITY_INFO",
		31: "ACTIVITYPARAM_WISHACTIVITY_WISH",
		32: "ACTIVITYPARAM_WISHACTIVITY_LIKE",
		33: "ACTIVITYPARAM_WISHACTIVITY_LIKE_RECORD",
	}
	ActivityParam_value = map[string]int32{
		"ACTIVITYPARAM_ACT_START":                      1,
		"ACTIVITYPARAM_BCAT_UFOPOS":                    2,
		"ACTIVITYPARAM_PROGRESS_NTF":                   3,
		"ACTIVITYPARAM_ACT_STOP":                       4,
		"ACTIVITYPARAM_GLOBAL_ACT_START":               5,
		"ACTIVITYPARAM_PROGRESS_EXCEPT_NTF":            6,
		"ACTIVITYPARAM_TIMELIMIT_SHOPPAGE":             7,
		"ACTIVITYPARAM_ANIMATION_LOGIN":                8,
		"ACTIVITYPARAM_GLOBAL_DONATIONACTIVITY_INFO":   9,
		"ACTIVITYPARAM_GLOBAL_DONATIONACTIVITY_DONATE": 10,
		"ACTIVITYPARAM_GLOBAL_DONATIONACTIVITY_AWARD":  11,
		"ACTIVITYPARAM_USERINVITE_INFO":                12,
		"ACTIVITYPARAM_USERINVITE_BIND_USER":           13,
		"ACTIVITYPARAM_USERINVITE_INVITE_AWARD":        14,
		"ACTIVITYPARAM_USERINVITE_SHARE_AWARD":         15,
		"ACTIVITYPARAM_USERINVITE_INVITE_LOGIN_AWARD":  16,
		"ACTIVITYPARAM_USERINVITE_RECALL_LOGIN_AWARD":  17,
		"ACTIVITYPARAM_USERRETURN_INFO":                18,
		"ACTIVITYPARAM_USERRETURN_QUEST_AWARD":         19,
		"ACTIVITYPARAM_USERRETURN_QUEST_ADD":           20,
		"ACTIVITYPARAM_USERRETURN_ENTER_CHATROOM":      21,
		"ACTIVITYPARAM_USERRETURN_LEAVE_CHATROOM":      22,
		"ACTIVITYPARAM_USERRETURN_LOGINAWARD":          23,
		"ACTIVITYPARAM_USERRETURN_CHATRECORD":          24,
		"ACTIVITYPARAM_USERRETURN_RAIDAWARD":           25,
		"ACTIVITYPARAM_WISHACTIVITY_INFO":              30,
		"ACTIVITYPARAM_WISHACTIVITY_WISH":              31,
		"ACTIVITYPARAM_WISHACTIVITY_LIKE":              32,
		"ACTIVITYPARAM_WISHACTIVITY_LIKE_RECORD":       33,
	}
)

func (x ActivityParam) Enum() *ActivityParam {
	p := new(ActivityParam)
	*p = x
	return p
}

func (x ActivityParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityParam) Descriptor() protoreflect.EnumDescriptor {
	return file_ActivityCmd_proto_enumTypes[0].Descriptor()
}

func (ActivityParam) Type() protoreflect.EnumType {
	return &file_ActivityCmd_proto_enumTypes[0]
}

func (x ActivityParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActivityParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActivityParam(num)
	return nil
}

// Deprecated: Use ActivityParam.Descriptor instead.
func (ActivityParam) EnumDescriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{0}
}

type GlobalActivityType int32

const (
	GlobalActivityType_GACTIVITY_MIN                          GlobalActivityType = 0
	GlobalActivityType_GACTIVITY_AUGURY                       GlobalActivityType = 14
	GlobalActivityType_GACTIVITY_GUILD_QUEST                  GlobalActivityType = 15
	GlobalActivityType_GACTIVITY_GUILD_DONATE                 GlobalActivityType = 16
	GlobalActivityType_GACTIVITY_GUILD_FUBEN                  GlobalActivityType = 17
	GlobalActivityType_GACTIVITY_NOVICE_WELFARE               GlobalActivityType = 18
	GlobalActivityType_GACTIVITY_NORMAL_REFINE                GlobalActivityType = 20
	GlobalActivityType_GACTIVITY_SAFE_REFINE                  GlobalActivityType = 21
	GlobalActivityType_GACTIVITY_SAFE_REFINE_DISCOUNT         GlobalActivityType = 22
	GlobalActivityType_GACTIVITY_RECALL                       GlobalActivityType = 23
	GlobalActivityType_GACTIVITY_SPRING_LOTTERY               GlobalActivityType = 24
	GlobalActivityType_GACTIVITY_WEDDING_SERVICE              GlobalActivityType = 26
	GlobalActivityType_GACTIVITY_FOOD_RECIPE                  GlobalActivityType = 27
	GlobalActivityType_GACTIVITY_COUNT_DOWN                   GlobalActivityType = 28
	GlobalActivityType_GACTIVITY_CHARGE_EXTRA_REWARD          GlobalActivityType = 30
	GlobalActivityType_GACTIVITY_CHARGE_DISCOUNT              GlobalActivityType = 31
	GlobalActivityType_GACTIVITY_CHARGE_EXTRA_COUNT           GlobalActivityType = 32
	GlobalActivityType_GACTIVITY_BARRAGE_FRAME_FREE           GlobalActivityType = 33
	GlobalActivityType_GACTIVITY_IMAGE_RAID                   GlobalActivityType = 34
	GlobalActivityType_GACTIVITY_TEAM_GROUP                   GlobalActivityType = 51
	GlobalActivityType_GACTIVITY_WORLD_LABEL                  GlobalActivityType = 60
	GlobalActivityType_GACTIVITY_RIDE_LOTTERY                 GlobalActivityType = 70
	GlobalActivityType_GACTIVITY_EASTROLOGYTYPE_CONSTELLATION GlobalActivityType = 80
	GlobalActivityType_GACTIVITY_EASTROLOGYTYPE_ACTIVITY      GlobalActivityType = 81
	GlobalActivityType_GACTIVITY_RECALL_PRIVILEGE             GlobalActivityType = 82
	GlobalActivityType_GACTIVITY_KUMAMOTO_BEAR                GlobalActivityType = 90
	GlobalActivityType_GACTIVITY_ALTMAN                       GlobalActivityType = 101
	GlobalActivityType_GACTIVITY_THANKSGIVING                 GlobalActivityType = 102
	GlobalActivityType_GACTIVITY_SPRING_RAID                  GlobalActivityType = 103
	GlobalActivityType_GACTIVITY_EXTRACT_DISCOUNT             GlobalActivityType = 110
	GlobalActivityType_GACTIVITY_PAY_SIGN                     GlobalActivityType = 120
	GlobalActivityType_GACTIVITY_MENROCO                      GlobalActivityType = 1001
	GlobalActivityType_GACTIVITY_HITPOLLY                     GlobalActivityType = 1003
	GlobalActivityType_GACTIVITY_LINKCHARACTER                GlobalActivityType = 1004
	GlobalActivityType_GACTIVITY_PUZZLE                       GlobalActivityType = 1005
	GlobalActivityType_GACTIVITY_BIFROST                      GlobalActivityType = 1006
	GlobalActivityType_GACTIVITY_GUILD_SCORE_RANK             GlobalActivityType = 1007
	GlobalActivityType_GACTIVITY_PUZZLE_2                     GlobalActivityType = 1008
	GlobalActivityType_GACTIVITY_PUZZLE_3                     GlobalActivityType = 1009
	GlobalActivityType_GACTIVITY_PUZZLE_4                     GlobalActivityType = 1010
	GlobalActivityType_GACTIVITY_HEIMDALLR_EYE                GlobalActivityType = 1012
	GlobalActivityType_GACTIVITY_MINIRO                       GlobalActivityType = 1013
	GlobalActivityType_GACTIVITY_GROUPON                      GlobalActivityType = 1014
	GlobalActivityType_GACTIVITY_TIMELIMIT_SHOP               GlobalActivityType = 1015
	GlobalActivityType_GACTIVITY_NOVICE_NOTEBOOK              GlobalActivityType = 1016
	GlobalActivityType_GACTIVITY_TOWER_DAILY_RESET            GlobalActivityType = 1017
	GlobalActivityType_GACTIVITY_FAVORITE                     GlobalActivityType = 1018
	GlobalActivityType_GACTIVITY_DONATE                       GlobalActivityType = 1021
	GlobalActivityType_GACTIVITY_DISNEY_CHALLENGE_TASK        GlobalActivityType = 1030
	GlobalActivityType_GACTIVITY_DISNEY_GUIDE                 GlobalActivityType = 1031
	GlobalActivityType_GACTIVITY_DISNEY_MUSIC                 GlobalActivityType = 1032
	GlobalActivityType_GACTIVITY_GLOBAL_DONATE                GlobalActivityType = 1040
	GlobalActivityType_GACTIVITY_USER_RETURN                  GlobalActivityType = 1041
	GlobalActivityType_GACTIVITY_USER_INVITE                  GlobalActivityType = 1042
	GlobalActivityType_GACTIVITY_WISH                         GlobalActivityType = 1044
	GlobalActivityType_GACTIVITY_MAX                          GlobalActivityType = 1045
)

// Enum value maps for GlobalActivityType.
var (
	GlobalActivityType_name = map[int32]string{
		0:    "GACTIVITY_MIN",
		14:   "GACTIVITY_AUGURY",
		15:   "GACTIVITY_GUILD_QUEST",
		16:   "GACTIVITY_GUILD_DONATE",
		17:   "GACTIVITY_GUILD_FUBEN",
		18:   "GACTIVITY_NOVICE_WELFARE",
		20:   "GACTIVITY_NORMAL_REFINE",
		21:   "GACTIVITY_SAFE_REFINE",
		22:   "GACTIVITY_SAFE_REFINE_DISCOUNT",
		23:   "GACTIVITY_RECALL",
		24:   "GACTIVITY_SPRING_LOTTERY",
		26:   "GACTIVITY_WEDDING_SERVICE",
		27:   "GACTIVITY_FOOD_RECIPE",
		28:   "GACTIVITY_COUNT_DOWN",
		30:   "GACTIVITY_CHARGE_EXTRA_REWARD",
		31:   "GACTIVITY_CHARGE_DISCOUNT",
		32:   "GACTIVITY_CHARGE_EXTRA_COUNT",
		33:   "GACTIVITY_BARRAGE_FRAME_FREE",
		34:   "GACTIVITY_IMAGE_RAID",
		51:   "GACTIVITY_TEAM_GROUP",
		60:   "GACTIVITY_WORLD_LABEL",
		70:   "GACTIVITY_RIDE_LOTTERY",
		80:   "GACTIVITY_EASTROLOGYTYPE_CONSTELLATION",
		81:   "GACTIVITY_EASTROLOGYTYPE_ACTIVITY",
		82:   "GACTIVITY_RECALL_PRIVILEGE",
		90:   "GACTIVITY_KUMAMOTO_BEAR",
		101:  "GACTIVITY_ALTMAN",
		102:  "GACTIVITY_THANKSGIVING",
		103:  "GACTIVITY_SPRING_RAID",
		110:  "GACTIVITY_EXTRACT_DISCOUNT",
		120:  "GACTIVITY_PAY_SIGN",
		1001: "GACTIVITY_MENROCO",
		1003: "GACTIVITY_HITPOLLY",
		1004: "GACTIVITY_LINKCHARACTER",
		1005: "GACTIVITY_PUZZLE",
		1006: "GACTIVITY_BIFROST",
		1007: "GACTIVITY_GUILD_SCORE_RANK",
		1008: "GACTIVITY_PUZZLE_2",
		1009: "GACTIVITY_PUZZLE_3",
		1010: "GACTIVITY_PUZZLE_4",
		1012: "GACTIVITY_HEIMDALLR_EYE",
		1013: "GACTIVITY_MINIRO",
		1014: "GACTIVITY_GROUPON",
		1015: "GACTIVITY_TIMELIMIT_SHOP",
		1016: "GACTIVITY_NOVICE_NOTEBOOK",
		1017: "GACTIVITY_TOWER_DAILY_RESET",
		1018: "GACTIVITY_FAVORITE",
		1021: "GACTIVITY_DONATE",
		1030: "GACTIVITY_DISNEY_CHALLENGE_TASK",
		1031: "GACTIVITY_DISNEY_GUIDE",
		1032: "GACTIVITY_DISNEY_MUSIC",
		1040: "GACTIVITY_GLOBAL_DONATE",
		1041: "GACTIVITY_USER_RETURN",
		1042: "GACTIVITY_USER_INVITE",
		1044: "GACTIVITY_WISH",
		1045: "GACTIVITY_MAX",
	}
	GlobalActivityType_value = map[string]int32{
		"GACTIVITY_MIN":                          0,
		"GACTIVITY_AUGURY":                       14,
		"GACTIVITY_GUILD_QUEST":                  15,
		"GACTIVITY_GUILD_DONATE":                 16,
		"GACTIVITY_GUILD_FUBEN":                  17,
		"GACTIVITY_NOVICE_WELFARE":               18,
		"GACTIVITY_NORMAL_REFINE":                20,
		"GACTIVITY_SAFE_REFINE":                  21,
		"GACTIVITY_SAFE_REFINE_DISCOUNT":         22,
		"GACTIVITY_RECALL":                       23,
		"GACTIVITY_SPRING_LOTTERY":               24,
		"GACTIVITY_WEDDING_SERVICE":              26,
		"GACTIVITY_FOOD_RECIPE":                  27,
		"GACTIVITY_COUNT_DOWN":                   28,
		"GACTIVITY_CHARGE_EXTRA_REWARD":          30,
		"GACTIVITY_CHARGE_DISCOUNT":              31,
		"GACTIVITY_CHARGE_EXTRA_COUNT":           32,
		"GACTIVITY_BARRAGE_FRAME_FREE":           33,
		"GACTIVITY_IMAGE_RAID":                   34,
		"GACTIVITY_TEAM_GROUP":                   51,
		"GACTIVITY_WORLD_LABEL":                  60,
		"GACTIVITY_RIDE_LOTTERY":                 70,
		"GACTIVITY_EASTROLOGYTYPE_CONSTELLATION": 80,
		"GACTIVITY_EASTROLOGYTYPE_ACTIVITY":      81,
		"GACTIVITY_RECALL_PRIVILEGE":             82,
		"GACTIVITY_KUMAMOTO_BEAR":                90,
		"GACTIVITY_ALTMAN":                       101,
		"GACTIVITY_THANKSGIVING":                 102,
		"GACTIVITY_SPRING_RAID":                  103,
		"GACTIVITY_EXTRACT_DISCOUNT":             110,
		"GACTIVITY_PAY_SIGN":                     120,
		"GACTIVITY_MENROCO":                      1001,
		"GACTIVITY_HITPOLLY":                     1003,
		"GACTIVITY_LINKCHARACTER":                1004,
		"GACTIVITY_PUZZLE":                       1005,
		"GACTIVITY_BIFROST":                      1006,
		"GACTIVITY_GUILD_SCORE_RANK":             1007,
		"GACTIVITY_PUZZLE_2":                     1008,
		"GACTIVITY_PUZZLE_3":                     1009,
		"GACTIVITY_PUZZLE_4":                     1010,
		"GACTIVITY_HEIMDALLR_EYE":                1012,
		"GACTIVITY_MINIRO":                       1013,
		"GACTIVITY_GROUPON":                      1014,
		"GACTIVITY_TIMELIMIT_SHOP":               1015,
		"GACTIVITY_NOVICE_NOTEBOOK":              1016,
		"GACTIVITY_TOWER_DAILY_RESET":            1017,
		"GACTIVITY_FAVORITE":                     1018,
		"GACTIVITY_DONATE":                       1021,
		"GACTIVITY_DISNEY_CHALLENGE_TASK":        1030,
		"GACTIVITY_DISNEY_GUIDE":                 1031,
		"GACTIVITY_DISNEY_MUSIC":                 1032,
		"GACTIVITY_GLOBAL_DONATE":                1040,
		"GACTIVITY_USER_RETURN":                  1041,
		"GACTIVITY_USER_INVITE":                  1042,
		"GACTIVITY_WISH":                         1044,
		"GACTIVITY_MAX":                          1045,
	}
)

func (x GlobalActivityType) Enum() *GlobalActivityType {
	p := new(GlobalActivityType)
	*p = x
	return p
}

func (x GlobalActivityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GlobalActivityType) Descriptor() protoreflect.EnumDescriptor {
	return file_ActivityCmd_proto_enumTypes[1].Descriptor()
}

func (GlobalActivityType) Type() protoreflect.EnumType {
	return &file_ActivityCmd_proto_enumTypes[1]
}

func (x GlobalActivityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GlobalActivityType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GlobalActivityType(num)
	return nil
}

// Deprecated: Use GlobalActivityType.Descriptor instead.
func (GlobalActivityType) EnumDescriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{1}
}

type EActProgress int32

const (
	EActProgress_EACTPROGRESS_NONE    EActProgress = 0
	EActProgress_EACTPROGRESS_1       EActProgress = 1
	EActProgress_EACTPROGRESS_2       EActProgress = 2
	EActProgress_EACTPROGRESS_3       EActProgress = 3
	EActProgress_EACTPROGRESS_4       EActProgress = 4
	EActProgress_EACTPROGRESS_5       EActProgress = 5
	EActProgress_EACTPROGRESS_6       EActProgress = 6
	EActProgress_EACTPROGRESS_7       EActProgress = 7
	EActProgress_EACTPROGRESS_FAIL    EActProgress = 100
	EActProgress_EACTPROGRESS_SUCCESS EActProgress = 101
)

// Enum value maps for EActProgress.
var (
	EActProgress_name = map[int32]string{
		0:   "EACTPROGRESS_NONE",
		1:   "EACTPROGRESS_1",
		2:   "EACTPROGRESS_2",
		3:   "EACTPROGRESS_3",
		4:   "EACTPROGRESS_4",
		5:   "EACTPROGRESS_5",
		6:   "EACTPROGRESS_6",
		7:   "EACTPROGRESS_7",
		100: "EACTPROGRESS_FAIL",
		101: "EACTPROGRESS_SUCCESS",
	}
	EActProgress_value = map[string]int32{
		"EACTPROGRESS_NONE":    0,
		"EACTPROGRESS_1":       1,
		"EACTPROGRESS_2":       2,
		"EACTPROGRESS_3":       3,
		"EACTPROGRESS_4":       4,
		"EACTPROGRESS_5":       5,
		"EACTPROGRESS_6":       6,
		"EACTPROGRESS_7":       7,
		"EACTPROGRESS_FAIL":    100,
		"EACTPROGRESS_SUCCESS": 101,
	}
)

func (x EActProgress) Enum() *EActProgress {
	p := new(EActProgress)
	*p = x
	return p
}

func (x EActProgress) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EActProgress) Descriptor() protoreflect.EnumDescriptor {
	return file_ActivityCmd_proto_enumTypes[2].Descriptor()
}

func (EActProgress) Type() protoreflect.EnumType {
	return &file_ActivityCmd_proto_enumTypes[2]
}

func (x EActProgress) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EActProgress) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EActProgress(num)
	return nil
}

// Deprecated: Use EActProgress.Descriptor instead.
func (EActProgress) EnumDescriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{2}
}

type EGlobalDonationActStage int32

const (
	EGlobalDonationActStage_EGLOBALDONATIONACT_STAGE_NONE     EGlobalDonationActStage = 0
	EGlobalDonationActStage_EGLOBALDONATIONACT_STAGE_DONATION EGlobalDonationActStage = 1
	EGlobalDonationActStage_EGLOBALDONATIONACT_STAGE_SHOW     EGlobalDonationActStage = 2
)

// Enum value maps for EGlobalDonationActStage.
var (
	EGlobalDonationActStage_name = map[int32]string{
		0: "EGLOBALDONATIONACT_STAGE_NONE",
		1: "EGLOBALDONATIONACT_STAGE_DONATION",
		2: "EGLOBALDONATIONACT_STAGE_SHOW",
	}
	EGlobalDonationActStage_value = map[string]int32{
		"EGLOBALDONATIONACT_STAGE_NONE":     0,
		"EGLOBALDONATIONACT_STAGE_DONATION": 1,
		"EGLOBALDONATIONACT_STAGE_SHOW":     2,
	}
)

func (x EGlobalDonationActStage) Enum() *EGlobalDonationActStage {
	p := new(EGlobalDonationActStage)
	*p = x
	return p
}

func (x EGlobalDonationActStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGlobalDonationActStage) Descriptor() protoreflect.EnumDescriptor {
	return file_ActivityCmd_proto_enumTypes[3].Descriptor()
}

func (EGlobalDonationActStage) Type() protoreflect.EnumType {
	return &file_ActivityCmd_proto_enumTypes[3]
}

func (x EGlobalDonationActStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGlobalDonationActStage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGlobalDonationActStage(num)
	return nil
}

// Deprecated: Use EGlobalDonationActStage.Descriptor instead.
func (EGlobalDonationActStage) EnumDescriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{3}
}

type EGlobalDonationActAward int32

const (
	EGlobalDonationActAward_EGLOBALDONATIONACT_AWARD_NONE     EGlobalDonationActAward = 0
	EGlobalDonationActAward_EGLOBALDONATIONACT_AWARD_PERSONAL EGlobalDonationActAward = 1
	EGlobalDonationActAward_EGLOBALDONATIONACT_AWARD_GLOBAL   EGlobalDonationActAward = 2
)

// Enum value maps for EGlobalDonationActAward.
var (
	EGlobalDonationActAward_name = map[int32]string{
		0: "EGLOBALDONATIONACT_AWARD_NONE",
		1: "EGLOBALDONATIONACT_AWARD_PERSONAL",
		2: "EGLOBALDONATIONACT_AWARD_GLOBAL",
	}
	EGlobalDonationActAward_value = map[string]int32{
		"EGLOBALDONATIONACT_AWARD_NONE":     0,
		"EGLOBALDONATIONACT_AWARD_PERSONAL": 1,
		"EGLOBALDONATIONACT_AWARD_GLOBAL":   2,
	}
)

func (x EGlobalDonationActAward) Enum() *EGlobalDonationActAward {
	p := new(EGlobalDonationActAward)
	*p = x
	return p
}

func (x EGlobalDonationActAward) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGlobalDonationActAward) Descriptor() protoreflect.EnumDescriptor {
	return file_ActivityCmd_proto_enumTypes[4].Descriptor()
}

func (EGlobalDonationActAward) Type() protoreflect.EnumType {
	return &file_ActivityCmd_proto_enumTypes[4]
}

func (x EGlobalDonationActAward) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGlobalDonationActAward) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGlobalDonationActAward(num)
	return nil
}

// Deprecated: Use EGlobalDonationActAward.Descriptor instead.
func (EGlobalDonationActAward) EnumDescriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{4}
}

type EUserReturnQuestType int32

const (
	EUserReturnQuestType_EUSERRETURN_QUESTTYPE_NONE   EUserReturnQuestType = 0
	EUserReturnQuestType_EUSERRETURN_QUESTTYPE_DAILY  EUserReturnQuestType = 1
	EUserReturnQuestType_EUSERRETURN_QUESTTYPE_WEEKLY EUserReturnQuestType = 2
	EUserReturnQuestType_EUSERRETURN_QUESTTYPE_ISSUE  EUserReturnQuestType = 3
)

// Enum value maps for EUserReturnQuestType.
var (
	EUserReturnQuestType_name = map[int32]string{
		0: "EUSERRETURN_QUESTTYPE_NONE",
		1: "EUSERRETURN_QUESTTYPE_DAILY",
		2: "EUSERRETURN_QUESTTYPE_WEEKLY",
		3: "EUSERRETURN_QUESTTYPE_ISSUE",
	}
	EUserReturnQuestType_value = map[string]int32{
		"EUSERRETURN_QUESTTYPE_NONE":   0,
		"EUSERRETURN_QUESTTYPE_DAILY":  1,
		"EUSERRETURN_QUESTTYPE_WEEKLY": 2,
		"EUSERRETURN_QUESTTYPE_ISSUE":  3,
	}
)

func (x EUserReturnQuestType) Enum() *EUserReturnQuestType {
	p := new(EUserReturnQuestType)
	*p = x
	return p
}

func (x EUserReturnQuestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUserReturnQuestType) Descriptor() protoreflect.EnumDescriptor {
	return file_ActivityCmd_proto_enumTypes[5].Descriptor()
}

func (EUserReturnQuestType) Type() protoreflect.EnumType {
	return &file_ActivityCmd_proto_enumTypes[5]
}

func (x EUserReturnQuestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUserReturnQuestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUserReturnQuestType(num)
	return nil
}

// Deprecated: Use EUserReturnQuestType.Descriptor instead.
func (EUserReturnQuestType) EnumDescriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{5}
}

type StartActItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Mapid     *uint32  `protobuf:"varint,2,opt,name=mapid" json:"mapid,omitempty"`
	Starttime *uint32  `protobuf:"varint,3,opt,name=starttime" json:"starttime,omitempty"`
	Endtime   *uint32  `protobuf:"varint,4,opt,name=endtime" json:"endtime,omitempty"`
	Path      *uint32  `protobuf:"varint,5,opt,name=path" json:"path,omitempty"`
	Unshowmap []uint32 `protobuf:"varint,6,rep,name=unshowmap" json:"unshowmap,omitempty"`
}

func (x *StartActItem) Reset() {
	*x = StartActItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartActItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartActItem) ProtoMessage() {}

func (x *StartActItem) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartActItem.ProtoReflect.Descriptor instead.
func (*StartActItem) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{0}
}

func (x *StartActItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *StartActItem) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return 0
}

func (x *StartActItem) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

func (x *StartActItem) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

func (x *StartActItem) GetPath() uint32 {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return 0
}

func (x *StartActItem) GetUnshowmap() []uint32 {
	if x != nil {
		return x.Unshowmap
	}
	return nil
}

type StartActCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param *ActivityParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=1" json:"param,omitempty"`
	Items []*StartActItem `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for StartActCmd fields.
const (
	Default_StartActCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_StartActCmd_Param = ActivityParam_ACTIVITYPARAM_ACT_START
)

func (x *StartActCmd) Reset() {
	*x = StartActCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartActCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartActCmd) ProtoMessage() {}

func (x *StartActCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartActCmd.ProtoReflect.Descriptor instead.
func (*StartActCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{1}
}

func (x *StartActCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StartActCmd_Cmd
}

func (x *StartActCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StartActCmd_Param
}

func (x *StartActCmd) GetItems() []*StartActItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type StopActCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=4" json:"param,omitempty"`
	Id    *uint32        `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

// Default values for StopActCmd fields.
const (
	Default_StopActCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_StopActCmd_Param = ActivityParam_ACTIVITYPARAM_ACT_STOP
)

func (x *StopActCmd) Reset() {
	*x = StopActCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopActCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopActCmd) ProtoMessage() {}

func (x *StopActCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopActCmd.ProtoReflect.Descriptor instead.
func (*StopActCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{2}
}

func (x *StopActCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StopActCmd_Cmd
}

func (x *StopActCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StopActCmd_Param
}

func (x *StopActCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type BCatUFOPosActCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=2" json:"param,omitempty"`
	Pos   *ScenePos      `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
}

// Default values for BCatUFOPosActCmd fields.
const (
	Default_BCatUFOPosActCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_BCatUFOPosActCmd_Param = ActivityParam_ACTIVITYPARAM_BCAT_UFOPOS
)

func (x *BCatUFOPosActCmd) Reset() {
	*x = BCatUFOPosActCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BCatUFOPosActCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BCatUFOPosActCmd) ProtoMessage() {}

func (x *BCatUFOPosActCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BCatUFOPosActCmd.ProtoReflect.Descriptor instead.
func (*BCatUFOPosActCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{3}
}

func (x *BCatUFOPosActCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BCatUFOPosActCmd_Cmd
}

func (x *BCatUFOPosActCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BCatUFOPosActCmd_Param
}

func (x *BCatUFOPosActCmd) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

type ActProgressItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint32       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Progress  *EActProgress `protobuf:"varint,2,opt,name=progress,enum=Cmd.EActProgress" json:"progress,omitempty"`
	Endtime   *uint32       `protobuf:"varint,3,opt,name=endtime" json:"endtime,omitempty"`
	Starttime *uint32       `protobuf:"varint,4,opt,name=starttime" json:"starttime,omitempty"`
}

func (x *ActProgressItem) Reset() {
	*x = ActProgressItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActProgressItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActProgressItem) ProtoMessage() {}

func (x *ActProgressItem) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActProgressItem.ProtoReflect.Descriptor instead.
func (*ActProgressItem) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{4}
}

func (x *ActProgressItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ActProgressItem) GetProgress() EActProgress {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return EActProgress_EACTPROGRESS_NONE
}

func (x *ActProgressItem) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

func (x *ActProgressItem) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

type ActProgressNtfCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param *ActivityParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=3" json:"param,omitempty"`
	Items []*ActProgressItem `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for ActProgressNtfCmd fields.
const (
	Default_ActProgressNtfCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_ActProgressNtfCmd_Param = ActivityParam_ACTIVITYPARAM_PROGRESS_NTF
)

func (x *ActProgressNtfCmd) Reset() {
	*x = ActProgressNtfCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActProgressNtfCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActProgressNtfCmd) ProtoMessage() {}

func (x *ActProgressNtfCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActProgressNtfCmd.ProtoReflect.Descriptor instead.
func (*ActProgressNtfCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{5}
}

func (x *ActProgressNtfCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ActProgressNtfCmd_Cmd
}

func (x *ActProgressNtfCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ActProgressNtfCmd_Param
}

func (x *ActProgressNtfCmd) GetItems() []*ActProgressItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type StartGlobalActCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param     *ActivityParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=5" json:"param,omitempty"`
	Id        *uint32             `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Type      *GlobalActivityType `protobuf:"varint,4,opt,name=type,enum=Cmd.GlobalActivityType" json:"type,omitempty"`
	Params    []uint32            `protobuf:"varint,5,rep,name=params" json:"params,omitempty"`
	Starttime *uint32             `protobuf:"varint,6,opt,name=starttime" json:"starttime,omitempty"`
	Endtime   *uint32             `protobuf:"varint,7,opt,name=endtime" json:"endtime,omitempty"`
	Open      *bool               `protobuf:"varint,8,opt,name=open" json:"open,omitempty"`
	Count     *uint32             `protobuf:"varint,9,opt,name=count" json:"count,omitempty"`
}

// Default values for StartGlobalActCmd fields.
const (
	Default_StartGlobalActCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_StartGlobalActCmd_Param = ActivityParam_ACTIVITYPARAM_GLOBAL_ACT_START
)

func (x *StartGlobalActCmd) Reset() {
	*x = StartGlobalActCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartGlobalActCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartGlobalActCmd) ProtoMessage() {}

func (x *StartGlobalActCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartGlobalActCmd.ProtoReflect.Descriptor instead.
func (*StartGlobalActCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{6}
}

func (x *StartGlobalActCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StartGlobalActCmd_Cmd
}

func (x *StartGlobalActCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StartGlobalActCmd_Param
}

func (x *StartGlobalActCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *StartGlobalActCmd) GetType() GlobalActivityType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return GlobalActivityType_GACTIVITY_MIN
}

func (x *StartGlobalActCmd) GetParams() []uint32 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *StartGlobalActCmd) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

func (x *StartGlobalActCmd) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

func (x *StartGlobalActCmd) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return false
}

func (x *StartGlobalActCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type ActivityProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actid     *uint32 `protobuf:"varint,1,opt,name=actid" json:"actid,omitempty"`
	Progress  *uint32 `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
	Starttime *uint32 `protobuf:"varint,3,opt,name=starttime" json:"starttime,omitempty"`
	Endtime   *uint32 `protobuf:"varint,4,opt,name=endtime" json:"endtime,omitempty"`
}

func (x *ActivityProgress) Reset() {
	*x = ActivityProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityProgress) ProtoMessage() {}

func (x *ActivityProgress) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityProgress.ProtoReflect.Descriptor instead.
func (*ActivityProgress) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{7}
}

func (x *ActivityProgress) GetActid() uint32 {
	if x != nil && x.Actid != nil {
		return *x.Actid
	}
	return 0
}

func (x *ActivityProgress) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *ActivityProgress) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

func (x *ActivityProgress) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

type ActProgressExceptNtfCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=6" json:"param,omitempty"`
	Ids   []uint32       `protobuf:"varint,3,rep,name=ids" json:"ids,omitempty"`
}

// Default values for ActProgressExceptNtfCmd fields.
const (
	Default_ActProgressExceptNtfCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_ActProgressExceptNtfCmd_Param = ActivityParam_ACTIVITYPARAM_PROGRESS_EXCEPT_NTF
)

func (x *ActProgressExceptNtfCmd) Reset() {
	*x = ActProgressExceptNtfCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActProgressExceptNtfCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActProgressExceptNtfCmd) ProtoMessage() {}

func (x *ActProgressExceptNtfCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActProgressExceptNtfCmd.ProtoReflect.Descriptor instead.
func (*ActProgressExceptNtfCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{8}
}

func (x *ActProgressExceptNtfCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ActProgressExceptNtfCmd_Cmd
}

func (x *ActProgressExceptNtfCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ActProgressExceptNtfCmd_Param
}

func (x *ActProgressExceptNtfCmd) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ActTimeLimitShopItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx    *uint32   `protobuf:"varint,1,opt,name=idx" json:"idx,omitempty"`
	Item   *ShopItem `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
	Bought *bool     `protobuf:"varint,3,opt,name=bought" json:"bought,omitempty"`
}

func (x *ActTimeLimitShopItem) Reset() {
	*x = ActTimeLimitShopItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActTimeLimitShopItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActTimeLimitShopItem) ProtoMessage() {}

func (x *ActTimeLimitShopItem) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActTimeLimitShopItem.ProtoReflect.Descriptor instead.
func (*ActTimeLimitShopItem) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{9}
}

func (x *ActTimeLimitShopItem) GetIdx() uint32 {
	if x != nil && x.Idx != nil {
		return *x.Idx
	}
	return 0
}

func (x *ActTimeLimitShopItem) GetItem() *ShopItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *ActTimeLimitShopItem) GetBought() bool {
	if x != nil && x.Bought != nil {
		return *x.Bought
	}
	return false
}

type TimeLimitShopPageCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command                `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param         *ActivityParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=7" json:"param,omitempty"`
	Actid         *uint32                 `protobuf:"varint,3,opt,name=actid" json:"actid,omitempty"`
	Items         []*ActTimeLimitShopItem `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
	Refreshat     *uint32                 `protobuf:"varint,5,opt,name=refreshat" json:"refreshat,omitempty"`
	Refreshtimes  *uint32                 `protobuf:"varint,6,opt,name=refreshtimes" json:"refreshtimes,omitempty"`
	Rerefreshcost *uint32                 `protobuf:"varint,7,opt,name=rerefreshcost" json:"rerefreshcost,omitempty"`
	Reqrefresh    *bool                   `protobuf:"varint,8,opt,name=reqrefresh,def=0" json:"reqrefresh,omitempty"`
}

// Default values for TimeLimitShopPageCmd fields.
const (
	Default_TimeLimitShopPageCmd_Cmd        = Command_ACTIVITY_PROTOCMD
	Default_TimeLimitShopPageCmd_Param      = ActivityParam_ACTIVITYPARAM_TIMELIMIT_SHOPPAGE
	Default_TimeLimitShopPageCmd_Reqrefresh = bool(false)
)

func (x *TimeLimitShopPageCmd) Reset() {
	*x = TimeLimitShopPageCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeLimitShopPageCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeLimitShopPageCmd) ProtoMessage() {}

func (x *TimeLimitShopPageCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeLimitShopPageCmd.ProtoReflect.Descriptor instead.
func (*TimeLimitShopPageCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{10}
}

func (x *TimeLimitShopPageCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TimeLimitShopPageCmd_Cmd
}

func (x *TimeLimitShopPageCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TimeLimitShopPageCmd_Param
}

func (x *TimeLimitShopPageCmd) GetActid() uint32 {
	if x != nil && x.Actid != nil {
		return *x.Actid
	}
	return 0
}

func (x *TimeLimitShopPageCmd) GetItems() []*ActTimeLimitShopItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *TimeLimitShopPageCmd) GetRefreshat() uint32 {
	if x != nil && x.Refreshat != nil {
		return *x.Refreshat
	}
	return 0
}

func (x *TimeLimitShopPageCmd) GetRefreshtimes() uint32 {
	if x != nil && x.Refreshtimes != nil {
		return *x.Refreshtimes
	}
	return 0
}

func (x *TimeLimitShopPageCmd) GetRerefreshcost() uint32 {
	if x != nil && x.Rerefreshcost != nil {
		return *x.Rerefreshcost
	}
	return 0
}

func (x *TimeLimitShopPageCmd) GetReqrefresh() bool {
	if x != nil && x.Reqrefresh != nil {
		return *x.Reqrefresh
	}
	return Default_TimeLimitShopPageCmd_Reqrefresh
}

type AnimationLoginActCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=8" json:"param,omitempty"`
	Id    *uint32        `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

// Default values for AnimationLoginActCmd fields.
const (
	Default_AnimationLoginActCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_AnimationLoginActCmd_Param = ActivityParam_ACTIVITYPARAM_ANIMATION_LOGIN
)

func (x *AnimationLoginActCmd) Reset() {
	*x = AnimationLoginActCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimationLoginActCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimationLoginActCmd) ProtoMessage() {}

func (x *AnimationLoginActCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimationLoginActCmd.ProtoReflect.Descriptor instead.
func (*AnimationLoginActCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{11}
}

func (x *AnimationLoginActCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AnimationLoginActCmd_Cmd
}

func (x *AnimationLoginActCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AnimationLoginActCmd_Param
}

func (x *AnimationLoginActCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type GlobalDonationActivityInfoCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd                *Command                 `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param              *ActivityParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=9" json:"param,omitempty"`
	Stage              *EGlobalDonationActStage `protobuf:"varint,3,opt,name=stage,enum=Cmd.EGlobalDonationActStage,def=0" json:"stage,omitempty"`
	Showcommpletetext  *bool                    `protobuf:"varint,4,opt,name=showcommpletetext,def=0" json:"showcommpletetext,omitempty"`
	Donateval          *uint32                  `protobuf:"varint,5,opt,name=donateval" json:"donateval,omitempty"`
	Awardedpersonalid  []uint32                 `protobuf:"varint,6,rep,name=awardedpersonalid" json:"awardedpersonalid,omitempty"`
	Globalprocess      *uint32                  `protobuf:"varint,7,opt,name=globalprocess" json:"globalprocess,omitempty"`
	Awardedglobalid    []uint32                 `protobuf:"varint,8,rep,name=awardedglobalid" json:"awardedglobalid,omitempty"`
	Globalcompletetime *uint32                  `protobuf:"varint,9,opt,name=globalcompletetime" json:"globalcompletetime,omitempty"`
}

// Default values for GlobalDonationActivityInfoCmd fields.
const (
	Default_GlobalDonationActivityInfoCmd_Cmd               = Command_ACTIVITY_PROTOCMD
	Default_GlobalDonationActivityInfoCmd_Param             = ActivityParam_ACTIVITYPARAM_GLOBAL_DONATIONACTIVITY_INFO
	Default_GlobalDonationActivityInfoCmd_Stage             = EGlobalDonationActStage_EGLOBALDONATIONACT_STAGE_NONE
	Default_GlobalDonationActivityInfoCmd_Showcommpletetext = bool(false)
)

func (x *GlobalDonationActivityInfoCmd) Reset() {
	*x = GlobalDonationActivityInfoCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalDonationActivityInfoCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalDonationActivityInfoCmd) ProtoMessage() {}

func (x *GlobalDonationActivityInfoCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalDonationActivityInfoCmd.ProtoReflect.Descriptor instead.
func (*GlobalDonationActivityInfoCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{12}
}

func (x *GlobalDonationActivityInfoCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GlobalDonationActivityInfoCmd_Cmd
}

func (x *GlobalDonationActivityInfoCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GlobalDonationActivityInfoCmd_Param
}

func (x *GlobalDonationActivityInfoCmd) GetStage() EGlobalDonationActStage {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return Default_GlobalDonationActivityInfoCmd_Stage
}

func (x *GlobalDonationActivityInfoCmd) GetShowcommpletetext() bool {
	if x != nil && x.Showcommpletetext != nil {
		return *x.Showcommpletetext
	}
	return Default_GlobalDonationActivityInfoCmd_Showcommpletetext
}

func (x *GlobalDonationActivityInfoCmd) GetDonateval() uint32 {
	if x != nil && x.Donateval != nil {
		return *x.Donateval
	}
	return 0
}

func (x *GlobalDonationActivityInfoCmd) GetAwardedpersonalid() []uint32 {
	if x != nil {
		return x.Awardedpersonalid
	}
	return nil
}

func (x *GlobalDonationActivityInfoCmd) GetGlobalprocess() uint32 {
	if x != nil && x.Globalprocess != nil {
		return *x.Globalprocess
	}
	return 0
}

func (x *GlobalDonationActivityInfoCmd) GetAwardedglobalid() []uint32 {
	if x != nil {
		return x.Awardedglobalid
	}
	return nil
}

func (x *GlobalDonationActivityInfoCmd) GetGlobalcompletetime() uint32 {
	if x != nil && x.Globalcompletetime != nil {
		return *x.Globalcompletetime
	}
	return 0
}

type GlobalDonationActivityDonateCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param  *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=10" json:"param,omitempty"`
	Num    *uint32        `protobuf:"varint,3,opt,name=num" json:"num,omitempty"`
	Sucess *bool          `protobuf:"varint,4,opt,name=sucess,def=0" json:"sucess,omitempty"`
}

// Default values for GlobalDonationActivityDonateCmd fields.
const (
	Default_GlobalDonationActivityDonateCmd_Cmd    = Command_ACTIVITY_PROTOCMD
	Default_GlobalDonationActivityDonateCmd_Param  = ActivityParam_ACTIVITYPARAM_GLOBAL_DONATIONACTIVITY_DONATE
	Default_GlobalDonationActivityDonateCmd_Sucess = bool(false)
)

func (x *GlobalDonationActivityDonateCmd) Reset() {
	*x = GlobalDonationActivityDonateCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalDonationActivityDonateCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalDonationActivityDonateCmd) ProtoMessage() {}

func (x *GlobalDonationActivityDonateCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalDonationActivityDonateCmd.ProtoReflect.Descriptor instead.
func (*GlobalDonationActivityDonateCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{13}
}

func (x *GlobalDonationActivityDonateCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GlobalDonationActivityDonateCmd_Cmd
}

func (x *GlobalDonationActivityDonateCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GlobalDonationActivityDonateCmd_Param
}

func (x *GlobalDonationActivityDonateCmd) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *GlobalDonationActivityDonateCmd) GetSucess() bool {
	if x != nil && x.Sucess != nil {
		return *x.Sucess
	}
	return Default_GlobalDonationActivityDonateCmd_Sucess
}

type GlobalDonationActivityAwardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command                 `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param  *ActivityParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=11" json:"param,omitempty"`
	Type   *EGlobalDonationActAward `protobuf:"varint,3,opt,name=type,enum=Cmd.EGlobalDonationActAward,def=0" json:"type,omitempty"`
	Id     *uint32                  `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
	Sucess *bool                    `protobuf:"varint,5,opt,name=sucess,def=0" json:"sucess,omitempty"`
}

// Default values for GlobalDonationActivityAwardCmd fields.
const (
	Default_GlobalDonationActivityAwardCmd_Cmd    = Command_ACTIVITY_PROTOCMD
	Default_GlobalDonationActivityAwardCmd_Param  = ActivityParam_ACTIVITYPARAM_GLOBAL_DONATIONACTIVITY_AWARD
	Default_GlobalDonationActivityAwardCmd_Type   = EGlobalDonationActAward_EGLOBALDONATIONACT_AWARD_NONE
	Default_GlobalDonationActivityAwardCmd_Sucess = bool(false)
)

func (x *GlobalDonationActivityAwardCmd) Reset() {
	*x = GlobalDonationActivityAwardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalDonationActivityAwardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalDonationActivityAwardCmd) ProtoMessage() {}

func (x *GlobalDonationActivityAwardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalDonationActivityAwardCmd.ProtoReflect.Descriptor instead.
func (*GlobalDonationActivityAwardCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{14}
}

func (x *GlobalDonationActivityAwardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GlobalDonationActivityAwardCmd_Cmd
}

func (x *GlobalDonationActivityAwardCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GlobalDonationActivityAwardCmd_Param
}

func (x *GlobalDonationActivityAwardCmd) GetType() EGlobalDonationActAward {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_GlobalDonationActivityAwardCmd_Type
}

func (x *GlobalDonationActivityAwardCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GlobalDonationActivityAwardCmd) GetSucess() bool {
	if x != nil && x.Sucess != nil {
		return *x.Sucess
	}
	return Default_GlobalDonationActivityAwardCmd_Sucess
}

type UserInviteInfoCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd             *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param           *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=12" json:"param,omitempty"`
	Invitecode      *string        `protobuf:"bytes,3,opt,name=invitecode" json:"invitecode,omitempty"`
	Inviteuserid    *uint64        `protobuf:"varint,4,opt,name=inviteuserid" json:"inviteuserid,omitempty"`
	Inviteusername  *string        `protobuf:"bytes,5,opt,name=inviteusername" json:"inviteusername,omitempty"`
	Inviteawarded   *bool          `protobuf:"varint,6,opt,name=inviteawarded" json:"inviteawarded,omitempty"`
	Invitelogindays *uint32        `protobuf:"varint,7,opt,name=invitelogindays" json:"invitelogindays,omitempty"`
	Inviteawardid   []uint32       `protobuf:"varint,8,rep,name=inviteawardid" json:"inviteawardid,omitempty"`
	Sharawarded     *bool          `protobuf:"varint,9,opt,name=sharawarded" json:"sharawarded,omitempty"`
	Recalluser      *bool          `protobuf:"varint,10,opt,name=recalluser" json:"recalluser,omitempty"`
	Binduser        *bool          `protobuf:"varint,11,opt,name=binduser" json:"binduser,omitempty"`
	Recalllogindays *uint32        `protobuf:"varint,12,opt,name=recalllogindays" json:"recalllogindays,omitempty"`
	Loginawarddid   []uint32       `protobuf:"varint,13,rep,name=loginawarddid" json:"loginawarddid,omitempty"`
}

// Default values for UserInviteInfoCmd fields.
const (
	Default_UserInviteInfoCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_UserInviteInfoCmd_Param = ActivityParam_ACTIVITYPARAM_USERINVITE_INFO
)

func (x *UserInviteInfoCmd) Reset() {
	*x = UserInviteInfoCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInviteInfoCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInviteInfoCmd) ProtoMessage() {}

func (x *UserInviteInfoCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInviteInfoCmd.ProtoReflect.Descriptor instead.
func (*UserInviteInfoCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{15}
}

func (x *UserInviteInfoCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserInviteInfoCmd_Cmd
}

func (x *UserInviteInfoCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserInviteInfoCmd_Param
}

func (x *UserInviteInfoCmd) GetInvitecode() string {
	if x != nil && x.Invitecode != nil {
		return *x.Invitecode
	}
	return ""
}

func (x *UserInviteInfoCmd) GetInviteuserid() uint64 {
	if x != nil && x.Inviteuserid != nil {
		return *x.Inviteuserid
	}
	return 0
}

func (x *UserInviteInfoCmd) GetInviteusername() string {
	if x != nil && x.Inviteusername != nil {
		return *x.Inviteusername
	}
	return ""
}

func (x *UserInviteInfoCmd) GetInviteawarded() bool {
	if x != nil && x.Inviteawarded != nil {
		return *x.Inviteawarded
	}
	return false
}

func (x *UserInviteInfoCmd) GetInvitelogindays() uint32 {
	if x != nil && x.Invitelogindays != nil {
		return *x.Invitelogindays
	}
	return 0
}

func (x *UserInviteInfoCmd) GetInviteawardid() []uint32 {
	if x != nil {
		return x.Inviteawardid
	}
	return nil
}

func (x *UserInviteInfoCmd) GetSharawarded() bool {
	if x != nil && x.Sharawarded != nil {
		return *x.Sharawarded
	}
	return false
}

func (x *UserInviteInfoCmd) GetRecalluser() bool {
	if x != nil && x.Recalluser != nil {
		return *x.Recalluser
	}
	return false
}

func (x *UserInviteInfoCmd) GetBinduser() bool {
	if x != nil && x.Binduser != nil {
		return *x.Binduser
	}
	return false
}

func (x *UserInviteInfoCmd) GetRecalllogindays() uint32 {
	if x != nil && x.Recalllogindays != nil {
		return *x.Recalllogindays
	}
	return 0
}

func (x *UserInviteInfoCmd) GetLoginawarddid() []uint32 {
	if x != nil {
		return x.Loginawarddid
	}
	return nil
}

type UserInviteBindUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param      *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=13" json:"param,omitempty"`
	Invitecode *string        `protobuf:"bytes,3,opt,name=invitecode" json:"invitecode,omitempty"`
	Sucess     *bool          `protobuf:"varint,4,opt,name=sucess,def=0" json:"sucess,omitempty"`
}

// Default values for UserInviteBindUserCmd fields.
const (
	Default_UserInviteBindUserCmd_Cmd    = Command_ACTIVITY_PROTOCMD
	Default_UserInviteBindUserCmd_Param  = ActivityParam_ACTIVITYPARAM_USERINVITE_BIND_USER
	Default_UserInviteBindUserCmd_Sucess = bool(false)
)

func (x *UserInviteBindUserCmd) Reset() {
	*x = UserInviteBindUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInviteBindUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInviteBindUserCmd) ProtoMessage() {}

func (x *UserInviteBindUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInviteBindUserCmd.ProtoReflect.Descriptor instead.
func (*UserInviteBindUserCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{16}
}

func (x *UserInviteBindUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserInviteBindUserCmd_Cmd
}

func (x *UserInviteBindUserCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserInviteBindUserCmd_Param
}

func (x *UserInviteBindUserCmd) GetInvitecode() string {
	if x != nil && x.Invitecode != nil {
		return *x.Invitecode
	}
	return ""
}

func (x *UserInviteBindUserCmd) GetSucess() bool {
	if x != nil && x.Sucess != nil {
		return *x.Sucess
	}
	return Default_UserInviteBindUserCmd_Sucess
}

type UserInviteInviteAwardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param  *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=14" json:"param,omitempty"`
	Sucess *bool          `protobuf:"varint,3,opt,name=sucess,def=0" json:"sucess,omitempty"`
}

// Default values for UserInviteInviteAwardCmd fields.
const (
	Default_UserInviteInviteAwardCmd_Cmd    = Command_ACTIVITY_PROTOCMD
	Default_UserInviteInviteAwardCmd_Param  = ActivityParam_ACTIVITYPARAM_USERINVITE_INVITE_AWARD
	Default_UserInviteInviteAwardCmd_Sucess = bool(false)
)

func (x *UserInviteInviteAwardCmd) Reset() {
	*x = UserInviteInviteAwardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInviteInviteAwardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInviteInviteAwardCmd) ProtoMessage() {}

func (x *UserInviteInviteAwardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInviteInviteAwardCmd.ProtoReflect.Descriptor instead.
func (*UserInviteInviteAwardCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{17}
}

func (x *UserInviteInviteAwardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserInviteInviteAwardCmd_Cmd
}

func (x *UserInviteInviteAwardCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserInviteInviteAwardCmd_Param
}

func (x *UserInviteInviteAwardCmd) GetSucess() bool {
	if x != nil && x.Sucess != nil {
		return *x.Sucess
	}
	return Default_UserInviteInviteAwardCmd_Sucess
}

type UserInviteShareAwardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param  *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=15" json:"param,omitempty"`
	Sucess *bool          `protobuf:"varint,3,opt,name=sucess,def=0" json:"sucess,omitempty"`
}

// Default values for UserInviteShareAwardCmd fields.
const (
	Default_UserInviteShareAwardCmd_Cmd    = Command_ACTIVITY_PROTOCMD
	Default_UserInviteShareAwardCmd_Param  = ActivityParam_ACTIVITYPARAM_USERINVITE_SHARE_AWARD
	Default_UserInviteShareAwardCmd_Sucess = bool(false)
)

func (x *UserInviteShareAwardCmd) Reset() {
	*x = UserInviteShareAwardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInviteShareAwardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInviteShareAwardCmd) ProtoMessage() {}

func (x *UserInviteShareAwardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInviteShareAwardCmd.ProtoReflect.Descriptor instead.
func (*UserInviteShareAwardCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{18}
}

func (x *UserInviteShareAwardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserInviteShareAwardCmd_Cmd
}

func (x *UserInviteShareAwardCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserInviteShareAwardCmd_Param
}

func (x *UserInviteShareAwardCmd) GetSucess() bool {
	if x != nil && x.Sucess != nil {
		return *x.Sucess
	}
	return Default_UserInviteShareAwardCmd_Sucess
}

type UserInviteInviteLoginAwardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=16" json:"param,omitempty"`
	Id    []uint32       `protobuf:"varint,3,rep,name=id" json:"id,omitempty"`
}

// Default values for UserInviteInviteLoginAwardCmd fields.
const (
	Default_UserInviteInviteLoginAwardCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_UserInviteInviteLoginAwardCmd_Param = ActivityParam_ACTIVITYPARAM_USERINVITE_INVITE_LOGIN_AWARD
)

func (x *UserInviteInviteLoginAwardCmd) Reset() {
	*x = UserInviteInviteLoginAwardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInviteInviteLoginAwardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInviteInviteLoginAwardCmd) ProtoMessage() {}

func (x *UserInviteInviteLoginAwardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInviteInviteLoginAwardCmd.ProtoReflect.Descriptor instead.
func (*UserInviteInviteLoginAwardCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{19}
}

func (x *UserInviteInviteLoginAwardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserInviteInviteLoginAwardCmd_Cmd
}

func (x *UserInviteInviteLoginAwardCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserInviteInviteLoginAwardCmd_Param
}

func (x *UserInviteInviteLoginAwardCmd) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type UserInviteRecallLoginAwardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=17" json:"param,omitempty"`
	Id    []uint32       `protobuf:"varint,3,rep,name=id" json:"id,omitempty"`
}

// Default values for UserInviteRecallLoginAwardCmd fields.
const (
	Default_UserInviteRecallLoginAwardCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_UserInviteRecallLoginAwardCmd_Param = ActivityParam_ACTIVITYPARAM_USERINVITE_RECALL_LOGIN_AWARD
)

func (x *UserInviteRecallLoginAwardCmd) Reset() {
	*x = UserInviteRecallLoginAwardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInviteRecallLoginAwardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInviteRecallLoginAwardCmd) ProtoMessage() {}

func (x *UserInviteRecallLoginAwardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInviteRecallLoginAwardCmd.ProtoReflect.Descriptor instead.
func (*UserInviteRecallLoginAwardCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{20}
}

func (x *UserInviteRecallLoginAwardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserInviteRecallLoginAwardCmd_Cmd
}

func (x *UserInviteRecallLoginAwardCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserInviteRecallLoginAwardCmd_Param
}

func (x *UserInviteRecallLoginAwardCmd) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type UserReturnQuestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *EUserReturnQuestType `protobuf:"varint,1,opt,name=type,enum=Cmd.EUserReturnQuestType" json:"type,omitempty"`
	Id      *uint32               `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Process *uint32               `protobuf:"varint,3,opt,name=process" json:"process,omitempty"`
	Goal    *uint32               `protobuf:"varint,4,opt,name=goal" json:"goal,omitempty"`
	Awarded *bool                 `protobuf:"varint,5,opt,name=awarded" json:"awarded,omitempty"`
}

func (x *UserReturnQuestData) Reset() {
	*x = UserReturnQuestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReturnQuestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReturnQuestData) ProtoMessage() {}

func (x *UserReturnQuestData) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReturnQuestData.ProtoReflect.Descriptor instead.
func (*UserReturnQuestData) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{21}
}

func (x *UserReturnQuestData) GetType() EUserReturnQuestType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EUserReturnQuestType_EUSERRETURN_QUESTTYPE_NONE
}

func (x *UserReturnQuestData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *UserReturnQuestData) GetProcess() uint32 {
	if x != nil && x.Process != nil {
		return *x.Process
	}
	return 0
}

func (x *UserReturnQuestData) GetGoal() uint32 {
	if x != nil && x.Goal != nil {
		return *x.Goal
	}
	return 0
}

func (x *UserReturnQuestData) GetAwarded() bool {
	if x != nil && x.Awarded != nil {
		return *x.Awarded
	}
	return false
}

type UserReturnInfoCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command               `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param    *ActivityParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=18" json:"param,omitempty"`
	Endtime  *uint32                `protobuf:"varint,3,opt,name=endtime" json:"endtime,omitempty"`
	Loginday *uint32                `protobuf:"varint,4,opt,name=loginday" json:"loginday,omitempty"`
	Awardday []uint32               `protobuf:"varint,5,rep,name=awardday" json:"awardday,omitempty"`
	Quests   []*UserReturnQuestData `protobuf:"bytes,6,rep,name=quests" json:"quests,omitempty"`
}

// Default values for UserReturnInfoCmd fields.
const (
	Default_UserReturnInfoCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_UserReturnInfoCmd_Param = ActivityParam_ACTIVITYPARAM_USERRETURN_INFO
)

func (x *UserReturnInfoCmd) Reset() {
	*x = UserReturnInfoCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReturnInfoCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReturnInfoCmd) ProtoMessage() {}

func (x *UserReturnInfoCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReturnInfoCmd.ProtoReflect.Descriptor instead.
func (*UserReturnInfoCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{22}
}

func (x *UserReturnInfoCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserReturnInfoCmd_Cmd
}

func (x *UserReturnInfoCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserReturnInfoCmd_Param
}

func (x *UserReturnInfoCmd) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

func (x *UserReturnInfoCmd) GetLoginday() uint32 {
	if x != nil && x.Loginday != nil {
		return *x.Loginday
	}
	return 0
}

func (x *UserReturnInfoCmd) GetAwardday() []uint32 {
	if x != nil {
		return x.Awardday
	}
	return nil
}

func (x *UserReturnInfoCmd) GetQuests() []*UserReturnQuestData {
	if x != nil {
		return x.Quests
	}
	return nil
}

type UserReturnQuestAwardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param   *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=19" json:"param,omitempty"`
	Id      *uint32        `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Success *bool          `protobuf:"varint,4,opt,name=success,def=0" json:"success,omitempty"`
}

// Default values for UserReturnQuestAwardCmd fields.
const (
	Default_UserReturnQuestAwardCmd_Cmd     = Command_ACTIVITY_PROTOCMD
	Default_UserReturnQuestAwardCmd_Param   = ActivityParam_ACTIVITYPARAM_USERRETURN_QUEST_AWARD
	Default_UserReturnQuestAwardCmd_Success = bool(false)
)

func (x *UserReturnQuestAwardCmd) Reset() {
	*x = UserReturnQuestAwardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReturnQuestAwardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReturnQuestAwardCmd) ProtoMessage() {}

func (x *UserReturnQuestAwardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReturnQuestAwardCmd.ProtoReflect.Descriptor instead.
func (*UserReturnQuestAwardCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{23}
}

func (x *UserReturnQuestAwardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserReturnQuestAwardCmd_Cmd
}

func (x *UserReturnQuestAwardCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserReturnQuestAwardCmd_Param
}

func (x *UserReturnQuestAwardCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *UserReturnQuestAwardCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_UserReturnQuestAwardCmd_Success
}

type UserReturnQuestAddCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param *ActivityParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=20" json:"param,omitempty"`
	Quest *UserReturnQuestData `protobuf:"bytes,3,opt,name=quest" json:"quest,omitempty"`
}

// Default values for UserReturnQuestAddCmd fields.
const (
	Default_UserReturnQuestAddCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_UserReturnQuestAddCmd_Param = ActivityParam_ACTIVITYPARAM_USERRETURN_QUEST_ADD
)

func (x *UserReturnQuestAddCmd) Reset() {
	*x = UserReturnQuestAddCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReturnQuestAddCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReturnQuestAddCmd) ProtoMessage() {}

func (x *UserReturnQuestAddCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReturnQuestAddCmd.ProtoReflect.Descriptor instead.
func (*UserReturnQuestAddCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{24}
}

func (x *UserReturnQuestAddCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserReturnQuestAddCmd_Cmd
}

func (x *UserReturnQuestAddCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserReturnQuestAddCmd_Param
}

func (x *UserReturnQuestAddCmd) GetQuest() *UserReturnQuestData {
	if x != nil {
		return x.Quest
	}
	return nil
}

type UserReturnEnterChatRoomCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param   *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=21" json:"param,omitempty"`
	Success *bool          `protobuf:"varint,3,opt,name=success,def=0" json:"success,omitempty"`
}

// Default values for UserReturnEnterChatRoomCmd fields.
const (
	Default_UserReturnEnterChatRoomCmd_Cmd     = Command_ACTIVITY_PROTOCMD
	Default_UserReturnEnterChatRoomCmd_Param   = ActivityParam_ACTIVITYPARAM_USERRETURN_ENTER_CHATROOM
	Default_UserReturnEnterChatRoomCmd_Success = bool(false)
)

func (x *UserReturnEnterChatRoomCmd) Reset() {
	*x = UserReturnEnterChatRoomCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReturnEnterChatRoomCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReturnEnterChatRoomCmd) ProtoMessage() {}

func (x *UserReturnEnterChatRoomCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReturnEnterChatRoomCmd.ProtoReflect.Descriptor instead.
func (*UserReturnEnterChatRoomCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{25}
}

func (x *UserReturnEnterChatRoomCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserReturnEnterChatRoomCmd_Cmd
}

func (x *UserReturnEnterChatRoomCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserReturnEnterChatRoomCmd_Param
}

func (x *UserReturnEnterChatRoomCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_UserReturnEnterChatRoomCmd_Success
}

type UserReturnLeaveChatRoomCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=22" json:"param,omitempty"`
}

// Default values for UserReturnLeaveChatRoomCmd fields.
const (
	Default_UserReturnLeaveChatRoomCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_UserReturnLeaveChatRoomCmd_Param = ActivityParam_ACTIVITYPARAM_USERRETURN_LEAVE_CHATROOM
)

func (x *UserReturnLeaveChatRoomCmd) Reset() {
	*x = UserReturnLeaveChatRoomCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReturnLeaveChatRoomCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReturnLeaveChatRoomCmd) ProtoMessage() {}

func (x *UserReturnLeaveChatRoomCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReturnLeaveChatRoomCmd.ProtoReflect.Descriptor instead.
func (*UserReturnLeaveChatRoomCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{26}
}

func (x *UserReturnLeaveChatRoomCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserReturnLeaveChatRoomCmd_Cmd
}

func (x *UserReturnLeaveChatRoomCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserReturnLeaveChatRoomCmd_Param
}

type UserReturnLoginAwardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=23" json:"param,omitempty"`
	Day   []uint32       `protobuf:"varint,3,rep,name=day" json:"day,omitempty"`
}

// Default values for UserReturnLoginAwardCmd fields.
const (
	Default_UserReturnLoginAwardCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_UserReturnLoginAwardCmd_Param = ActivityParam_ACTIVITYPARAM_USERRETURN_LOGINAWARD
)

func (x *UserReturnLoginAwardCmd) Reset() {
	*x = UserReturnLoginAwardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReturnLoginAwardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReturnLoginAwardCmd) ProtoMessage() {}

func (x *UserReturnLoginAwardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReturnLoginAwardCmd.ProtoReflect.Descriptor instead.
func (*UserReturnLoginAwardCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{27}
}

func (x *UserReturnLoginAwardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserReturnLoginAwardCmd_Cmd
}

func (x *UserReturnLoginAwardCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserReturnLoginAwardCmd_Param
}

func (x *UserReturnLoginAwardCmd) GetDay() []uint32 {
	if x != nil {
		return x.Day
	}
	return nil
}

type UserReturnChatRecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recorid *uint64     `protobuf:"varint,1,opt,name=recorid" json:"recorid,omitempty"`
	Msg     *ChatRetCmd `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (x *UserReturnChatRecordData) Reset() {
	*x = UserReturnChatRecordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReturnChatRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReturnChatRecordData) ProtoMessage() {}

func (x *UserReturnChatRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReturnChatRecordData.ProtoReflect.Descriptor instead.
func (*UserReturnChatRecordData) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{28}
}

func (x *UserReturnChatRecordData) GetRecorid() uint64 {
	if x != nil && x.Recorid != nil {
		return *x.Recorid
	}
	return 0
}

func (x *UserReturnChatRecordData) GetMsg() *ChatRetCmd {
	if x != nil {
		return x.Msg
	}
	return nil
}

type UserReturnChatRoomRecordCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command                    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param      *ActivityParam              `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=24" json:"param,omitempty"`
	Minrecorid *uint64                     `protobuf:"varint,3,opt,name=minrecorid" json:"minrecorid,omitempty"`
	Records    []*UserReturnChatRecordData `protobuf:"bytes,4,rep,name=records" json:"records,omitempty"`
}

// Default values for UserReturnChatRoomRecordCmd fields.
const (
	Default_UserReturnChatRoomRecordCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_UserReturnChatRoomRecordCmd_Param = ActivityParam_ACTIVITYPARAM_USERRETURN_CHATRECORD
)

func (x *UserReturnChatRoomRecordCmd) Reset() {
	*x = UserReturnChatRoomRecordCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReturnChatRoomRecordCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReturnChatRoomRecordCmd) ProtoMessage() {}

func (x *UserReturnChatRoomRecordCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReturnChatRoomRecordCmd.ProtoReflect.Descriptor instead.
func (*UserReturnChatRoomRecordCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{29}
}

func (x *UserReturnChatRoomRecordCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserReturnChatRoomRecordCmd_Cmd
}

func (x *UserReturnChatRoomRecordCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserReturnChatRoomRecordCmd_Param
}

func (x *UserReturnChatRoomRecordCmd) GetMinrecorid() uint64 {
	if x != nil && x.Minrecorid != nil {
		return *x.Minrecorid
	}
	return 0
}

func (x *UserReturnChatRoomRecordCmd) GetRecords() []*UserReturnChatRecordData {
	if x != nil {
		return x.Records
	}
	return nil
}

type UserReturnRaidAwardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=25" json:"param,omitempty"`
}

// Default values for UserReturnRaidAwardCmd fields.
const (
	Default_UserReturnRaidAwardCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_UserReturnRaidAwardCmd_Param = ActivityParam_ACTIVITYPARAM_USERRETURN_RAIDAWARD
)

func (x *UserReturnRaidAwardCmd) Reset() {
	*x = UserReturnRaidAwardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReturnRaidAwardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReturnRaidAwardCmd) ProtoMessage() {}

func (x *UserReturnRaidAwardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReturnRaidAwardCmd.ProtoReflect.Descriptor instead.
func (*UserReturnRaidAwardCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{30}
}

func (x *UserReturnRaidAwardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserReturnRaidAwardCmd_Cmd
}

func (x *UserReturnRaidAwardCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserReturnRaidAwardCmd_Param
}

type WishInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Charid   *uint64 `protobuf:"varint,2,opt,name=charid" json:"charid,omitempty"`
	Charname *string `protobuf:"bytes,3,opt,name=charname" json:"charname,omitempty"`
	Text     *string `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	Likenum  *uint32 `protobuf:"varint,5,opt,name=likenum" json:"likenum,omitempty"`
	Likeed   *bool   `protobuf:"varint,6,opt,name=likeed" json:"likeed,omitempty"`
}

func (x *WishInfo) Reset() {
	*x = WishInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WishInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WishInfo) ProtoMessage() {}

func (x *WishInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WishInfo.ProtoReflect.Descriptor instead.
func (*WishInfo) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{31}
}

func (x *WishInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *WishInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *WishInfo) GetCharname() string {
	if x != nil && x.Charname != nil {
		return *x.Charname
	}
	return ""
}

func (x *WishInfo) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *WishInfo) GetLikenum() uint32 {
	if x != nil && x.Likenum != nil {
		return *x.Likenum
	}
	return 0
}

func (x *WishInfo) GetLikeed() bool {
	if x != nil && x.Likeed != nil {
		return *x.Likeed
	}
	return false
}

type WishActivityInfoCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param      *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=30" json:"param,omitempty"`
	Mywish     *WishInfo      `protobuf:"bytes,3,opt,name=mywish" json:"mywish,omitempty"`
	Randomwish []*WishInfo    `protobuf:"bytes,4,rep,name=randomwish" json:"randomwish,omitempty"`
}

// Default values for WishActivityInfoCmd fields.
const (
	Default_WishActivityInfoCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_WishActivityInfoCmd_Param = ActivityParam_ACTIVITYPARAM_WISHACTIVITY_INFO
)

func (x *WishActivityInfoCmd) Reset() {
	*x = WishActivityInfoCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WishActivityInfoCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WishActivityInfoCmd) ProtoMessage() {}

func (x *WishActivityInfoCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WishActivityInfoCmd.ProtoReflect.Descriptor instead.
func (*WishActivityInfoCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{32}
}

func (x *WishActivityInfoCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_WishActivityInfoCmd_Cmd
}

func (x *WishActivityInfoCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_WishActivityInfoCmd_Param
}

func (x *WishActivityInfoCmd) GetMywish() *WishInfo {
	if x != nil {
		return x.Mywish
	}
	return nil
}

func (x *WishActivityInfoCmd) GetRandomwish() []*WishInfo {
	if x != nil {
		return x.Randomwish
	}
	return nil
}

type WishActivityWishCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param   *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=31" json:"param,omitempty"`
	Text    *string        `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	Success *bool          `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
}

// Default values for WishActivityWishCmd fields.
const (
	Default_WishActivityWishCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_WishActivityWishCmd_Param = ActivityParam_ACTIVITYPARAM_WISHACTIVITY_WISH
)

func (x *WishActivityWishCmd) Reset() {
	*x = WishActivityWishCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WishActivityWishCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WishActivityWishCmd) ProtoMessage() {}

func (x *WishActivityWishCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WishActivityWishCmd.ProtoReflect.Descriptor instead.
func (*WishActivityWishCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{33}
}

func (x *WishActivityWishCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_WishActivityWishCmd_Cmd
}

func (x *WishActivityWishCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_WishActivityWishCmd_Param
}

func (x *WishActivityWishCmd) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *WishActivityWishCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type WishActivityLikeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param  *ActivityParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=32" json:"param,omitempty"`
	Id     *uint32        `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Cancel *bool          `protobuf:"varint,4,opt,name=cancel" json:"cancel,omitempty"`
}

// Default values for WishActivityLikeCmd fields.
const (
	Default_WishActivityLikeCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_WishActivityLikeCmd_Param = ActivityParam_ACTIVITYPARAM_WISHACTIVITY_LIKE
)

func (x *WishActivityLikeCmd) Reset() {
	*x = WishActivityLikeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WishActivityLikeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WishActivityLikeCmd) ProtoMessage() {}

func (x *WishActivityLikeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WishActivityLikeCmd.ProtoReflect.Descriptor instead.
func (*WishActivityLikeCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{34}
}

func (x *WishActivityLikeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_WishActivityLikeCmd_Cmd
}

func (x *WishActivityLikeCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_WishActivityLikeCmd_Param
}

func (x *WishActivityLikeCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *WishActivityLikeCmd) GetCancel() bool {
	if x != nil && x.Cancel != nil {
		return *x.Cancel
	}
	return false
}

type WishLikeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recordid *uint64 `protobuf:"varint,1,opt,name=recordid" json:"recordid,omitempty"`
	Charid   *uint64 `protobuf:"varint,2,opt,name=charid" json:"charid,omitempty"`
	Charname *string `protobuf:"bytes,3,opt,name=charname" json:"charname,omitempty"`
	Time     *uint32 `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
}

func (x *WishLikeRecord) Reset() {
	*x = WishLikeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WishLikeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WishLikeRecord) ProtoMessage() {}

func (x *WishLikeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WishLikeRecord.ProtoReflect.Descriptor instead.
func (*WishLikeRecord) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{35}
}

func (x *WishLikeRecord) GetRecordid() uint64 {
	if x != nil && x.Recordid != nil {
		return *x.Recordid
	}
	return 0
}

func (x *WishLikeRecord) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *WishLikeRecord) GetCharname() string {
	if x != nil && x.Charname != nil {
		return *x.Charname
	}
	return ""
}

func (x *WishLikeRecord) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type WishActivityLikeRecordCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=60" json:"cmd,omitempty"`
	Param    *ActivityParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityParam,def=33" json:"param,omitempty"`
	Id       *uint32           `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Recordid *uint64           `protobuf:"varint,4,opt,name=recordid" json:"recordid,omitempty"`
	Record   []*WishLikeRecord `protobuf:"bytes,5,rep,name=record" json:"record,omitempty"`
}

// Default values for WishActivityLikeRecordCmd fields.
const (
	Default_WishActivityLikeRecordCmd_Cmd   = Command_ACTIVITY_PROTOCMD
	Default_WishActivityLikeRecordCmd_Param = ActivityParam_ACTIVITYPARAM_WISHACTIVITY_LIKE_RECORD
)

func (x *WishActivityLikeRecordCmd) Reset() {
	*x = WishActivityLikeRecordCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityCmd_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WishActivityLikeRecordCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WishActivityLikeRecordCmd) ProtoMessage() {}

func (x *WishActivityLikeRecordCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityCmd_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WishActivityLikeRecordCmd.ProtoReflect.Descriptor instead.
func (*WishActivityLikeRecordCmd) Descriptor() ([]byte, []int) {
	return file_ActivityCmd_proto_rawDescGZIP(), []int{36}
}

func (x *WishActivityLikeRecordCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_WishActivityLikeRecordCmd_Cmd
}

func (x *WishActivityLikeRecordCmd) GetParam() ActivityParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_WishActivityLikeRecordCmd_Param
}

func (x *WishActivityLikeRecordCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *WishActivityLikeRecordCmd) GetRecordid() uint64 {
	if x != nil && x.Recordid != nil {
		return *x.Recordid
	}
	return 0
}

func (x *WishActivityLikeRecordCmd) GetRecord() []*WishLikeRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

var File_ActivityCmd_proto protoreflect.FileDescriptor

var file_ActivityCmd_proto_rawDesc = []byte{
	0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x68, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x6e, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x09, 0x75, 0x6e, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x70, 0x22, 0xac, 0x01, 0x0a, 0x0b, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x63, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x41, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x63, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x0a, 0x53, 0x74,
	0x6f, 0x70, 0x41, 0x63, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43,
	0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xab, 0x01,
	0x0a, 0x10, 0x42, 0x43, 0x61, 0x74, 0x55, 0x46, 0x4f, 0x50, 0x6f, 0x73, 0x41, 0x63, 0x74, 0x43,
	0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x43, 0x41, 0x54, 0x5f, 0x55, 0x46, 0x4f,
	0x50, 0x4f, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0f,
	0x41, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x74, 0x66, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1a, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0xc7, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x41, 0x63, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7c, 0x0a, 0x10, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x63, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x17, 0x41, 0x63,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x4e,
	0x74, 0x66, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x63, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64,
	0x78, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x22, 0xeb, 0x02, 0x0a,
	0x14, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x61,
	0x67, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x50, 0x41, 0x47, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x63, 0x74, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x41, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x6f, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x63,
	0x6f, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x71, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x22, 0xa2, 0x01, 0x0a, 0x14, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x63, 0x74,
	0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xfc, 0x03, 0x0a, 0x1d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6d,
	0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x54, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x2a, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x44, 0x4f,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x51, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x3a, 0x1d, 0x45, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c,
	0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x47,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a,
	0x11, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x6f, 0x6d, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x11, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x6f, 0x6d, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x76, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x76, 0x61, 0x6c,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x61,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xdd,
	0x01, 0x0a, 0x1f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x43,
	0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x56, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x2c, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x44,
	0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12,
	0x1d, 0x0a, 0x06, 0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x22, 0xaa,
	0x02, 0x0a, 0x1e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6d,
	0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x55, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x2b, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x44, 0x4f,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x57, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x4f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x3a, 0x1d, 0x45, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c,
	0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x06,
	0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x06, 0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x22, 0x9f, 0x04, 0x0a, 0x11,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6d,
	0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x64, 0x61, 0x79, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x61, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x61, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x64, 0x61, 0x79, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x61, 0x77, 0x61, 0x72, 0x64, 0x64, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x64, 0x64, 0x69, 0x64, 0x22, 0xd7, 0x01,
	0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4c, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x06, 0x73, 0x75, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x06, 0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x25, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x57, 0x41, 0x52,
	0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x06, 0x73, 0x75, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x06, 0x73, 0x75, 0x63, 0x65, 0x73, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x24, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x06, 0x73, 0x75, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x73,
	0x75, 0x63, 0x65, 0x73, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x55, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x2b, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x4c,
	0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xb9, 0x01, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x55, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x2b, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e,
	0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9c, 0x01,
	0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f,
	0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x22, 0x93, 0x02, 0x0a,
	0x11, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54, 0x55,
	0x52, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x77, 0x61, 0x72, 0x64, 0x64, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x77, 0x61, 0x72, 0x64, 0x64, 0x61, 0x79,
	0x12, 0x30, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x31,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x4e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x24, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x4c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc3, 0x01,
	0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x51, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x52, 0x4f, 0x4f, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x43,
	0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x51, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54, 0x55,
	0x52, 0x4e, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x52, 0x4f, 0x4f,
	0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xad, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x23, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45,
	0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x41, 0x57, 0x41, 0x52, 0x44, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0x57, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x74, 0x43, 0x6d, 0x64, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0xf8, 0x01, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6d,
	0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x4d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54, 0x55, 0x52,
	0x4e, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x99, 0x01, 0x0a,
	0x16, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x61, 0x69, 0x64, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4c, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x41, 0x57, 0x41, 0x52,
	0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x94, 0x01, 0x0a, 0x08, 0x57, 0x69, 0x73,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x68, 0x61, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x69, 0x6b, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6c, 0x69, 0x6b, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6b, 0x65, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x69, 0x6b, 0x65, 0x65, 0x64, 0x22,
	0xe9, 0x01, 0x0a, 0x13, 0x57, 0x69, 0x73, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x57, 0x49, 0x53,
	0x48, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x06, 0x6d, 0x79, 0x77, 0x69, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x69, 0x73, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x79, 0x77, 0x69, 0x73, 0x68, 0x12, 0x2d, 0x0a, 0x0a,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x77, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x77, 0x69, 0x73, 0x68, 0x22, 0xc1, 0x01, 0x0a, 0x13,
	0x57, 0x69, 0x73, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x57, 0x69, 0x73, 0x68,
	0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x57, 0x49, 0x53, 0x48, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x49, 0x53, 0x48, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0xbb, 0x01, 0x0a, 0x13, 0x57, 0x69, 0x73, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x57, 0x49, 0x53,
	0x48, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x22, 0x74, 0x0a,
	0x0e, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x19, 0x57, 0x69, 0x73, 0x68, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6d,
	0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x50, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x26, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x57, 0x49, 0x53, 0x48, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x6b,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2a,
	0x94, 0x09, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x42, 0x43, 0x41, 0x54, 0x5f, 0x55, 0x46, 0x4f, 0x50, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a,
	0x1a, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x03, 0x12, 0x1a, 0x0a,
	0x16, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41,
	0x43, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x05, 0x12, 0x25, 0x0a,
	0x21, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x4e,
	0x54, 0x46, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x53, 0x48, 0x4f, 0x50, 0x50, 0x41, 0x47, 0x45, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x4e, 0x49, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x08, 0x12, 0x2e, 0x0a,
	0x2a, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47,
	0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x09, 0x12, 0x30, 0x0a,
	0x2c, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47,
	0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12,
	0x2f, 0x0a, 0x2b, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10, 0x0b,
	0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x0c, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f,
	0x42, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x29, 0x0a, 0x25, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x41,
	0x57, 0x41, 0x52, 0x44, 0x10, 0x0e, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10, 0x0f,
	0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10,
	0x10, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44,
	0x10, 0x11, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x12, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54, 0x55, 0x52,
	0x4e, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10, 0x13, 0x12,
	0x26, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x14, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54,
	0x55, 0x52, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x52, 0x4f,
	0x4f, 0x4d, 0x10, 0x15, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e,
	0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x52, 0x4f, 0x4f, 0x4d, 0x10,
	0x16, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4c, 0x4f,
	0x47, 0x49, 0x4e, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10, 0x17, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x10, 0x18, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f,
	0x52, 0x41, 0x49, 0x44, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10, 0x19, 0x12, 0x23, 0x0a, 0x1f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x57, 0x49, 0x53,
	0x48, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x1e,
	0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x57, 0x49, 0x53, 0x48, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x57,
	0x49, 0x53, 0x48, 0x10, 0x1f, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x57, 0x49, 0x53, 0x48, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x20, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x57, 0x49, 0x53, 0x48,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x10, 0x21, 0x2a, 0xbe, 0x0c, 0x0a, 0x12, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55,
	0x47, 0x55, 0x52, 0x59, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x10, 0x12, 0x19, 0x0a,
	0x15, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x57, 0x45, 0x4c,
	0x46, 0x41, 0x52, 0x45, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x41, 0x46, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0x15, 0x12, 0x22,
	0x0a, 0x1e, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x41, 0x46, 0x45,
	0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x17, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x50, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x4f, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x10, 0x18, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x1a, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x50, 0x45, 0x10, 0x1b,
	0x12, 0x18, 0x0a, 0x14, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x1c, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x45,
	0x58, 0x54, 0x52, 0x41, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x1e, 0x12, 0x1d, 0x0a,
	0x19, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x1f, 0x12, 0x20, 0x0a, 0x1c,
	0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45,
	0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x20, 0x12, 0x20,
	0x0a, 0x1c, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x41, 0x52, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x21,
	0x12, 0x18, 0x0a, 0x14, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x10, 0x22, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x10, 0x33, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x3c, 0x12,
	0x1a, 0x0a, 0x16, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x49, 0x44,
	0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x46, 0x12, 0x2a, 0x0a, 0x26, 0x47,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x4c,
	0x4f, 0x47, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x4c, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x50, 0x12, 0x25, 0x0a, 0x21, 0x47, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x51, 0x12, 0x1e,
	0x0a, 0x1a, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x10, 0x52, 0x12, 0x1b,
	0x0a, 0x17, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4b, 0x55, 0x4d, 0x41,
	0x4d, 0x4f, 0x54, 0x4f, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x10, 0x5a, 0x12, 0x14, 0x0a, 0x10, 0x47,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x54, 0x4d, 0x41, 0x4e, 0x10,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x4b, 0x53, 0x47, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x66, 0x12, 0x19, 0x0a,
	0x15, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x50, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x10, 0x67, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x78,
	0x12, 0x16, 0x0a, 0x11, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45,
	0x4e, 0x52, 0x4f, 0x43, 0x4f, 0x10, 0xe9, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x47, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x54, 0x50, 0x4f, 0x4c, 0x4c, 0x59, 0x10, 0xeb,
	0x07, 0x12, 0x1c, 0x0a, 0x17, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x10, 0xec, 0x07, 0x12,
	0x15, 0x0a, 0x10, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x55, 0x5a,
	0x5a, 0x4c, 0x45, 0x10, 0xed, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x42, 0x49, 0x46, 0x52, 0x4f, 0x53, 0x54, 0x10, 0xee, 0x07, 0x12, 0x1f,
	0x0a, 0x1a, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0xef, 0x07, 0x12,
	0x17, 0x0a, 0x12, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x55, 0x5a,
	0x5a, 0x4c, 0x45, 0x5f, 0x32, 0x10, 0xf0, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x47, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x33, 0x10, 0xf1,
	0x07, 0x12, 0x17, 0x0a, 0x12, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50,
	0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x34, 0x10, 0xf2, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x47, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x45, 0x49, 0x4d, 0x44, 0x41, 0x4c, 0x4c,
	0x52, 0x5f, 0x45, 0x59, 0x45, 0x10, 0xf4, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x47, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x52, 0x4f, 0x10, 0xf5, 0x07, 0x12,
	0x16, 0x0a, 0x11, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x4f, 0x4e, 0x10, 0xf6, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x47, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53,
	0x48, 0x4f, 0x50, 0x10, 0xf7, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x42,
	0x4f, 0x4f, 0x4b, 0x10, 0xf8, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0xf9, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x47, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x10, 0xfa,
	0x07, 0x12, 0x15, 0x0a, 0x10, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x4f, 0x4e, 0x41, 0x54, 0x45, 0x10, 0xfd, 0x07, 0x12, 0x24, 0x0a, 0x1f, 0x47, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x5f, 0x43, 0x48, 0x41,
	0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x86, 0x08, 0x12, 0x1b,
	0x0a, 0x16, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x4e,
	0x45, 0x59, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x87, 0x08, 0x12, 0x1b, 0x0a, 0x16, 0x47,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x5f,
	0x4d, 0x55, 0x53, 0x49, 0x43, 0x10, 0x88, 0x08, 0x12, 0x1c, 0x0a, 0x17, 0x47, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x44, 0x4f, 0x4e,
	0x41, 0x54, 0x45, 0x10, 0x90, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10,
	0x91, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x92, 0x08, 0x12, 0x13,
	0x0a, 0x0e, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x49, 0x53, 0x48,
	0x10, 0x94, 0x08, 0x12, 0x12, 0x0a, 0x0d, 0x47, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0x95, 0x08, 0x2a, 0xe2, 0x01, 0x0a, 0x0c, 0x45, 0x41, 0x63, 0x74,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x41, 0x43, 0x54,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x41, 0x43, 0x54, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x31, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x41, 0x43, 0x54, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x41, 0x43, 0x54, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x41, 0x43, 0x54, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x34, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x41, 0x43, 0x54, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x35, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x41, 0x43, 0x54, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x36, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x41, 0x43, 0x54, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x41, 0x43, 0x54, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x10, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x41, 0x43, 0x54, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x65, 0x2a, 0x86, 0x01, 0x0a,
	0x17, 0x45, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x43, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x45,
	0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x43,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x44, 0x4f, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53,
	0x48, 0x4f, 0x57, 0x10, 0x02, 0x2a, 0x88, 0x01, 0x0a, 0x17, 0x45, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x44, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x44, 0x4f, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x44,
	0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44,
	0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x45,
	0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x43,
	0x54, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x02,
	0x2a, 0x9a, 0x01, 0x0a, 0x14, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x55,
	0x53, 0x45, 0x52, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x45, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x03,
}

var (
	file_ActivityCmd_proto_rawDescOnce sync.Once
	file_ActivityCmd_proto_rawDescData = file_ActivityCmd_proto_rawDesc
)

func file_ActivityCmd_proto_rawDescGZIP() []byte {
	file_ActivityCmd_proto_rawDescOnce.Do(func() {
		file_ActivityCmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_ActivityCmd_proto_rawDescData)
	})
	return file_ActivityCmd_proto_rawDescData
}

var file_ActivityCmd_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_ActivityCmd_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_ActivityCmd_proto_goTypes = []interface{}{
	(ActivityParam)(0),                      // 0: Cmd.ActivityParam
	(GlobalActivityType)(0),                 // 1: Cmd.GlobalActivityType
	(EActProgress)(0),                       // 2: Cmd.EActProgress
	(EGlobalDonationActStage)(0),            // 3: Cmd.EGlobalDonationActStage
	(EGlobalDonationActAward)(0),            // 4: Cmd.EGlobalDonationActAward
	(EUserReturnQuestType)(0),               // 5: Cmd.EUserReturnQuestType
	(*StartActItem)(nil),                    // 6: Cmd.StartActItem
	(*StartActCmd)(nil),                     // 7: Cmd.StartActCmd
	(*StopActCmd)(nil),                      // 8: Cmd.StopActCmd
	(*BCatUFOPosActCmd)(nil),                // 9: Cmd.BCatUFOPosActCmd
	(*ActProgressItem)(nil),                 // 10: Cmd.ActProgressItem
	(*ActProgressNtfCmd)(nil),               // 11: Cmd.ActProgressNtfCmd
	(*StartGlobalActCmd)(nil),               // 12: Cmd.StartGlobalActCmd
	(*ActivityProgress)(nil),                // 13: Cmd.ActivityProgress
	(*ActProgressExceptNtfCmd)(nil),         // 14: Cmd.ActProgressExceptNtfCmd
	(*ActTimeLimitShopItem)(nil),            // 15: Cmd.ActTimeLimitShopItem
	(*TimeLimitShopPageCmd)(nil),            // 16: Cmd.TimeLimitShopPageCmd
	(*AnimationLoginActCmd)(nil),            // 17: Cmd.AnimationLoginActCmd
	(*GlobalDonationActivityInfoCmd)(nil),   // 18: Cmd.GlobalDonationActivityInfoCmd
	(*GlobalDonationActivityDonateCmd)(nil), // 19: Cmd.GlobalDonationActivityDonateCmd
	(*GlobalDonationActivityAwardCmd)(nil),  // 20: Cmd.GlobalDonationActivityAwardCmd
	(*UserInviteInfoCmd)(nil),               // 21: Cmd.UserInviteInfoCmd
	(*UserInviteBindUserCmd)(nil),           // 22: Cmd.UserInviteBindUserCmd
	(*UserInviteInviteAwardCmd)(nil),        // 23: Cmd.UserInviteInviteAwardCmd
	(*UserInviteShareAwardCmd)(nil),         // 24: Cmd.UserInviteShareAwardCmd
	(*UserInviteInviteLoginAwardCmd)(nil),   // 25: Cmd.UserInviteInviteLoginAwardCmd
	(*UserInviteRecallLoginAwardCmd)(nil),   // 26: Cmd.UserInviteRecallLoginAwardCmd
	(*UserReturnQuestData)(nil),             // 27: Cmd.UserReturnQuestData
	(*UserReturnInfoCmd)(nil),               // 28: Cmd.UserReturnInfoCmd
	(*UserReturnQuestAwardCmd)(nil),         // 29: Cmd.UserReturnQuestAwardCmd
	(*UserReturnQuestAddCmd)(nil),           // 30: Cmd.UserReturnQuestAddCmd
	(*UserReturnEnterChatRoomCmd)(nil),      // 31: Cmd.UserReturnEnterChatRoomCmd
	(*UserReturnLeaveChatRoomCmd)(nil),      // 32: Cmd.UserReturnLeaveChatRoomCmd
	(*UserReturnLoginAwardCmd)(nil),         // 33: Cmd.UserReturnLoginAwardCmd
	(*UserReturnChatRecordData)(nil),        // 34: Cmd.UserReturnChatRecordData
	(*UserReturnChatRoomRecordCmd)(nil),     // 35: Cmd.UserReturnChatRoomRecordCmd
	(*UserReturnRaidAwardCmd)(nil),          // 36: Cmd.UserReturnRaidAwardCmd
	(*WishInfo)(nil),                        // 37: Cmd.WishInfo
	(*WishActivityInfoCmd)(nil),             // 38: Cmd.WishActivityInfoCmd
	(*WishActivityWishCmd)(nil),             // 39: Cmd.WishActivityWishCmd
	(*WishActivityLikeCmd)(nil),             // 40: Cmd.WishActivityLikeCmd
	(*WishLikeRecord)(nil),                  // 41: Cmd.WishLikeRecord
	(*WishActivityLikeRecordCmd)(nil),       // 42: Cmd.WishActivityLikeRecordCmd
	(Command)(0),                            // 43: Cmd.Command
	(*ScenePos)(nil),                        // 44: Cmd.ScenePos
	(*ShopItem)(nil),                        // 45: Cmd.ShopItem
	(*ChatRetCmd)(nil),                      // 46: Cmd.ChatRetCmd
}
var file_ActivityCmd_proto_depIdxs = []int32{
	43, // 0: Cmd.StartActCmd.cmd:type_name -> Cmd.Command
	0,  // 1: Cmd.StartActCmd.param:type_name -> Cmd.ActivityParam
	6,  // 2: Cmd.StartActCmd.items:type_name -> Cmd.StartActItem
	43, // 3: Cmd.StopActCmd.cmd:type_name -> Cmd.Command
	0,  // 4: Cmd.StopActCmd.param:type_name -> Cmd.ActivityParam
	43, // 5: Cmd.BCatUFOPosActCmd.cmd:type_name -> Cmd.Command
	0,  // 6: Cmd.BCatUFOPosActCmd.param:type_name -> Cmd.ActivityParam
	44, // 7: Cmd.BCatUFOPosActCmd.pos:type_name -> Cmd.ScenePos
	2,  // 8: Cmd.ActProgressItem.progress:type_name -> Cmd.EActProgress
	43, // 9: Cmd.ActProgressNtfCmd.cmd:type_name -> Cmd.Command
	0,  // 10: Cmd.ActProgressNtfCmd.param:type_name -> Cmd.ActivityParam
	10, // 11: Cmd.ActProgressNtfCmd.items:type_name -> Cmd.ActProgressItem
	43, // 12: Cmd.StartGlobalActCmd.cmd:type_name -> Cmd.Command
	0,  // 13: Cmd.StartGlobalActCmd.param:type_name -> Cmd.ActivityParam
	1,  // 14: Cmd.StartGlobalActCmd.type:type_name -> Cmd.GlobalActivityType
	43, // 15: Cmd.ActProgressExceptNtfCmd.cmd:type_name -> Cmd.Command
	0,  // 16: Cmd.ActProgressExceptNtfCmd.param:type_name -> Cmd.ActivityParam
	45, // 17: Cmd.ActTimeLimitShopItem.item:type_name -> Cmd.ShopItem
	43, // 18: Cmd.TimeLimitShopPageCmd.cmd:type_name -> Cmd.Command
	0,  // 19: Cmd.TimeLimitShopPageCmd.param:type_name -> Cmd.ActivityParam
	15, // 20: Cmd.TimeLimitShopPageCmd.items:type_name -> Cmd.ActTimeLimitShopItem
	43, // 21: Cmd.AnimationLoginActCmd.cmd:type_name -> Cmd.Command
	0,  // 22: Cmd.AnimationLoginActCmd.param:type_name -> Cmd.ActivityParam
	43, // 23: Cmd.GlobalDonationActivityInfoCmd.cmd:type_name -> Cmd.Command
	0,  // 24: Cmd.GlobalDonationActivityInfoCmd.param:type_name -> Cmd.ActivityParam
	3,  // 25: Cmd.GlobalDonationActivityInfoCmd.stage:type_name -> Cmd.EGlobalDonationActStage
	43, // 26: Cmd.GlobalDonationActivityDonateCmd.cmd:type_name -> Cmd.Command
	0,  // 27: Cmd.GlobalDonationActivityDonateCmd.param:type_name -> Cmd.ActivityParam
	43, // 28: Cmd.GlobalDonationActivityAwardCmd.cmd:type_name -> Cmd.Command
	0,  // 29: Cmd.GlobalDonationActivityAwardCmd.param:type_name -> Cmd.ActivityParam
	4,  // 30: Cmd.GlobalDonationActivityAwardCmd.type:type_name -> Cmd.EGlobalDonationActAward
	43, // 31: Cmd.UserInviteInfoCmd.cmd:type_name -> Cmd.Command
	0,  // 32: Cmd.UserInviteInfoCmd.param:type_name -> Cmd.ActivityParam
	43, // 33: Cmd.UserInviteBindUserCmd.cmd:type_name -> Cmd.Command
	0,  // 34: Cmd.UserInviteBindUserCmd.param:type_name -> Cmd.ActivityParam
	43, // 35: Cmd.UserInviteInviteAwardCmd.cmd:type_name -> Cmd.Command
	0,  // 36: Cmd.UserInviteInviteAwardCmd.param:type_name -> Cmd.ActivityParam
	43, // 37: Cmd.UserInviteShareAwardCmd.cmd:type_name -> Cmd.Command
	0,  // 38: Cmd.UserInviteShareAwardCmd.param:type_name -> Cmd.ActivityParam
	43, // 39: Cmd.UserInviteInviteLoginAwardCmd.cmd:type_name -> Cmd.Command
	0,  // 40: Cmd.UserInviteInviteLoginAwardCmd.param:type_name -> Cmd.ActivityParam
	43, // 41: Cmd.UserInviteRecallLoginAwardCmd.cmd:type_name -> Cmd.Command
	0,  // 42: Cmd.UserInviteRecallLoginAwardCmd.param:type_name -> Cmd.ActivityParam
	5,  // 43: Cmd.UserReturnQuestData.type:type_name -> Cmd.EUserReturnQuestType
	43, // 44: Cmd.UserReturnInfoCmd.cmd:type_name -> Cmd.Command
	0,  // 45: Cmd.UserReturnInfoCmd.param:type_name -> Cmd.ActivityParam
	27, // 46: Cmd.UserReturnInfoCmd.quests:type_name -> Cmd.UserReturnQuestData
	43, // 47: Cmd.UserReturnQuestAwardCmd.cmd:type_name -> Cmd.Command
	0,  // 48: Cmd.UserReturnQuestAwardCmd.param:type_name -> Cmd.ActivityParam
	43, // 49: Cmd.UserReturnQuestAddCmd.cmd:type_name -> Cmd.Command
	0,  // 50: Cmd.UserReturnQuestAddCmd.param:type_name -> Cmd.ActivityParam
	27, // 51: Cmd.UserReturnQuestAddCmd.quest:type_name -> Cmd.UserReturnQuestData
	43, // 52: Cmd.UserReturnEnterChatRoomCmd.cmd:type_name -> Cmd.Command
	0,  // 53: Cmd.UserReturnEnterChatRoomCmd.param:type_name -> Cmd.ActivityParam
	43, // 54: Cmd.UserReturnLeaveChatRoomCmd.cmd:type_name -> Cmd.Command
	0,  // 55: Cmd.UserReturnLeaveChatRoomCmd.param:type_name -> Cmd.ActivityParam
	43, // 56: Cmd.UserReturnLoginAwardCmd.cmd:type_name -> Cmd.Command
	0,  // 57: Cmd.UserReturnLoginAwardCmd.param:type_name -> Cmd.ActivityParam
	46, // 58: Cmd.UserReturnChatRecordData.msg:type_name -> Cmd.ChatRetCmd
	43, // 59: Cmd.UserReturnChatRoomRecordCmd.cmd:type_name -> Cmd.Command
	0,  // 60: Cmd.UserReturnChatRoomRecordCmd.param:type_name -> Cmd.ActivityParam
	34, // 61: Cmd.UserReturnChatRoomRecordCmd.records:type_name -> Cmd.UserReturnChatRecordData
	43, // 62: Cmd.UserReturnRaidAwardCmd.cmd:type_name -> Cmd.Command
	0,  // 63: Cmd.UserReturnRaidAwardCmd.param:type_name -> Cmd.ActivityParam
	43, // 64: Cmd.WishActivityInfoCmd.cmd:type_name -> Cmd.Command
	0,  // 65: Cmd.WishActivityInfoCmd.param:type_name -> Cmd.ActivityParam
	37, // 66: Cmd.WishActivityInfoCmd.mywish:type_name -> Cmd.WishInfo
	37, // 67: Cmd.WishActivityInfoCmd.randomwish:type_name -> Cmd.WishInfo
	43, // 68: Cmd.WishActivityWishCmd.cmd:type_name -> Cmd.Command
	0,  // 69: Cmd.WishActivityWishCmd.param:type_name -> Cmd.ActivityParam
	43, // 70: Cmd.WishActivityLikeCmd.cmd:type_name -> Cmd.Command
	0,  // 71: Cmd.WishActivityLikeCmd.param:type_name -> Cmd.ActivityParam
	43, // 72: Cmd.WishActivityLikeRecordCmd.cmd:type_name -> Cmd.Command
	0,  // 73: Cmd.WishActivityLikeRecordCmd.param:type_name -> Cmd.ActivityParam
	41, // 74: Cmd.WishActivityLikeRecordCmd.record:type_name -> Cmd.WishLikeRecord
	75, // [75:75] is the sub-list for method output_type
	75, // [75:75] is the sub-list for method input_type
	75, // [75:75] is the sub-list for extension type_name
	75, // [75:75] is the sub-list for extension extendee
	0,  // [0:75] is the sub-list for field type_name
}

func init() { file_ActivityCmd_proto_init() }
func file_ActivityCmd_proto_init() {
	if File_ActivityCmd_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	file_SessionShop_proto_init()
	file_ChatCmd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ActivityCmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartActItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartActCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopActCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BCatUFOPosActCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActProgressItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActProgressNtfCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartGlobalActCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActProgressExceptNtfCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActTimeLimitShopItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeLimitShopPageCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnimationLoginActCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalDonationActivityInfoCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalDonationActivityDonateCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalDonationActivityAwardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInviteInfoCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInviteBindUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInviteInviteAwardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInviteShareAwardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInviteInviteLoginAwardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInviteRecallLoginAwardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReturnQuestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReturnInfoCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReturnQuestAwardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReturnQuestAddCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReturnEnterChatRoomCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReturnLeaveChatRoomCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReturnLoginAwardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReturnChatRecordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReturnChatRoomRecordCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReturnRaidAwardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WishInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WishActivityInfoCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WishActivityWishCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WishActivityLikeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WishLikeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityCmd_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WishActivityLikeRecordCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ActivityCmd_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ActivityCmd_proto_goTypes,
		DependencyIndexes: file_ActivityCmd_proto_depIdxs,
		EnumInfos:         file_ActivityCmd_proto_enumTypes,
		MessageInfos:      file_ActivityCmd_proto_msgTypes,
	}.Build()
	File_ActivityCmd_proto = out.File
	file_ActivityCmd_proto_rawDesc = nil
	file_ActivityCmd_proto_goTypes = nil
	file_ActivityCmd_proto_depIdxs = nil
}
