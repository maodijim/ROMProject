// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: SceneTip.proto

package Cmd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TipParam int32

const (
	TipParam_TIPPARAM_RED       TipParam = 1
	TipParam_TIPPARAM_BROWSE    TipParam = 2
	TipParam_TIPPARAM_ADDREDTIP TipParam = 3
	TipParam_TIPPARAM_MAX       TipParam = 4
)

// Enum value maps for TipParam.
var (
	TipParam_name = map[int32]string{
		1: "TIPPARAM_RED",
		2: "TIPPARAM_BROWSE",
		3: "TIPPARAM_ADDREDTIP",
		4: "TIPPARAM_MAX",
	}
	TipParam_value = map[string]int32{
		"TIPPARAM_RED":       1,
		"TIPPARAM_BROWSE":    2,
		"TIPPARAM_ADDREDTIP": 3,
		"TIPPARAM_MAX":       4,
	}
)

func (x TipParam) Enum() *TipParam {
	p := new(TipParam)
	*p = x
	return p
}

func (x TipParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TipParam) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneTip_proto_enumTypes[0].Descriptor()
}

func (TipParam) Type() protoreflect.EnumType {
	return &file_SceneTip_proto_enumTypes[0]
}

func (x TipParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TipParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TipParam(num)
	return nil
}

// Deprecated: Use TipParam.Descriptor instead.
func (TipParam) EnumDescriptor() ([]byte, []int) {
	return file_SceneTip_proto_rawDescGZIP(), []int{0}
}

type ERedSys int32

const (
	ERedSys_EREDSYS_MIN                        ERedSys = 0
	ERedSys_EREDSYS_ADD_POINT                  ERedSys = 1
	ERedSys_EREDSYS_NEW_PROFESSION             ERedSys = 2
	ERedSys_EREDSYS_PROFESSION_UP              ERedSys = 3
	ERedSys_EREDSYS_ROLE_IMG                   ERedSys = 4
	ERedSys_EREDSYS_MONSTER_IMG                ERedSys = 5
	ERedSys_EREDSYS_PHOTOFRAME                 ERedSys = 6
	ERedSys_EREDSYS_SKILL_POINT                ERedSys = 7
	ERedSys_EREDSYS_TEAMAPPLY                  ERedSys = 19
	ERedSys_EREDSYS_MANUAL_MONSTER             ERedSys = 20
	ERedSys_EREDSYS_MANUAL_HEAD                ERedSys = 21
	ERedSys_EREDSYS_MANUAL_FACE                ERedSys = 22
	ERedSys_EREDSYS_MANUAL_BACK                ERedSys = 23
	ERedSys_EREDSYS_MANUAL_TAIL                ERedSys = 24
	ERedSys_EREDSYS_MANUAL_CARD_WEAPON         ERedSys = 25
	ERedSys_EREDSYS_MANUAL_CARD_ASSISTANT      ERedSys = 26
	ERedSys_EREDSYS_MANUAL_CARD_ARMOUR         ERedSys = 27
	ERedSys_EREDSYS_MANUAL_CARD_ROBE           ERedSys = 28
	ERedSys_EREDSYS_MANUAL_CARD_SHOES          ERedSys = 29
	ERedSys_EREDSYS_MANUAL_CARD_ACCESSORY      ERedSys = 30
	ERedSys_EREDSYS_MANUAL_CARD_HEAD           ERedSys = 31
	ERedSys_EREDSYS_MANUAL_NPC                 ERedSys = 32
	ERedSys_EREDSYS_MANUAL_MOUNT               ERedSys = 33
	ERedSys_EREDSYS_SOCIAL_FRIEND_APPLY        ERedSys = 34
	ERedSys_EREDSYS_MANUAL_MONTHCARD           ERedSys = 35
	ERedSys_EREDSYS_MANUAL_NEWTAIL             ERedSys = 36
	ERedSys_EREDSYS_MANUAL_COLLECTION          ERedSys = 37
	ERedSys_EREDSYS_MANUAL_FOOD                ERedSys = 38
	ERedSys_EREDSYS_GUILD_APPLY                ERedSys = 40
	ERedSys_EREDSYS_GUILD_CHALLENGE_ADD        ERedSys = 41
	ERedSys_EREDSYS_GUILD_CHALLENGE_REWARD     ERedSys = 42
	ERedSys_EREDSYS_GUILD_ICON                 ERedSys = 43
	ERedSys_EREDSYS_PUZZLE                     ERedSys = 45
	ERedSys_EREDSYS_PRIVATE_CHAT               ERedSys = 50
	ERedSys_EREDSYS_MONSTER_PORTRAIT           ERedSys = 51
	ERedSys_EREDSYS_PORTRAIT_FRAME             ERedSys = 52
	ERedSys_EREDSYS_BACKGROUND_FRAME           ERedSys = 53
	ERedSys_EREDSYS_TRADE_RECORD               ERedSys = 60
	ERedSys_EREDSYS_PET_ADVENTURE              ERedSys = 70
	ERedSys_EREDSYS_TUTOR_TUTOR_UNLOCK         ERedSys = 80
	ERedSys_EREDSYS_TUTOR_STUDENT_UNLOCK       ERedSys = 81
	ERedSys_EREDSYS_TUTOR_APPLY                ERedSys = 82
	ERedSys_EREDSYS_TUTOR_TASK                 ERedSys = 83
	ERedSys_EREDSYS_TUTOR_GROW_REWARD          ERedSys = 85
	ERedSys_EREDSYS_TUTOR_BOX                  ERedSys = 86
	ERedSys_EREDSYS_MANUAL_PRONTERA            ERedSys = 101
	ERedSys_EREDSYS_MANUAL_GEFFEN              ERedSys = 102
	ERedSys_EREDSYS_MANUAL_MOROCC              ERedSys = 103
	ERedSys_EREDSYS_MANUAL_PAYON               ERedSys = 104
	ERedSys_EREDSYS_MANUAL_GLAST               ERedSys = 105
	ERedSys_EREDSYS_PACK_TEMP                  ERedSys = 106
	ERedSys_EREDSYS_AUCTION_RECORD             ERedSys = 84
	ERedSys_EREDSYS_PEAK_LEVEL                 ERedSys = 132
	ERedSys_EREDSYS_BEING_BODY                 ERedSys = 300
	ERedSys_EREDSYS_FUNCTION_OPENING           ERedSys = 310
	ERedSys_EREDSYS_SERVANT_RECOMMNED          ERedSys = 400
	ERedSys_EREDSYS_SERVANT_GROWTH             ERedSys = 401
	ERedSys_EREDSYS_SERVANT_GROWTH_STEP        ERedSys = 402
	ERedSys_EREDSYS_SERVANT_GROWTH_EP          ERedSys = 403
	ERedSys_EREDSYS_SERVANT_GROWTH_TIME        ERedSys = 404
	ERedSys_EREDSYS_SERVANT_RECOMMNED_DAY      ERedSys = 410
	ERedSys_EREDSYS_SERVANT_RECOMMNED_WEEK     ERedSys = 411
	ERedSys_EREDSYS_SERVANT_RECOMMNED_FOREVER  ERedSys = 412
	ERedSys_EREDSYS_SERVANT_RECOMMNED_SHORTCUT ERedSys = 413
	ERedSys_EREDSYS_DEAD_BOSS                  ERedSys = 600
	ERedSys_EREDSYS_SIGNIN_DAY                 ERedSys = 700
	ERedSys_EREDSYS_SIGNIN_ACTIVITY            ERedSys = 701
	ERedSys_EREDSYS_ACT_HITPOLLY_QUEST         ERedSys = 702
	ERedSys_EREDSYS_PAY_SIGN_BUY               ERedSys = 703
	ERedSys_EREDSYS_PAY_SIGN_REWARD            ERedSys = 704
	ERedSys_EREDSYS_GROUPON_LOGIN              ERedSys = 705
	ERedSys_EREDSYS_GROUPON_PROGRESS           ERedSys = 706
	ERedSys_EREDSYS_MAX                        ERedSys = 707
)

// Enum value maps for ERedSys.
var (
	ERedSys_name = map[int32]string{
		0:   "EREDSYS_MIN",
		1:   "EREDSYS_ADD_POINT",
		2:   "EREDSYS_NEW_PROFESSION",
		3:   "EREDSYS_PROFESSION_UP",
		4:   "EREDSYS_ROLE_IMG",
		5:   "EREDSYS_MONSTER_IMG",
		6:   "EREDSYS_PHOTOFRAME",
		7:   "EREDSYS_SKILL_POINT",
		19:  "EREDSYS_TEAMAPPLY",
		20:  "EREDSYS_MANUAL_MONSTER",
		21:  "EREDSYS_MANUAL_HEAD",
		22:  "EREDSYS_MANUAL_FACE",
		23:  "EREDSYS_MANUAL_BACK",
		24:  "EREDSYS_MANUAL_TAIL",
		25:  "EREDSYS_MANUAL_CARD_WEAPON",
		26:  "EREDSYS_MANUAL_CARD_ASSISTANT",
		27:  "EREDSYS_MANUAL_CARD_ARMOUR",
		28:  "EREDSYS_MANUAL_CARD_ROBE",
		29:  "EREDSYS_MANUAL_CARD_SHOES",
		30:  "EREDSYS_MANUAL_CARD_ACCESSORY",
		31:  "EREDSYS_MANUAL_CARD_HEAD",
		32:  "EREDSYS_MANUAL_NPC",
		33:  "EREDSYS_MANUAL_MOUNT",
		34:  "EREDSYS_SOCIAL_FRIEND_APPLY",
		35:  "EREDSYS_MANUAL_MONTHCARD",
		36:  "EREDSYS_MANUAL_NEWTAIL",
		37:  "EREDSYS_MANUAL_COLLECTION",
		38:  "EREDSYS_MANUAL_FOOD",
		40:  "EREDSYS_GUILD_APPLY",
		41:  "EREDSYS_GUILD_CHALLENGE_ADD",
		42:  "EREDSYS_GUILD_CHALLENGE_REWARD",
		43:  "EREDSYS_GUILD_ICON",
		45:  "EREDSYS_PUZZLE",
		50:  "EREDSYS_PRIVATE_CHAT",
		51:  "EREDSYS_MONSTER_PORTRAIT",
		52:  "EREDSYS_PORTRAIT_FRAME",
		53:  "EREDSYS_BACKGROUND_FRAME",
		60:  "EREDSYS_TRADE_RECORD",
		70:  "EREDSYS_PET_ADVENTURE",
		80:  "EREDSYS_TUTOR_TUTOR_UNLOCK",
		81:  "EREDSYS_TUTOR_STUDENT_UNLOCK",
		82:  "EREDSYS_TUTOR_APPLY",
		83:  "EREDSYS_TUTOR_TASK",
		85:  "EREDSYS_TUTOR_GROW_REWARD",
		86:  "EREDSYS_TUTOR_BOX",
		101: "EREDSYS_MANUAL_PRONTERA",
		102: "EREDSYS_MANUAL_GEFFEN",
		103: "EREDSYS_MANUAL_MOROCC",
		104: "EREDSYS_MANUAL_PAYON",
		105: "EREDSYS_MANUAL_GLAST",
		106: "EREDSYS_PACK_TEMP",
		84:  "EREDSYS_AUCTION_RECORD",
		132: "EREDSYS_PEAK_LEVEL",
		300: "EREDSYS_BEING_BODY",
		310: "EREDSYS_FUNCTION_OPENING",
		400: "EREDSYS_SERVANT_RECOMMNED",
		401: "EREDSYS_SERVANT_GROWTH",
		402: "EREDSYS_SERVANT_GROWTH_STEP",
		403: "EREDSYS_SERVANT_GROWTH_EP",
		404: "EREDSYS_SERVANT_GROWTH_TIME",
		410: "EREDSYS_SERVANT_RECOMMNED_DAY",
		411: "EREDSYS_SERVANT_RECOMMNED_WEEK",
		412: "EREDSYS_SERVANT_RECOMMNED_FOREVER",
		413: "EREDSYS_SERVANT_RECOMMNED_SHORTCUT",
		600: "EREDSYS_DEAD_BOSS",
		700: "EREDSYS_SIGNIN_DAY",
		701: "EREDSYS_SIGNIN_ACTIVITY",
		702: "EREDSYS_ACT_HITPOLLY_QUEST",
		703: "EREDSYS_PAY_SIGN_BUY",
		704: "EREDSYS_PAY_SIGN_REWARD",
		705: "EREDSYS_GROUPON_LOGIN",
		706: "EREDSYS_GROUPON_PROGRESS",
		707: "EREDSYS_MAX",
	}
	ERedSys_value = map[string]int32{
		"EREDSYS_MIN":                        0,
		"EREDSYS_ADD_POINT":                  1,
		"EREDSYS_NEW_PROFESSION":             2,
		"EREDSYS_PROFESSION_UP":              3,
		"EREDSYS_ROLE_IMG":                   4,
		"EREDSYS_MONSTER_IMG":                5,
		"EREDSYS_PHOTOFRAME":                 6,
		"EREDSYS_SKILL_POINT":                7,
		"EREDSYS_TEAMAPPLY":                  19,
		"EREDSYS_MANUAL_MONSTER":             20,
		"EREDSYS_MANUAL_HEAD":                21,
		"EREDSYS_MANUAL_FACE":                22,
		"EREDSYS_MANUAL_BACK":                23,
		"EREDSYS_MANUAL_TAIL":                24,
		"EREDSYS_MANUAL_CARD_WEAPON":         25,
		"EREDSYS_MANUAL_CARD_ASSISTANT":      26,
		"EREDSYS_MANUAL_CARD_ARMOUR":         27,
		"EREDSYS_MANUAL_CARD_ROBE":           28,
		"EREDSYS_MANUAL_CARD_SHOES":          29,
		"EREDSYS_MANUAL_CARD_ACCESSORY":      30,
		"EREDSYS_MANUAL_CARD_HEAD":           31,
		"EREDSYS_MANUAL_NPC":                 32,
		"EREDSYS_MANUAL_MOUNT":               33,
		"EREDSYS_SOCIAL_FRIEND_APPLY":        34,
		"EREDSYS_MANUAL_MONTHCARD":           35,
		"EREDSYS_MANUAL_NEWTAIL":             36,
		"EREDSYS_MANUAL_COLLECTION":          37,
		"EREDSYS_MANUAL_FOOD":                38,
		"EREDSYS_GUILD_APPLY":                40,
		"EREDSYS_GUILD_CHALLENGE_ADD":        41,
		"EREDSYS_GUILD_CHALLENGE_REWARD":     42,
		"EREDSYS_GUILD_ICON":                 43,
		"EREDSYS_PUZZLE":                     45,
		"EREDSYS_PRIVATE_CHAT":               50,
		"EREDSYS_MONSTER_PORTRAIT":           51,
		"EREDSYS_PORTRAIT_FRAME":             52,
		"EREDSYS_BACKGROUND_FRAME":           53,
		"EREDSYS_TRADE_RECORD":               60,
		"EREDSYS_PET_ADVENTURE":              70,
		"EREDSYS_TUTOR_TUTOR_UNLOCK":         80,
		"EREDSYS_TUTOR_STUDENT_UNLOCK":       81,
		"EREDSYS_TUTOR_APPLY":                82,
		"EREDSYS_TUTOR_TASK":                 83,
		"EREDSYS_TUTOR_GROW_REWARD":          85,
		"EREDSYS_TUTOR_BOX":                  86,
		"EREDSYS_MANUAL_PRONTERA":            101,
		"EREDSYS_MANUAL_GEFFEN":              102,
		"EREDSYS_MANUAL_MOROCC":              103,
		"EREDSYS_MANUAL_PAYON":               104,
		"EREDSYS_MANUAL_GLAST":               105,
		"EREDSYS_PACK_TEMP":                  106,
		"EREDSYS_AUCTION_RECORD":             84,
		"EREDSYS_PEAK_LEVEL":                 132,
		"EREDSYS_BEING_BODY":                 300,
		"EREDSYS_FUNCTION_OPENING":           310,
		"EREDSYS_SERVANT_RECOMMNED":          400,
		"EREDSYS_SERVANT_GROWTH":             401,
		"EREDSYS_SERVANT_GROWTH_STEP":        402,
		"EREDSYS_SERVANT_GROWTH_EP":          403,
		"EREDSYS_SERVANT_GROWTH_TIME":        404,
		"EREDSYS_SERVANT_RECOMMNED_DAY":      410,
		"EREDSYS_SERVANT_RECOMMNED_WEEK":     411,
		"EREDSYS_SERVANT_RECOMMNED_FOREVER":  412,
		"EREDSYS_SERVANT_RECOMMNED_SHORTCUT": 413,
		"EREDSYS_DEAD_BOSS":                  600,
		"EREDSYS_SIGNIN_DAY":                 700,
		"EREDSYS_SIGNIN_ACTIVITY":            701,
		"EREDSYS_ACT_HITPOLLY_QUEST":         702,
		"EREDSYS_PAY_SIGN_BUY":               703,
		"EREDSYS_PAY_SIGN_REWARD":            704,
		"EREDSYS_GROUPON_LOGIN":              705,
		"EREDSYS_GROUPON_PROGRESS":           706,
		"EREDSYS_MAX":                        707,
	}
)

func (x ERedSys) Enum() *ERedSys {
	p := new(ERedSys)
	*p = x
	return p
}

func (x ERedSys) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERedSys) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneTip_proto_enumTypes[1].Descriptor()
}

func (ERedSys) Type() protoreflect.EnumType {
	return &file_SceneTip_proto_enumTypes[1]
}

func (x ERedSys) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERedSys) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERedSys(num)
	return nil
}

// Deprecated: Use ERedSys.Descriptor instead.
func (ERedSys) EnumDescriptor() ([]byte, []int) {
	return file_SceneTip_proto_rawDescGZIP(), []int{1}
}

type ETipOpt int32

const (
	ETipOpt_ETIPOPT_MIN    ETipOpt = 0
	ETipOpt_ETIPOPT_UPDATE ETipOpt = 1
	ETipOpt_ETIPOPT_DELETE ETipOpt = 2
)

// Enum value maps for ETipOpt.
var (
	ETipOpt_name = map[int32]string{
		0: "ETIPOPT_MIN",
		1: "ETIPOPT_UPDATE",
		2: "ETIPOPT_DELETE",
	}
	ETipOpt_value = map[string]int32{
		"ETIPOPT_MIN":    0,
		"ETIPOPT_UPDATE": 1,
		"ETIPOPT_DELETE": 2,
	}
)

func (x ETipOpt) Enum() *ETipOpt {
	p := new(ETipOpt)
	*p = x
	return p
}

func (x ETipOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETipOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneTip_proto_enumTypes[2].Descriptor()
}

func (ETipOpt) Type() protoreflect.EnumType {
	return &file_SceneTip_proto_enumTypes[2]
}

func (x ETipOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETipOpt) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETipOpt(num)
	return nil
}

// Deprecated: Use ETipOpt.Descriptor instead.
func (ETipOpt) EnumDescriptor() ([]byte, []int) {
	return file_SceneTip_proto_rawDescGZIP(), []int{2}
}

type ETipItemOpt int32

const (
	ETipItemOpt_ETIPITEMOPT_ADD    ETipItemOpt = 1
	ETipItemOpt_ETIPITEMOPT_DELETE ETipItemOpt = 2
)

// Enum value maps for ETipItemOpt.
var (
	ETipItemOpt_name = map[int32]string{
		1: "ETIPITEMOPT_ADD",
		2: "ETIPITEMOPT_DELETE",
	}
	ETipItemOpt_value = map[string]int32{
		"ETIPITEMOPT_ADD":    1,
		"ETIPITEMOPT_DELETE": 2,
	}
)

func (x ETipItemOpt) Enum() *ETipItemOpt {
	p := new(ETipItemOpt)
	*p = x
	return p
}

func (x ETipItemOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETipItemOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneTip_proto_enumTypes[3].Descriptor()
}

func (ETipItemOpt) Type() protoreflect.EnumType {
	return &file_SceneTip_proto_enumTypes[3]
}

func (x ETipItemOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETipItemOpt) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETipItemOpt(num)
	return nil
}

// Deprecated: Use ETipItemOpt.Descriptor instead.
func (ETipItemOpt) EnumDescriptor() ([]byte, []int) {
	return file_SceneTip_proto_rawDescGZIP(), []int{3}
}

type RedTip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Redsys  *ERedSys     `protobuf:"varint,1,opt,name=redsys,enum=Cmd.ERedSys,def=0" json:"redsys,omitempty"`
	OptItem *ETipItemOpt `protobuf:"varint,2,opt,name=optItem,enum=Cmd.ETipItemOpt,def=1" json:"optItem,omitempty"`
	Tipid   []uint64     `protobuf:"varint,3,rep,name=tipid" json:"tipid,omitempty"`
}

// Default values for RedTip fields.
const (
	Default_RedTip_Redsys  = ERedSys_EREDSYS_MIN
	Default_RedTip_OptItem = ETipItemOpt_ETIPITEMOPT_ADD
)

func (x *RedTip) Reset() {
	*x = RedTip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneTip_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedTip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedTip) ProtoMessage() {}

func (x *RedTip) ProtoReflect() protoreflect.Message {
	mi := &file_SceneTip_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedTip.ProtoReflect.Descriptor instead.
func (*RedTip) Descriptor() ([]byte, []int) {
	return file_SceneTip_proto_rawDescGZIP(), []int{0}
}

func (x *RedTip) GetRedsys() ERedSys {
	if x != nil && x.Redsys != nil {
		return *x.Redsys
	}
	return Default_RedTip_Redsys
}

func (x *RedTip) GetOptItem() ETipItemOpt {
	if x != nil && x.OptItem != nil {
		return *x.OptItem
	}
	return Default_RedTip_OptItem
}

func (x *RedTip) GetTipid() []uint64 {
	if x != nil {
		return x.Tipid
	}
	return nil
}

type GameTipCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=18" json:"cmd,omitempty"`
	Param  *TipParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TipParam,def=1" json:"param,omitempty"`
	Opt    *ETipOpt  `protobuf:"varint,3,opt,name=opt,enum=Cmd.ETipOpt,def=0" json:"opt,omitempty"`
	Redtip []*RedTip `protobuf:"bytes,4,rep,name=redtip" json:"redtip,omitempty"`
}

// Default values for GameTipCmd fields.
const (
	Default_GameTipCmd_Cmd   = Command_SCENE_USER_TIP_PROTOCMD
	Default_GameTipCmd_Param = TipParam_TIPPARAM_RED
	Default_GameTipCmd_Opt   = ETipOpt_ETIPOPT_MIN
)

func (x *GameTipCmd) Reset() {
	*x = GameTipCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneTip_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameTipCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameTipCmd) ProtoMessage() {}

func (x *GameTipCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneTip_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameTipCmd.ProtoReflect.Descriptor instead.
func (*GameTipCmd) Descriptor() ([]byte, []int) {
	return file_SceneTip_proto_rawDescGZIP(), []int{1}
}

func (x *GameTipCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GameTipCmd_Cmd
}

func (x *GameTipCmd) GetParam() TipParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GameTipCmd_Param
}

func (x *GameTipCmd) GetOpt() ETipOpt {
	if x != nil && x.Opt != nil {
		return *x.Opt
	}
	return Default_GameTipCmd_Opt
}

func (x *GameTipCmd) GetRedtip() []*RedTip {
	if x != nil {
		return x.Redtip
	}
	return nil
}

type BrowseRedTipCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=18" json:"cmd,omitempty"`
	Param *TipParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TipParam,def=2" json:"param,omitempty"`
	Red   *ERedSys  `protobuf:"varint,3,opt,name=red,enum=Cmd.ERedSys,def=0" json:"red,omitempty"`
	Tipid *uint64   `protobuf:"varint,4,opt,name=tipid,def=0" json:"tipid,omitempty"`
}

// Default values for BrowseRedTipCmd fields.
const (
	Default_BrowseRedTipCmd_Cmd   = Command_SCENE_USER_TIP_PROTOCMD
	Default_BrowseRedTipCmd_Param = TipParam_TIPPARAM_BROWSE
	Default_BrowseRedTipCmd_Red   = ERedSys_EREDSYS_MIN
	Default_BrowseRedTipCmd_Tipid = uint64(0)
)

func (x *BrowseRedTipCmd) Reset() {
	*x = BrowseRedTipCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneTip_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowseRedTipCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowseRedTipCmd) ProtoMessage() {}

func (x *BrowseRedTipCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneTip_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowseRedTipCmd.ProtoReflect.Descriptor instead.
func (*BrowseRedTipCmd) Descriptor() ([]byte, []int) {
	return file_SceneTip_proto_rawDescGZIP(), []int{2}
}

func (x *BrowseRedTipCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BrowseRedTipCmd_Cmd
}

func (x *BrowseRedTipCmd) GetParam() TipParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BrowseRedTipCmd_Param
}

func (x *BrowseRedTipCmd) GetRed() ERedSys {
	if x != nil && x.Red != nil {
		return *x.Red
	}
	return Default_BrowseRedTipCmd_Red
}

func (x *BrowseRedTipCmd) GetTipid() uint64 {
	if x != nil && x.Tipid != nil {
		return *x.Tipid
	}
	return Default_BrowseRedTipCmd_Tipid
}

type AddRedTip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=18" json:"cmd,omitempty"`
	Param *TipParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TipParam,def=3" json:"param,omitempty"`
	Red   *ERedSys  `protobuf:"varint,3,opt,name=red,enum=Cmd.ERedSys,def=0" json:"red,omitempty"`
	Tipid *uint64   `protobuf:"varint,4,opt,name=tipid,def=0" json:"tipid,omitempty"`
}

// Default values for AddRedTip fields.
const (
	Default_AddRedTip_Cmd   = Command_SCENE_USER_TIP_PROTOCMD
	Default_AddRedTip_Param = TipParam_TIPPARAM_ADDREDTIP
	Default_AddRedTip_Red   = ERedSys_EREDSYS_MIN
	Default_AddRedTip_Tipid = uint64(0)
)

func (x *AddRedTip) Reset() {
	*x = AddRedTip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneTip_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRedTip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRedTip) ProtoMessage() {}

func (x *AddRedTip) ProtoReflect() protoreflect.Message {
	mi := &file_SceneTip_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRedTip.ProtoReflect.Descriptor instead.
func (*AddRedTip) Descriptor() ([]byte, []int) {
	return file_SceneTip_proto_rawDescGZIP(), []int{3}
}

func (x *AddRedTip) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AddRedTip_Cmd
}

func (x *AddRedTip) GetParam() TipParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AddRedTip_Param
}

func (x *AddRedTip) GetRed() ERedSys {
	if x != nil && x.Red != nil {
		return *x.Red
	}
	return Default_AddRedTip_Red
}

func (x *AddRedTip) GetTipid() uint64 {
	if x != nil && x.Tipid != nil {
		return *x.Tipid
	}
	return Default_AddRedTip_Tipid
}

var File_SceneTip_proto protoreflect.FileDescriptor

var file_SceneTip_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x54, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x64, 0x54, 0x69, 0x70, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x64, 0x73, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x52, 0x65, 0x64, 0x53, 0x79, 0x73, 0x3a, 0x0b, 0x45, 0x52, 0x45, 0x44,
	0x53, 0x59, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x72, 0x65, 0x64, 0x73, 0x79, 0x73, 0x12,
	0x3b, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x69, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x4f,
	0x70, 0x74, 0x3a, 0x0f, 0x45, 0x54, 0x49, 0x50, 0x49, 0x54, 0x45, 0x4d, 0x4f, 0x50, 0x54, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x74, 0x69, 0x70,
	0x69, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x70, 0x43, 0x6d,
	0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x50, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x54, 0x69, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0c, 0x54, 0x49, 0x50, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x52, 0x45, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a,
	0x03, 0x6f, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x54, 0x69, 0x70, 0x4f, 0x70, 0x74, 0x3a, 0x0b, 0x45, 0x54, 0x49, 0x50, 0x4f, 0x50,
	0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x72, 0x65,
	0x64, 0x74, 0x69, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x52, 0x65, 0x64, 0x54, 0x69, 0x70, 0x52, 0x06, 0x72, 0x65, 0x64, 0x74, 0x69, 0x70, 0x22,
	0xc6, 0x01, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x52, 0x65, 0x64, 0x54, 0x69, 0x70,
	0x43, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x50, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x54, 0x69, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0f, 0x54, 0x49, 0x50, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x65, 0x64, 0x53, 0x79, 0x73, 0x3a, 0x0b, 0x45,
	0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x03, 0x72, 0x65, 0x64, 0x12,
	0x17, 0x0a, 0x05, 0x74, 0x69, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x05, 0x74, 0x69, 0x70, 0x69, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x09, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x64, 0x54, 0x69, 0x70, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x49,
	0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x37, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x69, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x54,
	0x49, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x44, 0x54, 0x49,
	0x50, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x65, 0x64,
	0x53, 0x79, 0x73, 0x3a, 0x0b, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x49, 0x4e,
	0x52, 0x03, 0x72, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x74, 0x69, 0x70, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x74, 0x69, 0x70, 0x69, 0x64, 0x2a, 0x5b,
	0x0a, 0x08, 0x54, 0x69, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x49,
	0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x54, 0x49, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x49, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x44, 0x54, 0x49, 0x50, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x49, 0x50,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x9b, 0x10, 0x0a, 0x07,
	0x45, 0x52, 0x65, 0x64, 0x53, 0x79, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x52, 0x45, 0x44, 0x53,
	0x59, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x45, 0x44,
	0x53, 0x59, 0x53, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59,
	0x53, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x47, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x49, 0x4d, 0x47, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53,
	0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59,
	0x53, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x13, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x45,
	0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x48, 0x45, 0x41, 0x44,
	0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41,
	0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x18, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x10, 0x19, 0x12, 0x21, 0x0a,
	0x1d, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x1a,
	0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x52, 0x4d, 0x4f, 0x55, 0x52, 0x10, 0x1b,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x1c, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x48, 0x4f, 0x45, 0x53, 0x10, 0x1d, 0x12, 0x21, 0x0a,
	0x1d, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x59, 0x10, 0x1e,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x1f, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x5f, 0x4e, 0x50, 0x43, 0x10, 0x20, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59,
	0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x21,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x53, 0x4f, 0x43, 0x49,
	0x41, 0x4c, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10,
	0x22, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x43, 0x41, 0x52, 0x44, 0x10, 0x23, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x5f, 0x4e, 0x45, 0x57, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x24, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x25, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52,
	0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x46, 0x4f, 0x4f,
	0x44, 0x10, 0x26, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x28, 0x12, 0x1f, 0x0a, 0x1b,
	0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x48,
	0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x29, 0x12, 0x22, 0x0a,
	0x1e, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43,
	0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10,
	0x2a, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0x2b, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x45,
	0x44, 0x53, 0x59, 0x53, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x10, 0x2d, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x32, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x45, 0x44, 0x53,
	0x59, 0x53, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x52,
	0x41, 0x49, 0x54, 0x10, 0x33, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10,
	0x34, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x35, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x3c, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x45,
	0x44, 0x53, 0x59, 0x53, 0x5f, 0x50, 0x45, 0x54, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x4e, 0x54, 0x55,
	0x52, 0x45, 0x10, 0x46, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f,
	0x54, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x50, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f,
	0x54, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e,
	0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x51, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59,
	0x53, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x52, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x53, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x45, 0x44, 0x53,
	0x59, 0x53, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x10, 0x55, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59,
	0x53, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x56, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x50, 0x52, 0x4f, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x10, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52,
	0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x47, 0x45, 0x46,
	0x46, 0x45, 0x4e, 0x10, 0x66, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53,
	0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x52, 0x4f, 0x43, 0x43, 0x10, 0x67,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x5f, 0x50, 0x41, 0x59, 0x4f, 0x4e, 0x10, 0x68, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52,
	0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x47, 0x4c, 0x41,
	0x53, 0x54, 0x10, 0x69, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x10, 0x6a, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x54, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x52, 0x45, 0x44, 0x53,
	0x59, 0x53, 0x5f, 0x50, 0x45, 0x41, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x84, 0x01,
	0x12, 0x17, 0x0a, 0x12, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x42, 0x45, 0x49, 0x4e,
	0x47, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x10, 0xac, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x52, 0x45,
	0x44, 0x53, 0x59, 0x53, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0xb6, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x52, 0x45, 0x44,
	0x53, 0x59, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x4d, 0x4d, 0x4e, 0x45, 0x44, 0x10, 0x90, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x52, 0x45, 0x44,
	0x53, 0x59, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x57,
	0x54, 0x48, 0x10, 0x91, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f,
	0x53, 0x54, 0x45, 0x50, 0x10, 0x92, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x52, 0x45, 0x44, 0x53,
	0x59, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x54,
	0x48, 0x5f, 0x45, 0x50, 0x10, 0x93, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x52, 0x45, 0x44, 0x53,
	0x59, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x54,
	0x48, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x94, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x45, 0x52, 0x45,
	0x44, 0x53, 0x59, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x4d, 0x4d, 0x4e, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x9a, 0x03, 0x12, 0x23, 0x0a,
	0x1e, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x4e, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10,
	0x9b, 0x03, 0x12, 0x26, 0x0a, 0x21, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x4e, 0x45, 0x44, 0x5f,
	0x46, 0x4f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x10, 0x9c, 0x03, 0x12, 0x27, 0x0a, 0x22, 0x45, 0x52,
	0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x4d, 0x4e, 0x45, 0x44, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54,
	0x10, 0x9d, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x44,
	0x45, 0x41, 0x44, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x10, 0xd8, 0x04, 0x12, 0x17, 0x0a, 0x12, 0x45,
	0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x5f, 0x44, 0x41,
	0x59, 0x10, 0xbc, 0x05, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10,
	0xbd, 0x05, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x5f, 0x48, 0x49, 0x54, 0x50, 0x4f, 0x4c, 0x4c, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0xbe, 0x05, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x50,
	0x41, 0x59, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x42, 0x55, 0x59, 0x10, 0xbf, 0x05, 0x12, 0x1c,
	0x0a, 0x17, 0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xc0, 0x05, 0x12, 0x1a, 0x0a, 0x15,
	0x45, 0x52, 0x45, 0x44, 0x53, 0x59, 0x53, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0xc1, 0x05, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x52, 0x45, 0x44,
	0x53, 0x59, 0x53, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0xc2, 0x05, 0x12, 0x10, 0x0a, 0x0b, 0x45, 0x52, 0x45, 0x44, 0x53,
	0x59, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0xc3, 0x05, 0x2a, 0x42, 0x0a, 0x07, 0x45, 0x54, 0x69,
	0x70, 0x4f, 0x70, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x54, 0x49, 0x50, 0x4f, 0x50, 0x54, 0x5f,
	0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x54, 0x49, 0x50, 0x4f, 0x50, 0x54,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x54, 0x49,
	0x50, 0x4f, 0x50, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x3a, 0x0a,
	0x0b, 0x45, 0x54, 0x69, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x74, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x54, 0x49, 0x50, 0x49, 0x54, 0x45, 0x4d, 0x4f, 0x50, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x49, 0x50, 0x49, 0x54, 0x45, 0x4d, 0x4f, 0x50, 0x54,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02,
}

var (
	file_SceneTip_proto_rawDescOnce sync.Once
	file_SceneTip_proto_rawDescData = file_SceneTip_proto_rawDesc
)

func file_SceneTip_proto_rawDescGZIP() []byte {
	file_SceneTip_proto_rawDescOnce.Do(func() {
		file_SceneTip_proto_rawDescData = protoimpl.X.CompressGZIP(file_SceneTip_proto_rawDescData)
	})
	return file_SceneTip_proto_rawDescData
}

var file_SceneTip_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_SceneTip_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_SceneTip_proto_goTypes = []interface{}{
	(TipParam)(0),           // 0: Cmd.TipParam
	(ERedSys)(0),            // 1: Cmd.ERedSys
	(ETipOpt)(0),            // 2: Cmd.ETipOpt
	(ETipItemOpt)(0),        // 3: Cmd.ETipItemOpt
	(*RedTip)(nil),          // 4: Cmd.RedTip
	(*GameTipCmd)(nil),      // 5: Cmd.GameTipCmd
	(*BrowseRedTipCmd)(nil), // 6: Cmd.BrowseRedTipCmd
	(*AddRedTip)(nil),       // 7: Cmd.AddRedTip
	(Command)(0),            // 8: Cmd.Command
}
var file_SceneTip_proto_depIdxs = []int32{
	1,  // 0: Cmd.RedTip.redsys:type_name -> Cmd.ERedSys
	3,  // 1: Cmd.RedTip.optItem:type_name -> Cmd.ETipItemOpt
	8,  // 2: Cmd.GameTipCmd.cmd:type_name -> Cmd.Command
	0,  // 3: Cmd.GameTipCmd.param:type_name -> Cmd.TipParam
	2,  // 4: Cmd.GameTipCmd.opt:type_name -> Cmd.ETipOpt
	4,  // 5: Cmd.GameTipCmd.redtip:type_name -> Cmd.RedTip
	8,  // 6: Cmd.BrowseRedTipCmd.cmd:type_name -> Cmd.Command
	0,  // 7: Cmd.BrowseRedTipCmd.param:type_name -> Cmd.TipParam
	1,  // 8: Cmd.BrowseRedTipCmd.red:type_name -> Cmd.ERedSys
	8,  // 9: Cmd.AddRedTip.cmd:type_name -> Cmd.Command
	0,  // 10: Cmd.AddRedTip.param:type_name -> Cmd.TipParam
	1,  // 11: Cmd.AddRedTip.red:type_name -> Cmd.ERedSys
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_SceneTip_proto_init() }
func file_SceneTip_proto_init() {
	if File_SceneTip_proto != nil {
		return
	}
	file_xCmd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SceneTip_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedTip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneTip_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameTipCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneTip_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowseRedTipCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneTip_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRedTip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SceneTip_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SceneTip_proto_goTypes,
		DependencyIndexes: file_SceneTip_proto_depIdxs,
		EnumInfos:         file_SceneTip_proto_enumTypes,
		MessageInfos:      file_SceneTip_proto_msgTypes,
	}.Build()
	File_SceneTip_proto = out.File
	file_SceneTip_proto_rawDesc = nil
	file_SceneTip_proto_goTypes = nil
	file_SceneTip_proto_depIdxs = nil
}
