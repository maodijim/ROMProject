// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: AchieveCmd.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AchieveParam int32

const (
	AchieveParam_ACHIEVEPARAM_QUERY_USERRESUME AchieveParam = 1
	AchieveParam_ACHIEVEPARAM_QUERY_ACHDATA    AchieveParam = 2
	AchieveParam_ACHIEVEPARAM_NEW_ACHNTF       AchieveParam = 3
	AchieveParam_ACHIEVEPARAM_REWARD_GET       AchieveParam = 4
	AchieveParam_ACHIEVEPARAM_REWARD_GET_QUICK AchieveParam = 5
)

// Enum value maps for AchieveParam.
var (
	AchieveParam_name = map[int32]string{
		1: "ACHIEVEPARAM_QUERY_USERRESUME",
		2: "ACHIEVEPARAM_QUERY_ACHDATA",
		3: "ACHIEVEPARAM_NEW_ACHNTF",
		4: "ACHIEVEPARAM_REWARD_GET",
		5: "ACHIEVEPARAM_REWARD_GET_QUICK",
	}
	AchieveParam_value = map[string]int32{
		"ACHIEVEPARAM_QUERY_USERRESUME": 1,
		"ACHIEVEPARAM_QUERY_ACHDATA":    2,
		"ACHIEVEPARAM_NEW_ACHNTF":       3,
		"ACHIEVEPARAM_REWARD_GET":       4,
		"ACHIEVEPARAM_REWARD_GET_QUICK": 5,
	}
)

func (x AchieveParam) Enum() *AchieveParam {
	p := new(AchieveParam)
	*p = x
	return p
}

func (x AchieveParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AchieveParam) Descriptor() protoreflect.EnumDescriptor {
	return file_AchieveCmd_proto_enumTypes[0].Descriptor()
}

func (AchieveParam) Type() protoreflect.EnumType {
	return &file_AchieveCmd_proto_enumTypes[0]
}

func (x AchieveParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AchieveParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AchieveParam(num)
	return nil
}

// Deprecated: Use AchieveParam.Descriptor instead.
func (AchieveParam) EnumDescriptor() ([]byte, []int) {
	return file_AchieveCmd_proto_rawDescGZIP(), []int{0}
}

type EAchieveType int32

const (
	EAchieveType_EACHIEVETYPE_MIN       EAchieveType = 0
	EAchieveType_EACHIEVETYPE_USER      EAchieveType = 1100000
	EAchieveType_EACHIEVETYPE_SOCIAL    EAchieveType = 1200000
	EAchieveType_EACHIEVETYPE_ADVENTURE EAchieveType = 1300000
	EAchieveType_EACHIEVETYPE_BATTLE    EAchieveType = 1400000
	EAchieveType_EACHIEVETYPE_DRAMA     EAchieveType = 1450000
	EAchieveType_EACHIEVETYPE_ACTIVITY  EAchieveType = 1500000
	EAchieveType_EACHIEVETYPE_OTHER     EAchieveType = 1600000
	EAchieveType_EACHIEVETYPE_MAX       EAchieveType = 1600001
)

// Enum value maps for EAchieveType.
var (
	EAchieveType_name = map[int32]string{
		0:       "EACHIEVETYPE_MIN",
		1100000: "EACHIEVETYPE_USER",
		1200000: "EACHIEVETYPE_SOCIAL",
		1300000: "EACHIEVETYPE_ADVENTURE",
		1400000: "EACHIEVETYPE_BATTLE",
		1450000: "EACHIEVETYPE_DRAMA",
		1500000: "EACHIEVETYPE_ACTIVITY",
		1600000: "EACHIEVETYPE_OTHER",
		1600001: "EACHIEVETYPE_MAX",
	}
	EAchieveType_value = map[string]int32{
		"EACHIEVETYPE_MIN":       0,
		"EACHIEVETYPE_USER":      1100000,
		"EACHIEVETYPE_SOCIAL":    1200000,
		"EACHIEVETYPE_ADVENTURE": 1300000,
		"EACHIEVETYPE_BATTLE":    1400000,
		"EACHIEVETYPE_DRAMA":     1450000,
		"EACHIEVETYPE_ACTIVITY":  1500000,
		"EACHIEVETYPE_OTHER":     1600000,
		"EACHIEVETYPE_MAX":       1600001,
	}
)

func (x EAchieveType) Enum() *EAchieveType {
	p := new(EAchieveType)
	*p = x
	return p
}

func (x EAchieveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAchieveType) Descriptor() protoreflect.EnumDescriptor {
	return file_AchieveCmd_proto_enumTypes[1].Descriptor()
}

func (EAchieveType) Type() protoreflect.EnumType {
	return &file_AchieveCmd_proto_enumTypes[1]
}

func (x EAchieveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAchieveType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAchieveType(num)
	return nil
}

// Deprecated: Use EAchieveType.Descriptor instead.
func (EAchieveType) EnumDescriptor() ([]byte, []int) {
	return file_AchieveCmd_proto_rawDescGZIP(), []int{1}
}

type EAchieveSubType int32

const (
	EAchieveSubType_EACHIEVESUBTYPE_MIN           EAchieveSubType = 0
	EAchieveSubType_EACHIEVESUBTYPE_LEVELUP       EAchieveSubType = 1101000
	EAchieveSubType_EACHIEVESUBTYPE_ATTR          EAchieveSubType = 1102000
	EAchieveSubType_EACHIEVESUBTYPE_PROFESSION    EAchieveSubType = 1103000
	EAchieveSubType_EACHIEVESUBTYPE_FRIEND        EAchieveSubType = 1201000
	EAchieveSubType_EACHIEVESUBTYPE_SOCIAL        EAchieveSubType = 1202000
	EAchieveSubType_EACHIEVESUBTYPE_GUILD         EAchieveSubType = 1203000
	EAchieveSubType_EACHIEVESUBTYPE_PET           EAchieveSubType = 1204000
	EAchieveSubType_EACHIEVESUBTYPE_FOOD          EAchieveSubType = 1205000
	EAchieveSubType_EACHIEVESUBTYPE_TUTOR         EAchieveSubType = 1206000
	EAchieveSubType_EACHIEVESUBTYPE_WEDDING       EAchieveSubType = 1207000
	EAchieveSubType_EACHIEVESUBTYPE_MAP           EAchieveSubType = 1301000
	EAchieveSubType_EACHIEVESUBTYPE_SCENERY       EAchieveSubType = 1302000
	EAchieveSubType_EACHIEVESUBTYPE_MONSTER_PHOTO EAchieveSubType = 1303000
	EAchieveSubType_EACHIEVESUBTYPE_NPC           EAchieveSubType = 1304000
	EAchieveSubType_EACHIEVESUBTYPE_PORTRAIT      EAchieveSubType = 1305000
	EAchieveSubType_EACHIEVESUBTYPE_TITLE         EAchieveSubType = 1306000
	EAchieveSubType_EACHIEVESUBTYPE_MONSTER_KILL  EAchieveSubType = 1401000
	EAchieveSubType_EACHIEVESUBTYPE_HELP          EAchieveSubType = 1402000
	EAchieveSubType_EACHIEVESUBTYPE_CAT           EAchieveSubType = 1403000
	EAchieveSubType_EACHIEVESUBTYPE_DEAD          EAchieveSubType = 1404000
	EAchieveSubType_EACHIEVESUBTYPE_PVP           EAchieveSubType = 1405000
	EAchieveSubType_EACHIEVESUBTYPE_CCRAST        EAchieveSubType = 1451000
	EAchieveSubType_EACHIEVESUBTYPE_QUEST         EAchieveSubType = 1452000
	EAchieveSubType_EACHIEVESUBTYPE_TOY           EAchieveSubType = 1453000
	EAchieveSubType_EACHIEVESUBTYPE_TOYFACTORY    EAchieveSubType = 1454000
	EAchieveSubType_EACHIEVESUBTYPE_TIANJIN       EAchieveSubType = 1454100
	EAchieveSubType_EACHIEVESUBTYPE_YUNO          EAchieveSubType = 1454200
	EAchieveSubType_EACHIEVESUBTYPE_DEADCITY      EAchieveSubType = 1454300
	EAchieveSubType_EACHIEVESUBTYPE_LIGHTHALZEN   EAchieveSubType = 1454400
	EAchieveSubType_EACHIEVESUBTYPE_ROTHANA       EAchieveSubType = 1454500
	EAchieveSubType_EACHIEVESUBTYPE_RACHEL        EAchieveSubType = 1454600
	EAchieveSubType_EACHIEVESUBTYPE_LUOYANG       EAchieveSubType = 1454700
	EAchieveSubType_EACHIEVESUBTYPE_SCHOOL        EAchieveSubType = 1454800
	EAchieveSubType_EACHIEVESUBTYPE_ECLAGE        EAchieveSubType = 1454900
	EAchieveSubType_EACHIEVESUBTYPE_PRANDRAPALACE EAchieveSubType = 1454920
	EAchieveSubType_EACHIEVESUBTYPE_DRAMA_OTHER   EAchieveSubType = 1455000
	EAchieveSubType_EACHIEVESUBTYPE_BCAT          EAchieveSubType = 1501000
	EAchieveSubType_EACHIEVESUBTYPE_LINK          EAchieveSubType = 1502000
	EAchieveSubType_EACHIEVESUBTYPE_EQUIP         EAchieveSubType = 1601000
	EAchieveSubType_EACHIEVESUBTYPE_DAILY         EAchieveSubType = 1602000
	EAchieveSubType_EACHIEVESUBTYPE_CONSUME       EAchieveSubType = 1603000
	EAchieveSubType_EACHIEVESUBTYPE_FUNC          EAchieveSubType = 1604000
	EAchieveSubType_EACHIEVESUBTYPE_FURNITURE     EAchieveSubType = 1605000
	EAchieveSubType_EACHIEVESUBTYPE_MANOR         EAchieveSubType = 1606000
	EAchieveSubType_EACHIEVESUBTYPE_MAX           EAchieveSubType = 4444001
)

// Enum value maps for EAchieveSubType.
var (
	EAchieveSubType_name = map[int32]string{
		0:       "EACHIEVESUBTYPE_MIN",
		1101000: "EACHIEVESUBTYPE_LEVELUP",
		1102000: "EACHIEVESUBTYPE_ATTR",
		1103000: "EACHIEVESUBTYPE_PROFESSION",
		1201000: "EACHIEVESUBTYPE_FRIEND",
		1202000: "EACHIEVESUBTYPE_SOCIAL",
		1203000: "EACHIEVESUBTYPE_GUILD",
		1204000: "EACHIEVESUBTYPE_PET",
		1205000: "EACHIEVESUBTYPE_FOOD",
		1206000: "EACHIEVESUBTYPE_TUTOR",
		1207000: "EACHIEVESUBTYPE_WEDDING",
		1301000: "EACHIEVESUBTYPE_MAP",
		1302000: "EACHIEVESUBTYPE_SCENERY",
		1303000: "EACHIEVESUBTYPE_MONSTER_PHOTO",
		1304000: "EACHIEVESUBTYPE_NPC",
		1305000: "EACHIEVESUBTYPE_PORTRAIT",
		1306000: "EACHIEVESUBTYPE_TITLE",
		1401000: "EACHIEVESUBTYPE_MONSTER_KILL",
		1402000: "EACHIEVESUBTYPE_HELP",
		1403000: "EACHIEVESUBTYPE_CAT",
		1404000: "EACHIEVESUBTYPE_DEAD",
		1405000: "EACHIEVESUBTYPE_PVP",
		1451000: "EACHIEVESUBTYPE_CCRAST",
		1452000: "EACHIEVESUBTYPE_QUEST",
		1453000: "EACHIEVESUBTYPE_TOY",
		1454000: "EACHIEVESUBTYPE_TOYFACTORY",
		1454100: "EACHIEVESUBTYPE_TIANJIN",
		1454200: "EACHIEVESUBTYPE_YUNO",
		1454300: "EACHIEVESUBTYPE_DEADCITY",
		1454400: "EACHIEVESUBTYPE_LIGHTHALZEN",
		1454500: "EACHIEVESUBTYPE_ROTHANA",
		1454600: "EACHIEVESUBTYPE_RACHEL",
		1454700: "EACHIEVESUBTYPE_LUOYANG",
		1454800: "EACHIEVESUBTYPE_SCHOOL",
		1454900: "EACHIEVESUBTYPE_ECLAGE",
		1454920: "EACHIEVESUBTYPE_PRANDRAPALACE",
		1455000: "EACHIEVESUBTYPE_DRAMA_OTHER",
		1501000: "EACHIEVESUBTYPE_BCAT",
		1502000: "EACHIEVESUBTYPE_LINK",
		1601000: "EACHIEVESUBTYPE_EQUIP",
		1602000: "EACHIEVESUBTYPE_DAILY",
		1603000: "EACHIEVESUBTYPE_CONSUME",
		1604000: "EACHIEVESUBTYPE_FUNC",
		1605000: "EACHIEVESUBTYPE_FURNITURE",
		1606000: "EACHIEVESUBTYPE_MANOR",
		4444001: "EACHIEVESUBTYPE_MAX",
	}
	EAchieveSubType_value = map[string]int32{
		"EACHIEVESUBTYPE_MIN":           0,
		"EACHIEVESUBTYPE_LEVELUP":       1101000,
		"EACHIEVESUBTYPE_ATTR":          1102000,
		"EACHIEVESUBTYPE_PROFESSION":    1103000,
		"EACHIEVESUBTYPE_FRIEND":        1201000,
		"EACHIEVESUBTYPE_SOCIAL":        1202000,
		"EACHIEVESUBTYPE_GUILD":         1203000,
		"EACHIEVESUBTYPE_PET":           1204000,
		"EACHIEVESUBTYPE_FOOD":          1205000,
		"EACHIEVESUBTYPE_TUTOR":         1206000,
		"EACHIEVESUBTYPE_WEDDING":       1207000,
		"EACHIEVESUBTYPE_MAP":           1301000,
		"EACHIEVESUBTYPE_SCENERY":       1302000,
		"EACHIEVESUBTYPE_MONSTER_PHOTO": 1303000,
		"EACHIEVESUBTYPE_NPC":           1304000,
		"EACHIEVESUBTYPE_PORTRAIT":      1305000,
		"EACHIEVESUBTYPE_TITLE":         1306000,
		"EACHIEVESUBTYPE_MONSTER_KILL":  1401000,
		"EACHIEVESUBTYPE_HELP":          1402000,
		"EACHIEVESUBTYPE_CAT":           1403000,
		"EACHIEVESUBTYPE_DEAD":          1404000,
		"EACHIEVESUBTYPE_PVP":           1405000,
		"EACHIEVESUBTYPE_CCRAST":        1451000,
		"EACHIEVESUBTYPE_QUEST":         1452000,
		"EACHIEVESUBTYPE_TOY":           1453000,
		"EACHIEVESUBTYPE_TOYFACTORY":    1454000,
		"EACHIEVESUBTYPE_TIANJIN":       1454100,
		"EACHIEVESUBTYPE_YUNO":          1454200,
		"EACHIEVESUBTYPE_DEADCITY":      1454300,
		"EACHIEVESUBTYPE_LIGHTHALZEN":   1454400,
		"EACHIEVESUBTYPE_ROTHANA":       1454500,
		"EACHIEVESUBTYPE_RACHEL":        1454600,
		"EACHIEVESUBTYPE_LUOYANG":       1454700,
		"EACHIEVESUBTYPE_SCHOOL":        1454800,
		"EACHIEVESUBTYPE_ECLAGE":        1454900,
		"EACHIEVESUBTYPE_PRANDRAPALACE": 1454920,
		"EACHIEVESUBTYPE_DRAMA_OTHER":   1455000,
		"EACHIEVESUBTYPE_BCAT":          1501000,
		"EACHIEVESUBTYPE_LINK":          1502000,
		"EACHIEVESUBTYPE_EQUIP":         1601000,
		"EACHIEVESUBTYPE_DAILY":         1602000,
		"EACHIEVESUBTYPE_CONSUME":       1603000,
		"EACHIEVESUBTYPE_FUNC":          1604000,
		"EACHIEVESUBTYPE_FURNITURE":     1605000,
		"EACHIEVESUBTYPE_MANOR":         1606000,
		"EACHIEVESUBTYPE_MAX":           4444001,
	}
)

func (x EAchieveSubType) Enum() *EAchieveSubType {
	p := new(EAchieveSubType)
	*p = x
	return p
}

func (x EAchieveSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAchieveSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_AchieveCmd_proto_enumTypes[2].Descriptor()
}

func (EAchieveSubType) Type() protoreflect.EnumType {
	return &file_AchieveCmd_proto_enumTypes[2]
}

func (x EAchieveSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAchieveSubType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAchieveSubType(num)
	return nil
}

// Deprecated: Use EAchieveSubType.Descriptor instead.
func (EAchieveSubType) EnumDescriptor() ([]byte, []int) {
	return file_AchieveCmd_proto_rawDescGZIP(), []int{2}
}

type MaxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *uint32 `protobuf:"varint,1,opt,name=type,def=0" json:"type,omitempty"`
	Charid *uint64 `protobuf:"varint,2,opt,name=charid,def=0" json:"charid,omitempty"`
	Name   *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

// Default values for MaxInfo fields.
const (
	Default_MaxInfo_Type   = uint32(0)
	Default_MaxInfo_Charid = uint64(0)
)

func (x *MaxInfo) Reset() {
	*x = MaxInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AchieveCmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxInfo) ProtoMessage() {}

func (x *MaxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_AchieveCmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxInfo.ProtoReflect.Descriptor instead.
func (*MaxInfo) Descriptor() ([]byte, []int) {
	return file_AchieveCmd_proto_rawDescGZIP(), []int{0}
}

func (x *MaxInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_MaxInfo_Type
}

func (x *MaxInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_MaxInfo_Charid
}

func (x *MaxInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type UserResume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Createtime   *uint32  `protobuf:"varint,1,opt,name=createtime,def=0" json:"createtime,omitempty"`
	Logintime    *uint32  `protobuf:"varint,2,opt,name=logintime,def=0" json:"logintime,omitempty"`
	Bepro_1Time  *uint32  `protobuf:"varint,3,opt,name=bepro_1_time,json=bepro1Time,def=0" json:"bepro_1_time,omitempty"`
	Bepro_2Time  *uint32  `protobuf:"varint,4,opt,name=bepro_2_time,json=bepro2Time,def=0" json:"bepro_2_time,omitempty"`
	Bepro_3Time  *uint32  `protobuf:"varint,5,opt,name=bepro_3_time,json=bepro3Time,def=0" json:"bepro_3_time,omitempty"`
	WalkDistance *uint64  `protobuf:"varint,6,opt,name=walk_distance,json=walkDistance,def=0" json:"walk_distance,omitempty"`
	MaxTeam      *string  `protobuf:"bytes,7,opt,name=max_team,json=maxTeam" json:"max_team,omitempty"`
	MaxHand      *string  `protobuf:"bytes,8,opt,name=max_hand,json=maxHand" json:"max_hand,omitempty"`
	MaxWheel     *string  `protobuf:"bytes,9,opt,name=max_wheel,json=maxWheel" json:"max_wheel,omitempty"`
	MaxChat      *string  `protobuf:"bytes,10,opt,name=max_chat,json=maxChat" json:"max_chat,omitempty"`
	MaxTeams     []string `protobuf:"bytes,11,rep,name=max_teams,json=maxTeams" json:"max_teams,omitempty"`
	MaxHands     []string `protobuf:"bytes,12,rep,name=max_hands,json=maxHands" json:"max_hands,omitempty"`
	MaxWheels    []string `protobuf:"bytes,13,rep,name=max_wheels,json=maxWheels" json:"max_wheels,omitempty"`
	MaxChats     []string `protobuf:"bytes,14,rep,name=max_chats,json=maxChats" json:"max_chats,omitempty"`
	MaxMusic     []string `protobuf:"bytes,15,rep,name=max_music,json=maxMusic" json:"max_music,omitempty"`
	MaxSave      []string `protobuf:"bytes,16,rep,name=max_save,json=maxSave" json:"max_save,omitempty"`
	MaxBesave    []string `protobuf:"bytes,17,rep,name=max_besave,json=maxBesave" json:"max_besave,omitempty"`
}

// Default values for UserResume fields.
const (
	Default_UserResume_Createtime   = uint32(0)
	Default_UserResume_Logintime    = uint32(0)
	Default_UserResume_Bepro_1Time  = uint32(0)
	Default_UserResume_Bepro_2Time  = uint32(0)
	Default_UserResume_Bepro_3Time  = uint32(0)
	Default_UserResume_WalkDistance = uint64(0)
)

func (x *UserResume) Reset() {
	*x = UserResume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AchieveCmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResume) ProtoMessage() {}

func (x *UserResume) ProtoReflect() protoreflect.Message {
	mi := &file_AchieveCmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResume.ProtoReflect.Descriptor instead.
func (*UserResume) Descriptor() ([]byte, []int) {
	return file_AchieveCmd_proto_rawDescGZIP(), []int{1}
}

func (x *UserResume) GetCreatetime() uint32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return Default_UserResume_Createtime
}

func (x *UserResume) GetLogintime() uint32 {
	if x != nil && x.Logintime != nil {
		return *x.Logintime
	}
	return Default_UserResume_Logintime
}

func (x *UserResume) GetBepro_1Time() uint32 {
	if x != nil && x.Bepro_1Time != nil {
		return *x.Bepro_1Time
	}
	return Default_UserResume_Bepro_1Time
}

func (x *UserResume) GetBepro_2Time() uint32 {
	if x != nil && x.Bepro_2Time != nil {
		return *x.Bepro_2Time
	}
	return Default_UserResume_Bepro_2Time
}

func (x *UserResume) GetBepro_3Time() uint32 {
	if x != nil && x.Bepro_3Time != nil {
		return *x.Bepro_3Time
	}
	return Default_UserResume_Bepro_3Time
}

func (x *UserResume) GetWalkDistance() uint64 {
	if x != nil && x.WalkDistance != nil {
		return *x.WalkDistance
	}
	return Default_UserResume_WalkDistance
}

func (x *UserResume) GetMaxTeam() string {
	if x != nil && x.MaxTeam != nil {
		return *x.MaxTeam
	}
	return ""
}

func (x *UserResume) GetMaxHand() string {
	if x != nil && x.MaxHand != nil {
		return *x.MaxHand
	}
	return ""
}

func (x *UserResume) GetMaxWheel() string {
	if x != nil && x.MaxWheel != nil {
		return *x.MaxWheel
	}
	return ""
}

func (x *UserResume) GetMaxChat() string {
	if x != nil && x.MaxChat != nil {
		return *x.MaxChat
	}
	return ""
}

func (x *UserResume) GetMaxTeams() []string {
	if x != nil {
		return x.MaxTeams
	}
	return nil
}

func (x *UserResume) GetMaxHands() []string {
	if x != nil {
		return x.MaxHands
	}
	return nil
}

func (x *UserResume) GetMaxWheels() []string {
	if x != nil {
		return x.MaxWheels
	}
	return nil
}

func (x *UserResume) GetMaxChats() []string {
	if x != nil {
		return x.MaxChats
	}
	return nil
}

func (x *UserResume) GetMaxMusic() []string {
	if x != nil {
		return x.MaxMusic
	}
	return nil
}

func (x *UserResume) GetMaxSave() []string {
	if x != nil {
		return x.MaxSave
	}
	return nil
}

func (x *UserResume) GetMaxBesave() []string {
	if x != nil {
		return x.MaxBesave
	}
	return nil
}

type AchieveQuest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *uint32         `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Name *string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Pre  []*AchieveQuest `protobuf:"bytes,3,rep,name=pre" json:"pre,omitempty"`
}

// Default values for AchieveQuest fields.
const (
	Default_AchieveQuest_Id = uint32(0)
)

func (x *AchieveQuest) Reset() {
	*x = AchieveQuest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AchieveCmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchieveQuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchieveQuest) ProtoMessage() {}

func (x *AchieveQuest) ProtoReflect() protoreflect.Message {
	mi := &file_AchieveCmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchieveQuest.ProtoReflect.Descriptor instead.
func (*AchieveQuest) Descriptor() ([]byte, []int) {
	return file_AchieveCmd_proto_rawDescGZIP(), []int{2}
}

func (x *AchieveQuest) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_AchieveQuest_Id
}

func (x *AchieveQuest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AchieveQuest) GetPre() []*AchieveQuest {
	if x != nil {
		return x.Pre
	}
	return nil
}

type AchieveItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *uint32         `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Process    *uint32         `protobuf:"varint,2,opt,name=process,def=0" json:"process,omitempty"`
	Finishtime *uint32         `protobuf:"varint,3,opt,name=finishtime,def=0" json:"finishtime,omitempty"`
	Params     []uint64        `protobuf:"varint,4,rep,name=params" json:"params,omitempty"`
	Quests     []*AchieveQuest `protobuf:"bytes,6,rep,name=quests" json:"quests,omitempty"`
	RewardGet  *bool           `protobuf:"varint,5,opt,name=reward_get,json=rewardGet,def=0" json:"reward_get,omitempty"`
}

// Default values for AchieveItem fields.
const (
	Default_AchieveItem_Id         = uint32(0)
	Default_AchieveItem_Process    = uint32(0)
	Default_AchieveItem_Finishtime = uint32(0)
	Default_AchieveItem_RewardGet  = bool(false)
)

func (x *AchieveItem) Reset() {
	*x = AchieveItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AchieveCmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchieveItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchieveItem) ProtoMessage() {}

func (x *AchieveItem) ProtoReflect() protoreflect.Message {
	mi := &file_AchieveCmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchieveItem.ProtoReflect.Descriptor instead.
func (*AchieveItem) Descriptor() ([]byte, []int) {
	return file_AchieveCmd_proto_rawDescGZIP(), []int{3}
}

func (x *AchieveItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_AchieveItem_Id
}

func (x *AchieveItem) GetProcess() uint32 {
	if x != nil && x.Process != nil {
		return *x.Process
	}
	return Default_AchieveItem_Process
}

func (x *AchieveItem) GetFinishtime() uint32 {
	if x != nil && x.Finishtime != nil {
		return *x.Finishtime
	}
	return Default_AchieveItem_Finishtime
}

func (x *AchieveItem) GetParams() []uint64 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *AchieveItem) GetQuests() []*AchieveQuest {
	if x != nil {
		return x.Quests
	}
	return nil
}

func (x *AchieveItem) GetRewardGet() bool {
	if x != nil && x.RewardGet != nil {
		return *x.RewardGet
	}
	return Default_AchieveItem_RewardGet
}

type AchieveSubData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *EAchieveSubType `protobuf:"varint,1,opt,name=type,enum=Cmd.EAchieveSubType,def=0" json:"type,omitempty"`
	Items []*AchieveItem   `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

// Default values for AchieveSubData fields.
const (
	Default_AchieveSubData_Type = EAchieveSubType_EACHIEVESUBTYPE_MIN
)

func (x *AchieveSubData) Reset() {
	*x = AchieveSubData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AchieveCmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchieveSubData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchieveSubData) ProtoMessage() {}

func (x *AchieveSubData) ProtoReflect() protoreflect.Message {
	mi := &file_AchieveCmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchieveSubData.ProtoReflect.Descriptor instead.
func (*AchieveSubData) Descriptor() ([]byte, []int) {
	return file_AchieveCmd_proto_rawDescGZIP(), []int{4}
}

func (x *AchieveSubData) GetType() EAchieveSubType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_AchieveSubData_Type
}

func (x *AchieveSubData) GetItems() []*AchieveItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type AchieveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *EAchieveType     `protobuf:"varint,1,opt,name=type,enum=Cmd.EAchieveType,def=0" json:"type,omitempty"`
	Datas []*AchieveSubData `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
}

// Default values for AchieveData fields.
const (
	Default_AchieveData_Type = EAchieveType_EACHIEVETYPE_MIN
)

func (x *AchieveData) Reset() {
	*x = AchieveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AchieveCmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AchieveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AchieveData) ProtoMessage() {}

func (x *AchieveData) ProtoReflect() protoreflect.Message {
	mi := &file_AchieveCmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AchieveData.ProtoReflect.Descriptor instead.
func (*AchieveData) Descriptor() ([]byte, []int) {
	return file_AchieveCmd_proto_rawDescGZIP(), []int{5}
}

func (x *AchieveData) GetType() EAchieveType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_AchieveData_Type
}

func (x *AchieveData) GetDatas() []*AchieveSubData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type QueryUserResumeAchCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=17" json:"cmd,omitempty"`
	Param *AchieveParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AchieveParam,def=1" json:"param,omitempty"`
	Data  *UserResume   `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

// Default values for QueryUserResumeAchCmd fields.
const (
	Default_QueryUserResumeAchCmd_Cmd   = Command_SCENE_USER_ACHIEVE_PROTOCMD
	Default_QueryUserResumeAchCmd_Param = AchieveParam_ACHIEVEPARAM_QUERY_USERRESUME
)

func (x *QueryUserResumeAchCmd) Reset() {
	*x = QueryUserResumeAchCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AchieveCmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserResumeAchCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserResumeAchCmd) ProtoMessage() {}

func (x *QueryUserResumeAchCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AchieveCmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserResumeAchCmd.ProtoReflect.Descriptor instead.
func (*QueryUserResumeAchCmd) Descriptor() ([]byte, []int) {
	return file_AchieveCmd_proto_rawDescGZIP(), []int{6}
}

func (x *QueryUserResumeAchCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryUserResumeAchCmd_Cmd
}

func (x *QueryUserResumeAchCmd) GetParam() AchieveParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryUserResumeAchCmd_Param
}

func (x *QueryUserResumeAchCmd) GetData() *UserResume {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryAchieveDataAchCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=17" json:"cmd,omitempty"`
	Param *AchieveParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.AchieveParam,def=2" json:"param,omitempty"`
	Type  *EAchieveType  `protobuf:"varint,3,opt,name=type,enum=Cmd.EAchieveType,def=0" json:"type,omitempty"`
	Items []*AchieveItem `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

// Default values for QueryAchieveDataAchCmd fields.
const (
	Default_QueryAchieveDataAchCmd_Cmd   = Command_SCENE_USER_ACHIEVE_PROTOCMD
	Default_QueryAchieveDataAchCmd_Param = AchieveParam_ACHIEVEPARAM_QUERY_ACHDATA
	Default_QueryAchieveDataAchCmd_Type  = EAchieveType_EACHIEVETYPE_MIN
)

func (x *QueryAchieveDataAchCmd) Reset() {
	*x = QueryAchieveDataAchCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AchieveCmd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAchieveDataAchCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAchieveDataAchCmd) ProtoMessage() {}

func (x *QueryAchieveDataAchCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AchieveCmd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAchieveDataAchCmd.ProtoReflect.Descriptor instead.
func (*QueryAchieveDataAchCmd) Descriptor() ([]byte, []int) {
	return file_AchieveCmd_proto_rawDescGZIP(), []int{7}
}

func (x *QueryAchieveDataAchCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryAchieveDataAchCmd_Cmd
}

func (x *QueryAchieveDataAchCmd) GetParam() AchieveParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryAchieveDataAchCmd_Param
}

func (x *QueryAchieveDataAchCmd) GetType() EAchieveType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_QueryAchieveDataAchCmd_Type
}

func (x *QueryAchieveDataAchCmd) GetItems() []*AchieveItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type NewAchieveNtfAchCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=17" json:"cmd,omitempty"`
	Param *AchieveParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.AchieveParam,def=3" json:"param,omitempty"`
	Type  *EAchieveType  `protobuf:"varint,3,opt,name=type,enum=Cmd.EAchieveType,def=0" json:"type,omitempty"`
	Items []*AchieveItem `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

// Default values for NewAchieveNtfAchCmd fields.
const (
	Default_NewAchieveNtfAchCmd_Cmd   = Command_SCENE_USER_ACHIEVE_PROTOCMD
	Default_NewAchieveNtfAchCmd_Param = AchieveParam_ACHIEVEPARAM_NEW_ACHNTF
	Default_NewAchieveNtfAchCmd_Type  = EAchieveType_EACHIEVETYPE_MIN
)

func (x *NewAchieveNtfAchCmd) Reset() {
	*x = NewAchieveNtfAchCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AchieveCmd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewAchieveNtfAchCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAchieveNtfAchCmd) ProtoMessage() {}

func (x *NewAchieveNtfAchCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AchieveCmd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAchieveNtfAchCmd.ProtoReflect.Descriptor instead.
func (*NewAchieveNtfAchCmd) Descriptor() ([]byte, []int) {
	return file_AchieveCmd_proto_rawDescGZIP(), []int{8}
}

func (x *NewAchieveNtfAchCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NewAchieveNtfAchCmd_Cmd
}

func (x *NewAchieveNtfAchCmd) GetParam() AchieveParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NewAchieveNtfAchCmd_Param
}

func (x *NewAchieveNtfAchCmd) GetType() EAchieveType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_NewAchieveNtfAchCmd_Type
}

func (x *NewAchieveNtfAchCmd) GetItems() []*AchieveItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type RewardGetAchCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=17" json:"cmd,omitempty"`
	Param *AchieveParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AchieveParam,def=4" json:"param,omitempty"`
	Id    *uint32       `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
}

// Default values for RewardGetAchCmd fields.
const (
	Default_RewardGetAchCmd_Cmd   = Command_SCENE_USER_ACHIEVE_PROTOCMD
	Default_RewardGetAchCmd_Param = AchieveParam_ACHIEVEPARAM_REWARD_GET
	Default_RewardGetAchCmd_Id    = uint32(0)
)

func (x *RewardGetAchCmd) Reset() {
	*x = RewardGetAchCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AchieveCmd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardGetAchCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardGetAchCmd) ProtoMessage() {}

func (x *RewardGetAchCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AchieveCmd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardGetAchCmd.ProtoReflect.Descriptor instead.
func (*RewardGetAchCmd) Descriptor() ([]byte, []int) {
	return file_AchieveCmd_proto_rawDescGZIP(), []int{9}
}

func (x *RewardGetAchCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RewardGetAchCmd_Cmd
}

func (x *RewardGetAchCmd) GetParam() AchieveParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RewardGetAchCmd_Param
}

func (x *RewardGetAchCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_RewardGetAchCmd_Id
}

type RewardGetQuickAchCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=17" json:"cmd,omitempty"`
	Param *AchieveParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AchieveParam,def=5" json:"param,omitempty"`
	Ids   []uint32      `protobuf:"varint,3,rep,name=ids" json:"ids,omitempty"`
}

// Default values for RewardGetQuickAchCmd fields.
const (
	Default_RewardGetQuickAchCmd_Cmd   = Command_SCENE_USER_ACHIEVE_PROTOCMD
	Default_RewardGetQuickAchCmd_Param = AchieveParam_ACHIEVEPARAM_REWARD_GET_QUICK
)

func (x *RewardGetQuickAchCmd) Reset() {
	*x = RewardGetQuickAchCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AchieveCmd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardGetQuickAchCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardGetQuickAchCmd) ProtoMessage() {}

func (x *RewardGetQuickAchCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AchieveCmd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardGetQuickAchCmd.ProtoReflect.Descriptor instead.
func (*RewardGetQuickAchCmd) Descriptor() ([]byte, []int) {
	return file_AchieveCmd_proto_rawDescGZIP(), []int{10}
}

func (x *RewardGetQuickAchCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RewardGetQuickAchCmd_Cmd
}

func (x *RewardGetQuickAchCmd) GetParam() AchieveParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RewardGetQuickAchCmd_Param
}

func (x *RewardGetQuickAchCmd) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_AchieveCmd_proto protoreflect.FileDescriptor

var file_AchieveCmd_proto_rawDesc = []byte{
	0x0a, 0x10, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x04, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x62, 0x65, 0x70, 0x72, 0x6f,
	0x5f, 0x31, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x0a, 0x62, 0x65, 0x70, 0x72, 0x6f, 0x31, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c,
	0x62, 0x65, 0x70, 0x72, 0x6f, 0x5f, 0x32, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x62, 0x65, 0x70, 0x72, 0x6f, 0x32, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x62, 0x65, 0x70, 0x72, 0x6f, 0x5f, 0x33, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x62, 0x65, 0x70, 0x72,
	0x6f, 0x33, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x77, 0x61, 0x6c, 0x6b, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x48, 0x61, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x68, 0x65, 0x65,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x57, 0x68, 0x65, 0x65,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x68,
	0x65, 0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x57,
	0x68, 0x65, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x61,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x61, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x5f, 0x62, 0x65, 0x73, 0x61, 0x76, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x42, 0x65, 0x73, 0x61, 0x76, 0x65, 0x22, 0x5a, 0x0a, 0x0c, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x03, 0x70, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x03, 0x70, 0x72, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x29, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0a, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x65,
	0x74, 0x22, 0x77, 0x0a, 0x0e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x53, 0x75, 0x62, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x13, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56,
	0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x71, 0x0a, 0x0b, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x41, 0x43, 0x48,
	0x49, 0x45, 0x56, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x53,
	0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xc1, 0x01,
	0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x41, 0x63, 0x68, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41,
	0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52,
	0x45, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xfb, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x68, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x41, 0x43, 0x48,
	0x49, 0x45, 0x56, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x41, 0x43, 0x48, 0x44, 0x41, 0x54, 0x41, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x37,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x10, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0xf5, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x4e, 0x74,
	0x66, 0x41, 0x63, 0x68, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41,
	0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x43, 0x48, 0x4e, 0x54, 0x46, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x47, 0x65, 0x74, 0x41, 0x63, 0x68, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x41, 0x43, 0x48, 0x49,
	0x45, 0x56, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f,
	0x47, 0x45, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x22, 0xad, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x65, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x41, 0x63, 0x68, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x1b, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43,
	0x48, 0x49, 0x45, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x51,
	0x55, 0x49, 0x43, 0x4b, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x2a, 0xae, 0x01,
	0x0a, 0x0c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21,
	0x0a, 0x1d, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x48, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x43, 0x48, 0x4e, 0x54, 0x46, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52,
	0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x41,
	0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x10, 0x05, 0x2a, 0xfa,
	0x01, 0x0a, 0x0c, 0x45, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x11, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xe0, 0x91, 0x43, 0x12, 0x19,
	0x0a, 0x13, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x4f, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x80, 0x9f, 0x49, 0x12, 0x1c, 0x0a, 0x16, 0x45, 0x41, 0x43,
	0x48, 0x49, 0x45, 0x56, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x4e, 0x54,
	0x55, 0x52, 0x45, 0x10, 0xa0, 0xac, 0x4f, 0x12, 0x19, 0x0a, 0x13, 0x45, 0x41, 0x43, 0x48, 0x49,
	0x45, 0x56, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0xc0,
	0xb9, 0x55, 0x12, 0x18, 0x0a, 0x12, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x4d, 0x41, 0x10, 0x90, 0xc0, 0x58, 0x12, 0x1b, 0x0a, 0x15,
	0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xe0, 0xc6, 0x5b, 0x12, 0x18, 0x0a, 0x12, 0x45, 0x41, 0x43,
	0x48, 0x49, 0x45, 0x56, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x80, 0xd4, 0x61, 0x12, 0x16, 0x0a, 0x10, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x81, 0xd4, 0x61, 0x2a, 0xf9, 0x0a, 0x0a, 0x0f,
	0x45, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x17, 0x45, 0x41, 0x43, 0x48,
	0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x55, 0x50, 0x10, 0xc8, 0x99, 0x43, 0x12, 0x1a, 0x0a, 0x14, 0x45, 0x41, 0x43, 0x48, 0x49,
	0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x10,
	0xb0, 0xa1, 0x43, 0x12, 0x20, 0x0a, 0x1a, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53,
	0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x98, 0xa9, 0x43, 0x12, 0x1c, 0x0a, 0x16, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56,
	0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10,
	0xe8, 0xa6, 0x49, 0x12, 0x1c, 0x0a, 0x16, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53,
	0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x10, 0xd0, 0xae,
	0x49, 0x12, 0x1b, 0x0a, 0x15, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0xb8, 0xb6, 0x49, 0x12, 0x19,
	0x0a, 0x13, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x45, 0x54, 0x10, 0xa0, 0xbe, 0x49, 0x12, 0x1a, 0x0a, 0x14, 0x45, 0x41, 0x43,
	0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f,
	0x44, 0x10, 0x88, 0xc6, 0x49, 0x12, 0x1b, 0x0a, 0x15, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56,
	0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x10, 0xf0,
	0xcd, 0x49, 0x12, 0x1d, 0x0a, 0x17, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xd8, 0xd5,
	0x49, 0x12, 0x19, 0x0a, 0x13, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x88, 0xb4, 0x4f, 0x12, 0x1d, 0x0a, 0x17,
	0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x52, 0x59, 0x10, 0xf0, 0xbb, 0x4f, 0x12, 0x23, 0x0a, 0x1d, 0x45,
	0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0xd8, 0xc3, 0x4f,
	0x12, 0x19, 0x0a, 0x13, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x50, 0x43, 0x10, 0xc0, 0xcb, 0x4f, 0x12, 0x1e, 0x0a, 0x18, 0x45,
	0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x10, 0xa8, 0xd3, 0x4f, 0x12, 0x1b, 0x0a, 0x15, 0x45,
	0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x49, 0x54, 0x4c, 0x45, 0x10, 0x90, 0xdb, 0x4f, 0x12, 0x22, 0x0a, 0x1c, 0x45, 0x41, 0x43, 0x48,
	0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0xa8, 0xc1, 0x55, 0x12, 0x1a, 0x0a, 0x14,
	0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x45, 0x4c, 0x50, 0x10, 0x90, 0xc9, 0x55, 0x12, 0x19, 0x0a, 0x13, 0x45, 0x41, 0x43, 0x48,
	0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x10,
	0xf8, 0xd0, 0x55, 0x12, 0x1a, 0x0a, 0x14, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53,
	0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x10, 0xe0, 0xd8, 0x55, 0x12,
	0x19, 0x0a, 0x13, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x56, 0x50, 0x10, 0xc8, 0xe0, 0x55, 0x12, 0x1c, 0x0a, 0x16, 0x45, 0x41,
	0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x43,
	0x52, 0x41, 0x53, 0x54, 0x10, 0xf8, 0xc7, 0x58, 0x12, 0x1b, 0x0a, 0x15, 0x45, 0x41, 0x43, 0x48,
	0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0xe0, 0xcf, 0x58, 0x12, 0x19, 0x0a, 0x13, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56,
	0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x59, 0x10, 0xc8, 0xd7, 0x58,
	0x12, 0x20, 0x0a, 0x1a, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x59, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0xb0,
	0xdf, 0x58, 0x12, 0x1d, 0x0a, 0x17, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x41, 0x4e, 0x4a, 0x49, 0x4e, 0x10, 0x94, 0xe0,
	0x58, 0x12, 0x1a, 0x0a, 0x14, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x59, 0x55, 0x4e, 0x4f, 0x10, 0xf8, 0xe0, 0x58, 0x12, 0x1e, 0x0a,
	0x18, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x41, 0x44, 0x43, 0x49, 0x54, 0x59, 0x10, 0xdc, 0xe1, 0x58, 0x12, 0x21, 0x0a,
	0x1b, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x48, 0x41, 0x4c, 0x5a, 0x45, 0x4e, 0x10, 0xc0, 0xe2, 0x58,
	0x12, 0x1d, 0x0a, 0x17, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x54, 0x48, 0x41, 0x4e, 0x41, 0x10, 0xa4, 0xe3, 0x58, 0x12,
	0x1c, 0x0a, 0x16, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x41, 0x43, 0x48, 0x45, 0x4c, 0x10, 0x88, 0xe4, 0x58, 0x12, 0x1d, 0x0a,
	0x17, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x55, 0x4f, 0x59, 0x41, 0x4e, 0x47, 0x10, 0xec, 0xe4, 0x58, 0x12, 0x1c, 0x0a, 0x16,
	0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x43, 0x48, 0x4f, 0x4f, 0x4c, 0x10, 0xd0, 0xe5, 0x58, 0x12, 0x1c, 0x0a, 0x16, 0x45, 0x41,
	0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43,
	0x4c, 0x41, 0x47, 0x45, 0x10, 0xb4, 0xe6, 0x58, 0x12, 0x23, 0x0a, 0x1d, 0x45, 0x41, 0x43, 0x48,
	0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x41, 0x4e,
	0x44, 0x52, 0x41, 0x50, 0x41, 0x4c, 0x41, 0x43, 0x45, 0x10, 0xc8, 0xe6, 0x58, 0x12, 0x21, 0x0a,
	0x1b, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x52, 0x41, 0x4d, 0x41, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x98, 0xe7, 0x58,
	0x12, 0x1a, 0x0a, 0x14, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x43, 0x41, 0x54, 0x10, 0xc8, 0xce, 0x5b, 0x12, 0x1a, 0x0a, 0x14,
	0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x10, 0xb0, 0xd6, 0x5b, 0x12, 0x1b, 0x0a, 0x15, 0x45, 0x41, 0x43, 0x48,
	0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x10, 0xe8, 0xdb, 0x61, 0x12, 0x1b, 0x0a, 0x15, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56,
	0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0xd0,
	0xe3, 0x61, 0x12, 0x1d, 0x0a, 0x17, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55,
	0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x10, 0xb8, 0xeb,
	0x61, 0x12, 0x1a, 0x0a, 0x14, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x10, 0xa0, 0xf3, 0x61, 0x12, 0x1f, 0x0a,
	0x19, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x10, 0x88, 0xfb, 0x61, 0x12, 0x1b,
	0x0a, 0x15, 0x45, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x10, 0xf0, 0x82, 0x62, 0x12, 0x1a, 0x0a, 0x13, 0x45,
	0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x53, 0x55, 0x42, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x58, 0x10, 0xe1, 0x9e, 0x8f, 0x02,
}

var (
	file_AchieveCmd_proto_rawDescOnce sync.Once
	file_AchieveCmd_proto_rawDescData = file_AchieveCmd_proto_rawDesc
)

func file_AchieveCmd_proto_rawDescGZIP() []byte {
	file_AchieveCmd_proto_rawDescOnce.Do(func() {
		file_AchieveCmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_AchieveCmd_proto_rawDescData)
	})
	return file_AchieveCmd_proto_rawDescData
}

var file_AchieveCmd_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_AchieveCmd_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_AchieveCmd_proto_goTypes = []interface{}{
	(AchieveParam)(0),              // 0: Cmd.AchieveParam
	(EAchieveType)(0),              // 1: Cmd.EAchieveType
	(EAchieveSubType)(0),           // 2: Cmd.EAchieveSubType
	(*MaxInfo)(nil),                // 3: Cmd.MaxInfo
	(*UserResume)(nil),             // 4: Cmd.UserResume
	(*AchieveQuest)(nil),           // 5: Cmd.AchieveQuest
	(*AchieveItem)(nil),            // 6: Cmd.AchieveItem
	(*AchieveSubData)(nil),         // 7: Cmd.AchieveSubData
	(*AchieveData)(nil),            // 8: Cmd.AchieveData
	(*QueryUserResumeAchCmd)(nil),  // 9: Cmd.QueryUserResumeAchCmd
	(*QueryAchieveDataAchCmd)(nil), // 10: Cmd.QueryAchieveDataAchCmd
	(*NewAchieveNtfAchCmd)(nil),    // 11: Cmd.NewAchieveNtfAchCmd
	(*RewardGetAchCmd)(nil),        // 12: Cmd.RewardGetAchCmd
	(*RewardGetQuickAchCmd)(nil),   // 13: Cmd.RewardGetQuickAchCmd
	(Command)(0),                   // 14: Cmd.Command
}
var file_AchieveCmd_proto_depIdxs = []int32{
	5,  // 0: Cmd.AchieveQuest.pre:type_name -> Cmd.AchieveQuest
	5,  // 1: Cmd.AchieveItem.quests:type_name -> Cmd.AchieveQuest
	2,  // 2: Cmd.AchieveSubData.type:type_name -> Cmd.EAchieveSubType
	6,  // 3: Cmd.AchieveSubData.items:type_name -> Cmd.AchieveItem
	1,  // 4: Cmd.AchieveData.type:type_name -> Cmd.EAchieveType
	7,  // 5: Cmd.AchieveData.datas:type_name -> Cmd.AchieveSubData
	14, // 6: Cmd.QueryUserResumeAchCmd.cmd:type_name -> Cmd.Command
	0,  // 7: Cmd.QueryUserResumeAchCmd.param:type_name -> Cmd.AchieveParam
	4,  // 8: Cmd.QueryUserResumeAchCmd.data:type_name -> Cmd.UserResume
	14, // 9: Cmd.QueryAchieveDataAchCmd.cmd:type_name -> Cmd.Command
	0,  // 10: Cmd.QueryAchieveDataAchCmd.param:type_name -> Cmd.AchieveParam
	1,  // 11: Cmd.QueryAchieveDataAchCmd.type:type_name -> Cmd.EAchieveType
	6,  // 12: Cmd.QueryAchieveDataAchCmd.items:type_name -> Cmd.AchieveItem
	14, // 13: Cmd.NewAchieveNtfAchCmd.cmd:type_name -> Cmd.Command
	0,  // 14: Cmd.NewAchieveNtfAchCmd.param:type_name -> Cmd.AchieveParam
	1,  // 15: Cmd.NewAchieveNtfAchCmd.type:type_name -> Cmd.EAchieveType
	6,  // 16: Cmd.NewAchieveNtfAchCmd.items:type_name -> Cmd.AchieveItem
	14, // 17: Cmd.RewardGetAchCmd.cmd:type_name -> Cmd.Command
	0,  // 18: Cmd.RewardGetAchCmd.param:type_name -> Cmd.AchieveParam
	14, // 19: Cmd.RewardGetQuickAchCmd.cmd:type_name -> Cmd.Command
	0,  // 20: Cmd.RewardGetQuickAchCmd.param:type_name -> Cmd.AchieveParam
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_AchieveCmd_proto_init() }
func file_AchieveCmd_proto_init() {
	if File_AchieveCmd_proto != nil {
		return
	}
	file_xCmd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_AchieveCmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AchieveCmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserResume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AchieveCmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchieveQuest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AchieveCmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchieveItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AchieveCmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchieveSubData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AchieveCmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AchieveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AchieveCmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserResumeAchCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AchieveCmd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAchieveDataAchCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AchieveCmd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewAchieveNtfAchCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AchieveCmd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardGetAchCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AchieveCmd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardGetQuickAchCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_AchieveCmd_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_AchieveCmd_proto_goTypes,
		DependencyIndexes: file_AchieveCmd_proto_depIdxs,
		EnumInfos:         file_AchieveCmd_proto_enumTypes,
		MessageInfos:      file_AchieveCmd_proto_msgTypes,
	}.Build()
	File_AchieveCmd_proto = out.File
	file_AchieveCmd_proto_rawDesc = nil
	file_AchieveCmd_proto_goTypes = nil
	file_AchieveCmd_proto_depIdxs = nil
}
