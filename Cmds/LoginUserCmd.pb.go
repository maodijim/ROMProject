// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: LoginUserCmd.proto

package Cmd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LoginCmdParam int32

const (
	LoginCmdParam_ACCPASS_REG_USER_CMD        LoginCmdParam = 1
	LoginCmdParam_GATE_IP_USER_CMD            LoginCmdParam = 2
	LoginCmdParam_REG_GATE_USER_CMD           LoginCmdParam = 3
	LoginCmdParam_REG_RESULT_USER_CMD         LoginCmdParam = 4
	LoginCmdParam_CREATE_CHAR_USER_CMD        LoginCmdParam = 5
	LoginCmdParam_SNAPSHOT_USER_CMD           LoginCmdParam = 6
	LoginCmdParam_SELECT_ROLE_USER_CMD        LoginCmdParam = 7
	LoginCmdParam_LOGIN_RESULT_USER_CMD       LoginCmdParam = 8
	LoginCmdParam_DELETE_CHAR_USER_CMD        LoginCmdParam = 9
	LoginCmdParam_HEART_BEAT_USER_CMD         LoginCmdParam = 10
	LoginCmdParam_SERVERTIME_USER_CMD         LoginCmdParam = 11
	LoginCmdParam_GM_DELETE_CHAR_USER_CMD     LoginCmdParam = 12
	LoginCmdParam_CLIENT_INFO_USER_CMD        LoginCmdParam = 13
	LoginCmdParam_REQ_LOGIN_USER_CMD          LoginCmdParam = 14
	LoginCmdParam_REQ_LOGIN_PARAM_USER_CMD    LoginCmdParam = 15
	LoginCmdParam_KICK_PARAM_USER_CMD         LoginCmdParam = 16
	LoginCmdParam_CANCEL_DELETE_CHAR_USER_CMD LoginCmdParam = 17
	LoginCmdParam_CLIENT_FRAME_USER_CMD       LoginCmdParam = 18
	LoginCmdParam_SAFE_DEVICE_USER_CMD        LoginCmdParam = 19
	LoginCmdParam_CONFIRM_AUTHORIZE_USER_CMD  LoginCmdParam = 20
	LoginCmdParam_SYNC_AUTHORIZE_GATE_CMD     LoginCmdParam = 21
	LoginCmdParam_REAL_AUTHORIZE_USER_CMD     LoginCmdParam = 22
	LoginCmdParam_REAL_AUTHORIZE_SEERVER_CMD  LoginCmdParam = 23
	LoginCmdParam_REFRESH_ZONEID_USER_CMD     LoginCmdParam = 24
	LoginCmdParam_QUERY_AFK_STAT_USER_CMD     LoginCmdParam = 25
)

// Enum value maps for LoginCmdParam.
var (
	LoginCmdParam_name = map[int32]string{
		1:  "ACCPASS_REG_USER_CMD",
		2:  "GATE_IP_USER_CMD",
		3:  "REG_GATE_USER_CMD",
		4:  "REG_RESULT_USER_CMD",
		5:  "CREATE_CHAR_USER_CMD",
		6:  "SNAPSHOT_USER_CMD",
		7:  "SELECT_ROLE_USER_CMD",
		8:  "LOGIN_RESULT_USER_CMD",
		9:  "DELETE_CHAR_USER_CMD",
		10: "HEART_BEAT_USER_CMD",
		11: "SERVERTIME_USER_CMD",
		12: "GM_DELETE_CHAR_USER_CMD",
		13: "CLIENT_INFO_USER_CMD",
		14: "REQ_LOGIN_USER_CMD",
		15: "REQ_LOGIN_PARAM_USER_CMD",
		16: "KICK_PARAM_USER_CMD",
		17: "CANCEL_DELETE_CHAR_USER_CMD",
		18: "CLIENT_FRAME_USER_CMD",
		19: "SAFE_DEVICE_USER_CMD",
		20: "CONFIRM_AUTHORIZE_USER_CMD",
		21: "SYNC_AUTHORIZE_GATE_CMD",
		22: "REAL_AUTHORIZE_USER_CMD",
		23: "REAL_AUTHORIZE_SEERVER_CMD",
		24: "REFRESH_ZONEID_USER_CMD",
		25: "QUERY_AFK_STAT_USER_CMD",
	}
	LoginCmdParam_value = map[string]int32{
		"ACCPASS_REG_USER_CMD":        1,
		"GATE_IP_USER_CMD":            2,
		"REG_GATE_USER_CMD":           3,
		"REG_RESULT_USER_CMD":         4,
		"CREATE_CHAR_USER_CMD":        5,
		"SNAPSHOT_USER_CMD":           6,
		"SELECT_ROLE_USER_CMD":        7,
		"LOGIN_RESULT_USER_CMD":       8,
		"DELETE_CHAR_USER_CMD":        9,
		"HEART_BEAT_USER_CMD":         10,
		"SERVERTIME_USER_CMD":         11,
		"GM_DELETE_CHAR_USER_CMD":     12,
		"CLIENT_INFO_USER_CMD":        13,
		"REQ_LOGIN_USER_CMD":          14,
		"REQ_LOGIN_PARAM_USER_CMD":    15,
		"KICK_PARAM_USER_CMD":         16,
		"CANCEL_DELETE_CHAR_USER_CMD": 17,
		"CLIENT_FRAME_USER_CMD":       18,
		"SAFE_DEVICE_USER_CMD":        19,
		"CONFIRM_AUTHORIZE_USER_CMD":  20,
		"SYNC_AUTHORIZE_GATE_CMD":     21,
		"REAL_AUTHORIZE_USER_CMD":     22,
		"REAL_AUTHORIZE_SEERVER_CMD":  23,
		"REFRESH_ZONEID_USER_CMD":     24,
		"QUERY_AFK_STAT_USER_CMD":     25,
	}
)

func (x LoginCmdParam) Enum() *LoginCmdParam {
	p := new(LoginCmdParam)
	*p = x
	return p
}

func (x LoginCmdParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginCmdParam) Descriptor() protoreflect.EnumDescriptor {
	return file_LoginUserCmd_proto_enumTypes[0].Descriptor()
}

func (LoginCmdParam) Type() protoreflect.EnumType {
	return &file_LoginUserCmd_proto_enumTypes[0]
}

func (x LoginCmdParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LoginCmdParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LoginCmdParam(num)
	return nil
}

// Deprecated: Use LoginCmdParam.Descriptor instead.
func (LoginCmdParam) EnumDescriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{0}
}

type EArea int32

const (
	EArea_EAREA_MIN EArea = 0
	EArea_EAREA_CH  EArea = 1
	EArea_EAREA_TW  EArea = 2
	EArea_EAREA_WW  EArea = 3
	EArea_EAREA_JP  EArea = 4
	EArea_EAREA_KR  EArea = 5
	EArea_EAREA_NA  EArea = 6
	EArea_EAREA_EU  EArea = 7
	EArea_EAREA_MAX EArea = 8
)

// Enum value maps for EArea.
var (
	EArea_name = map[int32]string{
		0: "EAREA_MIN",
		1: "EAREA_CH",
		2: "EAREA_TW",
		3: "EAREA_WW",
		4: "EAREA_JP",
		5: "EAREA_KR",
		6: "EAREA_NA",
		7: "EAREA_EU",
		8: "EAREA_MAX",
	}
	EArea_value = map[string]int32{
		"EAREA_MIN": 0,
		"EAREA_CH":  1,
		"EAREA_TW":  2,
		"EAREA_WW":  3,
		"EAREA_JP":  4,
		"EAREA_KR":  5,
		"EAREA_NA":  6,
		"EAREA_EU":  7,
		"EAREA_MAX": 8,
	}
)

func (x EArea) Enum() *EArea {
	p := new(EArea)
	*p = x
	return p
}

func (x EArea) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EArea) Descriptor() protoreflect.EnumDescriptor {
	return file_LoginUserCmd_proto_enumTypes[1].Descriptor()
}

func (EArea) Type() protoreflect.EnumType {
	return &file_LoginUserCmd_proto_enumTypes[1]
}

func (x EArea) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EArea) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EArea(num)
	return nil
}

// Deprecated: Use EArea.Descriptor instead.
func (EArea) EnumDescriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{1}
}

type RegResultUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=4" json:"param,omitempty"`
	Id    *uint32        `protobuf:"varint,3,req,name=id,def=0" json:"id,omitempty"`
	Ret   *RegErrRet     `protobuf:"varint,4,req,name=ret,enum=Cmd.RegErrRet" json:"ret,omitempty"`
}

// Default values for RegResultUserCmd fields.
const (
	Default_RegResultUserCmd_Cmd   = Command_LOGIN_USER_PROTOCMD
	Default_RegResultUserCmd_Param = LoginCmdParam_REG_RESULT_USER_CMD
	Default_RegResultUserCmd_Id    = uint32(0)
)

func (x *RegResultUserCmd) Reset() {
	*x = RegResultUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegResultUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegResultUserCmd) ProtoMessage() {}

func (x *RegResultUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegResultUserCmd.ProtoReflect.Descriptor instead.
func (*RegResultUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{0}
}

func (x *RegResultUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RegResultUserCmd_Cmd
}

func (x *RegResultUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RegResultUserCmd_Param
}

func (x *RegResultUserCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_RegResultUserCmd_Id
}

func (x *RegResultUserCmd) GetRet() RegErrRet {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return RegErrRet_REG_ERR_SUCC
}

type CreateCharUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param      *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=5" json:"param,omitempty"`
	Name       *string        `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	RoleSex    *uint32        `protobuf:"varint,5,opt,name=role_sex,json=roleSex" json:"role_sex,omitempty"`
	Profession *uint32        `protobuf:"varint,6,opt,name=profession" json:"profession,omitempty"`
	Hair       *uint32        `protobuf:"varint,7,opt,name=hair" json:"hair,omitempty"`
	Haircolor  *uint32        `protobuf:"varint,8,opt,name=haircolor" json:"haircolor,omitempty"`
	Clothcolor *uint32        `protobuf:"varint,9,opt,name=clothcolor" json:"clothcolor,omitempty"`
	Accid      *uint64        `protobuf:"varint,10,opt,name=accid" json:"accid,omitempty"`
	Sequence   *uint32        `protobuf:"varint,11,opt,name=sequence" json:"sequence,omitempty"`
	Version    *string        `protobuf:"bytes,12,opt,name=version" json:"version,omitempty"`
	Serverid   *uint32        `protobuf:"varint,13,opt,name=serverid,def=0" json:"serverid,omitempty"`
	Deviceid   *string        `protobuf:"bytes,14,opt,name=deviceid" json:"deviceid,omitempty"`
	Ip         *uint32        `protobuf:"varint,15,opt,name=ip,def=0" json:"ip,omitempty"`
}

// Default values for CreateCharUserCmd fields.
const (
	Default_CreateCharUserCmd_Cmd      = Command_LOGIN_USER_PROTOCMD
	Default_CreateCharUserCmd_Param    = LoginCmdParam_CREATE_CHAR_USER_CMD
	Default_CreateCharUserCmd_Serverid = uint32(0)
	Default_CreateCharUserCmd_Ip       = uint32(0)
)

func (x *CreateCharUserCmd) Reset() {
	*x = CreateCharUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCharUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCharUserCmd) ProtoMessage() {}

func (x *CreateCharUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCharUserCmd.ProtoReflect.Descriptor instead.
func (*CreateCharUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCharUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CreateCharUserCmd_Cmd
}

func (x *CreateCharUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CreateCharUserCmd_Param
}

func (x *CreateCharUserCmd) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateCharUserCmd) GetRoleSex() uint32 {
	if x != nil && x.RoleSex != nil {
		return *x.RoleSex
	}
	return 0
}

func (x *CreateCharUserCmd) GetProfession() uint32 {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return 0
}

func (x *CreateCharUserCmd) GetHair() uint32 {
	if x != nil && x.Hair != nil {
		return *x.Hair
	}
	return 0
}

func (x *CreateCharUserCmd) GetHaircolor() uint32 {
	if x != nil && x.Haircolor != nil {
		return *x.Haircolor
	}
	return 0
}

func (x *CreateCharUserCmd) GetClothcolor() uint32 {
	if x != nil && x.Clothcolor != nil {
		return *x.Clothcolor
	}
	return 0
}

func (x *CreateCharUserCmd) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return 0
}

func (x *CreateCharUserCmd) GetSequence() uint32 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *CreateCharUserCmd) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CreateCharUserCmd) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return Default_CreateCharUserCmd_Serverid
}

func (x *CreateCharUserCmd) GetDeviceid() string {
	if x != nil && x.Deviceid != nil {
		return *x.Deviceid
	}
	return ""
}

func (x *CreateCharUserCmd) GetIp() uint32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return Default_CreateCharUserCmd_Ip
}

type SnapShotUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param        *LoginCmdParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=6" json:"param,omitempty"`
	Data         []*SnapShotDataPB `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	Lastselect   *uint64           `protobuf:"varint,4,opt,name=lastselect" json:"lastselect,omitempty"`
	Deletechar   *bool             `protobuf:"varint,5,opt,name=deletechar" json:"deletechar,omitempty"`
	Deletecdtime *uint32           `protobuf:"varint,6,opt,name=deletecdtime" json:"deletecdtime,omitempty"`
	Maincharid   *uint64           `protobuf:"varint,7,opt,name=maincharid" json:"maincharid,omitempty"`
	Area         *EArea            `protobuf:"varint,8,opt,name=area,enum=Cmd.EArea,def=1" json:"area,omitempty"`
}

// Default values for SnapShotUserCmd fields.
const (
	Default_SnapShotUserCmd_Cmd   = Command_LOGIN_USER_PROTOCMD
	Default_SnapShotUserCmd_Param = LoginCmdParam_SNAPSHOT_USER_CMD
	Default_SnapShotUserCmd_Area  = EArea_EAREA_CH
)

func (x *SnapShotUserCmd) Reset() {
	*x = SnapShotUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapShotUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapShotUserCmd) ProtoMessage() {}

func (x *SnapShotUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapShotUserCmd.ProtoReflect.Descriptor instead.
func (*SnapShotUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{2}
}

func (x *SnapShotUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SnapShotUserCmd_Cmd
}

func (x *SnapShotUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SnapShotUserCmd_Param
}

func (x *SnapShotUserCmd) GetData() []*SnapShotDataPB {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SnapShotUserCmd) GetLastselect() uint64 {
	if x != nil && x.Lastselect != nil {
		return *x.Lastselect
	}
	return 0
}

func (x *SnapShotUserCmd) GetDeletechar() bool {
	if x != nil && x.Deletechar != nil {
		return *x.Deletechar
	}
	return false
}

func (x *SnapShotUserCmd) GetDeletecdtime() uint32 {
	if x != nil && x.Deletecdtime != nil {
		return *x.Deletecdtime
	}
	return 0
}

func (x *SnapShotUserCmd) GetMaincharid() uint64 {
	if x != nil && x.Maincharid != nil {
		return *x.Maincharid
	}
	return 0
}

func (x *SnapShotUserCmd) GetArea() EArea {
	if x != nil && x.Area != nil {
		return *x.Area
	}
	return Default_SnapShotUserCmd_Area
}

type ExtraData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone      *string `protobuf:"bytes,1,opt,name=phone" json:"phone,omitempty"`
	Safedevice *bool   `protobuf:"varint,2,opt,name=safedevice" json:"safedevice,omitempty"`
	System     *string `protobuf:"bytes,3,opt,name=system" json:"system,omitempty"`
	Model      *string `protobuf:"bytes,4,opt,name=model" json:"model,omitempty"`
	Version    *string `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
}

func (x *ExtraData) Reset() {
	*x = ExtraData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraData) ProtoMessage() {}

func (x *ExtraData) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraData.ProtoReflect.Descriptor instead.
func (*ExtraData) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{3}
}

func (x *ExtraData) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *ExtraData) GetSafedevice() bool {
	if x != nil && x.Safedevice != nil {
		return *x.Safedevice
	}
	return false
}

func (x *ExtraData) GetSystem() string {
	if x != nil && x.System != nil {
		return *x.System
	}
	return ""
}

func (x *ExtraData) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *ExtraData) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type SelectRoleUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd                  *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param                *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=7" json:"param,omitempty"`
	Id                   *uint64        `protobuf:"varint,3,req,name=id" json:"id,omitempty"`
	ZoneID               *uint32        `protobuf:"varint,4,opt,name=zoneID" json:"zoneID,omitempty"`
	Accid                *uint64        `protobuf:"varint,5,opt,name=accid" json:"accid,omitempty"`
	Deviceid             *string        `protobuf:"bytes,6,opt,name=deviceid" json:"deviceid,omitempty"`
	Name                 *string        `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	Version              *string        `protobuf:"bytes,8,opt,name=version" json:"version,omitempty"`
	ExtraData            *ExtraData     `protobuf:"bytes,9,opt,name=extraData" json:"extraData,omitempty"`
	Ignorepwd            *bool          `protobuf:"varint,10,opt,name=ignorepwd" json:"ignorepwd,omitempty"`
	Password             *string        `protobuf:"bytes,11,opt,name=password" json:"password,omitempty"`
	Resettime            *uint32        `protobuf:"varint,12,opt,name=resettime" json:"resettime,omitempty"`
	Language             *uint32        `protobuf:"varint,13,opt,name=language" json:"language,omitempty"`
	Realauthorized       *bool          `protobuf:"varint,14,opt,name=realauthorized" json:"realauthorized,omitempty"`
	Maxbaselv            *uint32        `protobuf:"varint,15,opt,name=maxbaselv" json:"maxbaselv,omitempty"`
	Pushkey              *string        `protobuf:"bytes,16,opt,name=pushkey" json:"pushkey,omitempty"`
	Clickpos             *uint32        `protobuf:"varint,17,opt,name=clickpos,def=0" json:"clickpos,omitempty"`
	Serverid             *uint32        `protobuf:"varint,18,opt,name=serverid,def=0" json:"serverid,omitempty"`
	Relogin              *bool          `protobuf:"varint,19,opt,name=relogin,def=0" json:"relogin,omitempty"`
	Ip                   *uint32        `protobuf:"varint,20,opt,name=ip,def=0" json:"ip,omitempty"`
	Super                *bool          `protobuf:"varint,21,opt,name=super,def=0" json:"super,omitempty"`
	Extra                []byte         `protobuf:"bytes,23,opt,name=extra" json:"extra,omitempty"`
	Validcharids         []uint64       `protobuf:"varint,24,rep,name=validcharids" json:"validcharids,omitempty"`
	Langzone             *uint32        `protobuf:"varint,26,opt,name=langzone,def=0" json:"langzone,omitempty"`
	Clientversion        *uint32        `protobuf:"varint,25,opt,name=clientversion,def=0" json:"clientversion,omitempty"`
	LastestClientversion *uint32        `protobuf:"varint,27,opt,name=lastest_clientversion,json=lastestClientversion,def=0" json:"lastest_clientversion,omitempty"`
}

// Default values for SelectRoleUserCmd fields.
const (
	Default_SelectRoleUserCmd_Cmd                  = Command_LOGIN_USER_PROTOCMD
	Default_SelectRoleUserCmd_Param                = LoginCmdParam_SELECT_ROLE_USER_CMD
	Default_SelectRoleUserCmd_Clickpos             = uint32(0)
	Default_SelectRoleUserCmd_Serverid             = uint32(0)
	Default_SelectRoleUserCmd_Relogin              = bool(false)
	Default_SelectRoleUserCmd_Ip                   = uint32(0)
	Default_SelectRoleUserCmd_Super                = bool(false)
	Default_SelectRoleUserCmd_Langzone             = uint32(0)
	Default_SelectRoleUserCmd_Clientversion        = uint32(0)
	Default_SelectRoleUserCmd_LastestClientversion = uint32(0)
)

func (x *SelectRoleUserCmd) Reset() {
	*x = SelectRoleUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectRoleUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectRoleUserCmd) ProtoMessage() {}

func (x *SelectRoleUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectRoleUserCmd.ProtoReflect.Descriptor instead.
func (*SelectRoleUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{4}
}

func (x *SelectRoleUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SelectRoleUserCmd_Cmd
}

func (x *SelectRoleUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SelectRoleUserCmd_Param
}

func (x *SelectRoleUserCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SelectRoleUserCmd) GetZoneID() uint32 {
	if x != nil && x.ZoneID != nil {
		return *x.ZoneID
	}
	return 0
}

func (x *SelectRoleUserCmd) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return 0
}

func (x *SelectRoleUserCmd) GetDeviceid() string {
	if x != nil && x.Deviceid != nil {
		return *x.Deviceid
	}
	return ""
}

func (x *SelectRoleUserCmd) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SelectRoleUserCmd) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *SelectRoleUserCmd) GetExtraData() *ExtraData {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *SelectRoleUserCmd) GetIgnorepwd() bool {
	if x != nil && x.Ignorepwd != nil {
		return *x.Ignorepwd
	}
	return false
}

func (x *SelectRoleUserCmd) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *SelectRoleUserCmd) GetResettime() uint32 {
	if x != nil && x.Resettime != nil {
		return *x.Resettime
	}
	return 0
}

func (x *SelectRoleUserCmd) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *SelectRoleUserCmd) GetRealauthorized() bool {
	if x != nil && x.Realauthorized != nil {
		return *x.Realauthorized
	}
	return false
}

func (x *SelectRoleUserCmd) GetMaxbaselv() uint32 {
	if x != nil && x.Maxbaselv != nil {
		return *x.Maxbaselv
	}
	return 0
}

func (x *SelectRoleUserCmd) GetPushkey() string {
	if x != nil && x.Pushkey != nil {
		return *x.Pushkey
	}
	return ""
}

func (x *SelectRoleUserCmd) GetClickpos() uint32 {
	if x != nil && x.Clickpos != nil {
		return *x.Clickpos
	}
	return Default_SelectRoleUserCmd_Clickpos
}

func (x *SelectRoleUserCmd) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return Default_SelectRoleUserCmd_Serverid
}

func (x *SelectRoleUserCmd) GetRelogin() bool {
	if x != nil && x.Relogin != nil {
		return *x.Relogin
	}
	return Default_SelectRoleUserCmd_Relogin
}

func (x *SelectRoleUserCmd) GetIp() uint32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return Default_SelectRoleUserCmd_Ip
}

func (x *SelectRoleUserCmd) GetSuper() bool {
	if x != nil && x.Super != nil {
		return *x.Super
	}
	return Default_SelectRoleUserCmd_Super
}

func (x *SelectRoleUserCmd) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *SelectRoleUserCmd) GetValidcharids() []uint64 {
	if x != nil {
		return x.Validcharids
	}
	return nil
}

func (x *SelectRoleUserCmd) GetLangzone() uint32 {
	if x != nil && x.Langzone != nil {
		return *x.Langzone
	}
	return Default_SelectRoleUserCmd_Langzone
}

func (x *SelectRoleUserCmd) GetClientversion() uint32 {
	if x != nil && x.Clientversion != nil {
		return *x.Clientversion
	}
	return Default_SelectRoleUserCmd_Clientversion
}

func (x *SelectRoleUserCmd) GetLastestClientversion() uint32 {
	if x != nil && x.LastestClientversion != nil {
		return *x.LastestClientversion
	}
	return Default_SelectRoleUserCmd_LastestClientversion
}

type LoginResultUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=8" json:"param,omitempty"`
	Ret   *uint32        `protobuf:"varint,3,req,name=ret,def=0" json:"ret,omitempty"`
}

// Default values for LoginResultUserCmd fields.
const (
	Default_LoginResultUserCmd_Cmd   = Command_LOGIN_USER_PROTOCMD
	Default_LoginResultUserCmd_Param = LoginCmdParam_LOGIN_RESULT_USER_CMD
	Default_LoginResultUserCmd_Ret   = uint32(0)
)

func (x *LoginResultUserCmd) Reset() {
	*x = LoginResultUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResultUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResultUserCmd) ProtoMessage() {}

func (x *LoginResultUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResultUserCmd.ProtoReflect.Descriptor instead.
func (*LoginResultUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{5}
}

func (x *LoginResultUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LoginResultUserCmd_Cmd
}

func (x *LoginResultUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LoginResultUserCmd_Param
}

func (x *LoginResultUserCmd) GetRet() uint32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return Default_LoginResultUserCmd_Ret
}

type DeleteCharUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param    *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=9" json:"param,omitempty"`
	Id       *uint64        `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Accid    *uint64        `protobuf:"varint,4,opt,name=accid" json:"accid,omitempty"`
	Version  *string        `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
	Serverid *uint32        `protobuf:"varint,6,opt,name=serverid" json:"serverid,omitempty"`
}

// Default values for DeleteCharUserCmd fields.
const (
	Default_DeleteCharUserCmd_Cmd   = Command_LOGIN_USER_PROTOCMD
	Default_DeleteCharUserCmd_Param = LoginCmdParam_DELETE_CHAR_USER_CMD
)

func (x *DeleteCharUserCmd) Reset() {
	*x = DeleteCharUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCharUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCharUserCmd) ProtoMessage() {}

func (x *DeleteCharUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCharUserCmd.ProtoReflect.Descriptor instead.
func (*DeleteCharUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteCharUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DeleteCharUserCmd_Cmd
}

func (x *DeleteCharUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DeleteCharUserCmd_Param
}

func (x *DeleteCharUserCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *DeleteCharUserCmd) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return 0
}

func (x *DeleteCharUserCmd) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *DeleteCharUserCmd) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return 0
}

type HeartBeatUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=10" json:"param,omitempty"`
	Time  *uint64        `protobuf:"varint,3,opt,name=time,def=0" json:"time,omitempty"`
}

// Default values for HeartBeatUserCmd fields.
const (
	Default_HeartBeatUserCmd_Cmd   = Command_LOGIN_USER_PROTOCMD
	Default_HeartBeatUserCmd_Param = LoginCmdParam_HEART_BEAT_USER_CMD
	Default_HeartBeatUserCmd_Time  = uint64(0)
)

func (x *HeartBeatUserCmd) Reset() {
	*x = HeartBeatUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatUserCmd) ProtoMessage() {}

func (x *HeartBeatUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatUserCmd.ProtoReflect.Descriptor instead.
func (*HeartBeatUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{7}
}

func (x *HeartBeatUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HeartBeatUserCmd_Cmd
}

func (x *HeartBeatUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HeartBeatUserCmd_Param
}

func (x *HeartBeatUserCmd) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_HeartBeatUserCmd_Time
}

type ServerTimeUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param    *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=11" json:"param,omitempty"`
	Time     *uint64        `protobuf:"varint,3,opt,name=time,def=0" json:"time,omitempty"`
	TimeZone *int32         `protobuf:"varint,4,opt,name=timeZone,def=0" json:"timeZone,omitempty"`
}

// Default values for ServerTimeUserCmd fields.
const (
	Default_ServerTimeUserCmd_Cmd      = Command_LOGIN_USER_PROTOCMD
	Default_ServerTimeUserCmd_Param    = LoginCmdParam_SERVERTIME_USER_CMD
	Default_ServerTimeUserCmd_Time     = uint64(0)
	Default_ServerTimeUserCmd_TimeZone = int32(0)
)

func (x *ServerTimeUserCmd) Reset() {
	*x = ServerTimeUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTimeUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTimeUserCmd) ProtoMessage() {}

func (x *ServerTimeUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTimeUserCmd.ProtoReflect.Descriptor instead.
func (*ServerTimeUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{8}
}

func (x *ServerTimeUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ServerTimeUserCmd_Cmd
}

func (x *ServerTimeUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ServerTimeUserCmd_Param
}

func (x *ServerTimeUserCmd) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_ServerTimeUserCmd_Time
}

func (x *ServerTimeUserCmd) GetTimeZone() int32 {
	if x != nil && x.TimeZone != nil {
		return *x.TimeZone
	}
	return Default_ServerTimeUserCmd_TimeZone
}

type GMDeleteCharUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param  *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=12" json:"param,omitempty"`
	Accid  *uint64        `protobuf:"varint,3,opt,name=accid,def=0" json:"accid,omitempty"`
	Zoneid *uint32        `protobuf:"varint,4,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
}

// Default values for GMDeleteCharUserCmd fields.
const (
	Default_GMDeleteCharUserCmd_Cmd    = Command_LOGIN_USER_PROTOCMD
	Default_GMDeleteCharUserCmd_Param  = LoginCmdParam_GM_DELETE_CHAR_USER_CMD
	Default_GMDeleteCharUserCmd_Accid  = uint64(0)
	Default_GMDeleteCharUserCmd_Zoneid = uint32(0)
)

func (x *GMDeleteCharUserCmd) Reset() {
	*x = GMDeleteCharUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GMDeleteCharUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GMDeleteCharUserCmd) ProtoMessage() {}

func (x *GMDeleteCharUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GMDeleteCharUserCmd.ProtoReflect.Descriptor instead.
func (*GMDeleteCharUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{9}
}

func (x *GMDeleteCharUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GMDeleteCharUserCmd_Cmd
}

func (x *GMDeleteCharUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GMDeleteCharUserCmd_Param
}

func (x *GMDeleteCharUserCmd) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return Default_GMDeleteCharUserCmd_Accid
}

func (x *GMDeleteCharUserCmd) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_GMDeleteCharUserCmd_Zoneid
}

type ClientInfoUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=13" json:"param,omitempty"`
	Ip    *string        `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	Delay *uint32        `protobuf:"varint,4,opt,name=delay,def=0" json:"delay,omitempty"`
}

// Default values for ClientInfoUserCmd fields.
const (
	Default_ClientInfoUserCmd_Cmd   = Command_LOGIN_USER_PROTOCMD
	Default_ClientInfoUserCmd_Param = LoginCmdParam_CLIENT_INFO_USER_CMD
	Default_ClientInfoUserCmd_Delay = uint32(0)
)

func (x *ClientInfoUserCmd) Reset() {
	*x = ClientInfoUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientInfoUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInfoUserCmd) ProtoMessage() {}

func (x *ClientInfoUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInfoUserCmd.ProtoReflect.Descriptor instead.
func (*ClientInfoUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{10}
}

func (x *ClientInfoUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClientInfoUserCmd_Cmd
}

func (x *ClientInfoUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClientInfoUserCmd_Param
}

func (x *ClientInfoUserCmd) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *ClientInfoUserCmd) GetDelay() uint32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return Default_ClientInfoUserCmd_Delay
}

type ReqLoginUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param         *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=14" json:"param,omitempty"`
	Accid         *uint64        `protobuf:"varint,3,opt,name=accid,def=0" json:"accid,omitempty"`
	Sha1          *string        `protobuf:"bytes,4,opt,name=sha1" json:"sha1,omitempty"`
	Zoneid        *uint32        `protobuf:"varint,5,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Timestamp     *uint32        `protobuf:"varint,6,opt,name=timestamp,def=0" json:"timestamp,omitempty"`
	Version       *string        `protobuf:"bytes,7,opt,name=version" json:"version,omitempty"`
	Domain        *string        `protobuf:"bytes,8,opt,name=domain" json:"domain,omitempty"`
	Ip            *string        `protobuf:"bytes,9,opt,name=ip" json:"ip,omitempty"`
	Device        *string        `protobuf:"bytes,10,opt,name=device" json:"device,omitempty"`
	Phone         *string        `protobuf:"bytes,11,opt,name=phone" json:"phone,omitempty"`
	SafeDevice    *string        `protobuf:"bytes,12,opt,name=safe_device,json=safeDevice" json:"safe_device,omitempty"`
	Language      *uint32        `protobuf:"varint,13,opt,name=language" json:"language,omitempty"`
	Site          *uint32        `protobuf:"varint,14,opt,name=site" json:"site,omitempty"`
	Authorize     *string        `protobuf:"bytes,15,opt,name=authorize" json:"authorize,omitempty"`
	Serverid      *uint32        `protobuf:"varint,16,opt,name=serverid,def=1" json:"serverid,omitempty"`
	Deviceid      *string        `protobuf:"bytes,17,opt,name=deviceid" json:"deviceid,omitempty"`
	Clientversion *uint32        `protobuf:"varint,18,opt,name=clientversion,def=0" json:"clientversion,omitempty"`
	Langzone      *uint32        `protobuf:"varint,19,opt,name=langzone,def=0" json:"langzone,omitempty"`
}

// Default values for ReqLoginUserCmd fields.
const (
	Default_ReqLoginUserCmd_Cmd           = Command_LOGIN_USER_PROTOCMD
	Default_ReqLoginUserCmd_Param         = LoginCmdParam_REQ_LOGIN_USER_CMD
	Default_ReqLoginUserCmd_Accid         = uint64(0)
	Default_ReqLoginUserCmd_Zoneid        = uint32(0)
	Default_ReqLoginUserCmd_Timestamp     = uint32(0)
	Default_ReqLoginUserCmd_Serverid      = uint32(1)
	Default_ReqLoginUserCmd_Clientversion = uint32(0)
	Default_ReqLoginUserCmd_Langzone      = uint32(0)
)

func (x *ReqLoginUserCmd) Reset() {
	*x = ReqLoginUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLoginUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLoginUserCmd) ProtoMessage() {}

func (x *ReqLoginUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLoginUserCmd.ProtoReflect.Descriptor instead.
func (*ReqLoginUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{11}
}

func (x *ReqLoginUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqLoginUserCmd_Cmd
}

func (x *ReqLoginUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqLoginUserCmd_Param
}

func (x *ReqLoginUserCmd) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return Default_ReqLoginUserCmd_Accid
}

func (x *ReqLoginUserCmd) GetSha1() string {
	if x != nil && x.Sha1 != nil {
		return *x.Sha1
	}
	return ""
}

func (x *ReqLoginUserCmd) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_ReqLoginUserCmd_Zoneid
}

func (x *ReqLoginUserCmd) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return Default_ReqLoginUserCmd_Timestamp
}

func (x *ReqLoginUserCmd) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *ReqLoginUserCmd) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *ReqLoginUserCmd) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *ReqLoginUserCmd) GetDevice() string {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return ""
}

func (x *ReqLoginUserCmd) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *ReqLoginUserCmd) GetSafeDevice() string {
	if x != nil && x.SafeDevice != nil {
		return *x.SafeDevice
	}
	return ""
}

func (x *ReqLoginUserCmd) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *ReqLoginUserCmd) GetSite() uint32 {
	if x != nil && x.Site != nil {
		return *x.Site
	}
	return 0
}

func (x *ReqLoginUserCmd) GetAuthorize() string {
	if x != nil && x.Authorize != nil {
		return *x.Authorize
	}
	return ""
}

func (x *ReqLoginUserCmd) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return Default_ReqLoginUserCmd_Serverid
}

func (x *ReqLoginUserCmd) GetDeviceid() string {
	if x != nil && x.Deviceid != nil {
		return *x.Deviceid
	}
	return ""
}

func (x *ReqLoginUserCmd) GetClientversion() uint32 {
	if x != nil && x.Clientversion != nil {
		return *x.Clientversion
	}
	return Default_ReqLoginUserCmd_Clientversion
}

func (x *ReqLoginUserCmd) GetLangzone() uint32 {
	if x != nil && x.Langzone != nil {
		return *x.Langzone
	}
	return Default_ReqLoginUserCmd_Langzone
}

type ReqLoginParamUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param     *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=15" json:"param,omitempty"`
	Accid     *uint64        `protobuf:"varint,3,opt,name=accid,def=0" json:"accid,omitempty"`
	Sha1      *string        `protobuf:"bytes,4,opt,name=sha1" json:"sha1,omitempty"`
	Timestamp *uint32        `protobuf:"varint,5,opt,name=timestamp,def=0" json:"timestamp,omitempty"`
	Phone     *string        `protobuf:"bytes,6,opt,name=phone" json:"phone,omitempty"`
	Version   *uint32        `protobuf:"varint,7,opt,name=version,def=0" json:"version,omitempty"`
}

// Default values for ReqLoginParamUserCmd fields.
const (
	Default_ReqLoginParamUserCmd_Cmd       = Command_LOGIN_USER_PROTOCMD
	Default_ReqLoginParamUserCmd_Param     = LoginCmdParam_REQ_LOGIN_PARAM_USER_CMD
	Default_ReqLoginParamUserCmd_Accid     = uint64(0)
	Default_ReqLoginParamUserCmd_Timestamp = uint32(0)
	Default_ReqLoginParamUserCmd_Version   = uint32(0)
)

func (x *ReqLoginParamUserCmd) Reset() {
	*x = ReqLoginParamUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLoginParamUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLoginParamUserCmd) ProtoMessage() {}

func (x *ReqLoginParamUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLoginParamUserCmd.ProtoReflect.Descriptor instead.
func (*ReqLoginParamUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{12}
}

func (x *ReqLoginParamUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqLoginParamUserCmd_Cmd
}

func (x *ReqLoginParamUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqLoginParamUserCmd_Param
}

func (x *ReqLoginParamUserCmd) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return Default_ReqLoginParamUserCmd_Accid
}

func (x *ReqLoginParamUserCmd) GetSha1() string {
	if x != nil && x.Sha1 != nil {
		return *x.Sha1
	}
	return ""
}

func (x *ReqLoginParamUserCmd) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return Default_ReqLoginParamUserCmd_Timestamp
}

func (x *ReqLoginParamUserCmd) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *ReqLoginParamUserCmd) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_ReqLoginParamUserCmd_Version
}

type KickParamUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param   *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=16" json:"param,omitempty"`
	Charid  *uint64        `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Accid   *uint64        `protobuf:"varint,4,opt,name=accid,def=0" json:"accid,omitempty"`
	Afktime *uint32        `protobuf:"varint,5,opt,name=afktime,def=0" json:"afktime,omitempty"`
}

// Default values for KickParamUserCmd fields.
const (
	Default_KickParamUserCmd_Cmd     = Command_LOGIN_USER_PROTOCMD
	Default_KickParamUserCmd_Param   = LoginCmdParam_KICK_PARAM_USER_CMD
	Default_KickParamUserCmd_Charid  = uint64(0)
	Default_KickParamUserCmd_Accid   = uint64(0)
	Default_KickParamUserCmd_Afktime = uint32(0)
)

func (x *KickParamUserCmd) Reset() {
	*x = KickParamUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickParamUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickParamUserCmd) ProtoMessage() {}

func (x *KickParamUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickParamUserCmd.ProtoReflect.Descriptor instead.
func (*KickParamUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{13}
}

func (x *KickParamUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_KickParamUserCmd_Cmd
}

func (x *KickParamUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_KickParamUserCmd_Param
}

func (x *KickParamUserCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_KickParamUserCmd_Charid
}

func (x *KickParamUserCmd) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return Default_KickParamUserCmd_Accid
}

func (x *KickParamUserCmd) GetAfktime() uint32 {
	if x != nil && x.Afktime != nil {
		return *x.Afktime
	}
	return Default_KickParamUserCmd_Afktime
}

type CancelDeleteCharUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=17" json:"param,omitempty"`
	Id    *uint64        `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Accid *uint64        `protobuf:"varint,4,opt,name=accid" json:"accid,omitempty"`
}

// Default values for CancelDeleteCharUserCmd fields.
const (
	Default_CancelDeleteCharUserCmd_Cmd   = Command_LOGIN_USER_PROTOCMD
	Default_CancelDeleteCharUserCmd_Param = LoginCmdParam_CANCEL_DELETE_CHAR_USER_CMD
)

func (x *CancelDeleteCharUserCmd) Reset() {
	*x = CancelDeleteCharUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelDeleteCharUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelDeleteCharUserCmd) ProtoMessage() {}

func (x *CancelDeleteCharUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelDeleteCharUserCmd.ProtoReflect.Descriptor instead.
func (*CancelDeleteCharUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{14}
}

func (x *CancelDeleteCharUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CancelDeleteCharUserCmd_Cmd
}

func (x *CancelDeleteCharUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CancelDeleteCharUserCmd_Param
}

func (x *CancelDeleteCharUserCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CancelDeleteCharUserCmd) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return 0
}

type ClientFrameUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=18" json:"param,omitempty"`
	Frame *uint32        `protobuf:"varint,3,opt,name=frame" json:"frame,omitempty"`
}

// Default values for ClientFrameUserCmd fields.
const (
	Default_ClientFrameUserCmd_Cmd   = Command_LOGIN_USER_PROTOCMD
	Default_ClientFrameUserCmd_Param = LoginCmdParam_CLIENT_FRAME_USER_CMD
)

func (x *ClientFrameUserCmd) Reset() {
	*x = ClientFrameUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientFrameUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientFrameUserCmd) ProtoMessage() {}

func (x *ClientFrameUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientFrameUserCmd.ProtoReflect.Descriptor instead.
func (*ClientFrameUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{15}
}

func (x *ClientFrameUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClientFrameUserCmd_Cmd
}

func (x *ClientFrameUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClientFrameUserCmd_Param
}

func (x *ClientFrameUserCmd) GetFrame() uint32 {
	if x != nil && x.Frame != nil {
		return *x.Frame
	}
	return 0
}

type SafeDeviceUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=19" json:"param,omitempty"`
	Safe  *bool          `protobuf:"varint,3,opt,name=safe" json:"safe,omitempty"`
}

// Default values for SafeDeviceUserCmd fields.
const (
	Default_SafeDeviceUserCmd_Cmd   = Command_LOGIN_USER_PROTOCMD
	Default_SafeDeviceUserCmd_Param = LoginCmdParam_SAFE_DEVICE_USER_CMD
)

func (x *SafeDeviceUserCmd) Reset() {
	*x = SafeDeviceUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafeDeviceUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafeDeviceUserCmd) ProtoMessage() {}

func (x *SafeDeviceUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafeDeviceUserCmd.ProtoReflect.Descriptor instead.
func (*SafeDeviceUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{16}
}

func (x *SafeDeviceUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SafeDeviceUserCmd_Cmd
}

func (x *SafeDeviceUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SafeDeviceUserCmd_Param
}

func (x *SafeDeviceUserCmd) GetSafe() bool {
	if x != nil && x.Safe != nil {
		return *x.Safe
	}
	return false
}

type ConfirmAuthorizeUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param     *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=20" json:"param,omitempty"`
	Password  *string        `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Success   *bool          `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
	Resettime *uint32        `protobuf:"varint,5,opt,name=resettime" json:"resettime,omitempty"`
	Hasset    *bool          `protobuf:"varint,6,opt,name=hasset" json:"hasset,omitempty"`
}

// Default values for ConfirmAuthorizeUserCmd fields.
const (
	Default_ConfirmAuthorizeUserCmd_Cmd   = Command_LOGIN_USER_PROTOCMD
	Default_ConfirmAuthorizeUserCmd_Param = LoginCmdParam_CONFIRM_AUTHORIZE_USER_CMD
)

func (x *ConfirmAuthorizeUserCmd) Reset() {
	*x = ConfirmAuthorizeUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmAuthorizeUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmAuthorizeUserCmd) ProtoMessage() {}

func (x *ConfirmAuthorizeUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmAuthorizeUserCmd.ProtoReflect.Descriptor instead.
func (*ConfirmAuthorizeUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{17}
}

func (x *ConfirmAuthorizeUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ConfirmAuthorizeUserCmd_Cmd
}

func (x *ConfirmAuthorizeUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ConfirmAuthorizeUserCmd_Param
}

func (x *ConfirmAuthorizeUserCmd) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *ConfirmAuthorizeUserCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *ConfirmAuthorizeUserCmd) GetResettime() uint32 {
	if x != nil && x.Resettime != nil {
		return *x.Resettime
	}
	return 0
}

func (x *ConfirmAuthorizeUserCmd) GetHasset() bool {
	if x != nil && x.Hasset != nil {
		return *x.Hasset
	}
	return false
}

type SyncAuthorizeGateCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param     *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=21" json:"param,omitempty"`
	Ignorepwd *bool          `protobuf:"varint,3,opt,name=ignorepwd" json:"ignorepwd,omitempty"`
	Password  *string        `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
	Version   *string        `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
	Accid     *uint64        `protobuf:"varint,6,opt,name=accid" json:"accid,omitempty"`
	Resettime *uint32        `protobuf:"varint,7,opt,name=resettime" json:"resettime,omitempty"`
	Serverid  *uint32        `protobuf:"varint,8,opt,name=serverid" json:"serverid,omitempty"`
}

// Default values for SyncAuthorizeGateCmd fields.
const (
	Default_SyncAuthorizeGateCmd_Cmd   = Command_LOGIN_USER_PROTOCMD
	Default_SyncAuthorizeGateCmd_Param = LoginCmdParam_SYNC_AUTHORIZE_GATE_CMD
)

func (x *SyncAuthorizeGateCmd) Reset() {
	*x = SyncAuthorizeGateCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncAuthorizeGateCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAuthorizeGateCmd) ProtoMessage() {}

func (x *SyncAuthorizeGateCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAuthorizeGateCmd.ProtoReflect.Descriptor instead.
func (*SyncAuthorizeGateCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{18}
}

func (x *SyncAuthorizeGateCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SyncAuthorizeGateCmd_Cmd
}

func (x *SyncAuthorizeGateCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SyncAuthorizeGateCmd_Param
}

func (x *SyncAuthorizeGateCmd) GetIgnorepwd() bool {
	if x != nil && x.Ignorepwd != nil {
		return *x.Ignorepwd
	}
	return false
}

func (x *SyncAuthorizeGateCmd) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *SyncAuthorizeGateCmd) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *SyncAuthorizeGateCmd) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return 0
}

func (x *SyncAuthorizeGateCmd) GetResettime() uint32 {
	if x != nil && x.Resettime != nil {
		return *x.Resettime
	}
	return 0
}

func (x *SyncAuthorizeGateCmd) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return 0
}

type RealAuthorizeUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param         *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=22" json:"param,omitempty"`
	AuthorizState *string        `protobuf:"bytes,3,opt,name=authoriz_state,json=authorizState" json:"authoriz_state,omitempty"`
	Authorized    *bool          `protobuf:"varint,4,opt,name=authorized" json:"authorized,omitempty"`
}

// Default values for RealAuthorizeUserCmd fields.
const (
	Default_RealAuthorizeUserCmd_Cmd   = Command_LOGIN_USER_PROTOCMD
	Default_RealAuthorizeUserCmd_Param = LoginCmdParam_REAL_AUTHORIZE_USER_CMD
)

func (x *RealAuthorizeUserCmd) Reset() {
	*x = RealAuthorizeUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealAuthorizeUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealAuthorizeUserCmd) ProtoMessage() {}

func (x *RealAuthorizeUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealAuthorizeUserCmd.ProtoReflect.Descriptor instead.
func (*RealAuthorizeUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{19}
}

func (x *RealAuthorizeUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RealAuthorizeUserCmd_Cmd
}

func (x *RealAuthorizeUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RealAuthorizeUserCmd_Param
}

func (x *RealAuthorizeUserCmd) GetAuthorizState() string {
	if x != nil && x.AuthorizState != nil {
		return *x.AuthorizState
	}
	return ""
}

func (x *RealAuthorizeUserCmd) GetAuthorized() bool {
	if x != nil && x.Authorized != nil {
		return *x.Authorized
	}
	return false
}

type RealAuthorizeServerCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param      *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=23" json:"param,omitempty"`
	Authorized *bool          `protobuf:"varint,3,opt,name=authorized" json:"authorized,omitempty"`
}

// Default values for RealAuthorizeServerCmd fields.
const (
	Default_RealAuthorizeServerCmd_Cmd   = Command_LOGIN_USER_PROTOCMD
	Default_RealAuthorizeServerCmd_Param = LoginCmdParam_REAL_AUTHORIZE_SEERVER_CMD
)

func (x *RealAuthorizeServerCmd) Reset() {
	*x = RealAuthorizeServerCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealAuthorizeServerCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealAuthorizeServerCmd) ProtoMessage() {}

func (x *RealAuthorizeServerCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealAuthorizeServerCmd.ProtoReflect.Descriptor instead.
func (*RealAuthorizeServerCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{20}
}

func (x *RealAuthorizeServerCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RealAuthorizeServerCmd_Cmd
}

func (x *RealAuthorizeServerCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RealAuthorizeServerCmd_Param
}

func (x *RealAuthorizeServerCmd) GetAuthorized() bool {
	if x != nil && x.Authorized != nil {
		return *x.Authorized
	}
	return false
}

type RefreshZoneIDUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param      *LoginCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=24" json:"param,omitempty"`
	Charid     *uint64        `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Accid      *uint64        `protobuf:"varint,4,opt,name=accid,def=0" json:"accid,omitempty"`
	Zoneid     *uint32        `protobuf:"varint,5,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Realzoneid *uint32        `protobuf:"varint,6,opt,name=realzoneid,def=0" json:"realzoneid,omitempty"`
	Serverid   *uint32        `protobuf:"varint,7,opt,name=serverid,def=0" json:"serverid,omitempty"`
}

// Default values for RefreshZoneIDUserCmd fields.
const (
	Default_RefreshZoneIDUserCmd_Cmd        = Command_LOGIN_USER_PROTOCMD
	Default_RefreshZoneIDUserCmd_Param      = LoginCmdParam_REFRESH_ZONEID_USER_CMD
	Default_RefreshZoneIDUserCmd_Charid     = uint64(0)
	Default_RefreshZoneIDUserCmd_Accid      = uint64(0)
	Default_RefreshZoneIDUserCmd_Zoneid     = uint32(0)
	Default_RefreshZoneIDUserCmd_Realzoneid = uint32(0)
	Default_RefreshZoneIDUserCmd_Serverid   = uint32(0)
)

func (x *RefreshZoneIDUserCmd) Reset() {
	*x = RefreshZoneIDUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshZoneIDUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshZoneIDUserCmd) ProtoMessage() {}

func (x *RefreshZoneIDUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshZoneIDUserCmd.ProtoReflect.Descriptor instead.
func (*RefreshZoneIDUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{21}
}

func (x *RefreshZoneIDUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RefreshZoneIDUserCmd_Cmd
}

func (x *RefreshZoneIDUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RefreshZoneIDUserCmd_Param
}

func (x *RefreshZoneIDUserCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_RefreshZoneIDUserCmd_Charid
}

func (x *RefreshZoneIDUserCmd) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return Default_RefreshZoneIDUserCmd_Accid
}

func (x *RefreshZoneIDUserCmd) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_RefreshZoneIDUserCmd_Zoneid
}

func (x *RefreshZoneIDUserCmd) GetRealzoneid() uint32 {
	if x != nil && x.Realzoneid != nil {
		return *x.Realzoneid
	}
	return Default_RefreshZoneIDUserCmd_Realzoneid
}

func (x *RefreshZoneIDUserCmd) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return Default_RefreshZoneIDUserCmd_Serverid
}

type QueryAfkStatUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=1" json:"cmd,omitempty"`
	Param    *LoginCmdParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.LoginCmdParam,def=25" json:"param,omitempty"`
	Charid   *uint64          `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Afktime  *uint32          `protobuf:"varint,4,opt,name=afktime" json:"afktime,omitempty"`
	Statdata *UserAfkStatData `protobuf:"bytes,5,opt,name=statdata" json:"statdata,omitempty"`
}

// Default values for QueryAfkStatUserCmd fields.
const (
	Default_QueryAfkStatUserCmd_Cmd   = Command_LOGIN_USER_PROTOCMD
	Default_QueryAfkStatUserCmd_Param = LoginCmdParam_QUERY_AFK_STAT_USER_CMD
)

func (x *QueryAfkStatUserCmd) Reset() {
	*x = QueryAfkStatUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoginUserCmd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAfkStatUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAfkStatUserCmd) ProtoMessage() {}

func (x *QueryAfkStatUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_LoginUserCmd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAfkStatUserCmd.ProtoReflect.Descriptor instead.
func (*QueryAfkStatUserCmd) Descriptor() ([]byte, []int) {
	return file_LoginUserCmd_proto_rawDescGZIP(), []int{22}
}

func (x *QueryAfkStatUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryAfkStatUserCmd_Cmd
}

func (x *QueryAfkStatUserCmd) GetParam() LoginCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryAfkStatUserCmd_Param
}

func (x *QueryAfkStatUserCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *QueryAfkStatUserCmd) GetAfktime() uint32 {
	if x != nil && x.Afktime != nil {
		return *x.Afktime
	}
	return 0
}

func (x *QueryAfkStatUserCmd) GetStatdata() *UserAfkStatData {
	if x != nil {
		return x.Statdata
	}
	return nil
}

var File_LoginUserCmd_proto protoreflect.FileDescriptor

var file_LoginUserCmd_proto_rawDesc = []byte{
	0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x66, 0x6b, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb,
	0x01, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x52, 0x45, 0x47,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65,
	0x67, 0x45, 0x72, 0x72, 0x52, 0x65, 0x74, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0xc3, 0x03, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x4c,
	0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72,
	0x6f, 0x6c, 0x65, 0x53, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x69, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x61, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61,
	0x69, 0x72, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68,
	0x61, 0x69, 0x72, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x74,
	0x68, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c,
	0x6f, 0x74, 0x68, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x12,
	0x11, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02,
	0x69, 0x70, 0x22, 0xda, 0x02, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11,
	0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d,
	0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x53, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x63, 0x68, 0x61, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x63, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x63,
	0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x72, 0x65, 0x61, 0x3a,
	0x08, 0x45, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x43, 0x48, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x22,
	0x89, 0x01, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xdb, 0x06, 0x0a, 0x11,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d,
	0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x4c, 0x4f,
	0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x53, 0x45, 0x4c, 0x45, 0x43,
	0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61,
	0x63, 0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x70, 0x77, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x70, 0x77, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x62,
	0x61, 0x73, 0x65, 0x6c, 0x76, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x62, 0x61, 0x73, 0x65, 0x6c, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x73, 0x68, 0x6b, 0x65,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x73, 0x68, 0x6b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x70, 0x6f, 0x73, 0x12,
	0x1d, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x07, 0x72, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x11, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x1b, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64,
	0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x13, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d,
	0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x4c, 0x4f,
	0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x69, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x13, 0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x13, 0x47, 0x4d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x17, 0x47, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x7a,
	0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06,
	0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x17, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0xcf, 0x04, 0x0a, 0x0f, 0x52,
	0x65, 0x71, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x33,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6d,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x4f, 0x47, 0x49,
	0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68,
	0x61, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x68, 0x61, 0x31, 0x12, 0x19,
	0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61,
	0x66, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x90, 0x02, 0x0a,
	0x14, 0x52, 0x65, 0x71, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x52,
	0x45, 0x51, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17,
	0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x61, 0x31, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x68, 0x61, 0x31, 0x12, 0x1f, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xd7, 0x01, 0x0a, 0x10, 0x4b, 0x69, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x4b, 0x49,
	0x43, 0x4b, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d,
	0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07,
	0x61, 0x66, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x07, 0x61, 0x66, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x17, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x33,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6d,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x11, 0x53,
	0x61, 0x66, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64,
	0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x53, 0x41, 0x46, 0x45, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x66, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x61, 0x66, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x17, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0xb2, 0x02, 0x0a,
	0x14, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x47, 0x61,
	0x74, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x53,
	0x59, 0x4e, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x47, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x70, 0x77, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x70, 0x77, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69,
	0x64, 0x22, 0xd5, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x17, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x16, 0x52, 0x65,
	0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x52, 0x45,
	0x41, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x22,
	0x9f, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5a, 0x6f, 0x6e, 0x65, 0x49,
	0x44, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x17, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x49, 0x44,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x61,
	0x63, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61,
	0x63, 0x63, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x7a, 0x6f, 0x6e, 0x65,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69,
	0x64, 0x22, 0xf1, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x66, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x17, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x46, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x66, 0x6b,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x66, 0x6b, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x66, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2a, 0xb1, 0x05, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43,
	0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x43, 0x50, 0x41,
	0x53, 0x53, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x47, 0x5f, 0x47,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x45, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10,
	0x05, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44,
	0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x08, 0x12, 0x18, 0x0a,
	0x14, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x45, 0x41, 0x52, 0x54,
	0x5f, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x0a,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x4d, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x4d, 0x44, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x0d,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x51, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x4d, 0x44, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x10, 0x12,
	0x1f, 0x0a, 0x1b, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x11,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x41, 0x46, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x4d, 0x44, 0x10, 0x13, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x4d, 0x44, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4d, 0x44,
	0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x16, 0x12,
	0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x45, 0x5f, 0x53, 0x45, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x17, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x49,
	0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x46, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x19, 0x2a, 0x87, 0x01, 0x0a, 0x05, 0x45, 0x41,
	0x72, 0x65, 0x61, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x43, 0x48, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x54, 0x57, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x57, 0x57, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4a, 0x50, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41,
	0x52, 0x45, 0x41, 0x5f, 0x4b, 0x52, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41, 0x52, 0x45,
	0x41, 0x5f, 0x4e, 0x41, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41, 0x52, 0x45, 0x41, 0x5f,
	0x45, 0x55, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x4d, 0x41,
	0x58, 0x10, 0x08,
}

var (
	file_LoginUserCmd_proto_rawDescOnce sync.Once
	file_LoginUserCmd_proto_rawDescData = file_LoginUserCmd_proto_rawDesc
)

func file_LoginUserCmd_proto_rawDescGZIP() []byte {
	file_LoginUserCmd_proto_rawDescOnce.Do(func() {
		file_LoginUserCmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_LoginUserCmd_proto_rawDescData)
	})
	return file_LoginUserCmd_proto_rawDescData
}

var file_LoginUserCmd_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_LoginUserCmd_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_LoginUserCmd_proto_goTypes = []interface{}{
	(LoginCmdParam)(0),              // 0: Cmd.LoginCmdParam
	(EArea)(0),                      // 1: Cmd.EArea
	(*RegResultUserCmd)(nil),        // 2: Cmd.RegResultUserCmd
	(*CreateCharUserCmd)(nil),       // 3: Cmd.CreateCharUserCmd
	(*SnapShotUserCmd)(nil),         // 4: Cmd.SnapShotUserCmd
	(*ExtraData)(nil),               // 5: Cmd.ExtraData
	(*SelectRoleUserCmd)(nil),       // 6: Cmd.SelectRoleUserCmd
	(*LoginResultUserCmd)(nil),      // 7: Cmd.LoginResultUserCmd
	(*DeleteCharUserCmd)(nil),       // 8: Cmd.DeleteCharUserCmd
	(*HeartBeatUserCmd)(nil),        // 9: Cmd.HeartBeatUserCmd
	(*ServerTimeUserCmd)(nil),       // 10: Cmd.ServerTimeUserCmd
	(*GMDeleteCharUserCmd)(nil),     // 11: Cmd.GMDeleteCharUserCmd
	(*ClientInfoUserCmd)(nil),       // 12: Cmd.ClientInfoUserCmd
	(*ReqLoginUserCmd)(nil),         // 13: Cmd.ReqLoginUserCmd
	(*ReqLoginParamUserCmd)(nil),    // 14: Cmd.ReqLoginParamUserCmd
	(*KickParamUserCmd)(nil),        // 15: Cmd.KickParamUserCmd
	(*CancelDeleteCharUserCmd)(nil), // 16: Cmd.CancelDeleteCharUserCmd
	(*ClientFrameUserCmd)(nil),      // 17: Cmd.ClientFrameUserCmd
	(*SafeDeviceUserCmd)(nil),       // 18: Cmd.SafeDeviceUserCmd
	(*ConfirmAuthorizeUserCmd)(nil), // 19: Cmd.ConfirmAuthorizeUserCmd
	(*SyncAuthorizeGateCmd)(nil),    // 20: Cmd.SyncAuthorizeGateCmd
	(*RealAuthorizeUserCmd)(nil),    // 21: Cmd.RealAuthorizeUserCmd
	(*RealAuthorizeServerCmd)(nil),  // 22: Cmd.RealAuthorizeServerCmd
	(*RefreshZoneIDUserCmd)(nil),    // 23: Cmd.RefreshZoneIDUserCmd
	(*QueryAfkStatUserCmd)(nil),     // 24: Cmd.QueryAfkStatUserCmd
	(Command)(0),                    // 25: Cmd.Command
	(RegErrRet)(0),                  // 26: Cmd.RegErrRet
	(*SnapShotDataPB)(nil),          // 27: Cmd.SnapShotDataPB
	(*UserAfkStatData)(nil),         // 28: Cmd.UserAfkStatData
}
var file_LoginUserCmd_proto_depIdxs = []int32{
	25, // 0: Cmd.RegResultUserCmd.cmd:type_name -> Cmd.Command
	0,  // 1: Cmd.RegResultUserCmd.param:type_name -> Cmd.LoginCmdParam
	26, // 2: Cmd.RegResultUserCmd.ret:type_name -> Cmd.RegErrRet
	25, // 3: Cmd.CreateCharUserCmd.cmd:type_name -> Cmd.Command
	0,  // 4: Cmd.CreateCharUserCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 5: Cmd.SnapShotUserCmd.cmd:type_name -> Cmd.Command
	0,  // 6: Cmd.SnapShotUserCmd.param:type_name -> Cmd.LoginCmdParam
	27, // 7: Cmd.SnapShotUserCmd.data:type_name -> Cmd.SnapShotDataPB
	1,  // 8: Cmd.SnapShotUserCmd.area:type_name -> Cmd.EArea
	25, // 9: Cmd.SelectRoleUserCmd.cmd:type_name -> Cmd.Command
	0,  // 10: Cmd.SelectRoleUserCmd.param:type_name -> Cmd.LoginCmdParam
	5,  // 11: Cmd.SelectRoleUserCmd.extraData:type_name -> Cmd.ExtraData
	25, // 12: Cmd.LoginResultUserCmd.cmd:type_name -> Cmd.Command
	0,  // 13: Cmd.LoginResultUserCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 14: Cmd.DeleteCharUserCmd.cmd:type_name -> Cmd.Command
	0,  // 15: Cmd.DeleteCharUserCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 16: Cmd.HeartBeatUserCmd.cmd:type_name -> Cmd.Command
	0,  // 17: Cmd.HeartBeatUserCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 18: Cmd.ServerTimeUserCmd.cmd:type_name -> Cmd.Command
	0,  // 19: Cmd.ServerTimeUserCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 20: Cmd.GMDeleteCharUserCmd.cmd:type_name -> Cmd.Command
	0,  // 21: Cmd.GMDeleteCharUserCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 22: Cmd.ClientInfoUserCmd.cmd:type_name -> Cmd.Command
	0,  // 23: Cmd.ClientInfoUserCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 24: Cmd.ReqLoginUserCmd.cmd:type_name -> Cmd.Command
	0,  // 25: Cmd.ReqLoginUserCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 26: Cmd.ReqLoginParamUserCmd.cmd:type_name -> Cmd.Command
	0,  // 27: Cmd.ReqLoginParamUserCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 28: Cmd.KickParamUserCmd.cmd:type_name -> Cmd.Command
	0,  // 29: Cmd.KickParamUserCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 30: Cmd.CancelDeleteCharUserCmd.cmd:type_name -> Cmd.Command
	0,  // 31: Cmd.CancelDeleteCharUserCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 32: Cmd.ClientFrameUserCmd.cmd:type_name -> Cmd.Command
	0,  // 33: Cmd.ClientFrameUserCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 34: Cmd.SafeDeviceUserCmd.cmd:type_name -> Cmd.Command
	0,  // 35: Cmd.SafeDeviceUserCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 36: Cmd.ConfirmAuthorizeUserCmd.cmd:type_name -> Cmd.Command
	0,  // 37: Cmd.ConfirmAuthorizeUserCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 38: Cmd.SyncAuthorizeGateCmd.cmd:type_name -> Cmd.Command
	0,  // 39: Cmd.SyncAuthorizeGateCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 40: Cmd.RealAuthorizeUserCmd.cmd:type_name -> Cmd.Command
	0,  // 41: Cmd.RealAuthorizeUserCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 42: Cmd.RealAuthorizeServerCmd.cmd:type_name -> Cmd.Command
	0,  // 43: Cmd.RealAuthorizeServerCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 44: Cmd.RefreshZoneIDUserCmd.cmd:type_name -> Cmd.Command
	0,  // 45: Cmd.RefreshZoneIDUserCmd.param:type_name -> Cmd.LoginCmdParam
	25, // 46: Cmd.QueryAfkStatUserCmd.cmd:type_name -> Cmd.Command
	0,  // 47: Cmd.QueryAfkStatUserCmd.param:type_name -> Cmd.LoginCmdParam
	28, // 48: Cmd.QueryAfkStatUserCmd.statdata:type_name -> Cmd.UserAfkStatData
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_LoginUserCmd_proto_init() }
func file_LoginUserCmd_proto_init() {
	if File_LoginUserCmd_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	file_ErrorUserCmd_proto_init()
	file_UserAfkCmd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_LoginUserCmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegResultUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCharUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapShotUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectRoleUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResultUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCharUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeatUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerTimeUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GMDeleteCharUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientInfoUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLoginUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLoginParamUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickParamUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelDeleteCharUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientFrameUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafeDeviceUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmAuthorizeUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncAuthorizeGateCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealAuthorizeUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealAuthorizeServerCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshZoneIDUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoginUserCmd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAfkStatUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_LoginUserCmd_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_LoginUserCmd_proto_goTypes,
		DependencyIndexes: file_LoginUserCmd_proto_depIdxs,
		EnumInfos:         file_LoginUserCmd_proto_enumTypes,
		MessageInfos:      file_LoginUserCmd_proto_msgTypes,
	}.Build()
	File_LoginUserCmd_proto = out.File
	file_LoginUserCmd_proto_rawDesc = nil
	file_LoginUserCmd_proto_goTypes = nil
	file_LoginUserCmd_proto_depIdxs = nil
}
