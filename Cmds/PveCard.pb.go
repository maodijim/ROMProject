// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: PveCard.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EPveCardParam int32

const (
	EPveCardParam_EPVE_INVITE_TEAM_CMD    EPveCardParam = 1
	EPveCardParam_EPVE_REPLY_TEAM_CMD     EPveCardParam = 2
	EPveCardParam_EPVE_ENTER_RAID_CMD     EPveCardParam = 3
	EPveCardParam_EPVE_QUERY_ALL_CARD_CMD EPveCardParam = 4
	EPveCardParam_EPVE_SELECT_CARD_CMD    EPveCardParam = 5
	EPveCardParam_EPVE_SELECTED_CARD_CMD  EPveCardParam = 6
	EPveCardParam_EPVE_UPDATE_CARD_CMD    EPveCardParam = 7
	EPveCardParam_EPVE_BEGIN_FIRE_CMD     EPveCardParam = 8
	EPveCardParam_EPVE_FINISH_CARD_CMD    EPveCardParam = 9
	EPveCardParam_EPVE_PLAY_CARD_CMD      EPveCardParam = 10
	EPveCardParam_EPVE_GET_REWARD_CMD     EPveCardParam = 11
)

// Enum value maps for EPveCardParam.
var (
	EPveCardParam_name = map[int32]string{
		1:  "EPVE_INVITE_TEAM_CMD",
		2:  "EPVE_REPLY_TEAM_CMD",
		3:  "EPVE_ENTER_RAID_CMD",
		4:  "EPVE_QUERY_ALL_CARD_CMD",
		5:  "EPVE_SELECT_CARD_CMD",
		6:  "EPVE_SELECTED_CARD_CMD",
		7:  "EPVE_UPDATE_CARD_CMD",
		8:  "EPVE_BEGIN_FIRE_CMD",
		9:  "EPVE_FINISH_CARD_CMD",
		10: "EPVE_PLAY_CARD_CMD",
		11: "EPVE_GET_REWARD_CMD",
	}
	EPveCardParam_value = map[string]int32{
		"EPVE_INVITE_TEAM_CMD":    1,
		"EPVE_REPLY_TEAM_CMD":     2,
		"EPVE_ENTER_RAID_CMD":     3,
		"EPVE_QUERY_ALL_CARD_CMD": 4,
		"EPVE_SELECT_CARD_CMD":    5,
		"EPVE_SELECTED_CARD_CMD":  6,
		"EPVE_UPDATE_CARD_CMD":    7,
		"EPVE_BEGIN_FIRE_CMD":     8,
		"EPVE_FINISH_CARD_CMD":    9,
		"EPVE_PLAY_CARD_CMD":      10,
		"EPVE_GET_REWARD_CMD":     11,
	}
)

func (x EPveCardParam) Enum() *EPveCardParam {
	p := new(EPveCardParam)
	*p = x
	return p
}

func (x EPveCardParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPveCardParam) Descriptor() protoreflect.EnumDescriptor {
	return file_PveCard_proto_enumTypes[0].Descriptor()
}

func (EPveCardParam) Type() protoreflect.EnumType {
	return &file_PveCard_proto_enumTypes[0]
}

func (x EPveCardParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPveCardParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPveCardParam(num)
	return nil
}

// Deprecated: Use EPveCardParam.Descriptor instead.
func (EPveCardParam) EnumDescriptor() ([]byte, []int) {
	return file_PveCard_proto_rawDescGZIP(), []int{0}
}

type InvitePveCardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=66" json:"cmd,omitempty"`
	Param    *EPveCardParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EPveCardParam,def=1" json:"param,omitempty"`
	Configid *uint32        `protobuf:"varint,3,opt,name=configid,def=0" json:"configid,omitempty"`
	Iscancel *bool          `protobuf:"varint,4,opt,name=iscancel,def=0" json:"iscancel,omitempty"`
}

// Default values for InvitePveCardCmd fields.
const (
	Default_InvitePveCardCmd_Cmd      = Command_PVE_CARD_PROTOCMD
	Default_InvitePveCardCmd_Param    = EPveCardParam_EPVE_INVITE_TEAM_CMD
	Default_InvitePveCardCmd_Configid = uint32(0)
	Default_InvitePveCardCmd_Iscancel = bool(false)
)

func (x *InvitePveCardCmd) Reset() {
	*x = InvitePveCardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PveCard_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitePveCardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitePveCardCmd) ProtoMessage() {}

func (x *InvitePveCardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_PveCard_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitePveCardCmd.ProtoReflect.Descriptor instead.
func (*InvitePveCardCmd) Descriptor() ([]byte, []int) {
	return file_PveCard_proto_rawDescGZIP(), []int{0}
}

func (x *InvitePveCardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InvitePveCardCmd_Cmd
}

func (x *InvitePveCardCmd) GetParam() EPveCardParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InvitePveCardCmd_Param
}

func (x *InvitePveCardCmd) GetConfigid() uint32 {
	if x != nil && x.Configid != nil {
		return *x.Configid
	}
	return Default_InvitePveCardCmd_Configid
}

func (x *InvitePveCardCmd) GetIscancel() bool {
	if x != nil && x.Iscancel != nil {
		return *x.Iscancel
	}
	return Default_InvitePveCardCmd_Iscancel
}

type ReplyPveCardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=66" json:"cmd,omitempty"`
	Param  *EPveCardParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EPveCardParam,def=2" json:"param,omitempty"`
	Agree  *bool          `protobuf:"varint,3,opt,name=agree,def=0" json:"agree,omitempty"`
	Charid *uint64        `protobuf:"varint,4,opt,name=charid,def=0" json:"charid,omitempty"`
}

// Default values for ReplyPveCardCmd fields.
const (
	Default_ReplyPveCardCmd_Cmd    = Command_PVE_CARD_PROTOCMD
	Default_ReplyPveCardCmd_Param  = EPveCardParam_EPVE_REPLY_TEAM_CMD
	Default_ReplyPveCardCmd_Agree  = bool(false)
	Default_ReplyPveCardCmd_Charid = uint64(0)
)

func (x *ReplyPveCardCmd) Reset() {
	*x = ReplyPveCardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PveCard_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyPveCardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyPveCardCmd) ProtoMessage() {}

func (x *ReplyPveCardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_PveCard_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyPveCardCmd.ProtoReflect.Descriptor instead.
func (*ReplyPveCardCmd) Descriptor() ([]byte, []int) {
	return file_PveCard_proto_rawDescGZIP(), []int{1}
}

func (x *ReplyPveCardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReplyPveCardCmd_Cmd
}

func (x *ReplyPveCardCmd) GetParam() EPveCardParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReplyPveCardCmd_Param
}

func (x *ReplyPveCardCmd) GetAgree() bool {
	if x != nil && x.Agree != nil {
		return *x.Agree
	}
	return Default_ReplyPveCardCmd_Agree
}

func (x *ReplyPveCardCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_ReplyPveCardCmd_Charid
}

type EnterPveCardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=66" json:"cmd,omitempty"`
	Param    *EPveCardParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EPveCardParam,def=3" json:"param,omitempty"`
	Configid *uint32        `protobuf:"varint,3,opt,name=configid,def=0" json:"configid,omitempty"`
	Zoneid   *uint32        `protobuf:"varint,4,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
}

// Default values for EnterPveCardCmd fields.
const (
	Default_EnterPveCardCmd_Cmd      = Command_PVE_CARD_PROTOCMD
	Default_EnterPveCardCmd_Param    = EPveCardParam_EPVE_ENTER_RAID_CMD
	Default_EnterPveCardCmd_Configid = uint32(0)
	Default_EnterPveCardCmd_Zoneid   = uint32(0)
)

func (x *EnterPveCardCmd) Reset() {
	*x = EnterPveCardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PveCard_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterPveCardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterPveCardCmd) ProtoMessage() {}

func (x *EnterPveCardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_PveCard_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterPveCardCmd.ProtoReflect.Descriptor instead.
func (*EnterPveCardCmd) Descriptor() ([]byte, []int) {
	return file_PveCard_proto_rawDescGZIP(), []int{2}
}

func (x *EnterPveCardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnterPveCardCmd_Cmd
}

func (x *EnterPveCardCmd) GetParam() EPveCardParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnterPveCardCmd_Param
}

func (x *EnterPveCardCmd) GetConfigid() uint32 {
	if x != nil && x.Configid != nil {
		return *x.Configid
	}
	return Default_EnterPveCardCmd_Configid
}

func (x *EnterPveCardCmd) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_EnterPveCardCmd_Zoneid
}

type PveCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   *uint32  `protobuf:"varint,1,opt,name=index,def=0" json:"index,omitempty"`
	Cardids []uint32 `protobuf:"varint,2,rep,name=cardids" json:"cardids,omitempty"`
}

// Default values for PveCardInfo fields.
const (
	Default_PveCardInfo_Index = uint32(0)
)

func (x *PveCardInfo) Reset() {
	*x = PveCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PveCard_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PveCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PveCardInfo) ProtoMessage() {}

func (x *PveCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_PveCard_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PveCardInfo.ProtoReflect.Descriptor instead.
func (*PveCardInfo) Descriptor() ([]byte, []int) {
	return file_PveCard_proto_rawDescGZIP(), []int{3}
}

func (x *PveCardInfo) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_PveCardInfo_Index
}

func (x *PveCardInfo) GetCardids() []uint32 {
	if x != nil {
		return x.Cardids
	}
	return nil
}

type QueryCardInfoCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=66" json:"cmd,omitempty"`
	Param *EPveCardParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EPveCardParam,def=4" json:"param,omitempty"`
	Cards []*PveCardInfo `protobuf:"bytes,3,rep,name=cards" json:"cards,omitempty"`
}

// Default values for QueryCardInfoCmd fields.
const (
	Default_QueryCardInfoCmd_Cmd   = Command_PVE_CARD_PROTOCMD
	Default_QueryCardInfoCmd_Param = EPveCardParam_EPVE_QUERY_ALL_CARD_CMD
)

func (x *QueryCardInfoCmd) Reset() {
	*x = QueryCardInfoCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PveCard_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCardInfoCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCardInfoCmd) ProtoMessage() {}

func (x *QueryCardInfoCmd) ProtoReflect() protoreflect.Message {
	mi := &file_PveCard_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCardInfoCmd.ProtoReflect.Descriptor instead.
func (*QueryCardInfoCmd) Descriptor() ([]byte, []int) {
	return file_PveCard_proto_rawDescGZIP(), []int{4}
}

func (x *QueryCardInfoCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryCardInfoCmd_Cmd
}

func (x *QueryCardInfoCmd) GetParam() EPveCardParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryCardInfoCmd_Param
}

func (x *QueryCardInfoCmd) GetCards() []*PveCardInfo {
	if x != nil {
		return x.Cards
	}
	return nil
}

type SelectPveCardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=66" json:"cmd,omitempty"`
	Param *EPveCardParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EPveCardParam,def=5" json:"param,omitempty"`
	Index *uint32        `protobuf:"varint,3,req,name=index" json:"index,omitempty"`
}

// Default values for SelectPveCardCmd fields.
const (
	Default_SelectPveCardCmd_Cmd   = Command_PVE_CARD_PROTOCMD
	Default_SelectPveCardCmd_Param = EPveCardParam_EPVE_SELECT_CARD_CMD
)

func (x *SelectPveCardCmd) Reset() {
	*x = SelectPveCardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PveCard_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectPveCardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectPveCardCmd) ProtoMessage() {}

func (x *SelectPveCardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_PveCard_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectPveCardCmd.ProtoReflect.Descriptor instead.
func (*SelectPveCardCmd) Descriptor() ([]byte, []int) {
	return file_PveCard_proto_rawDescGZIP(), []int{5}
}

func (x *SelectPveCardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SelectPveCardCmd_Cmd
}

func (x *SelectPveCardCmd) GetParam() EPveCardParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SelectPveCardCmd_Param
}

func (x *SelectPveCardCmd) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type SyncProcessPveCardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=66" json:"cmd,omitempty"`
	Param   *EPveCardParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EPveCardParam,def=6" json:"param,omitempty"`
	Card    *PveCardInfo   `protobuf:"bytes,3,opt,name=card" json:"card,omitempty"`
	Process *uint32        `protobuf:"varint,4,opt,name=process,def=0" json:"process,omitempty"`
}

// Default values for SyncProcessPveCardCmd fields.
const (
	Default_SyncProcessPveCardCmd_Cmd     = Command_PVE_CARD_PROTOCMD
	Default_SyncProcessPveCardCmd_Param   = EPveCardParam_EPVE_SELECTED_CARD_CMD
	Default_SyncProcessPveCardCmd_Process = uint32(0)
)

func (x *SyncProcessPveCardCmd) Reset() {
	*x = SyncProcessPveCardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PveCard_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncProcessPveCardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncProcessPveCardCmd) ProtoMessage() {}

func (x *SyncProcessPveCardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_PveCard_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncProcessPveCardCmd.ProtoReflect.Descriptor instead.
func (*SyncProcessPveCardCmd) Descriptor() ([]byte, []int) {
	return file_PveCard_proto_rawDescGZIP(), []int{6}
}

func (x *SyncProcessPveCardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SyncProcessPveCardCmd_Cmd
}

func (x *SyncProcessPveCardCmd) GetParam() EPveCardParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SyncProcessPveCardCmd_Param
}

func (x *SyncProcessPveCardCmd) GetCard() *PveCardInfo {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *SyncProcessPveCardCmd) GetProcess() uint32 {
	if x != nil && x.Process != nil {
		return *x.Process
	}
	return Default_SyncProcessPveCardCmd_Process
}

type UpdateProcessPveCardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=66" json:"cmd,omitempty"`
	Param   *EPveCardParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EPveCardParam,def=7" json:"param,omitempty"`
	Process *uint32        `protobuf:"varint,3,opt,name=process,def=0" json:"process,omitempty"`
}

// Default values for UpdateProcessPveCardCmd fields.
const (
	Default_UpdateProcessPveCardCmd_Cmd     = Command_PVE_CARD_PROTOCMD
	Default_UpdateProcessPveCardCmd_Param   = EPveCardParam_EPVE_UPDATE_CARD_CMD
	Default_UpdateProcessPveCardCmd_Process = uint32(0)
)

func (x *UpdateProcessPveCardCmd) Reset() {
	*x = UpdateProcessPveCardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PveCard_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProcessPveCardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProcessPveCardCmd) ProtoMessage() {}

func (x *UpdateProcessPveCardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_PveCard_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProcessPveCardCmd.ProtoReflect.Descriptor instead.
func (*UpdateProcessPveCardCmd) Descriptor() ([]byte, []int) {
	return file_PveCard_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateProcessPveCardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateProcessPveCardCmd_Cmd
}

func (x *UpdateProcessPveCardCmd) GetParam() EPveCardParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateProcessPveCardCmd_Param
}

func (x *UpdateProcessPveCardCmd) GetProcess() uint32 {
	if x != nil && x.Process != nil {
		return *x.Process
	}
	return Default_UpdateProcessPveCardCmd_Process
}

type BeginFirePveCardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=66" json:"cmd,omitempty"`
	Param *EPveCardParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EPveCardParam,def=8" json:"param,omitempty"`
}

// Default values for BeginFirePveCardCmd fields.
const (
	Default_BeginFirePveCardCmd_Cmd   = Command_PVE_CARD_PROTOCMD
	Default_BeginFirePveCardCmd_Param = EPveCardParam_EPVE_BEGIN_FIRE_CMD
)

func (x *BeginFirePveCardCmd) Reset() {
	*x = BeginFirePveCardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PveCard_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginFirePveCardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginFirePveCardCmd) ProtoMessage() {}

func (x *BeginFirePveCardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_PveCard_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginFirePveCardCmd.ProtoReflect.Descriptor instead.
func (*BeginFirePveCardCmd) Descriptor() ([]byte, []int) {
	return file_PveCard_proto_rawDescGZIP(), []int{8}
}

func (x *BeginFirePveCardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BeginFirePveCardCmd_Cmd
}

func (x *BeginFirePveCardCmd) GetParam() EPveCardParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BeginFirePveCardCmd_Param
}

type FinishPlayCardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=66" json:"cmd,omitempty"`
	Param *EPveCardParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EPveCardParam,def=9" json:"param,omitempty"`
}

// Default values for FinishPlayCardCmd fields.
const (
	Default_FinishPlayCardCmd_Cmd   = Command_PVE_CARD_PROTOCMD
	Default_FinishPlayCardCmd_Param = EPveCardParam_EPVE_FINISH_CARD_CMD
)

func (x *FinishPlayCardCmd) Reset() {
	*x = FinishPlayCardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PveCard_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishPlayCardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishPlayCardCmd) ProtoMessage() {}

func (x *FinishPlayCardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_PveCard_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishPlayCardCmd.ProtoReflect.Descriptor instead.
func (*FinishPlayCardCmd) Descriptor() ([]byte, []int) {
	return file_PveCard_proto_rawDescGZIP(), []int{9}
}

func (x *FinishPlayCardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FinishPlayCardCmd_Cmd
}

func (x *FinishPlayCardCmd) GetParam() EPveCardParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FinishPlayCardCmd_Param
}

type PlayPveCardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=66" json:"cmd,omitempty"`
	Param   *EPveCardParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EPveCardParam,def=10" json:"param,omitempty"`
	Npcguid *uint64        `protobuf:"varint,3,req,name=npcguid" json:"npcguid,omitempty"`
	Cardids []uint32       `protobuf:"varint,4,rep,name=cardids" json:"cardids,omitempty"`
}

// Default values for PlayPveCardCmd fields.
const (
	Default_PlayPveCardCmd_Cmd   = Command_PVE_CARD_PROTOCMD
	Default_PlayPveCardCmd_Param = EPveCardParam_EPVE_PLAY_CARD_CMD
)

func (x *PlayPveCardCmd) Reset() {
	*x = PlayPveCardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PveCard_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayPveCardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayPveCardCmd) ProtoMessage() {}

func (x *PlayPveCardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_PveCard_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayPveCardCmd.ProtoReflect.Descriptor instead.
func (*PlayPveCardCmd) Descriptor() ([]byte, []int) {
	return file_PveCard_proto_rawDescGZIP(), []int{10}
}

func (x *PlayPveCardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PlayPveCardCmd_Cmd
}

func (x *PlayPveCardCmd) GetParam() EPveCardParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PlayPveCardCmd_Param
}

func (x *PlayPveCardCmd) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return 0
}

func (x *PlayPveCardCmd) GetCardids() []uint32 {
	if x != nil {
		return x.Cardids
	}
	return nil
}

type GetPveCardRewardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=66" json:"cmd,omitempty"`
	Param *EPveCardParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EPveCardParam,def=11" json:"param,omitempty"`
}

// Default values for GetPveCardRewardCmd fields.
const (
	Default_GetPveCardRewardCmd_Cmd   = Command_PVE_CARD_PROTOCMD
	Default_GetPveCardRewardCmd_Param = EPveCardParam_EPVE_GET_REWARD_CMD
)

func (x *GetPveCardRewardCmd) Reset() {
	*x = GetPveCardRewardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PveCard_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPveCardRewardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPveCardRewardCmd) ProtoMessage() {}

func (x *GetPveCardRewardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_PveCard_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPveCardRewardCmd.ProtoReflect.Descriptor instead.
func (*GetPveCardRewardCmd) Descriptor() ([]byte, []int) {
	return file_PveCard_proto_rawDescGZIP(), []int{11}
}

func (x *GetPveCardRewardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GetPveCardRewardCmd_Cmd
}

func (x *GetPveCardRewardCmd) GetParam() EPveCardParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GetPveCardRewardCmd_Param
}

var File_PveCard_proto protoreflect.FileDescriptor

var file_PveCard_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x50, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc7, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x50, 0x76, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x11, 0x50, 0x56, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50,
	0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x45, 0x50, 0x56,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4d,
	0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x08, 0x69, 0x73, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x08, 0x69, 0x73, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x22, 0xbb, 0x01, 0x0a, 0x0f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x50, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x31,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x50, 0x56, 0x45, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x45, 0x50, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1b, 0x0a, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x12, 0x19, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x50, 0x56, 0x45, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x13, 0x45, 0x50, 0x56, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52,
	0x41, 0x49, 0x44, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x0b, 0x50, 0x76, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x69, 0x64, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6d, 0x64, 0x12,
	0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x50, 0x56, 0x45, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x45, 0x50, 0x56, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x76, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x9b, 0x01,
	0x0a, 0x10, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x43,
	0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x50,
	0x56, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x45, 0x50, 0x56, 0x45, 0x5f, 0x53,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xcf, 0x01, 0x0a, 0x15,
	0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x76, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x11, 0x50, 0x56, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50,
	0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x45, 0x50, 0x56,
	0x45, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50,
	0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64,
	0x12, 0x1b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0xa9, 0x01,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x50, 0x56, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x50, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x14, 0x45, 0x50, 0x56, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x46, 0x69, 0x72, 0x65, 0x50, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6d,
	0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x50, 0x56,
	0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x45, 0x50, 0x56, 0x45, 0x5f, 0x42, 0x45,
	0x47, 0x49, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x6c,
	0x61, 0x79, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x50, 0x56, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x50, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x14, 0x45, 0x50, 0x56, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xb5, 0x01, 0x0a,
	0x0e, 0x50, 0x6c, 0x61, 0x79, 0x50, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6d, 0x64, 0x12,
	0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x50, 0x56, 0x45, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x45, 0x50, 0x56, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61,
	0x72, 0x64, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x61, 0x72,
	0x64, 0x69, 0x64, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x76, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x50, 0x56, 0x45, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x13, 0x45, 0x50, 0x56, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x2a, 0xac,
	0x02, 0x0a, 0x0d, 0x45, 0x50, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50,
	0x56, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4d,
	0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x56, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x50, 0x56, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x56,
	0x45, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4d,
	0x44, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x06, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x50, 0x56, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x56,
	0x45, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x43, 0x4d, 0x44,
	0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x56, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53,
	0x48, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x50, 0x56, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43,
	0x4d, 0x44, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x56, 0x45, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x0b,
}

var (
	file_PveCard_proto_rawDescOnce sync.Once
	file_PveCard_proto_rawDescData = file_PveCard_proto_rawDesc
)

func file_PveCard_proto_rawDescGZIP() []byte {
	file_PveCard_proto_rawDescOnce.Do(func() {
		file_PveCard_proto_rawDescData = protoimpl.X.CompressGZIP(file_PveCard_proto_rawDescData)
	})
	return file_PveCard_proto_rawDescData
}

var file_PveCard_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_PveCard_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_PveCard_proto_goTypes = []interface{}{
	(EPveCardParam)(0),              // 0: Cmd.EPveCardParam
	(*InvitePveCardCmd)(nil),        // 1: Cmd.InvitePveCardCmd
	(*ReplyPveCardCmd)(nil),         // 2: Cmd.ReplyPveCardCmd
	(*EnterPveCardCmd)(nil),         // 3: Cmd.EnterPveCardCmd
	(*PveCardInfo)(nil),             // 4: Cmd.PveCardInfo
	(*QueryCardInfoCmd)(nil),        // 5: Cmd.QueryCardInfoCmd
	(*SelectPveCardCmd)(nil),        // 6: Cmd.SelectPveCardCmd
	(*SyncProcessPveCardCmd)(nil),   // 7: Cmd.SyncProcessPveCardCmd
	(*UpdateProcessPveCardCmd)(nil), // 8: Cmd.UpdateProcessPveCardCmd
	(*BeginFirePveCardCmd)(nil),     // 9: Cmd.BeginFirePveCardCmd
	(*FinishPlayCardCmd)(nil),       // 10: Cmd.FinishPlayCardCmd
	(*PlayPveCardCmd)(nil),          // 11: Cmd.PlayPveCardCmd
	(*GetPveCardRewardCmd)(nil),     // 12: Cmd.GetPveCardRewardCmd
	(Command)(0),                    // 13: Cmd.Command
}
var file_PveCard_proto_depIdxs = []int32{
	13, // 0: Cmd.InvitePveCardCmd.cmd:type_name -> Cmd.Command
	0,  // 1: Cmd.InvitePveCardCmd.param:type_name -> Cmd.EPveCardParam
	13, // 2: Cmd.ReplyPveCardCmd.cmd:type_name -> Cmd.Command
	0,  // 3: Cmd.ReplyPveCardCmd.param:type_name -> Cmd.EPveCardParam
	13, // 4: Cmd.EnterPveCardCmd.cmd:type_name -> Cmd.Command
	0,  // 5: Cmd.EnterPveCardCmd.param:type_name -> Cmd.EPveCardParam
	13, // 6: Cmd.QueryCardInfoCmd.cmd:type_name -> Cmd.Command
	0,  // 7: Cmd.QueryCardInfoCmd.param:type_name -> Cmd.EPveCardParam
	4,  // 8: Cmd.QueryCardInfoCmd.cards:type_name -> Cmd.PveCardInfo
	13, // 9: Cmd.SelectPveCardCmd.cmd:type_name -> Cmd.Command
	0,  // 10: Cmd.SelectPveCardCmd.param:type_name -> Cmd.EPveCardParam
	13, // 11: Cmd.SyncProcessPveCardCmd.cmd:type_name -> Cmd.Command
	0,  // 12: Cmd.SyncProcessPveCardCmd.param:type_name -> Cmd.EPveCardParam
	4,  // 13: Cmd.SyncProcessPveCardCmd.card:type_name -> Cmd.PveCardInfo
	13, // 14: Cmd.UpdateProcessPveCardCmd.cmd:type_name -> Cmd.Command
	0,  // 15: Cmd.UpdateProcessPveCardCmd.param:type_name -> Cmd.EPveCardParam
	13, // 16: Cmd.BeginFirePveCardCmd.cmd:type_name -> Cmd.Command
	0,  // 17: Cmd.BeginFirePveCardCmd.param:type_name -> Cmd.EPveCardParam
	13, // 18: Cmd.FinishPlayCardCmd.cmd:type_name -> Cmd.Command
	0,  // 19: Cmd.FinishPlayCardCmd.param:type_name -> Cmd.EPveCardParam
	13, // 20: Cmd.PlayPveCardCmd.cmd:type_name -> Cmd.Command
	0,  // 21: Cmd.PlayPveCardCmd.param:type_name -> Cmd.EPveCardParam
	13, // 22: Cmd.GetPveCardRewardCmd.cmd:type_name -> Cmd.Command
	0,  // 23: Cmd.GetPveCardRewardCmd.param:type_name -> Cmd.EPveCardParam
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_PveCard_proto_init() }
func file_PveCard_proto_init() {
	if File_PveCard_proto != nil {
		return
	}
	file_xCmd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_PveCard_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitePveCardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PveCard_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyPveCardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PveCard_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterPveCardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PveCard_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PveCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PveCard_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCardInfoCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PveCard_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectPveCardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PveCard_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncProcessPveCardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PveCard_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProcessPveCardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PveCard_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginFirePveCardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PveCard_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishPlayCardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PveCard_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayPveCardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PveCard_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPveCardRewardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_PveCard_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_PveCard_proto_goTypes,
		DependencyIndexes: file_PveCard_proto_depIdxs,
		EnumInfos:         file_PveCard_proto_enumTypes,
		MessageInfos:      file_PveCard_proto_msgTypes,
	}.Build()
	File_PveCard_proto = out.File
	file_PveCard_proto_rawDesc = nil
	file_PveCard_proto_goTypes = nil
	file_PveCard_proto_depIdxs = nil
}
