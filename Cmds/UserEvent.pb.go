// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: UserEvent.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EventParam int32

const (
	EventParam_USER_EVENT_FIRST_ACTION            EventParam = 1
	EventParam_USER_EVENT_ATTACK_NPC              EventParam = 2
	EventParam_USER_EVENT_NEW_TITLE               EventParam = 3
	EventParam_USER_EVENT_ALL_TITLE               EventParam = 4
	EventParam_USER_EVENT_UPDATE_RANDOM           EventParam = 5
	EventParam_USER_EVENT_BUFF_DAMAGE             EventParam = 6
	EventParam_USER_EVENT_CHARGE_NTF              EventParam = 7
	EventParam_USER_EVENT_CHARGE_QUERY            EventParam = 8
	EventParam_USER_EVENT_DEPOSIT_CARD_INFO       EventParam = 9
	EventParam_USER_EVENT_DEL_TRANSFORM           EventParam = 10
	EventParam_USER_EVENT_INVITECAT_FAIL          EventParam = 11
	EventParam_USER_EVENT_NPC_FUNCTION            EventParam = 12
	EventParam_USER_EVENT_SYSTEM_STRING           EventParam = 13
	EventParam_USER_EVENT_HAND_CAT                EventParam = 14
	EventParam_USER_EVENT_CHANGE_TITLE            EventParam = 15
	EventParam_USER_EVENT_QUERY_CHARGE_CNT        EventParam = 16
	EventParam_USER_EVENT_NTF_MONTHCARD_END       EventParam = 17
	EventParam_USER_EVENT_LOVELETTER_USE          EventParam = 18
	EventParam_USER_EVENT_QUERY_ACTIVITY_CNT      EventParam = 19
	EventParam_USER_EVENT_UPDATE_ACTIVITY_CNT     EventParam = 20
	EventParam_USER_EVENT_GET_RECALL_SHARE_REWARD EventParam = 22
	EventParam_USER_EVENT_NTF_VERSION_CARD        EventParam = 23
	EventParam_USER_EVENT_WAIT_RELIVE             EventParam = 24
	EventParam_USER_EVENT_QUERY_RESETTIME         EventParam = 25
	EventParam_USER_EVENT_INOUT_ACT               EventParam = 26
	EventParam_USER_EVENT_MAIL                    EventParam = 27
	EventParam_USER_EVENT_LEVELUP_DEAD            EventParam = 28
	EventParam_USER_EVENT_AUTOBATTLE              EventParam = 29
	EventParam_USER_EVENT_ACTIVITY_MAP            EventParam = 30
	EventParam_USER_EVENT_ACTIVITY_POINT          EventParam = 31
	EventParam_USER_EVENT_THEME_DETAILS           EventParam = 32
	EventParam_USER_EVENT_QUERY_FAVORITE_FRIEND   EventParam = 33
	EventParam_USER_EVENT_UPDATE_FAVORITE_FRIEND  EventParam = 34
	EventParam_USER_EVENT_ACTION_FAVORITE_FRIEND  EventParam = 35
	EventParam_USER_EVENT_SOUND_STORY             EventParam = 36
	EventParam_USER_EVENT_CHARGE_ACC_CNT          EventParam = 37
	EventParam_USER_EVENT_BIFROST_CONTRIBUTE_ITEM EventParam = 39
	EventParam_USER_EVENT_CAMERA_ACTION           EventParam = 40
	EventParam_USER_EVENT_ROBOT_OFFBATTLE         EventParam = 41
	EventParam_USER_EVENT_CHARGE_SDK_REQUEST      EventParam = 42
	EventParam_USER_EVENT_CHARGE_SDK_REPLY        EventParam = 43
	EventParam_USER_EVENT_CLIENT_AI_SYNC          EventParam = 44
	EventParam_USER_EVENT_CLIENT_AI_UPDATE        EventParam = 45
	EventParam_USER_EVENT_GIFTCODE_EXCHANGE       EventParam = 46
	EventParam_USER_EVENT_HIDE_OTHER_APPEARANCE   EventParam = 47
	EventParam_USER_EVENT_GIFT_TIMELIMIT_NTF      EventParam = 48
	EventParam_USER_EVENT_GIFT_TIMELIMIT_BUY      EventParam = 49
	EventParam_USER_EVENT_GIFT_TIMELIMIT_ACTIVE   EventParam = 50
	EventParam_USER_EVENT_MULTI_CUTSCENE_UPDATE   EventParam = 55
	EventParam_USER_EVENT_POLICY_UPDATE           EventParam = 56
	EventParam_USER_EVENT_POLICY_AGREE            EventParam = 57
	EventParam_USER_EVENT_SHOW_SCENE_OBJECT       EventParam = 58
	EventParam_USER_EVENT_DOUBLE_ACTION           EventParam = 59
	EventParam_USER_EVENT_MONITOR_BEGIN           EventParam = 60
	EventParam_USER_EVENT_MONITOR_STOP            EventParam = 61
	EventParam_USER_EVENT_MONITOR_TOMAP           EventParam = 62
	EventParam_USER_EVENT_MONITOR_ENDMAP          EventParam = 63
	EventParam_USER_EVENT_MONITOR_BUILD           EventParam = 64
	EventParam_USER_EVENT_MONITOR_STOP_RET        EventParam = 65
	EventParam_USER_EVENT_CONFIG                  EventParam = 66
	EventParam_USER_EVENT_NPCWALK                 EventParam = 67
	EventParam_USER_EVENT_SET_PROFILE             EventParam = 68
	EventParam_USER_EVENT_SYNC_FATE_RELATION      EventParam = 69
	EventParam_USER_EVENT_QUERY_FATE_RELATION     EventParam = 70
	EventParam_USER_EVENT_GVG_OPT_STATUE          EventParam = 71
	EventParam_USER_EVENT_TIMELIMIT_ICON          EventParam = 72
	EventParam_USER_EVENT_GUIDE                   EventParam = 73
	EventParam_USER_EVENT_SHOW_CARD               EventParam = 75
	EventParam_USER_EVENT_RMB_GIFT                EventParam = 76
	EventParam_USER_EVENT_QUERY_PROFILE           EventParam = 77
	EventParam_USER_EVENT_GVGSANDTABLE_INFO       EventParam = 78
	EventParam_USER_EVENT_DELAY_RELIVE_METHOD     EventParam = 79
	EventParam_USER_EVENT_UI_ACTION               EventParam = 80
)

// Enum value maps for EventParam.
var (
	EventParam_name = map[int32]string{
		1:  "USER_EVENT_FIRST_ACTION",
		2:  "USER_EVENT_ATTACK_NPC",
		3:  "USER_EVENT_NEW_TITLE",
		4:  "USER_EVENT_ALL_TITLE",
		5:  "USER_EVENT_UPDATE_RANDOM",
		6:  "USER_EVENT_BUFF_DAMAGE",
		7:  "USER_EVENT_CHARGE_NTF",
		8:  "USER_EVENT_CHARGE_QUERY",
		9:  "USER_EVENT_DEPOSIT_CARD_INFO",
		10: "USER_EVENT_DEL_TRANSFORM",
		11: "USER_EVENT_INVITECAT_FAIL",
		12: "USER_EVENT_NPC_FUNCTION",
		13: "USER_EVENT_SYSTEM_STRING",
		14: "USER_EVENT_HAND_CAT",
		15: "USER_EVENT_CHANGE_TITLE",
		16: "USER_EVENT_QUERY_CHARGE_CNT",
		17: "USER_EVENT_NTF_MONTHCARD_END",
		18: "USER_EVENT_LOVELETTER_USE",
		19: "USER_EVENT_QUERY_ACTIVITY_CNT",
		20: "USER_EVENT_UPDATE_ACTIVITY_CNT",
		22: "USER_EVENT_GET_RECALL_SHARE_REWARD",
		23: "USER_EVENT_NTF_VERSION_CARD",
		24: "USER_EVENT_WAIT_RELIVE",
		25: "USER_EVENT_QUERY_RESETTIME",
		26: "USER_EVENT_INOUT_ACT",
		27: "USER_EVENT_MAIL",
		28: "USER_EVENT_LEVELUP_DEAD",
		29: "USER_EVENT_AUTOBATTLE",
		30: "USER_EVENT_ACTIVITY_MAP",
		31: "USER_EVENT_ACTIVITY_POINT",
		32: "USER_EVENT_THEME_DETAILS",
		33: "USER_EVENT_QUERY_FAVORITE_FRIEND",
		34: "USER_EVENT_UPDATE_FAVORITE_FRIEND",
		35: "USER_EVENT_ACTION_FAVORITE_FRIEND",
		36: "USER_EVENT_SOUND_STORY",
		37: "USER_EVENT_CHARGE_ACC_CNT",
		39: "USER_EVENT_BIFROST_CONTRIBUTE_ITEM",
		40: "USER_EVENT_CAMERA_ACTION",
		41: "USER_EVENT_ROBOT_OFFBATTLE",
		42: "USER_EVENT_CHARGE_SDK_REQUEST",
		43: "USER_EVENT_CHARGE_SDK_REPLY",
		44: "USER_EVENT_CLIENT_AI_SYNC",
		45: "USER_EVENT_CLIENT_AI_UPDATE",
		46: "USER_EVENT_GIFTCODE_EXCHANGE",
		47: "USER_EVENT_HIDE_OTHER_APPEARANCE",
		48: "USER_EVENT_GIFT_TIMELIMIT_NTF",
		49: "USER_EVENT_GIFT_TIMELIMIT_BUY",
		50: "USER_EVENT_GIFT_TIMELIMIT_ACTIVE",
		55: "USER_EVENT_MULTI_CUTSCENE_UPDATE",
		56: "USER_EVENT_POLICY_UPDATE",
		57: "USER_EVENT_POLICY_AGREE",
		58: "USER_EVENT_SHOW_SCENE_OBJECT",
		59: "USER_EVENT_DOUBLE_ACTION",
		60: "USER_EVENT_MONITOR_BEGIN",
		61: "USER_EVENT_MONITOR_STOP",
		62: "USER_EVENT_MONITOR_TOMAP",
		63: "USER_EVENT_MONITOR_ENDMAP",
		64: "USER_EVENT_MONITOR_BUILD",
		65: "USER_EVENT_MONITOR_STOP_RET",
		66: "USER_EVENT_CONFIG",
		67: "USER_EVENT_NPCWALK",
		68: "USER_EVENT_SET_PROFILE",
		69: "USER_EVENT_SYNC_FATE_RELATION",
		70: "USER_EVENT_QUERY_FATE_RELATION",
		71: "USER_EVENT_GVG_OPT_STATUE",
		72: "USER_EVENT_TIMELIMIT_ICON",
		73: "USER_EVENT_GUIDE",
		75: "USER_EVENT_SHOW_CARD",
		76: "USER_EVENT_RMB_GIFT",
		77: "USER_EVENT_QUERY_PROFILE",
		78: "USER_EVENT_GVGSANDTABLE_INFO",
		79: "USER_EVENT_DELAY_RELIVE_METHOD",
		80: "USER_EVENT_UI_ACTION",
	}
	EventParam_value = map[string]int32{
		"USER_EVENT_FIRST_ACTION":            1,
		"USER_EVENT_ATTACK_NPC":              2,
		"USER_EVENT_NEW_TITLE":               3,
		"USER_EVENT_ALL_TITLE":               4,
		"USER_EVENT_UPDATE_RANDOM":           5,
		"USER_EVENT_BUFF_DAMAGE":             6,
		"USER_EVENT_CHARGE_NTF":              7,
		"USER_EVENT_CHARGE_QUERY":            8,
		"USER_EVENT_DEPOSIT_CARD_INFO":       9,
		"USER_EVENT_DEL_TRANSFORM":           10,
		"USER_EVENT_INVITECAT_FAIL":          11,
		"USER_EVENT_NPC_FUNCTION":            12,
		"USER_EVENT_SYSTEM_STRING":           13,
		"USER_EVENT_HAND_CAT":                14,
		"USER_EVENT_CHANGE_TITLE":            15,
		"USER_EVENT_QUERY_CHARGE_CNT":        16,
		"USER_EVENT_NTF_MONTHCARD_END":       17,
		"USER_EVENT_LOVELETTER_USE":          18,
		"USER_EVENT_QUERY_ACTIVITY_CNT":      19,
		"USER_EVENT_UPDATE_ACTIVITY_CNT":     20,
		"USER_EVENT_GET_RECALL_SHARE_REWARD": 22,
		"USER_EVENT_NTF_VERSION_CARD":        23,
		"USER_EVENT_WAIT_RELIVE":             24,
		"USER_EVENT_QUERY_RESETTIME":         25,
		"USER_EVENT_INOUT_ACT":               26,
		"USER_EVENT_MAIL":                    27,
		"USER_EVENT_LEVELUP_DEAD":            28,
		"USER_EVENT_AUTOBATTLE":              29,
		"USER_EVENT_ACTIVITY_MAP":            30,
		"USER_EVENT_ACTIVITY_POINT":          31,
		"USER_EVENT_THEME_DETAILS":           32,
		"USER_EVENT_QUERY_FAVORITE_FRIEND":   33,
		"USER_EVENT_UPDATE_FAVORITE_FRIEND":  34,
		"USER_EVENT_ACTION_FAVORITE_FRIEND":  35,
		"USER_EVENT_SOUND_STORY":             36,
		"USER_EVENT_CHARGE_ACC_CNT":          37,
		"USER_EVENT_BIFROST_CONTRIBUTE_ITEM": 39,
		"USER_EVENT_CAMERA_ACTION":           40,
		"USER_EVENT_ROBOT_OFFBATTLE":         41,
		"USER_EVENT_CHARGE_SDK_REQUEST":      42,
		"USER_EVENT_CHARGE_SDK_REPLY":        43,
		"USER_EVENT_CLIENT_AI_SYNC":          44,
		"USER_EVENT_CLIENT_AI_UPDATE":        45,
		"USER_EVENT_GIFTCODE_EXCHANGE":       46,
		"USER_EVENT_HIDE_OTHER_APPEARANCE":   47,
		"USER_EVENT_GIFT_TIMELIMIT_NTF":      48,
		"USER_EVENT_GIFT_TIMELIMIT_BUY":      49,
		"USER_EVENT_GIFT_TIMELIMIT_ACTIVE":   50,
		"USER_EVENT_MULTI_CUTSCENE_UPDATE":   55,
		"USER_EVENT_POLICY_UPDATE":           56,
		"USER_EVENT_POLICY_AGREE":            57,
		"USER_EVENT_SHOW_SCENE_OBJECT":       58,
		"USER_EVENT_DOUBLE_ACTION":           59,
		"USER_EVENT_MONITOR_BEGIN":           60,
		"USER_EVENT_MONITOR_STOP":            61,
		"USER_EVENT_MONITOR_TOMAP":           62,
		"USER_EVENT_MONITOR_ENDMAP":          63,
		"USER_EVENT_MONITOR_BUILD":           64,
		"USER_EVENT_MONITOR_STOP_RET":        65,
		"USER_EVENT_CONFIG":                  66,
		"USER_EVENT_NPCWALK":                 67,
		"USER_EVENT_SET_PROFILE":             68,
		"USER_EVENT_SYNC_FATE_RELATION":      69,
		"USER_EVENT_QUERY_FATE_RELATION":     70,
		"USER_EVENT_GVG_OPT_STATUE":          71,
		"USER_EVENT_TIMELIMIT_ICON":          72,
		"USER_EVENT_GUIDE":                   73,
		"USER_EVENT_SHOW_CARD":               75,
		"USER_EVENT_RMB_GIFT":                76,
		"USER_EVENT_QUERY_PROFILE":           77,
		"USER_EVENT_GVGSANDTABLE_INFO":       78,
		"USER_EVENT_DELAY_RELIVE_METHOD":     79,
		"USER_EVENT_UI_ACTION":               80,
	}
)

func (x EventParam) Enum() *EventParam {
	p := new(EventParam)
	*p = x
	return p
}

func (x EventParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventParam) Descriptor() protoreflect.EnumDescriptor {
	return file_UserEvent_proto_enumTypes[0].Descriptor()
}

func (EventParam) Type() protoreflect.EnumType {
	return &file_UserEvent_proto_enumTypes[0]
}

func (x EventParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EventParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EventParam(num)
	return nil
}

// Deprecated: Use EventParam.Descriptor instead.
func (EventParam) EnumDescriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{0}
}

type EFirstActionType int32

const (
	EFirstActionType_EFIRSTACTION_MIN              EFirstActionType = 0
	EFirstActionType_EFIRSTACTION_SKILL_OVERFLOW   EFirstActionType = 1
	EFirstActionType_EFIRSTACTION_EXCHANGECARD     EFirstActionType = 2
	EFirstActionType_EFIRSTACTION_COMPOSECARD      EFirstActionType = 3
	EFirstActionType_EFIRSTACTION_COOKFOOD         EFirstActionType = 4
	EFirstActionType_EFIRSTACTION_LOTTERY          EFirstActionType = 5
	EFirstActionType_EFIRSTACTION_FOOD_MAIL        EFirstActionType = 6
	EFirstActionType_EFIRSTACTION_LOTTERY_EQUIP    EFirstActionType = 7
	EFirstActionType_EFIRSTACTION_LOTTERY_CARD     EFirstActionType = 8
	EFirstActionType_EFIRSTACTION_LOTTERY_MAGIC    EFirstActionType = 9
	EFirstActionType_EFIRSTACTION_RECALL_SHARE     EFirstActionType = 10
	EFirstActionType_EFIRSTACTION_DECOMPOSECARD    EFirstActionType = 11
	EFirstActionType_EFIRSTACTION_KFC_SHARE        EFirstActionType = 12
	EFirstActionType_EFIRSTACTION_RIDE_LOTTERY     EFirstActionType = 13
	EFirstActionType_EFIRSTACTION_MIX_LOTTERY      EFirstActionType = 14
	EFirstActionType_EFIRSTACTION_LOTTERY_CARD_NEW EFirstActionType = 15
)

// Enum value maps for EFirstActionType.
var (
	EFirstActionType_name = map[int32]string{
		0:  "EFIRSTACTION_MIN",
		1:  "EFIRSTACTION_SKILL_OVERFLOW",
		2:  "EFIRSTACTION_EXCHANGECARD",
		3:  "EFIRSTACTION_COMPOSECARD",
		4:  "EFIRSTACTION_COOKFOOD",
		5:  "EFIRSTACTION_LOTTERY",
		6:  "EFIRSTACTION_FOOD_MAIL",
		7:  "EFIRSTACTION_LOTTERY_EQUIP",
		8:  "EFIRSTACTION_LOTTERY_CARD",
		9:  "EFIRSTACTION_LOTTERY_MAGIC",
		10: "EFIRSTACTION_RECALL_SHARE",
		11: "EFIRSTACTION_DECOMPOSECARD",
		12: "EFIRSTACTION_KFC_SHARE",
		13: "EFIRSTACTION_RIDE_LOTTERY",
		14: "EFIRSTACTION_MIX_LOTTERY",
		15: "EFIRSTACTION_LOTTERY_CARD_NEW",
	}
	EFirstActionType_value = map[string]int32{
		"EFIRSTACTION_MIN":              0,
		"EFIRSTACTION_SKILL_OVERFLOW":   1,
		"EFIRSTACTION_EXCHANGECARD":     2,
		"EFIRSTACTION_COMPOSECARD":      3,
		"EFIRSTACTION_COOKFOOD":         4,
		"EFIRSTACTION_LOTTERY":          5,
		"EFIRSTACTION_FOOD_MAIL":        6,
		"EFIRSTACTION_LOTTERY_EQUIP":    7,
		"EFIRSTACTION_LOTTERY_CARD":     8,
		"EFIRSTACTION_LOTTERY_MAGIC":    9,
		"EFIRSTACTION_RECALL_SHARE":     10,
		"EFIRSTACTION_DECOMPOSECARD":    11,
		"EFIRSTACTION_KFC_SHARE":        12,
		"EFIRSTACTION_RIDE_LOTTERY":     13,
		"EFIRSTACTION_MIX_LOTTERY":      14,
		"EFIRSTACTION_LOTTERY_CARD_NEW": 15,
	}
)

func (x EFirstActionType) Enum() *EFirstActionType {
	p := new(EFirstActionType)
	*p = x
	return p
}

func (x EFirstActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFirstActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_UserEvent_proto_enumTypes[1].Descriptor()
}

func (EFirstActionType) Type() protoreflect.EnumType {
	return &file_UserEvent_proto_enumTypes[1]
}

func (x EFirstActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFirstActionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFirstActionType(num)
	return nil
}

// Deprecated: Use EFirstActionType.Descriptor instead.
func (EFirstActionType) EnumDescriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{1}
}

type ETitleType int32

const (
	ETitleType_ETITLE_TYPE_MIN               ETitleType = 0
	ETitleType_ETITLE_TYPE_MANNUAL           ETitleType = 1
	ETitleType_ETITLE_TYPE_ACHIEVEMENT       ETitleType = 2
	ETitleType_ETITLE_TYPE_ACHIEVEMENT_ORDER ETitleType = 3
	ETitleType_ETITLE_TYPE_FOODCOOKER        ETitleType = 7
	ETitleType_ETITLE_TYPE_FOODTASTER        ETitleType = 8
	ETitleType_ETITLE_TYPE_MAX               ETitleType = 9
)

// Enum value maps for ETitleType.
var (
	ETitleType_name = map[int32]string{
		0: "ETITLE_TYPE_MIN",
		1: "ETITLE_TYPE_MANNUAL",
		2: "ETITLE_TYPE_ACHIEVEMENT",
		3: "ETITLE_TYPE_ACHIEVEMENT_ORDER",
		7: "ETITLE_TYPE_FOODCOOKER",
		8: "ETITLE_TYPE_FOODTASTER",
		9: "ETITLE_TYPE_MAX",
	}
	ETitleType_value = map[string]int32{
		"ETITLE_TYPE_MIN":               0,
		"ETITLE_TYPE_MANNUAL":           1,
		"ETITLE_TYPE_ACHIEVEMENT":       2,
		"ETITLE_TYPE_ACHIEVEMENT_ORDER": 3,
		"ETITLE_TYPE_FOODCOOKER":        7,
		"ETITLE_TYPE_FOODTASTER":        8,
		"ETITLE_TYPE_MAX":               9,
	}
)

func (x ETitleType) Enum() *ETitleType {
	p := new(ETitleType)
	*p = x
	return p
}

func (x ETitleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETitleType) Descriptor() protoreflect.EnumDescriptor {
	return file_UserEvent_proto_enumTypes[2].Descriptor()
}

func (ETitleType) Type() protoreflect.EnumType {
	return &file_UserEvent_proto_enumTypes[2]
}

func (x ETitleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETitleType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETitleType(num)
	return nil
}

// Deprecated: Use ETitleType.Descriptor instead.
func (ETitleType) EnumDescriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{2}
}

type EDepositState int32

const (
	EDepositState_EDEPOSITSTAT_NONE    EDepositState = 0
	EDepositState_EDEPOSITSTAT_VALID   EDepositState = 1
	EDepositState_EDEPOSITSTAT_INVALID EDepositState = 2
)

// Enum value maps for EDepositState.
var (
	EDepositState_name = map[int32]string{
		0: "EDEPOSITSTAT_NONE",
		1: "EDEPOSITSTAT_VALID",
		2: "EDEPOSITSTAT_INVALID",
	}
	EDepositState_value = map[string]int32{
		"EDEPOSITSTAT_NONE":    0,
		"EDEPOSITSTAT_VALID":   1,
		"EDEPOSITSTAT_INVALID": 2,
	}
)

func (x EDepositState) Enum() *EDepositState {
	p := new(EDepositState)
	*p = x
	return p
}

func (x EDepositState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDepositState) Descriptor() protoreflect.EnumDescriptor {
	return file_UserEvent_proto_enumTypes[3].Descriptor()
}

func (EDepositState) Type() protoreflect.EnumType {
	return &file_UserEvent_proto_enumTypes[3]
}

func (x EDepositState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDepositState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDepositState(num)
	return nil
}

// Deprecated: Use EDepositState.Descriptor instead.
func (EDepositState) EnumDescriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{3}
}

type ESystemStringType int32

const (
	ESystemStringType_ESYSTEMSTRING_MIN  ESystemStringType = 0
	ESystemStringType_ESYSTEMSTRING_MEMO ESystemStringType = 1
)

// Enum value maps for ESystemStringType.
var (
	ESystemStringType_name = map[int32]string{
		0: "ESYSTEMSTRING_MIN",
		1: "ESYSTEMSTRING_MEMO",
	}
	ESystemStringType_value = map[string]int32{
		"ESYSTEMSTRING_MIN":  0,
		"ESYSTEMSTRING_MEMO": 1,
	}
)

func (x ESystemStringType) Enum() *ESystemStringType {
	p := new(ESystemStringType)
	*p = x
	return p
}

func (x ESystemStringType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemStringType) Descriptor() protoreflect.EnumDescriptor {
	return file_UserEvent_proto_enumTypes[4].Descriptor()
}

func (ESystemStringType) Type() protoreflect.EnumType {
	return &file_UserEvent_proto_enumTypes[4]
}

func (x ESystemStringType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemStringType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemStringType(num)
	return nil
}

// Deprecated: Use ESystemStringType.Descriptor instead.
func (ESystemStringType) EnumDescriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{4}
}

type EEventMailType int32

const (
	EEventMailType_EEVENTMAILTYPE_MIN     EEventMailType = 0
	EEventMailType_EEVENTMAILTYPE_DELCAHR EEventMailType = 1
)

// Enum value maps for EEventMailType.
var (
	EEventMailType_name = map[int32]string{
		0: "EEVENTMAILTYPE_MIN",
		1: "EEVENTMAILTYPE_DELCAHR",
	}
	EEventMailType_value = map[string]int32{
		"EEVENTMAILTYPE_MIN":     0,
		"EEVENTMAILTYPE_DELCAHR": 1,
	}
)

func (x EEventMailType) Enum() *EEventMailType {
	p := new(EEventMailType)
	*p = x
	return p
}

func (x EEventMailType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEventMailType) Descriptor() protoreflect.EnumDescriptor {
	return file_UserEvent_proto_enumTypes[5].Descriptor()
}

func (EEventMailType) Type() protoreflect.EnumType {
	return &file_UserEvent_proto_enumTypes[5]
}

func (x EEventMailType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEventMailType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEventMailType(num)
	return nil
}

// Deprecated: Use EEventMailType.Descriptor instead.
func (EEventMailType) EnumDescriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{5}
}

type EGiftState int32

const (
	EGiftState_EGIFTSTATE_INIT   EGiftState = 0
	EGiftState_EGIFTSTATE_ACTIVE EGiftState = 1
	EGiftState_EGIFTSTATE_REWARD EGiftState = 2
	EGiftState_EGIFTSTATE_EXPIRE EGiftState = 3
)

// Enum value maps for EGiftState.
var (
	EGiftState_name = map[int32]string{
		0: "EGIFTSTATE_INIT",
		1: "EGIFTSTATE_ACTIVE",
		2: "EGIFTSTATE_REWARD",
		3: "EGIFTSTATE_EXPIRE",
	}
	EGiftState_value = map[string]int32{
		"EGIFTSTATE_INIT":   0,
		"EGIFTSTATE_ACTIVE": 1,
		"EGIFTSTATE_REWARD": 2,
		"EGIFTSTATE_EXPIRE": 3,
	}
)

func (x EGiftState) Enum() *EGiftState {
	p := new(EGiftState)
	*p = x
	return p
}

func (x EGiftState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGiftState) Descriptor() protoreflect.EnumDescriptor {
	return file_UserEvent_proto_enumTypes[6].Descriptor()
}

func (EGiftState) Type() protoreflect.EnumType {
	return &file_UserEvent_proto_enumTypes[6]
}

func (x EGiftState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGiftState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGiftState(num)
	return nil
}

// Deprecated: Use EGiftState.Descriptor instead.
func (EGiftState) EnumDescriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{6}
}

type EConfigAction int32

const (
	EConfigAction_ECONFIGACTION_MIN    EConfigAction = 0
	EConfigAction_ECONFIGACTION_QUERY  EConfigAction = 1
	EConfigAction_ECONFIGACTION_ADD    EConfigAction = 2
	EConfigAction_ECONFIGACTION_MODIFY EConfigAction = 3
	EConfigAction_ECONFIGACTION_DELETE EConfigAction = 4
	EConfigAction_ECONFIGACTION_MAX    EConfigAction = 5
)

// Enum value maps for EConfigAction.
var (
	EConfigAction_name = map[int32]string{
		0: "ECONFIGACTION_MIN",
		1: "ECONFIGACTION_QUERY",
		2: "ECONFIGACTION_ADD",
		3: "ECONFIGACTION_MODIFY",
		4: "ECONFIGACTION_DELETE",
		5: "ECONFIGACTION_MAX",
	}
	EConfigAction_value = map[string]int32{
		"ECONFIGACTION_MIN":    0,
		"ECONFIGACTION_QUERY":  1,
		"ECONFIGACTION_ADD":    2,
		"ECONFIGACTION_MODIFY": 3,
		"ECONFIGACTION_DELETE": 4,
		"ECONFIGACTION_MAX":    5,
	}
)

func (x EConfigAction) Enum() *EConfigAction {
	p := new(EConfigAction)
	*p = x
	return p
}

func (x EConfigAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EConfigAction) Descriptor() protoreflect.EnumDescriptor {
	return file_UserEvent_proto_enumTypes[7].Descriptor()
}

func (EConfigAction) Type() protoreflect.EnumType {
	return &file_UserEvent_proto_enumTypes[7]
}

func (x EConfigAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EConfigAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EConfigAction(num)
	return nil
}

// Deprecated: Use EConfigAction.Descriptor instead.
func (EConfigAction) EnumDescriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{7}
}

type EDelayReliveMethod int32

const (
	EDelayReliveMethod_EDELAYRELIVE_MIN       EDelayReliveMethod = 0
	EDelayReliveMethod_EDELAYRELIVE_GVG_POINT EDelayReliveMethod = 1
	EDelayReliveMethod_EDELAYRELIVE_GVG_SAFE  EDelayReliveMethod = 2
)

// Enum value maps for EDelayReliveMethod.
var (
	EDelayReliveMethod_name = map[int32]string{
		0: "EDELAYRELIVE_MIN",
		1: "EDELAYRELIVE_GVG_POINT",
		2: "EDELAYRELIVE_GVG_SAFE",
	}
	EDelayReliveMethod_value = map[string]int32{
		"EDELAYRELIVE_MIN":       0,
		"EDELAYRELIVE_GVG_POINT": 1,
		"EDELAYRELIVE_GVG_SAFE":  2,
	}
)

func (x EDelayReliveMethod) Enum() *EDelayReliveMethod {
	p := new(EDelayReliveMethod)
	*p = x
	return p
}

func (x EDelayReliveMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDelayReliveMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_UserEvent_proto_enumTypes[8].Descriptor()
}

func (EDelayReliveMethod) Type() protoreflect.EnumType {
	return &file_UserEvent_proto_enumTypes[8]
}

func (x EDelayReliveMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDelayReliveMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDelayReliveMethod(num)
	return nil
}

// Deprecated: Use EDelayReliveMethod.Descriptor instead.
func (EDelayReliveMethod) EnumDescriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{8}
}

type FirstActionUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param       *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=1" json:"param,omitempty"`
	Firstaction *uint32     `protobuf:"varint,3,opt,name=firstaction,def=0" json:"firstaction,omitempty"`
}

// Default values for FirstActionUserEvent fields.
const (
	Default_FirstActionUserEvent_Cmd         = Command_USER_EVENT_PROTOCMD
	Default_FirstActionUserEvent_Param       = EventParam_USER_EVENT_FIRST_ACTION
	Default_FirstActionUserEvent_Firstaction = uint32(0)
)

func (x *FirstActionUserEvent) Reset() {
	*x = FirstActionUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstActionUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstActionUserEvent) ProtoMessage() {}

func (x *FirstActionUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstActionUserEvent.ProtoReflect.Descriptor instead.
func (*FirstActionUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{0}
}

func (x *FirstActionUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FirstActionUserEvent_Cmd
}

func (x *FirstActionUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FirstActionUserEvent_Param
}

func (x *FirstActionUserEvent) GetFirstaction() uint32 {
	if x != nil && x.Firstaction != nil {
		return *x.Firstaction
	}
	return Default_FirstActionUserEvent_Firstaction
}

type DamageNpcUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param   *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=2" json:"param,omitempty"`
	Npcguid *uint64     `protobuf:"varint,3,opt,name=npcguid,def=0" json:"npcguid,omitempty"`
	Userid  *uint64     `protobuf:"varint,4,opt,name=userid,def=0" json:"userid,omitempty"`
}

// Default values for DamageNpcUserEvent fields.
const (
	Default_DamageNpcUserEvent_Cmd     = Command_USER_EVENT_PROTOCMD
	Default_DamageNpcUserEvent_Param   = EventParam_USER_EVENT_ATTACK_NPC
	Default_DamageNpcUserEvent_Npcguid = uint64(0)
	Default_DamageNpcUserEvent_Userid  = uint64(0)
)

func (x *DamageNpcUserEvent) Reset() {
	*x = DamageNpcUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DamageNpcUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DamageNpcUserEvent) ProtoMessage() {}

func (x *DamageNpcUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DamageNpcUserEvent.ProtoReflect.Descriptor instead.
func (*DamageNpcUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{1}
}

func (x *DamageNpcUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DamageNpcUserEvent_Cmd
}

func (x *DamageNpcUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DamageNpcUserEvent_Param
}

func (x *DamageNpcUserEvent) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return Default_DamageNpcUserEvent_Npcguid
}

func (x *DamageNpcUserEvent) GetUserid() uint64 {
	if x != nil && x.Userid != nil {
		return *x.Userid
	}
	return Default_DamageNpcUserEvent_Userid
}

type TitleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TitleType  *ETitleType `protobuf:"varint,1,opt,name=title_type,json=titleType,enum=Cmd.ETitleType" json:"title_type,omitempty"`
	Id         *uint32     `protobuf:"varint,2,opt,name=id,def=0" json:"id,omitempty"`
	Createtime *uint32     `protobuf:"varint,3,opt,name=createtime,def=0" json:"createtime,omitempty"`
}

// Default values for TitleData fields.
const (
	Default_TitleData_Id         = uint32(0)
	Default_TitleData_Createtime = uint32(0)
)

func (x *TitleData) Reset() {
	*x = TitleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TitleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitleData) ProtoMessage() {}

func (x *TitleData) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitleData.ProtoReflect.Descriptor instead.
func (*TitleData) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{2}
}

func (x *TitleData) GetTitleType() ETitleType {
	if x != nil && x.TitleType != nil {
		return *x.TitleType
	}
	return ETitleType_ETITLE_TYPE_MIN
}

func (x *TitleData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_TitleData_Id
}

func (x *TitleData) GetCreatetime() uint32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return Default_TitleData_Createtime
}

type NewTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param     *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=3" json:"param,omitempty"`
	TitleData *TitleData  `protobuf:"bytes,3,opt,name=title_data,json=titleData" json:"title_data,omitempty"`
	Charid    *uint64     `protobuf:"varint,4,opt,name=charid" json:"charid,omitempty"`
}

// Default values for NewTitle fields.
const (
	Default_NewTitle_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_NewTitle_Param = EventParam_USER_EVENT_NEW_TITLE
)

func (x *NewTitle) Reset() {
	*x = NewTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTitle) ProtoMessage() {}

func (x *NewTitle) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTitle.ProtoReflect.Descriptor instead.
func (*NewTitle) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{3}
}

func (x *NewTitle) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NewTitle_Cmd
}

func (x *NewTitle) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NewTitle_Param
}

func (x *NewTitle) GetTitleData() *TitleData {
	if x != nil {
		return x.TitleData
	}
	return nil
}

func (x *NewTitle) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

type AllTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param      *EventParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=4" json:"param,omitempty"`
	TitleDatas []*TitleData `protobuf:"bytes,3,rep,name=title_datas,json=titleDatas" json:"title_datas,omitempty"`
}

// Default values for AllTitle fields.
const (
	Default_AllTitle_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_AllTitle_Param = EventParam_USER_EVENT_ALL_TITLE
)

func (x *AllTitle) Reset() {
	*x = AllTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTitle) ProtoMessage() {}

func (x *AllTitle) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTitle.ProtoReflect.Descriptor instead.
func (*AllTitle) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{4}
}

func (x *AllTitle) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AllTitle_Cmd
}

func (x *AllTitle) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AllTitle_Param
}

func (x *AllTitle) GetTitleDatas() []*TitleData {
	if x != nil {
		return x.TitleDatas
	}
	return nil
}

type UpdateRandomUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param      *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=5" json:"param,omitempty"`
	Beginindex *uint32     `protobuf:"varint,3,opt,name=beginindex,def=0" json:"beginindex,omitempty"`
	Endindex   *uint32     `protobuf:"varint,4,opt,name=endindex,def=0" json:"endindex,omitempty"`
	Randoms    []uint32    `protobuf:"varint,5,rep,name=randoms" json:"randoms,omitempty"`
}

// Default values for UpdateRandomUserEvent fields.
const (
	Default_UpdateRandomUserEvent_Cmd        = Command_USER_EVENT_PROTOCMD
	Default_UpdateRandomUserEvent_Param      = EventParam_USER_EVENT_UPDATE_RANDOM
	Default_UpdateRandomUserEvent_Beginindex = uint32(0)
	Default_UpdateRandomUserEvent_Endindex   = uint32(0)
)

func (x *UpdateRandomUserEvent) Reset() {
	*x = UpdateRandomUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRandomUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRandomUserEvent) ProtoMessage() {}

func (x *UpdateRandomUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRandomUserEvent.ProtoReflect.Descriptor instead.
func (*UpdateRandomUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateRandomUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateRandomUserEvent_Cmd
}

func (x *UpdateRandomUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateRandomUserEvent_Param
}

func (x *UpdateRandomUserEvent) GetBeginindex() uint32 {
	if x != nil && x.Beginindex != nil {
		return *x.Beginindex
	}
	return Default_UpdateRandomUserEvent_Beginindex
}

func (x *UpdateRandomUserEvent) GetEndindex() uint32 {
	if x != nil && x.Endindex != nil {
		return *x.Endindex
	}
	return Default_UpdateRandomUserEvent_Endindex
}

func (x *UpdateRandomUserEvent) GetRandoms() []uint32 {
	if x != nil {
		return x.Randoms
	}
	return nil
}

type BuffDamageUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param  *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=6" json:"param,omitempty"`
	Charid *uint64     `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Damage *int32      `protobuf:"varint,4,opt,name=damage,def=0" json:"damage,omitempty"`
	Etype  *DamageType `protobuf:"varint,5,opt,name=etype,enum=Cmd.DamageType,def=1" json:"etype,omitempty"`
	Fromid *uint64     `protobuf:"varint,6,opt,name=fromid,def=0" json:"fromid,omitempty"`
}

// Default values for BuffDamageUserEvent fields.
const (
	Default_BuffDamageUserEvent_Cmd    = Command_USER_EVENT_PROTOCMD
	Default_BuffDamageUserEvent_Param  = EventParam_USER_EVENT_BUFF_DAMAGE
	Default_BuffDamageUserEvent_Charid = uint64(0)
	Default_BuffDamageUserEvent_Damage = int32(0)
	Default_BuffDamageUserEvent_Etype  = DamageType_DAMAGE_TYPE_NORMAL
	Default_BuffDamageUserEvent_Fromid = uint64(0)
)

func (x *BuffDamageUserEvent) Reset() {
	*x = BuffDamageUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffDamageUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffDamageUserEvent) ProtoMessage() {}

func (x *BuffDamageUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffDamageUserEvent.ProtoReflect.Descriptor instead.
func (*BuffDamageUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{6}
}

func (x *BuffDamageUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuffDamageUserEvent_Cmd
}

func (x *BuffDamageUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuffDamageUserEvent_Param
}

func (x *BuffDamageUserEvent) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_BuffDamageUserEvent_Charid
}

func (x *BuffDamageUserEvent) GetDamage() int32 {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return Default_BuffDamageUserEvent_Damage
}

func (x *BuffDamageUserEvent) GetEtype() DamageType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_BuffDamageUserEvent_Etype
}

func (x *BuffDamageUserEvent) GetFromid() uint64 {
	if x != nil && x.Fromid != nil {
		return *x.Fromid
	}
	return Default_BuffDamageUserEvent_Fromid
}

type ChargeNtfUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param  *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=7" json:"param,omitempty"`
	Charid *uint64     `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Dataid *uint32     `protobuf:"varint,4,opt,name=dataid,def=0" json:"dataid,omitempty"`
}

// Default values for ChargeNtfUserEvent fields.
const (
	Default_ChargeNtfUserEvent_Cmd    = Command_USER_EVENT_PROTOCMD
	Default_ChargeNtfUserEvent_Param  = EventParam_USER_EVENT_CHARGE_NTF
	Default_ChargeNtfUserEvent_Charid = uint64(0)
	Default_ChargeNtfUserEvent_Dataid = uint32(0)
)

func (x *ChargeNtfUserEvent) Reset() {
	*x = ChargeNtfUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeNtfUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeNtfUserEvent) ProtoMessage() {}

func (x *ChargeNtfUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeNtfUserEvent.ProtoReflect.Descriptor instead.
func (*ChargeNtfUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{7}
}

func (x *ChargeNtfUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChargeNtfUserEvent_Cmd
}

func (x *ChargeNtfUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChargeNtfUserEvent_Param
}

func (x *ChargeNtfUserEvent) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_ChargeNtfUserEvent_Charid
}

func (x *ChargeNtfUserEvent) GetDataid() uint32 {
	if x != nil && x.Dataid != nil {
		return *x.Dataid
	}
	return Default_ChargeNtfUserEvent_Dataid
}

type DepositTypeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       *EDepositCardType `protobuf:"varint,1,opt,name=type,enum=Cmd.EDepositCardType" json:"type,omitempty"`
	Expiretime *uint32           `protobuf:"varint,2,opt,name=expiretime" json:"expiretime,omitempty"`
	Starttime  *uint32           `protobuf:"varint,3,opt,name=starttime" json:"starttime,omitempty"`
	State      *EDepositState    `protobuf:"varint,4,opt,name=state,enum=Cmd.EDepositState" json:"state,omitempty"`
	Invalid    *bool             `protobuf:"varint,5,opt,name=invalid,def=0" json:"invalid,omitempty"`
}

// Default values for DepositTypeData fields.
const (
	Default_DepositTypeData_Invalid = bool(false)
)

func (x *DepositTypeData) Reset() {
	*x = DepositTypeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositTypeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositTypeData) ProtoMessage() {}

func (x *DepositTypeData) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositTypeData.ProtoReflect.Descriptor instead.
func (*DepositTypeData) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{8}
}

func (x *DepositTypeData) GetType() EDepositCardType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EDepositCardType_ETITLE_TYPE_MONEY
}

func (x *DepositTypeData) GetExpiretime() uint32 {
	if x != nil && x.Expiretime != nil {
		return *x.Expiretime
	}
	return 0
}

func (x *DepositTypeData) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

func (x *DepositTypeData) GetState() EDepositState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return EDepositState_EDEPOSITSTAT_NONE
}

func (x *DepositTypeData) GetInvalid() bool {
	if x != nil && x.Invalid != nil {
		return *x.Invalid
	}
	return Default_DepositTypeData_Invalid
}

type DepositCardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid *uint32 `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	Isused *bool   `protobuf:"varint,2,opt,name=isused,def=0" json:"isused,omitempty"`
}

// Default values for DepositCardData fields.
const (
	Default_DepositCardData_Isused = bool(false)
)

func (x *DepositCardData) Reset() {
	*x = DepositCardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositCardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositCardData) ProtoMessage() {}

func (x *DepositCardData) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositCardData.ProtoReflect.Descriptor instead.
func (*DepositCardData) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{9}
}

func (x *DepositCardData) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *DepositCardData) GetIsused() bool {
	if x != nil && x.Isused != nil {
		return *x.Isused
	}
	return Default_DepositCardData_Isused
}

type ChargeQueryCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param        *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=8" json:"param,omitempty"`
	DataId       *uint32     `protobuf:"varint,3,opt,name=data_id,json=dataId" json:"data_id,omitempty"`
	Ret          *bool       `protobuf:"varint,4,opt,name=ret" json:"ret,omitempty"`
	ChargedCount *uint32     `protobuf:"varint,5,opt,name=charged_count,json=chargedCount" json:"charged_count,omitempty"`
}

// Default values for ChargeQueryCmd fields.
const (
	Default_ChargeQueryCmd_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_ChargeQueryCmd_Param = EventParam_USER_EVENT_CHARGE_QUERY
)

func (x *ChargeQueryCmd) Reset() {
	*x = ChargeQueryCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeQueryCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeQueryCmd) ProtoMessage() {}

func (x *ChargeQueryCmd) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeQueryCmd.ProtoReflect.Descriptor instead.
func (*ChargeQueryCmd) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{10}
}

func (x *ChargeQueryCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChargeQueryCmd_Cmd
}

func (x *ChargeQueryCmd) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChargeQueryCmd_Param
}

func (x *ChargeQueryCmd) GetDataId() uint32 {
	if x != nil && x.DataId != nil {
		return *x.DataId
	}
	return 0
}

func (x *ChargeQueryCmd) GetRet() bool {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return false
}

func (x *ChargeQueryCmd) GetChargedCount() uint32 {
	if x != nil && x.ChargedCount != nil {
		return *x.ChargedCount
	}
	return 0
}

type DepositCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param     *EventParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=9" json:"param,omitempty"`
	CardDatas []*DepositTypeData `protobuf:"bytes,3,rep,name=card_datas,json=cardDatas" json:"card_datas,omitempty"`
}

// Default values for DepositCardInfo fields.
const (
	Default_DepositCardInfo_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_DepositCardInfo_Param = EventParam_USER_EVENT_DEPOSIT_CARD_INFO
)

func (x *DepositCardInfo) Reset() {
	*x = DepositCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositCardInfo) ProtoMessage() {}

func (x *DepositCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositCardInfo.ProtoReflect.Descriptor instead.
func (*DepositCardInfo) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{11}
}

func (x *DepositCardInfo) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DepositCardInfo_Cmd
}

func (x *DepositCardInfo) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DepositCardInfo_Param
}

func (x *DepositCardInfo) GetCardDatas() []*DepositTypeData {
	if x != nil {
		return x.CardDatas
	}
	return nil
}

type DelTransformUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=10" json:"param,omitempty"`
}

// Default values for DelTransformUserEvent fields.
const (
	Default_DelTransformUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_DelTransformUserEvent_Param = EventParam_USER_EVENT_DEL_TRANSFORM
)

func (x *DelTransformUserEvent) Reset() {
	*x = DelTransformUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelTransformUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelTransformUserEvent) ProtoMessage() {}

func (x *DelTransformUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelTransformUserEvent.ProtoReflect.Descriptor instead.
func (*DelTransformUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{12}
}

func (x *DelTransformUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DelTransformUserEvent_Cmd
}

func (x *DelTransformUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DelTransformUserEvent_Param
}

type InviteCatFailUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=11" json:"param,omitempty"`
}

// Default values for InviteCatFailUserEvent fields.
const (
	Default_InviteCatFailUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_InviteCatFailUserEvent_Param = EventParam_USER_EVENT_INVITECAT_FAIL
)

func (x *InviteCatFailUserEvent) Reset() {
	*x = InviteCatFailUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteCatFailUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteCatFailUserEvent) ProtoMessage() {}

func (x *InviteCatFailUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteCatFailUserEvent.ProtoReflect.Descriptor instead.
func (*InviteCatFailUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{13}
}

func (x *InviteCatFailUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InviteCatFailUserEvent_Cmd
}

func (x *InviteCatFailUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InviteCatFailUserEvent_Param
}

type TrigNpcFuncUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param   *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=12" json:"param,omitempty"`
	Npcguid *uint64     `protobuf:"varint,3,req,name=npcguid" json:"npcguid,omitempty"`
	Funcid  *uint32     `protobuf:"varint,4,req,name=funcid" json:"funcid,omitempty"`
}

// Default values for TrigNpcFuncUserEvent fields.
const (
	Default_TrigNpcFuncUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_TrigNpcFuncUserEvent_Param = EventParam_USER_EVENT_NPC_FUNCTION
)

func (x *TrigNpcFuncUserEvent) Reset() {
	*x = TrigNpcFuncUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrigNpcFuncUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrigNpcFuncUserEvent) ProtoMessage() {}

func (x *TrigNpcFuncUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrigNpcFuncUserEvent.ProtoReflect.Descriptor instead.
func (*TrigNpcFuncUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{14}
}

func (x *TrigNpcFuncUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TrigNpcFuncUserEvent_Cmd
}

func (x *TrigNpcFuncUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TrigNpcFuncUserEvent_Param
}

func (x *TrigNpcFuncUserEvent) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return 0
}

func (x *TrigNpcFuncUserEvent) GetFuncid() uint32 {
	if x != nil && x.Funcid != nil {
		return *x.Funcid
	}
	return 0
}

type SystemStringUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=13" json:"param,omitempty"`
	Etype *ESystemStringType `protobuf:"varint,3,opt,name=etype,enum=Cmd.ESystemStringType,def=0" json:"etype,omitempty"`
}

// Default values for SystemStringUserEvent fields.
const (
	Default_SystemStringUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_SystemStringUserEvent_Param = EventParam_USER_EVENT_SYSTEM_STRING
	Default_SystemStringUserEvent_Etype = ESystemStringType_ESYSTEMSTRING_MIN
)

func (x *SystemStringUserEvent) Reset() {
	*x = SystemStringUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemStringUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStringUserEvent) ProtoMessage() {}

func (x *SystemStringUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStringUserEvent.ProtoReflect.Descriptor instead.
func (*SystemStringUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{15}
}

func (x *SystemStringUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SystemStringUserEvent_Cmd
}

func (x *SystemStringUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SystemStringUserEvent_Param
}

func (x *SystemStringUserEvent) GetEtype() ESystemStringType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_SystemStringUserEvent_Etype
}

type HandCatUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param   *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=14" json:"param,omitempty"`
	Catguid *uint64     `protobuf:"varint,3,req,name=catguid" json:"catguid,omitempty"`
	Breakup *bool       `protobuf:"varint,4,opt,name=breakup,def=0" json:"breakup,omitempty"`
}

// Default values for HandCatUserEvent fields.
const (
	Default_HandCatUserEvent_Cmd     = Command_USER_EVENT_PROTOCMD
	Default_HandCatUserEvent_Param   = EventParam_USER_EVENT_HAND_CAT
	Default_HandCatUserEvent_Breakup = bool(false)
)

func (x *HandCatUserEvent) Reset() {
	*x = HandCatUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandCatUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandCatUserEvent) ProtoMessage() {}

func (x *HandCatUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandCatUserEvent.ProtoReflect.Descriptor instead.
func (*HandCatUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{16}
}

func (x *HandCatUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HandCatUserEvent_Cmd
}

func (x *HandCatUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HandCatUserEvent_Param
}

func (x *HandCatUserEvent) GetCatguid() uint64 {
	if x != nil && x.Catguid != nil {
		return *x.Catguid
	}
	return 0
}

func (x *HandCatUserEvent) GetBreakup() bool {
	if x != nil && x.Breakup != nil {
		return *x.Breakup
	}
	return Default_HandCatUserEvent_Breakup
}

type ChangeTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param     *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=15" json:"param,omitempty"`
	TitleData *TitleData  `protobuf:"bytes,3,opt,name=title_data,json=titleData" json:"title_data,omitempty"`
	Charid    *uint64     `protobuf:"varint,4,opt,name=charid" json:"charid,omitempty"`
}

// Default values for ChangeTitle fields.
const (
	Default_ChangeTitle_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_ChangeTitle_Param = EventParam_USER_EVENT_CHANGE_TITLE
)

func (x *ChangeTitle) Reset() {
	*x = ChangeTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeTitle) ProtoMessage() {}

func (x *ChangeTitle) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeTitle.ProtoReflect.Descriptor instead.
func (*ChangeTitle) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{17}
}

func (x *ChangeTitle) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChangeTitle_Cmd
}

func (x *ChangeTitle) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChangeTitle_Param
}

func (x *ChangeTitle) GetTitleData() *TitleData {
	if x != nil {
		return x.TitleData
	}
	return nil
}

func (x *ChangeTitle) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

type ChargeCntInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataid     *uint32 `protobuf:"varint,1,opt,name=dataid" json:"dataid,omitempty"`
	Count      *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Limit      *uint32 `protobuf:"varint,3,opt,name=limit,def=0" json:"limit,omitempty"`
	Dailycount *uint32 `protobuf:"varint,4,opt,name=dailycount" json:"dailycount,omitempty"`
}

// Default values for ChargeCntInfo fields.
const (
	Default_ChargeCntInfo_Limit = uint32(0)
)

func (x *ChargeCntInfo) Reset() {
	*x = ChargeCntInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeCntInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeCntInfo) ProtoMessage() {}

func (x *ChargeCntInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeCntInfo.ProtoReflect.Descriptor instead.
func (*ChargeCntInfo) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{18}
}

func (x *ChargeCntInfo) GetDataid() uint32 {
	if x != nil && x.Dataid != nil {
		return *x.Dataid
	}
	return 0
}

func (x *ChargeCntInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *ChargeCntInfo) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return Default_ChargeCntInfo_Limit
}

func (x *ChargeCntInfo) GetDailycount() uint32 {
	if x != nil && x.Dailycount != nil {
		return *x.Dailycount
	}
	return 0
}

type QueryChargeCnt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=16" json:"param,omitempty"`
	Info  []*ChargeCntInfo `protobuf:"bytes,3,rep,name=info" json:"info,omitempty"`
}

// Default values for QueryChargeCnt fields.
const (
	Default_QueryChargeCnt_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_QueryChargeCnt_Param = EventParam_USER_EVENT_QUERY_CHARGE_CNT
)

func (x *QueryChargeCnt) Reset() {
	*x = QueryChargeCnt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChargeCnt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChargeCnt) ProtoMessage() {}

func (x *QueryChargeCnt) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChargeCnt.ProtoReflect.Descriptor instead.
func (*QueryChargeCnt) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{19}
}

func (x *QueryChargeCnt) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryChargeCnt_Cmd
}

func (x *QueryChargeCnt) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryChargeCnt_Param
}

func (x *QueryChargeCnt) GetInfo() []*ChargeCntInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type NTFMonthCardEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=17" json:"param,omitempty"`
}

// Default values for NTFMonthCardEnd fields.
const (
	Default_NTFMonthCardEnd_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_NTFMonthCardEnd_Param = EventParam_USER_EVENT_NTF_MONTHCARD_END
)

func (x *NTFMonthCardEnd) Reset() {
	*x = NTFMonthCardEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NTFMonthCardEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NTFMonthCardEnd) ProtoMessage() {}

func (x *NTFMonthCardEnd) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NTFMonthCardEnd.ProtoReflect.Descriptor instead.
func (*NTFMonthCardEnd) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{20}
}

func (x *NTFMonthCardEnd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NTFMonthCardEnd_Cmd
}

func (x *NTFMonthCardEnd) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NTFMonthCardEnd_Param
}

type LoveLetterUse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param    *EventParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=18" json:"param,omitempty"`
	Itemguid *string      `protobuf:"bytes,3,opt,name=itemguid" json:"itemguid,omitempty"`
	Targets  *uint64      `protobuf:"varint,4,opt,name=targets" json:"targets,omitempty"`
	Content  *string      `protobuf:"bytes,5,opt,name=content" json:"content,omitempty"`
	Type     *ELetterType `protobuf:"varint,6,opt,name=type,enum=Cmd.ELetterType,def=3" json:"type,omitempty"`
}

// Default values for LoveLetterUse fields.
const (
	Default_LoveLetterUse_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_LoveLetterUse_Param = EventParam_USER_EVENT_LOVELETTER_USE
	Default_LoveLetterUse_Type  = ELetterType_ELETTERTYPE_CHRISTMAS
)

func (x *LoveLetterUse) Reset() {
	*x = LoveLetterUse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoveLetterUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoveLetterUse) ProtoMessage() {}

func (x *LoveLetterUse) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoveLetterUse.ProtoReflect.Descriptor instead.
func (*LoveLetterUse) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{21}
}

func (x *LoveLetterUse) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LoveLetterUse_Cmd
}

func (x *LoveLetterUse) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LoveLetterUse_Param
}

func (x *LoveLetterUse) GetItemguid() string {
	if x != nil && x.Itemguid != nil {
		return *x.Itemguid
	}
	return ""
}

func (x *LoveLetterUse) GetTargets() uint64 {
	if x != nil && x.Targets != nil {
		return *x.Targets
	}
	return 0
}

func (x *LoveLetterUse) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *LoveLetterUse) GetType() ELetterType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_LoveLetterUse_Type
}

type ActivityCntItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activityid *uint32 `protobuf:"varint,1,opt,name=activityid" json:"activityid,omitempty"`
	Count      *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *ActivityCntItem) Reset() {
	*x = ActivityCntItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityCntItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityCntItem) ProtoMessage() {}

func (x *ActivityCntItem) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityCntItem.ProtoReflect.Descriptor instead.
func (*ActivityCntItem) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{22}
}

func (x *ActivityCntItem) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *ActivityCntItem) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type QueryActivityCnt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=19" json:"param,omitempty"`
	Info  []*ActivityCntItem `protobuf:"bytes,3,rep,name=info" json:"info,omitempty"`
}

// Default values for QueryActivityCnt fields.
const (
	Default_QueryActivityCnt_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_QueryActivityCnt_Param = EventParam_USER_EVENT_QUERY_ACTIVITY_CNT
)

func (x *QueryActivityCnt) Reset() {
	*x = QueryActivityCnt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryActivityCnt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryActivityCnt) ProtoMessage() {}

func (x *QueryActivityCnt) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryActivityCnt.ProtoReflect.Descriptor instead.
func (*QueryActivityCnt) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{23}
}

func (x *QueryActivityCnt) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryActivityCnt_Cmd
}

func (x *QueryActivityCnt) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryActivityCnt_Param
}

func (x *QueryActivityCnt) GetInfo() []*ActivityCntItem {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateActivityCnt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=20" json:"param,omitempty"`
	Info  *ActivityCntItem `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
}

// Default values for UpdateActivityCnt fields.
const (
	Default_UpdateActivityCnt_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_UpdateActivityCnt_Param = EventParam_USER_EVENT_UPDATE_ACTIVITY_CNT
)

func (x *UpdateActivityCnt) Reset() {
	*x = UpdateActivityCnt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateActivityCnt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateActivityCnt) ProtoMessage() {}

func (x *UpdateActivityCnt) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateActivityCnt.ProtoReflect.Descriptor instead.
func (*UpdateActivityCnt) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateActivityCnt) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateActivityCnt_Cmd
}

func (x *UpdateActivityCnt) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateActivityCnt_Param
}

func (x *UpdateActivityCnt) GetInfo() *ActivityCntItem {
	if x != nil {
		return x.Info
	}
	return nil
}

type VersionCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Id1     *uint32 `protobuf:"varint,2,opt,name=id1" json:"id1,omitempty"`
	Id2     *uint32 `protobuf:"varint,3,opt,name=id2" json:"id2,omitempty"`
}

func (x *VersionCardInfo) Reset() {
	*x = VersionCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionCardInfo) ProtoMessage() {}

func (x *VersionCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionCardInfo.ProtoReflect.Descriptor instead.
func (*VersionCardInfo) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{25}
}

func (x *VersionCardInfo) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *VersionCardInfo) GetId1() uint32 {
	if x != nil && x.Id1 != nil {
		return *x.Id1
	}
	return 0
}

func (x *VersionCardInfo) GetId2() uint32 {
	if x != nil && x.Id2 != nil {
		return *x.Id2
	}
	return 0
}

type NtfVersionCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=23" json:"param,omitempty"`
	Info  []*VersionCardInfo `protobuf:"bytes,3,rep,name=info" json:"info,omitempty"`
}

// Default values for NtfVersionCardInfo fields.
const (
	Default_NtfVersionCardInfo_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_NtfVersionCardInfo_Param = EventParam_USER_EVENT_NTF_VERSION_CARD
)

func (x *NtfVersionCardInfo) Reset() {
	*x = NtfVersionCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfVersionCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfVersionCardInfo) ProtoMessage() {}

func (x *NtfVersionCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfVersionCardInfo.ProtoReflect.Descriptor instead.
func (*NtfVersionCardInfo) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{26}
}

func (x *NtfVersionCardInfo) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfVersionCardInfo_Cmd
}

func (x *NtfVersionCardInfo) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfVersionCardInfo_Param
}

func (x *NtfVersionCardInfo) GetInfo() []*VersionCardInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type DieTimeCountEventCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=24" json:"param,omitempty"`
	Time  *uint32     `protobuf:"varint,3,opt,name=time,def=0" json:"time,omitempty"`
	Name  *string     `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

// Default values for DieTimeCountEventCmd fields.
const (
	Default_DieTimeCountEventCmd_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_DieTimeCountEventCmd_Param = EventParam_USER_EVENT_WAIT_RELIVE
	Default_DieTimeCountEventCmd_Time  = uint32(0)
)

func (x *DieTimeCountEventCmd) Reset() {
	*x = DieTimeCountEventCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DieTimeCountEventCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DieTimeCountEventCmd) ProtoMessage() {}

func (x *DieTimeCountEventCmd) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DieTimeCountEventCmd.ProtoReflect.Descriptor instead.
func (*DieTimeCountEventCmd) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{27}
}

func (x *DieTimeCountEventCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DieTimeCountEventCmd_Cmd
}

func (x *DieTimeCountEventCmd) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DieTimeCountEventCmd_Param
}

func (x *DieTimeCountEventCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_DieTimeCountEventCmd_Time
}

func (x *DieTimeCountEventCmd) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GetFirstShareRewardUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=22" json:"param,omitempty"`
}

// Default values for GetFirstShareRewardUserEvent fields.
const (
	Default_GetFirstShareRewardUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_GetFirstShareRewardUserEvent_Param = EventParam_USER_EVENT_GET_RECALL_SHARE_REWARD
)

func (x *GetFirstShareRewardUserEvent) Reset() {
	*x = GetFirstShareRewardUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFirstShareRewardUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFirstShareRewardUserEvent) ProtoMessage() {}

func (x *GetFirstShareRewardUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFirstShareRewardUserEvent.ProtoReflect.Descriptor instead.
func (*GetFirstShareRewardUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{28}
}

func (x *GetFirstShareRewardUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GetFirstShareRewardUserEvent_Cmd
}

func (x *GetFirstShareRewardUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GetFirstShareRewardUserEvent_Param
}

type QueryResetTimeEventCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param     *EventParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=25" json:"param,omitempty"`
	Etype     *EAERewardMode `protobuf:"varint,3,req,name=etype,enum=Cmd.EAERewardMode" json:"etype,omitempty"`
	Resettime *uint32        `protobuf:"varint,4,opt,name=resettime,def=0" json:"resettime,omitempty"`
}

// Default values for QueryResetTimeEventCmd fields.
const (
	Default_QueryResetTimeEventCmd_Cmd       = Command_USER_EVENT_PROTOCMD
	Default_QueryResetTimeEventCmd_Param     = EventParam_USER_EVENT_QUERY_RESETTIME
	Default_QueryResetTimeEventCmd_Resettime = uint32(0)
)

func (x *QueryResetTimeEventCmd) Reset() {
	*x = QueryResetTimeEventCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResetTimeEventCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResetTimeEventCmd) ProtoMessage() {}

func (x *QueryResetTimeEventCmd) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResetTimeEventCmd.ProtoReflect.Descriptor instead.
func (*QueryResetTimeEventCmd) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{29}
}

func (x *QueryResetTimeEventCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryResetTimeEventCmd_Cmd
}

func (x *QueryResetTimeEventCmd) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryResetTimeEventCmd_Param
}

func (x *QueryResetTimeEventCmd) GetEtype() EAERewardMode {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return EAERewardMode_EAEREWARDMODE_MIN
}

func (x *QueryResetTimeEventCmd) GetResettime() uint32 {
	if x != nil && x.Resettime != nil {
		return *x.Resettime
	}
	return Default_QueryResetTimeEventCmd_Resettime
}

type InOutActEventCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=26" json:"param,omitempty"`
	Actid *uint64     `protobuf:"varint,3,req,name=actid" json:"actid,omitempty"`
	Inout *bool       `protobuf:"varint,4,opt,name=inout,def=0" json:"inout,omitempty"`
}

// Default values for InOutActEventCmd fields.
const (
	Default_InOutActEventCmd_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_InOutActEventCmd_Param = EventParam_USER_EVENT_INOUT_ACT
	Default_InOutActEventCmd_Inout = bool(false)
)

func (x *InOutActEventCmd) Reset() {
	*x = InOutActEventCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InOutActEventCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InOutActEventCmd) ProtoMessage() {}

func (x *InOutActEventCmd) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InOutActEventCmd.ProtoReflect.Descriptor instead.
func (*InOutActEventCmd) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{30}
}

func (x *InOutActEventCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InOutActEventCmd_Cmd
}

func (x *InOutActEventCmd) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InOutActEventCmd_Param
}

func (x *InOutActEventCmd) GetActid() uint64 {
	if x != nil && x.Actid != nil {
		return *x.Actid
	}
	return 0
}

func (x *InOutActEventCmd) GetInout() bool {
	if x != nil && x.Inout != nil {
		return *x.Inout
	}
	return Default_InOutActEventCmd_Inout
}

type UserEventMailCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param   *EventParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=27" json:"param,omitempty"`
	EType   *EEventMailType `protobuf:"varint,3,opt,name=eType,enum=Cmd.EEventMailType,def=0" json:"eType,omitempty"`
	Param32 []uint32        `protobuf:"varint,4,rep,name=param32" json:"param32,omitempty"`
	Param64 []uint64        `protobuf:"varint,5,rep,name=param64" json:"param64,omitempty"`
}

// Default values for UserEventMailCmd fields.
const (
	Default_UserEventMailCmd_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_UserEventMailCmd_Param = EventParam_USER_EVENT_MAIL
	Default_UserEventMailCmd_EType = EEventMailType_EEVENTMAILTYPE_MIN
)

func (x *UserEventMailCmd) Reset() {
	*x = UserEventMailCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventMailCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventMailCmd) ProtoMessage() {}

func (x *UserEventMailCmd) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventMailCmd.ProtoReflect.Descriptor instead.
func (*UserEventMailCmd) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{31}
}

func (x *UserEventMailCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserEventMailCmd_Cmd
}

func (x *UserEventMailCmd) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserEventMailCmd_Param
}

func (x *UserEventMailCmd) GetEType() EEventMailType {
	if x != nil && x.EType != nil {
		return *x.EType
	}
	return Default_UserEventMailCmd_EType
}

func (x *UserEventMailCmd) GetParam32() []uint32 {
	if x != nil {
		return x.Param32
	}
	return nil
}

func (x *UserEventMailCmd) GetParam64() []uint64 {
	if x != nil {
		return x.Param64
	}
	return nil
}

type LevelupDeadUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=28" json:"param,omitempty"`
}

// Default values for LevelupDeadUserEvent fields.
const (
	Default_LevelupDeadUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_LevelupDeadUserEvent_Param = EventParam_USER_EVENT_LEVELUP_DEAD
)

func (x *LevelupDeadUserEvent) Reset() {
	*x = LevelupDeadUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelupDeadUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelupDeadUserEvent) ProtoMessage() {}

func (x *LevelupDeadUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelupDeadUserEvent.ProtoReflect.Descriptor instead.
func (*LevelupDeadUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{32}
}

func (x *LevelupDeadUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LevelupDeadUserEvent_Cmd
}

func (x *LevelupDeadUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LevelupDeadUserEvent_Param
}

type SwitchAutoBattleUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=29" json:"param,omitempty"`
	Open  *bool       `protobuf:"varint,3,opt,name=open,def=0" json:"open,omitempty"`
}

// Default values for SwitchAutoBattleUserEvent fields.
const (
	Default_SwitchAutoBattleUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_SwitchAutoBattleUserEvent_Param = EventParam_USER_EVENT_AUTOBATTLE
	Default_SwitchAutoBattleUserEvent_Open  = bool(false)
)

func (x *SwitchAutoBattleUserEvent) Reset() {
	*x = SwitchAutoBattleUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchAutoBattleUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchAutoBattleUserEvent) ProtoMessage() {}

func (x *SwitchAutoBattleUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchAutoBattleUserEvent.ProtoReflect.Descriptor instead.
func (*SwitchAutoBattleUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{33}
}

func (x *SwitchAutoBattleUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SwitchAutoBattleUserEvent_Cmd
}

func (x *SwitchAutoBattleUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SwitchAutoBattleUserEvent_Param
}

func (x *SwitchAutoBattleUserEvent) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return Default_SwitchAutoBattleUserEvent_Open
}

type GoActivityMapUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=30" json:"param,omitempty"`
	Actid *uint32     `protobuf:"varint,3,opt,name=actid,def=0" json:"actid,omitempty"`
	Mapid *uint32     `protobuf:"varint,4,opt,name=mapid,def=0" json:"mapid,omitempty"`
}

// Default values for GoActivityMapUserEvent fields.
const (
	Default_GoActivityMapUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_GoActivityMapUserEvent_Param = EventParam_USER_EVENT_ACTIVITY_MAP
	Default_GoActivityMapUserEvent_Actid = uint32(0)
	Default_GoActivityMapUserEvent_Mapid = uint32(0)
)

func (x *GoActivityMapUserEvent) Reset() {
	*x = GoActivityMapUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoActivityMapUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoActivityMapUserEvent) ProtoMessage() {}

func (x *GoActivityMapUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoActivityMapUserEvent.ProtoReflect.Descriptor instead.
func (*GoActivityMapUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{34}
}

func (x *GoActivityMapUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GoActivityMapUserEvent_Cmd
}

func (x *GoActivityMapUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GoActivityMapUserEvent_Param
}

func (x *GoActivityMapUserEvent) GetActid() uint32 {
	if x != nil && x.Actid != nil {
		return *x.Actid
	}
	return Default_GoActivityMapUserEvent_Actid
}

func (x *GoActivityMapUserEvent) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_GoActivityMapUserEvent_Mapid
}

type ActivityPointUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=31" json:"param,omitempty"`
}

// Default values for ActivityPointUserEvent fields.
const (
	Default_ActivityPointUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_ActivityPointUserEvent_Param = EventParam_USER_EVENT_ACTIVITY_POINT
)

func (x *ActivityPointUserEvent) Reset() {
	*x = ActivityPointUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityPointUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityPointUserEvent) ProtoMessage() {}

func (x *ActivityPointUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityPointUserEvent.ProtoReflect.Descriptor instead.
func (*ActivityPointUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{35}
}

func (x *ActivityPointUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ActivityPointUserEvent_Cmd
}

func (x *ActivityPointUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ActivityPointUserEvent_Param
}

type QueryFavoriteFriendUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param  *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=33" json:"param,omitempty"`
	Charid []uint64    `protobuf:"varint,3,rep,name=charid" json:"charid,omitempty"`
}

// Default values for QueryFavoriteFriendUserEvent fields.
const (
	Default_QueryFavoriteFriendUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_QueryFavoriteFriendUserEvent_Param = EventParam_USER_EVENT_QUERY_FAVORITE_FRIEND
)

func (x *QueryFavoriteFriendUserEvent) Reset() {
	*x = QueryFavoriteFriendUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFavoriteFriendUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFavoriteFriendUserEvent) ProtoMessage() {}

func (x *QueryFavoriteFriendUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFavoriteFriendUserEvent.ProtoReflect.Descriptor instead.
func (*QueryFavoriteFriendUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{36}
}

func (x *QueryFavoriteFriendUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryFavoriteFriendUserEvent_Cmd
}

func (x *QueryFavoriteFriendUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryFavoriteFriendUserEvent_Param
}

func (x *QueryFavoriteFriendUserEvent) GetCharid() []uint64 {
	if x != nil {
		return x.Charid
	}
	return nil
}

type UpdateFavoriteFriendUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param     *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=34" json:"param,omitempty"`
	Updateids []uint64    `protobuf:"varint,3,rep,name=updateids" json:"updateids,omitempty"`
	Delids    []uint64    `protobuf:"varint,4,rep,name=delids" json:"delids,omitempty"`
}

// Default values for UpdateFavoriteFriendUserEvent fields.
const (
	Default_UpdateFavoriteFriendUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_UpdateFavoriteFriendUserEvent_Param = EventParam_USER_EVENT_UPDATE_FAVORITE_FRIEND
)

func (x *UpdateFavoriteFriendUserEvent) Reset() {
	*x = UpdateFavoriteFriendUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFavoriteFriendUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFavoriteFriendUserEvent) ProtoMessage() {}

func (x *UpdateFavoriteFriendUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFavoriteFriendUserEvent.ProtoReflect.Descriptor instead.
func (*UpdateFavoriteFriendUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateFavoriteFriendUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateFavoriteFriendUserEvent_Cmd
}

func (x *UpdateFavoriteFriendUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateFavoriteFriendUserEvent_Param
}

func (x *UpdateFavoriteFriendUserEvent) GetUpdateids() []uint64 {
	if x != nil {
		return x.Updateids
	}
	return nil
}

func (x *UpdateFavoriteFriendUserEvent) GetDelids() []uint64 {
	if x != nil {
		return x.Delids
	}
	return nil
}

type ActionFavoriteFriendUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param  *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=35" json:"param,omitempty"`
	Addids []uint64    `protobuf:"varint,3,rep,name=addids" json:"addids,omitempty"`
	Delids []uint64    `protobuf:"varint,4,rep,name=delids" json:"delids,omitempty"`
}

// Default values for ActionFavoriteFriendUserEvent fields.
const (
	Default_ActionFavoriteFriendUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_ActionFavoriteFriendUserEvent_Param = EventParam_USER_EVENT_ACTION_FAVORITE_FRIEND
)

func (x *ActionFavoriteFriendUserEvent) Reset() {
	*x = ActionFavoriteFriendUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionFavoriteFriendUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionFavoriteFriendUserEvent) ProtoMessage() {}

func (x *ActionFavoriteFriendUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionFavoriteFriendUserEvent.ProtoReflect.Descriptor instead.
func (*ActionFavoriteFriendUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{38}
}

func (x *ActionFavoriteFriendUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ActionFavoriteFriendUserEvent_Cmd
}

func (x *ActionFavoriteFriendUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ActionFavoriteFriendUserEvent_Param
}

func (x *ActionFavoriteFriendUserEvent) GetAddids() []uint64 {
	if x != nil {
		return x.Addids
	}
	return nil
}

func (x *ActionFavoriteFriendUserEvent) GetDelids() []uint64 {
	if x != nil {
		return x.Delids
	}
	return nil
}

type SoundStoryUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param          *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=36" json:"param,omitempty"`
	Id             *uint32     `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Times          *uint32     `protobuf:"varint,4,opt,name=times,def=0" json:"times,omitempty"`
	Replace        *uint32     `protobuf:"varint,5,opt,name=replace,def=0" json:"replace,omitempty"`
	Forcestop      *bool       `protobuf:"varint,6,opt,name=forcestop,def=0" json:"forcestop,omitempty"`
	Bgmkeep        *bool       `protobuf:"varint,7,opt,name=bgmkeep,def=0" json:"bgmkeep,omitempty"`
	Replacecontext *string     `protobuf:"bytes,8,opt,name=replacecontext" json:"replacecontext,omitempty"`
}

// Default values for SoundStoryUserEvent fields.
const (
	Default_SoundStoryUserEvent_Cmd       = Command_USER_EVENT_PROTOCMD
	Default_SoundStoryUserEvent_Param     = EventParam_USER_EVENT_SOUND_STORY
	Default_SoundStoryUserEvent_Id        = uint32(0)
	Default_SoundStoryUserEvent_Times     = uint32(0)
	Default_SoundStoryUserEvent_Replace   = uint32(0)
	Default_SoundStoryUserEvent_Forcestop = bool(false)
	Default_SoundStoryUserEvent_Bgmkeep   = bool(false)
)

func (x *SoundStoryUserEvent) Reset() {
	*x = SoundStoryUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoundStoryUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundStoryUserEvent) ProtoMessage() {}

func (x *SoundStoryUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundStoryUserEvent.ProtoReflect.Descriptor instead.
func (*SoundStoryUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{39}
}

func (x *SoundStoryUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SoundStoryUserEvent_Cmd
}

func (x *SoundStoryUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SoundStoryUserEvent_Param
}

func (x *SoundStoryUserEvent) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_SoundStoryUserEvent_Id
}

func (x *SoundStoryUserEvent) GetTimes() uint32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return Default_SoundStoryUserEvent_Times
}

func (x *SoundStoryUserEvent) GetReplace() uint32 {
	if x != nil && x.Replace != nil {
		return *x.Replace
	}
	return Default_SoundStoryUserEvent_Replace
}

func (x *SoundStoryUserEvent) GetForcestop() bool {
	if x != nil && x.Forcestop != nil {
		return *x.Forcestop
	}
	return Default_SoundStoryUserEvent_Forcestop
}

func (x *SoundStoryUserEvent) GetBgmkeep() bool {
	if x != nil && x.Bgmkeep != nil {
		return *x.Bgmkeep
	}
	return Default_SoundStoryUserEvent_Bgmkeep
}

func (x *SoundStoryUserEvent) GetReplacecontext() string {
	if x != nil && x.Replacecontext != nil {
		return *x.Replacecontext
	}
	return ""
}

type ThemeDetailsUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=32" json:"param,omitempty"`
	Type  *uint32     `protobuf:"varint,3,opt,name=type,def=0" json:"type,omitempty"`
}

// Default values for ThemeDetailsUserEvent fields.
const (
	Default_ThemeDetailsUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_ThemeDetailsUserEvent_Param = EventParam_USER_EVENT_THEME_DETAILS
	Default_ThemeDetailsUserEvent_Type  = uint32(0)
)

func (x *ThemeDetailsUserEvent) Reset() {
	*x = ThemeDetailsUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThemeDetailsUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThemeDetailsUserEvent) ProtoMessage() {}

func (x *ThemeDetailsUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThemeDetailsUserEvent.ProtoReflect.Descriptor instead.
func (*ThemeDetailsUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{40}
}

func (x *ThemeDetailsUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ThemeDetailsUserEvent_Cmd
}

func (x *ThemeDetailsUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ThemeDetailsUserEvent_Param
}

func (x *ThemeDetailsUserEvent) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ThemeDetailsUserEvent_Type
}

type CameraActionUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param  *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=40" json:"param,omitempty"`
	Params *string     `protobuf:"bytes,3,opt,name=params" json:"params,omitempty"`
}

// Default values for CameraActionUserEvent fields.
const (
	Default_CameraActionUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_CameraActionUserEvent_Param = EventParam_USER_EVENT_CAMERA_ACTION
)

func (x *CameraActionUserEvent) Reset() {
	*x = CameraActionUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraActionUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraActionUserEvent) ProtoMessage() {}

func (x *CameraActionUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraActionUserEvent.ProtoReflect.Descriptor instead.
func (*CameraActionUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{41}
}

func (x *CameraActionUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CameraActionUserEvent_Cmd
}

func (x *CameraActionUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CameraActionUserEvent_Param
}

func (x *CameraActionUserEvent) GetParams() string {
	if x != nil && x.Params != nil {
		return *x.Params
	}
	return ""
}

type BifrostContributeItemUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=39" json:"param,omitempty"`
	Id    *uint32     `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Times *uint32     `protobuf:"varint,4,opt,name=times,def=0" json:"times,omitempty"`
}

// Default values for BifrostContributeItemUserEvent fields.
const (
	Default_BifrostContributeItemUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_BifrostContributeItemUserEvent_Param = EventParam_USER_EVENT_BIFROST_CONTRIBUTE_ITEM
	Default_BifrostContributeItemUserEvent_Id    = uint32(0)
	Default_BifrostContributeItemUserEvent_Times = uint32(0)
)

func (x *BifrostContributeItemUserEvent) Reset() {
	*x = BifrostContributeItemUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BifrostContributeItemUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BifrostContributeItemUserEvent) ProtoMessage() {}

func (x *BifrostContributeItemUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BifrostContributeItemUserEvent.ProtoReflect.Descriptor instead.
func (*BifrostContributeItemUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{42}
}

func (x *BifrostContributeItemUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BifrostContributeItemUserEvent_Cmd
}

func (x *BifrostContributeItemUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BifrostContributeItemUserEvent_Param
}

func (x *BifrostContributeItemUserEvent) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_BifrostContributeItemUserEvent_Id
}

func (x *BifrostContributeItemUserEvent) GetTimes() uint32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return Default_BifrostContributeItemUserEvent_Times
}

type RobotOffBattleUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param       *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=41" json:"param,omitempty"`
	Inplace     *bool       `protobuf:"varint,3,opt,name=inplace" json:"inplace,omitempty"`
	ProtectTeam *bool       `protobuf:"varint,4,opt,name=protect_team,json=protectTeam" json:"protect_team,omitempty"`
	Monsterids  []uint32    `protobuf:"varint,5,rep,name=monsterids" json:"monsterids,omitempty"`
}

// Default values for RobotOffBattleUserEvent fields.
const (
	Default_RobotOffBattleUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_RobotOffBattleUserEvent_Param = EventParam_USER_EVENT_ROBOT_OFFBATTLE
)

func (x *RobotOffBattleUserEvent) Reset() {
	*x = RobotOffBattleUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotOffBattleUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotOffBattleUserEvent) ProtoMessage() {}

func (x *RobotOffBattleUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotOffBattleUserEvent.ProtoReflect.Descriptor instead.
func (*RobotOffBattleUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{43}
}

func (x *RobotOffBattleUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RobotOffBattleUserEvent_Cmd
}

func (x *RobotOffBattleUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RobotOffBattleUserEvent_Param
}

func (x *RobotOffBattleUserEvent) GetInplace() bool {
	if x != nil && x.Inplace != nil {
		return *x.Inplace
	}
	return false
}

func (x *RobotOffBattleUserEvent) GetProtectTeam() bool {
	if x != nil && x.ProtectTeam != nil {
		return *x.ProtectTeam
	}
	return false
}

func (x *RobotOffBattleUserEvent) GetMonsterids() []uint32 {
	if x != nil {
		return x.Monsterids
	}
	return nil
}

type QueryAccChargeCntReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=37" json:"param,omitempty"`
	Infos []*ChargeCntInfo `protobuf:"bytes,3,rep,name=infos" json:"infos,omitempty"`
}

// Default values for QueryAccChargeCntReward fields.
const (
	Default_QueryAccChargeCntReward_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_QueryAccChargeCntReward_Param = EventParam_USER_EVENT_CHARGE_ACC_CNT
)

func (x *QueryAccChargeCntReward) Reset() {
	*x = QueryAccChargeCntReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAccChargeCntReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAccChargeCntReward) ProtoMessage() {}

func (x *QueryAccChargeCntReward) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAccChargeCntReward.ProtoReflect.Descriptor instead.
func (*QueryAccChargeCntReward) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{44}
}

func (x *QueryAccChargeCntReward) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryAccChargeCntReward_Cmd
}

func (x *QueryAccChargeCntReward) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryAccChargeCntReward_Param
}

func (x *QueryAccChargeCntReward) GetInfos() []*ChargeCntInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type ChargeSdkRequestUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd             *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param           *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=42" json:"param,omitempty"`
	Dataid          *uint32     `protobuf:"varint,3,opt,name=dataid" json:"dataid,omitempty"`
	ClientTimestamp *uint32     `protobuf:"varint,4,opt,name=client_timestamp,json=clientTimestamp" json:"client_timestamp,omitempty"`
}

// Default values for ChargeSdkRequestUserEvent fields.
const (
	Default_ChargeSdkRequestUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_ChargeSdkRequestUserEvent_Param = EventParam_USER_EVENT_CHARGE_SDK_REQUEST
)

func (x *ChargeSdkRequestUserEvent) Reset() {
	*x = ChargeSdkRequestUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeSdkRequestUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeSdkRequestUserEvent) ProtoMessage() {}

func (x *ChargeSdkRequestUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeSdkRequestUserEvent.ProtoReflect.Descriptor instead.
func (*ChargeSdkRequestUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{45}
}

func (x *ChargeSdkRequestUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChargeSdkRequestUserEvent_Cmd
}

func (x *ChargeSdkRequestUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChargeSdkRequestUserEvent_Param
}

func (x *ChargeSdkRequestUserEvent) GetDataid() uint32 {
	if x != nil && x.Dataid != nil {
		return *x.Dataid
	}
	return 0
}

func (x *ChargeSdkRequestUserEvent) GetClientTimestamp() uint32 {
	if x != nil && x.ClientTimestamp != nil {
		return *x.ClientTimestamp
	}
	return 0
}

type ChargeSdkReplyUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd             *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param           *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=43" json:"param,omitempty"`
	Dataid          *uint32     `protobuf:"varint,3,opt,name=dataid" json:"dataid,omitempty"`
	ClientTimestamp *uint32     `protobuf:"varint,4,opt,name=client_timestamp,json=clientTimestamp" json:"client_timestamp,omitempty"`
	Success         *bool       `protobuf:"varint,5,opt,name=success" json:"success,omitempty"`
}

// Default values for ChargeSdkReplyUserEvent fields.
const (
	Default_ChargeSdkReplyUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_ChargeSdkReplyUserEvent_Param = EventParam_USER_EVENT_CHARGE_SDK_REPLY
)

func (x *ChargeSdkReplyUserEvent) Reset() {
	*x = ChargeSdkReplyUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeSdkReplyUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeSdkReplyUserEvent) ProtoMessage() {}

func (x *ChargeSdkReplyUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeSdkReplyUserEvent.ProtoReflect.Descriptor instead.
func (*ChargeSdkReplyUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{46}
}

func (x *ChargeSdkReplyUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChargeSdkReplyUserEvent_Cmd
}

func (x *ChargeSdkReplyUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChargeSdkReplyUserEvent_Param
}

func (x *ChargeSdkReplyUserEvent) GetDataid() uint32 {
	if x != nil && x.Dataid != nil {
		return *x.Dataid
	}
	return 0
}

func (x *ChargeSdkReplyUserEvent) GetClientTimestamp() uint32 {
	if x != nil && x.ClientTimestamp != nil {
		return *x.ClientTimestamp
	}
	return 0
}

func (x *ChargeSdkReplyUserEvent) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type ClientAIData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eventid *uint32  `protobuf:"varint,1,opt,name=eventid" json:"eventid,omitempty"`
	Param32 []uint32 `protobuf:"varint,2,rep,name=param32" json:"param32,omitempty"`
	Param64 []uint64 `protobuf:"varint,3,rep,name=param64" json:"param64,omitempty"`
	Guid    *uint32  `protobuf:"varint,4,opt,name=guid" json:"guid,omitempty"`
}

func (x *ClientAIData) Reset() {
	*x = ClientAIData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientAIData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientAIData) ProtoMessage() {}

func (x *ClientAIData) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientAIData.ProtoReflect.Descriptor instead.
func (*ClientAIData) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{47}
}

func (x *ClientAIData) GetEventid() uint32 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return 0
}

func (x *ClientAIData) GetParam32() []uint32 {
	if x != nil {
		return x.Param32
	}
	return nil
}

func (x *ClientAIData) GetParam64() []uint64 {
	if x != nil {
		return x.Param64
	}
	return nil
}

func (x *ClientAIData) GetGuid() uint32 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return 0
}

type ClientAISyncUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param  *EventParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=44" json:"param,omitempty"`
	Charid *uint64         `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Aidata []*ClientAIData `protobuf:"bytes,4,rep,name=aidata" json:"aidata,omitempty"`
}

// Default values for ClientAISyncUserEvent fields.
const (
	Default_ClientAISyncUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_ClientAISyncUserEvent_Param = EventParam_USER_EVENT_CLIENT_AI_SYNC
)

func (x *ClientAISyncUserEvent) Reset() {
	*x = ClientAISyncUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientAISyncUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientAISyncUserEvent) ProtoMessage() {}

func (x *ClientAISyncUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientAISyncUserEvent.ProtoReflect.Descriptor instead.
func (*ClientAISyncUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{48}
}

func (x *ClientAISyncUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClientAISyncUserEvent_Cmd
}

func (x *ClientAISyncUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClientAISyncUserEvent_Param
}

func (x *ClientAISyncUserEvent) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *ClientAISyncUserEvent) GetAidata() []*ClientAIData {
	if x != nil {
		return x.Aidata
	}
	return nil
}

type ClientAIUpdateUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param  *EventParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=45" json:"param,omitempty"`
	Charid *uint64       `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Aidata *ClientAIData `protobuf:"bytes,4,opt,name=aidata" json:"aidata,omitempty"`
	Del    *bool         `protobuf:"varint,5,opt,name=del" json:"del,omitempty"`
}

// Default values for ClientAIUpdateUserEvent fields.
const (
	Default_ClientAIUpdateUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_ClientAIUpdateUserEvent_Param = EventParam_USER_EVENT_CLIENT_AI_UPDATE
)

func (x *ClientAIUpdateUserEvent) Reset() {
	*x = ClientAIUpdateUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientAIUpdateUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientAIUpdateUserEvent) ProtoMessage() {}

func (x *ClientAIUpdateUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientAIUpdateUserEvent.ProtoReflect.Descriptor instead.
func (*ClientAIUpdateUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{49}
}

func (x *ClientAIUpdateUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClientAIUpdateUserEvent_Cmd
}

func (x *ClientAIUpdateUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClientAIUpdateUserEvent_Param
}

func (x *ClientAIUpdateUserEvent) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *ClientAIUpdateUserEvent) GetAidata() *ClientAIData {
	if x != nil {
		return x.Aidata
	}
	return nil
}

func (x *ClientAIUpdateUserEvent) GetDel() bool {
	if x != nil && x.Del != nil {
		return *x.Del
	}
	return false
}

type GiftCodeExchangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=46" json:"param,omitempty"`
	Code  *string     `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
}

// Default values for GiftCodeExchangeEvent fields.
const (
	Default_GiftCodeExchangeEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_GiftCodeExchangeEvent_Param = EventParam_USER_EVENT_GIFTCODE_EXCHANGE
)

func (x *GiftCodeExchangeEvent) Reset() {
	*x = GiftCodeExchangeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftCodeExchangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftCodeExchangeEvent) ProtoMessage() {}

func (x *GiftCodeExchangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftCodeExchangeEvent.ProtoReflect.Descriptor instead.
func (*GiftCodeExchangeEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{50}
}

func (x *GiftCodeExchangeEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GiftCodeExchangeEvent_Cmd
}

func (x *GiftCodeExchangeEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GiftCodeExchangeEvent_Param
}

func (x *GiftCodeExchangeEvent) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

type SetHideOtherCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param  *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=47" json:"param,omitempty"`
	Hideid *uint32     `protobuf:"varint,3,opt,name=hideid,def=0" json:"hideid,omitempty"`
}

// Default values for SetHideOtherCmd fields.
const (
	Default_SetHideOtherCmd_Cmd    = Command_USER_EVENT_PROTOCMD
	Default_SetHideOtherCmd_Param  = EventParam_USER_EVENT_HIDE_OTHER_APPEARANCE
	Default_SetHideOtherCmd_Hideid = uint32(0)
)

func (x *SetHideOtherCmd) Reset() {
	*x = SetHideOtherCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHideOtherCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHideOtherCmd) ProtoMessage() {}

func (x *SetHideOtherCmd) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHideOtherCmd.ProtoReflect.Descriptor instead.
func (*SetHideOtherCmd) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{51}
}

func (x *SetHideOtherCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SetHideOtherCmd_Cmd
}

func (x *SetHideOtherCmd) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SetHideOtherCmd_Param
}

func (x *SetHideOtherCmd) GetHideid() uint32 {
	if x != nil && x.Hideid != nil {
		return *x.Hideid
	}
	return Default_SetHideOtherCmd_Hideid
}

type GiftInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *uint32     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Time  *uint32     `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	State *EGiftState `protobuf:"varint,3,opt,name=state,enum=Cmd.EGiftState" json:"state,omitempty"`
}

func (x *GiftInfo) Reset() {
	*x = GiftInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftInfo) ProtoMessage() {}

func (x *GiftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftInfo.ProtoReflect.Descriptor instead.
func (*GiftInfo) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{52}
}

func (x *GiftInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GiftInfo) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *GiftInfo) GetState() EGiftState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return EGiftState_EGIFTSTATE_INIT
}

type GiftEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *uint32 `protobuf:"varint,1,opt,name=event" json:"event,omitempty"`
	Count *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *GiftEvent) Reset() {
	*x = GiftEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftEvent) ProtoMessage() {}

func (x *GiftEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftEvent.ProtoReflect.Descriptor instead.
func (*GiftEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{53}
}

func (x *GiftEvent) GetEvent() uint32 {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return 0
}

func (x *GiftEvent) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type GiftTimeLimitNtfUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=48" json:"param,omitempty"`
	Infos []*GiftInfo `protobuf:"bytes,3,rep,name=infos" json:"infos,omitempty"`
}

// Default values for GiftTimeLimitNtfUserEvent fields.
const (
	Default_GiftTimeLimitNtfUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_GiftTimeLimitNtfUserEvent_Param = EventParam_USER_EVENT_GIFT_TIMELIMIT_NTF
)

func (x *GiftTimeLimitNtfUserEvent) Reset() {
	*x = GiftTimeLimitNtfUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftTimeLimitNtfUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftTimeLimitNtfUserEvent) ProtoMessage() {}

func (x *GiftTimeLimitNtfUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftTimeLimitNtfUserEvent.ProtoReflect.Descriptor instead.
func (*GiftTimeLimitNtfUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{54}
}

func (x *GiftTimeLimitNtfUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GiftTimeLimitNtfUserEvent_Cmd
}

func (x *GiftTimeLimitNtfUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GiftTimeLimitNtfUserEvent_Param
}

func (x *GiftTimeLimitNtfUserEvent) GetInfos() []*GiftInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GiftTimeLimitBuyUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=49" json:"param,omitempty"`
	Id    *uint32     `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

// Default values for GiftTimeLimitBuyUserEvent fields.
const (
	Default_GiftTimeLimitBuyUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_GiftTimeLimitBuyUserEvent_Param = EventParam_USER_EVENT_GIFT_TIMELIMIT_BUY
)

func (x *GiftTimeLimitBuyUserEvent) Reset() {
	*x = GiftTimeLimitBuyUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftTimeLimitBuyUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftTimeLimitBuyUserEvent) ProtoMessage() {}

func (x *GiftTimeLimitBuyUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftTimeLimitBuyUserEvent.ProtoReflect.Descriptor instead.
func (*GiftTimeLimitBuyUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{55}
}

func (x *GiftTimeLimitBuyUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GiftTimeLimitBuyUserEvent_Cmd
}

func (x *GiftTimeLimitBuyUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GiftTimeLimitBuyUserEvent_Param
}

func (x *GiftTimeLimitBuyUserEvent) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type GiftTimeLimitActiveUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=50" json:"param,omitempty"`
	Id    *uint32     `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

// Default values for GiftTimeLimitActiveUserEvent fields.
const (
	Default_GiftTimeLimitActiveUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_GiftTimeLimitActiveUserEvent_Param = EventParam_USER_EVENT_GIFT_TIMELIMIT_ACTIVE
)

func (x *GiftTimeLimitActiveUserEvent) Reset() {
	*x = GiftTimeLimitActiveUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftTimeLimitActiveUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftTimeLimitActiveUserEvent) ProtoMessage() {}

func (x *GiftTimeLimitActiveUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftTimeLimitActiveUserEvent.ProtoReflect.Descriptor instead.
func (*GiftTimeLimitActiveUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{56}
}

func (x *GiftTimeLimitActiveUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GiftTimeLimitActiveUserEvent_Cmd
}

func (x *GiftTimeLimitActiveUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GiftTimeLimitActiveUserEvent_Param
}

func (x *GiftTimeLimitActiveUserEvent) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type MultiCutScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *uint32      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Mapid   *uint32      `protobuf:"varint,2,opt,name=mapid" json:"mapid,omitempty"`
	Questid *uint32      `protobuf:"varint,3,opt,name=questid" json:"questid,omitempty"`
	Param   *ConfigParam `protobuf:"bytes,4,opt,name=param" json:"param,omitempty"`
}

func (x *MultiCutScene) Reset() {
	*x = MultiCutScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiCutScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCutScene) ProtoMessage() {}

func (x *MultiCutScene) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCutScene.ProtoReflect.Descriptor instead.
func (*MultiCutScene) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{57}
}

func (x *MultiCutScene) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MultiCutScene) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return 0
}

func (x *MultiCutScene) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return 0
}

func (x *MultiCutScene) GetParam() *ConfigParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type MultiCutSceneUpdateUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param   *EventParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=55" json:"param,omitempty"`
	Updates []*MultiCutScene `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
	Dels    []uint32         `protobuf:"varint,4,rep,name=dels" json:"dels,omitempty"`
}

// Default values for MultiCutSceneUpdateUserEvent fields.
const (
	Default_MultiCutSceneUpdateUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_MultiCutSceneUpdateUserEvent_Param = EventParam_USER_EVENT_MULTI_CUTSCENE_UPDATE
)

func (x *MultiCutSceneUpdateUserEvent) Reset() {
	*x = MultiCutSceneUpdateUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiCutSceneUpdateUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCutSceneUpdateUserEvent) ProtoMessage() {}

func (x *MultiCutSceneUpdateUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCutSceneUpdateUserEvent.ProtoReflect.Descriptor instead.
func (*MultiCutSceneUpdateUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{58}
}

func (x *MultiCutSceneUpdateUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MultiCutSceneUpdateUserEvent_Cmd
}

func (x *MultiCutSceneUpdateUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MultiCutSceneUpdateUserEvent_Param
}

func (x *MultiCutSceneUpdateUserEvent) GetUpdates() []*MultiCutScene {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *MultiCutSceneUpdateUserEvent) GetDels() []uint32 {
	if x != nil {
		return x.Dels
	}
	return nil
}

type PolicyUpdateUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=56" json:"param,omitempty"`
	Tag   *uint32     `protobuf:"varint,3,opt,name=tag" json:"tag,omitempty"`
}

// Default values for PolicyUpdateUserEvent fields.
const (
	Default_PolicyUpdateUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_PolicyUpdateUserEvent_Param = EventParam_USER_EVENT_POLICY_UPDATE
)

func (x *PolicyUpdateUserEvent) Reset() {
	*x = PolicyUpdateUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyUpdateUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyUpdateUserEvent) ProtoMessage() {}

func (x *PolicyUpdateUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyUpdateUserEvent.ProtoReflect.Descriptor instead.
func (*PolicyUpdateUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{59}
}

func (x *PolicyUpdateUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PolicyUpdateUserEvent_Cmd
}

func (x *PolicyUpdateUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PolicyUpdateUserEvent_Param
}

func (x *PolicyUpdateUserEvent) GetTag() uint32 {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return 0
}

type PolicyAgreeUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=57" json:"param,omitempty"`
}

// Default values for PolicyAgreeUserEvent fields.
const (
	Default_PolicyAgreeUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_PolicyAgreeUserEvent_Param = EventParam_USER_EVENT_POLICY_AGREE
)

func (x *PolicyAgreeUserEvent) Reset() {
	*x = PolicyAgreeUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyAgreeUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyAgreeUserEvent) ProtoMessage() {}

func (x *PolicyAgreeUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyAgreeUserEvent.ProtoReflect.Descriptor instead.
func (*PolicyAgreeUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{60}
}

func (x *PolicyAgreeUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PolicyAgreeUserEvent_Cmd
}

func (x *PolicyAgreeUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PolicyAgreeUserEvent_Param
}

type ShowSceneObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param    *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=58" json:"param,omitempty"`
	Mapid    *uint32     `protobuf:"varint,3,opt,name=mapid,def=0" json:"mapid,omitempty"`
	Hide     *bool       `protobuf:"varint,4,opt,name=hide,def=0" json:"hide,omitempty"`
	Npcid    []uint32    `protobuf:"varint,5,rep,name=npcid" json:"npcid,omitempty"`
	Objectid []uint32    `protobuf:"varint,6,rep,name=objectid" json:"objectid,omitempty"`
}

// Default values for ShowSceneObject fields.
const (
	Default_ShowSceneObject_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_ShowSceneObject_Param = EventParam_USER_EVENT_SHOW_SCENE_OBJECT
	Default_ShowSceneObject_Mapid = uint32(0)
	Default_ShowSceneObject_Hide  = bool(false)
)

func (x *ShowSceneObject) Reset() {
	*x = ShowSceneObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowSceneObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowSceneObject) ProtoMessage() {}

func (x *ShowSceneObject) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowSceneObject.ProtoReflect.Descriptor instead.
func (*ShowSceneObject) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{61}
}

func (x *ShowSceneObject) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ShowSceneObject_Cmd
}

func (x *ShowSceneObject) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ShowSceneObject_Param
}

func (x *ShowSceneObject) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_ShowSceneObject_Mapid
}

func (x *ShowSceneObject) GetHide() bool {
	if x != nil && x.Hide != nil {
		return *x.Hide
	}
	return Default_ShowSceneObject_Hide
}

func (x *ShowSceneObject) GetNpcid() []uint32 {
	if x != nil {
		return x.Npcid
	}
	return nil
}

func (x *ShowSceneObject) GetObjectid() []uint32 {
	if x != nil {
		return x.Objectid
	}
	return nil
}

type DoubleAcionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param    *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=59" json:"param,omitempty"`
	Userid   *uint64     `protobuf:"varint,3,opt,name=userid,def=0" json:"userid,omitempty"`
	Actionid *uint32     `protobuf:"varint,4,opt,name=actionid,def=0" json:"actionid,omitempty"`
}

// Default values for DoubleAcionEvent fields.
const (
	Default_DoubleAcionEvent_Cmd      = Command_USER_EVENT_PROTOCMD
	Default_DoubleAcionEvent_Param    = EventParam_USER_EVENT_DOUBLE_ACTION
	Default_DoubleAcionEvent_Userid   = uint64(0)
	Default_DoubleAcionEvent_Actionid = uint32(0)
)

func (x *DoubleAcionEvent) Reset() {
	*x = DoubleAcionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleAcionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleAcionEvent) ProtoMessage() {}

func (x *DoubleAcionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleAcionEvent.ProtoReflect.Descriptor instead.
func (*DoubleAcionEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{62}
}

func (x *DoubleAcionEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DoubleAcionEvent_Cmd
}

func (x *DoubleAcionEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DoubleAcionEvent_Param
}

func (x *DoubleAcionEvent) GetUserid() uint64 {
	if x != nil && x.Userid != nil {
		return *x.Userid
	}
	return Default_DoubleAcionEvent_Userid
}

func (x *DoubleAcionEvent) GetActionid() uint32 {
	if x != nil && x.Actionid != nil {
		return *x.Actionid
	}
	return Default_DoubleAcionEvent_Actionid
}

type BeginMonitorUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param  *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=60" json:"param,omitempty"`
	Charid *uint64     `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
}

// Default values for BeginMonitorUserEvent fields.
const (
	Default_BeginMonitorUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_BeginMonitorUserEvent_Param = EventParam_USER_EVENT_MONITOR_BEGIN
)

func (x *BeginMonitorUserEvent) Reset() {
	*x = BeginMonitorUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginMonitorUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginMonitorUserEvent) ProtoMessage() {}

func (x *BeginMonitorUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginMonitorUserEvent.ProtoReflect.Descriptor instead.
func (*BeginMonitorUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{63}
}

func (x *BeginMonitorUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BeginMonitorUserEvent_Cmd
}

func (x *BeginMonitorUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BeginMonitorUserEvent_Param
}

func (x *BeginMonitorUserEvent) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

type StopMonitorUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=61" json:"param,omitempty"`
}

// Default values for StopMonitorUserEvent fields.
const (
	Default_StopMonitorUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_StopMonitorUserEvent_Param = EventParam_USER_EVENT_MONITOR_STOP
)

func (x *StopMonitorUserEvent) Reset() {
	*x = StopMonitorUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopMonitorUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopMonitorUserEvent) ProtoMessage() {}

func (x *StopMonitorUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopMonitorUserEvent.ProtoReflect.Descriptor instead.
func (*StopMonitorUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{64}
}

func (x *StopMonitorUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StopMonitorUserEvent_Cmd
}

func (x *StopMonitorUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StopMonitorUserEvent_Param
}

type StopMonitorRetUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=65" json:"param,omitempty"`
}

// Default values for StopMonitorRetUserEvent fields.
const (
	Default_StopMonitorRetUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_StopMonitorRetUserEvent_Param = EventParam_USER_EVENT_MONITOR_STOP_RET
)

func (x *StopMonitorRetUserEvent) Reset() {
	*x = StopMonitorRetUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopMonitorRetUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopMonitorRetUserEvent) ProtoMessage() {}

func (x *StopMonitorRetUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopMonitorRetUserEvent.ProtoReflect.Descriptor instead.
func (*StopMonitorRetUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{65}
}

func (x *StopMonitorRetUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StopMonitorRetUserEvent_Cmd
}

func (x *StopMonitorRetUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StopMonitorRetUserEvent_Param
}

type MonitorGoToMapUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param         *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=62" json:"param,omitempty"`
	MonitorCharid *uint64     `protobuf:"varint,3,opt,name=monitor_charid,json=monitorCharid" json:"monitor_charid,omitempty"`
}

// Default values for MonitorGoToMapUserEvent fields.
const (
	Default_MonitorGoToMapUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_MonitorGoToMapUserEvent_Param = EventParam_USER_EVENT_MONITOR_TOMAP
)

func (x *MonitorGoToMapUserEvent) Reset() {
	*x = MonitorGoToMapUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorGoToMapUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorGoToMapUserEvent) ProtoMessage() {}

func (x *MonitorGoToMapUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorGoToMapUserEvent.ProtoReflect.Descriptor instead.
func (*MonitorGoToMapUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{66}
}

func (x *MonitorGoToMapUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MonitorGoToMapUserEvent_Cmd
}

func (x *MonitorGoToMapUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MonitorGoToMapUserEvent_Param
}

func (x *MonitorGoToMapUserEvent) GetMonitorCharid() uint64 {
	if x != nil && x.MonitorCharid != nil {
		return *x.MonitorCharid
	}
	return 0
}

type MonitorMapEndUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param          *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=63" json:"param,omitempty"`
	MonitorAccid   *uint64     `protobuf:"varint,3,opt,name=monitor_accid,json=monitorAccid" json:"monitor_accid,omitempty"`
	MonitorCharid  *uint64     `protobuf:"varint,4,opt,name=monitor_charid,json=monitorCharid" json:"monitor_charid,omitempty"`
	MonitorProxyid *string     `protobuf:"bytes,5,opt,name=monitor_proxyid,json=monitorProxyid" json:"monitor_proxyid,omitempty"`
	Mapid          *uint32     `protobuf:"varint,6,opt,name=mapid" json:"mapid,omitempty"`
}

// Default values for MonitorMapEndUserEvent fields.
const (
	Default_MonitorMapEndUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_MonitorMapEndUserEvent_Param = EventParam_USER_EVENT_MONITOR_ENDMAP
)

func (x *MonitorMapEndUserEvent) Reset() {
	*x = MonitorMapEndUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorMapEndUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorMapEndUserEvent) ProtoMessage() {}

func (x *MonitorMapEndUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorMapEndUserEvent.ProtoReflect.Descriptor instead.
func (*MonitorMapEndUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{67}
}

func (x *MonitorMapEndUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MonitorMapEndUserEvent_Cmd
}

func (x *MonitorMapEndUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MonitorMapEndUserEvent_Param
}

func (x *MonitorMapEndUserEvent) GetMonitorAccid() uint64 {
	if x != nil && x.MonitorAccid != nil {
		return *x.MonitorAccid
	}
	return 0
}

func (x *MonitorMapEndUserEvent) GetMonitorCharid() uint64 {
	if x != nil && x.MonitorCharid != nil {
		return *x.MonitorCharid
	}
	return 0
}

func (x *MonitorMapEndUserEvent) GetMonitorProxyid() string {
	if x != nil && x.MonitorProxyid != nil {
		return *x.MonitorProxyid
	}
	return ""
}

func (x *MonitorMapEndUserEvent) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return 0
}

type MonitorBuildUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd              *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param            *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=64" json:"param,omitempty"`
	BeMonitorCharid  *uint64     `protobuf:"varint,3,opt,name=be_monitor_charid,json=beMonitorCharid" json:"be_monitor_charid,omitempty"`
	BeMonitorAccid   *uint64     `protobuf:"varint,4,opt,name=be_monitor_accid,json=beMonitorAccid" json:"be_monitor_accid,omitempty"`
	BeMonitorProxyid *string     `protobuf:"bytes,5,opt,name=be_monitor_proxyid,json=beMonitorProxyid" json:"be_monitor_proxyid,omitempty"`
}

// Default values for MonitorBuildUserEvent fields.
const (
	Default_MonitorBuildUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_MonitorBuildUserEvent_Param = EventParam_USER_EVENT_MONITOR_BUILD
)

func (x *MonitorBuildUserEvent) Reset() {
	*x = MonitorBuildUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorBuildUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorBuildUserEvent) ProtoMessage() {}

func (x *MonitorBuildUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorBuildUserEvent.ProtoReflect.Descriptor instead.
func (*MonitorBuildUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{68}
}

func (x *MonitorBuildUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MonitorBuildUserEvent_Cmd
}

func (x *MonitorBuildUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MonitorBuildUserEvent_Param
}

func (x *MonitorBuildUserEvent) GetBeMonitorCharid() uint64 {
	if x != nil && x.BeMonitorCharid != nil {
		return *x.BeMonitorCharid
	}
	return 0
}

func (x *MonitorBuildUserEvent) GetBeMonitorAccid() uint64 {
	if x != nil && x.BeMonitorAccid != nil {
		return *x.BeMonitorAccid
	}
	return 0
}

func (x *MonitorBuildUserEvent) GetBeMonitorProxyid() string {
	if x != nil && x.BeMonitorProxyid != nil {
		return *x.BeMonitorProxyid
	}
	return ""
}

type GuideQuestEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param    *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=73" json:"param,omitempty"`
	Targetid *uint32     `protobuf:"varint,3,opt,name=targetid" json:"targetid,omitempty"`
}

// Default values for GuideQuestEvent fields.
const (
	Default_GuideQuestEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_GuideQuestEvent_Param = EventParam_USER_EVENT_GUIDE
)

func (x *GuideQuestEvent) Reset() {
	*x = GuideQuestEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuideQuestEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuideQuestEvent) ProtoMessage() {}

func (x *GuideQuestEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuideQuestEvent.ProtoReflect.Descriptor instead.
func (*GuideQuestEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{69}
}

func (x *GuideQuestEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GuideQuestEvent_Cmd
}

func (x *GuideQuestEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GuideQuestEvent_Param
}

func (x *GuideQuestEvent) GetTargetid() uint32 {
	if x != nil && x.Targetid != nil {
		return *x.Targetid
	}
	return 0
}

type ShowCardEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param  *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=75" json:"param,omitempty"`
	Cardid *uint32     `protobuf:"varint,3,opt,name=cardid" json:"cardid,omitempty"`
}

// Default values for ShowCardEvent fields.
const (
	Default_ShowCardEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_ShowCardEvent_Param = EventParam_USER_EVENT_SHOW_CARD
)

func (x *ShowCardEvent) Reset() {
	*x = ShowCardEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowCardEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCardEvent) ProtoMessage() {}

func (x *ShowCardEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCardEvent.ProtoReflect.Descriptor instead.
func (*ShowCardEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{70}
}

func (x *ShowCardEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ShowCardEvent_Cmd
}

func (x *ShowCardEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ShowCardEvent_Param
}

func (x *ShowCardEvent) GetCardid() uint32 {
	if x != nil && x.Cardid != nil {
		return *x.Cardid
	}
	return 0
}

type GvgOptStatueEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param    *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=71" json:"param,omitempty"`
	Exterior *bool       `protobuf:"varint,3,opt,name=exterior" json:"exterior,omitempty"`
	Pose     *uint32     `protobuf:"varint,4,opt,name=pose" json:"pose,omitempty"`
}

// Default values for GvgOptStatueEvent fields.
const (
	Default_GvgOptStatueEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_GvgOptStatueEvent_Param = EventParam_USER_EVENT_GVG_OPT_STATUE
)

func (x *GvgOptStatueEvent) Reset() {
	*x = GvgOptStatueEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgOptStatueEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgOptStatueEvent) ProtoMessage() {}

func (x *GvgOptStatueEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgOptStatueEvent.ProtoReflect.Descriptor instead.
func (*GvgOptStatueEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{71}
}

func (x *GvgOptStatueEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GvgOptStatueEvent_Cmd
}

func (x *GvgOptStatueEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GvgOptStatueEvent_Param
}

func (x *GvgOptStatueEvent) GetExterior() bool {
	if x != nil && x.Exterior != nil {
		return *x.Exterior
	}
	return false
}

func (x *GvgOptStatueEvent) GetPose() uint32 {
	if x != nil && x.Pose != nil {
		return *x.Pose
	}
	return 0
}

type TimeLimitIconEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param        *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=72" json:"param,omitempty"`
	ShowItems    []uint32    `protobuf:"varint,3,rep,name=show_items,json=showItems" json:"show_items,omitempty"`
	ShowDeposits []uint32    `protobuf:"varint,4,rep,name=show_deposits,json=showDeposits" json:"show_deposits,omitempty"`
}

// Default values for TimeLimitIconEvent fields.
const (
	Default_TimeLimitIconEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_TimeLimitIconEvent_Param = EventParam_USER_EVENT_TIMELIMIT_ICON
)

func (x *TimeLimitIconEvent) Reset() {
	*x = TimeLimitIconEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeLimitIconEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeLimitIconEvent) ProtoMessage() {}

func (x *TimeLimitIconEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeLimitIconEvent.ProtoReflect.Descriptor instead.
func (*TimeLimitIconEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{72}
}

func (x *TimeLimitIconEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TimeLimitIconEvent_Cmd
}

func (x *TimeLimitIconEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TimeLimitIconEvent_Param
}

func (x *TimeLimitIconEvent) GetShowItems() []uint32 {
	if x != nil {
		return x.ShowItems
	}
	return nil
}

func (x *TimeLimitIconEvent) GetShowDeposits() []uint32 {
	if x != nil {
		return x.ShowDeposits
	}
	return nil
}

type ShowGiftInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product *uint32 `protobuf:"varint,1,opt,name=product" json:"product,omitempty"` //repeated ItemShowInfo info = 2;
}

func (x *ShowGiftInfo) Reset() {
	*x = ShowGiftInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowGiftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowGiftInfo) ProtoMessage() {}

func (x *ShowGiftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowGiftInfo.ProtoReflect.Descriptor instead.
func (*ShowGiftInfo) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{73}
}

func (x *ShowGiftInfo) GetProduct() uint32 {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return 0
}

type ShowRMBGiftEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=76" json:"param,omitempty"`
	Show  []*ShowGiftInfo `protobuf:"bytes,3,rep,name=show" json:"show,omitempty"`
}

// Default values for ShowRMBGiftEvent fields.
const (
	Default_ShowRMBGiftEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_ShowRMBGiftEvent_Param = EventParam_USER_EVENT_RMB_GIFT
)

func (x *ShowRMBGiftEvent) Reset() {
	*x = ShowRMBGiftEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowRMBGiftEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowRMBGiftEvent) ProtoMessage() {}

func (x *ShowRMBGiftEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowRMBGiftEvent.ProtoReflect.Descriptor instead.
func (*ShowRMBGiftEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{74}
}

func (x *ShowRMBGiftEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ShowRMBGiftEvent_Cmd
}

func (x *ShowRMBGiftEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ShowRMBGiftEvent_Param
}

func (x *ShowRMBGiftEvent) GetShow() []*ShowGiftInfo {
	if x != nil {
		return x.Show
	}
	return nil
}

type ConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success *bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Info    *string `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Error   *string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (x *ConfigInfo) Reset() {
	*x = ConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigInfo) ProtoMessage() {}

func (x *ConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigInfo.ProtoReflect.Descriptor instead.
func (*ConfigInfo) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{75}
}

func (x *ConfigInfo) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *ConfigInfo) GetInfo() string {
	if x != nil && x.Info != nil {
		return *x.Info
	}
	return ""
}

func (x *ConfigInfo) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type ConfigActionUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param     *EventParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=66" json:"param,omitempty"`
	Action    *EConfigAction `protobuf:"varint,3,opt,name=action,enum=Cmd.EConfigAction" json:"action,omitempty"`
	Sessionid *uint32        `protobuf:"varint,4,opt,name=sessionid" json:"sessionid,omitempty"`
	Name      *string        `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Infos     []*ConfigInfo  `protobuf:"bytes,6,rep,name=infos" json:"infos,omitempty"`
	Over      *bool          `protobuf:"varint,7,opt,name=over" json:"over,omitempty"`
}

// Default values for ConfigActionUserEvent fields.
const (
	Default_ConfigActionUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_ConfigActionUserEvent_Param = EventParam_USER_EVENT_CONFIG
)

func (x *ConfigActionUserEvent) Reset() {
	*x = ConfigActionUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigActionUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigActionUserEvent) ProtoMessage() {}

func (x *ConfigActionUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigActionUserEvent.ProtoReflect.Descriptor instead.
func (*ConfigActionUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{76}
}

func (x *ConfigActionUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ConfigActionUserEvent_Cmd
}

func (x *ConfigActionUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ConfigActionUserEvent_Param
}

func (x *ConfigActionUserEvent) GetAction() EConfigAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return EConfigAction_ECONFIGACTION_MIN
}

func (x *ConfigActionUserEvent) GetSessionid() uint32 {
	if x != nil && x.Sessionid != nil {
		return *x.Sessionid
	}
	return 0
}

func (x *ConfigActionUserEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ConfigActionUserEvent) GetInfos() []*ConfigInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *ConfigActionUserEvent) GetOver() bool {
	if x != nil && x.Over != nil {
		return *x.Over
	}
	return false
}

type NpcWalkStepNtfUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param  *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=67" json:"param,omitempty"`
	Guid   *uint64     `protobuf:"varint,3,opt,name=guid" json:"guid,omitempty"`
	Id     *uint32     `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
	Walkid *uint32     `protobuf:"varint,5,opt,name=walkid" json:"walkid,omitempty"`
	Type   *string     `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
}

// Default values for NpcWalkStepNtfUserEvent fields.
const (
	Default_NpcWalkStepNtfUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_NpcWalkStepNtfUserEvent_Param = EventParam_USER_EVENT_NPCWALK
)

func (x *NpcWalkStepNtfUserEvent) Reset() {
	*x = NpcWalkStepNtfUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpcWalkStepNtfUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpcWalkStepNtfUserEvent) ProtoMessage() {}

func (x *NpcWalkStepNtfUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpcWalkStepNtfUserEvent.ProtoReflect.Descriptor instead.
func (*NpcWalkStepNtfUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{77}
}

func (x *NpcWalkStepNtfUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NpcWalkStepNtfUserEvent_Cmd
}

func (x *NpcWalkStepNtfUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NpcWalkStepNtfUserEvent_Param
}

func (x *NpcWalkStepNtfUserEvent) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return 0
}

func (x *NpcWalkStepNtfUserEvent) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *NpcWalkStepNtfUserEvent) GetWalkid() uint32 {
	if x != nil && x.Walkid != nil {
		return *x.Walkid
	}
	return 0
}

func (x *NpcWalkStepNtfUserEvent) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type SetProfileUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param   *EventParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=68" json:"param,omitempty"`
	Profile *UserProfileData `protobuf:"bytes,3,opt,name=profile" json:"profile,omitempty"`
}

// Default values for SetProfileUserEvent fields.
const (
	Default_SetProfileUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_SetProfileUserEvent_Param = EventParam_USER_EVENT_SET_PROFILE
)

func (x *SetProfileUserEvent) Reset() {
	*x = SetProfileUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProfileUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProfileUserEvent) ProtoMessage() {}

func (x *SetProfileUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProfileUserEvent.ProtoReflect.Descriptor instead.
func (*SetProfileUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{78}
}

func (x *SetProfileUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SetProfileUserEvent_Cmd
}

func (x *SetProfileUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SetProfileUserEvent_Param
}

func (x *SetProfileUserEvent) GetProfile() *UserProfileData {
	if x != nil {
		return x.Profile
	}
	return nil
}

type QueryFateRelationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=70" json:"param,omitempty"`
	Id    *uint64     `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

// Default values for QueryFateRelationEvent fields.
const (
	Default_QueryFateRelationEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_QueryFateRelationEvent_Param = EventParam_USER_EVENT_QUERY_FATE_RELATION
)

func (x *QueryFateRelationEvent) Reset() {
	*x = QueryFateRelationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFateRelationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFateRelationEvent) ProtoMessage() {}

func (x *QueryFateRelationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFateRelationEvent.ProtoReflect.Descriptor instead.
func (*QueryFateRelationEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{79}
}

func (x *QueryFateRelationEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryFateRelationEvent_Cmd
}

func (x *QueryFateRelationEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryFateRelationEvent_Param
}

func (x *QueryFateRelationEvent) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type SyncFateRelationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param   *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=69" json:"param,omitempty"`
	Fateval *uint32     `protobuf:"varint,3,opt,name=fateval" json:"fateval,omitempty"`
	Fateid  *uint32     `protobuf:"varint,4,opt,name=fateid" json:"fateid,omitempty"`
}

// Default values for SyncFateRelationEvent fields.
const (
	Default_SyncFateRelationEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_SyncFateRelationEvent_Param = EventParam_USER_EVENT_SYNC_FATE_RELATION
)

func (x *SyncFateRelationEvent) Reset() {
	*x = SyncFateRelationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncFateRelationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncFateRelationEvent) ProtoMessage() {}

func (x *SyncFateRelationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncFateRelationEvent.ProtoReflect.Descriptor instead.
func (*SyncFateRelationEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{80}
}

func (x *SyncFateRelationEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SyncFateRelationEvent_Cmd
}

func (x *SyncFateRelationEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SyncFateRelationEvent_Param
}

func (x *SyncFateRelationEvent) GetFateval() uint32 {
	if x != nil && x.Fateval != nil {
		return *x.Fateval
	}
	return 0
}

func (x *SyncFateRelationEvent) GetFateid() uint32 {
	if x != nil && x.Fateid != nil {
		return *x.Fateid
	}
	return 0
}

type QueryProfileUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param   *EventParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=77" json:"param,omitempty"`
	Charid  *uint64          `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Profile *UserProfileData `protobuf:"bytes,4,opt,name=profile" json:"profile,omitempty"`
}

// Default values for QueryProfileUserEvent fields.
const (
	Default_QueryProfileUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_QueryProfileUserEvent_Param = EventParam_USER_EVENT_QUERY_PROFILE
)

func (x *QueryProfileUserEvent) Reset() {
	*x = QueryProfileUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProfileUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProfileUserEvent) ProtoMessage() {}

func (x *QueryProfileUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProfileUserEvent.ProtoReflect.Descriptor instead.
func (*QueryProfileUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{81}
}

func (x *QueryProfileUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryProfileUserEvent_Cmd
}

func (x *QueryProfileUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryProfileUserEvent_Param
}

func (x *QueryProfileUserEvent) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *QueryProfileUserEvent) GetProfile() *UserProfileData {
	if x != nil {
		return x.Profile
	}
	return nil
}

type SandTableGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guildid *uint64 `protobuf:"varint,1,opt,name=guildid" json:"guildid,omitempty"`
	Name    *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Image   *string `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
}

func (x *SandTableGuild) Reset() {
	*x = SandTableGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SandTableGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandTableGuild) ProtoMessage() {}

func (x *SandTableGuild) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandTableGuild.ProtoReflect.Descriptor instead.
func (*SandTableGuild) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{82}
}

func (x *SandTableGuild) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return 0
}

func (x *SandTableGuild) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SandTableGuild) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

type PointInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guild       *SandTableGuild `protobuf:"bytes,1,opt,name=guild" json:"guild,omitempty"`
	Id          *uint32         `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	HasOccupied *bool           `protobuf:"varint,3,opt,name=has_occupied,json=hasOccupied" json:"has_occupied,omitempty"`
}

func (x *PointInfo) Reset() {
	*x = PointInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointInfo) ProtoMessage() {}

func (x *PointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointInfo.ProtoReflect.Descriptor instead.
func (*PointInfo) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{83}
}

func (x *PointInfo) GetGuild() *SandTableGuild {
	if x != nil {
		return x.Guild
	}
	return nil
}

func (x *PointInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PointInfo) GetHasOccupied() bool {
	if x != nil && x.HasOccupied != nil {
		return *x.HasOccupied
	}
	return false
}

type SandTableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City             *uint32           `protobuf:"varint,1,opt,name=city" json:"city,omitempty"`
	Metalhp          *uint32           `protobuf:"varint,2,opt,name=metalhp" json:"metalhp,omitempty"`
	Defensenum       *uint32           `protobuf:"varint,3,opt,name=defensenum" json:"defensenum,omitempty"`
	Attacknum        *uint32           `protobuf:"varint,4,opt,name=attacknum" json:"attacknum,omitempty"`
	Guild            []*SandTableGuild `protobuf:"bytes,5,rep,name=guild" json:"guild,omitempty"`
	State            *EGCityState      `protobuf:"varint,6,opt,name=state,enum=Cmd.EGCityState" json:"state,omitempty"`
	Defguild         *SandTableGuild   `protobuf:"bytes,7,opt,name=defguild" json:"defguild,omitempty"`
	PointInfo        []*PointInfo      `protobuf:"bytes,8,rep,name=point_info,json=pointInfo" json:"point_info,omitempty"`
	Raidstate        *EGvgRaidState    `protobuf:"varint,9,opt,name=raidstate,enum=Cmd.EGvgRaidState" json:"raidstate,omitempty"`
	PerfectSpareTime *uint32           `protobuf:"varint,10,opt,name=perfect_spare_time,json=perfectSpareTime" json:"perfect_spare_time,omitempty"`
}

func (x *SandTableInfo) Reset() {
	*x = SandTableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SandTableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandTableInfo) ProtoMessage() {}

func (x *SandTableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandTableInfo.ProtoReflect.Descriptor instead.
func (*SandTableInfo) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{84}
}

func (x *SandTableInfo) GetCity() uint32 {
	if x != nil && x.City != nil {
		return *x.City
	}
	return 0
}

func (x *SandTableInfo) GetMetalhp() uint32 {
	if x != nil && x.Metalhp != nil {
		return *x.Metalhp
	}
	return 0
}

func (x *SandTableInfo) GetDefensenum() uint32 {
	if x != nil && x.Defensenum != nil {
		return *x.Defensenum
	}
	return 0
}

func (x *SandTableInfo) GetAttacknum() uint32 {
	if x != nil && x.Attacknum != nil {
		return *x.Attacknum
	}
	return 0
}

func (x *SandTableInfo) GetGuild() []*SandTableGuild {
	if x != nil {
		return x.Guild
	}
	return nil
}

func (x *SandTableInfo) GetState() EGCityState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return EGCityState_EGCITYSTATE_MIN
}

func (x *SandTableInfo) GetDefguild() *SandTableGuild {
	if x != nil {
		return x.Defguild
	}
	return nil
}

func (x *SandTableInfo) GetPointInfo() []*PointInfo {
	if x != nil {
		return x.PointInfo
	}
	return nil
}

func (x *SandTableInfo) GetRaidstate() EGvgRaidState {
	if x != nil && x.Raidstate != nil {
		return *x.Raidstate
	}
	return EGvgRaidState_EGVGRAIDSTATE_MIN
}

func (x *SandTableInfo) GetPerfectSpareTime() uint32 {
	if x != nil && x.PerfectSpareTime != nil {
		return *x.PerfectSpareTime
	}
	return 0
}

type GvgSandTableEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd              *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param            *EventParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=78" json:"param,omitempty"`
	GvgGroup         *uint32          `protobuf:"varint,3,opt,name=gvg_group,json=gvgGroup" json:"gvg_group,omitempty"`
	Starttime        *uint32          `protobuf:"varint,4,opt,name=starttime" json:"starttime,omitempty"`
	Endtime          *uint32          `protobuf:"varint,5,opt,name=endtime" json:"endtime,omitempty"`
	Info             []*SandTableInfo `protobuf:"bytes,6,rep,name=info" json:"info,omitempty"`
	NomoreSmallmetal *bool            `protobuf:"varint,7,opt,name=nomore_smallmetal,json=nomoreSmallmetal" json:"nomore_smallmetal,omitempty"`
}

// Default values for GvgSandTableEvent fields.
const (
	Default_GvgSandTableEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_GvgSandTableEvent_Param = EventParam_USER_EVENT_GVGSANDTABLE_INFO
)

func (x *GvgSandTableEvent) Reset() {
	*x = GvgSandTableEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgSandTableEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgSandTableEvent) ProtoMessage() {}

func (x *GvgSandTableEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgSandTableEvent.ProtoReflect.Descriptor instead.
func (*GvgSandTableEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{85}
}

func (x *GvgSandTableEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GvgSandTableEvent_Cmd
}

func (x *GvgSandTableEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GvgSandTableEvent_Param
}

func (x *GvgSandTableEvent) GetGvgGroup() uint32 {
	if x != nil && x.GvgGroup != nil {
		return *x.GvgGroup
	}
	return 0
}

func (x *GvgSandTableEvent) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

func (x *GvgSandTableEvent) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

func (x *GvgSandTableEvent) GetInfo() []*SandTableInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GvgSandTableEvent) GetNomoreSmallmetal() bool {
	if x != nil && x.NomoreSmallmetal != nil {
		return *x.NomoreSmallmetal
	}
	return false
}

type SetReliveMethodUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param        *EventParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=79" json:"param,omitempty"`
	ReliveMethod *EDelayReliveMethod `protobuf:"varint,3,opt,name=relive_method,json=reliveMethod,enum=Cmd.EDelayReliveMethod" json:"relive_method,omitempty"`
}

// Default values for SetReliveMethodUserEvent fields.
const (
	Default_SetReliveMethodUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_SetReliveMethodUserEvent_Param = EventParam_USER_EVENT_DELAY_RELIVE_METHOD
)

func (x *SetReliveMethodUserEvent) Reset() {
	*x = SetReliveMethodUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReliveMethodUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReliveMethodUserEvent) ProtoMessage() {}

func (x *SetReliveMethodUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReliveMethodUserEvent.ProtoReflect.Descriptor instead.
func (*SetReliveMethodUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{86}
}

func (x *SetReliveMethodUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SetReliveMethodUserEvent_Cmd
}

func (x *SetReliveMethodUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SetReliveMethodUserEvent_Param
}

func (x *SetReliveMethodUserEvent) GetReliveMethod() EDelayReliveMethod {
	if x != nil && x.ReliveMethod != nil {
		return *x.ReliveMethod
	}
	return EDelayReliveMethod_EDELAYRELIVE_MIN
}

type UIActionUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=25" json:"cmd,omitempty"`
	Param  *EventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EventParam,def=80" json:"param,omitempty"`
	Params *string     `protobuf:"bytes,3,opt,name=params" json:"params,omitempty"`
}

// Default values for UIActionUserEvent fields.
const (
	Default_UIActionUserEvent_Cmd   = Command_USER_EVENT_PROTOCMD
	Default_UIActionUserEvent_Param = EventParam_USER_EVENT_UI_ACTION
)

func (x *UIActionUserEvent) Reset() {
	*x = UIActionUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserEvent_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIActionUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIActionUserEvent) ProtoMessage() {}

func (x *UIActionUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_UserEvent_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIActionUserEvent.ProtoReflect.Descriptor instead.
func (*UIActionUserEvent) Descriptor() ([]byte, []int) {
	return file_UserEvent_proto_rawDescGZIP(), []int{87}
}

func (x *UIActionUserEvent) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UIActionUserEvent_Cmd
}

func (x *UIActionUserEvent) GetParam() EventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UIActionUserEvent_Param
}

func (x *UIActionUserEvent) GetParams() string {
	if x != nil && x.Params != nil {
		return *x.Params
	}
	return ""
}

var File_UserEvent_proto protoreflect.FileDescriptor

var file_UserEvent_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb0, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a,
	0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x12, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x70, 0x63,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x4e, 0x50, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07,
	0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x22, 0x71, 0x0a, 0x09, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0xad, 0x01,
	0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x5f,
	0x54, 0x49, 0x54, 0x4c, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x0b,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0xe9, 0x01,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a,
	0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1d, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x07, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x13, 0x42, 0x75,
	0x66, 0x66, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x44, 0x41, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x52,
	0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69,
	0x64, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4e, 0x74, 0x66, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45,
	0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x69,
	0x64, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x07, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x0f, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x06, 0x69, 0x73, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x69, 0x73, 0x75,
	0x73, 0x65, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61,
	0x74, 0x61, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x0f,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x09, 0x63, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0x8d,
	0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x8f,
	0x01, 0x0a, 0x16, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x61, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x43, 0x41, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x22, 0xbd, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x69, 0x67, 0x4e, 0x70, 0x63, 0x46, 0x75, 0x6e, 0x63,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x50, 0x43, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52,
	0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x75, 0x6e, 0x63,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x63, 0x69, 0x64,
	0x22, 0xce, 0x01, 0x0a, 0x15, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x3f, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xbe, 0x01, 0x0a, 0x10, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x54,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x63, 0x61, 0x74, 0x67, 0x75, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x07, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x75, 0x70, 0x22, 0xc9, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x0a, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0x76,
	0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x64, 0x61, 0x74, 0x61, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x4e,
	0x54, 0x46, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x33,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4e, 0x54, 0x46, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x4e,
	0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x93, 0x02, 0x0a, 0x0d, 0x4c, 0x6f, 0x76,
	0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x56, 0x45,
	0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x67, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x15, 0x45, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x48, 0x52, 0x49, 0x53, 0x54, 0x4d, 0x41, 0x53, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x47,
	0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4e, 0x54,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x43, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0xb9, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x43, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x43, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x4f, 0x0a,
	0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x31, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x32, 0x22, 0xb7,
	0x01, 0x0a, 0x12, 0x4e, 0x74, 0x66, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xb5, 0x01, 0x0a, 0x14, 0x44, 0x69, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6d,
	0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x9e, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x22, 0xdb, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x45, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xb7, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x4f, 0x55, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x61, 0x63, 0x74, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x05,
	0x69, 0x6e, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x75, 0x74, 0x22, 0xf2, 0x01, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x33,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x41, 0x49, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x05, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x12, 0x45, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x52, 0x05, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x33, 0x32, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x36, 0x34, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x36, 0x34, 0x22, 0x8b,
	0x01, 0x0a, 0x14, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x44, 0x65, 0x61, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50,
	0x5f, 0x44, 0x45, 0x41, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xa9, 0x01, 0x0a,
	0x19, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x41, 0x75, 0x74, 0x6f, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x16, 0x47, 0x6f, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41,
	0x50, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x63, 0x74, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x16, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xb4, 0x01, 0x0a,
	0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x52,
	0x49, 0x45, 0x4e, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41,
	0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x69,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x69, 0x64, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x1d, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x21, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x52,
	0x49, 0x45, 0x4e, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x64, 0x64, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x61, 0x64, 0x64,
	0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x69, 0x64, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x13,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x1f, 0x0a, 0x07, 0x62, 0x67, 0x6d, 0x6b, 0x65, 0x65, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x62,
	0x67, 0x6d, 0x6b, 0x65, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xa4,
	0x01, 0x0a, 0x15, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xcc, 0x01,
	0x0a, 0x1e, 0x42, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x42, 0x49, 0x46, 0x52, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xee, 0x01, 0x0a,
	0x17, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4f, 0x66, 0x66, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f,
	0x4f, 0x46, 0x46, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x73, 0x22, 0xba, 0x01,
	0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x43, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x43, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x28, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x19, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x64, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45,
	0x5f, 0x53, 0x44, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xef, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x53, 0x64, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x53, 0x44, 0x4b, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x61, 0x74, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61, 0x74,
	0x61, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x70, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x41, 0x49, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x32, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x36, 0x34, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x15, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x49, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x49, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x69, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x49, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x61, 0x69, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe7,
	0x01, 0x0a, 0x17, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x49, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x41, 0x49, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x61,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x49, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x61, 0x69, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x64, 0x65, 0x6c, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x47, 0x69, 0x66,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x48, 0x69, 0x64, 0x65, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x41, 0x50, 0x50, 0x45, 0x41, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x68, 0x69, 0x64, 0x65, 0x69, 0x64, 0x22, 0x55, 0x0a,
	0x08, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x47, 0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x37, 0x0a, 0x09, 0x47, 0x69, 0x66, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbb, 0x01,
	0x0a, 0x19, 0x47, 0x69, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e,
	0x74, 0x66, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x49, 0x46,
	0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4e, 0x54, 0x46, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x19,
	0x47, 0x69, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x42, 0x55, 0x59, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x1c, 0x47, 0x69, 0x66, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x0d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x75, 0x74, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xde, 0x01, 0x0a,
	0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x75, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x5f, 0x43, 0x55, 0x54, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x75, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x9f, 0x01,
	0x0a, 0x15, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22,
	0x8b, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xf1, 0x01,
	0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x6d,
	0x61, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d,
	0x61, 0x70, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x68, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x68, 0x69, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05,
	0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x64, 0x22, 0xc2, 0x01, 0x0a, 0x10, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0x8b,
	0x01, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x92, 0x01, 0x0a,
	0x17, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f,
	0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x22, 0xb6, 0x01, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x47, 0x6f, 0x54,
	0x6f, 0x4d, 0x61, 0x70, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d,
	0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x4d, 0x41, 0x50, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0x9a, 0x02, 0x0a, 0x16, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x45,
	0x4e, 0x44, 0x4d, 0x41, 0x50, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x43, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x22, 0x91, 0x02, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x65, 0x5f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x62, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62,
	0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x62, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x65, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x69, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x0f,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x0d, 0x53, 0x68,
	0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x48, 0x4f,
	0x57, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x69, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x11, 0x47, 0x76, 0x67, 0x4f, 0x70, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x56, 0x47,
	0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f,
	0x73, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x49, 0x63, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x73, 0x22, 0x28, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x69, 0x66, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0xaa,
	0x01, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x4d, 0x42, 0x47, 0x69, 0x66, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4d, 0x42, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x69, 0x66,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x22, 0x50, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9f, 0x02,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x76, 0x65, 0x72, 0x22,
	0xd9, 0x01, 0x0a, 0x17, 0x4e, 0x70, 0x63, 0x57, 0x61, 0x6c, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x4e,
	0x74, 0x66, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x50, 0x43,
	0x57, 0x41, 0x4c, 0x4b, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x13,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x46, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc4,
	0x01, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x46,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x74, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x61, 0x74, 0x65, 0x76, 0x61, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x61, 0x74, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66,
	0x61, 0x74, 0x65, 0x69, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x54, 0x0a,
	0x0e, 0x53, 0x61, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x09, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x29, 0x0a, 0x05, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x05, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x68,
	0x61, 0x73, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x22, 0x8e,
	0x03, 0x0a, 0x0d, 0x53, 0x61, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x68, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x68, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x6e, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x05,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x05, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x43,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x08, 0x64, 0x65, 0x66, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x2d, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x30, 0x0a, 0x09, 0x72, 0x61, 0x69, 0x64, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x76, 0x67, 0x52, 0x61, 0x69,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x61, 0x69, 0x64, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x53, 0x70, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xb7, 0x02, 0x0a, 0x11, 0x47, 0x76, 0x67, 0x53, 0x61, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x56, 0x47, 0x53, 0x41, 0x4e, 0x44, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x76, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x67, 0x76, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x11,
	0x6e, 0x6f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x6f, 0x6d, 0x6f, 0x72, 0x65, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x22, 0xd4, 0x01, 0x0a, 0x18, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x52, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x22, 0x9d, 0x01, 0x0a, 0x11, 0x55, 0x49, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x2a, 0xe5, 0x11, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x4e, 0x50, 0x43, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10,
	0x03, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x44, 0x41, 0x4d,
	0x41, 0x47, 0x45, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x07,
	0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x08, 0x12, 0x20, 0x0a,
	0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x09, 0x12,
	0x1c, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45,
	0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x0a, 0x12, 0x1d, 0x0a,
	0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x43, 0x41, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x50, 0x43, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x54, 0x10, 0x0e,
	0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x0f, 0x12, 0x1f, 0x0a,
	0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x10, 0x12, 0x20,
	0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x54, 0x46,
	0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x11,
	0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x4f, 0x56, 0x45, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x12, 0x12,
	0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4e, 0x54,
	0x10, 0x13, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x16, 0x12, 0x1f,
	0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x54, 0x46,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x17, 0x12,
	0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x18, 0x12, 0x1e, 0x0a, 0x1a, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x19, 0x12, 0x18, 0x0a, 0x14, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x4f, 0x55, 0x54, 0x5f,
	0x41, 0x43, 0x54, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x1b, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50,
	0x5f, 0x44, 0x45, 0x41, 0x44, 0x10, 0x1c, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x10, 0x1d, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x1e, 0x12,
	0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x1f, 0x12, 0x1c,
	0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x48, 0x45,
	0x4d, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x10, 0x20, 0x12, 0x24, 0x0a, 0x20,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44,
	0x10, 0x21, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45,
	0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x22, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x23,
	0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x24, 0x12, 0x1d, 0x0a, 0x19,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x25, 0x12, 0x26, 0x0a, 0x22, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x46, 0x52, 0x4f, 0x53,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x10, 0x27, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x28, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10,
	0x29, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x53, 0x44, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x2a, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x53, 0x44, 0x4b, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x10, 0x2b, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x49, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0x2c, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x49, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x2d, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x2e, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x41, 0x50, 0x50, 0x45, 0x41, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x2f, 0x12, 0x21, 0x0a,
	0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x49, 0x46, 0x54,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x30,
	0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47,
	0x49, 0x46, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x42, 0x55,
	0x59, 0x10, 0x31, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x32, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x43, 0x55,
	0x54, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x37, 0x12,
	0x1c, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x38, 0x12, 0x1b, 0x0a,
	0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x10, 0x39, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x3a, 0x12, 0x1c, 0x0a, 0x18,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x3b, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52,
	0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x3c, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x10, 0x3d, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x4d, 0x41,
	0x50, 0x10, 0x3e, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x4d, 0x41, 0x50,
	0x10, 0x3f, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x40,
	0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d,
	0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x54, 0x10,
	0x41, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x42, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x50, 0x43, 0x57, 0x41, 0x4c, 0x4b, 0x10, 0x43,
	0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x44, 0x12, 0x21, 0x0a, 0x1d,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x46, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x45, 0x12,
	0x22, 0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x46, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x46, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x47, 0x56, 0x47, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x45,
	0x10, 0x47, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x10,
	0x48, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x49, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10,
	0x4b, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x4d, 0x42, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x10, 0x4c, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x4d, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x56, 0x47, 0x53, 0x41, 0x4e, 0x44, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x4e, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x52,
	0x45, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x4f, 0x12, 0x18,
	0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x49, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x50, 0x2a, 0xf1, 0x03, 0x0a, 0x10, 0x45, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x46, 0x49, 0x52, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x46, 0x49, 0x52, 0x53, 0x54, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c,
	0x4f, 0x57, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x46, 0x49, 0x52, 0x53, 0x54, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x43, 0x41, 0x52,
	0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x46, 0x49, 0x52, 0x53, 0x54, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x43, 0x41, 0x52, 0x44, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x46, 0x49, 0x52, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x46, 0x49, 0x52, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x4d, 0x41, 0x49, 0x4c,
	0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x46, 0x49, 0x52, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x46, 0x49, 0x52, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10,
	0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x46, 0x49, 0x52, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x10,
	0x09, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x46, 0x49, 0x52, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x0a,
	0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x46, 0x49, 0x52, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x43, 0x41, 0x52, 0x44, 0x10, 0x0b,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x46, 0x49, 0x52, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4b, 0x46, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19,
	0x45, 0x46, 0x49, 0x52, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x44,
	0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x58, 0x5f,
	0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x0e, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52,
	0x59, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x0f, 0x2a, 0xc7, 0x01, 0x0a,
	0x0a, 0x45, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x54, 0x49,
	0x54, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x54, 0x49, 0x54, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x54, 0x49,
	0x54, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x43, 0x4f, 0x4f,
	0x4b, 0x45, 0x52, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x54, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10,
	0x08, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0x09, 0x2a, 0x58, 0x0a, 0x0d, 0x45, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x44, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x44, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x02,
	0x2a, 0x42, 0x0a, 0x11, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45,
	0x4d, 0x4f, 0x10, 0x01, 0x2a, 0x44, 0x0a, 0x0e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x43, 0x41, 0x48, 0x52, 0x10, 0x01, 0x2a, 0x66, 0x0a, 0x0a, 0x45, 0x47,
	0x69, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x47, 0x49, 0x46,
	0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x47, 0x49, 0x46, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47, 0x49, 0x46, 0x54, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x47, 0x49, 0x46, 0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x10, 0x03, 0x2a, 0xa1, 0x01, 0x0a, 0x0d, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44,
	0x49, 0x46, 0x59, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0x61, 0x0a, 0x12, 0x45, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x52, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x5f, 0x47, 0x56, 0x47, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x47,
	0x56, 0x47, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x10, 0x02,
}

var (
	file_UserEvent_proto_rawDescOnce sync.Once
	file_UserEvent_proto_rawDescData = file_UserEvent_proto_rawDesc
)

func file_UserEvent_proto_rawDescGZIP() []byte {
	file_UserEvent_proto_rawDescOnce.Do(func() {
		file_UserEvent_proto_rawDescData = protoimpl.X.CompressGZIP(file_UserEvent_proto_rawDescData)
	})
	return file_UserEvent_proto_rawDescData
}

var file_UserEvent_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_UserEvent_proto_msgTypes = make([]protoimpl.MessageInfo, 88)
var file_UserEvent_proto_goTypes = []interface{}{
	(EventParam)(0),                        // 0: Cmd.EventParam
	(EFirstActionType)(0),                  // 1: Cmd.EFirstActionType
	(ETitleType)(0),                        // 2: Cmd.ETitleType
	(EDepositState)(0),                     // 3: Cmd.EDepositState
	(ESystemStringType)(0),                 // 4: Cmd.ESystemStringType
	(EEventMailType)(0),                    // 5: Cmd.EEventMailType
	(EGiftState)(0),                        // 6: Cmd.EGiftState
	(EConfigAction)(0),                     // 7: Cmd.EConfigAction
	(EDelayReliveMethod)(0),                // 8: Cmd.EDelayReliveMethod
	(*FirstActionUserEvent)(nil),           // 9: Cmd.FirstActionUserEvent
	(*DamageNpcUserEvent)(nil),             // 10: Cmd.DamageNpcUserEvent
	(*TitleData)(nil),                      // 11: Cmd.TitleData
	(*NewTitle)(nil),                       // 12: Cmd.NewTitle
	(*AllTitle)(nil),                       // 13: Cmd.AllTitle
	(*UpdateRandomUserEvent)(nil),          // 14: Cmd.UpdateRandomUserEvent
	(*BuffDamageUserEvent)(nil),            // 15: Cmd.BuffDamageUserEvent
	(*ChargeNtfUserEvent)(nil),             // 16: Cmd.ChargeNtfUserEvent
	(*DepositTypeData)(nil),                // 17: Cmd.DepositTypeData
	(*DepositCardData)(nil),                // 18: Cmd.DepositCardData
	(*ChargeQueryCmd)(nil),                 // 19: Cmd.ChargeQueryCmd
	(*DepositCardInfo)(nil),                // 20: Cmd.DepositCardInfo
	(*DelTransformUserEvent)(nil),          // 21: Cmd.DelTransformUserEvent
	(*InviteCatFailUserEvent)(nil),         // 22: Cmd.InviteCatFailUserEvent
	(*TrigNpcFuncUserEvent)(nil),           // 23: Cmd.TrigNpcFuncUserEvent
	(*SystemStringUserEvent)(nil),          // 24: Cmd.SystemStringUserEvent
	(*HandCatUserEvent)(nil),               // 25: Cmd.HandCatUserEvent
	(*ChangeTitle)(nil),                    // 26: Cmd.ChangeTitle
	(*ChargeCntInfo)(nil),                  // 27: Cmd.ChargeCntInfo
	(*QueryChargeCnt)(nil),                 // 28: Cmd.QueryChargeCnt
	(*NTFMonthCardEnd)(nil),                // 29: Cmd.NTFMonthCardEnd
	(*LoveLetterUse)(nil),                  // 30: Cmd.LoveLetterUse
	(*ActivityCntItem)(nil),                // 31: Cmd.ActivityCntItem
	(*QueryActivityCnt)(nil),               // 32: Cmd.QueryActivityCnt
	(*UpdateActivityCnt)(nil),              // 33: Cmd.UpdateActivityCnt
	(*VersionCardInfo)(nil),                // 34: Cmd.VersionCardInfo
	(*NtfVersionCardInfo)(nil),             // 35: Cmd.NtfVersionCardInfo
	(*DieTimeCountEventCmd)(nil),           // 36: Cmd.DieTimeCountEventCmd
	(*GetFirstShareRewardUserEvent)(nil),   // 37: Cmd.GetFirstShareRewardUserEvent
	(*QueryResetTimeEventCmd)(nil),         // 38: Cmd.QueryResetTimeEventCmd
	(*InOutActEventCmd)(nil),               // 39: Cmd.InOutActEventCmd
	(*UserEventMailCmd)(nil),               // 40: Cmd.UserEventMailCmd
	(*LevelupDeadUserEvent)(nil),           // 41: Cmd.LevelupDeadUserEvent
	(*SwitchAutoBattleUserEvent)(nil),      // 42: Cmd.SwitchAutoBattleUserEvent
	(*GoActivityMapUserEvent)(nil),         // 43: Cmd.GoActivityMapUserEvent
	(*ActivityPointUserEvent)(nil),         // 44: Cmd.ActivityPointUserEvent
	(*QueryFavoriteFriendUserEvent)(nil),   // 45: Cmd.QueryFavoriteFriendUserEvent
	(*UpdateFavoriteFriendUserEvent)(nil),  // 46: Cmd.UpdateFavoriteFriendUserEvent
	(*ActionFavoriteFriendUserEvent)(nil),  // 47: Cmd.ActionFavoriteFriendUserEvent
	(*SoundStoryUserEvent)(nil),            // 48: Cmd.SoundStoryUserEvent
	(*ThemeDetailsUserEvent)(nil),          // 49: Cmd.ThemeDetailsUserEvent
	(*CameraActionUserEvent)(nil),          // 50: Cmd.CameraActionUserEvent
	(*BifrostContributeItemUserEvent)(nil), // 51: Cmd.BifrostContributeItemUserEvent
	(*RobotOffBattleUserEvent)(nil),        // 52: Cmd.RobotOffBattleUserEvent
	(*QueryAccChargeCntReward)(nil),        // 53: Cmd.QueryAccChargeCntReward
	(*ChargeSdkRequestUserEvent)(nil),      // 54: Cmd.ChargeSdkRequestUserEvent
	(*ChargeSdkReplyUserEvent)(nil),        // 55: Cmd.ChargeSdkReplyUserEvent
	(*ClientAIData)(nil),                   // 56: Cmd.ClientAIData
	(*ClientAISyncUserEvent)(nil),          // 57: Cmd.ClientAISyncUserEvent
	(*ClientAIUpdateUserEvent)(nil),        // 58: Cmd.ClientAIUpdateUserEvent
	(*GiftCodeExchangeEvent)(nil),          // 59: Cmd.GiftCodeExchangeEvent
	(*SetHideOtherCmd)(nil),                // 60: Cmd.SetHideOtherCmd
	(*GiftInfo)(nil),                       // 61: Cmd.GiftInfo
	(*GiftEvent)(nil),                      // 62: Cmd.GiftEvent
	(*GiftTimeLimitNtfUserEvent)(nil),      // 63: Cmd.GiftTimeLimitNtfUserEvent
	(*GiftTimeLimitBuyUserEvent)(nil),      // 64: Cmd.GiftTimeLimitBuyUserEvent
	(*GiftTimeLimitActiveUserEvent)(nil),   // 65: Cmd.GiftTimeLimitActiveUserEvent
	(*MultiCutScene)(nil),                  // 66: Cmd.MultiCutScene
	(*MultiCutSceneUpdateUserEvent)(nil),   // 67: Cmd.MultiCutSceneUpdateUserEvent
	(*PolicyUpdateUserEvent)(nil),          // 68: Cmd.PolicyUpdateUserEvent
	(*PolicyAgreeUserEvent)(nil),           // 69: Cmd.PolicyAgreeUserEvent
	(*ShowSceneObject)(nil),                // 70: Cmd.ShowSceneObject
	(*DoubleAcionEvent)(nil),               // 71: Cmd.DoubleAcionEvent
	(*BeginMonitorUserEvent)(nil),          // 72: Cmd.BeginMonitorUserEvent
	(*StopMonitorUserEvent)(nil),           // 73: Cmd.StopMonitorUserEvent
	(*StopMonitorRetUserEvent)(nil),        // 74: Cmd.StopMonitorRetUserEvent
	(*MonitorGoToMapUserEvent)(nil),        // 75: Cmd.MonitorGoToMapUserEvent
	(*MonitorMapEndUserEvent)(nil),         // 76: Cmd.MonitorMapEndUserEvent
	(*MonitorBuildUserEvent)(nil),          // 77: Cmd.MonitorBuildUserEvent
	(*GuideQuestEvent)(nil),                // 78: Cmd.GuideQuestEvent
	(*ShowCardEvent)(nil),                  // 79: Cmd.ShowCardEvent
	(*GvgOptStatueEvent)(nil),              // 80: Cmd.GvgOptStatueEvent
	(*TimeLimitIconEvent)(nil),             // 81: Cmd.TimeLimitIconEvent
	(*ShowGiftInfo)(nil),                   // 82: Cmd.ShowGiftInfo
	(*ShowRMBGiftEvent)(nil),               // 83: Cmd.ShowRMBGiftEvent
	(*ConfigInfo)(nil),                     // 84: Cmd.ConfigInfo
	(*ConfigActionUserEvent)(nil),          // 85: Cmd.ConfigActionUserEvent
	(*NpcWalkStepNtfUserEvent)(nil),        // 86: Cmd.NpcWalkStepNtfUserEvent
	(*SetProfileUserEvent)(nil),            // 87: Cmd.SetProfileUserEvent
	(*QueryFateRelationEvent)(nil),         // 88: Cmd.QueryFateRelationEvent
	(*SyncFateRelationEvent)(nil),          // 89: Cmd.SyncFateRelationEvent
	(*QueryProfileUserEvent)(nil),          // 90: Cmd.QueryProfileUserEvent
	(*SandTableGuild)(nil),                 // 91: Cmd.SandTableGuild
	(*PointInfo)(nil),                      // 92: Cmd.PointInfo
	(*SandTableInfo)(nil),                  // 93: Cmd.SandTableInfo
	(*GvgSandTableEvent)(nil),              // 94: Cmd.GvgSandTableEvent
	(*SetReliveMethodUserEvent)(nil),       // 95: Cmd.SetReliveMethodUserEvent
	(*UIActionUserEvent)(nil),              // 96: Cmd.UIActionUserEvent
	(Command)(0),                           // 97: Cmd.Command
	(DamageType)(0),                        // 98: Cmd.DamageType
	(EDepositCardType)(0),                  // 99: Cmd.EDepositCardType
	(ELetterType)(0),                       // 100: Cmd.ELetterType
	(EAERewardMode)(0),                     // 101: Cmd.EAERewardMode
	(*ConfigParam)(nil),                    // 102: Cmd.ConfigParam
	(*UserProfileData)(nil),                // 103: Cmd.UserProfileData
	(EGCityState)(0),                       // 104: Cmd.EGCityState
	(EGvgRaidState)(0),                     // 105: Cmd.EGvgRaidState
}
var file_UserEvent_proto_depIdxs = []int32{
	97,  // 0: Cmd.FirstActionUserEvent.cmd:type_name -> Cmd.Command
	0,   // 1: Cmd.FirstActionUserEvent.param:type_name -> Cmd.EventParam
	97,  // 2: Cmd.DamageNpcUserEvent.cmd:type_name -> Cmd.Command
	0,   // 3: Cmd.DamageNpcUserEvent.param:type_name -> Cmd.EventParam
	2,   // 4: Cmd.TitleData.title_type:type_name -> Cmd.ETitleType
	97,  // 5: Cmd.NewTitle.cmd:type_name -> Cmd.Command
	0,   // 6: Cmd.NewTitle.param:type_name -> Cmd.EventParam
	11,  // 7: Cmd.NewTitle.title_data:type_name -> Cmd.TitleData
	97,  // 8: Cmd.AllTitle.cmd:type_name -> Cmd.Command
	0,   // 9: Cmd.AllTitle.param:type_name -> Cmd.EventParam
	11,  // 10: Cmd.AllTitle.title_datas:type_name -> Cmd.TitleData
	97,  // 11: Cmd.UpdateRandomUserEvent.cmd:type_name -> Cmd.Command
	0,   // 12: Cmd.UpdateRandomUserEvent.param:type_name -> Cmd.EventParam
	97,  // 13: Cmd.BuffDamageUserEvent.cmd:type_name -> Cmd.Command
	0,   // 14: Cmd.BuffDamageUserEvent.param:type_name -> Cmd.EventParam
	98,  // 15: Cmd.BuffDamageUserEvent.etype:type_name -> Cmd.DamageType
	97,  // 16: Cmd.ChargeNtfUserEvent.cmd:type_name -> Cmd.Command
	0,   // 17: Cmd.ChargeNtfUserEvent.param:type_name -> Cmd.EventParam
	99,  // 18: Cmd.DepositTypeData.type:type_name -> Cmd.EDepositCardType
	3,   // 19: Cmd.DepositTypeData.state:type_name -> Cmd.EDepositState
	97,  // 20: Cmd.ChargeQueryCmd.cmd:type_name -> Cmd.Command
	0,   // 21: Cmd.ChargeQueryCmd.param:type_name -> Cmd.EventParam
	97,  // 22: Cmd.DepositCardInfo.cmd:type_name -> Cmd.Command
	0,   // 23: Cmd.DepositCardInfo.param:type_name -> Cmd.EventParam
	17,  // 24: Cmd.DepositCardInfo.card_datas:type_name -> Cmd.DepositTypeData
	97,  // 25: Cmd.DelTransformUserEvent.cmd:type_name -> Cmd.Command
	0,   // 26: Cmd.DelTransformUserEvent.param:type_name -> Cmd.EventParam
	97,  // 27: Cmd.InviteCatFailUserEvent.cmd:type_name -> Cmd.Command
	0,   // 28: Cmd.InviteCatFailUserEvent.param:type_name -> Cmd.EventParam
	97,  // 29: Cmd.TrigNpcFuncUserEvent.cmd:type_name -> Cmd.Command
	0,   // 30: Cmd.TrigNpcFuncUserEvent.param:type_name -> Cmd.EventParam
	97,  // 31: Cmd.SystemStringUserEvent.cmd:type_name -> Cmd.Command
	0,   // 32: Cmd.SystemStringUserEvent.param:type_name -> Cmd.EventParam
	4,   // 33: Cmd.SystemStringUserEvent.etype:type_name -> Cmd.ESystemStringType
	97,  // 34: Cmd.HandCatUserEvent.cmd:type_name -> Cmd.Command
	0,   // 35: Cmd.HandCatUserEvent.param:type_name -> Cmd.EventParam
	97,  // 36: Cmd.ChangeTitle.cmd:type_name -> Cmd.Command
	0,   // 37: Cmd.ChangeTitle.param:type_name -> Cmd.EventParam
	11,  // 38: Cmd.ChangeTitle.title_data:type_name -> Cmd.TitleData
	97,  // 39: Cmd.QueryChargeCnt.cmd:type_name -> Cmd.Command
	0,   // 40: Cmd.QueryChargeCnt.param:type_name -> Cmd.EventParam
	27,  // 41: Cmd.QueryChargeCnt.info:type_name -> Cmd.ChargeCntInfo
	97,  // 42: Cmd.NTFMonthCardEnd.cmd:type_name -> Cmd.Command
	0,   // 43: Cmd.NTFMonthCardEnd.param:type_name -> Cmd.EventParam
	97,  // 44: Cmd.LoveLetterUse.cmd:type_name -> Cmd.Command
	0,   // 45: Cmd.LoveLetterUse.param:type_name -> Cmd.EventParam
	100, // 46: Cmd.LoveLetterUse.type:type_name -> Cmd.ELetterType
	97,  // 47: Cmd.QueryActivityCnt.cmd:type_name -> Cmd.Command
	0,   // 48: Cmd.QueryActivityCnt.param:type_name -> Cmd.EventParam
	31,  // 49: Cmd.QueryActivityCnt.info:type_name -> Cmd.ActivityCntItem
	97,  // 50: Cmd.UpdateActivityCnt.cmd:type_name -> Cmd.Command
	0,   // 51: Cmd.UpdateActivityCnt.param:type_name -> Cmd.EventParam
	31,  // 52: Cmd.UpdateActivityCnt.info:type_name -> Cmd.ActivityCntItem
	97,  // 53: Cmd.NtfVersionCardInfo.cmd:type_name -> Cmd.Command
	0,   // 54: Cmd.NtfVersionCardInfo.param:type_name -> Cmd.EventParam
	34,  // 55: Cmd.NtfVersionCardInfo.info:type_name -> Cmd.VersionCardInfo
	97,  // 56: Cmd.DieTimeCountEventCmd.cmd:type_name -> Cmd.Command
	0,   // 57: Cmd.DieTimeCountEventCmd.param:type_name -> Cmd.EventParam
	97,  // 58: Cmd.GetFirstShareRewardUserEvent.cmd:type_name -> Cmd.Command
	0,   // 59: Cmd.GetFirstShareRewardUserEvent.param:type_name -> Cmd.EventParam
	97,  // 60: Cmd.QueryResetTimeEventCmd.cmd:type_name -> Cmd.Command
	0,   // 61: Cmd.QueryResetTimeEventCmd.param:type_name -> Cmd.EventParam
	101, // 62: Cmd.QueryResetTimeEventCmd.etype:type_name -> Cmd.EAERewardMode
	97,  // 63: Cmd.InOutActEventCmd.cmd:type_name -> Cmd.Command
	0,   // 64: Cmd.InOutActEventCmd.param:type_name -> Cmd.EventParam
	97,  // 65: Cmd.UserEventMailCmd.cmd:type_name -> Cmd.Command
	0,   // 66: Cmd.UserEventMailCmd.param:type_name -> Cmd.EventParam
	5,   // 67: Cmd.UserEventMailCmd.eType:type_name -> Cmd.EEventMailType
	97,  // 68: Cmd.LevelupDeadUserEvent.cmd:type_name -> Cmd.Command
	0,   // 69: Cmd.LevelupDeadUserEvent.param:type_name -> Cmd.EventParam
	97,  // 70: Cmd.SwitchAutoBattleUserEvent.cmd:type_name -> Cmd.Command
	0,   // 71: Cmd.SwitchAutoBattleUserEvent.param:type_name -> Cmd.EventParam
	97,  // 72: Cmd.GoActivityMapUserEvent.cmd:type_name -> Cmd.Command
	0,   // 73: Cmd.GoActivityMapUserEvent.param:type_name -> Cmd.EventParam
	97,  // 74: Cmd.ActivityPointUserEvent.cmd:type_name -> Cmd.Command
	0,   // 75: Cmd.ActivityPointUserEvent.param:type_name -> Cmd.EventParam
	97,  // 76: Cmd.QueryFavoriteFriendUserEvent.cmd:type_name -> Cmd.Command
	0,   // 77: Cmd.QueryFavoriteFriendUserEvent.param:type_name -> Cmd.EventParam
	97,  // 78: Cmd.UpdateFavoriteFriendUserEvent.cmd:type_name -> Cmd.Command
	0,   // 79: Cmd.UpdateFavoriteFriendUserEvent.param:type_name -> Cmd.EventParam
	97,  // 80: Cmd.ActionFavoriteFriendUserEvent.cmd:type_name -> Cmd.Command
	0,   // 81: Cmd.ActionFavoriteFriendUserEvent.param:type_name -> Cmd.EventParam
	97,  // 82: Cmd.SoundStoryUserEvent.cmd:type_name -> Cmd.Command
	0,   // 83: Cmd.SoundStoryUserEvent.param:type_name -> Cmd.EventParam
	97,  // 84: Cmd.ThemeDetailsUserEvent.cmd:type_name -> Cmd.Command
	0,   // 85: Cmd.ThemeDetailsUserEvent.param:type_name -> Cmd.EventParam
	97,  // 86: Cmd.CameraActionUserEvent.cmd:type_name -> Cmd.Command
	0,   // 87: Cmd.CameraActionUserEvent.param:type_name -> Cmd.EventParam
	97,  // 88: Cmd.BifrostContributeItemUserEvent.cmd:type_name -> Cmd.Command
	0,   // 89: Cmd.BifrostContributeItemUserEvent.param:type_name -> Cmd.EventParam
	97,  // 90: Cmd.RobotOffBattleUserEvent.cmd:type_name -> Cmd.Command
	0,   // 91: Cmd.RobotOffBattleUserEvent.param:type_name -> Cmd.EventParam
	97,  // 92: Cmd.QueryAccChargeCntReward.cmd:type_name -> Cmd.Command
	0,   // 93: Cmd.QueryAccChargeCntReward.param:type_name -> Cmd.EventParam
	27,  // 94: Cmd.QueryAccChargeCntReward.infos:type_name -> Cmd.ChargeCntInfo
	97,  // 95: Cmd.ChargeSdkRequestUserEvent.cmd:type_name -> Cmd.Command
	0,   // 96: Cmd.ChargeSdkRequestUserEvent.param:type_name -> Cmd.EventParam
	97,  // 97: Cmd.ChargeSdkReplyUserEvent.cmd:type_name -> Cmd.Command
	0,   // 98: Cmd.ChargeSdkReplyUserEvent.param:type_name -> Cmd.EventParam
	97,  // 99: Cmd.ClientAISyncUserEvent.cmd:type_name -> Cmd.Command
	0,   // 100: Cmd.ClientAISyncUserEvent.param:type_name -> Cmd.EventParam
	56,  // 101: Cmd.ClientAISyncUserEvent.aidata:type_name -> Cmd.ClientAIData
	97,  // 102: Cmd.ClientAIUpdateUserEvent.cmd:type_name -> Cmd.Command
	0,   // 103: Cmd.ClientAIUpdateUserEvent.param:type_name -> Cmd.EventParam
	56,  // 104: Cmd.ClientAIUpdateUserEvent.aidata:type_name -> Cmd.ClientAIData
	97,  // 105: Cmd.GiftCodeExchangeEvent.cmd:type_name -> Cmd.Command
	0,   // 106: Cmd.GiftCodeExchangeEvent.param:type_name -> Cmd.EventParam
	97,  // 107: Cmd.SetHideOtherCmd.cmd:type_name -> Cmd.Command
	0,   // 108: Cmd.SetHideOtherCmd.param:type_name -> Cmd.EventParam
	6,   // 109: Cmd.GiftInfo.state:type_name -> Cmd.EGiftState
	97,  // 110: Cmd.GiftTimeLimitNtfUserEvent.cmd:type_name -> Cmd.Command
	0,   // 111: Cmd.GiftTimeLimitNtfUserEvent.param:type_name -> Cmd.EventParam
	61,  // 112: Cmd.GiftTimeLimitNtfUserEvent.infos:type_name -> Cmd.GiftInfo
	97,  // 113: Cmd.GiftTimeLimitBuyUserEvent.cmd:type_name -> Cmd.Command
	0,   // 114: Cmd.GiftTimeLimitBuyUserEvent.param:type_name -> Cmd.EventParam
	97,  // 115: Cmd.GiftTimeLimitActiveUserEvent.cmd:type_name -> Cmd.Command
	0,   // 116: Cmd.GiftTimeLimitActiveUserEvent.param:type_name -> Cmd.EventParam
	102, // 117: Cmd.MultiCutScene.param:type_name -> Cmd.ConfigParam
	97,  // 118: Cmd.MultiCutSceneUpdateUserEvent.cmd:type_name -> Cmd.Command
	0,   // 119: Cmd.MultiCutSceneUpdateUserEvent.param:type_name -> Cmd.EventParam
	66,  // 120: Cmd.MultiCutSceneUpdateUserEvent.updates:type_name -> Cmd.MultiCutScene
	97,  // 121: Cmd.PolicyUpdateUserEvent.cmd:type_name -> Cmd.Command
	0,   // 122: Cmd.PolicyUpdateUserEvent.param:type_name -> Cmd.EventParam
	97,  // 123: Cmd.PolicyAgreeUserEvent.cmd:type_name -> Cmd.Command
	0,   // 124: Cmd.PolicyAgreeUserEvent.param:type_name -> Cmd.EventParam
	97,  // 125: Cmd.ShowSceneObject.cmd:type_name -> Cmd.Command
	0,   // 126: Cmd.ShowSceneObject.param:type_name -> Cmd.EventParam
	97,  // 127: Cmd.DoubleAcionEvent.cmd:type_name -> Cmd.Command
	0,   // 128: Cmd.DoubleAcionEvent.param:type_name -> Cmd.EventParam
	97,  // 129: Cmd.BeginMonitorUserEvent.cmd:type_name -> Cmd.Command
	0,   // 130: Cmd.BeginMonitorUserEvent.param:type_name -> Cmd.EventParam
	97,  // 131: Cmd.StopMonitorUserEvent.cmd:type_name -> Cmd.Command
	0,   // 132: Cmd.StopMonitorUserEvent.param:type_name -> Cmd.EventParam
	97,  // 133: Cmd.StopMonitorRetUserEvent.cmd:type_name -> Cmd.Command
	0,   // 134: Cmd.StopMonitorRetUserEvent.param:type_name -> Cmd.EventParam
	97,  // 135: Cmd.MonitorGoToMapUserEvent.cmd:type_name -> Cmd.Command
	0,   // 136: Cmd.MonitorGoToMapUserEvent.param:type_name -> Cmd.EventParam
	97,  // 137: Cmd.MonitorMapEndUserEvent.cmd:type_name -> Cmd.Command
	0,   // 138: Cmd.MonitorMapEndUserEvent.param:type_name -> Cmd.EventParam
	97,  // 139: Cmd.MonitorBuildUserEvent.cmd:type_name -> Cmd.Command
	0,   // 140: Cmd.MonitorBuildUserEvent.param:type_name -> Cmd.EventParam
	97,  // 141: Cmd.GuideQuestEvent.cmd:type_name -> Cmd.Command
	0,   // 142: Cmd.GuideQuestEvent.param:type_name -> Cmd.EventParam
	97,  // 143: Cmd.ShowCardEvent.cmd:type_name -> Cmd.Command
	0,   // 144: Cmd.ShowCardEvent.param:type_name -> Cmd.EventParam
	97,  // 145: Cmd.GvgOptStatueEvent.cmd:type_name -> Cmd.Command
	0,   // 146: Cmd.GvgOptStatueEvent.param:type_name -> Cmd.EventParam
	97,  // 147: Cmd.TimeLimitIconEvent.cmd:type_name -> Cmd.Command
	0,   // 148: Cmd.TimeLimitIconEvent.param:type_name -> Cmd.EventParam
	97,  // 149: Cmd.ShowRMBGiftEvent.cmd:type_name -> Cmd.Command
	0,   // 150: Cmd.ShowRMBGiftEvent.param:type_name -> Cmd.EventParam
	82,  // 151: Cmd.ShowRMBGiftEvent.show:type_name -> Cmd.ShowGiftInfo
	97,  // 152: Cmd.ConfigActionUserEvent.cmd:type_name -> Cmd.Command
	0,   // 153: Cmd.ConfigActionUserEvent.param:type_name -> Cmd.EventParam
	7,   // 154: Cmd.ConfigActionUserEvent.action:type_name -> Cmd.EConfigAction
	84,  // 155: Cmd.ConfigActionUserEvent.infos:type_name -> Cmd.ConfigInfo
	97,  // 156: Cmd.NpcWalkStepNtfUserEvent.cmd:type_name -> Cmd.Command
	0,   // 157: Cmd.NpcWalkStepNtfUserEvent.param:type_name -> Cmd.EventParam
	97,  // 158: Cmd.SetProfileUserEvent.cmd:type_name -> Cmd.Command
	0,   // 159: Cmd.SetProfileUserEvent.param:type_name -> Cmd.EventParam
	103, // 160: Cmd.SetProfileUserEvent.profile:type_name -> Cmd.UserProfileData
	97,  // 161: Cmd.QueryFateRelationEvent.cmd:type_name -> Cmd.Command
	0,   // 162: Cmd.QueryFateRelationEvent.param:type_name -> Cmd.EventParam
	97,  // 163: Cmd.SyncFateRelationEvent.cmd:type_name -> Cmd.Command
	0,   // 164: Cmd.SyncFateRelationEvent.param:type_name -> Cmd.EventParam
	97,  // 165: Cmd.QueryProfileUserEvent.cmd:type_name -> Cmd.Command
	0,   // 166: Cmd.QueryProfileUserEvent.param:type_name -> Cmd.EventParam
	103, // 167: Cmd.QueryProfileUserEvent.profile:type_name -> Cmd.UserProfileData
	91,  // 168: Cmd.PointInfo.guild:type_name -> Cmd.SandTableGuild
	91,  // 169: Cmd.SandTableInfo.guild:type_name -> Cmd.SandTableGuild
	104, // 170: Cmd.SandTableInfo.state:type_name -> Cmd.EGCityState
	91,  // 171: Cmd.SandTableInfo.defguild:type_name -> Cmd.SandTableGuild
	92,  // 172: Cmd.SandTableInfo.point_info:type_name -> Cmd.PointInfo
	105, // 173: Cmd.SandTableInfo.raidstate:type_name -> Cmd.EGvgRaidState
	97,  // 174: Cmd.GvgSandTableEvent.cmd:type_name -> Cmd.Command
	0,   // 175: Cmd.GvgSandTableEvent.param:type_name -> Cmd.EventParam
	93,  // 176: Cmd.GvgSandTableEvent.info:type_name -> Cmd.SandTableInfo
	97,  // 177: Cmd.SetReliveMethodUserEvent.cmd:type_name -> Cmd.Command
	0,   // 178: Cmd.SetReliveMethodUserEvent.param:type_name -> Cmd.EventParam
	8,   // 179: Cmd.SetReliveMethodUserEvent.relive_method:type_name -> Cmd.EDelayReliveMethod
	97,  // 180: Cmd.UIActionUserEvent.cmd:type_name -> Cmd.Command
	0,   // 181: Cmd.UIActionUserEvent.param:type_name -> Cmd.EventParam
	182, // [182:182] is the sub-list for method output_type
	182, // [182:182] is the sub-list for method input_type
	182, // [182:182] is the sub-list for extension type_name
	182, // [182:182] is the sub-list for extension extendee
	0,   // [0:182] is the sub-list for field type_name
}

func init() { file_UserEvent_proto_init() }
func file_UserEvent_proto_init() {
	if File_UserEvent_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	file_SceneUser_proto_init()
	file_ActivityEvent_proto_init()
	file_SceneItem_proto_init()
	file_SessionShop_proto_init()
	file_GuildCmd_proto_init()
	file_FuBenCmd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_UserEvent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstActionUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DamageNpcUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TitleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRandomUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffDamageUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeNtfUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositTypeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositCardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeQueryCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelTransformUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteCatFailUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrigNpcFuncUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemStringUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandCatUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeCntInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChargeCnt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NTFMonthCardEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoveLetterUse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityCntItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryActivityCnt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateActivityCnt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfVersionCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DieTimeCountEventCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFirstShareRewardUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResetTimeEventCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InOutActEventCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventMailCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelupDeadUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchAutoBattleUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoActivityMapUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityPointUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFavoriteFriendUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFavoriteFriendUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionFavoriteFriendUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoundStoryUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThemeDetailsUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraActionUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BifrostContributeItemUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotOffBattleUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAccChargeCntReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeSdkRequestUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeSdkReplyUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientAIData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientAISyncUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientAIUpdateUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftCodeExchangeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHideOtherCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftTimeLimitNtfUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftTimeLimitBuyUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftTimeLimitActiveUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiCutScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiCutSceneUpdateUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyUpdateUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyAgreeUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowSceneObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleAcionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginMonitorUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopMonitorUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopMonitorRetUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorGoToMapUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorMapEndUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorBuildUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuideQuestEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowCardEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgOptStatueEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeLimitIconEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowGiftInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowRMBGiftEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigActionUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpcWalkStepNtfUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProfileUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFateRelationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncFateRelationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProfileUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SandTableGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SandTableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgSandTableEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReliveMethodUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserEvent_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIActionUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_UserEvent_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   88,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_UserEvent_proto_goTypes,
		DependencyIndexes: file_UserEvent_proto_depIdxs,
		EnumInfos:         file_UserEvent_proto_enumTypes,
		MessageInfos:      file_UserEvent_proto_msgTypes,
	}.Build()
	File_UserEvent_proto = out.File
	file_UserEvent_proto_rawDesc = nil
	file_UserEvent_proto_goTypes = nil
	file_UserEvent_proto_depIdxs = nil
}
