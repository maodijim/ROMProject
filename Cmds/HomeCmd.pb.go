// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: HomeCmd.proto

package Cmd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HomeCParam int32

const (
	HomeCParam_HOMECPARAM_QUERYHOMEDATA       HomeCParam = 1
	HomeCParam_HOMECPARAM_FURNITUREACTION     HomeCParam = 2
	HomeCParam_HOMECPARAM_FURNITUREOPER       HomeCParam = 3
	HomeCParam_HOMECPARAM_FURNITUREUPDATE     HomeCParam = 4
	HomeCParam_HOMECPARAM_FURNITUREDATAUPDATE HomeCParam = 5
	HomeCParam_HOMECPARAM_HOUSEACTION         HomeCParam = 6
	HomeCParam_HOMECPARAM_HOUSEDATAUPDATE     HomeCParam = 7
	HomeCParam_HOMECPARAM_PETFURNITUREACTION  HomeCParam = 9
	HomeCParam_HOMECPARAM_PRAY                HomeCParam = 10
	HomeCParam_HOMECPARAM_ENTERHOME           HomeCParam = 11
	HomeCParam_HOMECPARAM_QUERYHOUSEDATA      HomeCParam = 12
	HomeCParam_HOMECPARAM_HOUSE_OPTUPDATE     HomeCParam = 13
	HomeCParam_HOMECPARAM_PRINTACTION         HomeCParam = 14
	HomeCParam_HOMECPARAM_PRINTUPDATE         HomeCParam = 15
	HomeCParam_HOMECPARAM_BOARDITEM_QUERY     HomeCParam = 16
	HomeCParam_HOMECPARAM_BOARDITEM_UPDATE    HomeCParam = 17
	HomeCParam_HOMECPARAM_MSGITEM_UPDATE      HomeCParam = 18
	HomeCParam_HOMECPARAM_EVENTITEM_QUERY     HomeCParam = 19
	HomeCParam_HOMECPARAM_QUERY_WOODRANK      HomeCParam = 20
)

// Enum value maps for HomeCParam.
var (
	HomeCParam_name = map[int32]string{
		1:  "HOMECPARAM_QUERYHOMEDATA",
		2:  "HOMECPARAM_FURNITUREACTION",
		3:  "HOMECPARAM_FURNITUREOPER",
		4:  "HOMECPARAM_FURNITUREUPDATE",
		5:  "HOMECPARAM_FURNITUREDATAUPDATE",
		6:  "HOMECPARAM_HOUSEACTION",
		7:  "HOMECPARAM_HOUSEDATAUPDATE",
		9:  "HOMECPARAM_PETFURNITUREACTION",
		10: "HOMECPARAM_PRAY",
		11: "HOMECPARAM_ENTERHOME",
		12: "HOMECPARAM_QUERYHOUSEDATA",
		13: "HOMECPARAM_HOUSE_OPTUPDATE",
		14: "HOMECPARAM_PRINTACTION",
		15: "HOMECPARAM_PRINTUPDATE",
		16: "HOMECPARAM_BOARDITEM_QUERY",
		17: "HOMECPARAM_BOARDITEM_UPDATE",
		18: "HOMECPARAM_MSGITEM_UPDATE",
		19: "HOMECPARAM_EVENTITEM_QUERY",
		20: "HOMECPARAM_QUERY_WOODRANK",
	}
	HomeCParam_value = map[string]int32{
		"HOMECPARAM_QUERYHOMEDATA":       1,
		"HOMECPARAM_FURNITUREACTION":     2,
		"HOMECPARAM_FURNITUREOPER":       3,
		"HOMECPARAM_FURNITUREUPDATE":     4,
		"HOMECPARAM_FURNITUREDATAUPDATE": 5,
		"HOMECPARAM_HOUSEACTION":         6,
		"HOMECPARAM_HOUSEDATAUPDATE":     7,
		"HOMECPARAM_PETFURNITUREACTION":  9,
		"HOMECPARAM_PRAY":                10,
		"HOMECPARAM_ENTERHOME":           11,
		"HOMECPARAM_QUERYHOUSEDATA":      12,
		"HOMECPARAM_HOUSE_OPTUPDATE":     13,
		"HOMECPARAM_PRINTACTION":         14,
		"HOMECPARAM_PRINTUPDATE":         15,
		"HOMECPARAM_BOARDITEM_QUERY":     16,
		"HOMECPARAM_BOARDITEM_UPDATE":    17,
		"HOMECPARAM_MSGITEM_UPDATE":      18,
		"HOMECPARAM_EVENTITEM_QUERY":     19,
		"HOMECPARAM_QUERY_WOODRANK":      20,
	}
)

func (x HomeCParam) Enum() *HomeCParam {
	p := new(HomeCParam)
	*p = x
	return p
}

func (x HomeCParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HomeCParam) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[0].Descriptor()
}

func (HomeCParam) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[0]
}

func (x HomeCParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HomeCParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HomeCParam(num)
	return nil
}

// Deprecated: Use HomeCParam.Descriptor instead.
func (HomeCParam) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{0}
}

type EHouseType int32

const (
	EHouseType_EHOUSETYPE_MIN     EHouseType = 0
	EHouseType_EHOUSETYPE_PRIVATE EHouseType = 1
	EHouseType_EHOUSETYPE_MAX     EHouseType = 2
)

// Enum value maps for EHouseType.
var (
	EHouseType_name = map[int32]string{
		0: "EHOUSETYPE_MIN",
		1: "EHOUSETYPE_PRIVATE",
		2: "EHOUSETYPE_MAX",
	}
	EHouseType_value = map[string]int32{
		"EHOUSETYPE_MIN":     0,
		"EHOUSETYPE_PRIVATE": 1,
		"EHOUSETYPE_MAX":     2,
	}
)

func (x EHouseType) Enum() *EHouseType {
	p := new(EHouseType)
	*p = x
	return p
}

func (x EHouseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHouseType) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[1].Descriptor()
}

func (EHouseType) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[1]
}

func (x EHouseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EHouseType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EHouseType(num)
	return nil
}

// Deprecated: Use EHouseType.Descriptor instead.
func (EHouseType) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{1}
}

type EHouseState int32

const (
	EHouseState_EHOUSESTATE_MIN  EHouseState = 0
	EHouseState_EHOUSESTATE_IDLE EHouseState = 1
	EHouseState_EHOUSESTATE_EDIT EHouseState = 2
	EHouseState_EHOUSESTATE_MAX  EHouseState = 3
)

// Enum value maps for EHouseState.
var (
	EHouseState_name = map[int32]string{
		0: "EHOUSESTATE_MIN",
		1: "EHOUSESTATE_IDLE",
		2: "EHOUSESTATE_EDIT",
		3: "EHOUSESTATE_MAX",
	}
	EHouseState_value = map[string]int32{
		"EHOUSESTATE_MIN":  0,
		"EHOUSESTATE_IDLE": 1,
		"EHOUSESTATE_EDIT": 2,
		"EHOUSESTATE_MAX":  3,
	}
)

func (x EHouseState) Enum() *EHouseState {
	p := new(EHouseState)
	*p = x
	return p
}

func (x EHouseState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHouseState) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[2].Descriptor()
}

func (EHouseState) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[2]
}

func (x EHouseState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EHouseState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EHouseState(num)
	return nil
}

// Deprecated: Use EHouseState.Descriptor instead.
func (EHouseState) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{2}
}

type EHouseOpen int32

const (
	EHouseOpen_EHOUSEOPEN_MIN    EHouseOpen = 0
	EHouseOpen_EHOUSEOPEN_ALL    EHouseOpen = 1
	EHouseOpen_EHOUSEOPEN_FRIEND EHouseOpen = 2
	EHouseOpen_EHOUSEOPEN_MAX    EHouseOpen = 3
)

// Enum value maps for EHouseOpen.
var (
	EHouseOpen_name = map[int32]string{
		0: "EHOUSEOPEN_MIN",
		1: "EHOUSEOPEN_ALL",
		2: "EHOUSEOPEN_FRIEND",
		3: "EHOUSEOPEN_MAX",
	}
	EHouseOpen_value = map[string]int32{
		"EHOUSEOPEN_MIN":    0,
		"EHOUSEOPEN_ALL":    1,
		"EHOUSEOPEN_FRIEND": 2,
		"EHOUSEOPEN_MAX":    3,
	}
)

func (x EHouseOpen) Enum() *EHouseOpen {
	p := new(EHouseOpen)
	*p = x
	return p
}

func (x EHouseOpen) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHouseOpen) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[3].Descriptor()
}

func (EHouseOpen) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[3]
}

func (x EHouseOpen) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EHouseOpen) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EHouseOpen(num)
	return nil
}

// Deprecated: Use EHouseOpen.Descriptor instead.
func (EHouseOpen) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{3}
}

type EBoardOpen int32

const (
	EBoardOpen_EBOARDOPEN_MIN    EBoardOpen = 0
	EBoardOpen_EBOARDOPEN_ALL    EBoardOpen = 1
	EBoardOpen_EBOARDOPEN_FRIEND EBoardOpen = 2
	EBoardOpen_EBOARDOPEN_CLOSE  EBoardOpen = 3
	EBoardOpen_EBOARDOPEN_MAX    EBoardOpen = 4
)

// Enum value maps for EBoardOpen.
var (
	EBoardOpen_name = map[int32]string{
		0: "EBOARDOPEN_MIN",
		1: "EBOARDOPEN_ALL",
		2: "EBOARDOPEN_FRIEND",
		3: "EBOARDOPEN_CLOSE",
		4: "EBOARDOPEN_MAX",
	}
	EBoardOpen_value = map[string]int32{
		"EBOARDOPEN_MIN":    0,
		"EBOARDOPEN_ALL":    1,
		"EBOARDOPEN_FRIEND": 2,
		"EBOARDOPEN_CLOSE":  3,
		"EBOARDOPEN_MAX":    4,
	}
)

func (x EBoardOpen) Enum() *EBoardOpen {
	p := new(EBoardOpen)
	*p = x
	return p
}

func (x EBoardOpen) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBoardOpen) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[4].Descriptor()
}

func (EBoardOpen) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[4]
}

func (x EBoardOpen) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBoardOpen) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBoardOpen(num)
	return nil
}

// Deprecated: Use EBoardOpen.Descriptor instead.
func (EBoardOpen) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{4}
}

type EEnterArea int32

const (
	EEnterArea_EENTERAREA_MIN    EEnterArea = 0
	EEnterArea_EENTERAREA_HOUSE  EEnterArea = 1
	EEnterArea_EENTERAREA_GARDEN EEnterArea = 2
	EEnterArea_EENTERAREA_MAX    EEnterArea = 3
)

// Enum value maps for EEnterArea.
var (
	EEnterArea_name = map[int32]string{
		0: "EENTERAREA_MIN",
		1: "EENTERAREA_HOUSE",
		2: "EENTERAREA_GARDEN",
		3: "EENTERAREA_MAX",
	}
	EEnterArea_value = map[string]int32{
		"EENTERAREA_MIN":    0,
		"EENTERAREA_HOUSE":  1,
		"EENTERAREA_GARDEN": 2,
		"EENTERAREA_MAX":    3,
	}
)

func (x EEnterArea) Enum() *EEnterArea {
	p := new(EEnterArea)
	*p = x
	return p
}

func (x EEnterArea) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEnterArea) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[5].Descriptor()
}

func (EEnterArea) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[5]
}

func (x EEnterArea) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEnterArea) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEnterArea(num)
	return nil
}

// Deprecated: Use EEnterArea.Descriptor instead.
func (EEnterArea) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{5}
}

type EGardenType int32

const (
	EGardenType_EGARDENTYPE_MIN EGardenType = 0
	EGardenType_EGARDENTYPE_MAX EGardenType = 1
)

// Enum value maps for EGardenType.
var (
	EGardenType_name = map[int32]string{
		0: "EGARDENTYPE_MIN",
		1: "EGARDENTYPE_MAX",
	}
	EGardenType_value = map[string]int32{
		"EGARDENTYPE_MIN": 0,
		"EGARDENTYPE_MAX": 1,
	}
)

func (x EGardenType) Enum() *EGardenType {
	p := new(EGardenType)
	*p = x
	return p
}

func (x EGardenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGardenType) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[6].Descriptor()
}

func (EGardenType) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[6]
}

func (x EGardenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGardenType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGardenType(num)
	return nil
}

// Deprecated: Use EGardenType.Descriptor instead.
func (EGardenType) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{6}
}

type EGardenState int32

const (
	EGardenState_EGARDENSTATE_MIN EGardenState = 0
	EGardenState_EGARDENSTATE_MAX EGardenState = 1
)

// Enum value maps for EGardenState.
var (
	EGardenState_name = map[int32]string{
		0: "EGARDENSTATE_MIN",
		1: "EGARDENSTATE_MAX",
	}
	EGardenState_value = map[string]int32{
		"EGARDENSTATE_MIN": 0,
		"EGARDENSTATE_MAX": 1,
	}
)

func (x EGardenState) Enum() *EGardenState {
	p := new(EGardenState)
	*p = x
	return p
}

func (x EGardenState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGardenState) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[7].Descriptor()
}

func (EGardenState) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[7]
}

func (x EGardenState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGardenState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGardenState(num)
	return nil
}

// Deprecated: Use EGardenState.Descriptor instead.
func (EGardenState) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{7}
}

type EFurnitureAction int32

const (
	EFurnitureAction_EFURNITUREACTION_MIN       EFurnitureAction = 0
	EFurnitureAction_EFURNITUREACTION_PUTON     EFurnitureAction = 1
	EFurnitureAction_EFURNITUREACTION_PUTOFF    EFurnitureAction = 2
	EFurnitureAction_EFURNITUREACTION_EDIT      EFurnitureAction = 3
	EFurnitureAction_EFURNITUREACTION_PUTOFFALL EFurnitureAction = 4
	EFurnitureAction_EFURNITUREACTION_MAX       EFurnitureAction = 5
)

// Enum value maps for EFurnitureAction.
var (
	EFurnitureAction_name = map[int32]string{
		0: "EFURNITUREACTION_MIN",
		1: "EFURNITUREACTION_PUTON",
		2: "EFURNITUREACTION_PUTOFF",
		3: "EFURNITUREACTION_EDIT",
		4: "EFURNITUREACTION_PUTOFFALL",
		5: "EFURNITUREACTION_MAX",
	}
	EFurnitureAction_value = map[string]int32{
		"EFURNITUREACTION_MIN":       0,
		"EFURNITUREACTION_PUTON":     1,
		"EFURNITUREACTION_PUTOFF":    2,
		"EFURNITUREACTION_EDIT":      3,
		"EFURNITUREACTION_PUTOFFALL": 4,
		"EFURNITUREACTION_MAX":       5,
	}
)

func (x EFurnitureAction) Enum() *EFurnitureAction {
	p := new(EFurnitureAction)
	*p = x
	return p
}

func (x EFurnitureAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFurnitureAction) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[8].Descriptor()
}

func (EFurnitureAction) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[8]
}

func (x EFurnitureAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFurnitureAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFurnitureAction(num)
	return nil
}

// Deprecated: Use EFurnitureAction.Descriptor instead.
func (EFurnitureAction) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{8}
}

type EFurnitureOper int32

const (
	EFurnitureOper_EFURNITUREOPER_MIN          EFurnitureOper = 1
	EFurnitureOper_EFURNITUREOPER_SEAT         EFurnitureOper = 2
	EFurnitureOper_EFURNITUREOPER_STOP         EFurnitureOper = 3
	EFurnitureOper_EFURNITUREOPER_PRAY         EFurnitureOper = 4
	EFurnitureOper_EFURNITUREOPER_MIRROR       EFurnitureOper = 5
	EFurnitureOper_EFURNITUREOPER_ON           EFurnitureOper = 6
	EFurnitureOper_EFURNITUREOPER_OFF          EFurnitureOper = 7
	EFurnitureOper_EFURNITUREOPER_WEATHER      EFurnitureOper = 8
	EFurnitureOper_EFURNITUREOPER_REWARD       EFurnitureOper = 9
	EFurnitureOper_EFURNITUREOPER_SEAT_ON      EFurnitureOper = 10
	EFurnitureOper_EFURNITUREOPER_SEAT_OFF     EFurnitureOper = 11
	EFurnitureOper_EFURNITUREOPER_PHOTO        EFurnitureOper = 12
	EFurnitureOper_EFURNITUREOPER_RADIO_QUERY  EFurnitureOper = 13
	EFurnitureOper_EFURNITUREOPER_RADIO_DEMAND EFurnitureOper = 14
	EFurnitureOper_EFURNITUREOPER_ACTION       EFurnitureOper = 15
	EFurnitureOper_EFURNITUREOPER_BOARD_QUERY  EFurnitureOper = 16
	EFurnitureOper_EFURNITUREOPER_BOARD_ADDMSG EFurnitureOper = 17
	EFurnitureOper_EFURNITUREOPER_BOARD_DELMSG EFurnitureOper = 18
	EFurnitureOper_EFURNITUREOPER_PUTSTORE     EFurnitureOper = 19
	EFurnitureOper_EFURNITUREOPER_OFFSTORE     EFurnitureOper = 20
	EFurnitureOper_EFURNITUREOPER_SAVEMAP      EFurnitureOper = 21
	EFurnitureOper_EFURNITUREOPER_WOOD_QUERY   EFurnitureOper = 22
	EFurnitureOper_EFURNITUREOPER_WOOD_SET     EFurnitureOper = 23
	EFurnitureOper_EFURNITUREOPER_WOOD_OVER    EFurnitureOper = 24
	EFurnitureOper_EFURNITUREOPER_WOOD_CLEAR   EFurnitureOper = 25
	EFurnitureOper_EFURNITUREOPER_EVENT_QUERY  EFurnitureOper = 26
	EFurnitureOper_EFURNITUREOPER_MAX          EFurnitureOper = 27
)

// Enum value maps for EFurnitureOper.
var (
	EFurnitureOper_name = map[int32]string{
		1:  "EFURNITUREOPER_MIN",
		2:  "EFURNITUREOPER_SEAT",
		3:  "EFURNITUREOPER_STOP",
		4:  "EFURNITUREOPER_PRAY",
		5:  "EFURNITUREOPER_MIRROR",
		6:  "EFURNITUREOPER_ON",
		7:  "EFURNITUREOPER_OFF",
		8:  "EFURNITUREOPER_WEATHER",
		9:  "EFURNITUREOPER_REWARD",
		10: "EFURNITUREOPER_SEAT_ON",
		11: "EFURNITUREOPER_SEAT_OFF",
		12: "EFURNITUREOPER_PHOTO",
		13: "EFURNITUREOPER_RADIO_QUERY",
		14: "EFURNITUREOPER_RADIO_DEMAND",
		15: "EFURNITUREOPER_ACTION",
		16: "EFURNITUREOPER_BOARD_QUERY",
		17: "EFURNITUREOPER_BOARD_ADDMSG",
		18: "EFURNITUREOPER_BOARD_DELMSG",
		19: "EFURNITUREOPER_PUTSTORE",
		20: "EFURNITUREOPER_OFFSTORE",
		21: "EFURNITUREOPER_SAVEMAP",
		22: "EFURNITUREOPER_WOOD_QUERY",
		23: "EFURNITUREOPER_WOOD_SET",
		24: "EFURNITUREOPER_WOOD_OVER",
		25: "EFURNITUREOPER_WOOD_CLEAR",
		26: "EFURNITUREOPER_EVENT_QUERY",
		27: "EFURNITUREOPER_MAX",
	}
	EFurnitureOper_value = map[string]int32{
		"EFURNITUREOPER_MIN":          1,
		"EFURNITUREOPER_SEAT":         2,
		"EFURNITUREOPER_STOP":         3,
		"EFURNITUREOPER_PRAY":         4,
		"EFURNITUREOPER_MIRROR":       5,
		"EFURNITUREOPER_ON":           6,
		"EFURNITUREOPER_OFF":          7,
		"EFURNITUREOPER_WEATHER":      8,
		"EFURNITUREOPER_REWARD":       9,
		"EFURNITUREOPER_SEAT_ON":      10,
		"EFURNITUREOPER_SEAT_OFF":     11,
		"EFURNITUREOPER_PHOTO":        12,
		"EFURNITUREOPER_RADIO_QUERY":  13,
		"EFURNITUREOPER_RADIO_DEMAND": 14,
		"EFURNITUREOPER_ACTION":       15,
		"EFURNITUREOPER_BOARD_QUERY":  16,
		"EFURNITUREOPER_BOARD_ADDMSG": 17,
		"EFURNITUREOPER_BOARD_DELMSG": 18,
		"EFURNITUREOPER_PUTSTORE":     19,
		"EFURNITUREOPER_OFFSTORE":     20,
		"EFURNITUREOPER_SAVEMAP":      21,
		"EFURNITUREOPER_WOOD_QUERY":   22,
		"EFURNITUREOPER_WOOD_SET":     23,
		"EFURNITUREOPER_WOOD_OVER":    24,
		"EFURNITUREOPER_WOOD_CLEAR":   25,
		"EFURNITUREOPER_EVENT_QUERY":  26,
		"EFURNITUREOPER_MAX":          27,
	}
)

func (x EFurnitureOper) Enum() *EFurnitureOper {
	p := new(EFurnitureOper)
	*p = x
	return p
}

func (x EFurnitureOper) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFurnitureOper) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[9].Descriptor()
}

func (EFurnitureOper) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[9]
}

func (x EFurnitureOper) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFurnitureOper) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFurnitureOper(num)
	return nil
}

// Deprecated: Use EFurnitureOper.Descriptor instead.
func (EFurnitureOper) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{9}
}

type EFurnitureData int32

const (
	EFurnitureData_EFURNITUREDATA_MIN        EFurnitureData = 0
	EFurnitureData_EFURNITUREDATA_ANGLE      EFurnitureData = 1
	EFurnitureData_EFURNITUREDATA_LV         EFurnitureData = 2
	EFurnitureData_EFURNITUREDATA_ROW        EFurnitureData = 3
	EFurnitureData_EFURNITUREDATA_COL        EFurnitureData = 4
	EFurnitureData_EFURNITUREDATA_FLOOR      EFurnitureData = 5
	EFurnitureData_EFURNITUREDATA_STATE      EFurnitureData = 6
	EFurnitureData_EFURNITUREDATA_SEATS      EFurnitureData = 7
	EFurnitureData_EFURNITUREDATA_REWARDTIME EFurnitureData = 8
	EFurnitureData_EFURNITUREDATA_PHOTO      EFurnitureData = 9
	EFurnitureData_EFURNITUREDATA_NPC        EFurnitureData = 10
	EFurnitureData_EFURNITUREDATA_MAX        EFurnitureData = 11
)

// Enum value maps for EFurnitureData.
var (
	EFurnitureData_name = map[int32]string{
		0:  "EFURNITUREDATA_MIN",
		1:  "EFURNITUREDATA_ANGLE",
		2:  "EFURNITUREDATA_LV",
		3:  "EFURNITUREDATA_ROW",
		4:  "EFURNITUREDATA_COL",
		5:  "EFURNITUREDATA_FLOOR",
		6:  "EFURNITUREDATA_STATE",
		7:  "EFURNITUREDATA_SEATS",
		8:  "EFURNITUREDATA_REWARDTIME",
		9:  "EFURNITUREDATA_PHOTO",
		10: "EFURNITUREDATA_NPC",
		11: "EFURNITUREDATA_MAX",
	}
	EFurnitureData_value = map[string]int32{
		"EFURNITUREDATA_MIN":        0,
		"EFURNITUREDATA_ANGLE":      1,
		"EFURNITUREDATA_LV":         2,
		"EFURNITUREDATA_ROW":        3,
		"EFURNITUREDATA_COL":        4,
		"EFURNITUREDATA_FLOOR":      5,
		"EFURNITUREDATA_STATE":      6,
		"EFURNITUREDATA_SEATS":      7,
		"EFURNITUREDATA_REWARDTIME": 8,
		"EFURNITUREDATA_PHOTO":      9,
		"EFURNITUREDATA_NPC":        10,
		"EFURNITUREDATA_MAX":        11,
	}
)

func (x EFurnitureData) Enum() *EFurnitureData {
	p := new(EFurnitureData)
	*p = x
	return p
}

func (x EFurnitureData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFurnitureData) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[10].Descriptor()
}

func (EFurnitureData) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[10]
}

func (x EFurnitureData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFurnitureData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFurnitureData(num)
	return nil
}

// Deprecated: Use EFurnitureData.Descriptor instead.
func (EFurnitureData) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{10}
}

type EHouseAction int32

const (
	EHouseAction_EHOUSEACTION_MIN       EHouseAction = 0
	EHouseAction_EHOUSEACTION_DEC       EHouseAction = 1
	EHouseAction_EHOUSEACTION_EDIT_MODE EHouseAction = 2
	EHouseAction_EHOUSEACTION_FREE_MODE EHouseAction = 3
	EHouseAction_EHOUSEACTION_GUIDE_SET EHouseAction = 4
	EHouseAction_EHOUSEACTION_MAX       EHouseAction = 5
)

// Enum value maps for EHouseAction.
var (
	EHouseAction_name = map[int32]string{
		0: "EHOUSEACTION_MIN",
		1: "EHOUSEACTION_DEC",
		2: "EHOUSEACTION_EDIT_MODE",
		3: "EHOUSEACTION_FREE_MODE",
		4: "EHOUSEACTION_GUIDE_SET",
		5: "EHOUSEACTION_MAX",
	}
	EHouseAction_value = map[string]int32{
		"EHOUSEACTION_MIN":       0,
		"EHOUSEACTION_DEC":       1,
		"EHOUSEACTION_EDIT_MODE": 2,
		"EHOUSEACTION_FREE_MODE": 3,
		"EHOUSEACTION_GUIDE_SET": 4,
		"EHOUSEACTION_MAX":       5,
	}
)

func (x EHouseAction) Enum() *EHouseAction {
	p := new(EHouseAction)
	*p = x
	return p
}

func (x EHouseAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHouseAction) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[11].Descriptor()
}

func (EHouseAction) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[11]
}

func (x EHouseAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EHouseAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EHouseAction(num)
	return nil
}

// Deprecated: Use EHouseAction.Descriptor instead.
func (EHouseAction) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{11}
}

type EHouseData int32

const (
	EHouseData_EHOUSEDATA_MIN            EHouseData = 0
	EHouseData_EHOUSEDATA_DECORATE       EHouseData = 1
	EHouseData_EHOUSEDATA_STATE          EHouseData = 2
	EHouseData_EHOUSEDATA_PET            EHouseData = 3
	EHouseData_EHOUSEDATA_RADIO          EHouseData = 4
	EHouseData_EHOUSEDATA_FIREREWARDTIME EHouseData = 5
	EHouseData_EHOUSEDATA_MAX            EHouseData = 7
)

// Enum value maps for EHouseData.
var (
	EHouseData_name = map[int32]string{
		0: "EHOUSEDATA_MIN",
		1: "EHOUSEDATA_DECORATE",
		2: "EHOUSEDATA_STATE",
		3: "EHOUSEDATA_PET",
		4: "EHOUSEDATA_RADIO",
		5: "EHOUSEDATA_FIREREWARDTIME",
		7: "EHOUSEDATA_MAX",
	}
	EHouseData_value = map[string]int32{
		"EHOUSEDATA_MIN":            0,
		"EHOUSEDATA_DECORATE":       1,
		"EHOUSEDATA_STATE":          2,
		"EHOUSEDATA_PET":            3,
		"EHOUSEDATA_RADIO":          4,
		"EHOUSEDATA_FIREREWARDTIME": 5,
		"EHOUSEDATA_MAX":            7,
	}
)

func (x EHouseData) Enum() *EHouseData {
	p := new(EHouseData)
	*p = x
	return p
}

func (x EHouseData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHouseData) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[12].Descriptor()
}

func (EHouseData) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[12]
}

func (x EHouseData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EHouseData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EHouseData(num)
	return nil
}

// Deprecated: Use EHouseData.Descriptor instead.
func (EHouseData) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{12}
}

type EPetFurnitureAction int32

const (
	EPetFurnitureAction_EPETFURNITUREACTION_MIN          EPetFurnitureAction = 0
	EPetFurnitureAction_EPETFURNITUREACTION_UNLOCK       EPetFurnitureAction = 1
	EPetFurnitureAction_EPETFURNITUREACTION_PETON        EPetFurnitureAction = 2
	EPetFurnitureAction_EPETFURNITUREACTION_PETOFF       EPetFurnitureAction = 3
	EPetFurnitureAction_EPETFURNITUREACTION_QUERYPETINFO EPetFurnitureAction = 4
	EPetFurnitureAction_EPETFURNITUREACTION_MAX          EPetFurnitureAction = 5
)

// Enum value maps for EPetFurnitureAction.
var (
	EPetFurnitureAction_name = map[int32]string{
		0: "EPETFURNITUREACTION_MIN",
		1: "EPETFURNITUREACTION_UNLOCK",
		2: "EPETFURNITUREACTION_PETON",
		3: "EPETFURNITUREACTION_PETOFF",
		4: "EPETFURNITUREACTION_QUERYPETINFO",
		5: "EPETFURNITUREACTION_MAX",
	}
	EPetFurnitureAction_value = map[string]int32{
		"EPETFURNITUREACTION_MIN":          0,
		"EPETFURNITUREACTION_UNLOCK":       1,
		"EPETFURNITUREACTION_PETON":        2,
		"EPETFURNITUREACTION_PETOFF":       3,
		"EPETFURNITUREACTION_QUERYPETINFO": 4,
		"EPETFURNITUREACTION_MAX":          5,
	}
)

func (x EPetFurnitureAction) Enum() *EPetFurnitureAction {
	p := new(EPetFurnitureAction)
	*p = x
	return p
}

func (x EPetFurnitureAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPetFurnitureAction) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[13].Descriptor()
}

func (EPetFurnitureAction) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[13]
}

func (x EPetFurnitureAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPetFurnitureAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPetFurnitureAction(num)
	return nil
}

// Deprecated: Use EPetFurnitureAction.Descriptor instead.
func (EPetFurnitureAction) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{13}
}

type EOptData int32

const (
	EOptData_EOPTDATA_MIN             EOptData = 0
	EOptData_EOPTDATA_OPEN            EOptData = 1
	EOptData_EOPTDATA_FURNITURE_SHOW  EOptData = 2
	EOptData_EOPTDATA_FORBID_SELF     EOptData = 3
	EOptData_EOPTDATA_FORBID_OTHER    EOptData = 4
	EOptData_EOPTDATA_NAME            EOptData = 5
	EOptData_EOPTDATA_SIGN            EOptData = 6
	EOptData_EOPTDATA_FURNITURE_LV    EOptData = 7
	EOptData_EOPTDATA_FURNITURE_SCORE EOptData = 8
	EOptData_EOPTDATA_LEVELUP         EOptData = 9
	EOptData_EOPTDATA_GARDENHOUSE     EOptData = 10
	EOptData_EOPTDATA_BOARDOPEN       EOptData = 11
	EOptData_EOPTDATA_ENTERAREA       EOptData = 12
	EOptData_EOPTDATA_BOARDMSG        EOptData = 13
	EOptData_EOPTDATA_VISITCOUNT      EOptData = 14
	EOptData_EOPTDATA_DAYVISITCOUNT   EOptData = 15
	EOptData_EOPTDATA_MAX             EOptData = 16
)

// Enum value maps for EOptData.
var (
	EOptData_name = map[int32]string{
		0:  "EOPTDATA_MIN",
		1:  "EOPTDATA_OPEN",
		2:  "EOPTDATA_FURNITURE_SHOW",
		3:  "EOPTDATA_FORBID_SELF",
		4:  "EOPTDATA_FORBID_OTHER",
		5:  "EOPTDATA_NAME",
		6:  "EOPTDATA_SIGN",
		7:  "EOPTDATA_FURNITURE_LV",
		8:  "EOPTDATA_FURNITURE_SCORE",
		9:  "EOPTDATA_LEVELUP",
		10: "EOPTDATA_GARDENHOUSE",
		11: "EOPTDATA_BOARDOPEN",
		12: "EOPTDATA_ENTERAREA",
		13: "EOPTDATA_BOARDMSG",
		14: "EOPTDATA_VISITCOUNT",
		15: "EOPTDATA_DAYVISITCOUNT",
		16: "EOPTDATA_MAX",
	}
	EOptData_value = map[string]int32{
		"EOPTDATA_MIN":             0,
		"EOPTDATA_OPEN":            1,
		"EOPTDATA_FURNITURE_SHOW":  2,
		"EOPTDATA_FORBID_SELF":     3,
		"EOPTDATA_FORBID_OTHER":    4,
		"EOPTDATA_NAME":            5,
		"EOPTDATA_SIGN":            6,
		"EOPTDATA_FURNITURE_LV":    7,
		"EOPTDATA_FURNITURE_SCORE": 8,
		"EOPTDATA_LEVELUP":         9,
		"EOPTDATA_GARDENHOUSE":     10,
		"EOPTDATA_BOARDOPEN":       11,
		"EOPTDATA_ENTERAREA":       12,
		"EOPTDATA_BOARDMSG":        13,
		"EOPTDATA_VISITCOUNT":      14,
		"EOPTDATA_DAYVISITCOUNT":   15,
		"EOPTDATA_MAX":             16,
	}
)

func (x EOptData) Enum() *EOptData {
	p := new(EOptData)
	*p = x
	return p
}

func (x EOptData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOptData) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[14].Descriptor()
}

func (EOptData) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[14]
}

func (x EOptData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EOptData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EOptData(num)
	return nil
}

// Deprecated: Use EOptData.Descriptor instead.
func (EOptData) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{14}
}

type EPrintAction int32

const (
	EPrintAction_EPRINTACTION_MIN      EPrintAction = 0
	EPrintAction_EPRINTACTION_QUERY    EPrintAction = 1
	EPrintAction_EPRINTACTION_PRAISE   EPrintAction = 2
	EPrintAction_EPRINTACTION_UNPRAISE EPrintAction = 3
	EPrintAction_EPRINTACTION_MAX      EPrintAction = 4
)

// Enum value maps for EPrintAction.
var (
	EPrintAction_name = map[int32]string{
		0: "EPRINTACTION_MIN",
		1: "EPRINTACTION_QUERY",
		2: "EPRINTACTION_PRAISE",
		3: "EPRINTACTION_UNPRAISE",
		4: "EPRINTACTION_MAX",
	}
	EPrintAction_value = map[string]int32{
		"EPRINTACTION_MIN":      0,
		"EPRINTACTION_QUERY":    1,
		"EPRINTACTION_PRAISE":   2,
		"EPRINTACTION_UNPRAISE": 3,
		"EPRINTACTION_MAX":      4,
	}
)

func (x EPrintAction) Enum() *EPrintAction {
	p := new(EPrintAction)
	*p = x
	return p
}

func (x EPrintAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPrintAction) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[15].Descriptor()
}

func (EPrintAction) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[15]
}

func (x EPrintAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPrintAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPrintAction(num)
	return nil
}

// Deprecated: Use EPrintAction.Descriptor instead.
func (EPrintAction) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{15}
}

type EPrintData int32

const (
	EPrintData_EPRINTDATA_MIN         EPrintData = 0
	EPrintData_EPRINTDATA_PRAISECOUNT EPrintData = 1
	EPrintData_EPRINTDATA_ISPRAISE    EPrintData = 2
	EPrintData_EPRINGDATA_MAX         EPrintData = 3
)

// Enum value maps for EPrintData.
var (
	EPrintData_name = map[int32]string{
		0: "EPRINTDATA_MIN",
		1: "EPRINTDATA_PRAISECOUNT",
		2: "EPRINTDATA_ISPRAISE",
		3: "EPRINGDATA_MAX",
	}
	EPrintData_value = map[string]int32{
		"EPRINTDATA_MIN":         0,
		"EPRINTDATA_PRAISECOUNT": 1,
		"EPRINTDATA_ISPRAISE":    2,
		"EPRINGDATA_MAX":         3,
	}
)

func (x EPrintData) Enum() *EPrintData {
	p := new(EPrintData)
	*p = x
	return p
}

func (x EPrintData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPrintData) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[16].Descriptor()
}

func (EPrintData) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[16]
}

func (x EPrintData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPrintData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPrintData(num)
	return nil
}

// Deprecated: Use EPrintData.Descriptor instead.
func (EPrintData) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{16}
}

type EWoodRank int32

const (
	EWoodRank_EWOODRANK_QUERY_TOTAL EWoodRank = 999
)

// Enum value maps for EWoodRank.
var (
	EWoodRank_name = map[int32]string{
		999: "EWOODRANK_QUERY_TOTAL",
	}
	EWoodRank_value = map[string]int32{
		"EWOODRANK_QUERY_TOTAL": 999,
	}
)

func (x EWoodRank) Enum() *EWoodRank {
	p := new(EWoodRank)
	*p = x
	return p
}

func (x EWoodRank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EWoodRank) Descriptor() protoreflect.EnumDescriptor {
	return file_HomeCmd_proto_enumTypes[17].Descriptor()
}

func (EWoodRank) Type() protoreflect.EnumType {
	return &file_HomeCmd_proto_enumTypes[17]
}

func (x EWoodRank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EWoodRank) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EWoodRank(num)
	return nil
}

// Deprecated: Use EWoodRank.Descriptor instead.
func (EWoodRank) EnumDescriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{17}
}

type FurniturePet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      *uint32  `protobuf:"varint,1,opt,name=index,def=0" json:"index,omitempty"`
	Rewardtime *uint32  `protobuf:"varint,2,opt,name=rewardtime,def=0" json:"rewardtime,omitempty"`
	Unlock     *bool    `protobuf:"varint,3,opt,name=unlock,def=0" json:"unlock,omitempty"`
	Pet        *EggData `protobuf:"bytes,4,opt,name=pet" json:"pet,omitempty"`
}

// Default values for FurniturePet fields.
const (
	Default_FurniturePet_Index      = uint32(0)
	Default_FurniturePet_Rewardtime = uint32(0)
	Default_FurniturePet_Unlock     = bool(false)
)

func (x *FurniturePet) Reset() {
	*x = FurniturePet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurniturePet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurniturePet) ProtoMessage() {}

func (x *FurniturePet) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurniturePet.ProtoReflect.Descriptor instead.
func (*FurniturePet) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{0}
}

func (x *FurniturePet) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_FurniturePet_Index
}

func (x *FurniturePet) GetRewardtime() uint32 {
	if x != nil && x.Rewardtime != nil {
		return *x.Rewardtime
	}
	return Default_FurniturePet_Rewardtime
}

func (x *FurniturePet) GetUnlock() bool {
	if x != nil && x.Unlock != nil {
		return *x.Unlock
	}
	return Default_FurniturePet_Unlock
}

func (x *FurniturePet) GetPet() *EggData {
	if x != nil {
		return x.Pet
	}
	return nil
}

type FurnitureRadio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid    *uint64 `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Starttime *uint32 `protobuf:"varint,1,opt,name=starttime,def=0" json:"starttime,omitempty"`
	Musicid   *uint32 `protobuf:"varint,2,opt,name=musicid,def=0" json:"musicid,omitempty"`
}

// Default values for FurnitureRadio fields.
const (
	Default_FurnitureRadio_Charid    = uint64(0)
	Default_FurnitureRadio_Starttime = uint32(0)
	Default_FurnitureRadio_Musicid   = uint32(0)
)

func (x *FurnitureRadio) Reset() {
	*x = FurnitureRadio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnitureRadio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnitureRadio) ProtoMessage() {}

func (x *FurnitureRadio) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnitureRadio.ProtoReflect.Descriptor instead.
func (*FurnitureRadio) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{1}
}

func (x *FurnitureRadio) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_FurnitureRadio_Charid
}

func (x *FurnitureRadio) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return Default_FurnitureRadio_Starttime
}

func (x *FurnitureRadio) GetMusicid() uint32 {
	if x != nil && x.Musicid != nil {
		return *x.Musicid
	}
	return Default_FurnitureRadio_Musicid
}

type BoardMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accid    *uint64 `protobuf:"varint,1,opt,name=accid,def=0" json:"accid,omitempty"`
	Charid   *uint64 `protobuf:"varint,2,opt,name=charid,def=0" json:"charid,omitempty"`
	Time     *uint32 `protobuf:"varint,3,opt,name=time,def=0" json:"time,omitempty"`
	Charname *string `protobuf:"bytes,4,opt,name=charname" json:"charname,omitempty"`
	Msg      *string `protobuf:"bytes,5,opt,name=msg" json:"msg,omitempty"`
}

// Default values for BoardMsg fields.
const (
	Default_BoardMsg_Accid  = uint64(0)
	Default_BoardMsg_Charid = uint64(0)
	Default_BoardMsg_Time   = uint32(0)
)

func (x *BoardMsg) Reset() {
	*x = BoardMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardMsg) ProtoMessage() {}

func (x *BoardMsg) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardMsg.ProtoReflect.Descriptor instead.
func (*BoardMsg) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{2}
}

func (x *BoardMsg) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return Default_BoardMsg_Accid
}

func (x *BoardMsg) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_BoardMsg_Charid
}

func (x *BoardMsg) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_BoardMsg_Time
}

func (x *BoardMsg) GetCharname() string {
	if x != nil && x.Charname != nil {
		return *x.Charname
	}
	return ""
}

func (x *BoardMsg) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

type FurnitureBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  *uint32     `protobuf:"varint,1,opt,name=time,def=0" json:"time,omitempty"`
	Items []*BoardMsg `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

// Default values for FurnitureBoard fields.
const (
	Default_FurnitureBoard_Time = uint32(0)
)

func (x *FurnitureBoard) Reset() {
	*x = FurnitureBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnitureBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnitureBoard) ProtoMessage() {}

func (x *FurnitureBoard) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnitureBoard.ProtoReflect.Descriptor instead.
func (*FurnitureBoard) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{3}
}

func (x *FurnitureBoard) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_FurnitureBoard_Time
}

func (x *FurnitureBoard) GetItems() []*BoardMsg {
	if x != nil {
		return x.Items
	}
	return nil
}

type EventUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid     *uint64      `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Body       *uint32      `protobuf:"varint,2,opt,name=body,def=0" json:"body,omitempty"`
	Eye        *uint32      `protobuf:"varint,3,opt,name=eye,def=0" json:"eye,omitempty"`
	Hair       *uint32      `protobuf:"varint,4,opt,name=hair,def=0" json:"hair,omitempty"`
	Haircolor  *uint32      `protobuf:"varint,5,opt,name=haircolor,def=0" json:"haircolor,omitempty"`
	Baselevel  *uint32      `protobuf:"varint,6,opt,name=baselevel,def=0" json:"baselevel,omitempty"`
	Head       *uint32      `protobuf:"varint,7,opt,name=head,def=0" json:"head,omitempty"`
	Face       *uint32      `protobuf:"varint,8,opt,name=face,def=0" json:"face,omitempty"`
	Mouth      *uint32      `protobuf:"varint,9,opt,name=mouth,def=0" json:"mouth,omitempty"`
	Blink      *bool        `protobuf:"varint,10,opt,name=blink,def=0" json:"blink,omitempty"`
	Profession *EProfession `protobuf:"varint,11,opt,name=profession,enum=Cmd.EProfession,def=0" json:"profession,omitempty"`
	Gender     *EGender     `protobuf:"varint,12,opt,name=gender,enum=Cmd.EGender,def=0" json:"gender,omitempty"`
	Name       *string      `protobuf:"bytes,13,opt,name=name" json:"name,omitempty"`
	Guildname  *string      `protobuf:"bytes,14,opt,name=guildname" json:"guildname,omitempty"`
}

// Default values for EventUser fields.
const (
	Default_EventUser_Charid     = uint64(0)
	Default_EventUser_Body       = uint32(0)
	Default_EventUser_Eye        = uint32(0)
	Default_EventUser_Hair       = uint32(0)
	Default_EventUser_Haircolor  = uint32(0)
	Default_EventUser_Baselevel  = uint32(0)
	Default_EventUser_Head       = uint32(0)
	Default_EventUser_Face       = uint32(0)
	Default_EventUser_Mouth      = uint32(0)
	Default_EventUser_Blink      = bool(false)
	Default_EventUser_Profession = EProfession_EPROFESSION_MIN
	Default_EventUser_Gender     = EGender_EGENDER_MIN
)

func (x *EventUser) Reset() {
	*x = EventUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUser) ProtoMessage() {}

func (x *EventUser) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUser.ProtoReflect.Descriptor instead.
func (*EventUser) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{4}
}

func (x *EventUser) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_EventUser_Charid
}

func (x *EventUser) GetBody() uint32 {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return Default_EventUser_Body
}

func (x *EventUser) GetEye() uint32 {
	if x != nil && x.Eye != nil {
		return *x.Eye
	}
	return Default_EventUser_Eye
}

func (x *EventUser) GetHair() uint32 {
	if x != nil && x.Hair != nil {
		return *x.Hair
	}
	return Default_EventUser_Hair
}

func (x *EventUser) GetHaircolor() uint32 {
	if x != nil && x.Haircolor != nil {
		return *x.Haircolor
	}
	return Default_EventUser_Haircolor
}

func (x *EventUser) GetBaselevel() uint32 {
	if x != nil && x.Baselevel != nil {
		return *x.Baselevel
	}
	return Default_EventUser_Baselevel
}

func (x *EventUser) GetHead() uint32 {
	if x != nil && x.Head != nil {
		return *x.Head
	}
	return Default_EventUser_Head
}

func (x *EventUser) GetFace() uint32 {
	if x != nil && x.Face != nil {
		return *x.Face
	}
	return Default_EventUser_Face
}

func (x *EventUser) GetMouth() uint32 {
	if x != nil && x.Mouth != nil {
		return *x.Mouth
	}
	return Default_EventUser_Mouth
}

func (x *EventUser) GetBlink() bool {
	if x != nil && x.Blink != nil {
		return *x.Blink
	}
	return Default_EventUser_Blink
}

func (x *EventUser) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return Default_EventUser_Profession
}

func (x *EventUser) GetGender() EGender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Default_EventUser_Gender
}

func (x *EventUser) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EventUser) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

type FurnitureEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eventid *uint32    `protobuf:"varint,1,opt,name=eventid,def=0" json:"eventid,omitempty"`
	Furnid  *uint32    `protobuf:"varint,2,opt,name=furnid,def=0" json:"furnid,omitempty"`
	Time    *uint32    `protobuf:"varint,3,opt,name=time,def=0" json:"time,omitempty"`
	User    *EventUser `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
}

// Default values for FurnitureEvent fields.
const (
	Default_FurnitureEvent_Eventid = uint32(0)
	Default_FurnitureEvent_Furnid  = uint32(0)
	Default_FurnitureEvent_Time    = uint32(0)
)

func (x *FurnitureEvent) Reset() {
	*x = FurnitureEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnitureEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnitureEvent) ProtoMessage() {}

func (x *FurnitureEvent) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnitureEvent.ProtoReflect.Descriptor instead.
func (*FurnitureEvent) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{5}
}

func (x *FurnitureEvent) GetEventid() uint32 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return Default_FurnitureEvent_Eventid
}

func (x *FurnitureEvent) GetFurnid() uint32 {
	if x != nil && x.Furnid != nil {
		return *x.Furnid
	}
	return Default_FurnitureEvent_Furnid
}

func (x *FurnitureEvent) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_FurnitureEvent_Time
}

func (x *FurnitureEvent) GetUser() *EventUser {
	if x != nil {
		return x.User
	}
	return nil
}

type HouseOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Open          *EHouseOpen `protobuf:"varint,1,opt,name=open,enum=Cmd.EHouseOpen,def=1" json:"open,omitempty"`
	BoardOpen     *EBoardOpen `protobuf:"varint,6,opt,name=board_open,json=boardOpen,enum=Cmd.EBoardOpen,def=1" json:"board_open,omitempty"`
	EnterArea     *EEnterArea `protobuf:"varint,7,opt,name=enter_area,json=enterArea,enum=Cmd.EEnterArea,def=1" json:"enter_area,omitempty"`
	FurnitureShow *bool       `protobuf:"varint,2,opt,name=furniture_show,json=furnitureShow,def=0" json:"furniture_show,omitempty"`
	ForbidSelf    []uint32    `protobuf:"varint,3,rep,name=forbid_self,json=forbidSelf" json:"forbid_self,omitempty"`
	ForbidOther   []uint32    `protobuf:"varint,4,rep,name=forbid_other,json=forbidOther" json:"forbid_other,omitempty"`
	GardenHouse   *uint32     `protobuf:"varint,5,opt,name=garden_house,json=gardenHouse,def=0" json:"garden_house,omitempty"`
}

// Default values for HouseOpt fields.
const (
	Default_HouseOpt_Open          = EHouseOpen_EHOUSEOPEN_ALL
	Default_HouseOpt_BoardOpen     = EBoardOpen_EBOARDOPEN_ALL
	Default_HouseOpt_EnterArea     = EEnterArea_EENTERAREA_HOUSE
	Default_HouseOpt_FurnitureShow = bool(false)
	Default_HouseOpt_GardenHouse   = uint32(0)
)

func (x *HouseOpt) Reset() {
	*x = HouseOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HouseOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseOpt) ProtoMessage() {}

func (x *HouseOpt) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseOpt.ProtoReflect.Descriptor instead.
func (*HouseOpt) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{6}
}

func (x *HouseOpt) GetOpen() EHouseOpen {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return Default_HouseOpt_Open
}

func (x *HouseOpt) GetBoardOpen() EBoardOpen {
	if x != nil && x.BoardOpen != nil {
		return *x.BoardOpen
	}
	return Default_HouseOpt_BoardOpen
}

func (x *HouseOpt) GetEnterArea() EEnterArea {
	if x != nil && x.EnterArea != nil {
		return *x.EnterArea
	}
	return Default_HouseOpt_EnterArea
}

func (x *HouseOpt) GetFurnitureShow() bool {
	if x != nil && x.FurnitureShow != nil {
		return *x.FurnitureShow
	}
	return Default_HouseOpt_FurnitureShow
}

func (x *HouseOpt) GetForbidSelf() []uint32 {
	if x != nil {
		return x.ForbidSelf
	}
	return nil
}

func (x *HouseOpt) GetForbidOther() []uint32 {
	if x != nil {
		return x.ForbidOther
	}
	return nil
}

func (x *HouseOpt) GetGardenHouse() uint32 {
	if x != nil && x.GardenHouse != nil {
		return *x.GardenHouse
	}
	return Default_HouseOpt_GardenHouse
}

type HouseDecorate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Floor *uint32  `protobuf:"varint,1,opt,name=floor,def=0" json:"floor,omitempty"`
	Ids   []uint32 `protobuf:"varint,2,rep,name=ids" json:"ids,omitempty"`
}

// Default values for HouseDecorate fields.
const (
	Default_HouseDecorate_Floor = uint32(0)
)

func (x *HouseDecorate) Reset() {
	*x = HouseDecorate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HouseDecorate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseDecorate) ProtoMessage() {}

func (x *HouseDecorate) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseDecorate.ProtoReflect.Descriptor instead.
func (*HouseDecorate) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{7}
}

func (x *HouseDecorate) GetFloor() uint32 {
	if x != nil && x.Floor != nil {
		return *x.Floor
	}
	return Default_HouseDecorate_Floor
}

func (x *HouseDecorate) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type House struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accid          *uint64           `protobuf:"varint,1,opt,name=accid,def=0" json:"accid,omitempty"`
	Id             *uint32           `protobuf:"varint,2,opt,name=id,def=0" json:"id,omitempty"`
	Visitcount     *uint32           `protobuf:"varint,3,opt,name=visitcount,def=0" json:"visitcount,omitempty"`
	Furniturelv    *uint32           `protobuf:"varint,4,opt,name=furniturelv,def=0" json:"furniturelv,omitempty"`
	Furniturescore *uint32           `protobuf:"varint,5,opt,name=furniturescore,def=0" json:"furniturescore,omitempty"`
	Petrewardtime  *uint32           `protobuf:"varint,6,opt,name=petrewardtime,def=0" json:"petrewardtime,omitempty"`
	Firerewardtime *uint32           `protobuf:"varint,17,opt,name=firerewardtime,def=0" json:"firerewardtime,omitempty"`
	Dayvisitcount  *uint32           `protobuf:"varint,22,opt,name=dayvisitcount,def=0" json:"dayvisitcount,omitempty"`
	Guide          *bool             `protobuf:"varint,7,opt,name=guide,def=0" json:"guide,omitempty"`
	DefaultFurn    *bool             `protobuf:"varint,8,opt,name=default_furn,json=defaultFurn,def=0" json:"default_furn,omitempty"`
	Levelup        *bool             `protobuf:"varint,18,opt,name=levelup,def=0" json:"levelup,omitempty"`
	Woodrankopen   *bool             `protobuf:"varint,24,opt,name=woodrankopen,def=0" json:"woodrankopen,omitempty"`
	Ftype          *EHouseType       `protobuf:"varint,9,opt,name=ftype,enum=Cmd.EHouseType,def=0" json:"ftype,omitempty"`
	State          *EHouseState      `protobuf:"varint,10,opt,name=state,enum=Cmd.EHouseState,def=0" json:"state,omitempty"`
	Opt            *HouseOpt         `protobuf:"bytes,11,opt,name=opt" json:"opt,omitempty"`
	Name           *string           `protobuf:"bytes,12,opt,name=name" json:"name,omitempty"`
	Sign           *string           `protobuf:"bytes,13,opt,name=sign" json:"sign,omitempty"`
	Board          *string           `protobuf:"bytes,19,opt,name=board" json:"board,omitempty"`
	Decorates      []*HouseDecorate  `protobuf:"bytes,14,rep,name=decorates" json:"decorates,omitempty"`
	Pets           []*FurniturePet   `protobuf:"bytes,15,rep,name=pets" json:"pets,omitempty"`
	Radios         []*FurnitureRadio `protobuf:"bytes,16,rep,name=radios" json:"radios,omitempty"`
	Boards         []*FurnitureBoard `protobuf:"bytes,20,rep,name=boards" json:"boards,omitempty"`
	Events         []*FurnitureEvent `protobuf:"bytes,21,rep,name=events" json:"events,omitempty"`
	WeekClearTime  *uint32           `protobuf:"varint,23,opt,name=week_clear_time,json=weekClearTime,def=0" json:"week_clear_time,omitempty"`
}

// Default values for House fields.
const (
	Default_House_Accid          = uint64(0)
	Default_House_Id             = uint32(0)
	Default_House_Visitcount     = uint32(0)
	Default_House_Furniturelv    = uint32(0)
	Default_House_Furniturescore = uint32(0)
	Default_House_Petrewardtime  = uint32(0)
	Default_House_Firerewardtime = uint32(0)
	Default_House_Dayvisitcount  = uint32(0)
	Default_House_Guide          = bool(false)
	Default_House_DefaultFurn    = bool(false)
	Default_House_Levelup        = bool(false)
	Default_House_Woodrankopen   = bool(false)
	Default_House_Ftype          = EHouseType_EHOUSETYPE_MIN
	Default_House_State          = EHouseState_EHOUSESTATE_MIN
	Default_House_WeekClearTime  = uint32(0)
)

func (x *House) Reset() {
	*x = House{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *House) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*House) ProtoMessage() {}

func (x *House) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use House.ProtoReflect.Descriptor instead.
func (*House) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{8}
}

func (x *House) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return Default_House_Accid
}

func (x *House) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_House_Id
}

func (x *House) GetVisitcount() uint32 {
	if x != nil && x.Visitcount != nil {
		return *x.Visitcount
	}
	return Default_House_Visitcount
}

func (x *House) GetFurniturelv() uint32 {
	if x != nil && x.Furniturelv != nil {
		return *x.Furniturelv
	}
	return Default_House_Furniturelv
}

func (x *House) GetFurniturescore() uint32 {
	if x != nil && x.Furniturescore != nil {
		return *x.Furniturescore
	}
	return Default_House_Furniturescore
}

func (x *House) GetPetrewardtime() uint32 {
	if x != nil && x.Petrewardtime != nil {
		return *x.Petrewardtime
	}
	return Default_House_Petrewardtime
}

func (x *House) GetFirerewardtime() uint32 {
	if x != nil && x.Firerewardtime != nil {
		return *x.Firerewardtime
	}
	return Default_House_Firerewardtime
}

func (x *House) GetDayvisitcount() uint32 {
	if x != nil && x.Dayvisitcount != nil {
		return *x.Dayvisitcount
	}
	return Default_House_Dayvisitcount
}

func (x *House) GetGuide() bool {
	if x != nil && x.Guide != nil {
		return *x.Guide
	}
	return Default_House_Guide
}

func (x *House) GetDefaultFurn() bool {
	if x != nil && x.DefaultFurn != nil {
		return *x.DefaultFurn
	}
	return Default_House_DefaultFurn
}

func (x *House) GetLevelup() bool {
	if x != nil && x.Levelup != nil {
		return *x.Levelup
	}
	return Default_House_Levelup
}

func (x *House) GetWoodrankopen() bool {
	if x != nil && x.Woodrankopen != nil {
		return *x.Woodrankopen
	}
	return Default_House_Woodrankopen
}

func (x *House) GetFtype() EHouseType {
	if x != nil && x.Ftype != nil {
		return *x.Ftype
	}
	return Default_House_Ftype
}

func (x *House) GetState() EHouseState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_House_State
}

func (x *House) GetOpt() *HouseOpt {
	if x != nil {
		return x.Opt
	}
	return nil
}

func (x *House) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *House) GetSign() string {
	if x != nil && x.Sign != nil {
		return *x.Sign
	}
	return ""
}

func (x *House) GetBoard() string {
	if x != nil && x.Board != nil {
		return *x.Board
	}
	return ""
}

func (x *House) GetDecorates() []*HouseDecorate {
	if x != nil {
		return x.Decorates
	}
	return nil
}

func (x *House) GetPets() []*FurniturePet {
	if x != nil {
		return x.Pets
	}
	return nil
}

func (x *House) GetRadios() []*FurnitureRadio {
	if x != nil {
		return x.Radios
	}
	return nil
}

func (x *House) GetBoards() []*FurnitureBoard {
	if x != nil {
		return x.Boards
	}
	return nil
}

func (x *House) GetEvents() []*FurnitureEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *House) GetWeekClearTime() uint32 {
	if x != nil && x.WeekClearTime != nil {
		return *x.WeekClearTime
	}
	return Default_House_WeekClearTime
}

type Garden struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint32           `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Ftype     *EGardenType      `protobuf:"varint,2,opt,name=ftype,enum=Cmd.EGardenType,def=0" json:"ftype,omitempty"`
	State     *EGardenState     `protobuf:"varint,3,opt,name=state,enum=Cmd.EGardenState,def=0" json:"state,omitempty"`
	Decorates []*HouseDecorate  `protobuf:"bytes,4,rep,name=decorates" json:"decorates,omitempty"`
	Pets      []*FurniturePet   `protobuf:"bytes,5,rep,name=pets" json:"pets,omitempty"`
	Radios    []*FurnitureRadio `protobuf:"bytes,6,rep,name=radios" json:"radios,omitempty"`
}

// Default values for Garden fields.
const (
	Default_Garden_Id    = uint32(0)
	Default_Garden_Ftype = EGardenType_EGARDENTYPE_MIN
	Default_Garden_State = EGardenState_EGARDENSTATE_MIN
)

func (x *Garden) Reset() {
	*x = Garden{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Garden) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Garden) ProtoMessage() {}

func (x *Garden) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Garden.ProtoReflect.Descriptor instead.
func (*Garden) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{9}
}

func (x *Garden) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_Garden_Id
}

func (x *Garden) GetFtype() EGardenType {
	if x != nil && x.Ftype != nil {
		return *x.Ftype
	}
	return Default_Garden_Ftype
}

func (x *Garden) GetState() EGardenState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_Garden_State
}

func (x *Garden) GetDecorates() []*HouseDecorate {
	if x != nil {
		return x.Decorates
	}
	return nil
}

func (x *Garden) GetPets() []*FurniturePet {
	if x != nil {
		return x.Pets
	}
	return nil
}

func (x *Garden) GetRadios() []*FurnitureRadio {
	if x != nil {
		return x.Radios
	}
	return nil
}

type BluePrint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Praisecount *uint32 `protobuf:"varint,2,opt,name=praisecount,def=0" json:"praisecount,omitempty"`
	Ispraise    *bool   `protobuf:"varint,3,opt,name=ispraise,def=0" json:"ispraise,omitempty"`
}

// Default values for BluePrint fields.
const (
	Default_BluePrint_Id          = uint32(0)
	Default_BluePrint_Praisecount = uint32(0)
	Default_BluePrint_Ispraise    = bool(false)
)

func (x *BluePrint) Reset() {
	*x = BluePrint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BluePrint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluePrint) ProtoMessage() {}

func (x *BluePrint) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluePrint.ProtoReflect.Descriptor instead.
func (*BluePrint) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{10}
}

func (x *BluePrint) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_BluePrint_Id
}

func (x *BluePrint) GetPraisecount() uint32 {
	if x != nil && x.Praisecount != nil {
		return *x.Praisecount
	}
	return Default_BluePrint_Praisecount
}

func (x *BluePrint) GetIspraise() bool {
	if x != nil && x.Ispraise != nil {
		return *x.Ispraise
	}
	return Default_BluePrint_Ispraise
}

type QueryFurnitureDataHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param     *HomeCParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=1" json:"param,omitempty"`
	House     *House       `protobuf:"bytes,3,opt,name=house" json:"house,omitempty"`
	Furniture []*Furniture `protobuf:"bytes,4,rep,name=furniture" json:"furniture,omitempty"`
}

// Default values for QueryFurnitureDataHomeCmd fields.
const (
	Default_QueryFurnitureDataHomeCmd_Cmd   = Command_HOMEC_PROTOCMD
	Default_QueryFurnitureDataHomeCmd_Param = HomeCParam_HOMECPARAM_QUERYHOMEDATA
)

func (x *QueryFurnitureDataHomeCmd) Reset() {
	*x = QueryFurnitureDataHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFurnitureDataHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFurnitureDataHomeCmd) ProtoMessage() {}

func (x *QueryFurnitureDataHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFurnitureDataHomeCmd.ProtoReflect.Descriptor instead.
func (*QueryFurnitureDataHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{11}
}

func (x *QueryFurnitureDataHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryFurnitureDataHomeCmd_Cmd
}

func (x *QueryFurnitureDataHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryFurnitureDataHomeCmd_Param
}

func (x *QueryFurnitureDataHomeCmd) GetHouse() *House {
	if x != nil {
		return x.House
	}
	return nil
}

func (x *QueryFurnitureDataHomeCmd) GetFurniture() []*Furniture {
	if x != nil {
		return x.Furniture
	}
	return nil
}

type FurnitureActionHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param   *HomeCParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=2" json:"param,omitempty"`
	Action  *EFurnitureAction `protobuf:"varint,3,opt,name=action,enum=Cmd.EFurnitureAction,def=0" json:"action,omitempty"`
	Items   []*Furniture      `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
	Nocheck *bool             `protobuf:"varint,5,opt,name=nocheck,def=0" json:"nocheck,omitempty"`
}

// Default values for FurnitureActionHomeCmd fields.
const (
	Default_FurnitureActionHomeCmd_Cmd     = Command_HOMEC_PROTOCMD
	Default_FurnitureActionHomeCmd_Param   = HomeCParam_HOMECPARAM_FURNITUREACTION
	Default_FurnitureActionHomeCmd_Action  = EFurnitureAction_EFURNITUREACTION_MIN
	Default_FurnitureActionHomeCmd_Nocheck = bool(false)
)

func (x *FurnitureActionHomeCmd) Reset() {
	*x = FurnitureActionHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnitureActionHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnitureActionHomeCmd) ProtoMessage() {}

func (x *FurnitureActionHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnitureActionHomeCmd.ProtoReflect.Descriptor instead.
func (*FurnitureActionHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{12}
}

func (x *FurnitureActionHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FurnitureActionHomeCmd_Cmd
}

func (x *FurnitureActionHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FurnitureActionHomeCmd_Param
}

func (x *FurnitureActionHomeCmd) GetAction() EFurnitureAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_FurnitureActionHomeCmd_Action
}

func (x *FurnitureActionHomeCmd) GetItems() []*Furniture {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *FurnitureActionHomeCmd) GetNocheck() bool {
	if x != nil && x.Nocheck != nil {
		return *x.Nocheck
	}
	return Default_FurnitureActionHomeCmd_Nocheck
}

type FurnitureOperHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param  *HomeCParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=3" json:"param,omitempty"`
	Oper   *EFurnitureOper `protobuf:"varint,3,opt,name=oper,enum=Cmd.EFurnitureOper,def=1" json:"oper,omitempty"`
	Guid   *string         `protobuf:"bytes,4,opt,name=guid" json:"guid,omitempty"`
	Value  *uint64         `protobuf:"varint,5,opt,name=value,def=0" json:"value,omitempty"`
	Source *uint32         `protobuf:"varint,6,opt,name=source,def=0" json:"source,omitempty"`
	Data   *string         `protobuf:"bytes,7,opt,name=data" json:"data,omitempty"`
	Values []uint32        `protobuf:"varint,8,rep,name=values" json:"values,omitempty"`
}

// Default values for FurnitureOperHomeCmd fields.
const (
	Default_FurnitureOperHomeCmd_Cmd    = Command_HOMEC_PROTOCMD
	Default_FurnitureOperHomeCmd_Param  = HomeCParam_HOMECPARAM_FURNITUREOPER
	Default_FurnitureOperHomeCmd_Oper   = EFurnitureOper_EFURNITUREOPER_MIN
	Default_FurnitureOperHomeCmd_Value  = uint64(0)
	Default_FurnitureOperHomeCmd_Source = uint32(0)
)

func (x *FurnitureOperHomeCmd) Reset() {
	*x = FurnitureOperHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnitureOperHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnitureOperHomeCmd) ProtoMessage() {}

func (x *FurnitureOperHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnitureOperHomeCmd.ProtoReflect.Descriptor instead.
func (*FurnitureOperHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{13}
}

func (x *FurnitureOperHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FurnitureOperHomeCmd_Cmd
}

func (x *FurnitureOperHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FurnitureOperHomeCmd_Param
}

func (x *FurnitureOperHomeCmd) GetOper() EFurnitureOper {
	if x != nil && x.Oper != nil {
		return *x.Oper
	}
	return Default_FurnitureOperHomeCmd_Oper
}

func (x *FurnitureOperHomeCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *FurnitureOperHomeCmd) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_FurnitureOperHomeCmd_Value
}

func (x *FurnitureOperHomeCmd) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return Default_FurnitureOperHomeCmd_Source
}

func (x *FurnitureOperHomeCmd) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

func (x *FurnitureOperHomeCmd) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type FurnitureUpdateHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param   *HomeCParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=4" json:"param,omitempty"`
	Updates []*Furniture `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
	Dels    []string     `protobuf:"bytes,4,rep,name=dels" json:"dels,omitempty"`
}

// Default values for FurnitureUpdateHomeCmd fields.
const (
	Default_FurnitureUpdateHomeCmd_Cmd   = Command_HOMEC_PROTOCMD
	Default_FurnitureUpdateHomeCmd_Param = HomeCParam_HOMECPARAM_FURNITUREUPDATE
)

func (x *FurnitureUpdateHomeCmd) Reset() {
	*x = FurnitureUpdateHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnitureUpdateHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnitureUpdateHomeCmd) ProtoMessage() {}

func (x *FurnitureUpdateHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnitureUpdateHomeCmd.ProtoReflect.Descriptor instead.
func (*FurnitureUpdateHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{14}
}

func (x *FurnitureUpdateHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FurnitureUpdateHomeCmd_Cmd
}

func (x *FurnitureUpdateHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FurnitureUpdateHomeCmd_Param
}

func (x *FurnitureUpdateHomeCmd) GetUpdates() []*Furniture {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *FurnitureUpdateHomeCmd) GetDels() []string {
	if x != nil {
		return x.Dels
	}
	return nil
}

type FurnitureData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ftype  *EFurnitureData   `protobuf:"varint,1,opt,name=ftype,enum=Cmd.EFurnitureData,def=0" json:"ftype,omitempty"`
	Value  *uint64           `protobuf:"varint,2,opt,name=value,def=0" json:"value,omitempty"`
	Data   *string           `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Seats  []*FurnitureSeat  `protobuf:"bytes,4,rep,name=seats" json:"seats,omitempty"`
	Photos []*FurniturePhoto `protobuf:"bytes,6,rep,name=photos" json:"photos,omitempty"`
	Npc    *FurnitureNpc     `protobuf:"bytes,7,opt,name=npc" json:"npc,omitempty"`
}

// Default values for FurnitureData fields.
const (
	Default_FurnitureData_Ftype = EFurnitureData_EFURNITUREDATA_MIN
	Default_FurnitureData_Value = uint64(0)
)

func (x *FurnitureData) Reset() {
	*x = FurnitureData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnitureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnitureData) ProtoMessage() {}

func (x *FurnitureData) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnitureData.ProtoReflect.Descriptor instead.
func (*FurnitureData) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{15}
}

func (x *FurnitureData) GetFtype() EFurnitureData {
	if x != nil && x.Ftype != nil {
		return *x.Ftype
	}
	return Default_FurnitureData_Ftype
}

func (x *FurnitureData) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_FurnitureData_Value
}

func (x *FurnitureData) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

func (x *FurnitureData) GetSeats() []*FurnitureSeat {
	if x != nil {
		return x.Seats
	}
	return nil
}

func (x *FurnitureData) GetPhotos() []*FurniturePhoto {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *FurnitureData) GetNpc() *FurnitureNpc {
	if x != nil {
		return x.Npc
	}
	return nil
}

type FurnitureDataUpdateHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param   *HomeCParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=5" json:"param,omitempty"`
	Guid    *string          `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Updates []*FurnitureData `protobuf:"bytes,4,rep,name=updates" json:"updates,omitempty"`
}

// Default values for FurnitureDataUpdateHomeCmd fields.
const (
	Default_FurnitureDataUpdateHomeCmd_Cmd   = Command_HOMEC_PROTOCMD
	Default_FurnitureDataUpdateHomeCmd_Param = HomeCParam_HOMECPARAM_FURNITUREDATAUPDATE
)

func (x *FurnitureDataUpdateHomeCmd) Reset() {
	*x = FurnitureDataUpdateHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnitureDataUpdateHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnitureDataUpdateHomeCmd) ProtoMessage() {}

func (x *FurnitureDataUpdateHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnitureDataUpdateHomeCmd.ProtoReflect.Descriptor instead.
func (*FurnitureDataUpdateHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{16}
}

func (x *FurnitureDataUpdateHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FurnitureDataUpdateHomeCmd_Cmd
}

func (x *FurnitureDataUpdateHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FurnitureDataUpdateHomeCmd_Param
}

func (x *FurnitureDataUpdateHomeCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *FurnitureDataUpdateHomeCmd) GetUpdates() []*FurnitureData {
	if x != nil {
		return x.Updates
	}
	return nil
}

type HouseActionHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param  *HomeCParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=6" json:"param,omitempty"`
	Action *EHouseAction  `protobuf:"varint,3,opt,name=action,enum=Cmd.EHouseAction,def=0" json:"action,omitempty"`
	Dec    *HouseDecorate `protobuf:"bytes,4,opt,name=dec" json:"dec,omitempty"`
}

// Default values for HouseActionHomeCmd fields.
const (
	Default_HouseActionHomeCmd_Cmd    = Command_HOMEC_PROTOCMD
	Default_HouseActionHomeCmd_Param  = HomeCParam_HOMECPARAM_HOUSEACTION
	Default_HouseActionHomeCmd_Action = EHouseAction_EHOUSEACTION_MIN
)

func (x *HouseActionHomeCmd) Reset() {
	*x = HouseActionHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HouseActionHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseActionHomeCmd) ProtoMessage() {}

func (x *HouseActionHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseActionHomeCmd.ProtoReflect.Descriptor instead.
func (*HouseActionHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{17}
}

func (x *HouseActionHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HouseActionHomeCmd_Cmd
}

func (x *HouseActionHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HouseActionHomeCmd_Param
}

func (x *HouseActionHomeCmd) GetAction() EHouseAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_HouseActionHomeCmd_Action
}

func (x *HouseActionHomeCmd) GetDec() *HouseDecorate {
	if x != nil {
		return x.Dec
	}
	return nil
}

type HouseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EData    *EHouseData       `protobuf:"varint,1,opt,name=eData,enum=Cmd.EHouseData,def=0" json:"eData,omitempty"`
	Value    *uint64           `protobuf:"varint,2,opt,name=value,def=0" json:"value,omitempty"`
	Data     *string           `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Decorate *HouseDecorate    `protobuf:"bytes,4,opt,name=decorate" json:"decorate,omitempty"`
	Pet      *FurniturePet     `protobuf:"bytes,5,opt,name=pet" json:"pet,omitempty"`
	Radios   []*FurnitureRadio `protobuf:"bytes,6,rep,name=radios" json:"radios,omitempty"`
	Boards   []*FurnitureBoard `protobuf:"bytes,7,rep,name=boards" json:"boards,omitempty"`
}

// Default values for HouseData fields.
const (
	Default_HouseData_EData = EHouseData_EHOUSEDATA_MIN
	Default_HouseData_Value = uint64(0)
)

func (x *HouseData) Reset() {
	*x = HouseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HouseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseData) ProtoMessage() {}

func (x *HouseData) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseData.ProtoReflect.Descriptor instead.
func (*HouseData) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{18}
}

func (x *HouseData) GetEData() EHouseData {
	if x != nil && x.EData != nil {
		return *x.EData
	}
	return Default_HouseData_EData
}

func (x *HouseData) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_HouseData_Value
}

func (x *HouseData) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

func (x *HouseData) GetDecorate() *HouseDecorate {
	if x != nil {
		return x.Decorate
	}
	return nil
}

func (x *HouseData) GetPet() *FurniturePet {
	if x != nil {
		return x.Pet
	}
	return nil
}

func (x *HouseData) GetRadios() []*FurnitureRadio {
	if x != nil {
		return x.Radios
	}
	return nil
}

func (x *HouseData) GetBoards() []*FurnitureBoard {
	if x != nil {
		return x.Boards
	}
	return nil
}

type HouseDataUpdateHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param   *HomeCParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=7" json:"param,omitempty"`
	Updates []*HouseData `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
}

// Default values for HouseDataUpdateHomeCmd fields.
const (
	Default_HouseDataUpdateHomeCmd_Cmd   = Command_HOMEC_PROTOCMD
	Default_HouseDataUpdateHomeCmd_Param = HomeCParam_HOMECPARAM_HOUSEDATAUPDATE
)

func (x *HouseDataUpdateHomeCmd) Reset() {
	*x = HouseDataUpdateHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HouseDataUpdateHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseDataUpdateHomeCmd) ProtoMessage() {}

func (x *HouseDataUpdateHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseDataUpdateHomeCmd.ProtoReflect.Descriptor instead.
func (*HouseDataUpdateHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{19}
}

func (x *HouseDataUpdateHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HouseDataUpdateHomeCmd_Cmd
}

func (x *HouseDataUpdateHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HouseDataUpdateHomeCmd_Param
}

func (x *HouseDataUpdateHomeCmd) GetUpdates() []*HouseData {
	if x != nil {
		return x.Updates
	}
	return nil
}

type PetFurnitureActionhomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param   *HomeCParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=9" json:"param,omitempty"`
	Action  *EPetFurnitureAction `protobuf:"varint,3,opt,name=action,enum=Cmd.EPetFurnitureAction,def=0" json:"action,omitempty"`
	Index   *uint32              `protobuf:"varint,4,opt,name=index,def=0" json:"index,omitempty"`
	Petguid *string              `protobuf:"bytes,5,opt,name=petguid" json:"petguid,omitempty"`
}

// Default values for PetFurnitureActionhomeCmd fields.
const (
	Default_PetFurnitureActionhomeCmd_Cmd    = Command_HOMEC_PROTOCMD
	Default_PetFurnitureActionhomeCmd_Param  = HomeCParam_HOMECPARAM_PETFURNITUREACTION
	Default_PetFurnitureActionhomeCmd_Action = EPetFurnitureAction_EPETFURNITUREACTION_MIN
	Default_PetFurnitureActionhomeCmd_Index  = uint32(0)
)

func (x *PetFurnitureActionhomeCmd) Reset() {
	*x = PetFurnitureActionhomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetFurnitureActionhomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetFurnitureActionhomeCmd) ProtoMessage() {}

func (x *PetFurnitureActionhomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetFurnitureActionhomeCmd.ProtoReflect.Descriptor instead.
func (*PetFurnitureActionhomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{20}
}

func (x *PetFurnitureActionhomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PetFurnitureActionhomeCmd_Cmd
}

func (x *PetFurnitureActionhomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PetFurnitureActionhomeCmd_Param
}

func (x *PetFurnitureActionhomeCmd) GetAction() EPetFurnitureAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_PetFurnitureActionhomeCmd_Action
}

func (x *PetFurnitureActionhomeCmd) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_PetFurnitureActionhomeCmd_Index
}

func (x *PetFurnitureActionhomeCmd) GetPetguid() string {
	if x != nil && x.Petguid != nil {
		return *x.Petguid
	}
	return ""
}

type PrayHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param *HomeCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=10" json:"param,omitempty"`
}

// Default values for PrayHomeCmd fields.
const (
	Default_PrayHomeCmd_Cmd   = Command_HOMEC_PROTOCMD
	Default_PrayHomeCmd_Param = HomeCParam_HOMECPARAM_PRAY
)

func (x *PrayHomeCmd) Reset() {
	*x = PrayHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrayHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrayHomeCmd) ProtoMessage() {}

func (x *PrayHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrayHomeCmd.ProtoReflect.Descriptor instead.
func (*PrayHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{21}
}

func (x *PrayHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PrayHomeCmd_Cmd
}

func (x *PrayHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PrayHomeCmd_Param
}

type NpcActionHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd *Command `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
}

// Default values for NpcActionHomeCmd fields.
const (
	Default_NpcActionHomeCmd_Cmd = Command_HOMEC_PROTOCMD
)

func (x *NpcActionHomeCmd) Reset() {
	*x = NpcActionHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpcActionHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpcActionHomeCmd) ProtoMessage() {}

func (x *NpcActionHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpcActionHomeCmd.ProtoReflect.Descriptor instead.
func (*NpcActionHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{22}
}

func (x *NpcActionHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NpcActionHomeCmd_Cmd
}

type EnterHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param  *HomeCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=11" json:"param,omitempty"`
	Accid  *uint64     `protobuf:"varint,3,opt,name=accid,def=0" json:"accid,omitempty"`
	Charid *uint64     `protobuf:"varint,4,opt,name=charid,def=0" json:"charid,omitempty"`
}

// Default values for EnterHomeCmd fields.
const (
	Default_EnterHomeCmd_Cmd    = Command_HOMEC_PROTOCMD
	Default_EnterHomeCmd_Param  = HomeCParam_HOMECPARAM_ENTERHOME
	Default_EnterHomeCmd_Accid  = uint64(0)
	Default_EnterHomeCmd_Charid = uint64(0)
)

func (x *EnterHomeCmd) Reset() {
	*x = EnterHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterHomeCmd) ProtoMessage() {}

func (x *EnterHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterHomeCmd.ProtoReflect.Descriptor instead.
func (*EnterHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{23}
}

func (x *EnterHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnterHomeCmd_Cmd
}

func (x *EnterHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnterHomeCmd_Param
}

func (x *EnterHomeCmd) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return Default_EnterHomeCmd_Accid
}

func (x *EnterHomeCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_EnterHomeCmd_Charid
}

type QueryHouseDataHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param       *HomeCParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=12" json:"param,omitempty"`
	House       *House       `protobuf:"bytes,3,opt,name=house" json:"house,omitempty"`
	Garden      *House       `protobuf:"bytes,5,opt,name=garden" json:"garden,omitempty"`
	Furnitures  []*Furniture `protobuf:"bytes,4,rep,name=furnitures" json:"furnitures,omitempty"`
	Gfurnitures []*Furniture `protobuf:"bytes,6,rep,name=gfurnitures" json:"gfurnitures,omitempty"`
}

// Default values for QueryHouseDataHomeCmd fields.
const (
	Default_QueryHouseDataHomeCmd_Cmd   = Command_HOMEC_PROTOCMD
	Default_QueryHouseDataHomeCmd_Param = HomeCParam_HOMECPARAM_QUERYHOUSEDATA
)

func (x *QueryHouseDataHomeCmd) Reset() {
	*x = QueryHouseDataHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHouseDataHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHouseDataHomeCmd) ProtoMessage() {}

func (x *QueryHouseDataHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHouseDataHomeCmd.ProtoReflect.Descriptor instead.
func (*QueryHouseDataHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{24}
}

func (x *QueryHouseDataHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryHouseDataHomeCmd_Cmd
}

func (x *QueryHouseDataHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryHouseDataHomeCmd_Param
}

func (x *QueryHouseDataHomeCmd) GetHouse() *House {
	if x != nil {
		return x.House
	}
	return nil
}

func (x *QueryHouseDataHomeCmd) GetGarden() *House {
	if x != nil {
		return x.Garden
	}
	return nil
}

func (x *QueryHouseDataHomeCmd) GetFurnitures() []*Furniture {
	if x != nil {
		return x.Furnitures
	}
	return nil
}

func (x *QueryHouseDataHomeCmd) GetGfurnitures() []*Furniture {
	if x != nil {
		return x.Gfurnitures
	}
	return nil
}

type OptUpdateHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param *HomeCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=13" json:"param,omitempty"`
	Accid *uint64     `protobuf:"varint,3,opt,name=accid,def=0" json:"accid,omitempty"`
	Data  *EOptData   `protobuf:"varint,4,opt,name=data,enum=Cmd.EOptData,def=0" json:"data,omitempty"`
	Value *uint64     `protobuf:"varint,5,opt,name=value,def=0" json:"value,omitempty"`
	Ids   []uint32    `protobuf:"varint,6,rep,name=ids" json:"ids,omitempty"`
	Str   *string     `protobuf:"bytes,7,opt,name=str" json:"str,omitempty"`
}

// Default values for OptUpdateHomeCmd fields.
const (
	Default_OptUpdateHomeCmd_Cmd   = Command_HOMEC_PROTOCMD
	Default_OptUpdateHomeCmd_Param = HomeCParam_HOMECPARAM_HOUSE_OPTUPDATE
	Default_OptUpdateHomeCmd_Accid = uint64(0)
	Default_OptUpdateHomeCmd_Data  = EOptData_EOPTDATA_MIN
	Default_OptUpdateHomeCmd_Value = uint64(0)
)

func (x *OptUpdateHomeCmd) Reset() {
	*x = OptUpdateHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptUpdateHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptUpdateHomeCmd) ProtoMessage() {}

func (x *OptUpdateHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptUpdateHomeCmd.ProtoReflect.Descriptor instead.
func (*OptUpdateHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{25}
}

func (x *OptUpdateHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_OptUpdateHomeCmd_Cmd
}

func (x *OptUpdateHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_OptUpdateHomeCmd_Param
}

func (x *OptUpdateHomeCmd) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return Default_OptUpdateHomeCmd_Accid
}

func (x *OptUpdateHomeCmd) GetData() EOptData {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return Default_OptUpdateHomeCmd_Data
}

func (x *OptUpdateHomeCmd) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_OptUpdateHomeCmd_Value
}

func (x *OptUpdateHomeCmd) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *OptUpdateHomeCmd) GetStr() string {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return ""
}

type PrintActionHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param  *HomeCParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=14" json:"param,omitempty"`
	Action *EPrintAction `protobuf:"varint,3,opt,name=action,enum=Cmd.EPrintAction,def=0" json:"action,omitempty"`
	Id     *uint32       `protobuf:"varint,4,opt,name=id,def=0" json:"id,omitempty"`
}

// Default values for PrintActionHomeCmd fields.
const (
	Default_PrintActionHomeCmd_Cmd    = Command_HOMEC_PROTOCMD
	Default_PrintActionHomeCmd_Param  = HomeCParam_HOMECPARAM_PRINTACTION
	Default_PrintActionHomeCmd_Action = EPrintAction_EPRINTACTION_MIN
	Default_PrintActionHomeCmd_Id     = uint32(0)
)

func (x *PrintActionHomeCmd) Reset() {
	*x = PrintActionHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrintActionHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintActionHomeCmd) ProtoMessage() {}

func (x *PrintActionHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintActionHomeCmd.ProtoReflect.Descriptor instead.
func (*PrintActionHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{26}
}

func (x *PrintActionHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PrintActionHomeCmd_Cmd
}

func (x *PrintActionHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PrintActionHomeCmd_Param
}

func (x *PrintActionHomeCmd) GetAction() EPrintAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_PrintActionHomeCmd_Action
}

func (x *PrintActionHomeCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_PrintActionHomeCmd_Id
}

type PrintData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *EPrintData `protobuf:"varint,1,opt,name=data,enum=Cmd.EPrintData,def=0" json:"data,omitempty"`
	Value *uint64     `protobuf:"varint,2,opt,name=value,def=0" json:"value,omitempty"`
}

// Default values for PrintData fields.
const (
	Default_PrintData_Data  = EPrintData_EPRINTDATA_MIN
	Default_PrintData_Value = uint64(0)
)

func (x *PrintData) Reset() {
	*x = PrintData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrintData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintData) ProtoMessage() {}

func (x *PrintData) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintData.ProtoReflect.Descriptor instead.
func (*PrintData) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{27}
}

func (x *PrintData) GetData() EPrintData {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return Default_PrintData_Data
}

func (x *PrintData) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_PrintData_Value
}

type PrintItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *uint32      `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Datas []*PrintData `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
}

// Default values for PrintItem fields.
const (
	Default_PrintItem_Id = uint32(0)
)

func (x *PrintItem) Reset() {
	*x = PrintItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrintItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintItem) ProtoMessage() {}

func (x *PrintItem) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintItem.ProtoReflect.Descriptor instead.
func (*PrintItem) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{28}
}

func (x *PrintItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_PrintItem_Id
}

func (x *PrintItem) GetDatas() []*PrintData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type PrintUpdateHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param *HomeCParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=15" json:"param,omitempty"`
	Items []*PrintItem `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

// Default values for PrintUpdateHomeCmd fields.
const (
	Default_PrintUpdateHomeCmd_Cmd   = Command_HOMEC_PROTOCMD
	Default_PrintUpdateHomeCmd_Param = HomeCParam_HOMECPARAM_PRINTUPDATE
)

func (x *PrintUpdateHomeCmd) Reset() {
	*x = PrintUpdateHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrintUpdateHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintUpdateHomeCmd) ProtoMessage() {}

func (x *PrintUpdateHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintUpdateHomeCmd.ProtoReflect.Descriptor instead.
func (*PrintUpdateHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{29}
}

func (x *PrintUpdateHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PrintUpdateHomeCmd_Cmd
}

func (x *PrintUpdateHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PrintUpdateHomeCmd_Param
}

func (x *PrintUpdateHomeCmd) GetItems() []*PrintItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type BoardItemQueryHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param      *HomeCParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=16" json:"param,omitempty"`
	Page       *uint32           `protobuf:"varint,3,opt,name=page,def=0" json:"page,omitempty"`
	Totalcount *uint32           `protobuf:"varint,4,opt,name=totalcount,def=0" json:"totalcount,omitempty"`
	Available  *bool             `protobuf:"varint,5,opt,name=available,def=0" json:"available,omitempty"`
	Items      []*FurnitureBoard `protobuf:"bytes,6,rep,name=items" json:"items,omitempty"`
}

// Default values for BoardItemQueryHomeCmd fields.
const (
	Default_BoardItemQueryHomeCmd_Cmd        = Command_HOMEC_PROTOCMD
	Default_BoardItemQueryHomeCmd_Param      = HomeCParam_HOMECPARAM_BOARDITEM_QUERY
	Default_BoardItemQueryHomeCmd_Page       = uint32(0)
	Default_BoardItemQueryHomeCmd_Totalcount = uint32(0)
	Default_BoardItemQueryHomeCmd_Available  = bool(false)
)

func (x *BoardItemQueryHomeCmd) Reset() {
	*x = BoardItemQueryHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardItemQueryHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardItemQueryHomeCmd) ProtoMessage() {}

func (x *BoardItemQueryHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardItemQueryHomeCmd.ProtoReflect.Descriptor instead.
func (*BoardItemQueryHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{30}
}

func (x *BoardItemQueryHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BoardItemQueryHomeCmd_Cmd
}

func (x *BoardItemQueryHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BoardItemQueryHomeCmd_Param
}

func (x *BoardItemQueryHomeCmd) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return Default_BoardItemQueryHomeCmd_Page
}

func (x *BoardItemQueryHomeCmd) GetTotalcount() uint32 {
	if x != nil && x.Totalcount != nil {
		return *x.Totalcount
	}
	return Default_BoardItemQueryHomeCmd_Totalcount
}

func (x *BoardItemQueryHomeCmd) GetAvailable() bool {
	if x != nil && x.Available != nil {
		return *x.Available
	}
	return Default_BoardItemQueryHomeCmd_Available
}

func (x *BoardItemQueryHomeCmd) GetItems() []*FurnitureBoard {
	if x != nil {
		return x.Items
	}
	return nil
}

type BoardItemUpdateHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param   *HomeCParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=17" json:"param,omitempty"`
	Updates []*FurnitureBoard `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
	Dels    []uint32          `protobuf:"varint,4,rep,name=dels" json:"dels,omitempty"`
}

// Default values for BoardItemUpdateHomeCmd fields.
const (
	Default_BoardItemUpdateHomeCmd_Cmd   = Command_HOMEC_PROTOCMD
	Default_BoardItemUpdateHomeCmd_Param = HomeCParam_HOMECPARAM_BOARDITEM_UPDATE
)

func (x *BoardItemUpdateHomeCmd) Reset() {
	*x = BoardItemUpdateHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardItemUpdateHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardItemUpdateHomeCmd) ProtoMessage() {}

func (x *BoardItemUpdateHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardItemUpdateHomeCmd.ProtoReflect.Descriptor instead.
func (*BoardItemUpdateHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{31}
}

func (x *BoardItemUpdateHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BoardItemUpdateHomeCmd_Cmd
}

func (x *BoardItemUpdateHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BoardItemUpdateHomeCmd_Param
}

func (x *BoardItemUpdateHomeCmd) GetUpdates() []*FurnitureBoard {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *BoardItemUpdateHomeCmd) GetDels() []uint32 {
	if x != nil {
		return x.Dels
	}
	return nil
}

type BoardMsgUpdateHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param   *HomeCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=18" json:"param,omitempty"`
	Time    *uint32     `protobuf:"varint,3,opt,name=time,def=0" json:"time,omitempty"`
	Updates []*BoardMsg `protobuf:"bytes,4,rep,name=updates" json:"updates,omitempty"`
	Dels    []uint32    `protobuf:"varint,5,rep,name=dels" json:"dels,omitempty"`
}

// Default values for BoardMsgUpdateHomeCmd fields.
const (
	Default_BoardMsgUpdateHomeCmd_Cmd   = Command_HOMEC_PROTOCMD
	Default_BoardMsgUpdateHomeCmd_Param = HomeCParam_HOMECPARAM_MSGITEM_UPDATE
	Default_BoardMsgUpdateHomeCmd_Time  = uint32(0)
)

func (x *BoardMsgUpdateHomeCmd) Reset() {
	*x = BoardMsgUpdateHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardMsgUpdateHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardMsgUpdateHomeCmd) ProtoMessage() {}

func (x *BoardMsgUpdateHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardMsgUpdateHomeCmd.ProtoReflect.Descriptor instead.
func (*BoardMsgUpdateHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{32}
}

func (x *BoardMsgUpdateHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BoardMsgUpdateHomeCmd_Cmd
}

func (x *BoardMsgUpdateHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BoardMsgUpdateHomeCmd_Param
}

func (x *BoardMsgUpdateHomeCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_BoardMsgUpdateHomeCmd_Time
}

func (x *BoardMsgUpdateHomeCmd) GetUpdates() []*BoardMsg {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *BoardMsgUpdateHomeCmd) GetDels() []uint32 {
	if x != nil {
		return x.Dels
	}
	return nil
}

type EventItemQueryHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param         *HomeCParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=19" json:"param,omitempty"`
	Page          *uint32           `protobuf:"varint,3,opt,name=page,def=0" json:"page,omitempty"`
	Totalcount    *uint32           `protobuf:"varint,4,opt,name=totalcount,def=0" json:"totalcount,omitempty"`
	Visitcount    *uint32           `protobuf:"varint,5,opt,name=visitcount,def=0" json:"visitcount,omitempty"`
	Dayvisitcount *uint32           `protobuf:"varint,6,opt,name=dayvisitcount,def=0" json:"dayvisitcount,omitempty"`
	Items         []*FurnitureEvent `protobuf:"bytes,7,rep,name=items" json:"items,omitempty"`
}

// Default values for EventItemQueryHomeCmd fields.
const (
	Default_EventItemQueryHomeCmd_Cmd           = Command_HOMEC_PROTOCMD
	Default_EventItemQueryHomeCmd_Param         = HomeCParam_HOMECPARAM_EVENTITEM_QUERY
	Default_EventItemQueryHomeCmd_Page          = uint32(0)
	Default_EventItemQueryHomeCmd_Totalcount    = uint32(0)
	Default_EventItemQueryHomeCmd_Visitcount    = uint32(0)
	Default_EventItemQueryHomeCmd_Dayvisitcount = uint32(0)
)

func (x *EventItemQueryHomeCmd) Reset() {
	*x = EventItemQueryHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventItemQueryHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventItemQueryHomeCmd) ProtoMessage() {}

func (x *EventItemQueryHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventItemQueryHomeCmd.ProtoReflect.Descriptor instead.
func (*EventItemQueryHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{33}
}

func (x *EventItemQueryHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EventItemQueryHomeCmd_Cmd
}

func (x *EventItemQueryHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EventItemQueryHomeCmd_Param
}

func (x *EventItemQueryHomeCmd) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return Default_EventItemQueryHomeCmd_Page
}

func (x *EventItemQueryHomeCmd) GetTotalcount() uint32 {
	if x != nil && x.Totalcount != nil {
		return *x.Totalcount
	}
	return Default_EventItemQueryHomeCmd_Totalcount
}

func (x *EventItemQueryHomeCmd) GetVisitcount() uint32 {
	if x != nil && x.Visitcount != nil {
		return *x.Visitcount
	}
	return Default_EventItemQueryHomeCmd_Visitcount
}

func (x *EventItemQueryHomeCmd) GetDayvisitcount() uint32 {
	if x != nil && x.Dayvisitcount != nil {
		return *x.Dayvisitcount
	}
	return Default_EventItemQueryHomeCmd_Dayvisitcount
}

func (x *EventItemQueryHomeCmd) GetItems() []*FurnitureEvent {
	if x != nil {
		return x.Items
	}
	return nil
}

type QueryWoodRankHomeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=70" json:"cmd,omitempty"`
	Param      *HomeCParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.HomeCParam,def=20" json:"param,omitempty"`
	Typebranch *uint32       `protobuf:"varint,3,opt,name=typebranch,def=0" json:"typebranch,omitempty"`
	Hpreduce   *uint32       `protobuf:"varint,4,opt,name=hpreduce,def=0" json:"hpreduce,omitempty"`
	Over       *bool         `protobuf:"varint,5,opt,name=over,def=0" json:"over,omitempty"`
	Ranks      []*DamageItem `protobuf:"bytes,6,rep,name=ranks" json:"ranks,omitempty"`
}

// Default values for QueryWoodRankHomeCmd fields.
const (
	Default_QueryWoodRankHomeCmd_Cmd        = Command_HOMEC_PROTOCMD
	Default_QueryWoodRankHomeCmd_Param      = HomeCParam_HOMECPARAM_QUERY_WOODRANK
	Default_QueryWoodRankHomeCmd_Typebranch = uint32(0)
	Default_QueryWoodRankHomeCmd_Hpreduce   = uint32(0)
	Default_QueryWoodRankHomeCmd_Over       = bool(false)
)

func (x *QueryWoodRankHomeCmd) Reset() {
	*x = QueryWoodRankHomeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_HomeCmd_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWoodRankHomeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWoodRankHomeCmd) ProtoMessage() {}

func (x *QueryWoodRankHomeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_HomeCmd_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWoodRankHomeCmd.ProtoReflect.Descriptor instead.
func (*QueryWoodRankHomeCmd) Descriptor() ([]byte, []int) {
	return file_HomeCmd_proto_rawDescGZIP(), []int{34}
}

func (x *QueryWoodRankHomeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryWoodRankHomeCmd_Cmd
}

func (x *QueryWoodRankHomeCmd) GetParam() HomeCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryWoodRankHomeCmd_Param
}

func (x *QueryWoodRankHomeCmd) GetTypebranch() uint32 {
	if x != nil && x.Typebranch != nil {
		return *x.Typebranch
	}
	return Default_QueryWoodRankHomeCmd_Typebranch
}

func (x *QueryWoodRankHomeCmd) GetHpreduce() uint32 {
	if x != nil && x.Hpreduce != nil {
		return *x.Hpreduce
	}
	return Default_QueryWoodRankHomeCmd_Hpreduce
}

func (x *QueryWoodRankHomeCmd) GetOver() bool {
	if x != nil && x.Over != nil {
		return *x.Over
	}
	return Default_QueryWoodRankHomeCmd_Over
}

func (x *QueryWoodRankHomeCmd) GetRanks() []*DamageItem {
	if x != nil {
		return x.Ranks
	}
	return nil
}

var File_HomeCmd_proto protoreflect.FileDescriptor

var file_HomeCmd_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x0c, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75,
	0x72, 0x65, 0x50, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21,
	0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x06, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x1e, 0x0a, 0x03, 0x70, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x67, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x70, 0x65, 0x74,
	0x22, 0x69, 0x0a, 0x0e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x64,
	0x69, 0x6f, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x69, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x08,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x4c, 0x0a, 0x0e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0xb7, 0x03, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12,
	0x13, 0x0a, 0x03, 0x65, 0x79, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x03, 0x65, 0x79, 0x65, 0x12, 0x15, 0x0a, 0x04, 0x68, 0x61, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x68, 0x61, 0x69, 0x72, 0x12, 0x1f, 0x0a, 0x09, 0x68,
	0x61, 0x69, 0x72, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x09, 0x68, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x15, 0x0a,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04,
	0x68, 0x65, 0x61, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6d,
	0x6f, 0x75, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d,
	0x6f, 0x75, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x62, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f,
	0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x0f, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x3a, 0x0b, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x46, 0x75,
	0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x66, 0x75, 0x72,
	0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x66, 0x75,
	0x72, 0x6e, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22,
	0xd9, 0x02, 0x0a, 0x08, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x12, 0x33, 0x0a, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x3a, 0x0e, 0x45, 0x48, 0x4f,
	0x55, 0x53, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x52, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x12, 0x3e, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x3a, 0x0e, 0x45, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x4f, 0x50,
	0x45, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x52, 0x09, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x3a, 0x10, 0x45, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x52,
	0x45, 0x41, 0x5f, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41,
	0x72, 0x65, 0x61, 0x12, 0x2c, 0x0a, 0x0e, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0d, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x6f,
	0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x66,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x53, 0x65,
	0x6c, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x5f, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0c, 0x67, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x5f,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b,
	0x67, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x0d, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x05,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x90, 0x07, 0x0a, 0x05, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0b, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x6c, 0x76, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74,
	0x75, 0x72, 0x65, 0x6c, 0x76, 0x12, 0x29, 0x0a, 0x0e, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x0e, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x27, 0x0a, 0x0d, 0x70, 0x65, 0x74, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x70, 0x65, 0x74, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x66, 0x69, 0x72,
	0x65, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x65, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x64, 0x61, 0x79, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d,
	0x64, 0x61, 0x79, 0x76, 0x69, 0x73, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x05, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x05, 0x67, 0x75, 0x69, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0c, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x75, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x46, 0x75, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x75, 0x70, 0x12, 0x29, 0x0a, 0x0c, 0x77, 0x6f, 0x6f, 0x64, 0x72, 0x61, 0x6e,
	0x6b, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0c, 0x77, 0x6f, 0x6f, 0x64, 0x72, 0x61, 0x6e, 0x6b, 0x6f, 0x70, 0x65, 0x6e,
	0x12, 0x35, 0x0a, 0x05, 0x66, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x0e, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x52, 0x05, 0x66, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x48, 0x6f,
	0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x0f, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x52, 0x03, 0x6f, 0x70,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x30, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x44, 0x65,
	0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x50,
	0x65, 0x74, 0x52, 0x04, 0x70, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46,
	0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x06, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e,
	0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x06, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75,
	0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x29, 0x0a, 0x0f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x77, 0x65, 0x65,
	0x6b, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x06, 0x47,
	0x61, 0x72, 0x64, 0x65, 0x6e, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x66, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47,
	0x61, 0x72, 0x64, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0f, 0x45, 0x47, 0x41, 0x52, 0x44,
	0x45, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x66, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x3a, 0x10, 0x45, 0x47, 0x41, 0x52, 0x44, 0x45, 0x4e, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x04, 0x70, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x50, 0x65, 0x74, 0x52,
	0x04, 0x70, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e,
	0x69, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69,
	0x6f, 0x73, 0x22, 0x66, 0x0a, 0x09, 0x42, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x12,
	0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x70, 0x72, 0x61, 0x69,
	0x73, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x69, 0x73, 0x70, 0x72, 0x61,
	0x69, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x08, 0x69, 0x73, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x19, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f,
	0x6d, 0x65, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x48, 0x4f, 0x4d, 0x45, 0x44, 0x41,
	0x54, 0x41, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x05, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x66,
	0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09,
	0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x16, 0x46, 0x75,
	0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d,
	0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x0e, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x43, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x46,
	0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x14,
	0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x07, 0x6e, 0x6f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x6e, 0x6f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x22, 0xb8, 0x02, 0x0a, 0x14, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x48, 0x4f,
	0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55,
	0x52, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3b, 0x0a,
	0x04, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x3a, 0x12, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x52,
	0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xc9,
	0x01, 0x0a, 0x16, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48,
	0x6f, 0x6d, 0x65, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x48, 0x4f, 0x4d, 0x45, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x0d, 0x46,
	0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x05,
	0x66, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x3a, 0x12, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x66, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x65, 0x61, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75,
	0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x74, 0x52, 0x05, 0x73, 0x65, 0x61,
	0x74, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75,
	0x72, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12,
	0x23, 0x0a, 0x03, 0x6e, 0x70, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x70, 0x63, 0x52,
	0x03, 0x6e, 0x70, 0x63, 0x22, 0xd5, 0x01, 0x0a, 0x1a, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65,
	0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e,
	0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x44, 0x41, 0x54, 0x41, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xe6, 0x01, 0x0a,
	0x12, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65,
	0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e,
	0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x16, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x48, 0x4f, 0x55, 0x53, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x10, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x03, 0x64, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x03, 0x64, 0x65, 0x63, 0x22, 0x9e, 0x02, 0x0a, 0x09, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x3a, 0x0e, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x4d, 0x49, 0x4e, 0x52, 0x05, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x6f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x48, 0x6f, 0x75, 0x73, 0x65, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64,
	0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x70, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69,
	0x74, 0x75, 0x72, 0x65, 0x50, 0x65, 0x74, 0x52, 0x03, 0x70, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x06,
	0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x64, 0x69,
	0x6f, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x06,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x16, 0x48, 0x6f, 0x75, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6d,
	0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x48, 0x4f,
	0x4d, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1a, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x4f,
	0x55, 0x53, 0x45, 0x44, 0x41, 0x54, 0x41, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x8f,
	0x02, 0x0a, 0x19, 0x50, 0x65, 0x74, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x68, 0x6f, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x48, 0x4f,
	0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x45, 0x54, 0x46, 0x55, 0x52, 0x4e,
	0x49, 0x54, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x49, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x65, 0x74, 0x46, 0x75, 0x72,
	0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x17, 0x45, 0x50,
	0x45, 0x54, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x74, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x74, 0x67, 0x75, 0x69, 0x64,
	0x22, 0x75, 0x0a, 0x0b, 0x50, 0x72, 0x61, 0x79, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12,
	0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x48, 0x4f, 0x4d, 0x45,
	0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x0f, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x41, 0x59,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x42, 0x0a, 0x10, 0x4e, 0x70, 0x63, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x0c,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x48, 0x4f,
	0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x48, 0x4f,
	0x4d, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x63, 0x63,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x63, 0x63,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0xb1, 0x02,
	0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x0e, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x6d,
	0x65, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x44, 0x41,
	0x54, 0x41, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x05, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x67,
	0x61, 0x72, 0x64, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x06, 0x67, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x12,
	0x2e, 0x0a, 0x0a, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x0a, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x0b, 0x67, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x0b, 0x67, 0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x22, 0x8c, 0x02, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x6f, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x0e, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x6d, 0x65,
	0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x63, 0x63,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x63, 0x63,
	0x69, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4f, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61, 0x3a,
	0x0c, 0x45, 0x4f, 0x50, 0x54, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72,
	0x22, 0xd3, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x0e, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x6d,
	0x65, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72,
	0x69, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x10, 0x45, 0x50, 0x52, 0x49, 0x4e,
	0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x3a, 0x0e, 0x45, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d,
	0x49, 0x4e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x44, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x11,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x48, 0x4f, 0x4d, 0x45, 0x43,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16,
	0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x24, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x15, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x48,
	0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x15, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x16, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f,
	0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x0e, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x43,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xdd, 0x01, 0x0a,
	0x15, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x6f, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x0e, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x6d, 0x65,
	0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xbb, 0x02, 0x0a,
	0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x6f, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x0e, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x6d, 0x65,
	0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0d, 0x64, 0x61, 0x79, 0x76, 0x69, 0x73,
	0x69, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x0d, 0x64, 0x61, 0x79, 0x76, 0x69, 0x73, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x14, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x57, 0x6f, 0x6f, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x48, 0x6f, 0x6d, 0x65,
	0x43, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0e,
	0x48, 0x4f, 0x4d, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x43, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x19, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x57, 0x4f, 0x4f, 0x44, 0x52, 0x41, 0x4e, 0x4b, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x74, 0x79,
	0x70, 0x65, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x08, 0x68, 0x70, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x68,
	0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x2a, 0xd0, 0x04, 0x0a, 0x0a, 0x48, 0x6f,
	0x6d, 0x65, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x4f, 0x4d, 0x45,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x48, 0x4f, 0x4d, 0x45,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x4f, 0x50,
	0x45, 0x52, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x44, 0x41, 0x54, 0x41,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x4f, 0x4d, 0x45,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x44, 0x41, 0x54, 0x41, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x50, 0x45, 0x54, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x4f, 0x4d, 0x45, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x41, 0x59, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14,
	0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x48, 0x4f, 0x4d, 0x45, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x50, 0x52, 0x49, 0x4e, 0x54, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0f, 0x12, 0x1e, 0x0a,
	0x1a, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x10, 0x12, 0x1f, 0x0a,
	0x1b, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x11, 0x12, 0x1d,
	0x0a, 0x19, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x53, 0x47,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x12, 0x12, 0x1e, 0x0a,
	0x1a, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x13, 0x12, 0x1d, 0x0a,
	0x19, 0x48, 0x4f, 0x4d, 0x45, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x57, 0x4f, 0x4f, 0x44, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x14, 0x2a, 0x4c, 0x0a, 0x0a,
	0x45, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x48,
	0x4f, 0x55, 0x53, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x02, 0x2a, 0x63, 0x0a, 0x0b, 0x45, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x48, 0x4f,
	0x55, 0x53, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x48,
	0x4f, 0x55, 0x53, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a,
	0x5f, 0x0a, 0x0a, 0x45, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x4f,
	0x50, 0x45, 0x4e, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03,
	0x2a, 0x75, 0x0a, 0x0a, 0x45, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x4f, 0x50, 0x45, 0x4e,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x4f, 0x50, 0x45,
	0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x61, 0x0a, 0x0a, 0x45, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x41, 0x72, 0x65, 0x61, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x41,
	0x52, 0x45, 0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x47, 0x41,
	0x52, 0x44, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x41, 0x52, 0x45, 0x41, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x37, 0x0a, 0x0b, 0x45, 0x47,
	0x61, 0x72, 0x64, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x47, 0x41,
	0x52, 0x44, 0x45, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x47, 0x41, 0x52, 0x44, 0x45, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x58, 0x10, 0x01, 0x2a, 0x3a, 0x0a, 0x0c, 0x45, 0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x47, 0x41, 0x52, 0x44, 0x45, 0x4e, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x47, 0x41,
	0x52, 0x44, 0x45, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x01, 0x2a,
	0xba, 0x01, 0x0a, 0x10, 0x45, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55,
	0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x54, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x46,
	0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x55, 0x54, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x46, 0x55, 0x52, 0x4e,
	0x49, 0x54, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x44, 0x49, 0x54,
	0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x54, 0x4f, 0x46, 0x46, 0x41, 0x4c, 0x4c,
	0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0x8c, 0x06, 0x0a,
	0x0e, 0x45, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x46, 0x55, 0x52, 0x4e,
	0x49, 0x54, 0x55, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x4f, 0x50,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x46, 0x55,
	0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x41, 0x59,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f,
	0x4f, 0x4e, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55,
	0x52, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x57,
	0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x46, 0x55, 0x52,
	0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52,
	0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x4f, 0x4e, 0x10, 0x0a, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x50,
	0x48, 0x4f, 0x54, 0x4f, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49,
	0x54, 0x55, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49,
	0x54, 0x55, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x44,
	0x45, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x46, 0x55, 0x52, 0x4e,
	0x49, 0x54, 0x55, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x4d, 0x53,
	0x47, 0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52,
	0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x4d,
	0x53, 0x47, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55,
	0x52, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x54, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10,
	0x13, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x4f,
	0x50, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x14, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x52,
	0x5f, 0x53, 0x41, 0x56, 0x45, 0x4d, 0x41, 0x50, 0x10, 0x15, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x46,
	0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x57, 0x4f, 0x4f,
	0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x46, 0x55,
	0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x57, 0x4f, 0x4f, 0x44,
	0x5f, 0x53, 0x45, 0x54, 0x10, 0x17, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49,
	0x54, 0x55, 0x52, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x57, 0x4f, 0x4f, 0x44, 0x5f, 0x4f, 0x56,
	0x45, 0x52, 0x10, 0x18, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55,
	0x52, 0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x57, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x4c, 0x45, 0x41,
	0x52, 0x10, 0x19, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52,
	0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52,
	0x45, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x1b, 0x2a, 0xc0, 0x02, 0x0a, 0x0e,
	0x45, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49,
	0x54, 0x55, 0x52, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x4c, 0x56, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x46, 0x55, 0x52, 0x4e,
	0x49, 0x54, 0x55, 0x52, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x4f, 0x57, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x43, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x46, 0x55, 0x52, 0x4e,
	0x49, 0x54, 0x55, 0x52, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x10,
	0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45,
	0x41, 0x54, 0x53, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54,
	0x55, 0x52, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55,
	0x52, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x09, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x4e, 0x50, 0x43, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49,
	0x54, 0x55, 0x52, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x0b, 0x2a, 0xa4,
	0x01, 0x0a, 0x0c, 0x45, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x43, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x48, 0x4f, 0x55, 0x53, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x44, 0x49, 0x54,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x48, 0x4f, 0x55, 0x53,
	0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0xac, 0x01, 0x0a, 0x0a, 0x45, 0x48, 0x6f, 0x75, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x48, 0x4f, 0x55,
	0x53, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x48, 0x4f, 0x55, 0x53,
	0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x45, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x48, 0x4f, 0x55, 0x53, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x10,
	0x04, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x46, 0x49, 0x52, 0x45, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x05,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d,
	0x41, 0x58, 0x10, 0x07, 0x2a, 0xd4, 0x01, 0x0a, 0x13, 0x45, 0x50, 0x65, 0x74, 0x46, 0x75, 0x72,
	0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x50, 0x45, 0x54, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x50, 0x45,
	0x54, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x50, 0x45,
	0x54, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x45, 0x54, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x50, 0x45, 0x54,
	0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x45, 0x54, 0x4f, 0x46, 0x46, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x50, 0x45, 0x54,
	0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x50, 0x45, 0x54, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x50, 0x45, 0x54, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0x9e, 0x03, 0x0a, 0x08,
	0x45, 0x4f, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4f, 0x50, 0x54,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4f,
	0x50, 0x54, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x4f, 0x50, 0x54, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4f,
	0x50, 0x54, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x5f, 0x53, 0x45,
	0x4c, 0x46, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4f, 0x50, 0x54, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x4f, 0x50, 0x54, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4f, 0x50, 0x54, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4f, 0x50, 0x54, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4c, 0x56, 0x10, 0x07,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4f, 0x50, 0x54, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x55, 0x52,
	0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x08, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4f, 0x50, 0x54, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x55, 0x50, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4f, 0x50, 0x54, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x47, 0x41, 0x52, 0x44, 0x45, 0x4e, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x0a, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x4f, 0x50, 0x54, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4f, 0x50, 0x54, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x52, 0x45, 0x41, 0x10, 0x0c, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x4f, 0x50, 0x54, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x4d, 0x53, 0x47, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4f, 0x50, 0x54, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x54, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0e, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x4f, 0x50, 0x54, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x41, 0x59, 0x56, 0x49,
	0x53, 0x49, 0x54, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4f,
	0x50, 0x54, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x10, 0x2a, 0x86, 0x01, 0x0a,
	0x0c, 0x45, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x50, 0x52, 0x49, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x41, 0x49,
	0x53, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x50, 0x52, 0x41, 0x49, 0x53, 0x45, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x69, 0x0a, 0x0a, 0x45, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50, 0x52, 0x49, 0x4e,
	0x54, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x52, 0x41, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x49, 0x53, 0x50, 0x52, 0x41, 0x49, 0x53, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x50, 0x52, 0x49, 0x4e, 0x47, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03,
	0x2a, 0x27, 0x0a, 0x09, 0x45, 0x57, 0x6f, 0x6f, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a,
	0x15, 0x45, 0x57, 0x4f, 0x4f, 0x44, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0xe7, 0x07,
}

var (
	file_HomeCmd_proto_rawDescOnce sync.Once
	file_HomeCmd_proto_rawDescData = file_HomeCmd_proto_rawDesc
)

func file_HomeCmd_proto_rawDescGZIP() []byte {
	file_HomeCmd_proto_rawDescOnce.Do(func() {
		file_HomeCmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_HomeCmd_proto_rawDescData)
	})
	return file_HomeCmd_proto_rawDescData
}

var file_HomeCmd_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_HomeCmd_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_HomeCmd_proto_goTypes = []interface{}{
	(HomeCParam)(0),                    // 0: Cmd.HomeCParam
	(EHouseType)(0),                    // 1: Cmd.EHouseType
	(EHouseState)(0),                   // 2: Cmd.EHouseState
	(EHouseOpen)(0),                    // 3: Cmd.EHouseOpen
	(EBoardOpen)(0),                    // 4: Cmd.EBoardOpen
	(EEnterArea)(0),                    // 5: Cmd.EEnterArea
	(EGardenType)(0),                   // 6: Cmd.EGardenType
	(EGardenState)(0),                  // 7: Cmd.EGardenState
	(EFurnitureAction)(0),              // 8: Cmd.EFurnitureAction
	(EFurnitureOper)(0),                // 9: Cmd.EFurnitureOper
	(EFurnitureData)(0),                // 10: Cmd.EFurnitureData
	(EHouseAction)(0),                  // 11: Cmd.EHouseAction
	(EHouseData)(0),                    // 12: Cmd.EHouseData
	(EPetFurnitureAction)(0),           // 13: Cmd.EPetFurnitureAction
	(EOptData)(0),                      // 14: Cmd.EOptData
	(EPrintAction)(0),                  // 15: Cmd.EPrintAction
	(EPrintData)(0),                    // 16: Cmd.EPrintData
	(EWoodRank)(0),                     // 17: Cmd.EWoodRank
	(*FurniturePet)(nil),               // 18: Cmd.FurniturePet
	(*FurnitureRadio)(nil),             // 19: Cmd.FurnitureRadio
	(*BoardMsg)(nil),                   // 20: Cmd.BoardMsg
	(*FurnitureBoard)(nil),             // 21: Cmd.FurnitureBoard
	(*EventUser)(nil),                  // 22: Cmd.EventUser
	(*FurnitureEvent)(nil),             // 23: Cmd.FurnitureEvent
	(*HouseOpt)(nil),                   // 24: Cmd.HouseOpt
	(*HouseDecorate)(nil),              // 25: Cmd.HouseDecorate
	(*House)(nil),                      // 26: Cmd.House
	(*Garden)(nil),                     // 27: Cmd.Garden
	(*BluePrint)(nil),                  // 28: Cmd.BluePrint
	(*QueryFurnitureDataHomeCmd)(nil),  // 29: Cmd.QueryFurnitureDataHomeCmd
	(*FurnitureActionHomeCmd)(nil),     // 30: Cmd.FurnitureActionHomeCmd
	(*FurnitureOperHomeCmd)(nil),       // 31: Cmd.FurnitureOperHomeCmd
	(*FurnitureUpdateHomeCmd)(nil),     // 32: Cmd.FurnitureUpdateHomeCmd
	(*FurnitureData)(nil),              // 33: Cmd.FurnitureData
	(*FurnitureDataUpdateHomeCmd)(nil), // 34: Cmd.FurnitureDataUpdateHomeCmd
	(*HouseActionHomeCmd)(nil),         // 35: Cmd.HouseActionHomeCmd
	(*HouseData)(nil),                  // 36: Cmd.HouseData
	(*HouseDataUpdateHomeCmd)(nil),     // 37: Cmd.HouseDataUpdateHomeCmd
	(*PetFurnitureActionhomeCmd)(nil),  // 38: Cmd.PetFurnitureActionhomeCmd
	(*PrayHomeCmd)(nil),                // 39: Cmd.PrayHomeCmd
	(*NpcActionHomeCmd)(nil),           // 40: Cmd.NpcActionHomeCmd
	(*EnterHomeCmd)(nil),               // 41: Cmd.EnterHomeCmd
	(*QueryHouseDataHomeCmd)(nil),      // 42: Cmd.QueryHouseDataHomeCmd
	(*OptUpdateHomeCmd)(nil),           // 43: Cmd.OptUpdateHomeCmd
	(*PrintActionHomeCmd)(nil),         // 44: Cmd.PrintActionHomeCmd
	(*PrintData)(nil),                  // 45: Cmd.PrintData
	(*PrintItem)(nil),                  // 46: Cmd.PrintItem
	(*PrintUpdateHomeCmd)(nil),         // 47: Cmd.PrintUpdateHomeCmd
	(*BoardItemQueryHomeCmd)(nil),      // 48: Cmd.BoardItemQueryHomeCmd
	(*BoardItemUpdateHomeCmd)(nil),     // 49: Cmd.BoardItemUpdateHomeCmd
	(*BoardMsgUpdateHomeCmd)(nil),      // 50: Cmd.BoardMsgUpdateHomeCmd
	(*EventItemQueryHomeCmd)(nil),      // 51: Cmd.EventItemQueryHomeCmd
	(*QueryWoodRankHomeCmd)(nil),       // 52: Cmd.QueryWoodRankHomeCmd
	(*EggData)(nil),                    // 53: Cmd.EggData
	(EProfession)(0),                   // 54: Cmd.EProfession
	(EGender)(0),                       // 55: Cmd.EGender
	(Command)(0),                       // 56: Cmd.Command
	(*Furniture)(nil),                  // 57: Cmd.Furniture
	(*FurnitureSeat)(nil),              // 58: Cmd.FurnitureSeat
	(*FurniturePhoto)(nil),             // 59: Cmd.FurniturePhoto
	(*FurnitureNpc)(nil),               // 60: Cmd.FurnitureNpc
	(*DamageItem)(nil),                 // 61: Cmd.DamageItem
}
var file_HomeCmd_proto_depIdxs = []int32{
	53, // 0: Cmd.FurniturePet.pet:type_name -> Cmd.EggData
	20, // 1: Cmd.FurnitureBoard.items:type_name -> Cmd.BoardMsg
	54, // 2: Cmd.EventUser.profession:type_name -> Cmd.EProfession
	55, // 3: Cmd.EventUser.gender:type_name -> Cmd.EGender
	22, // 4: Cmd.FurnitureEvent.user:type_name -> Cmd.EventUser
	3,  // 5: Cmd.HouseOpt.open:type_name -> Cmd.EHouseOpen
	4,  // 6: Cmd.HouseOpt.board_open:type_name -> Cmd.EBoardOpen
	5,  // 7: Cmd.HouseOpt.enter_area:type_name -> Cmd.EEnterArea
	1,  // 8: Cmd.House.ftype:type_name -> Cmd.EHouseType
	2,  // 9: Cmd.House.state:type_name -> Cmd.EHouseState
	24, // 10: Cmd.House.opt:type_name -> Cmd.HouseOpt
	25, // 11: Cmd.House.decorates:type_name -> Cmd.HouseDecorate
	18, // 12: Cmd.House.pets:type_name -> Cmd.FurniturePet
	19, // 13: Cmd.House.radios:type_name -> Cmd.FurnitureRadio
	21, // 14: Cmd.House.boards:type_name -> Cmd.FurnitureBoard
	23, // 15: Cmd.House.events:type_name -> Cmd.FurnitureEvent
	6,  // 16: Cmd.Garden.ftype:type_name -> Cmd.EGardenType
	7,  // 17: Cmd.Garden.state:type_name -> Cmd.EGardenState
	25, // 18: Cmd.Garden.decorates:type_name -> Cmd.HouseDecorate
	18, // 19: Cmd.Garden.pets:type_name -> Cmd.FurniturePet
	19, // 20: Cmd.Garden.radios:type_name -> Cmd.FurnitureRadio
	56, // 21: Cmd.QueryFurnitureDataHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 22: Cmd.QueryFurnitureDataHomeCmd.param:type_name -> Cmd.HomeCParam
	26, // 23: Cmd.QueryFurnitureDataHomeCmd.house:type_name -> Cmd.House
	57, // 24: Cmd.QueryFurnitureDataHomeCmd.furniture:type_name -> Cmd.Furniture
	56, // 25: Cmd.FurnitureActionHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 26: Cmd.FurnitureActionHomeCmd.param:type_name -> Cmd.HomeCParam
	8,  // 27: Cmd.FurnitureActionHomeCmd.action:type_name -> Cmd.EFurnitureAction
	57, // 28: Cmd.FurnitureActionHomeCmd.items:type_name -> Cmd.Furniture
	56, // 29: Cmd.FurnitureOperHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 30: Cmd.FurnitureOperHomeCmd.param:type_name -> Cmd.HomeCParam
	9,  // 31: Cmd.FurnitureOperHomeCmd.oper:type_name -> Cmd.EFurnitureOper
	56, // 32: Cmd.FurnitureUpdateHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 33: Cmd.FurnitureUpdateHomeCmd.param:type_name -> Cmd.HomeCParam
	57, // 34: Cmd.FurnitureUpdateHomeCmd.updates:type_name -> Cmd.Furniture
	10, // 35: Cmd.FurnitureData.ftype:type_name -> Cmd.EFurnitureData
	58, // 36: Cmd.FurnitureData.seats:type_name -> Cmd.FurnitureSeat
	59, // 37: Cmd.FurnitureData.photos:type_name -> Cmd.FurniturePhoto
	60, // 38: Cmd.FurnitureData.npc:type_name -> Cmd.FurnitureNpc
	56, // 39: Cmd.FurnitureDataUpdateHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 40: Cmd.FurnitureDataUpdateHomeCmd.param:type_name -> Cmd.HomeCParam
	33, // 41: Cmd.FurnitureDataUpdateHomeCmd.updates:type_name -> Cmd.FurnitureData
	56, // 42: Cmd.HouseActionHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 43: Cmd.HouseActionHomeCmd.param:type_name -> Cmd.HomeCParam
	11, // 44: Cmd.HouseActionHomeCmd.action:type_name -> Cmd.EHouseAction
	25, // 45: Cmd.HouseActionHomeCmd.dec:type_name -> Cmd.HouseDecorate
	12, // 46: Cmd.HouseData.eData:type_name -> Cmd.EHouseData
	25, // 47: Cmd.HouseData.decorate:type_name -> Cmd.HouseDecorate
	18, // 48: Cmd.HouseData.pet:type_name -> Cmd.FurniturePet
	19, // 49: Cmd.HouseData.radios:type_name -> Cmd.FurnitureRadio
	21, // 50: Cmd.HouseData.boards:type_name -> Cmd.FurnitureBoard
	56, // 51: Cmd.HouseDataUpdateHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 52: Cmd.HouseDataUpdateHomeCmd.param:type_name -> Cmd.HomeCParam
	36, // 53: Cmd.HouseDataUpdateHomeCmd.updates:type_name -> Cmd.HouseData
	56, // 54: Cmd.PetFurnitureActionhomeCmd.cmd:type_name -> Cmd.Command
	0,  // 55: Cmd.PetFurnitureActionhomeCmd.param:type_name -> Cmd.HomeCParam
	13, // 56: Cmd.PetFurnitureActionhomeCmd.action:type_name -> Cmd.EPetFurnitureAction
	56, // 57: Cmd.PrayHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 58: Cmd.PrayHomeCmd.param:type_name -> Cmd.HomeCParam
	56, // 59: Cmd.NpcActionHomeCmd.cmd:type_name -> Cmd.Command
	56, // 60: Cmd.EnterHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 61: Cmd.EnterHomeCmd.param:type_name -> Cmd.HomeCParam
	56, // 62: Cmd.QueryHouseDataHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 63: Cmd.QueryHouseDataHomeCmd.param:type_name -> Cmd.HomeCParam
	26, // 64: Cmd.QueryHouseDataHomeCmd.house:type_name -> Cmd.House
	26, // 65: Cmd.QueryHouseDataHomeCmd.garden:type_name -> Cmd.House
	57, // 66: Cmd.QueryHouseDataHomeCmd.furnitures:type_name -> Cmd.Furniture
	57, // 67: Cmd.QueryHouseDataHomeCmd.gfurnitures:type_name -> Cmd.Furniture
	56, // 68: Cmd.OptUpdateHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 69: Cmd.OptUpdateHomeCmd.param:type_name -> Cmd.HomeCParam
	14, // 70: Cmd.OptUpdateHomeCmd.data:type_name -> Cmd.EOptData
	56, // 71: Cmd.PrintActionHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 72: Cmd.PrintActionHomeCmd.param:type_name -> Cmd.HomeCParam
	15, // 73: Cmd.PrintActionHomeCmd.action:type_name -> Cmd.EPrintAction
	16, // 74: Cmd.PrintData.data:type_name -> Cmd.EPrintData
	45, // 75: Cmd.PrintItem.datas:type_name -> Cmd.PrintData
	56, // 76: Cmd.PrintUpdateHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 77: Cmd.PrintUpdateHomeCmd.param:type_name -> Cmd.HomeCParam
	46, // 78: Cmd.PrintUpdateHomeCmd.items:type_name -> Cmd.PrintItem
	56, // 79: Cmd.BoardItemQueryHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 80: Cmd.BoardItemQueryHomeCmd.param:type_name -> Cmd.HomeCParam
	21, // 81: Cmd.BoardItemQueryHomeCmd.items:type_name -> Cmd.FurnitureBoard
	56, // 82: Cmd.BoardItemUpdateHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 83: Cmd.BoardItemUpdateHomeCmd.param:type_name -> Cmd.HomeCParam
	21, // 84: Cmd.BoardItemUpdateHomeCmd.updates:type_name -> Cmd.FurnitureBoard
	56, // 85: Cmd.BoardMsgUpdateHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 86: Cmd.BoardMsgUpdateHomeCmd.param:type_name -> Cmd.HomeCParam
	20, // 87: Cmd.BoardMsgUpdateHomeCmd.updates:type_name -> Cmd.BoardMsg
	56, // 88: Cmd.EventItemQueryHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 89: Cmd.EventItemQueryHomeCmd.param:type_name -> Cmd.HomeCParam
	23, // 90: Cmd.EventItemQueryHomeCmd.items:type_name -> Cmd.FurnitureEvent
	56, // 91: Cmd.QueryWoodRankHomeCmd.cmd:type_name -> Cmd.Command
	0,  // 92: Cmd.QueryWoodRankHomeCmd.param:type_name -> Cmd.HomeCParam
	61, // 93: Cmd.QueryWoodRankHomeCmd.ranks:type_name -> Cmd.DamageItem
	94, // [94:94] is the sub-list for method output_type
	94, // [94:94] is the sub-list for method input_type
	94, // [94:94] is the sub-list for extension type_name
	94, // [94:94] is the sub-list for extension extendee
	0,  // [0:94] is the sub-list for field type_name
}

func init() { file_HomeCmd_proto_init() }
func file_HomeCmd_proto_init() {
	if File_HomeCmd_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_SceneItem_proto_init()
	file_ProtoCommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_HomeCmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurniturePet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnitureRadio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnitureBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnitureEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HouseOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HouseDecorate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*House); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Garden); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BluePrint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFurnitureDataHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnitureActionHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnitureOperHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnitureUpdateHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnitureData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnitureDataUpdateHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HouseActionHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HouseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HouseDataUpdateHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetFurnitureActionhomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrayHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpcActionHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHouseDataHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptUpdateHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrintActionHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrintData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrintItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrintUpdateHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardItemQueryHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardItemUpdateHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardMsgUpdateHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventItemQueryHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_HomeCmd_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWoodRankHomeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_HomeCmd_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_HomeCmd_proto_goTypes,
		DependencyIndexes: file_HomeCmd_proto_depIdxs,
		EnumInfos:         file_HomeCmd_proto_enumTypes,
		MessageInfos:      file_HomeCmd_proto_msgTypes,
	}.Build()
	File_HomeCmd_proto = out.File
	file_HomeCmd_proto_rawDesc = nil
	file_HomeCmd_proto_goTypes = nil
	file_HomeCmd_proto_depIdxs = nil
}
