// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: SceneItem.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ItemParam int32

const (
	ItemParam_ITEMPARAM_PACKAGEITEM                   ItemParam = 1
	ItemParam_ITEMPARAM_PACKAGEUPDATE                 ItemParam = 2
	ItemParam_ITEMPARAM_ITEMUSE                       ItemParam = 3
	ItemParam_ITEMPARAM_PACKAGESORT                   ItemParam = 4
	ItemParam_ITEMPARAM_EQUIP                         ItemParam = 5
	ItemParam_ITEMPARAM_SELLITEM                      ItemParam = 6
	ItemParam_ITEMPARAM_EQUIPSTRENGTH                 ItemParam = 7
	ItemParam_ITEMPARAM_PRODUCE                       ItemParam = 9
	ItemParam_ITEMPARAM_PRODUCEDONE                   ItemParam = 10
	ItemParam_ITEMPARAM_REFINE                        ItemParam = 11
	ItemParam_ITEMPARAM_DECOMPOSE                     ItemParam = 12
	ItemParam_ITEMPARAM_QUERYEQUIPDATA                ItemParam = 13
	ItemParam_ITEMPARAM_BROWSEPACK                    ItemParam = 14
	ItemParam_ITEMPARAM_EQUIPCARD                     ItemParam = 15
	ItemParam_ITEMPARAM_ITEMSHOW                      ItemParam = 16
	ItemParam_ITEMPARAM_REPAIR                        ItemParam = 17
	ItemParam_ITEMPARAM_HINTNTF                       ItemParam = 18
	ItemParam_ITEMPARAM_ENCHANT                       ItemParam = 19
	ItemParam_ITEMPARAM_PROCESSENCHANT                ItemParam = 20
	ItemParam_ITEMPARAM_EQUIPEXCHANGE                 ItemParam = 21
	ItemParam_ITEMPARAM_ONOFFSTORE                    ItemParam = 22
	ItemParam_ITEMPARAM_PACKSLOTNTF                   ItemParam = 23
	ItemParam_ITEMPARAM_RESTOREEQUIP                  ItemParam = 24
	ItemParam_ITEMPARAM_USECOUNT                      ItemParam = 25
	ItemParam_ITEMPARAM_EXCHANGECARD                  ItemParam = 28
	ItemParam_ITEMPARAM_GETCOUNT                      ItemParam = 29
	ItemParam_ITEMPARAM_SAVE_LOVE_LETTER              ItemParam = 30
	ItemParam_ITEMPARAM_ITEMDATASHOW                  ItemParam = 31
	ItemParam_ITEMPARAM_LOTTERY                       ItemParam = 32
	ItemParam_ITEMPARAM_LOTTERY_RECOVERY              ItemParam = 33
	ItemParam_ITEMPARAM_QUERY_LOTTERYINFO             ItemParam = 34
	ItemParam_ITEMPARAM_ITEMSHOW64                    ItemParam = 35
	ItemParam_ITEMPARAM_HIGHREFINE_MATCOMPOSE         ItemParam = 36
	ItemParam_ITEMPARAM_HIGHREFINE                    ItemParam = 37
	ItemParam_ITEMPARAM_NTF_HIGHTREFINE_DATA          ItemParam = 38
	ItemParam_ITEMPARAM_UPDATE_HIGHTREFINE_DATA       ItemParam = 39
	ItemParam_ITEMPARAM_REQ_QUOTA_LOG                 ItemParam = 40
	ItemParam_ITEMPARAM_REQ_QUOTA_DETAIL              ItemParam = 41
	ItemParam_ITEMPARAM_EQUIPPOSDATA_UPDATE           ItemParam = 42
	ItemParam_ITEMPARAM_USE_CODE_ITEM                 ItemParam = 43
	ItemParam_ITEMPARAM_ADD_JOBLEVEL                  ItemParam = 44
	ItemParam_ITEMPARAM_LOTTERY_GIVE_BUY_COUNT        ItemParam = 46
	ItemParam_ITEMPARAM_GIVE_WEDDING_DRESS            ItemParam = 47
	ItemParam_ITEMPARAM_QUICK_STOREITEM               ItemParam = 48
	ItemParam_ITEMPARAM_QUICK_SELLITEM                ItemParam = 49
	ItemParam_ITEMPARAM_ENCHANT_TRANS                 ItemParam = 50
	ItemParam_ITEMPARAM_QUERY_LOTTERYHEAD             ItemParam = 51
	ItemParam_ITEMPARAM_LOTTERY_RATE_QUERY            ItemParam = 52
	ItemParam_ITEMPARAM_EQUIPCOMPOSE                  ItemParam = 53
	ItemParam_ITEMPARAM_QUERY_ITEMDEBT                ItemParam = 54
	ItemParam_ITEMPARAM_FAVORITE_ACTION               ItemParam = 56
	ItemParam_ITEMPARAM_LOTTERY_ACTIVITY_NTF          ItemParam = 57
	ItemParam_ITEMPARAM_ROLL_CATLITTERBOX             ItemParam = 58
	ItemParam_ITEMPARAM_QUERY_LOTTERY_EXTRA_BONUS     ItemParam = 59
	ItemParam_ITEMPARAM_GET_LOTTERY_EXTRA_BONUS       ItemParam = 60
	ItemParam_ITEMPARAM_QUERY_RIDELOTTERYINFO         ItemParam = 61
	ItemParam_ITEMPARAM_EXEC_RIDELOTTEY               ItemParam = 62
	ItemParam_ITEMPARAM_ALTER_FASHION_EQUIP_BUFF      ItemParam = 63
	ItemParam_ITEMPARAM_GEM_SKILL_APPRAISAL           ItemParam = 64
	ItemParam_ITEMPARAM_GEM_SKILL_COMPOSE_SAME        ItemParam = 65
	ItemParam_ITEMPARAM_GEM_SKILL_COMPOSE_QUALITY     ItemParam = 66
	ItemParam_ITEMPARAM_GEM_ATTR_COMPOSE              ItemParam = 67
	ItemParam_ITEMPARAM_GEM_ATTR_UPGRADE              ItemParam = 68
	ItemParam_ITEMPARAM_GEM_MOUNT                     ItemParam = 69
	ItemParam_ITEMPARAM_GEM_UNMOUNT                   ItemParam = 70
	ItemParam_ITEMPARAM_GEM_CARVE                     ItemParam = 71
	ItemParam_ITEMPARAM_RIDELOTTEY_PICKITEM           ItemParam = 72
	ItemParam_ITEMPARAM_RIDELOTTEY_PICKINFO           ItemParam = 73
	ItemParam_ITEMPARAM_GEM_SMELT                     ItemParam = 74
	ItemParam_ITEMPARAM_SAND_EXCHANGE                 ItemParam = 75
	ItemParam_ITEMPARAM_GEM_DATA_UPDATE               ItemParam = 76
	ItemParam_ITEMPARAM_LOTTERY_DOLL_QUERY            ItemParam = 81
	ItemParam_ITEMPARAM_LOTTERY_DOLL_PAY              ItemParam = 82
	ItemParam_ITEMPARAM_PERSONAL_ARTIFACT_EXCHANGE    ItemParam = 83
	ItemParam_ITEMPARAM_PERSONAL_ARTIFACT_DECOMPOSE   ItemParam = 84
	ItemParam_ITEMPARAM_PERSONAL_ARTIFACT_COMPOSE     ItemParam = 85
	ItemParam_ITEMPARAM_PERSONAL_ARTIFACT_REMOULD     ItemParam = 86
	ItemParam_ITEMPARAM_PERSONAL_ARTIFACT_ATTR_SAVE   ItemParam = 87
	ItemParam_ITEMPARAM_BATCH_REFINE                  ItemParam = 88
	ItemParam_ITEMPARAM_BATCH_REFINE_RESULT           ItemParam = 89
	ItemParam_ITEMPARAM_PERSONAL_ARTIFACT_APPRAISAL   ItemParam = 90
	ItemParam_ITEMPARAM_MIXTYPELOTTERY_ARCHIVE        ItemParam = 91
	ItemParam_ITEMPARAM_MAGICSUIT_SAVE                ItemParam = 92
	ItemParam_ITEMPARAM_MAGICSUIT_APPLY               ItemParam = 93
	ItemParam_ITEMPARAM_MAGICSUIT_NTF                 ItemParam = 94
	ItemParam_ITEMPARAM_POTIONSTORE                   ItemParam = 95
	ItemParam_ITEMPARAM_EQUIP_POS_CD_NTF              ItemParam = 96
	ItemParam_ITEMPARAM_ENCHANT_TRANSFER              ItemParam = 97
	ItemParam_ITEMPARAM_REFINE_TRANSFER               ItemParam = 98
	ItemParam_ITEMPARAM_EQUIP_POWER_INPUT             ItemParam = 99
	ItemParam_ITEMPARAM_EQUIP_POWER_OUTPUT            ItemParam = 100
	ItemParam_ITEMPARAM_COLORING_QUERY                ItemParam = 101
	ItemParam_ITEMPARAM_COLORING_MODIFY               ItemParam = 102
	ItemParam_ITEMPARAM_COLORING_SHARE                ItemParam = 103
	ItemParam_ITEMPARAM_POS_STRENGTH                  ItemParam = 104
	ItemParam_ITEMPARAM_POS_STRENGTH_SYNC             ItemParam = 105
	ItemParam_ITEMPARAM_RAND_SELECT_REWARD            ItemParam = 106
	ItemParam_ITEMPARAM_PACKMAIL_QUERY                ItemParam = 107
	ItemParam_ITEMPARAM_PACKMAIL_UPDATE               ItemParam = 108
	ItemParam_ITEMPARAM_PACKMAIL_ACTION               ItemParam = 109
	ItemParam_ITEMPARAM_FAVORITE_QUERY                ItemParam = 110
	ItemParam_ITEMPARAM_FAVORITE_GIVE                 ItemParam = 111
	ItemParam_ITEMPARAM_FAVORITE_REWARD               ItemParam = 112
	ItemParam_ITEMPARAM_FAVORITE_INTERACT             ItemParam = 113
	ItemParam_ITEMPARAM_ONE_CLICK_PUT_TAKE_STORE      ItemParam = 114
	ItemParam_ITEMPARAM_RECOVER_HEADWEAR              ItemParam = 115
	ItemParam_ITEMPARAM_FAVORITE_DESIRE_CONDITION     ItemParam = 116
	ItemParam_ITEMPARAM_QUESTION_RESULT               ItemParam = 117
	ItemParam_ITEMPARAM_EQUIP_RECOVERY_QUERY          ItemParam = 118
	ItemParam_ITEMPARAM_EQUIP_RECOVERY                ItemParam = 119
	ItemParam_ITEMPARAM_QUERY_LOTTERY_EXTRA_BONUS_CFG ItemParam = 120
	ItemParam_ITEMPARAM_EQUIP_POWER_QUERY             ItemParam = 121
	ItemParam_ITEMPARAM_ENCHANT_RES                   ItemParam = 122
	ItemParam_ITEMPARAM_ENCHANT_HIGHEST_BUFF          ItemParam = 123
	ItemParam_ITEMPARAM_LOTTERY_DATA_SYNC             ItemParam = 124
	ItemParam_ITEMPARAM_ARTIFACT_ADD_FLAGMENT         ItemParam = 125
	ItemParam_ITEMPARAM_AUTOSELL                      ItemParam = 126
	ItemParam_ITEMPARAM_LOTTERY_DAILY_REWARD_SYNC     ItemParam = 127
	ItemParam_ITEMPARAM_LOTTERY_DAILY_REWARD_GET      ItemParam = 128
	ItemParam_ITEMPARAM_AFRICANPORING_QUERY           ItemParam = 129
	ItemParam_ITEMPARAM_AFRICANPORING_UPDATE          ItemParam = 130
	ItemParam_ITEMPARAM_AFRICANPORING_LOTTERY         ItemParam = 131
	ItemParam_ITEMPARAM_ENCHANT_REFRESH               ItemParam = 132
	ItemParam_ITEMPARAM_PROCESS_ENCHANT_REFRESH       ItemParam = 133
	ItemParam_ITEMPARAM_ENCHANT_UPGRADE               ItemParam = 134
	ItemParam_ITEMPARAM_EQUIP_EXTRACT_LEVELUP         ItemParam = 135
	ItemParam_ITEMPARAM_REFRESH_EQUIP_ATTR            ItemParam = 136
)

// Enum value maps for ItemParam.
var (
	ItemParam_name = map[int32]string{
		1:   "ITEMPARAM_PACKAGEITEM",
		2:   "ITEMPARAM_PACKAGEUPDATE",
		3:   "ITEMPARAM_ITEMUSE",
		4:   "ITEMPARAM_PACKAGESORT",
		5:   "ITEMPARAM_EQUIP",
		6:   "ITEMPARAM_SELLITEM",
		7:   "ITEMPARAM_EQUIPSTRENGTH",
		9:   "ITEMPARAM_PRODUCE",
		10:  "ITEMPARAM_PRODUCEDONE",
		11:  "ITEMPARAM_REFINE",
		12:  "ITEMPARAM_DECOMPOSE",
		13:  "ITEMPARAM_QUERYEQUIPDATA",
		14:  "ITEMPARAM_BROWSEPACK",
		15:  "ITEMPARAM_EQUIPCARD",
		16:  "ITEMPARAM_ITEMSHOW",
		17:  "ITEMPARAM_REPAIR",
		18:  "ITEMPARAM_HINTNTF",
		19:  "ITEMPARAM_ENCHANT",
		20:  "ITEMPARAM_PROCESSENCHANT",
		21:  "ITEMPARAM_EQUIPEXCHANGE",
		22:  "ITEMPARAM_ONOFFSTORE",
		23:  "ITEMPARAM_PACKSLOTNTF",
		24:  "ITEMPARAM_RESTOREEQUIP",
		25:  "ITEMPARAM_USECOUNT",
		28:  "ITEMPARAM_EXCHANGECARD",
		29:  "ITEMPARAM_GETCOUNT",
		30:  "ITEMPARAM_SAVE_LOVE_LETTER",
		31:  "ITEMPARAM_ITEMDATASHOW",
		32:  "ITEMPARAM_LOTTERY",
		33:  "ITEMPARAM_LOTTERY_RECOVERY",
		34:  "ITEMPARAM_QUERY_LOTTERYINFO",
		35:  "ITEMPARAM_ITEMSHOW64",
		36:  "ITEMPARAM_HIGHREFINE_MATCOMPOSE",
		37:  "ITEMPARAM_HIGHREFINE",
		38:  "ITEMPARAM_NTF_HIGHTREFINE_DATA",
		39:  "ITEMPARAM_UPDATE_HIGHTREFINE_DATA",
		40:  "ITEMPARAM_REQ_QUOTA_LOG",
		41:  "ITEMPARAM_REQ_QUOTA_DETAIL",
		42:  "ITEMPARAM_EQUIPPOSDATA_UPDATE",
		43:  "ITEMPARAM_USE_CODE_ITEM",
		44:  "ITEMPARAM_ADD_JOBLEVEL",
		46:  "ITEMPARAM_LOTTERY_GIVE_BUY_COUNT",
		47:  "ITEMPARAM_GIVE_WEDDING_DRESS",
		48:  "ITEMPARAM_QUICK_STOREITEM",
		49:  "ITEMPARAM_QUICK_SELLITEM",
		50:  "ITEMPARAM_ENCHANT_TRANS",
		51:  "ITEMPARAM_QUERY_LOTTERYHEAD",
		52:  "ITEMPARAM_LOTTERY_RATE_QUERY",
		53:  "ITEMPARAM_EQUIPCOMPOSE",
		54:  "ITEMPARAM_QUERY_ITEMDEBT",
		56:  "ITEMPARAM_FAVORITE_ACTION",
		57:  "ITEMPARAM_LOTTERY_ACTIVITY_NTF",
		58:  "ITEMPARAM_ROLL_CATLITTERBOX",
		59:  "ITEMPARAM_QUERY_LOTTERY_EXTRA_BONUS",
		60:  "ITEMPARAM_GET_LOTTERY_EXTRA_BONUS",
		61:  "ITEMPARAM_QUERY_RIDELOTTERYINFO",
		62:  "ITEMPARAM_EXEC_RIDELOTTEY",
		63:  "ITEMPARAM_ALTER_FASHION_EQUIP_BUFF",
		64:  "ITEMPARAM_GEM_SKILL_APPRAISAL",
		65:  "ITEMPARAM_GEM_SKILL_COMPOSE_SAME",
		66:  "ITEMPARAM_GEM_SKILL_COMPOSE_QUALITY",
		67:  "ITEMPARAM_GEM_ATTR_COMPOSE",
		68:  "ITEMPARAM_GEM_ATTR_UPGRADE",
		69:  "ITEMPARAM_GEM_MOUNT",
		70:  "ITEMPARAM_GEM_UNMOUNT",
		71:  "ITEMPARAM_GEM_CARVE",
		72:  "ITEMPARAM_RIDELOTTEY_PICKITEM",
		73:  "ITEMPARAM_RIDELOTTEY_PICKINFO",
		74:  "ITEMPARAM_GEM_SMELT",
		75:  "ITEMPARAM_SAND_EXCHANGE",
		76:  "ITEMPARAM_GEM_DATA_UPDATE",
		81:  "ITEMPARAM_LOTTERY_DOLL_QUERY",
		82:  "ITEMPARAM_LOTTERY_DOLL_PAY",
		83:  "ITEMPARAM_PERSONAL_ARTIFACT_EXCHANGE",
		84:  "ITEMPARAM_PERSONAL_ARTIFACT_DECOMPOSE",
		85:  "ITEMPARAM_PERSONAL_ARTIFACT_COMPOSE",
		86:  "ITEMPARAM_PERSONAL_ARTIFACT_REMOULD",
		87:  "ITEMPARAM_PERSONAL_ARTIFACT_ATTR_SAVE",
		88:  "ITEMPARAM_BATCH_REFINE",
		89:  "ITEMPARAM_BATCH_REFINE_RESULT",
		90:  "ITEMPARAM_PERSONAL_ARTIFACT_APPRAISAL",
		91:  "ITEMPARAM_MIXTYPELOTTERY_ARCHIVE",
		92:  "ITEMPARAM_MAGICSUIT_SAVE",
		93:  "ITEMPARAM_MAGICSUIT_APPLY",
		94:  "ITEMPARAM_MAGICSUIT_NTF",
		95:  "ITEMPARAM_POTIONSTORE",
		96:  "ITEMPARAM_EQUIP_POS_CD_NTF",
		97:  "ITEMPARAM_ENCHANT_TRANSFER",
		98:  "ITEMPARAM_REFINE_TRANSFER",
		99:  "ITEMPARAM_EQUIP_POWER_INPUT",
		100: "ITEMPARAM_EQUIP_POWER_OUTPUT",
		101: "ITEMPARAM_COLORING_QUERY",
		102: "ITEMPARAM_COLORING_MODIFY",
		103: "ITEMPARAM_COLORING_SHARE",
		104: "ITEMPARAM_POS_STRENGTH",
		105: "ITEMPARAM_POS_STRENGTH_SYNC",
		106: "ITEMPARAM_RAND_SELECT_REWARD",
		107: "ITEMPARAM_PACKMAIL_QUERY",
		108: "ITEMPARAM_PACKMAIL_UPDATE",
		109: "ITEMPARAM_PACKMAIL_ACTION",
		110: "ITEMPARAM_FAVORITE_QUERY",
		111: "ITEMPARAM_FAVORITE_GIVE",
		112: "ITEMPARAM_FAVORITE_REWARD",
		113: "ITEMPARAM_FAVORITE_INTERACT",
		114: "ITEMPARAM_ONE_CLICK_PUT_TAKE_STORE",
		115: "ITEMPARAM_RECOVER_HEADWEAR",
		116: "ITEMPARAM_FAVORITE_DESIRE_CONDITION",
		117: "ITEMPARAM_QUESTION_RESULT",
		118: "ITEMPARAM_EQUIP_RECOVERY_QUERY",
		119: "ITEMPARAM_EQUIP_RECOVERY",
		120: "ITEMPARAM_QUERY_LOTTERY_EXTRA_BONUS_CFG",
		121: "ITEMPARAM_EQUIP_POWER_QUERY",
		122: "ITEMPARAM_ENCHANT_RES",
		123: "ITEMPARAM_ENCHANT_HIGHEST_BUFF",
		124: "ITEMPARAM_LOTTERY_DATA_SYNC",
		125: "ITEMPARAM_ARTIFACT_ADD_FLAGMENT",
		126: "ITEMPARAM_AUTOSELL",
		127: "ITEMPARAM_LOTTERY_DAILY_REWARD_SYNC",
		128: "ITEMPARAM_LOTTERY_DAILY_REWARD_GET",
		129: "ITEMPARAM_AFRICANPORING_QUERY",
		130: "ITEMPARAM_AFRICANPORING_UPDATE",
		131: "ITEMPARAM_AFRICANPORING_LOTTERY",
		132: "ITEMPARAM_ENCHANT_REFRESH",
		133: "ITEMPARAM_PROCESS_ENCHANT_REFRESH",
		134: "ITEMPARAM_ENCHANT_UPGRADE",
		135: "ITEMPARAM_EQUIP_EXTRACT_LEVELUP",
		136: "ITEMPARAM_REFRESH_EQUIP_ATTR",
	}
	ItemParam_value = map[string]int32{
		"ITEMPARAM_PACKAGEITEM":                   1,
		"ITEMPARAM_PACKAGEUPDATE":                 2,
		"ITEMPARAM_ITEMUSE":                       3,
		"ITEMPARAM_PACKAGESORT":                   4,
		"ITEMPARAM_EQUIP":                         5,
		"ITEMPARAM_SELLITEM":                      6,
		"ITEMPARAM_EQUIPSTRENGTH":                 7,
		"ITEMPARAM_PRODUCE":                       9,
		"ITEMPARAM_PRODUCEDONE":                   10,
		"ITEMPARAM_REFINE":                        11,
		"ITEMPARAM_DECOMPOSE":                     12,
		"ITEMPARAM_QUERYEQUIPDATA":                13,
		"ITEMPARAM_BROWSEPACK":                    14,
		"ITEMPARAM_EQUIPCARD":                     15,
		"ITEMPARAM_ITEMSHOW":                      16,
		"ITEMPARAM_REPAIR":                        17,
		"ITEMPARAM_HINTNTF":                       18,
		"ITEMPARAM_ENCHANT":                       19,
		"ITEMPARAM_PROCESSENCHANT":                20,
		"ITEMPARAM_EQUIPEXCHANGE":                 21,
		"ITEMPARAM_ONOFFSTORE":                    22,
		"ITEMPARAM_PACKSLOTNTF":                   23,
		"ITEMPARAM_RESTOREEQUIP":                  24,
		"ITEMPARAM_USECOUNT":                      25,
		"ITEMPARAM_EXCHANGECARD":                  28,
		"ITEMPARAM_GETCOUNT":                      29,
		"ITEMPARAM_SAVE_LOVE_LETTER":              30,
		"ITEMPARAM_ITEMDATASHOW":                  31,
		"ITEMPARAM_LOTTERY":                       32,
		"ITEMPARAM_LOTTERY_RECOVERY":              33,
		"ITEMPARAM_QUERY_LOTTERYINFO":             34,
		"ITEMPARAM_ITEMSHOW64":                    35,
		"ITEMPARAM_HIGHREFINE_MATCOMPOSE":         36,
		"ITEMPARAM_HIGHREFINE":                    37,
		"ITEMPARAM_NTF_HIGHTREFINE_DATA":          38,
		"ITEMPARAM_UPDATE_HIGHTREFINE_DATA":       39,
		"ITEMPARAM_REQ_QUOTA_LOG":                 40,
		"ITEMPARAM_REQ_QUOTA_DETAIL":              41,
		"ITEMPARAM_EQUIPPOSDATA_UPDATE":           42,
		"ITEMPARAM_USE_CODE_ITEM":                 43,
		"ITEMPARAM_ADD_JOBLEVEL":                  44,
		"ITEMPARAM_LOTTERY_GIVE_BUY_COUNT":        46,
		"ITEMPARAM_GIVE_WEDDING_DRESS":            47,
		"ITEMPARAM_QUICK_STOREITEM":               48,
		"ITEMPARAM_QUICK_SELLITEM":                49,
		"ITEMPARAM_ENCHANT_TRANS":                 50,
		"ITEMPARAM_QUERY_LOTTERYHEAD":             51,
		"ITEMPARAM_LOTTERY_RATE_QUERY":            52,
		"ITEMPARAM_EQUIPCOMPOSE":                  53,
		"ITEMPARAM_QUERY_ITEMDEBT":                54,
		"ITEMPARAM_FAVORITE_ACTION":               56,
		"ITEMPARAM_LOTTERY_ACTIVITY_NTF":          57,
		"ITEMPARAM_ROLL_CATLITTERBOX":             58,
		"ITEMPARAM_QUERY_LOTTERY_EXTRA_BONUS":     59,
		"ITEMPARAM_GET_LOTTERY_EXTRA_BONUS":       60,
		"ITEMPARAM_QUERY_RIDELOTTERYINFO":         61,
		"ITEMPARAM_EXEC_RIDELOTTEY":               62,
		"ITEMPARAM_ALTER_FASHION_EQUIP_BUFF":      63,
		"ITEMPARAM_GEM_SKILL_APPRAISAL":           64,
		"ITEMPARAM_GEM_SKILL_COMPOSE_SAME":        65,
		"ITEMPARAM_GEM_SKILL_COMPOSE_QUALITY":     66,
		"ITEMPARAM_GEM_ATTR_COMPOSE":              67,
		"ITEMPARAM_GEM_ATTR_UPGRADE":              68,
		"ITEMPARAM_GEM_MOUNT":                     69,
		"ITEMPARAM_GEM_UNMOUNT":                   70,
		"ITEMPARAM_GEM_CARVE":                     71,
		"ITEMPARAM_RIDELOTTEY_PICKITEM":           72,
		"ITEMPARAM_RIDELOTTEY_PICKINFO":           73,
		"ITEMPARAM_GEM_SMELT":                     74,
		"ITEMPARAM_SAND_EXCHANGE":                 75,
		"ITEMPARAM_GEM_DATA_UPDATE":               76,
		"ITEMPARAM_LOTTERY_DOLL_QUERY":            81,
		"ITEMPARAM_LOTTERY_DOLL_PAY":              82,
		"ITEMPARAM_PERSONAL_ARTIFACT_EXCHANGE":    83,
		"ITEMPARAM_PERSONAL_ARTIFACT_DECOMPOSE":   84,
		"ITEMPARAM_PERSONAL_ARTIFACT_COMPOSE":     85,
		"ITEMPARAM_PERSONAL_ARTIFACT_REMOULD":     86,
		"ITEMPARAM_PERSONAL_ARTIFACT_ATTR_SAVE":   87,
		"ITEMPARAM_BATCH_REFINE":                  88,
		"ITEMPARAM_BATCH_REFINE_RESULT":           89,
		"ITEMPARAM_PERSONAL_ARTIFACT_APPRAISAL":   90,
		"ITEMPARAM_MIXTYPELOTTERY_ARCHIVE":        91,
		"ITEMPARAM_MAGICSUIT_SAVE":                92,
		"ITEMPARAM_MAGICSUIT_APPLY":               93,
		"ITEMPARAM_MAGICSUIT_NTF":                 94,
		"ITEMPARAM_POTIONSTORE":                   95,
		"ITEMPARAM_EQUIP_POS_CD_NTF":              96,
		"ITEMPARAM_ENCHANT_TRANSFER":              97,
		"ITEMPARAM_REFINE_TRANSFER":               98,
		"ITEMPARAM_EQUIP_POWER_INPUT":             99,
		"ITEMPARAM_EQUIP_POWER_OUTPUT":            100,
		"ITEMPARAM_COLORING_QUERY":                101,
		"ITEMPARAM_COLORING_MODIFY":               102,
		"ITEMPARAM_COLORING_SHARE":                103,
		"ITEMPARAM_POS_STRENGTH":                  104,
		"ITEMPARAM_POS_STRENGTH_SYNC":             105,
		"ITEMPARAM_RAND_SELECT_REWARD":            106,
		"ITEMPARAM_PACKMAIL_QUERY":                107,
		"ITEMPARAM_PACKMAIL_UPDATE":               108,
		"ITEMPARAM_PACKMAIL_ACTION":               109,
		"ITEMPARAM_FAVORITE_QUERY":                110,
		"ITEMPARAM_FAVORITE_GIVE":                 111,
		"ITEMPARAM_FAVORITE_REWARD":               112,
		"ITEMPARAM_FAVORITE_INTERACT":             113,
		"ITEMPARAM_ONE_CLICK_PUT_TAKE_STORE":      114,
		"ITEMPARAM_RECOVER_HEADWEAR":              115,
		"ITEMPARAM_FAVORITE_DESIRE_CONDITION":     116,
		"ITEMPARAM_QUESTION_RESULT":               117,
		"ITEMPARAM_EQUIP_RECOVERY_QUERY":          118,
		"ITEMPARAM_EQUIP_RECOVERY":                119,
		"ITEMPARAM_QUERY_LOTTERY_EXTRA_BONUS_CFG": 120,
		"ITEMPARAM_EQUIP_POWER_QUERY":             121,
		"ITEMPARAM_ENCHANT_RES":                   122,
		"ITEMPARAM_ENCHANT_HIGHEST_BUFF":          123,
		"ITEMPARAM_LOTTERY_DATA_SYNC":             124,
		"ITEMPARAM_ARTIFACT_ADD_FLAGMENT":         125,
		"ITEMPARAM_AUTOSELL":                      126,
		"ITEMPARAM_LOTTERY_DAILY_REWARD_SYNC":     127,
		"ITEMPARAM_LOTTERY_DAILY_REWARD_GET":      128,
		"ITEMPARAM_AFRICANPORING_QUERY":           129,
		"ITEMPARAM_AFRICANPORING_UPDATE":          130,
		"ITEMPARAM_AFRICANPORING_LOTTERY":         131,
		"ITEMPARAM_ENCHANT_REFRESH":               132,
		"ITEMPARAM_PROCESS_ENCHANT_REFRESH":       133,
		"ITEMPARAM_ENCHANT_UPGRADE":               134,
		"ITEMPARAM_EQUIP_EXTRACT_LEVELUP":         135,
		"ITEMPARAM_REFRESH_EQUIP_ATTR":            136,
	}
)

func (x ItemParam) Enum() *ItemParam {
	p := new(ItemParam)
	*p = x
	return p
}

func (x ItemParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemParam) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[0].Descriptor()
}

func (ItemParam) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[0]
}

func (x ItemParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ItemParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ItemParam(num)
	return nil
}

// Deprecated: Use ItemParam.Descriptor instead.
func (ItemParam) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{0}
}

type EPackType int32

const (
	EPackType_EPACKTYPE_MIN               EPackType = 0
	EPackType_EPACKTYPE_MAIN              EPackType = 1
	EPackType_EPACKTYPE_EQUIP             EPackType = 2
	EPackType_EPACKTYPE_FASHION           EPackType = 3
	EPackType_EPACKTYPE_FASHIONEQUIP      EPackType = 4
	EPackType_EPACKTYPE_CARD              EPackType = 5
	EPackType_EPACKTYPE_STORE             EPackType = 6
	EPackType_EPACKTYPE_PERSONAL_STORE    EPackType = 7
	EPackType_EPACKTYPE_TEMP_MAIN         EPackType = 8
	EPackType_EPACKTYPE_BARROW            EPackType = 9
	EPackType_EPACKTYPE_QUEST             EPackType = 10
	EPackType_EPACKTYPE_FOOD              EPackType = 11
	EPackType_EPACKTYPE_PET               EPackType = 12
	EPackType_EPACKTYPE_FURNITURE         EPackType = 13
	EPackType_EPACKTYPE_GEM_ATTR          EPackType = 14
	EPackType_EPACKTYPE_GEM_SKILL         EPackType = 15
	EPackType_EPACKTYPE_HOME              EPackType = 16
	EPackType_EPACKTYPE_WALLET            EPackType = 17
	EPackType_EPACKTYPE_ARTIFACT          EPackType = 18
	EPackType_EPACKTYPE_ARTIFACT_FLAGMENT EPackType = 19
	EPackType_EPACKTYPE_MAX               EPackType = 20
)

// Enum value maps for EPackType.
var (
	EPackType_name = map[int32]string{
		0:  "EPACKTYPE_MIN",
		1:  "EPACKTYPE_MAIN",
		2:  "EPACKTYPE_EQUIP",
		3:  "EPACKTYPE_FASHION",
		4:  "EPACKTYPE_FASHIONEQUIP",
		5:  "EPACKTYPE_CARD",
		6:  "EPACKTYPE_STORE",
		7:  "EPACKTYPE_PERSONAL_STORE",
		8:  "EPACKTYPE_TEMP_MAIN",
		9:  "EPACKTYPE_BARROW",
		10: "EPACKTYPE_QUEST",
		11: "EPACKTYPE_FOOD",
		12: "EPACKTYPE_PET",
		13: "EPACKTYPE_FURNITURE",
		14: "EPACKTYPE_GEM_ATTR",
		15: "EPACKTYPE_GEM_SKILL",
		16: "EPACKTYPE_HOME",
		17: "EPACKTYPE_WALLET",
		18: "EPACKTYPE_ARTIFACT",
		19: "EPACKTYPE_ARTIFACT_FLAGMENT",
		20: "EPACKTYPE_MAX",
	}
	EPackType_value = map[string]int32{
		"EPACKTYPE_MIN":               0,
		"EPACKTYPE_MAIN":              1,
		"EPACKTYPE_EQUIP":             2,
		"EPACKTYPE_FASHION":           3,
		"EPACKTYPE_FASHIONEQUIP":      4,
		"EPACKTYPE_CARD":              5,
		"EPACKTYPE_STORE":             6,
		"EPACKTYPE_PERSONAL_STORE":    7,
		"EPACKTYPE_TEMP_MAIN":         8,
		"EPACKTYPE_BARROW":            9,
		"EPACKTYPE_QUEST":             10,
		"EPACKTYPE_FOOD":              11,
		"EPACKTYPE_PET":               12,
		"EPACKTYPE_FURNITURE":         13,
		"EPACKTYPE_GEM_ATTR":          14,
		"EPACKTYPE_GEM_SKILL":         15,
		"EPACKTYPE_HOME":              16,
		"EPACKTYPE_WALLET":            17,
		"EPACKTYPE_ARTIFACT":          18,
		"EPACKTYPE_ARTIFACT_FLAGMENT": 19,
		"EPACKTYPE_MAX":               20,
	}
)

func (x EPackType) Enum() *EPackType {
	p := new(EPackType)
	*p = x
	return p
}

func (x EPackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPackType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[1].Descriptor()
}

func (EPackType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[1]
}

func (x EPackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPackType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPackType(num)
	return nil
}

// Deprecated: Use EPackType.Descriptor instead.
func (EPackType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{1}
}

type EItemType int32

const (
	EItemType_EITEMTYPE_MIN                      EItemType = 0
	EItemType_EITEMTYPE_HONOR                    EItemType = 10
	EItemType_EITEMTYPE_STREASURE                EItemType = 20
	EItemType_EITEMTYPE_TREASURE                 EItemType = 30
	EItemType_EITEMTYPE_STUFF                    EItemType = 40
	EItemType_EITEMTYPE_STUFFNOCUT               EItemType = 41
	EItemType_EITEMTYPE_ARROW                    EItemType = 43
	EItemType_EITEMTYPE_USESKILL                 EItemType = 44
	EItemType_EITEMTYPE_GHOSTLAMP                EItemType = 45
	EItemType_EITEMTYPE_MULTITIME                EItemType = 46
	EItemType_EITEMTYPE_MONTHCARD                EItemType = 47
	EItemType_EITEMTYPE_QUEST_ONCE               EItemType = 48
	EItemType_EITEMTYPE_QUEST_TIME               EItemType = 49
	EItemType_EITEMTYPE_SHEET                    EItemType = 50
	EItemType_EITEMTYPE_PET_WEARSHEET            EItemType = 51
	EItemType_EITEMTYPE_PET_WEARUNLOCK           EItemType = 52
	EItemType_EITEMTYPE_GEM_ATTR                 EItemType = 53
	EItemType_EITEMTYPE_GEM_SKILL                EItemType = 54
	EItemType_EITEMTYPE_FURNITURE_SHEET          EItemType = 55
	EItemType_EITEMTYPE_GEM_UNDEFINED            EItemType = 56
	EItemType_EITEMTYPE_CAT_WEARSHEET            EItemType = 58
	EItemType_EITEMTYPE_RAND_SELECT              EItemType = 59
	EItemType_EITEMTYPE_CONSUME                  EItemType = 60
	EItemType_EITEMTYPE_HAIRSTUFF                EItemType = 61
	EItemType_EITEMTYPE_CONSUME_2                EItemType = 62
	EItemType_EITEMTYPE_COLLECTION               EItemType = 63
	EItemType_EITEMTYPE_RANGE                    EItemType = 64
	EItemType_EITEMTYPE_FUNCTION                 EItemType = 65
	EItemType_EITEMTYPE_ACTIVITY                 EItemType = 66
	EItemType_EITEMTYPE_WEDDING_RING             EItemType = 67
	EItemType_EITEMTYPE_MATERIAL                 EItemType = 70
	EItemType_EITEMTYPE_LETTER                   EItemType = 71
	EItemType_EITEMTYPE_GOLDAPPLE                EItemType = 72
	EItemType_EITEMTYPE_GETSKILL                 EItemType = 73
	EItemType_EITEMTYPE_PICKEFFECT               EItemType = 74
	EItemType_EITEMTYPE_FRIEND                   EItemType = 75
	EItemType_EITEMTYPE_PICKEFFECT_1             EItemType = 76
	EItemType_EITEMTYPE_TOY                      EItemType = 77
	EItemType_EITEMTYPE_PERCEPT_ABILITY          EItemType = 79
	EItemType_EITEMTYPE_CARD_WEAPON              EItemType = 81
	EItemType_EITEMTYPE_CARD_ASSIST              EItemType = 82
	EItemType_EITEMTYPE_CARD_ARMOUR              EItemType = 83
	EItemType_EITEMTYPE_CARD_ROBE                EItemType = 84
	EItemType_EITEMTYPE_CARD_SHOES               EItemType = 85
	EItemType_EITEMTYPE_CARD_ACCESSORY           EItemType = 86
	EItemType_EITEMTYPE_CARD_HEAD                EItemType = 87
	EItemType_EITEMTYPE_MOUNT                    EItemType = 90
	EItemType_EITEMTYPE_BARROW                   EItemType = 91
	EItemType_EITEMTYPE_GIFT                     EItemType = 93
	EItemType_EITEMTYPE_PRESTIGE                 EItemType = 94
	EItemType_EITEMTYPE_TRANSFORM                EItemType = 96
	EItemType_EITEMTYPE_PET                      EItemType = 100
	EItemType_EITEMTYPE_EGG                      EItemType = 101
	EItemType_EITEMTYPE_PET_EQUIP                EItemType = 102
	EItemType_EITEMTYPE_PET_CONSUME              EItemType = 103
	EItemType_EITEMTYPE_CARDPIECE                EItemType = 110
	EItemType_EITEMTYPE_EQUIPPIECE               EItemType = 120
	EItemType_EITEMTYPE_FASHION_PIECE            EItemType = 121
	EItemType_EITEMTYPE_NOVICE_TARGET_POINT      EItemType = 123
	EItemType_EITEMTYPE_SAND                     EItemType = 129
	EItemType_EITEMTYPE_GOLD                     EItemType = 130
	EItemType_EITEMTYPE_SILVER                   EItemType = 131
	EItemType_EITEMTYPE_DIAMOND                  EItemType = 132
	EItemType_EITEMTYPE_BATTLEPASS               EItemType = 133
	EItemType_EITEMTYPE_NIGHTMARE                EItemType = 134
	EItemType_EITEMTYPE_TWELVE_GOLD              EItemType = 135
	EItemType_EITEMTYPE_TWELVE_CONSUME           EItemType = 136
	EItemType_EITEMTYPE_TWELVE_MATERIAL          EItemType = 137
	EItemType_EITEMTYPE_GUILD_SCORE              EItemType = 138
	EItemType_EITEMTYPE_GARDEN                   EItemType = 140
	EItemType_EITEMTYPE_CONTRIBUTE               EItemType = 145
	EItemType_EITEMTYPE_ASSET                    EItemType = 146
	EItemType_EITEMTYPE_FRIENDSHIP               EItemType = 147
	EItemType_EITEMTYPE_MANUALSPOINT             EItemType = 143
	EItemType_EITEMTYPE_MORA                     EItemType = 144
	EItemType_EITEMTYPE_PVPCOIN                  EItemType = 141
	EItemType_EITEMTYPE_QUOTA                    EItemType = 149
	EItemType_EITEMTYPE_BASEEXP                  EItemType = 150
	EItemType_EITEMTYPE_JOBEXP                   EItemType = 151
	EItemType_EITEMTYPE_PURIFY                   EItemType = 152
	EItemType_EITEMTYPE_MANUALPOINT              EItemType = 153
	EItemType_EITEMTYPE_LOTTERY                  EItemType = 154
	EItemType_EITEMTYPE_COOKER_EXP               EItemType = 155
	EItemType_EITEMTYPE_GUILDHONOR               EItemType = 156
	EItemType_EITEMTYPE_POLLY_COIN               EItemType = 157
	EItemType_EITEMTYPE_HEADWEAR_COINA           EItemType = 158
	EItemType_EITEMTYPE_HEADWEAR_COINB           EItemType = 159
	EItemType_EITEMTYPE_QUESTITEM                EItemType = 160
	EItemType_EITEMTYPE_BIND_CONTRIBUTE          EItemType = 161
	EItemType_EITEMTYPE_COURAGE                  EItemType = 164
	EItemType_EITEMTYPE_QUESTITEMCOUNT           EItemType = 165
	EItemType_EITEMTYPE_WEDDING_CERT             EItemType = 166
	EItemType_EITEMTYPE_WEDDING_INVITE           EItemType = 167
	EItemType_EITEMTYPE_WEDDING_MANUAL           EItemType = 168
	EItemType_EITEMTYPE_DEADCOIN                 EItemType = 169
	EItemType_EITEMTYPE_WEAPON_LANCE             EItemType = 170
	EItemType_EITEMTYPE_WEAPON_SWORD             EItemType = 180
	EItemType_EITEMTYPE_WEAPON_WAND              EItemType = 190
	EItemType_EITEMTYPE_WEAPON_KNIFE             EItemType = 200
	EItemType_EITEMTYPE_WEAPON_BOW               EItemType = 210
	EItemType_EITEMTYPE_WEAPON_HAMMER            EItemType = 220
	EItemType_EITEMTYPE_WEAPON_AXE               EItemType = 230
	EItemType_EITEMTYPE_WEAPON_BOOK              EItemType = 240
	EItemType_EITEMTYPE_WEAPON_DAGGER            EItemType = 250
	EItemType_EITEMTYPE_WEAPON_INSTRUMEMT        EItemType = 260
	EItemType_EITEMTYPE_WEAPON_WHIP              EItemType = 270
	EItemType_EITEMTYPE_WEAPON_TUBE              EItemType = 280
	EItemType_EITEMTYPE_WEAPON_FIST              EItemType = 290
	EItemType_EITEMTYPE_WEAPON_KATANA            EItemType = 300
	EItemType_EITEMTYPE_WEAPON_PISTOL            EItemType = 310
	EItemType_EITEMTYPE_WEAPON_RIFLE             EItemType = 320
	EItemType_EITEMTYPE_ARTIFACT_LANCE           EItemType = 450
	EItemType_EITEMTYPE_ARTIFACT_SWORD           EItemType = 451
	EItemType_EITEMTYPE_ARTIFACT_WAND            EItemType = 452
	EItemType_EITEMTYPE_ARTIFACT_KNIFE           EItemType = 453
	EItemType_EITEMTYPE_ARTIFACT_BOW             EItemType = 454
	EItemType_EITEMTYPE_ARTIFACT_HAMMER          EItemType = 455
	EItemType_EITEMTYPE_ARTIFACT_AXE             EItemType = 456
	EItemType_EITEMTYPE_ARTIFACT_DAGGER          EItemType = 457
	EItemType_EITEMTYPE_ARTIFACT_FIST            EItemType = 458
	EItemType_EITEMTYPE_ARTIFACT_INSTRUMEMT      EItemType = 459
	EItemType_EITEMTYPE_ARTIFACT_WHIP            EItemType = 460
	EItemType_EITEMTYPE_ARTIFACT_BOOK            EItemType = 461
	EItemType_EITEMTYPE_ARTIFACT_DARTS           EItemType = 462
	EItemType_EITEMTYPE_ARTIFACT_PISTOL          EItemType = 463
	EItemType_EITEMTYPE_ARTIFACT_RIFLE           EItemType = 464
	EItemType_EITEMTYPE_ARTIFACT_HEAD            EItemType = 485
	EItemType_EITEMTYPE_ARTIFACT_BACK            EItemType = 488
	EItemType_EITEMTYPE_ARMOUR                   EItemType = 500
	EItemType_EITEMTYPE_ARMOUR_FASHION           EItemType = 501
	EItemType_EITEMTYPE_SHIELD                   EItemType = 510
	EItemType_EITEMTYPE_PEARL                    EItemType = 511
	EItemType_EITEMTYPE_EIKON                    EItemType = 512
	EItemType_EITEMTYPE_BRACER                   EItemType = 513
	EItemType_EITEMTYPE_BRACELET                 EItemType = 514
	EItemType_EITEMTYPE_TROLLEY                  EItemType = 515
	EItemType_EITEMTYPE_ROBE                     EItemType = 520
	EItemType_EITEMTYPE_SHOES                    EItemType = 530
	EItemType_EITEMTYPE_ACCESSORY                EItemType = 540
	EItemType_EITEMTYPE_BOKI_EXP                 EItemType = 552
	EItemType_EITEMTYPE_ARTIFACT_FFLAGMENT       EItemType = 549
	EItemType_EITEMTYPE_ARTIFACT                 EItemType = 550
	EItemType_EITEMTYPE_ARTIFACT_FLAGMENT        EItemType = 551
	EItemType_EITEMTYPE_ARTIFACT_UNAPPRAISAL     EItemType = 553
	EItemType_EITEMTYPE_FOOD_MEAT                EItemType = 601
	EItemType_EITEMTYPE_FOOD_FISH                EItemType = 602
	EItemType_EITEMTYPE_FOOD_VEGETABLE           EItemType = 603
	EItemType_EITEMTYPE_FOOD_FRUIT               EItemType = 604
	EItemType_EITEMTYPE_FOOD_SEASONING           EItemType = 605
	EItemType_EITEMTYPE_FOOD                     EItemType = 610
	EItemType_EITEMTYPE_HEAD                     EItemType = 800
	EItemType_EITEMTYPE_BACK                     EItemType = 810
	EItemType_EITEMTYPE_HAIR                     EItemType = 820
	EItemType_EITEMTYPE_HAIR_MALE                EItemType = 821
	EItemType_EITEMTYPE_HAIR_FEMALE              EItemType = 822
	EItemType_EITEMTYPE_EYE_MALE                 EItemType = 823
	EItemType_EITEMTYPE_EYE_FEMALE               EItemType = 824
	EItemType_EITEMTYPE_FACE                     EItemType = 830
	EItemType_EITEMTYPE_TAIL                     EItemType = 840
	EItemType_EITEMTYPE_MOUTH                    EItemType = 850
	EItemType_EITEMTYPE_SOFA                     EItemType = 901
	EItemType_EITEMTYPE_FIREPLACE                EItemType = 902
	EItemType_EITEMTYPE_CARPET                   EItemType = 903
	EItemType_EITEMTYPE_DESK                     EItemType = 904
	EItemType_EITEMTYPE_BED                      EItemType = 905
	EItemType_EITEMTYPE_CHAIR                    EItemType = 906
	EItemType_EITEMTYPE_WARDROBE                 EItemType = 907
	EItemType_EITEMTYPE_WINDOW                   EItemType = 908
	EItemType_EITEMTYPE_WALLLAMP                 EItemType = 909
	EItemType_EITEMTYPE_STOREBOX                 EItemType = 910
	EItemType_EITEMTYPE_LONGTABLE                EItemType = 911
	EItemType_EITEMTYPE_PHOTOFRAME               EItemType = 912
	EItemType_EITEMTYPE_CALENDAR                 EItemType = 913
	EItemType_EITEMTYPE_ROTARY                   EItemType = 914
	EItemType_EITEMTYPE_TV                       EItemType = 915
	EItemType_EITEMTYPE_RECORDPLAYER             EItemType = 916
	EItemType_EITEMTYPE_BATH                     EItemType = 917
	EItemType_EITEMTYPE_PLANT                    EItemType = 918
	EItemType_EITEMTYPE_WORKTABLE                EItemType = 919
	EItemType_EITEMTYPE_MAP                      EItemType = 920
	EItemType_EITEMTYPE_MIRROR                   EItemType = 921
	EItemType_EITEMTYPE_ART                      EItemType = 922
	EItemType_EITEMTYPE_PETROTARY                EItemType = 923
	EItemType_EITEMTYPE_CANDLESTICK              EItemType = 924
	EItemType_EITEMTYPE_STREETLAMP               EItemType = 925
	EItemType_EITEMTYPE_LONGCHAIR                EItemType = 926
	EItemType_EITEMTYPE_WOODPILE                 EItemType = 927
	EItemType_EITEMTYPE_FOUNTAIN                 EItemType = 928
	EItemType_EITEMTYPE_STATUE                   EItemType = 929
	EItemType_EITEMTYPE_BEEHIVE                  EItemType = 930
	EItemType_EITEMTYPE_PETHOUSE                 EItemType = 931
	EItemType_EITEMTYPE_PAVILION                 EItemType = 932
	EItemType_EITEMTYPE_TREE                     EItemType = 933
	EItemType_EITEMTYPE_FOLLOWER                 EItemType = 934
	EItemType_EITEMTYPE_GRASS                    EItemType = 935
	EItemType_EITEMTYPE_BEDBOX                   EItemType = 936
	EItemType_EITEMTYPE_SMALLBOX                 EItemType = 937
	EItemType_EITEMTYPE_BOOKSHELF                EItemType = 938
	EItemType_EITEMTYPE_SCREEN                   EItemType = 939
	EItemType_EITEMTYPE_DEC                      EItemType = 940
	EItemType_EITEMTYPE_DOLL                     EItemType = 941
	EItemType_EITEMTYPE_WALLPICTURE              EItemType = 942
	EItemType_EITEMTYPE_CONTROLBOOK              EItemType = 943
	EItemType_EITEMTYPE_BEERTABLE                EItemType = 944
	EItemType_EITEMTYPE_DININGTABLE              EItemType = 945
	EItemType_EITEMTYPE_DEC_WALL                 EItemType = 946
	EItemType_EITEMTYPE_DEC_FLOOR                EItemType = 947
	EItemType_EITEMTYPE_DEC_STAIRS               EItemType = 948
	EItemType_EITEMTYPE_DEC_ROOF                 EItemType = 949
	EItemType_EITEMTYPE_DEC_DOOR                 EItemType = 950
	EItemType_EITEMTYPE_SPORT                    EItemType = 951
	EItemType_EITEMTYPE_COOK                     EItemType = 952
	EItemType_EITEMTYPE_FURN_OTHER               EItemType = 953
	EItemType_EITEMTYPE_FURN_DEC                 EItemType = 954
	EItemType_EITEMTYPE_PARTITION                EItemType = 955
	EItemType_EITEMTYPE_BEAUTY                   EItemType = 956
	EItemType_EITEMTYPE_LANDSPACE                EItemType = 957
	EItemType_EITEMTYPE_LITTLETREE               EItemType = 958
	EItemType_EITEMTYPE_BOARD                    EItemType = 959
	EItemType_EITEMTYPE_ASTROLABE_TICKET         EItemType = 1000
	EItemType_EITEMTYPE_PRAY_TICKET              EItemType = 1002
	EItemType_EITEMTYPE_WATER_ELEMENT            EItemType = 1001
	EItemType_EITEMTYPE_PORTRAIT                 EItemType = 1200
	EItemType_EITEMTYPE_FRAME                    EItemType = 1210
	EItemType_EITEMTYPE_CODE                     EItemType = 4000
	EItemType_EITEMTYPE_KFC_CODE                 EItemType = 4200
	EItemType_EITEMTYPE_DRAW_CODE                EItemType = 4201
	EItemType_EITEMTYPE_HEADWEAR_CRYSTAL         EItemType = 4202
	EItemType_EITEMTYPE_HEADWEARACTIVITY_CRYSTAL EItemType = 4203
	EItemType_EITEMTYPE_LUCKY_DICE               EItemType = 4204
	EItemType_EITEMTYPE_TRANSFIGHT               EItemType = 4205
	EItemType_EITEMTYPE_HAPPYVALUE               EItemType = 4206
	EItemType_EITEMTYPE_DISNEY_MICKEY            EItemType = 4207
	EItemType_EITEMTYPE_RED_PACKET               EItemType = 4208
	EItemType_EITEMTYPE_MAX                      EItemType = 4209
)

// Enum value maps for EItemType.
var (
	EItemType_name = map[int32]string{
		0:    "EITEMTYPE_MIN",
		10:   "EITEMTYPE_HONOR",
		20:   "EITEMTYPE_STREASURE",
		30:   "EITEMTYPE_TREASURE",
		40:   "EITEMTYPE_STUFF",
		41:   "EITEMTYPE_STUFFNOCUT",
		43:   "EITEMTYPE_ARROW",
		44:   "EITEMTYPE_USESKILL",
		45:   "EITEMTYPE_GHOSTLAMP",
		46:   "EITEMTYPE_MULTITIME",
		47:   "EITEMTYPE_MONTHCARD",
		48:   "EITEMTYPE_QUEST_ONCE",
		49:   "EITEMTYPE_QUEST_TIME",
		50:   "EITEMTYPE_SHEET",
		51:   "EITEMTYPE_PET_WEARSHEET",
		52:   "EITEMTYPE_PET_WEARUNLOCK",
		53:   "EITEMTYPE_GEM_ATTR",
		54:   "EITEMTYPE_GEM_SKILL",
		55:   "EITEMTYPE_FURNITURE_SHEET",
		56:   "EITEMTYPE_GEM_UNDEFINED",
		58:   "EITEMTYPE_CAT_WEARSHEET",
		59:   "EITEMTYPE_RAND_SELECT",
		60:   "EITEMTYPE_CONSUME",
		61:   "EITEMTYPE_HAIRSTUFF",
		62:   "EITEMTYPE_CONSUME_2",
		63:   "EITEMTYPE_COLLECTION",
		64:   "EITEMTYPE_RANGE",
		65:   "EITEMTYPE_FUNCTION",
		66:   "EITEMTYPE_ACTIVITY",
		67:   "EITEMTYPE_WEDDING_RING",
		70:   "EITEMTYPE_MATERIAL",
		71:   "EITEMTYPE_LETTER",
		72:   "EITEMTYPE_GOLDAPPLE",
		73:   "EITEMTYPE_GETSKILL",
		74:   "EITEMTYPE_PICKEFFECT",
		75:   "EITEMTYPE_FRIEND",
		76:   "EITEMTYPE_PICKEFFECT_1",
		77:   "EITEMTYPE_TOY",
		79:   "EITEMTYPE_PERCEPT_ABILITY",
		81:   "EITEMTYPE_CARD_WEAPON",
		82:   "EITEMTYPE_CARD_ASSIST",
		83:   "EITEMTYPE_CARD_ARMOUR",
		84:   "EITEMTYPE_CARD_ROBE",
		85:   "EITEMTYPE_CARD_SHOES",
		86:   "EITEMTYPE_CARD_ACCESSORY",
		87:   "EITEMTYPE_CARD_HEAD",
		90:   "EITEMTYPE_MOUNT",
		91:   "EITEMTYPE_BARROW",
		93:   "EITEMTYPE_GIFT",
		94:   "EITEMTYPE_PRESTIGE",
		96:   "EITEMTYPE_TRANSFORM",
		100:  "EITEMTYPE_PET",
		101:  "EITEMTYPE_EGG",
		102:  "EITEMTYPE_PET_EQUIP",
		103:  "EITEMTYPE_PET_CONSUME",
		110:  "EITEMTYPE_CARDPIECE",
		120:  "EITEMTYPE_EQUIPPIECE",
		121:  "EITEMTYPE_FASHION_PIECE",
		123:  "EITEMTYPE_NOVICE_TARGET_POINT",
		129:  "EITEMTYPE_SAND",
		130:  "EITEMTYPE_GOLD",
		131:  "EITEMTYPE_SILVER",
		132:  "EITEMTYPE_DIAMOND",
		133:  "EITEMTYPE_BATTLEPASS",
		134:  "EITEMTYPE_NIGHTMARE",
		135:  "EITEMTYPE_TWELVE_GOLD",
		136:  "EITEMTYPE_TWELVE_CONSUME",
		137:  "EITEMTYPE_TWELVE_MATERIAL",
		138:  "EITEMTYPE_GUILD_SCORE",
		140:  "EITEMTYPE_GARDEN",
		145:  "EITEMTYPE_CONTRIBUTE",
		146:  "EITEMTYPE_ASSET",
		147:  "EITEMTYPE_FRIENDSHIP",
		143:  "EITEMTYPE_MANUALSPOINT",
		144:  "EITEMTYPE_MORA",
		141:  "EITEMTYPE_PVPCOIN",
		149:  "EITEMTYPE_QUOTA",
		150:  "EITEMTYPE_BASEEXP",
		151:  "EITEMTYPE_JOBEXP",
		152:  "EITEMTYPE_PURIFY",
		153:  "EITEMTYPE_MANUALPOINT",
		154:  "EITEMTYPE_LOTTERY",
		155:  "EITEMTYPE_COOKER_EXP",
		156:  "EITEMTYPE_GUILDHONOR",
		157:  "EITEMTYPE_POLLY_COIN",
		158:  "EITEMTYPE_HEADWEAR_COINA",
		159:  "EITEMTYPE_HEADWEAR_COINB",
		160:  "EITEMTYPE_QUESTITEM",
		161:  "EITEMTYPE_BIND_CONTRIBUTE",
		164:  "EITEMTYPE_COURAGE",
		165:  "EITEMTYPE_QUESTITEMCOUNT",
		166:  "EITEMTYPE_WEDDING_CERT",
		167:  "EITEMTYPE_WEDDING_INVITE",
		168:  "EITEMTYPE_WEDDING_MANUAL",
		169:  "EITEMTYPE_DEADCOIN",
		170:  "EITEMTYPE_WEAPON_LANCE",
		180:  "EITEMTYPE_WEAPON_SWORD",
		190:  "EITEMTYPE_WEAPON_WAND",
		200:  "EITEMTYPE_WEAPON_KNIFE",
		210:  "EITEMTYPE_WEAPON_BOW",
		220:  "EITEMTYPE_WEAPON_HAMMER",
		230:  "EITEMTYPE_WEAPON_AXE",
		240:  "EITEMTYPE_WEAPON_BOOK",
		250:  "EITEMTYPE_WEAPON_DAGGER",
		260:  "EITEMTYPE_WEAPON_INSTRUMEMT",
		270:  "EITEMTYPE_WEAPON_WHIP",
		280:  "EITEMTYPE_WEAPON_TUBE",
		290:  "EITEMTYPE_WEAPON_FIST",
		300:  "EITEMTYPE_WEAPON_KATANA",
		310:  "EITEMTYPE_WEAPON_PISTOL",
		320:  "EITEMTYPE_WEAPON_RIFLE",
		450:  "EITEMTYPE_ARTIFACT_LANCE",
		451:  "EITEMTYPE_ARTIFACT_SWORD",
		452:  "EITEMTYPE_ARTIFACT_WAND",
		453:  "EITEMTYPE_ARTIFACT_KNIFE",
		454:  "EITEMTYPE_ARTIFACT_BOW",
		455:  "EITEMTYPE_ARTIFACT_HAMMER",
		456:  "EITEMTYPE_ARTIFACT_AXE",
		457:  "EITEMTYPE_ARTIFACT_DAGGER",
		458:  "EITEMTYPE_ARTIFACT_FIST",
		459:  "EITEMTYPE_ARTIFACT_INSTRUMEMT",
		460:  "EITEMTYPE_ARTIFACT_WHIP",
		461:  "EITEMTYPE_ARTIFACT_BOOK",
		462:  "EITEMTYPE_ARTIFACT_DARTS",
		463:  "EITEMTYPE_ARTIFACT_PISTOL",
		464:  "EITEMTYPE_ARTIFACT_RIFLE",
		485:  "EITEMTYPE_ARTIFACT_HEAD",
		488:  "EITEMTYPE_ARTIFACT_BACK",
		500:  "EITEMTYPE_ARMOUR",
		501:  "EITEMTYPE_ARMOUR_FASHION",
		510:  "EITEMTYPE_SHIELD",
		511:  "EITEMTYPE_PEARL",
		512:  "EITEMTYPE_EIKON",
		513:  "EITEMTYPE_BRACER",
		514:  "EITEMTYPE_BRACELET",
		515:  "EITEMTYPE_TROLLEY",
		520:  "EITEMTYPE_ROBE",
		530:  "EITEMTYPE_SHOES",
		540:  "EITEMTYPE_ACCESSORY",
		552:  "EITEMTYPE_BOKI_EXP",
		549:  "EITEMTYPE_ARTIFACT_FFLAGMENT",
		550:  "EITEMTYPE_ARTIFACT",
		551:  "EITEMTYPE_ARTIFACT_FLAGMENT",
		553:  "EITEMTYPE_ARTIFACT_UNAPPRAISAL",
		601:  "EITEMTYPE_FOOD_MEAT",
		602:  "EITEMTYPE_FOOD_FISH",
		603:  "EITEMTYPE_FOOD_VEGETABLE",
		604:  "EITEMTYPE_FOOD_FRUIT",
		605:  "EITEMTYPE_FOOD_SEASONING",
		610:  "EITEMTYPE_FOOD",
		800:  "EITEMTYPE_HEAD",
		810:  "EITEMTYPE_BACK",
		820:  "EITEMTYPE_HAIR",
		821:  "EITEMTYPE_HAIR_MALE",
		822:  "EITEMTYPE_HAIR_FEMALE",
		823:  "EITEMTYPE_EYE_MALE",
		824:  "EITEMTYPE_EYE_FEMALE",
		830:  "EITEMTYPE_FACE",
		840:  "EITEMTYPE_TAIL",
		850:  "EITEMTYPE_MOUTH",
		901:  "EITEMTYPE_SOFA",
		902:  "EITEMTYPE_FIREPLACE",
		903:  "EITEMTYPE_CARPET",
		904:  "EITEMTYPE_DESK",
		905:  "EITEMTYPE_BED",
		906:  "EITEMTYPE_CHAIR",
		907:  "EITEMTYPE_WARDROBE",
		908:  "EITEMTYPE_WINDOW",
		909:  "EITEMTYPE_WALLLAMP",
		910:  "EITEMTYPE_STOREBOX",
		911:  "EITEMTYPE_LONGTABLE",
		912:  "EITEMTYPE_PHOTOFRAME",
		913:  "EITEMTYPE_CALENDAR",
		914:  "EITEMTYPE_ROTARY",
		915:  "EITEMTYPE_TV",
		916:  "EITEMTYPE_RECORDPLAYER",
		917:  "EITEMTYPE_BATH",
		918:  "EITEMTYPE_PLANT",
		919:  "EITEMTYPE_WORKTABLE",
		920:  "EITEMTYPE_MAP",
		921:  "EITEMTYPE_MIRROR",
		922:  "EITEMTYPE_ART",
		923:  "EITEMTYPE_PETROTARY",
		924:  "EITEMTYPE_CANDLESTICK",
		925:  "EITEMTYPE_STREETLAMP",
		926:  "EITEMTYPE_LONGCHAIR",
		927:  "EITEMTYPE_WOODPILE",
		928:  "EITEMTYPE_FOUNTAIN",
		929:  "EITEMTYPE_STATUE",
		930:  "EITEMTYPE_BEEHIVE",
		931:  "EITEMTYPE_PETHOUSE",
		932:  "EITEMTYPE_PAVILION",
		933:  "EITEMTYPE_TREE",
		934:  "EITEMTYPE_FOLLOWER",
		935:  "EITEMTYPE_GRASS",
		936:  "EITEMTYPE_BEDBOX",
		937:  "EITEMTYPE_SMALLBOX",
		938:  "EITEMTYPE_BOOKSHELF",
		939:  "EITEMTYPE_SCREEN",
		940:  "EITEMTYPE_DEC",
		941:  "EITEMTYPE_DOLL",
		942:  "EITEMTYPE_WALLPICTURE",
		943:  "EITEMTYPE_CONTROLBOOK",
		944:  "EITEMTYPE_BEERTABLE",
		945:  "EITEMTYPE_DININGTABLE",
		946:  "EITEMTYPE_DEC_WALL",
		947:  "EITEMTYPE_DEC_FLOOR",
		948:  "EITEMTYPE_DEC_STAIRS",
		949:  "EITEMTYPE_DEC_ROOF",
		950:  "EITEMTYPE_DEC_DOOR",
		951:  "EITEMTYPE_SPORT",
		952:  "EITEMTYPE_COOK",
		953:  "EITEMTYPE_FURN_OTHER",
		954:  "EITEMTYPE_FURN_DEC",
		955:  "EITEMTYPE_PARTITION",
		956:  "EITEMTYPE_BEAUTY",
		957:  "EITEMTYPE_LANDSPACE",
		958:  "EITEMTYPE_LITTLETREE",
		959:  "EITEMTYPE_BOARD",
		1000: "EITEMTYPE_ASTROLABE_TICKET",
		1002: "EITEMTYPE_PRAY_TICKET",
		1001: "EITEMTYPE_WATER_ELEMENT",
		1200: "EITEMTYPE_PORTRAIT",
		1210: "EITEMTYPE_FRAME",
		4000: "EITEMTYPE_CODE",
		4200: "EITEMTYPE_KFC_CODE",
		4201: "EITEMTYPE_DRAW_CODE",
		4202: "EITEMTYPE_HEADWEAR_CRYSTAL",
		4203: "EITEMTYPE_HEADWEARACTIVITY_CRYSTAL",
		4204: "EITEMTYPE_LUCKY_DICE",
		4205: "EITEMTYPE_TRANSFIGHT",
		4206: "EITEMTYPE_HAPPYVALUE",
		4207: "EITEMTYPE_DISNEY_MICKEY",
		4208: "EITEMTYPE_RED_PACKET",
		4209: "EITEMTYPE_MAX",
	}
	EItemType_value = map[string]int32{
		"EITEMTYPE_MIN":                      0,
		"EITEMTYPE_HONOR":                    10,
		"EITEMTYPE_STREASURE":                20,
		"EITEMTYPE_TREASURE":                 30,
		"EITEMTYPE_STUFF":                    40,
		"EITEMTYPE_STUFFNOCUT":               41,
		"EITEMTYPE_ARROW":                    43,
		"EITEMTYPE_USESKILL":                 44,
		"EITEMTYPE_GHOSTLAMP":                45,
		"EITEMTYPE_MULTITIME":                46,
		"EITEMTYPE_MONTHCARD":                47,
		"EITEMTYPE_QUEST_ONCE":               48,
		"EITEMTYPE_QUEST_TIME":               49,
		"EITEMTYPE_SHEET":                    50,
		"EITEMTYPE_PET_WEARSHEET":            51,
		"EITEMTYPE_PET_WEARUNLOCK":           52,
		"EITEMTYPE_GEM_ATTR":                 53,
		"EITEMTYPE_GEM_SKILL":                54,
		"EITEMTYPE_FURNITURE_SHEET":          55,
		"EITEMTYPE_GEM_UNDEFINED":            56,
		"EITEMTYPE_CAT_WEARSHEET":            58,
		"EITEMTYPE_RAND_SELECT":              59,
		"EITEMTYPE_CONSUME":                  60,
		"EITEMTYPE_HAIRSTUFF":                61,
		"EITEMTYPE_CONSUME_2":                62,
		"EITEMTYPE_COLLECTION":               63,
		"EITEMTYPE_RANGE":                    64,
		"EITEMTYPE_FUNCTION":                 65,
		"EITEMTYPE_ACTIVITY":                 66,
		"EITEMTYPE_WEDDING_RING":             67,
		"EITEMTYPE_MATERIAL":                 70,
		"EITEMTYPE_LETTER":                   71,
		"EITEMTYPE_GOLDAPPLE":                72,
		"EITEMTYPE_GETSKILL":                 73,
		"EITEMTYPE_PICKEFFECT":               74,
		"EITEMTYPE_FRIEND":                   75,
		"EITEMTYPE_PICKEFFECT_1":             76,
		"EITEMTYPE_TOY":                      77,
		"EITEMTYPE_PERCEPT_ABILITY":          79,
		"EITEMTYPE_CARD_WEAPON":              81,
		"EITEMTYPE_CARD_ASSIST":              82,
		"EITEMTYPE_CARD_ARMOUR":              83,
		"EITEMTYPE_CARD_ROBE":                84,
		"EITEMTYPE_CARD_SHOES":               85,
		"EITEMTYPE_CARD_ACCESSORY":           86,
		"EITEMTYPE_CARD_HEAD":                87,
		"EITEMTYPE_MOUNT":                    90,
		"EITEMTYPE_BARROW":                   91,
		"EITEMTYPE_GIFT":                     93,
		"EITEMTYPE_PRESTIGE":                 94,
		"EITEMTYPE_TRANSFORM":                96,
		"EITEMTYPE_PET":                      100,
		"EITEMTYPE_EGG":                      101,
		"EITEMTYPE_PET_EQUIP":                102,
		"EITEMTYPE_PET_CONSUME":              103,
		"EITEMTYPE_CARDPIECE":                110,
		"EITEMTYPE_EQUIPPIECE":               120,
		"EITEMTYPE_FASHION_PIECE":            121,
		"EITEMTYPE_NOVICE_TARGET_POINT":      123,
		"EITEMTYPE_SAND":                     129,
		"EITEMTYPE_GOLD":                     130,
		"EITEMTYPE_SILVER":                   131,
		"EITEMTYPE_DIAMOND":                  132,
		"EITEMTYPE_BATTLEPASS":               133,
		"EITEMTYPE_NIGHTMARE":                134,
		"EITEMTYPE_TWELVE_GOLD":              135,
		"EITEMTYPE_TWELVE_CONSUME":           136,
		"EITEMTYPE_TWELVE_MATERIAL":          137,
		"EITEMTYPE_GUILD_SCORE":              138,
		"EITEMTYPE_GARDEN":                   140,
		"EITEMTYPE_CONTRIBUTE":               145,
		"EITEMTYPE_ASSET":                    146,
		"EITEMTYPE_FRIENDSHIP":               147,
		"EITEMTYPE_MANUALSPOINT":             143,
		"EITEMTYPE_MORA":                     144,
		"EITEMTYPE_PVPCOIN":                  141,
		"EITEMTYPE_QUOTA":                    149,
		"EITEMTYPE_BASEEXP":                  150,
		"EITEMTYPE_JOBEXP":                   151,
		"EITEMTYPE_PURIFY":                   152,
		"EITEMTYPE_MANUALPOINT":              153,
		"EITEMTYPE_LOTTERY":                  154,
		"EITEMTYPE_COOKER_EXP":               155,
		"EITEMTYPE_GUILDHONOR":               156,
		"EITEMTYPE_POLLY_COIN":               157,
		"EITEMTYPE_HEADWEAR_COINA":           158,
		"EITEMTYPE_HEADWEAR_COINB":           159,
		"EITEMTYPE_QUESTITEM":                160,
		"EITEMTYPE_BIND_CONTRIBUTE":          161,
		"EITEMTYPE_COURAGE":                  164,
		"EITEMTYPE_QUESTITEMCOUNT":           165,
		"EITEMTYPE_WEDDING_CERT":             166,
		"EITEMTYPE_WEDDING_INVITE":           167,
		"EITEMTYPE_WEDDING_MANUAL":           168,
		"EITEMTYPE_DEADCOIN":                 169,
		"EITEMTYPE_WEAPON_LANCE":             170,
		"EITEMTYPE_WEAPON_SWORD":             180,
		"EITEMTYPE_WEAPON_WAND":              190,
		"EITEMTYPE_WEAPON_KNIFE":             200,
		"EITEMTYPE_WEAPON_BOW":               210,
		"EITEMTYPE_WEAPON_HAMMER":            220,
		"EITEMTYPE_WEAPON_AXE":               230,
		"EITEMTYPE_WEAPON_BOOK":              240,
		"EITEMTYPE_WEAPON_DAGGER":            250,
		"EITEMTYPE_WEAPON_INSTRUMEMT":        260,
		"EITEMTYPE_WEAPON_WHIP":              270,
		"EITEMTYPE_WEAPON_TUBE":              280,
		"EITEMTYPE_WEAPON_FIST":              290,
		"EITEMTYPE_WEAPON_KATANA":            300,
		"EITEMTYPE_WEAPON_PISTOL":            310,
		"EITEMTYPE_WEAPON_RIFLE":             320,
		"EITEMTYPE_ARTIFACT_LANCE":           450,
		"EITEMTYPE_ARTIFACT_SWORD":           451,
		"EITEMTYPE_ARTIFACT_WAND":            452,
		"EITEMTYPE_ARTIFACT_KNIFE":           453,
		"EITEMTYPE_ARTIFACT_BOW":             454,
		"EITEMTYPE_ARTIFACT_HAMMER":          455,
		"EITEMTYPE_ARTIFACT_AXE":             456,
		"EITEMTYPE_ARTIFACT_DAGGER":          457,
		"EITEMTYPE_ARTIFACT_FIST":            458,
		"EITEMTYPE_ARTIFACT_INSTRUMEMT":      459,
		"EITEMTYPE_ARTIFACT_WHIP":            460,
		"EITEMTYPE_ARTIFACT_BOOK":            461,
		"EITEMTYPE_ARTIFACT_DARTS":           462,
		"EITEMTYPE_ARTIFACT_PISTOL":          463,
		"EITEMTYPE_ARTIFACT_RIFLE":           464,
		"EITEMTYPE_ARTIFACT_HEAD":            485,
		"EITEMTYPE_ARTIFACT_BACK":            488,
		"EITEMTYPE_ARMOUR":                   500,
		"EITEMTYPE_ARMOUR_FASHION":           501,
		"EITEMTYPE_SHIELD":                   510,
		"EITEMTYPE_PEARL":                    511,
		"EITEMTYPE_EIKON":                    512,
		"EITEMTYPE_BRACER":                   513,
		"EITEMTYPE_BRACELET":                 514,
		"EITEMTYPE_TROLLEY":                  515,
		"EITEMTYPE_ROBE":                     520,
		"EITEMTYPE_SHOES":                    530,
		"EITEMTYPE_ACCESSORY":                540,
		"EITEMTYPE_BOKI_EXP":                 552,
		"EITEMTYPE_ARTIFACT_FFLAGMENT":       549,
		"EITEMTYPE_ARTIFACT":                 550,
		"EITEMTYPE_ARTIFACT_FLAGMENT":        551,
		"EITEMTYPE_ARTIFACT_UNAPPRAISAL":     553,
		"EITEMTYPE_FOOD_MEAT":                601,
		"EITEMTYPE_FOOD_FISH":                602,
		"EITEMTYPE_FOOD_VEGETABLE":           603,
		"EITEMTYPE_FOOD_FRUIT":               604,
		"EITEMTYPE_FOOD_SEASONING":           605,
		"EITEMTYPE_FOOD":                     610,
		"EITEMTYPE_HEAD":                     800,
		"EITEMTYPE_BACK":                     810,
		"EITEMTYPE_HAIR":                     820,
		"EITEMTYPE_HAIR_MALE":                821,
		"EITEMTYPE_HAIR_FEMALE":              822,
		"EITEMTYPE_EYE_MALE":                 823,
		"EITEMTYPE_EYE_FEMALE":               824,
		"EITEMTYPE_FACE":                     830,
		"EITEMTYPE_TAIL":                     840,
		"EITEMTYPE_MOUTH":                    850,
		"EITEMTYPE_SOFA":                     901,
		"EITEMTYPE_FIREPLACE":                902,
		"EITEMTYPE_CARPET":                   903,
		"EITEMTYPE_DESK":                     904,
		"EITEMTYPE_BED":                      905,
		"EITEMTYPE_CHAIR":                    906,
		"EITEMTYPE_WARDROBE":                 907,
		"EITEMTYPE_WINDOW":                   908,
		"EITEMTYPE_WALLLAMP":                 909,
		"EITEMTYPE_STOREBOX":                 910,
		"EITEMTYPE_LONGTABLE":                911,
		"EITEMTYPE_PHOTOFRAME":               912,
		"EITEMTYPE_CALENDAR":                 913,
		"EITEMTYPE_ROTARY":                   914,
		"EITEMTYPE_TV":                       915,
		"EITEMTYPE_RECORDPLAYER":             916,
		"EITEMTYPE_BATH":                     917,
		"EITEMTYPE_PLANT":                    918,
		"EITEMTYPE_WORKTABLE":                919,
		"EITEMTYPE_MAP":                      920,
		"EITEMTYPE_MIRROR":                   921,
		"EITEMTYPE_ART":                      922,
		"EITEMTYPE_PETROTARY":                923,
		"EITEMTYPE_CANDLESTICK":              924,
		"EITEMTYPE_STREETLAMP":               925,
		"EITEMTYPE_LONGCHAIR":                926,
		"EITEMTYPE_WOODPILE":                 927,
		"EITEMTYPE_FOUNTAIN":                 928,
		"EITEMTYPE_STATUE":                   929,
		"EITEMTYPE_BEEHIVE":                  930,
		"EITEMTYPE_PETHOUSE":                 931,
		"EITEMTYPE_PAVILION":                 932,
		"EITEMTYPE_TREE":                     933,
		"EITEMTYPE_FOLLOWER":                 934,
		"EITEMTYPE_GRASS":                    935,
		"EITEMTYPE_BEDBOX":                   936,
		"EITEMTYPE_SMALLBOX":                 937,
		"EITEMTYPE_BOOKSHELF":                938,
		"EITEMTYPE_SCREEN":                   939,
		"EITEMTYPE_DEC":                      940,
		"EITEMTYPE_DOLL":                     941,
		"EITEMTYPE_WALLPICTURE":              942,
		"EITEMTYPE_CONTROLBOOK":              943,
		"EITEMTYPE_BEERTABLE":                944,
		"EITEMTYPE_DININGTABLE":              945,
		"EITEMTYPE_DEC_WALL":                 946,
		"EITEMTYPE_DEC_FLOOR":                947,
		"EITEMTYPE_DEC_STAIRS":               948,
		"EITEMTYPE_DEC_ROOF":                 949,
		"EITEMTYPE_DEC_DOOR":                 950,
		"EITEMTYPE_SPORT":                    951,
		"EITEMTYPE_COOK":                     952,
		"EITEMTYPE_FURN_OTHER":               953,
		"EITEMTYPE_FURN_DEC":                 954,
		"EITEMTYPE_PARTITION":                955,
		"EITEMTYPE_BEAUTY":                   956,
		"EITEMTYPE_LANDSPACE":                957,
		"EITEMTYPE_LITTLETREE":               958,
		"EITEMTYPE_BOARD":                    959,
		"EITEMTYPE_ASTROLABE_TICKET":         1000,
		"EITEMTYPE_PRAY_TICKET":              1002,
		"EITEMTYPE_WATER_ELEMENT":            1001,
		"EITEMTYPE_PORTRAIT":                 1200,
		"EITEMTYPE_FRAME":                    1210,
		"EITEMTYPE_CODE":                     4000,
		"EITEMTYPE_KFC_CODE":                 4200,
		"EITEMTYPE_DRAW_CODE":                4201,
		"EITEMTYPE_HEADWEAR_CRYSTAL":         4202,
		"EITEMTYPE_HEADWEARACTIVITY_CRYSTAL": 4203,
		"EITEMTYPE_LUCKY_DICE":               4204,
		"EITEMTYPE_TRANSFIGHT":               4205,
		"EITEMTYPE_HAPPYVALUE":               4206,
		"EITEMTYPE_DISNEY_MICKEY":            4207,
		"EITEMTYPE_RED_PACKET":               4208,
		"EITEMTYPE_MAX":                      4209,
	}
)

func (x EItemType) Enum() *EItemType {
	p := new(EItemType)
	*p = x
	return p
}

func (x EItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[2].Descriptor()
}

func (EItemType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[2]
}

func (x EItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EItemType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EItemType(num)
	return nil
}

// Deprecated: Use EItemType.Descriptor instead.
func (EItemType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{2}
}

type EEquipType int32

const (
	EEquipType_EEQUIPTYPE_MIN            EEquipType = 0
	EEquipType_EEQUIPTYPE_WEAPON         EEquipType = 1
	EEquipType_EEQUIPTYPE_SHIELD         EEquipType = 3
	EEquipType_EEQUIPTYPE_ARMOUR         EEquipType = 2
	EEquipType_EEQUIPTYPE_ROBE           EEquipType = 4
	EEquipType_EEQUIPTYPE_SHOES          EEquipType = 5
	EEquipType_EEQUIPTYPE_ACCESSORY      EEquipType = 6
	EEquipType_EEQUIPTYPE_HEAD           EEquipType = 8
	EEquipType_EEQUIPTYPE_BACK           EEquipType = 9
	EEquipType_EEQUIPTYPE_FACE           EEquipType = 10
	EEquipType_EEQUIPTYPE_TAIL           EEquipType = 11
	EEquipType_EEQUIPTYPE_MOUNT          EEquipType = 12
	EEquipType_EEQUIPTYPE_MOUTH          EEquipType = 13
	EEquipType_EEQUIPTYPE_BARROW         EEquipType = 14
	EEquipType_EEQUIPTYPE_PEARL          EEquipType = 16
	EEquipType_EEQUIPTYPE_EIKON          EEquipType = 17
	EEquipType_EEQUIPTYPE_BRACELET       EEquipType = 18
	EEquipType_EEQUIPTYPE_HANDBRACELET   EEquipType = 19
	EEquipType_EEQUIPTYPE_TROLLEY        EEquipType = 20
	EEquipType_EEQUIPTYPE_ARTIFACT       EEquipType = 21
	EEquipType_EEQUIPTYPE_ARTIFACT_HEAD  EEquipType = 22
	EEquipType_EEQUIPTYPE_ARTIFACT_BACK  EEquipType = 23
	EEquipType_EEQUIPTYPE_ARTIFACT_RING1 EEquipType = 25
	EEquipType_EEQUIPTYPE_MAX            EEquipType = 26
)

// Enum value maps for EEquipType.
var (
	EEquipType_name = map[int32]string{
		0:  "EEQUIPTYPE_MIN",
		1:  "EEQUIPTYPE_WEAPON",
		3:  "EEQUIPTYPE_SHIELD",
		2:  "EEQUIPTYPE_ARMOUR",
		4:  "EEQUIPTYPE_ROBE",
		5:  "EEQUIPTYPE_SHOES",
		6:  "EEQUIPTYPE_ACCESSORY",
		8:  "EEQUIPTYPE_HEAD",
		9:  "EEQUIPTYPE_BACK",
		10: "EEQUIPTYPE_FACE",
		11: "EEQUIPTYPE_TAIL",
		12: "EEQUIPTYPE_MOUNT",
		13: "EEQUIPTYPE_MOUTH",
		14: "EEQUIPTYPE_BARROW",
		16: "EEQUIPTYPE_PEARL",
		17: "EEQUIPTYPE_EIKON",
		18: "EEQUIPTYPE_BRACELET",
		19: "EEQUIPTYPE_HANDBRACELET",
		20: "EEQUIPTYPE_TROLLEY",
		21: "EEQUIPTYPE_ARTIFACT",
		22: "EEQUIPTYPE_ARTIFACT_HEAD",
		23: "EEQUIPTYPE_ARTIFACT_BACK",
		25: "EEQUIPTYPE_ARTIFACT_RING1",
		26: "EEQUIPTYPE_MAX",
	}
	EEquipType_value = map[string]int32{
		"EEQUIPTYPE_MIN":            0,
		"EEQUIPTYPE_WEAPON":         1,
		"EEQUIPTYPE_SHIELD":         3,
		"EEQUIPTYPE_ARMOUR":         2,
		"EEQUIPTYPE_ROBE":           4,
		"EEQUIPTYPE_SHOES":          5,
		"EEQUIPTYPE_ACCESSORY":      6,
		"EEQUIPTYPE_HEAD":           8,
		"EEQUIPTYPE_BACK":           9,
		"EEQUIPTYPE_FACE":           10,
		"EEQUIPTYPE_TAIL":           11,
		"EEQUIPTYPE_MOUNT":          12,
		"EEQUIPTYPE_MOUTH":          13,
		"EEQUIPTYPE_BARROW":         14,
		"EEQUIPTYPE_PEARL":          16,
		"EEQUIPTYPE_EIKON":          17,
		"EEQUIPTYPE_BRACELET":       18,
		"EEQUIPTYPE_HANDBRACELET":   19,
		"EEQUIPTYPE_TROLLEY":        20,
		"EEQUIPTYPE_ARTIFACT":       21,
		"EEQUIPTYPE_ARTIFACT_HEAD":  22,
		"EEQUIPTYPE_ARTIFACT_BACK":  23,
		"EEQUIPTYPE_ARTIFACT_RING1": 25,
		"EEQUIPTYPE_MAX":            26,
	}
)

func (x EEquipType) Enum() *EEquipType {
	p := new(EEquipType)
	*p = x
	return p
}

func (x EEquipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEquipType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[3].Descriptor()
}

func (EEquipType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[3]
}

func (x EEquipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEquipType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEquipType(num)
	return nil
}

// Deprecated: Use EEquipType.Descriptor instead.
func (EEquipType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{3}
}

type EBindType int32

const (
	EBindType_EBINDTYPE_MIN    EBindType = 0
	EBindType_EBINDTYPE_BIND   EBindType = 1
	EBindType_EBINDTYPE_NOBIND EBindType = 2
	EBindType_EBINDTYPE_MAX    EBindType = 3
)

// Enum value maps for EBindType.
var (
	EBindType_name = map[int32]string{
		0: "EBINDTYPE_MIN",
		1: "EBINDTYPE_BIND",
		2: "EBINDTYPE_NOBIND",
		3: "EBINDTYPE_MAX",
	}
	EBindType_value = map[string]int32{
		"EBINDTYPE_MIN":    0,
		"EBINDTYPE_BIND":   1,
		"EBINDTYPE_NOBIND": 2,
		"EBINDTYPE_MAX":    3,
	}
)

func (x EBindType) Enum() *EBindType {
	p := new(EBindType)
	*p = x
	return p
}

func (x EBindType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBindType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[4].Descriptor()
}

func (EBindType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[4]
}

func (x EBindType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBindType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBindType(num)
	return nil
}

// Deprecated: Use EBindType.Descriptor instead.
func (EBindType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{4}
}

type EExpireType int32

const (
	EExpireType_EEXPIRETYPE_MIN EExpireType = 0
	EExpireType_EEXPIRETYPE_MAX EExpireType = 1
)

// Enum value maps for EExpireType.
var (
	EExpireType_name = map[int32]string{
		0: "EEXPIRETYPE_MIN",
		1: "EEXPIRETYPE_MAX",
	}
	EExpireType_value = map[string]int32{
		"EEXPIRETYPE_MIN": 0,
		"EEXPIRETYPE_MAX": 1,
	}
)

func (x EExpireType) Enum() *EExpireType {
	p := new(EExpireType)
	*p = x
	return p
}

func (x EExpireType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EExpireType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[5].Descriptor()
}

func (EExpireType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[5]
}

func (x EExpireType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EExpireType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EExpireType(num)
	return nil
}

// Deprecated: Use EExpireType.Descriptor instead.
func (EExpireType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{5}
}

type ERideType int32

const (
	ERideType_ERIDETYPE_MIN ERideType = 0
	ERideType_ERIDETYPE_ON  ERideType = 1
	ERideType_ERIDETYPE_OFF ERideType = 2
	ERideType_ERIDETYPE_MAX ERideType = 3
)

// Enum value maps for ERideType.
var (
	ERideType_name = map[int32]string{
		0: "ERIDETYPE_MIN",
		1: "ERIDETYPE_ON",
		2: "ERIDETYPE_OFF",
		3: "ERIDETYPE_MAX",
	}
	ERideType_value = map[string]int32{
		"ERIDETYPE_MIN": 0,
		"ERIDETYPE_ON":  1,
		"ERIDETYPE_OFF": 2,
		"ERIDETYPE_MAX": 3,
	}
)

func (x ERideType) Enum() *ERideType {
	p := new(ERideType)
	*p = x
	return p
}

func (x ERideType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERideType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[6].Descriptor()
}

func (ERideType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[6]
}

func (x ERideType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERideType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERideType(num)
	return nil
}

// Deprecated: Use ERideType.Descriptor instead.
func (ERideType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{6}
}

type ETragetType int32

const (
	ETragetType_ETARGETTYPE_MY             ETragetType = 0
	ETragetType_ETARGETTYPE_USER           ETragetType = 1
	ETragetType_ETARGETTYPE_MONSTER        ETragetType = 2
	ETragetType_ETARGETTYPE_USERANDMONSTER ETragetType = 3
	ETragetType_ETARGETTYPE_ITEM           ETragetType = 4
	ETragetType_ETARGETTYPE_USER_ANYNPC    ETragetType = 5
	ETragetType_ETARGETTYPE_SPEC_NPC       ETragetType = 6
)

// Enum value maps for ETragetType.
var (
	ETragetType_name = map[int32]string{
		0: "ETARGETTYPE_MY",
		1: "ETARGETTYPE_USER",
		2: "ETARGETTYPE_MONSTER",
		3: "ETARGETTYPE_USERANDMONSTER",
		4: "ETARGETTYPE_ITEM",
		5: "ETARGETTYPE_USER_ANYNPC",
		6: "ETARGETTYPE_SPEC_NPC",
	}
	ETragetType_value = map[string]int32{
		"ETARGETTYPE_MY":             0,
		"ETARGETTYPE_USER":           1,
		"ETARGETTYPE_MONSTER":        2,
		"ETARGETTYPE_USERANDMONSTER": 3,
		"ETARGETTYPE_ITEM":           4,
		"ETARGETTYPE_USER_ANYNPC":    5,
		"ETARGETTYPE_SPEC_NPC":       6,
	}
)

func (x ETragetType) Enum() *ETragetType {
	p := new(ETragetType)
	*p = x
	return p
}

func (x ETragetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETragetType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[7].Descriptor()
}

func (ETragetType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[7]
}

func (x ETragetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETragetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETragetType(num)
	return nil
}

// Deprecated: Use ETragetType.Descriptor instead.
func (ETragetType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{7}
}

type EEnchantType int32

const (
	EEnchantType_EENCHANTTYPE_MIN     EEnchantType = 0
	EEnchantType_EENCHANTTYPE_PRIMARY EEnchantType = 1
	EEnchantType_EENCHANTTYPE_MEDIUM  EEnchantType = 2
	EEnchantType_EENCHANTTYPE_SENIOR  EEnchantType = 3
	EEnchantType_EENCHANTTYPE_MAX     EEnchantType = 4
)

// Enum value maps for EEnchantType.
var (
	EEnchantType_name = map[int32]string{
		0: "EENCHANTTYPE_MIN",
		1: "EENCHANTTYPE_PRIMARY",
		2: "EENCHANTTYPE_MEDIUM",
		3: "EENCHANTTYPE_SENIOR",
		4: "EENCHANTTYPE_MAX",
	}
	EEnchantType_value = map[string]int32{
		"EENCHANTTYPE_MIN":     0,
		"EENCHANTTYPE_PRIMARY": 1,
		"EENCHANTTYPE_MEDIUM":  2,
		"EENCHANTTYPE_SENIOR":  3,
		"EENCHANTTYPE_MAX":     4,
	}
)

func (x EEnchantType) Enum() *EEnchantType {
	p := new(EEnchantType)
	*p = x
	return p
}

func (x EEnchantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEnchantType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[8].Descriptor()
}

func (EEnchantType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[8]
}

func (x EEnchantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEnchantType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEnchantType(num)
	return nil
}

// Deprecated: Use EEnchantType.Descriptor instead.
func (EEnchantType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{8}
}

type ERefineLastResult int32

const (
	ERefineLastResult_EREFINE_RET_MIN     ERefineLastResult = 0
	ERefineLastResult_EREFINE_RET_SUCCESS ERefineLastResult = 1
	ERefineLastResult_EREFINE_RET_FAIL    ERefineLastResult = 2
)

// Enum value maps for ERefineLastResult.
var (
	ERefineLastResult_name = map[int32]string{
		0: "EREFINE_RET_MIN",
		1: "EREFINE_RET_SUCCESS",
		2: "EREFINE_RET_FAIL",
	}
	ERefineLastResult_value = map[string]int32{
		"EREFINE_RET_MIN":     0,
		"EREFINE_RET_SUCCESS": 1,
		"EREFINE_RET_FAIL":    2,
	}
)

func (x ERefineLastResult) Enum() *ERefineLastResult {
	p := new(ERefineLastResult)
	*p = x
	return p
}

func (x ERefineLastResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERefineLastResult) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[9].Descriptor()
}

func (ERefineLastResult) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[9]
}

func (x ERefineLastResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERefineLastResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERefineLastResult(num)
	return nil
}

// Deprecated: Use ERefineLastResult.Descriptor instead.
func (ERefineLastResult) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{9}
}

type ELetterType int32

const (
	ELetterType_ELETTERTYPE_LOVE          ELetterType = 1
	ELetterType_ELETTERTYPE_CONSTELLATION ELetterType = 2
	ELetterType_ELETTERTYPE_CHRISTMAS     ELetterType = 3
	ELetterType_ELETTERTYPE_SPRING        ELetterType = 4
	ELetterType_ELETTERTYPE_LOTTERY       ELetterType = 5
	ELetterType_ELETTERTYPE_WEDDINGDRESS  ELetterType = 6
	ELetterType_ELETTERTYPE_IOS           ELetterType = 7
)

// Enum value maps for ELetterType.
var (
	ELetterType_name = map[int32]string{
		1: "ELETTERTYPE_LOVE",
		2: "ELETTERTYPE_CONSTELLATION",
		3: "ELETTERTYPE_CHRISTMAS",
		4: "ELETTERTYPE_SPRING",
		5: "ELETTERTYPE_LOTTERY",
		6: "ELETTERTYPE_WEDDINGDRESS",
		7: "ELETTERTYPE_IOS",
	}
	ELetterType_value = map[string]int32{
		"ELETTERTYPE_LOVE":          1,
		"ELETTERTYPE_CONSTELLATION": 2,
		"ELETTERTYPE_CHRISTMAS":     3,
		"ELETTERTYPE_SPRING":        4,
		"ELETTERTYPE_LOTTERY":       5,
		"ELETTERTYPE_WEDDINGDRESS":  6,
		"ELETTERTYPE_IOS":           7,
	}
)

func (x ELetterType) Enum() *ELetterType {
	p := new(ELetterType)
	*p = x
	return p
}

func (x ELetterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELetterType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[10].Descriptor()
}

func (ELetterType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[10]
}

func (x ELetterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELetterType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELetterType(num)
	return nil
}

// Deprecated: Use ELetterType.Descriptor instead.
func (ELetterType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{10}
}

type EArtifactState int32

const (
	EArtifactState_ESTATE_INACTIVATED EArtifactState = 1
	EArtifactState_ESTATE_FRAGMENTS   EArtifactState = 2
	EArtifactState_ESTATE_ACTIVATION  EArtifactState = 3
	EArtifactState_ESTATE_ENTRY       EArtifactState = 4
)

// Enum value maps for EArtifactState.
var (
	EArtifactState_name = map[int32]string{
		1: "ESTATE_INACTIVATED",
		2: "ESTATE_FRAGMENTS",
		3: "ESTATE_ACTIVATION",
		4: "ESTATE_ENTRY",
	}
	EArtifactState_value = map[string]int32{
		"ESTATE_INACTIVATED": 1,
		"ESTATE_FRAGMENTS":   2,
		"ESTATE_ACTIVATION":  3,
		"ESTATE_ENTRY":       4,
	}
)

func (x EArtifactState) Enum() *EArtifactState {
	p := new(EArtifactState)
	*p = x
	return p
}

func (x EArtifactState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EArtifactState) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[11].Descriptor()
}

func (EArtifactState) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[11]
}

func (x EArtifactState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EArtifactState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EArtifactState(num)
	return nil
}

// Deprecated: Use EArtifactState.Descriptor instead.
func (EArtifactState) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{11}
}

type EFurnitureState int32

const (
	EFurnitureState_EFURNITURESTATE_MIN  EFurnitureState = 0
	EFurnitureState_EFURNITURESTATE_IDLE EFurnitureState = 1
	EFurnitureState_EFURNITURESTATE_SEAT EFurnitureState = 2
	EFurnitureState_EFURNITURESTATE_ON   EFurnitureState = 3
	EFurnitureState_EFURNITURESTATE_OFF  EFurnitureState = 4
	EFurnitureState_EFURNITURESTATE_MAX  EFurnitureState = 5
)

// Enum value maps for EFurnitureState.
var (
	EFurnitureState_name = map[int32]string{
		0: "EFURNITURESTATE_MIN",
		1: "EFURNITURESTATE_IDLE",
		2: "EFURNITURESTATE_SEAT",
		3: "EFURNITURESTATE_ON",
		4: "EFURNITURESTATE_OFF",
		5: "EFURNITURESTATE_MAX",
	}
	EFurnitureState_value = map[string]int32{
		"EFURNITURESTATE_MIN":  0,
		"EFURNITURESTATE_IDLE": 1,
		"EFURNITURESTATE_SEAT": 2,
		"EFURNITURESTATE_ON":   3,
		"EFURNITURESTATE_OFF":  4,
		"EFURNITURESTATE_MAX":  5,
	}
)

func (x EFurnitureState) Enum() *EFurnitureState {
	p := new(EFurnitureState)
	*p = x
	return p
}

func (x EFurnitureState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFurnitureState) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[12].Descriptor()
}

func (EFurnitureState) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[12]
}

func (x EFurnitureState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFurnitureState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFurnitureState(num)
	return nil
}

// Deprecated: Use EFurnitureState.Descriptor instead.
func (EFurnitureState) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{12}
}

type EEquipOper int32

const (
	EEquipOper_EEQUIPOPER_MIN         EEquipOper = 0
	EEquipOper_EEQUIPOPER_ON          EEquipOper = 1
	EEquipOper_EEQUIPOPER_OFF         EEquipOper = 2
	EEquipOper_EEQUIPOPER_PUTFASHION  EEquipOper = 3
	EEquipOper_EEQUIPOPER_OFFFASHION  EEquipOper = 4
	EEquipOper_EEQUIPOPER_PUTSTORE    EEquipOper = 5
	EEquipOper_EEQUIPOPER_OFFSTORE    EEquipOper = 6
	EEquipOper_EEQUIPOPER_OFFALL      EEquipOper = 7
	EEquipOper_EEQUIPOPER_OFFPOS      EEquipOper = 8
	EEquipOper_EEQUIPOPER_PUTPSTORE   EEquipOper = 9
	EEquipOper_EEQUIPOPER_OFFPSTORE   EEquipOper = 10
	EEquipOper_EEQUIPOPER_OFFTEMP     EEquipOper = 11
	EEquipOper_EEQUIPOPER_PUTBARROW   EEquipOper = 12
	EEquipOper_EEQUIPOPER_OFFBARROW   EEquipOper = 13
	EEquipOper_EEQUIPOPER_DRESSUP_ON  EEquipOper = 14
	EEquipOper_EEQUIPOPER_DRESSUP_OFF EEquipOper = 15
	EEquipOper_EEQUIPOPER_RIDEON      EEquipOper = 16
	EEquipOper_EEQUIPOPER_RIDEOFF     EEquipOper = 17
	EEquipOper_EEQUIPOPER_MAX         EEquipOper = 18
)

// Enum value maps for EEquipOper.
var (
	EEquipOper_name = map[int32]string{
		0:  "EEQUIPOPER_MIN",
		1:  "EEQUIPOPER_ON",
		2:  "EEQUIPOPER_OFF",
		3:  "EEQUIPOPER_PUTFASHION",
		4:  "EEQUIPOPER_OFFFASHION",
		5:  "EEQUIPOPER_PUTSTORE",
		6:  "EEQUIPOPER_OFFSTORE",
		7:  "EEQUIPOPER_OFFALL",
		8:  "EEQUIPOPER_OFFPOS",
		9:  "EEQUIPOPER_PUTPSTORE",
		10: "EEQUIPOPER_OFFPSTORE",
		11: "EEQUIPOPER_OFFTEMP",
		12: "EEQUIPOPER_PUTBARROW",
		13: "EEQUIPOPER_OFFBARROW",
		14: "EEQUIPOPER_DRESSUP_ON",
		15: "EEQUIPOPER_DRESSUP_OFF",
		16: "EEQUIPOPER_RIDEON",
		17: "EEQUIPOPER_RIDEOFF",
		18: "EEQUIPOPER_MAX",
	}
	EEquipOper_value = map[string]int32{
		"EEQUIPOPER_MIN":         0,
		"EEQUIPOPER_ON":          1,
		"EEQUIPOPER_OFF":         2,
		"EEQUIPOPER_PUTFASHION":  3,
		"EEQUIPOPER_OFFFASHION":  4,
		"EEQUIPOPER_PUTSTORE":    5,
		"EEQUIPOPER_OFFSTORE":    6,
		"EEQUIPOPER_OFFALL":      7,
		"EEQUIPOPER_OFFPOS":      8,
		"EEQUIPOPER_PUTPSTORE":   9,
		"EEQUIPOPER_OFFPSTORE":   10,
		"EEQUIPOPER_OFFTEMP":     11,
		"EEQUIPOPER_PUTBARROW":   12,
		"EEQUIPOPER_OFFBARROW":   13,
		"EEQUIPOPER_DRESSUP_ON":  14,
		"EEQUIPOPER_DRESSUP_OFF": 15,
		"EEQUIPOPER_RIDEON":      16,
		"EEQUIPOPER_RIDEOFF":     17,
		"EEQUIPOPER_MAX":         18,
	}
)

func (x EEquipOper) Enum() *EEquipOper {
	p := new(EEquipOper)
	*p = x
	return p
}

func (x EEquipOper) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEquipOper) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[13].Descriptor()
}

func (EEquipOper) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[13]
}

func (x EEquipOper) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEquipOper) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEquipOper(num)
	return nil
}

// Deprecated: Use EEquipOper.Descriptor instead.
func (EEquipOper) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{13}
}

type EEquipPos int32

const (
	EEquipPos_EEQUIPPOS_MIN            EEquipPos = 0
	EEquipPos_EEQUIPPOS_WEAPON         EEquipPos = 7
	EEquipPos_EEQUIPPOS_ARMOUR         EEquipPos = 2
	EEquipPos_EEQUIPPOS_SHIELD         EEquipPos = 1
	EEquipPos_EEQUIPPOS_ROBE           EEquipPos = 3
	EEquipPos_EEQUIPPOS_SHOES          EEquipPos = 4
	EEquipPos_EEQUIPPOS_ACCESSORY1     EEquipPos = 5
	EEquipPos_EEQUIPPOS_ACCESSORY2     EEquipPos = 6
	EEquipPos_EEQUIPPOS_HEAD           EEquipPos = 8
	EEquipPos_EEQUIPPOS_BACK           EEquipPos = 11
	EEquipPos_EEQUIPPOS_FACE           EEquipPos = 9
	EEquipPos_EEQUIPPOS_TAIL           EEquipPos = 12
	EEquipPos_EEQUIPPOS_MOUNT          EEquipPos = 13
	EEquipPos_EEQUIPPOS_MOUTH          EEquipPos = 10
	EEquipPos_EEQUIPPOS_BARROW         EEquipPos = 14
	EEquipPos_EEQUIPPOS_ARTIFACT       EEquipPos = 15
	EEquipPos_EEQUIPPOS_ARTIFACT_HEAD  EEquipPos = 16
	EEquipPos_EEQUIPPOS_ARTIFACT_BACK  EEquipPos = 17
	EEquipPos_EEQUIPPOS_ARTIFACT_RING1 EEquipPos = 19
	EEquipPos_EEQUIPPOS_MAX            EEquipPos = 20
)

// Enum value maps for EEquipPos.
var (
	EEquipPos_name = map[int32]string{
		0:  "EEQUIPPOS_MIN",
		7:  "EEQUIPPOS_WEAPON",
		2:  "EEQUIPPOS_ARMOUR",
		1:  "EEQUIPPOS_SHIELD",
		3:  "EEQUIPPOS_ROBE",
		4:  "EEQUIPPOS_SHOES",
		5:  "EEQUIPPOS_ACCESSORY1",
		6:  "EEQUIPPOS_ACCESSORY2",
		8:  "EEQUIPPOS_HEAD",
		11: "EEQUIPPOS_BACK",
		9:  "EEQUIPPOS_FACE",
		12: "EEQUIPPOS_TAIL",
		13: "EEQUIPPOS_MOUNT",
		10: "EEQUIPPOS_MOUTH",
		14: "EEQUIPPOS_BARROW",
		15: "EEQUIPPOS_ARTIFACT",
		16: "EEQUIPPOS_ARTIFACT_HEAD",
		17: "EEQUIPPOS_ARTIFACT_BACK",
		19: "EEQUIPPOS_ARTIFACT_RING1",
		20: "EEQUIPPOS_MAX",
	}
	EEquipPos_value = map[string]int32{
		"EEQUIPPOS_MIN":            0,
		"EEQUIPPOS_WEAPON":         7,
		"EEQUIPPOS_ARMOUR":         2,
		"EEQUIPPOS_SHIELD":         1,
		"EEQUIPPOS_ROBE":           3,
		"EEQUIPPOS_SHOES":          4,
		"EEQUIPPOS_ACCESSORY1":     5,
		"EEQUIPPOS_ACCESSORY2":     6,
		"EEQUIPPOS_HEAD":           8,
		"EEQUIPPOS_BACK":           11,
		"EEQUIPPOS_FACE":           9,
		"EEQUIPPOS_TAIL":           12,
		"EEQUIPPOS_MOUNT":          13,
		"EEQUIPPOS_MOUTH":          10,
		"EEQUIPPOS_BARROW":         14,
		"EEQUIPPOS_ARTIFACT":       15,
		"EEQUIPPOS_ARTIFACT_HEAD":  16,
		"EEQUIPPOS_ARTIFACT_BACK":  17,
		"EEQUIPPOS_ARTIFACT_RING1": 19,
		"EEQUIPPOS_MAX":            20,
	}
)

func (x EEquipPos) Enum() *EEquipPos {
	p := new(EEquipPos)
	*p = x
	return p
}

func (x EEquipPos) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEquipPos) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[14].Descriptor()
}

func (EEquipPos) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[14]
}

func (x EEquipPos) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEquipPos) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEquipPos(num)
	return nil
}

// Deprecated: Use EEquipPos.Descriptor instead.
func (EEquipPos) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{14}
}

type EStrengthResult int32

const (
	EStrengthResult_ESTRENGTHRESULT_MIN        EStrengthResult = 0
	EStrengthResult_ESTRENGTHRESULT_SUCCESS    EStrengthResult = 1
	EStrengthResult_ESTRENGTHRESULT_NOMATERIAL EStrengthResult = 2
	EStrengthResult_ESTRENGTHRESULT_MAXLV      EStrengthResult = 3
)

// Enum value maps for EStrengthResult.
var (
	EStrengthResult_name = map[int32]string{
		0: "ESTRENGTHRESULT_MIN",
		1: "ESTRENGTHRESULT_SUCCESS",
		2: "ESTRENGTHRESULT_NOMATERIAL",
		3: "ESTRENGTHRESULT_MAXLV",
	}
	EStrengthResult_value = map[string]int32{
		"ESTRENGTHRESULT_MIN":        0,
		"ESTRENGTHRESULT_SUCCESS":    1,
		"ESTRENGTHRESULT_NOMATERIAL": 2,
		"ESTRENGTHRESULT_MAXLV":      3,
	}
)

func (x EStrengthResult) Enum() *EStrengthResult {
	p := new(EStrengthResult)
	*p = x
	return p
}

func (x EStrengthResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStrengthResult) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[15].Descriptor()
}

func (EStrengthResult) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[15]
}

func (x EStrengthResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStrengthResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStrengthResult(num)
	return nil
}

// Deprecated: Use EStrengthResult.Descriptor instead.
func (EStrengthResult) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{15}
}

type EStrengthType int32

const (
	EStrengthType_ESTRENGTHTYPE_MIN    EStrengthType = 0
	EStrengthType_ESTRENGTHTYPE_NORMAL EStrengthType = 1
	EStrengthType_ESTRENGTHTYPE_GUILD  EStrengthType = 2
	EStrengthType_ESTRENGTHTYPE_MAX    EStrengthType = 3
)

// Enum value maps for EStrengthType.
var (
	EStrengthType_name = map[int32]string{
		0: "ESTRENGTHTYPE_MIN",
		1: "ESTRENGTHTYPE_NORMAL",
		2: "ESTRENGTHTYPE_GUILD",
		3: "ESTRENGTHTYPE_MAX",
	}
	EStrengthType_value = map[string]int32{
		"ESTRENGTHTYPE_MIN":    0,
		"ESTRENGTHTYPE_NORMAL": 1,
		"ESTRENGTHTYPE_GUILD":  2,
		"ESTRENGTHTYPE_MAX":    3,
	}
)

func (x EStrengthType) Enum() *EStrengthType {
	p := new(EStrengthType)
	*p = x
	return p
}

func (x EStrengthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStrengthType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[16].Descriptor()
}

func (EStrengthType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[16]
}

func (x EStrengthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStrengthType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStrengthType(num)
	return nil
}

// Deprecated: Use EStrengthType.Descriptor instead.
func (EStrengthType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{16}
}

type EProduceType int32

const (
	EProduceType_EPRODUCETYPE_MIN       EProduceType = 1
	EProduceType_EPRODUCETYPE_HEAD      EProduceType = 2
	EProduceType_EPRODUCETYPE_EQUIP     EProduceType = 3
	EProduceType_EPRODUCETYPE_TRADER    EProduceType = 4
	EProduceType_EPRODUCETYPE_FURNITURE EProduceType = 5
	EProduceType_EPRODUCETYPE_COMMON    EProduceType = 6
	EProduceType_EPRODUCETYPE_MAX       EProduceType = 7
)

// Enum value maps for EProduceType.
var (
	EProduceType_name = map[int32]string{
		1: "EPRODUCETYPE_MIN",
		2: "EPRODUCETYPE_HEAD",
		3: "EPRODUCETYPE_EQUIP",
		4: "EPRODUCETYPE_TRADER",
		5: "EPRODUCETYPE_FURNITURE",
		6: "EPRODUCETYPE_COMMON",
		7: "EPRODUCETYPE_MAX",
	}
	EProduceType_value = map[string]int32{
		"EPRODUCETYPE_MIN":       1,
		"EPRODUCETYPE_HEAD":      2,
		"EPRODUCETYPE_EQUIP":     3,
		"EPRODUCETYPE_TRADER":    4,
		"EPRODUCETYPE_FURNITURE": 5,
		"EPRODUCETYPE_COMMON":    6,
		"EPRODUCETYPE_MAX":       7,
	}
)

func (x EProduceType) Enum() *EProduceType {
	p := new(EProduceType)
	*p = x
	return p
}

func (x EProduceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProduceType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[17].Descriptor()
}

func (EProduceType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[17]
}

func (x EProduceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EProduceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EProduceType(num)
	return nil
}

// Deprecated: Use EProduceType.Descriptor instead.
func (EProduceType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{17}
}

type ERefineResult int32

const (
	ERefineResult_EREFINERESULT_MIN         ERefineResult = 0
	ERefineResult_EREFINERESULT_SUCCESS     ERefineResult = 1
	ERefineResult_EREFINERESULT_FAILSTAY    ERefineResult = 2
	ERefineResult_EREFINERESULT_FAILBACK    ERefineResult = 3
	ERefineResult_EREFINERESULT_FAILSTAYDAM ERefineResult = 4
	ERefineResult_EREFINERESULT_FAILBACKDAM ERefineResult = 5
	ERefineResult_EREFINERESULT_MAX         ERefineResult = 6
)

// Enum value maps for ERefineResult.
var (
	ERefineResult_name = map[int32]string{
		0: "EREFINERESULT_MIN",
		1: "EREFINERESULT_SUCCESS",
		2: "EREFINERESULT_FAILSTAY",
		3: "EREFINERESULT_FAILBACK",
		4: "EREFINERESULT_FAILSTAYDAM",
		5: "EREFINERESULT_FAILBACKDAM",
		6: "EREFINERESULT_MAX",
	}
	ERefineResult_value = map[string]int32{
		"EREFINERESULT_MIN":         0,
		"EREFINERESULT_SUCCESS":     1,
		"EREFINERESULT_FAILSTAY":    2,
		"EREFINERESULT_FAILBACK":    3,
		"EREFINERESULT_FAILSTAYDAM": 4,
		"EREFINERESULT_FAILBACKDAM": 5,
		"EREFINERESULT_MAX":         6,
	}
)

func (x ERefineResult) Enum() *ERefineResult {
	p := new(ERefineResult)
	*p = x
	return p
}

func (x ERefineResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERefineResult) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[18].Descriptor()
}

func (ERefineResult) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[18]
}

func (x ERefineResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERefineResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERefineResult(num)
	return nil
}

// Deprecated: Use ERefineResult.Descriptor instead.
func (ERefineResult) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{18}
}

type EDecomposeResult int32

const (
	EDecomposeResult_EDECOMPOSERESULT_MIN             EDecomposeResult = 0
	EDecomposeResult_EDECOMPOSERESULT_FAIL            EDecomposeResult = 1
	EDecomposeResult_EDECOMPOSERESULT_SUCCESS         EDecomposeResult = 2
	EDecomposeResult_EDECOMPOSERESULT_SUCCESS_BIG     EDecomposeResult = 3
	EDecomposeResult_EDECOMPOSERESULT_SUCCESS_SBIG    EDecomposeResult = 4
	EDecomposeResult_EDECOMPOSERESULT_SUCCESS_FANTASY EDecomposeResult = 5
	EDecomposeResult_EDECOMPOSERESULT_MAX             EDecomposeResult = 6
)

// Enum value maps for EDecomposeResult.
var (
	EDecomposeResult_name = map[int32]string{
		0: "EDECOMPOSERESULT_MIN",
		1: "EDECOMPOSERESULT_FAIL",
		2: "EDECOMPOSERESULT_SUCCESS",
		3: "EDECOMPOSERESULT_SUCCESS_BIG",
		4: "EDECOMPOSERESULT_SUCCESS_SBIG",
		5: "EDECOMPOSERESULT_SUCCESS_FANTASY",
		6: "EDECOMPOSERESULT_MAX",
	}
	EDecomposeResult_value = map[string]int32{
		"EDECOMPOSERESULT_MIN":             0,
		"EDECOMPOSERESULT_FAIL":            1,
		"EDECOMPOSERESULT_SUCCESS":         2,
		"EDECOMPOSERESULT_SUCCESS_BIG":     3,
		"EDECOMPOSERESULT_SUCCESS_SBIG":    4,
		"EDECOMPOSERESULT_SUCCESS_FANTASY": 5,
		"EDECOMPOSERESULT_MAX":             6,
	}
)

func (x EDecomposeResult) Enum() *EDecomposeResult {
	p := new(EDecomposeResult)
	*p = x
	return p
}

func (x EDecomposeResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDecomposeResult) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[19].Descriptor()
}

func (EDecomposeResult) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[19]
}

func (x EDecomposeResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDecomposeResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDecomposeResult(num)
	return nil
}

// Deprecated: Use EDecomposeResult.Descriptor instead.
func (EDecomposeResult) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{19}
}

type ECardOper int32

const (
	ECardOper_ECARDOPER_MIN      ECardOper = 0
	ECardOper_ECARDOPER_EQUIPON  ECardOper = 1
	ECardOper_ECARDOPER_EQUIPOFF ECardOper = 2
	ECardOper_ECARDOPER_MAX      ECardOper = 3
)

// Enum value maps for ECardOper.
var (
	ECardOper_name = map[int32]string{
		0: "ECARDOPER_MIN",
		1: "ECARDOPER_EQUIPON",
		2: "ECARDOPER_EQUIPOFF",
		3: "ECARDOPER_MAX",
	}
	ECardOper_value = map[string]int32{
		"ECARDOPER_MIN":      0,
		"ECARDOPER_EQUIPON":  1,
		"ECARDOPER_EQUIPOFF": 2,
		"ECARDOPER_MAX":      3,
	}
)

func (x ECardOper) Enum() *ECardOper {
	p := new(ECardOper)
	*p = x
	return p
}

func (x ECardOper) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECardOper) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[20].Descriptor()
}

func (ECardOper) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[20]
}

func (x ECardOper) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECardOper) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECardOper(num)
	return nil
}

// Deprecated: Use ECardOper.Descriptor instead.
func (ECardOper) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{20}
}

type ETradeType int32

const (
	ETradeType_ETRADETYPE_ALL   ETradeType = 0
	ETradeType_ETRADETYPE_TRADE ETradeType = 1
	ETradeType_ETRADETYPE_BOOTH ETradeType = 2
)

// Enum value maps for ETradeType.
var (
	ETradeType_name = map[int32]string{
		0: "ETRADETYPE_ALL",
		1: "ETRADETYPE_TRADE",
		2: "ETRADETYPE_BOOTH",
	}
	ETradeType_value = map[string]int32{
		"ETRADETYPE_ALL":   0,
		"ETRADETYPE_TRADE": 1,
		"ETRADETYPE_BOOTH": 2,
	}
)

func (x ETradeType) Enum() *ETradeType {
	p := new(ETradeType)
	*p = x
	return p
}

func (x ETradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[21].Descriptor()
}

func (ETradeType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[21]
}

func (x ETradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETradeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETradeType(num)
	return nil
}

// Deprecated: Use ETradeType.Descriptor instead.
func (ETradeType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{21}
}

type EExchangeType int32

const (
	EExchangeType_EEXCHANGETYPE_MIN      EExchangeType = 0
	EExchangeType_EEXCHANGETYPE_EXCHANGE EExchangeType = 1
	EExchangeType_EEXCHANGETYPE_LEVELUP  EExchangeType = 2
	EExchangeType_EEXCHANGETYPE_MAX      EExchangeType = 3
)

// Enum value maps for EExchangeType.
var (
	EExchangeType_name = map[int32]string{
		0: "EEXCHANGETYPE_MIN",
		1: "EEXCHANGETYPE_EXCHANGE",
		2: "EEXCHANGETYPE_LEVELUP",
		3: "EEXCHANGETYPE_MAX",
	}
	EExchangeType_value = map[string]int32{
		"EEXCHANGETYPE_MIN":      0,
		"EEXCHANGETYPE_EXCHANGE": 1,
		"EEXCHANGETYPE_LEVELUP":  2,
		"EEXCHANGETYPE_MAX":      3,
	}
)

func (x EExchangeType) Enum() *EExchangeType {
	p := new(EExchangeType)
	*p = x
	return p
}

func (x EExchangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EExchangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[22].Descriptor()
}

func (EExchangeType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[22]
}

func (x EExchangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EExchangeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EExchangeType(num)
	return nil
}

// Deprecated: Use EExchangeType.Descriptor instead.
func (EExchangeType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{22}
}

type EExchangeCardType int32

const (
	EExchangeCardType_EEXCHANGECARDTYPE_DRAW        EExchangeCardType = 1
	EExchangeCardType_EEXCHANGECARDTYPE_COMPOSE     EExchangeCardType = 2
	EExchangeCardType_EEXCHANGECARDTYPE_DECOMPOSE   EExchangeCardType = 3
	EExchangeCardType_EEXCHANGECARDTYPE_BOSSCOMPOSE EExchangeCardType = 4
)

// Enum value maps for EExchangeCardType.
var (
	EExchangeCardType_name = map[int32]string{
		1: "EEXCHANGECARDTYPE_DRAW",
		2: "EEXCHANGECARDTYPE_COMPOSE",
		3: "EEXCHANGECARDTYPE_DECOMPOSE",
		4: "EEXCHANGECARDTYPE_BOSSCOMPOSE",
	}
	EExchangeCardType_value = map[string]int32{
		"EEXCHANGECARDTYPE_DRAW":        1,
		"EEXCHANGECARDTYPE_COMPOSE":     2,
		"EEXCHANGECARDTYPE_DECOMPOSE":   3,
		"EEXCHANGECARDTYPE_BOSSCOMPOSE": 4,
	}
)

func (x EExchangeCardType) Enum() *EExchangeCardType {
	p := new(EExchangeCardType)
	*p = x
	return p
}

func (x EExchangeCardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EExchangeCardType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[23].Descriptor()
}

func (EExchangeCardType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[23]
}

func (x EExchangeCardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EExchangeCardType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EExchangeCardType(num)
	return nil
}

// Deprecated: Use EExchangeCardType.Descriptor instead.
func (EExchangeCardType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{23}
}

type ELotteryType int32

const (
	ELotteryType_ELotteryType_Min           ELotteryType = 0
	ELotteryType_ELotteryType_Head          ELotteryType = 1
	ELotteryType_ELotteryType_Equip         ELotteryType = 2
	ELotteryType_ELotteryType_Card          ELotteryType = 3
	ELotteryType_ELotteryType_CatLitterBox  ELotteryType = 4
	ELotteryType_ELotteryType_Magic         ELotteryType = 5
	ELotteryType_ELotteryType_Magic_2       ELotteryType = 6
	ELotteryType_ELotteryType_Magic_3       ELotteryType = 7
	ELotteryType_ELotteryType_Ride          ELotteryType = 8
	ELotteryType_ELotteryType_MIX1          ELotteryType = 9
	ELotteryType_ELotteryType_MIX2          ELotteryType = 10
	ELotteryType_ELotteryType_MIX3          ELotteryType = 11
	ELotteryType_ELotteryType_MIX4          ELotteryType = 12
	ELotteryType_ELotteryType_Card_New      ELotteryType = 31
	ELotteryType_ELotteryType_Card_Activity ELotteryType = 32
	ELotteryType_ELotteryType_Max           ELotteryType = 33
)

// Enum value maps for ELotteryType.
var (
	ELotteryType_name = map[int32]string{
		0:  "ELotteryType_Min",
		1:  "ELotteryType_Head",
		2:  "ELotteryType_Equip",
		3:  "ELotteryType_Card",
		4:  "ELotteryType_CatLitterBox",
		5:  "ELotteryType_Magic",
		6:  "ELotteryType_Magic_2",
		7:  "ELotteryType_Magic_3",
		8:  "ELotteryType_Ride",
		9:  "ELotteryType_MIX1",
		10: "ELotteryType_MIX2",
		11: "ELotteryType_MIX3",
		12: "ELotteryType_MIX4",
		31: "ELotteryType_Card_New",
		32: "ELotteryType_Card_Activity",
		33: "ELotteryType_Max",
	}
	ELotteryType_value = map[string]int32{
		"ELotteryType_Min":           0,
		"ELotteryType_Head":          1,
		"ELotteryType_Equip":         2,
		"ELotteryType_Card":          3,
		"ELotteryType_CatLitterBox":  4,
		"ELotteryType_Magic":         5,
		"ELotteryType_Magic_2":       6,
		"ELotteryType_Magic_3":       7,
		"ELotteryType_Ride":          8,
		"ELotteryType_MIX1":          9,
		"ELotteryType_MIX2":          10,
		"ELotteryType_MIX3":          11,
		"ELotteryType_MIX4":          12,
		"ELotteryType_Card_New":      31,
		"ELotteryType_Card_Activity": 32,
		"ELotteryType_Max":           33,
	}
)

func (x ELotteryType) Enum() *ELotteryType {
	p := new(ELotteryType)
	*p = x
	return p
}

func (x ELotteryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELotteryType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[24].Descriptor()
}

func (ELotteryType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[24]
}

func (x ELotteryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELotteryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELotteryType(num)
	return nil
}

// Deprecated: Use ELotteryType.Descriptor instead.
func (ELotteryType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{24}
}

type EMixlotteryUseCoinType int32

const (
	EMixlotteryUseCoinType_EMIXLOTTERY_USECOIN_MIN     EMixlotteryUseCoinType = 0
	EMixlotteryUseCoinType_EMIXLOTTERY_USECOIN_ONCE    EMixlotteryUseCoinType = 1
	EMixlotteryUseCoinType_ECOINLOTTERY_TYPE_TENCOMBOS EMixlotteryUseCoinType = 2
	EMixlotteryUseCoinType_EMIXLOTTERY_USECOIN_MAX     EMixlotteryUseCoinType = 3
)

// Enum value maps for EMixlotteryUseCoinType.
var (
	EMixlotteryUseCoinType_name = map[int32]string{
		0: "EMIXLOTTERY_USECOIN_MIN",
		1: "EMIXLOTTERY_USECOIN_ONCE",
		2: "ECOINLOTTERY_TYPE_TENCOMBOS",
		3: "EMIXLOTTERY_USECOIN_MAX",
	}
	EMixlotteryUseCoinType_value = map[string]int32{
		"EMIXLOTTERY_USECOIN_MIN":     0,
		"EMIXLOTTERY_USECOIN_ONCE":    1,
		"ECOINLOTTERY_TYPE_TENCOMBOS": 2,
		"EMIXLOTTERY_USECOIN_MAX":     3,
	}
)

func (x EMixlotteryUseCoinType) Enum() *EMixlotteryUseCoinType {
	p := new(EMixlotteryUseCoinType)
	*p = x
	return p
}

func (x EMixlotteryUseCoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMixlotteryUseCoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[25].Descriptor()
}

func (EMixlotteryUseCoinType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[25]
}

func (x EMixlotteryUseCoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMixlotteryUseCoinType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMixlotteryUseCoinType(num)
	return nil
}

// Deprecated: Use EMixlotteryUseCoinType.Descriptor instead.
func (EMixlotteryUseCoinType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{25}
}

type EQuotaType int32

const (
	EQuotaType_EQuotaType_NONE            EQuotaType = 0
	EQuotaType_EQuotaType_G_Charge        EQuotaType = 1
	EQuotaType_EQuotaType_C_Give          EQuotaType = 2
	EQuotaType_EQuotaType_C_Auction       EQuotaType = 3
	EQuotaType_EQuotaType_G_Auction       EQuotaType = 4
	EQuotaType_EQuotaType_C_Lottery       EQuotaType = 5
	EQuotaType_EQuotaType_C_GuildBox      EQuotaType = 6
	EQuotaType_EQuotaType_C_WeddingDress  EQuotaType = 7
	EQuotaType_EQuotaType_L_Booth         EQuotaType = 8
	EQuotaType_EQuotaType_U_Booth         EQuotaType = 9
	EQuotaType_EQuotaType_C_Booth         EQuotaType = 10
	EQuotaType_EQuotaType_L_Give_Trade    EQuotaType = 11
	EQuotaType_EQuotaType_U_Give_Trade    EQuotaType = 12
	EQuotaType_EQuotaType_C_Give_Trade    EQuotaType = 13
	EQuotaType_EQuotaType_G_Reward        EQuotaType = 14
	EQuotaType_EQuotaType_C_GuildMaterial EQuotaType = 15
	EQuotaType_EQuotaType_L_Charge        EQuotaType = 20
	EQuotaType_EQuotaType_U_Charge        EQuotaType = 21
	EQuotaType_EQuotaType_C_ChargeBack    EQuotaType = 22
)

// Enum value maps for EQuotaType.
var (
	EQuotaType_name = map[int32]string{
		0:  "EQuotaType_NONE",
		1:  "EQuotaType_G_Charge",
		2:  "EQuotaType_C_Give",
		3:  "EQuotaType_C_Auction",
		4:  "EQuotaType_G_Auction",
		5:  "EQuotaType_C_Lottery",
		6:  "EQuotaType_C_GuildBox",
		7:  "EQuotaType_C_WeddingDress",
		8:  "EQuotaType_L_Booth",
		9:  "EQuotaType_U_Booth",
		10: "EQuotaType_C_Booth",
		11: "EQuotaType_L_Give_Trade",
		12: "EQuotaType_U_Give_Trade",
		13: "EQuotaType_C_Give_Trade",
		14: "EQuotaType_G_Reward",
		15: "EQuotaType_C_GuildMaterial",
		20: "EQuotaType_L_Charge",
		21: "EQuotaType_U_Charge",
		22: "EQuotaType_C_ChargeBack",
	}
	EQuotaType_value = map[string]int32{
		"EQuotaType_NONE":            0,
		"EQuotaType_G_Charge":        1,
		"EQuotaType_C_Give":          2,
		"EQuotaType_C_Auction":       3,
		"EQuotaType_G_Auction":       4,
		"EQuotaType_C_Lottery":       5,
		"EQuotaType_C_GuildBox":      6,
		"EQuotaType_C_WeddingDress":  7,
		"EQuotaType_L_Booth":         8,
		"EQuotaType_U_Booth":         9,
		"EQuotaType_C_Booth":         10,
		"EQuotaType_L_Give_Trade":    11,
		"EQuotaType_U_Give_Trade":    12,
		"EQuotaType_C_Give_Trade":    13,
		"EQuotaType_G_Reward":        14,
		"EQuotaType_C_GuildMaterial": 15,
		"EQuotaType_L_Charge":        20,
		"EQuotaType_U_Charge":        21,
		"EQuotaType_C_ChargeBack":    22,
	}
)

func (x EQuotaType) Enum() *EQuotaType {
	p := new(EQuotaType)
	*p = x
	return p
}

func (x EQuotaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQuotaType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[26].Descriptor()
}

func (EQuotaType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[26]
}

func (x EQuotaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EQuotaType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EQuotaType(num)
	return nil
}

// Deprecated: Use EQuotaType.Descriptor instead.
func (EQuotaType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{26}
}

type EFavoriteAction int32

const (
	EFavoriteAction_EFAVORITEACTION_MIN EFavoriteAction = 0
	EFavoriteAction_EFAVORITEACTION_ADD EFavoriteAction = 1
	EFavoriteAction_EFAVORITEACTION_DEL EFavoriteAction = 2
	EFavoriteAction_EFAVORITEACTION_MAX EFavoriteAction = 3
)

// Enum value maps for EFavoriteAction.
var (
	EFavoriteAction_name = map[int32]string{
		0: "EFAVORITEACTION_MIN",
		1: "EFAVORITEACTION_ADD",
		2: "EFAVORITEACTION_DEL",
		3: "EFAVORITEACTION_MAX",
	}
	EFavoriteAction_value = map[string]int32{
		"EFAVORITEACTION_MIN": 0,
		"EFAVORITEACTION_ADD": 1,
		"EFAVORITEACTION_DEL": 2,
		"EFAVORITEACTION_MAX": 3,
	}
)

func (x EFavoriteAction) Enum() *EFavoriteAction {
	p := new(EFavoriteAction)
	*p = x
	return p
}

func (x EFavoriteAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFavoriteAction) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[27].Descriptor()
}

func (EFavoriteAction) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[27]
}

func (x EFavoriteAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFavoriteAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFavoriteAction(num)
	return nil
}

// Deprecated: Use EFavoriteAction.Descriptor instead.
func (EFavoriteAction) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{27}
}

type EGemSkillComposeType int32

const (
	EGemSkillComposeType_EGEMCOMPOSETYPE_MIN   EGemSkillComposeType = 0
	EGemSkillComposeType_EGEMCOMPOSETYPE_THREE EGemSkillComposeType = 1
	EGemSkillComposeType_EGEMCOMPOSETYPE_FIVE  EGemSkillComposeType = 2
	EGemSkillComposeType_EGEMCOMPOSETYPE_MAX   EGemSkillComposeType = 3
)

// Enum value maps for EGemSkillComposeType.
var (
	EGemSkillComposeType_name = map[int32]string{
		0: "EGEMCOMPOSETYPE_MIN",
		1: "EGEMCOMPOSETYPE_THREE",
		2: "EGEMCOMPOSETYPE_FIVE",
		3: "EGEMCOMPOSETYPE_MAX",
	}
	EGemSkillComposeType_value = map[string]int32{
		"EGEMCOMPOSETYPE_MIN":   0,
		"EGEMCOMPOSETYPE_THREE": 1,
		"EGEMCOMPOSETYPE_FIVE":  2,
		"EGEMCOMPOSETYPE_MAX":   3,
	}
)

func (x EGemSkillComposeType) Enum() *EGemSkillComposeType {
	p := new(EGemSkillComposeType)
	*p = x
	return p
}

func (x EGemSkillComposeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGemSkillComposeType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[28].Descriptor()
}

func (EGemSkillComposeType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[28]
}

func (x EGemSkillComposeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGemSkillComposeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGemSkillComposeType(num)
	return nil
}

// Deprecated: Use EGemSkillComposeType.Descriptor instead.
func (EGemSkillComposeType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{28}
}

type EGemSkillQualityType int32

const (
	EGemSkillQualityType_EGEMQUALITYTYPE_MIN EGemSkillQualityType = 0
	EGemSkillQualityType_EGEMQUALITYTYPE_B   EGemSkillQualityType = 1
	EGemSkillQualityType_EGEMQUALITYTYPE_A   EGemSkillQualityType = 2
	EGemSkillQualityType_EGEMQUALITYTYPE_S   EGemSkillQualityType = 3
	EGemSkillQualityType_EGEMQUALITYTYPE_SS  EGemSkillQualityType = 4
	EGemSkillQualityType_EGEMQUALITYTYPE_MAX EGemSkillQualityType = 5
)

// Enum value maps for EGemSkillQualityType.
var (
	EGemSkillQualityType_name = map[int32]string{
		0: "EGEMQUALITYTYPE_MIN",
		1: "EGEMQUALITYTYPE_B",
		2: "EGEMQUALITYTYPE_A",
		3: "EGEMQUALITYTYPE_S",
		4: "EGEMQUALITYTYPE_SS",
		5: "EGEMQUALITYTYPE_MAX",
	}
	EGemSkillQualityType_value = map[string]int32{
		"EGEMQUALITYTYPE_MIN": 0,
		"EGEMQUALITYTYPE_B":   1,
		"EGEMQUALITYTYPE_A":   2,
		"EGEMQUALITYTYPE_S":   3,
		"EGEMQUALITYTYPE_SS":  4,
		"EGEMQUALITYTYPE_MAX": 5,
	}
)

func (x EGemSkillQualityType) Enum() *EGemSkillQualityType {
	p := new(EGemSkillQualityType)
	*p = x
	return p
}

func (x EGemSkillQualityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGemSkillQualityType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[29].Descriptor()
}

func (EGemSkillQualityType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[29]
}

func (x EGemSkillQualityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGemSkillQualityType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGemSkillQualityType(num)
	return nil
}

// Deprecated: Use EGemSkillQualityType.Descriptor instead.
func (EGemSkillQualityType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{29}
}

type EGemType int32

const (
	EGemType_EGEMTYPE_MIN   EGemType = 0
	EGemType_EGEMTYPE_ATTR  EGemType = 1
	EGemType_EGEMTYPE_SKILL EGemType = 2
	EGemType_EGEMTYPE_MAX   EGemType = 3
)

// Enum value maps for EGemType.
var (
	EGemType_name = map[int32]string{
		0: "EGEMTYPE_MIN",
		1: "EGEMTYPE_ATTR",
		2: "EGEMTYPE_SKILL",
		3: "EGEMTYPE_MAX",
	}
	EGemType_value = map[string]int32{
		"EGEMTYPE_MIN":   0,
		"EGEMTYPE_ATTR":  1,
		"EGEMTYPE_SKILL": 2,
		"EGEMTYPE_MAX":   3,
	}
)

func (x EGemType) Enum() *EGemType {
	p := new(EGemType)
	*p = x
	return p
}

func (x EGemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGemType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[30].Descriptor()
}

func (EGemType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[30]
}

func (x EGemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGemType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGemType(num)
	return nil
}

// Deprecated: Use EGemType.Descriptor instead.
func (EGemType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{30}
}

type PersonalArtifactRemouldType int32

const (
	PersonalArtifactRemouldType_PERSONALARTIFACT_REMOULD_TYPE_MIN      PersonalArtifactRemouldType = 0
	PersonalArtifactRemouldType_PERSONALARTIFACT_REMOULD_TYPE_FREE     PersonalArtifactRemouldType = 1
	PersonalArtifactRemouldType_PERSONALARTIFACT_REMOULD_TYPE_PAY      PersonalArtifactRemouldType = 2
	PersonalArtifactRemouldType_PERSONALARTIFACT_REMOULD_TYPE_PAY_TEN  PersonalArtifactRemouldType = 3
	PersonalArtifactRemouldType_PERSONALARTIFACT_REMOULD_TYPE_FREE_TEN PersonalArtifactRemouldType = 4
)

// Enum value maps for PersonalArtifactRemouldType.
var (
	PersonalArtifactRemouldType_name = map[int32]string{
		0: "PERSONALARTIFACT_REMOULD_TYPE_MIN",
		1: "PERSONALARTIFACT_REMOULD_TYPE_FREE",
		2: "PERSONALARTIFACT_REMOULD_TYPE_PAY",
		3: "PERSONALARTIFACT_REMOULD_TYPE_PAY_TEN",
		4: "PERSONALARTIFACT_REMOULD_TYPE_FREE_TEN",
	}
	PersonalArtifactRemouldType_value = map[string]int32{
		"PERSONALARTIFACT_REMOULD_TYPE_MIN":      0,
		"PERSONALARTIFACT_REMOULD_TYPE_FREE":     1,
		"PERSONALARTIFACT_REMOULD_TYPE_PAY":      2,
		"PERSONALARTIFACT_REMOULD_TYPE_PAY_TEN":  3,
		"PERSONALARTIFACT_REMOULD_TYPE_FREE_TEN": 4,
	}
)

func (x PersonalArtifactRemouldType) Enum() *PersonalArtifactRemouldType {
	p := new(PersonalArtifactRemouldType)
	*p = x
	return p
}

func (x PersonalArtifactRemouldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PersonalArtifactRemouldType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[31].Descriptor()
}

func (PersonalArtifactRemouldType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[31]
}

func (x PersonalArtifactRemouldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PersonalArtifactRemouldType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PersonalArtifactRemouldType(num)
	return nil
}

// Deprecated: Use PersonalArtifactRemouldType.Descriptor instead.
func (PersonalArtifactRemouldType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{31}
}

type EPackMailType int32

const (
	EPackMailType_EPACKMAILTYPE_MIN                         EPackMailType = 0
	EPackMailType_EPACKMAILTYPE_TOWER                       EPackMailType = 1
	EPackMailType_EPACKMAILTYPE_GUILDRAID                   EPackMailType = 2
	EPackMailType_EPACKMAILTYPE_THANATOS                    EPackMailType = 3
	EPackMailType_EPACKMAILTYPE_PVECARD                     EPackMailType = 4
	EPackMailType_EPACKMAILTYPE_MVP_BATTLE                  EPackMailType = 5
	EPackMailType_EPACKMAILTYPE_CAPRA_BATTLE                EPackMailType = 6
	EPackMailType_EPACKMAILTYPE_GVG                         EPackMailType = 7
	EPackMailType_EPACKMAILTYPE_SUPER_GVG                   EPackMailType = 8
	EPackMailType_EPACKMAILTYPE_LAB                         EPackMailType = 9
	EPackMailType_EPACKMAILTYPE_SEAL                        EPackMailType = 10
	EPackMailType_EPACKMAILTYPE_AFK                         EPackMailType = 11
	EPackMailType_EPACKMAILTYPE_RAIDDEADBOSS                EPackMailType = 12
	EPackMailType_EPACKMAILTYPE_HEADWEAR                    EPackMailType = 13
	EPackMailType_EPACKMAILTYPE_PET_WORK                    EPackMailType = 14
	EPackMailType_EPACKMAILTYPE_PET_ADVENTURE               EPackMailType = 15
	EPackMailType_EPACKMAILTYPE_BATTLEPASS                  EPackMailType = 16
	EPackMailType_EPACKMAILTYPE_POLLY                       EPackMailType = 17
	EPackMailType_EPACKMAILTYPE_OTHER                       EPackMailType = 18
	EPackMailType_EPACKMAILTYPE_HITPOLLY                    EPackMailType = 19
	EPackMailType_EPACKMAILTYPE_PUZZLE                      EPackMailType = 20
	EPackMailType_EPACKMAILTYPE_ACTMINIRO                   EPackMailType = 21
	EPackMailType_EPACKMAILTYPE_USERINVITE                  EPackMailType = 22
	EPackMailType_EPACKMAILTYPE_SHOP_FURNITURE              EPackMailType = 23
	EPackMailType_EPACKMAILTYPE_ROGUELIKE                   EPackMailType = 24
	EPackMailType_EPACKMAILTYPE_COMODO_TEAM                 EPackMailType = 25
	EPackMailType_EPACKMAILTYPE_SEVEN_ROYAL                 EPackMailType = 26
	EPackMailType_EPACKMAILTYPE_FESTIVALSIGNIN_SPECIALAWARD EPackMailType = 27
	EPackMailType_EPACKMAILTYPE_CRACK                       EPackMailType = 28
	EPackMailType_EPACKMAILTYPE_STORM_BOSS                  EPackMailType = 29
	EPackMailType_EPACKMAILTYPE_MAX                         EPackMailType = 30
)

// Enum value maps for EPackMailType.
var (
	EPackMailType_name = map[int32]string{
		0:  "EPACKMAILTYPE_MIN",
		1:  "EPACKMAILTYPE_TOWER",
		2:  "EPACKMAILTYPE_GUILDRAID",
		3:  "EPACKMAILTYPE_THANATOS",
		4:  "EPACKMAILTYPE_PVECARD",
		5:  "EPACKMAILTYPE_MVP_BATTLE",
		6:  "EPACKMAILTYPE_CAPRA_BATTLE",
		7:  "EPACKMAILTYPE_GVG",
		8:  "EPACKMAILTYPE_SUPER_GVG",
		9:  "EPACKMAILTYPE_LAB",
		10: "EPACKMAILTYPE_SEAL",
		11: "EPACKMAILTYPE_AFK",
		12: "EPACKMAILTYPE_RAIDDEADBOSS",
		13: "EPACKMAILTYPE_HEADWEAR",
		14: "EPACKMAILTYPE_PET_WORK",
		15: "EPACKMAILTYPE_PET_ADVENTURE",
		16: "EPACKMAILTYPE_BATTLEPASS",
		17: "EPACKMAILTYPE_POLLY",
		18: "EPACKMAILTYPE_OTHER",
		19: "EPACKMAILTYPE_HITPOLLY",
		20: "EPACKMAILTYPE_PUZZLE",
		21: "EPACKMAILTYPE_ACTMINIRO",
		22: "EPACKMAILTYPE_USERINVITE",
		23: "EPACKMAILTYPE_SHOP_FURNITURE",
		24: "EPACKMAILTYPE_ROGUELIKE",
		25: "EPACKMAILTYPE_COMODO_TEAM",
		26: "EPACKMAILTYPE_SEVEN_ROYAL",
		27: "EPACKMAILTYPE_FESTIVALSIGNIN_SPECIALAWARD",
		28: "EPACKMAILTYPE_CRACK",
		29: "EPACKMAILTYPE_STORM_BOSS",
		30: "EPACKMAILTYPE_MAX",
	}
	EPackMailType_value = map[string]int32{
		"EPACKMAILTYPE_MIN":                         0,
		"EPACKMAILTYPE_TOWER":                       1,
		"EPACKMAILTYPE_GUILDRAID":                   2,
		"EPACKMAILTYPE_THANATOS":                    3,
		"EPACKMAILTYPE_PVECARD":                     4,
		"EPACKMAILTYPE_MVP_BATTLE":                  5,
		"EPACKMAILTYPE_CAPRA_BATTLE":                6,
		"EPACKMAILTYPE_GVG":                         7,
		"EPACKMAILTYPE_SUPER_GVG":                   8,
		"EPACKMAILTYPE_LAB":                         9,
		"EPACKMAILTYPE_SEAL":                        10,
		"EPACKMAILTYPE_AFK":                         11,
		"EPACKMAILTYPE_RAIDDEADBOSS":                12,
		"EPACKMAILTYPE_HEADWEAR":                    13,
		"EPACKMAILTYPE_PET_WORK":                    14,
		"EPACKMAILTYPE_PET_ADVENTURE":               15,
		"EPACKMAILTYPE_BATTLEPASS":                  16,
		"EPACKMAILTYPE_POLLY":                       17,
		"EPACKMAILTYPE_OTHER":                       18,
		"EPACKMAILTYPE_HITPOLLY":                    19,
		"EPACKMAILTYPE_PUZZLE":                      20,
		"EPACKMAILTYPE_ACTMINIRO":                   21,
		"EPACKMAILTYPE_USERINVITE":                  22,
		"EPACKMAILTYPE_SHOP_FURNITURE":              23,
		"EPACKMAILTYPE_ROGUELIKE":                   24,
		"EPACKMAILTYPE_COMODO_TEAM":                 25,
		"EPACKMAILTYPE_SEVEN_ROYAL":                 26,
		"EPACKMAILTYPE_FESTIVALSIGNIN_SPECIALAWARD": 27,
		"EPACKMAILTYPE_CRACK":                       28,
		"EPACKMAILTYPE_STORM_BOSS":                  29,
		"EPACKMAILTYPE_MAX":                         30,
	}
)

func (x EPackMailType) Enum() *EPackMailType {
	p := new(EPackMailType)
	*p = x
	return p
}

func (x EPackMailType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPackMailType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[32].Descriptor()
}

func (EPackMailType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[32]
}

func (x EPackMailType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPackMailType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPackMailType(num)
	return nil
}

// Deprecated: Use EPackMailType.Descriptor instead.
func (EPackMailType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{32}
}

type EPackMailStatus int32

const (
	EPackMailStatus_EPACKMAILSTATUS_MIN  EPackMailStatus = 1
	EPackMailStatus_EPACKMAILSTATUS_NEW  EPackMailStatus = 2
	EPackMailStatus_EPACKMAILSTATUS_READ EPackMailStatus = 3
	EPackMailStatus_EPACKMAILSTATUS_MAX  EPackMailStatus = 4
)

// Enum value maps for EPackMailStatus.
var (
	EPackMailStatus_name = map[int32]string{
		1: "EPACKMAILSTATUS_MIN",
		2: "EPACKMAILSTATUS_NEW",
		3: "EPACKMAILSTATUS_READ",
		4: "EPACKMAILSTATUS_MAX",
	}
	EPackMailStatus_value = map[string]int32{
		"EPACKMAILSTATUS_MIN":  1,
		"EPACKMAILSTATUS_NEW":  2,
		"EPACKMAILSTATUS_READ": 3,
		"EPACKMAILSTATUS_MAX":  4,
	}
)

func (x EPackMailStatus) Enum() *EPackMailStatus {
	p := new(EPackMailStatus)
	*p = x
	return p
}

func (x EPackMailStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPackMailStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[33].Descriptor()
}

func (EPackMailStatus) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[33]
}

func (x EPackMailStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPackMailStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPackMailStatus(num)
	return nil
}

// Deprecated: Use EPackMailStatus.Descriptor instead.
func (EPackMailStatus) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{33}
}

type EPackMailAction int32

const (
	EPackMailAction_EPACKMAILACTION_MIN  EPackMailAction = 1
	EPackMailAction_EPACKMAILACTION_READ EPackMailAction = 2
	EPackMailAction_EPACKMAILACTION_GET  EPackMailAction = 3
	EPackMailAction_EPACKMAILACTION_SELL EPackMailAction = 4
	EPackMailAction_EPACKMAILACTION_MAX  EPackMailAction = 5
)

// Enum value maps for EPackMailAction.
var (
	EPackMailAction_name = map[int32]string{
		1: "EPACKMAILACTION_MIN",
		2: "EPACKMAILACTION_READ",
		3: "EPACKMAILACTION_GET",
		4: "EPACKMAILACTION_SELL",
		5: "EPACKMAILACTION_MAX",
	}
	EPackMailAction_value = map[string]int32{
		"EPACKMAILACTION_MIN":  1,
		"EPACKMAILACTION_READ": 2,
		"EPACKMAILACTION_GET":  3,
		"EPACKMAILACTION_SELL": 4,
		"EPACKMAILACTION_MAX":  5,
	}
)

func (x EPackMailAction) Enum() *EPackMailAction {
	p := new(EPackMailAction)
	*p = x
	return p
}

func (x EPackMailAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPackMailAction) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[34].Descriptor()
}

func (EPackMailAction) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[34]
}

func (x EPackMailAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPackMailAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPackMailAction(num)
	return nil
}

// Deprecated: Use EPackMailAction.Descriptor instead.
func (EPackMailAction) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{34}
}

type EFavoriteDesireType int32

const (
	EFavoriteDesireType_EFAVORITEDESIRE_TYPE_MIN                EFavoriteDesireType = 0
	EFavoriteDesireType_EFAVORITEDESIRE_TYPE_LEVELUP            EFavoriteDesireType = 1
	EFavoriteDesireType_EFAVORITEDESIRE_TYPE_ITEM_ADD           EFavoriteDesireType = 2
	EFavoriteDesireType_EFAVORITEDESIRE_TYPE_LOVE_ITEM_ADD      EFavoriteDesireType = 3
	EFavoriteDesireType_EFAVORITEDESIRE_TYPE_LOGIN              EFavoriteDesireType = 4
	EFavoriteDesireType_EFAVORITEDESIRE_TYPE_ITEM_ADD_ONCE      EFavoriteDesireType = 5
	EFavoriteDesireType_EFAVORITEDESIRE_TYPE_LOVE_ITEM_ADD_ONCE EFavoriteDesireType = 6
	EFavoriteDesireType_EFAVORITEDESIRE_TYPE_CLICK_TIMES        EFavoriteDesireType = 7
	EFavoriteDesireType_EFAVORITEDESIRE_TYPE_DESIRE_TIMES       EFavoriteDesireType = 8
)

// Enum value maps for EFavoriteDesireType.
var (
	EFavoriteDesireType_name = map[int32]string{
		0: "EFAVORITEDESIRE_TYPE_MIN",
		1: "EFAVORITEDESIRE_TYPE_LEVELUP",
		2: "EFAVORITEDESIRE_TYPE_ITEM_ADD",
		3: "EFAVORITEDESIRE_TYPE_LOVE_ITEM_ADD",
		4: "EFAVORITEDESIRE_TYPE_LOGIN",
		5: "EFAVORITEDESIRE_TYPE_ITEM_ADD_ONCE",
		6: "EFAVORITEDESIRE_TYPE_LOVE_ITEM_ADD_ONCE",
		7: "EFAVORITEDESIRE_TYPE_CLICK_TIMES",
		8: "EFAVORITEDESIRE_TYPE_DESIRE_TIMES",
	}
	EFavoriteDesireType_value = map[string]int32{
		"EFAVORITEDESIRE_TYPE_MIN":                0,
		"EFAVORITEDESIRE_TYPE_LEVELUP":            1,
		"EFAVORITEDESIRE_TYPE_ITEM_ADD":           2,
		"EFAVORITEDESIRE_TYPE_LOVE_ITEM_ADD":      3,
		"EFAVORITEDESIRE_TYPE_LOGIN":              4,
		"EFAVORITEDESIRE_TYPE_ITEM_ADD_ONCE":      5,
		"EFAVORITEDESIRE_TYPE_LOVE_ITEM_ADD_ONCE": 6,
		"EFAVORITEDESIRE_TYPE_CLICK_TIMES":        7,
		"EFAVORITEDESIRE_TYPE_DESIRE_TIMES":       8,
	}
)

func (x EFavoriteDesireType) Enum() *EFavoriteDesireType {
	p := new(EFavoriteDesireType)
	*p = x
	return p
}

func (x EFavoriteDesireType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFavoriteDesireType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[35].Descriptor()
}

func (EFavoriteDesireType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[35]
}

func (x EFavoriteDesireType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFavoriteDesireType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFavoriteDesireType(num)
	return nil
}

// Deprecated: Use EFavoriteDesireType.Descriptor instead.
func (EFavoriteDesireType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{35}
}

type EAfricanPoringStatus int32

const (
	EAfricanPoringStatus_EAFRICANPORINGSTATUS_MIN    EAfricanPoringStatus = 0
	EAfricanPoringStatus_EAFRICANPORINGSTATUS_UNINIT EAfricanPoringStatus = 1
	EAfricanPoringStatus_EAFRICANPORINGSTATUS_INIT   EAfricanPoringStatus = 2
	EAfricanPoringStatus_EAFRICANPORINGSTATUS_FAIL   EAfricanPoringStatus = 3
	EAfricanPoringStatus_EAFRICANPORINGSTATUS_FINISH EAfricanPoringStatus = 4
	EAfricanPoringStatus_EAFRICANPORINGSTATUS_MAX    EAfricanPoringStatus = 5
)

// Enum value maps for EAfricanPoringStatus.
var (
	EAfricanPoringStatus_name = map[int32]string{
		0: "EAFRICANPORINGSTATUS_MIN",
		1: "EAFRICANPORINGSTATUS_UNINIT",
		2: "EAFRICANPORINGSTATUS_INIT",
		3: "EAFRICANPORINGSTATUS_FAIL",
		4: "EAFRICANPORINGSTATUS_FINISH",
		5: "EAFRICANPORINGSTATUS_MAX",
	}
	EAfricanPoringStatus_value = map[string]int32{
		"EAFRICANPORINGSTATUS_MIN":    0,
		"EAFRICANPORINGSTATUS_UNINIT": 1,
		"EAFRICANPORINGSTATUS_INIT":   2,
		"EAFRICANPORINGSTATUS_FAIL":   3,
		"EAFRICANPORINGSTATUS_FINISH": 4,
		"EAFRICANPORINGSTATUS_MAX":    5,
	}
)

func (x EAfricanPoringStatus) Enum() *EAfricanPoringStatus {
	p := new(EAfricanPoringStatus)
	*p = x
	return p
}

func (x EAfricanPoringStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAfricanPoringStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[36].Descriptor()
}

func (EAfricanPoringStatus) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[36]
}

func (x EAfricanPoringStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAfricanPoringStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAfricanPoringStatus(num)
	return nil
}

// Deprecated: Use EAfricanPoringStatus.Descriptor instead.
func (EAfricanPoringStatus) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{36}
}

type EAfricanPoringPosStatus int32

const (
	EAfricanPoringPosStatus_EAFRICANPORINGPOSSTATUS_MIN    EAfricanPoringPosStatus = 0
	EAfricanPoringPosStatus_EAFRICANPORINGPOSSTATUS_UNDRAW EAfricanPoringPosStatus = 1
	EAfricanPoringPosStatus_EAFRICANPORINGPOSSTATUS_DRAW   EAfricanPoringPosStatus = 2
	EAfricanPoringPosStatus_EAFRICANPORINGPOSSTATUS_MAX    EAfricanPoringPosStatus = 3
)

// Enum value maps for EAfricanPoringPosStatus.
var (
	EAfricanPoringPosStatus_name = map[int32]string{
		0: "EAFRICANPORINGPOSSTATUS_MIN",
		1: "EAFRICANPORINGPOSSTATUS_UNDRAW",
		2: "EAFRICANPORINGPOSSTATUS_DRAW",
		3: "EAFRICANPORINGPOSSTATUS_MAX",
	}
	EAfricanPoringPosStatus_value = map[string]int32{
		"EAFRICANPORINGPOSSTATUS_MIN":    0,
		"EAFRICANPORINGPOSSTATUS_UNDRAW": 1,
		"EAFRICANPORINGPOSSTATUS_DRAW":   2,
		"EAFRICANPORINGPOSSTATUS_MAX":    3,
	}
)

func (x EAfricanPoringPosStatus) Enum() *EAfricanPoringPosStatus {
	p := new(EAfricanPoringPosStatus)
	*p = x
	return p
}

func (x EAfricanPoringPosStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAfricanPoringPosStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[37].Descriptor()
}

func (EAfricanPoringPosStatus) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[37]
}

func (x EAfricanPoringPosStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAfricanPoringPosStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAfricanPoringPosStatus(num)
	return nil
}

// Deprecated: Use EAfricanPoringPosStatus.Descriptor instead.
func (EAfricanPoringPosStatus) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{37}
}

type EAfricanPoring int32

const (
	EAfricanPoring_EAFRICANPORING_MIN      EAfricanPoring = 0
	EAfricanPoring_EAFRICANPORING_RESET    EAfricanPoring = 1
	EAfricanPoring_EAFRICANPORING_NORMAL   EAfricanPoring = 2
	EAfricanPoring_EAFRICANPORING_SECURITY EAfricanPoring = 3
	EAfricanPoring_EAFRICANPORING_MAX      EAfricanPoring = 4
)

// Enum value maps for EAfricanPoring.
var (
	EAfricanPoring_name = map[int32]string{
		0: "EAFRICANPORING_MIN",
		1: "EAFRICANPORING_RESET",
		2: "EAFRICANPORING_NORMAL",
		3: "EAFRICANPORING_SECURITY",
		4: "EAFRICANPORING_MAX",
	}
	EAfricanPoring_value = map[string]int32{
		"EAFRICANPORING_MIN":      0,
		"EAFRICANPORING_RESET":    1,
		"EAFRICANPORING_NORMAL":   2,
		"EAFRICANPORING_SECURITY": 3,
		"EAFRICANPORING_MAX":      4,
	}
)

func (x EAfricanPoring) Enum() *EAfricanPoring {
	p := new(EAfricanPoring)
	*p = x
	return p
}

func (x EAfricanPoring) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAfricanPoring) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[38].Descriptor()
}

func (EAfricanPoring) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[38]
}

func (x EAfricanPoring) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAfricanPoring) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAfricanPoring(num)
	return nil
}

// Deprecated: Use EAfricanPoring.Descriptor instead.
func (EAfricanPoring) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{38}
}

type ItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid            *string       `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	Id              *uint32       `protobuf:"varint,2,opt,name=id,def=0" json:"id,omitempty"`
	Count           *uint32       `protobuf:"varint,3,opt,name=count,def=1" json:"count,omitempty"`
	Index           *uint32       `protobuf:"varint,4,opt,name=index,def=0" json:"index,omitempty"`
	Createtime      *uint32       `protobuf:"varint,5,opt,name=createtime,def=0" json:"createtime,omitempty"`
	Cd              *uint64       `protobuf:"varint,6,opt,name=cd,def=0" json:"cd,omitempty"`
	Type            *EItemType    `protobuf:"varint,7,opt,name=type,enum=Cmd.EItemType,def=0" json:"type,omitempty"`
	Bind            *EBindType    `protobuf:"varint,8,opt,name=bind,enum=Cmd.EBindType,def=0" json:"bind,omitempty"`
	Expire          *EExpireType  `protobuf:"varint,9,opt,name=expire,enum=Cmd.EExpireType,def=0" json:"expire,omitempty"`
	Quality         *EQualityType `protobuf:"varint,10,opt,name=quality,enum=Cmd.EQualityType,def=0" json:"quality,omitempty"`
	EquipType       *EEquipType   `protobuf:"varint,11,opt,name=equipType,enum=Cmd.EEquipType,def=0" json:"equipType,omitempty"`
	Source          *ESource      `protobuf:"varint,12,opt,name=source,enum=Cmd.ESource,def=1" json:"source,omitempty"`
	Isnew           *bool         `protobuf:"varint,13,opt,name=isnew,def=0" json:"isnew,omitempty"`
	Maxcardslot     *uint32       `protobuf:"varint,14,opt,name=maxcardslot,def=0" json:"maxcardslot,omitempty"`
	Ishint          *bool         `protobuf:"varint,15,opt,name=ishint,def=0" json:"ishint,omitempty"`
	Isactive        *bool         `protobuf:"varint,16,opt,name=isactive,def=0" json:"isactive,omitempty"`
	SourceNpc       *uint32       `protobuf:"varint,17,opt,name=source_npc,json=sourceNpc,def=0" json:"source_npc,omitempty"`
	Refinelv        *uint32       `protobuf:"varint,18,opt,name=refinelv,def=0" json:"refinelv,omitempty"`
	Chargemoney     *uint32       `protobuf:"varint,19,opt,name=chargemoney,def=0" json:"chargemoney,omitempty"`
	Overtime        *uint32       `protobuf:"varint,20,opt,name=overtime,def=0" json:"overtime,omitempty"`
	Quota           *uint64       `protobuf:"varint,21,opt,name=quota,def=0" json:"quota,omitempty"`
	Usedtimes       *uint32       `protobuf:"varint,22,opt,name=usedtimes,def=0" json:"usedtimes,omitempty"`
	Usedtime        *uint32       `protobuf:"varint,23,opt,name=usedtime,def=0" json:"usedtime,omitempty"`
	Isfavorite      *bool         `protobuf:"varint,24,opt,name=isfavorite,def=0" json:"isfavorite,omitempty"`
	Mailhint        []uint32      `protobuf:"varint,25,rep,name=mailhint" json:"mailhint,omitempty"`
	Subsource       *ESubSource   `protobuf:"varint,26,opt,name=subsource,enum=Cmd.ESubSource,def=0" json:"subsource,omitempty"`
	Randkey         *uint32       `protobuf:"varint,27,opt,name=randkey" json:"randkey,omitempty"`
	Sceneinfo       *string       `protobuf:"bytes,28,opt,name=sceneinfo" json:"sceneinfo,omitempty"`
	LocalCharge     *float32      `protobuf:"fixed32,29,opt,name=local_charge,json=localCharge" json:"local_charge,omitempty"`
	ChargeDepositId *uint32       `protobuf:"varint,30,opt,name=charge_deposit_id,json=chargeDepositId" json:"charge_deposit_id,omitempty"`
	Issplit         *bool         `protobuf:"varint,31,opt,name=issplit" json:"issplit,omitempty"`
}

// Default values for ItemInfo fields.
const (
	Default_ItemInfo_Id          = uint32(0)
	Default_ItemInfo_Count       = uint32(1)
	Default_ItemInfo_Index       = uint32(0)
	Default_ItemInfo_Createtime  = uint32(0)
	Default_ItemInfo_Cd          = uint64(0)
	Default_ItemInfo_Type        = EItemType_EITEMTYPE_MIN
	Default_ItemInfo_Bind        = EBindType_EBINDTYPE_MIN
	Default_ItemInfo_Expire      = EExpireType_EEXPIRETYPE_MIN
	Default_ItemInfo_Quality     = EQualityType_EQUALITYTYPE_MIN
	Default_ItemInfo_EquipType   = EEquipType_EEQUIPTYPE_MIN
	Default_ItemInfo_Source      = ESource_ESOURCE_NORMAL
	Default_ItemInfo_Isnew       = bool(false)
	Default_ItemInfo_Maxcardslot = uint32(0)
	Default_ItemInfo_Ishint      = bool(false)
	Default_ItemInfo_Isactive    = bool(false)
	Default_ItemInfo_SourceNpc   = uint32(0)
	Default_ItemInfo_Refinelv    = uint32(0)
	Default_ItemInfo_Chargemoney = uint32(0)
	Default_ItemInfo_Overtime    = uint32(0)
	Default_ItemInfo_Quota       = uint64(0)
	Default_ItemInfo_Usedtimes   = uint32(0)
	Default_ItemInfo_Usedtime    = uint32(0)
	Default_ItemInfo_Isfavorite  = bool(false)
	Default_ItemInfo_Subsource   = ESubSource_ESUBSOURCE_MIN
)

func (x *ItemInfo) Reset() {
	*x = ItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemInfo) ProtoMessage() {}

func (x *ItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemInfo.ProtoReflect.Descriptor instead.
func (*ItemInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{0}
}

func (x *ItemInfo) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *ItemInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_ItemInfo_Id
}

func (x *ItemInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_ItemInfo_Count
}

func (x *ItemInfo) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_ItemInfo_Index
}

func (x *ItemInfo) GetCreatetime() uint32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return Default_ItemInfo_Createtime
}

func (x *ItemInfo) GetCd() uint64 {
	if x != nil && x.Cd != nil {
		return *x.Cd
	}
	return Default_ItemInfo_Cd
}

func (x *ItemInfo) GetType() EItemType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ItemInfo_Type
}

func (x *ItemInfo) GetBind() EBindType {
	if x != nil && x.Bind != nil {
		return *x.Bind
	}
	return Default_ItemInfo_Bind
}

func (x *ItemInfo) GetExpire() EExpireType {
	if x != nil && x.Expire != nil {
		return *x.Expire
	}
	return Default_ItemInfo_Expire
}

func (x *ItemInfo) GetQuality() EQualityType {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return Default_ItemInfo_Quality
}

func (x *ItemInfo) GetEquipType() EEquipType {
	if x != nil && x.EquipType != nil {
		return *x.EquipType
	}
	return Default_ItemInfo_EquipType
}

func (x *ItemInfo) GetSource() ESource {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return Default_ItemInfo_Source
}

func (x *ItemInfo) GetIsnew() bool {
	if x != nil && x.Isnew != nil {
		return *x.Isnew
	}
	return Default_ItemInfo_Isnew
}

func (x *ItemInfo) GetMaxcardslot() uint32 {
	if x != nil && x.Maxcardslot != nil {
		return *x.Maxcardslot
	}
	return Default_ItemInfo_Maxcardslot
}

func (x *ItemInfo) GetIshint() bool {
	if x != nil && x.Ishint != nil {
		return *x.Ishint
	}
	return Default_ItemInfo_Ishint
}

func (x *ItemInfo) GetIsactive() bool {
	if x != nil && x.Isactive != nil {
		return *x.Isactive
	}
	return Default_ItemInfo_Isactive
}

func (x *ItemInfo) GetSourceNpc() uint32 {
	if x != nil && x.SourceNpc != nil {
		return *x.SourceNpc
	}
	return Default_ItemInfo_SourceNpc
}

func (x *ItemInfo) GetRefinelv() uint32 {
	if x != nil && x.Refinelv != nil {
		return *x.Refinelv
	}
	return Default_ItemInfo_Refinelv
}

func (x *ItemInfo) GetChargemoney() uint32 {
	if x != nil && x.Chargemoney != nil {
		return *x.Chargemoney
	}
	return Default_ItemInfo_Chargemoney
}

func (x *ItemInfo) GetOvertime() uint32 {
	if x != nil && x.Overtime != nil {
		return *x.Overtime
	}
	return Default_ItemInfo_Overtime
}

func (x *ItemInfo) GetQuota() uint64 {
	if x != nil && x.Quota != nil {
		return *x.Quota
	}
	return Default_ItemInfo_Quota
}

func (x *ItemInfo) GetUsedtimes() uint32 {
	if x != nil && x.Usedtimes != nil {
		return *x.Usedtimes
	}
	return Default_ItemInfo_Usedtimes
}

func (x *ItemInfo) GetUsedtime() uint32 {
	if x != nil && x.Usedtime != nil {
		return *x.Usedtime
	}
	return Default_ItemInfo_Usedtime
}

func (x *ItemInfo) GetIsfavorite() bool {
	if x != nil && x.Isfavorite != nil {
		return *x.Isfavorite
	}
	return Default_ItemInfo_Isfavorite
}

func (x *ItemInfo) GetMailhint() []uint32 {
	if x != nil {
		return x.Mailhint
	}
	return nil
}

func (x *ItemInfo) GetSubsource() ESubSource {
	if x != nil && x.Subsource != nil {
		return *x.Subsource
	}
	return Default_ItemInfo_Subsource
}

func (x *ItemInfo) GetRandkey() uint32 {
	if x != nil && x.Randkey != nil {
		return *x.Randkey
	}
	return 0
}

func (x *ItemInfo) GetSceneinfo() string {
	if x != nil && x.Sceneinfo != nil {
		return *x.Sceneinfo
	}
	return ""
}

func (x *ItemInfo) GetLocalCharge() float32 {
	if x != nil && x.LocalCharge != nil {
		return *x.LocalCharge
	}
	return 0
}

func (x *ItemInfo) GetChargeDepositId() uint32 {
	if x != nil && x.ChargeDepositId != nil {
		return *x.ChargeDepositId
	}
	return 0
}

func (x *ItemInfo) GetIssplit() bool {
	if x != nil && x.Issplit != nil {
		return *x.Issplit
	}
	return false
}

type RefineCompose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Num *uint32 `protobuf:"varint,2,opt,name=num,def=0" json:"num,omitempty"`
}

// Default values for RefineCompose fields.
const (
	Default_RefineCompose_Id  = uint32(0)
	Default_RefineCompose_Num = uint32(0)
)

func (x *RefineCompose) Reset() {
	*x = RefineCompose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefineCompose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefineCompose) ProtoMessage() {}

func (x *RefineCompose) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefineCompose.ProtoReflect.Descriptor instead.
func (*RefineCompose) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{1}
}

func (x *RefineCompose) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_RefineCompose_Id
}

func (x *RefineCompose) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return Default_RefineCompose_Num
}

type EquipAttrRefreshTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormulaId   *uint32 `protobuf:"varint,1,opt,name=formula_id,json=formulaId" json:"formula_id,omitempty"`
	RefreshTime *uint32 `protobuf:"varint,2,opt,name=refresh_time,json=refreshTime" json:"refresh_time,omitempty"`
}

func (x *EquipAttrRefreshTime) Reset() {
	*x = EquipAttrRefreshTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipAttrRefreshTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipAttrRefreshTime) ProtoMessage() {}

func (x *EquipAttrRefreshTime) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipAttrRefreshTime.ProtoReflect.Descriptor instead.
func (*EquipAttrRefreshTime) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{2}
}

func (x *EquipAttrRefreshTime) GetFormulaId() uint32 {
	if x != nil && x.FormulaId != nil {
		return *x.FormulaId
	}
	return 0
}

func (x *EquipAttrRefreshTime) GetRefreshTime() uint32 {
	if x != nil && x.RefreshTime != nil {
		return *x.RefreshTime
	}
	return 0
}

type EquipAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *uint32                 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Value *int32                  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Times []*EquipAttrRefreshTime `protobuf:"bytes,3,rep,name=times" json:"times,omitempty"`
}

func (x *EquipAttr) Reset() {
	*x = EquipAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipAttr) ProtoMessage() {}

func (x *EquipAttr) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipAttr.ProtoReflect.Descriptor instead.
func (*EquipAttr) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{3}
}

func (x *EquipAttr) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *EquipAttr) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *EquipAttr) GetTimes() []*EquipAttrRefreshTime {
	if x != nil {
		return x.Times
	}
	return nil
}

type EquipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strengthlv       *uint32          `protobuf:"varint,1,opt,name=strengthlv,def=0" json:"strengthlv,omitempty"`
	Refinelv         *uint32          `protobuf:"varint,2,opt,name=refinelv,def=0" json:"refinelv,omitempty"`
	StrengthCost     *uint32          `protobuf:"varint,3,opt,name=strengthCost,def=0" json:"strengthCost,omitempty"`
	RefineCompose    []*RefineCompose `protobuf:"bytes,4,rep,name=refineCompose" json:"refineCompose,omitempty"`
	Cardslot         *uint32          `protobuf:"varint,5,opt,name=cardslot,def=0" json:"cardslot,omitempty"`
	Buffid           []uint32         `protobuf:"varint,6,rep,name=buffid" json:"buffid,omitempty"`
	Damage           *bool            `protobuf:"varint,7,opt,name=damage,def=0" json:"damage,omitempty"`
	Lv               *uint32          `protobuf:"varint,8,opt,name=lv,def=0" json:"lv,omitempty"`
	Color            *uint32          `protobuf:"varint,9,opt,name=color,def=0" json:"color,omitempty"`
	Breakstarttime   *uint32          `protobuf:"varint,10,opt,name=breakstarttime,def=0" json:"breakstarttime,omitempty"`
	Breakendtime     *uint32          `protobuf:"varint,11,opt,name=breakendtime,def=0" json:"breakendtime,omitempty"`
	Strengthlv2      *uint32          `protobuf:"varint,12,opt,name=strengthlv2,def=0" json:"strengthlv2,omitempty"`
	Strengthlv2Cost  []*ItemInfo      `protobuf:"bytes,13,rep,name=strengthlv2cost" json:"strengthlv2cost,omitempty"`
	Attrs            []*EquipAttr     `protobuf:"bytes,16,rep,name=attrs" json:"attrs,omitempty"`
	ExtraRefineValue *uint32          `protobuf:"varint,17,opt,name=extra_refine_value,json=extraRefineValue" json:"extra_refine_value,omitempty"`
}

// Default values for EquipData fields.
const (
	Default_EquipData_Strengthlv     = uint32(0)
	Default_EquipData_Refinelv       = uint32(0)
	Default_EquipData_StrengthCost   = uint32(0)
	Default_EquipData_Cardslot       = uint32(0)
	Default_EquipData_Damage         = bool(false)
	Default_EquipData_Lv             = uint32(0)
	Default_EquipData_Color          = uint32(0)
	Default_EquipData_Breakstarttime = uint32(0)
	Default_EquipData_Breakendtime   = uint32(0)
	Default_EquipData_Strengthlv2    = uint32(0)
)

func (x *EquipData) Reset() {
	*x = EquipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipData) ProtoMessage() {}

func (x *EquipData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipData.ProtoReflect.Descriptor instead.
func (*EquipData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{4}
}

func (x *EquipData) GetStrengthlv() uint32 {
	if x != nil && x.Strengthlv != nil {
		return *x.Strengthlv
	}
	return Default_EquipData_Strengthlv
}

func (x *EquipData) GetRefinelv() uint32 {
	if x != nil && x.Refinelv != nil {
		return *x.Refinelv
	}
	return Default_EquipData_Refinelv
}

func (x *EquipData) GetStrengthCost() uint32 {
	if x != nil && x.StrengthCost != nil {
		return *x.StrengthCost
	}
	return Default_EquipData_StrengthCost
}

func (x *EquipData) GetRefineCompose() []*RefineCompose {
	if x != nil {
		return x.RefineCompose
	}
	return nil
}

func (x *EquipData) GetCardslot() uint32 {
	if x != nil && x.Cardslot != nil {
		return *x.Cardslot
	}
	return Default_EquipData_Cardslot
}

func (x *EquipData) GetBuffid() []uint32 {
	if x != nil {
		return x.Buffid
	}
	return nil
}

func (x *EquipData) GetDamage() bool {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return Default_EquipData_Damage
}

func (x *EquipData) GetLv() uint32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return Default_EquipData_Lv
}

func (x *EquipData) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return Default_EquipData_Color
}

func (x *EquipData) GetBreakstarttime() uint32 {
	if x != nil && x.Breakstarttime != nil {
		return *x.Breakstarttime
	}
	return Default_EquipData_Breakstarttime
}

func (x *EquipData) GetBreakendtime() uint32 {
	if x != nil && x.Breakendtime != nil {
		return *x.Breakendtime
	}
	return Default_EquipData_Breakendtime
}

func (x *EquipData) GetStrengthlv2() uint32 {
	if x != nil && x.Strengthlv2 != nil {
		return *x.Strengthlv2
	}
	return Default_EquipData_Strengthlv2
}

func (x *EquipData) GetStrengthlv2Cost() []*ItemInfo {
	if x != nil {
		return x.Strengthlv2Cost
	}
	return nil
}

func (x *EquipData) GetAttrs() []*EquipAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *EquipData) GetExtraRefineValue() uint32 {
	if x != nil && x.ExtraRefineValue != nil {
		return *x.ExtraRefineValue
	}
	return 0
}

type CardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid *string `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	Id   *uint32 `protobuf:"varint,2,opt,name=id,def=0" json:"id,omitempty"`
	Pos  *uint32 `protobuf:"varint,3,opt,name=pos,def=0" json:"pos,omitempty"`
}

// Default values for CardData fields.
const (
	Default_CardData_Id  = uint32(0)
	Default_CardData_Pos = uint32(0)
)

func (x *CardData) Reset() {
	*x = CardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardData) ProtoMessage() {}

func (x *CardData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardData.ProtoReflect.Descriptor instead.
func (*CardData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{5}
}

func (x *CardData) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *CardData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CardData_Id
}

func (x *CardData) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_CardData_Pos
}

type EnchantAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *EAttrType `protobuf:"varint,1,opt,name=type,enum=Cmd.EAttrType,def=0" json:"type,omitempty"`
	Value *uint32    `protobuf:"varint,2,opt,name=value,def=0" json:"value,omitempty"`
}

// Default values for EnchantAttr fields.
const (
	Default_EnchantAttr_Type  = EAttrType_EATTRTYPE_MIN
	Default_EnchantAttr_Value = uint32(0)
)

func (x *EnchantAttr) Reset() {
	*x = EnchantAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantAttr) ProtoMessage() {}

func (x *EnchantAttr) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantAttr.ProtoReflect.Descriptor instead.
func (*EnchantAttr) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{6}
}

func (x *EnchantAttr) GetType() EAttrType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_EnchantAttr_Type
}

func (x *EnchantAttr) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_EnchantAttr_Value
}

type EnchantExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configid *uint32 `protobuf:"varint,1,opt,name=configid,def=0" json:"configid,omitempty"`
	Buffid   *uint32 `protobuf:"varint,2,opt,name=buffid,def=0" json:"buffid,omitempty"`
}

// Default values for EnchantExtra fields.
const (
	Default_EnchantExtra_Configid = uint32(0)
	Default_EnchantExtra_Buffid   = uint32(0)
)

func (x *EnchantExtra) Reset() {
	*x = EnchantExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantExtra) ProtoMessage() {}

func (x *EnchantExtra) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantExtra.ProtoReflect.Descriptor instead.
func (*EnchantExtra) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{7}
}

func (x *EnchantExtra) GetConfigid() uint32 {
	if x != nil && x.Configid != nil {
		return *x.Configid
	}
	return Default_EnchantExtra_Configid
}

func (x *EnchantExtra) GetBuffid() uint32 {
	if x != nil && x.Buffid != nil {
		return *x.Buffid
	}
	return Default_EnchantExtra_Buffid
}

type EnchantData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *EEnchantType   `protobuf:"varint,1,opt,name=type,enum=Cmd.EEnchantType,def=0" json:"type,omitempty"`
	Attrs  []*EnchantAttr  `protobuf:"bytes,2,rep,name=attrs" json:"attrs,omitempty"`
	Extras []*EnchantExtra `protobuf:"bytes,3,rep,name=extras" json:"extras,omitempty"`
	Patch  []uint32        `protobuf:"varint,4,rep,name=patch" json:"patch,omitempty"`
}

// Default values for EnchantData fields.
const (
	Default_EnchantData_Type = EEnchantType_EENCHANTTYPE_MIN
)

func (x *EnchantData) Reset() {
	*x = EnchantData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantData) ProtoMessage() {}

func (x *EnchantData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantData.ProtoReflect.Descriptor instead.
func (*EnchantData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{8}
}

func (x *EnchantData) GetType() EEnchantType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_EnchantData_Type
}

func (x *EnchantData) GetAttrs() []*EnchantAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *EnchantData) GetExtras() []*EnchantExtra {
	if x != nil {
		return x.Extras
	}
	return nil
}

func (x *EnchantData) GetPatch() []uint32 {
	if x != nil {
		return x.Patch
	}
	return nil
}

type RefineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lastfail       *bool    `protobuf:"varint,1,opt,name=lastfail,def=0" json:"lastfail,omitempty"`
	Repaircount    *uint32  `protobuf:"varint,2,opt,name=repaircount,def=0" json:"repaircount,omitempty"`
	Lastfailcount  *uint32  `protobuf:"varint,3,opt,name=lastfailcount" json:"lastfailcount,omitempty"`
	HistoryFixRate *float32 `protobuf:"fixed32,4,opt,name=history_fix_rate,json=historyFixRate" json:"history_fix_rate,omitempty"`
	CostCount      *uint32  `protobuf:"varint,5,opt,name=cost_count,json=costCount" json:"cost_count,omitempty"`
}

// Default values for RefineData fields.
const (
	Default_RefineData_Lastfail    = bool(false)
	Default_RefineData_Repaircount = uint32(0)
)

func (x *RefineData) Reset() {
	*x = RefineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefineData) ProtoMessage() {}

func (x *RefineData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefineData.ProtoReflect.Descriptor instead.
func (*RefineData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{9}
}

func (x *RefineData) GetLastfail() bool {
	if x != nil && x.Lastfail != nil {
		return *x.Lastfail
	}
	return Default_RefineData_Lastfail
}

func (x *RefineData) GetRepaircount() uint32 {
	if x != nil && x.Repaircount != nil {
		return *x.Repaircount
	}
	return Default_RefineData_Repaircount
}

func (x *RefineData) GetLastfailcount() uint32 {
	if x != nil && x.Lastfailcount != nil {
		return *x.Lastfailcount
	}
	return 0
}

func (x *RefineData) GetHistoryFixRate() float32 {
	if x != nil && x.HistoryFixRate != nil {
		return *x.HistoryFixRate
	}
	return 0
}

func (x *RefineData) GetCostCount() uint32 {
	if x != nil && x.CostCount != nil {
		return *x.CostCount
	}
	return 0
}

type EggEquip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base           *ItemInfo      `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Data           *EquipData     `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Card           []*CardData    `protobuf:"bytes,3,rep,name=card" json:"card,omitempty"`
	Enchant        *EnchantData   `protobuf:"bytes,4,opt,name=enchant" json:"enchant,omitempty"`
	Prenchant      *EnchantData   `protobuf:"bytes,5,opt,name=prenchant" json:"prenchant,omitempty"`
	Refine         *RefineData    `protobuf:"bytes,7,opt,name=refine" json:"refine,omitempty"`
	Previewattr    []*EnchantAttr `protobuf:"bytes,8,rep,name=previewattr" json:"previewattr,omitempty"`
	Previewenchant []*EnchantData `protobuf:"bytes,9,rep,name=previewenchant" json:"previewenchant,omitempty"`
}

func (x *EggEquip) Reset() {
	*x = EggEquip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EggEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggEquip) ProtoMessage() {}

func (x *EggEquip) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggEquip.ProtoReflect.Descriptor instead.
func (*EggEquip) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{10}
}

func (x *EggEquip) GetBase() *ItemInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *EggEquip) GetData() *EquipData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EggEquip) GetCard() []*CardData {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *EggEquip) GetEnchant() *EnchantData {
	if x != nil {
		return x.Enchant
	}
	return nil
}

func (x *EggEquip) GetPrenchant() *EnchantData {
	if x != nil {
		return x.Prenchant
	}
	return nil
}

func (x *EggEquip) GetRefine() *RefineData {
	if x != nil {
		return x.Refine
	}
	return nil
}

func (x *EggEquip) GetPreviewattr() []*EnchantAttr {
	if x != nil {
		return x.Previewattr
	}
	return nil
}

func (x *EggEquip) GetPreviewenchant() []*EnchantData {
	if x != nil {
		return x.Previewenchant
	}
	return nil
}

type PetEquipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epos   *EEquipPos `protobuf:"varint,1,opt,name=epos,enum=Cmd.EEquipPos" json:"epos,omitempty"`
	Itemid *uint32    `protobuf:"varint,2,opt,name=itemid" json:"itemid,omitempty"`
}

func (x *PetEquipData) Reset() {
	*x = PetEquipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetEquipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetEquipData) ProtoMessage() {}

func (x *PetEquipData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetEquipData.ProtoReflect.Descriptor instead.
func (*PetEquipData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{11}
}

func (x *PetEquipData) GetEpos() EEquipPos {
	if x != nil && x.Epos != nil {
		return *x.Epos
	}
	return EEquipPos_EEQUIPPOS_MIN
}

func (x *PetEquipData) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

type EggData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exp               *uint64         `protobuf:"varint,1,opt,name=exp,def=0" json:"exp,omitempty"`
	Friendexp         *uint64         `protobuf:"varint,2,opt,name=friendexp,def=0" json:"friendexp,omitempty"`
	Rewardexp         *uint64         `protobuf:"varint,3,opt,name=rewardexp,def=0" json:"rewardexp,omitempty"`
	Id                *uint32         `protobuf:"varint,4,opt,name=id,def=0" json:"id,omitempty"`
	Lv                *uint32         `protobuf:"varint,5,opt,name=lv,def=0" json:"lv,omitempty"`
	Friendlv          *uint32         `protobuf:"varint,6,opt,name=friendlv,def=0" json:"friendlv,omitempty"`
	Body              *uint32         `protobuf:"varint,7,opt,name=body,def=0" json:"body,omitempty"`
	Relivetime        *uint32         `protobuf:"varint,8,opt,name=relivetime,def=0" json:"relivetime,omitempty"`
	Hp                *uint32         `protobuf:"varint,9,opt,name=hp,def=0" json:"hp,omitempty"`
	Restoretime       *uint32         `protobuf:"varint,10,opt,name=restoretime,def=0" json:"restoretime,omitempty"`
	TimeHapply        *uint32         `protobuf:"varint,11,opt,name=time_happly,json=timeHapply,def=0" json:"time_happly,omitempty"`
	TimeExcite        *uint32         `protobuf:"varint,12,opt,name=time_excite,json=timeExcite,def=0" json:"time_excite,omitempty"`
	TimeHappiness     *uint32         `protobuf:"varint,13,opt,name=time_happiness,json=timeHappiness,def=0" json:"time_happiness,omitempty"`
	TimeHapplyGift    *uint32         `protobuf:"varint,14,opt,name=time_happly_gift,json=timeHapplyGift,def=0" json:"time_happly_gift,omitempty"`
	TimeExciteGift    *uint32         `protobuf:"varint,15,opt,name=time_excite_gift,json=timeExciteGift,def=0" json:"time_excite_gift,omitempty"`
	TimeHappinessGift *uint32         `protobuf:"varint,16,opt,name=time_happiness_gift,json=timeHappinessGift,def=0" json:"time_happiness_gift,omitempty"`
	TouchTick         *uint32         `protobuf:"varint,22,opt,name=touch_tick,json=touchTick,def=0" json:"touch_tick,omitempty"`
	FeedTick          *uint32         `protobuf:"varint,23,opt,name=feed_tick,json=feedTick,def=0" json:"feed_tick,omitempty"`
	Name              *string         `protobuf:"bytes,17,opt,name=name" json:"name,omitempty"`
	Var               []byte          `protobuf:"bytes,18,opt,name=var" json:"var,omitempty"`
	Skillids          []uint32        `protobuf:"varint,19,rep,name=skillids" json:"skillids,omitempty"`
	Equips            []*EggEquip     `protobuf:"bytes,20,rep,name=equips" json:"equips,omitempty"`
	Buff              []byte          `protobuf:"bytes,21,opt,name=buff" json:"buff,omitempty"`
	UnlockEquip       []uint32        `protobuf:"varint,24,rep,name=unlock_equip,json=unlockEquip" json:"unlock_equip,omitempty"`
	UnlockBody        []uint32        `protobuf:"varint,25,rep,name=unlock_body,json=unlockBody" json:"unlock_body,omitempty"`
	Version           *uint32         `protobuf:"varint,26,opt,name=version,def=0" json:"version,omitempty"`
	Skilloff          *bool           `protobuf:"varint,27,opt,name=skilloff,def=0" json:"skilloff,omitempty"`
	ExchangeCount     *uint32         `protobuf:"varint,28,opt,name=exchange_count,json=exchangeCount,def=0" json:"exchange_count,omitempty"`
	Guid              *string         `protobuf:"bytes,29,opt,name=guid" json:"guid,omitempty"`
	Defaultwears      []*PetEquipData `protobuf:"bytes,30,rep,name=defaultwears" json:"defaultwears,omitempty"`
	Wears             []*PetEquipData `protobuf:"bytes,31,rep,name=wears" json:"wears,omitempty"`
	Cdtime            []byte          `protobuf:"bytes,32,opt,name=cdtime" json:"cdtime,omitempty"`
}

// Default values for EggData fields.
const (
	Default_EggData_Exp               = uint64(0)
	Default_EggData_Friendexp         = uint64(0)
	Default_EggData_Rewardexp         = uint64(0)
	Default_EggData_Id                = uint32(0)
	Default_EggData_Lv                = uint32(0)
	Default_EggData_Friendlv          = uint32(0)
	Default_EggData_Body              = uint32(0)
	Default_EggData_Relivetime        = uint32(0)
	Default_EggData_Hp                = uint32(0)
	Default_EggData_Restoretime       = uint32(0)
	Default_EggData_TimeHapply        = uint32(0)
	Default_EggData_TimeExcite        = uint32(0)
	Default_EggData_TimeHappiness     = uint32(0)
	Default_EggData_TimeHapplyGift    = uint32(0)
	Default_EggData_TimeExciteGift    = uint32(0)
	Default_EggData_TimeHappinessGift = uint32(0)
	Default_EggData_TouchTick         = uint32(0)
	Default_EggData_FeedTick          = uint32(0)
	Default_EggData_Version           = uint32(0)
	Default_EggData_Skilloff          = bool(false)
	Default_EggData_ExchangeCount     = uint32(0)
)

func (x *EggData) Reset() {
	*x = EggData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EggData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggData) ProtoMessage() {}

func (x *EggData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggData.ProtoReflect.Descriptor instead.
func (*EggData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{12}
}

func (x *EggData) GetExp() uint64 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return Default_EggData_Exp
}

func (x *EggData) GetFriendexp() uint64 {
	if x != nil && x.Friendexp != nil {
		return *x.Friendexp
	}
	return Default_EggData_Friendexp
}

func (x *EggData) GetRewardexp() uint64 {
	if x != nil && x.Rewardexp != nil {
		return *x.Rewardexp
	}
	return Default_EggData_Rewardexp
}

func (x *EggData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_EggData_Id
}

func (x *EggData) GetLv() uint32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return Default_EggData_Lv
}

func (x *EggData) GetFriendlv() uint32 {
	if x != nil && x.Friendlv != nil {
		return *x.Friendlv
	}
	return Default_EggData_Friendlv
}

func (x *EggData) GetBody() uint32 {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return Default_EggData_Body
}

func (x *EggData) GetRelivetime() uint32 {
	if x != nil && x.Relivetime != nil {
		return *x.Relivetime
	}
	return Default_EggData_Relivetime
}

func (x *EggData) GetHp() uint32 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return Default_EggData_Hp
}

func (x *EggData) GetRestoretime() uint32 {
	if x != nil && x.Restoretime != nil {
		return *x.Restoretime
	}
	return Default_EggData_Restoretime
}

func (x *EggData) GetTimeHapply() uint32 {
	if x != nil && x.TimeHapply != nil {
		return *x.TimeHapply
	}
	return Default_EggData_TimeHapply
}

func (x *EggData) GetTimeExcite() uint32 {
	if x != nil && x.TimeExcite != nil {
		return *x.TimeExcite
	}
	return Default_EggData_TimeExcite
}

func (x *EggData) GetTimeHappiness() uint32 {
	if x != nil && x.TimeHappiness != nil {
		return *x.TimeHappiness
	}
	return Default_EggData_TimeHappiness
}

func (x *EggData) GetTimeHapplyGift() uint32 {
	if x != nil && x.TimeHapplyGift != nil {
		return *x.TimeHapplyGift
	}
	return Default_EggData_TimeHapplyGift
}

func (x *EggData) GetTimeExciteGift() uint32 {
	if x != nil && x.TimeExciteGift != nil {
		return *x.TimeExciteGift
	}
	return Default_EggData_TimeExciteGift
}

func (x *EggData) GetTimeHappinessGift() uint32 {
	if x != nil && x.TimeHappinessGift != nil {
		return *x.TimeHappinessGift
	}
	return Default_EggData_TimeHappinessGift
}

func (x *EggData) GetTouchTick() uint32 {
	if x != nil && x.TouchTick != nil {
		return *x.TouchTick
	}
	return Default_EggData_TouchTick
}

func (x *EggData) GetFeedTick() uint32 {
	if x != nil && x.FeedTick != nil {
		return *x.FeedTick
	}
	return Default_EggData_FeedTick
}

func (x *EggData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EggData) GetVar() []byte {
	if x != nil {
		return x.Var
	}
	return nil
}

func (x *EggData) GetSkillids() []uint32 {
	if x != nil {
		return x.Skillids
	}
	return nil
}

func (x *EggData) GetEquips() []*EggEquip {
	if x != nil {
		return x.Equips
	}
	return nil
}

func (x *EggData) GetBuff() []byte {
	if x != nil {
		return x.Buff
	}
	return nil
}

func (x *EggData) GetUnlockEquip() []uint32 {
	if x != nil {
		return x.UnlockEquip
	}
	return nil
}

func (x *EggData) GetUnlockBody() []uint32 {
	if x != nil {
		return x.UnlockBody
	}
	return nil
}

func (x *EggData) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_EggData_Version
}

func (x *EggData) GetSkilloff() bool {
	if x != nil && x.Skilloff != nil {
		return *x.Skilloff
	}
	return Default_EggData_Skilloff
}

func (x *EggData) GetExchangeCount() uint32 {
	if x != nil && x.ExchangeCount != nil {
		return *x.ExchangeCount
	}
	return Default_EggData_ExchangeCount
}

func (x *EggData) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *EggData) GetDefaultwears() []*PetEquipData {
	if x != nil {
		return x.Defaultwears
	}
	return nil
}

func (x *EggData) GetWears() []*PetEquipData {
	if x != nil {
		return x.Wears
	}
	return nil
}

func (x *EggData) GetCdtime() []byte {
	if x != nil {
		return x.Cdtime
	}
	return nil
}

type LoveLetterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendUserName *string `protobuf:"bytes,1,opt,name=sendUserName" json:"sendUserName,omitempty"`
	Bg           *string `protobuf:"bytes,2,opt,name=bg" json:"bg,omitempty"`
	ConfigID     *uint32 `protobuf:"varint,3,opt,name=configID" json:"configID,omitempty"`
	Content      *string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	Content2     *string `protobuf:"bytes,5,opt,name=content2" json:"content2,omitempty"`
}

func (x *LoveLetterData) Reset() {
	*x = LoveLetterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoveLetterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoveLetterData) ProtoMessage() {}

func (x *LoveLetterData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoveLetterData.ProtoReflect.Descriptor instead.
func (*LoveLetterData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{13}
}

func (x *LoveLetterData) GetSendUserName() string {
	if x != nil && x.SendUserName != nil {
		return *x.SendUserName
	}
	return ""
}

func (x *LoveLetterData) GetBg() string {
	if x != nil && x.Bg != nil {
		return *x.Bg
	}
	return ""
}

func (x *LoveLetterData) GetConfigID() uint32 {
	if x != nil && x.ConfigID != nil {
		return *x.ConfigID
	}
	return 0
}

func (x *LoveLetterData) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *LoveLetterData) GetContent2() string {
	if x != nil && x.Content2 != nil {
		return *x.Content2
	}
	return ""
}

type CodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Used *bool   `protobuf:"varint,2,opt,name=used,def=0" json:"used,omitempty"`
}

// Default values for CodeData fields.
const (
	Default_CodeData_Used = bool(false)
)

func (x *CodeData) Reset() {
	*x = CodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeData) ProtoMessage() {}

func (x *CodeData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeData.ProtoReflect.Descriptor instead.
func (*CodeData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{14}
}

func (x *CodeData) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *CodeData) GetUsed() bool {
	if x != nil && x.Used != nil {
		return *x.Used
	}
	return Default_CodeData_Used
}

type WeddingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint64 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Zoneid      *uint32 `protobuf:"varint,2,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Charid1     *uint64 `protobuf:"varint,3,opt,name=charid1,def=0" json:"charid1,omitempty"`
	Charid2     *uint64 `protobuf:"varint,4,opt,name=charid2,def=0" json:"charid2,omitempty"`
	Weddingtime *uint32 `protobuf:"varint,5,opt,name=weddingtime,def=0" json:"weddingtime,omitempty"`
	Photoidx    *uint32 `protobuf:"varint,6,opt,name=photoidx,def=0" json:"photoidx,omitempty"`
	Phototime   *uint32 `protobuf:"varint,7,opt,name=phototime,def=0" json:"phototime,omitempty"`
	Myname      *string `protobuf:"bytes,8,opt,name=myname" json:"myname,omitempty"`
	Partnername *string `protobuf:"bytes,9,opt,name=partnername" json:"partnername,omitempty"`
	Starttime   *uint32 `protobuf:"varint,10,opt,name=starttime,def=0" json:"starttime,omitempty"`
	Endtime     *uint32 `protobuf:"varint,11,opt,name=endtime,def=0" json:"endtime,omitempty"`
	Notified    *bool   `protobuf:"varint,12,opt,name=notified,def=0" json:"notified,omitempty"`
}

// Default values for WeddingData fields.
const (
	Default_WeddingData_Id          = uint64(0)
	Default_WeddingData_Zoneid      = uint32(0)
	Default_WeddingData_Charid1     = uint64(0)
	Default_WeddingData_Charid2     = uint64(0)
	Default_WeddingData_Weddingtime = uint32(0)
	Default_WeddingData_Photoidx    = uint32(0)
	Default_WeddingData_Phototime   = uint32(0)
	Default_WeddingData_Starttime   = uint32(0)
	Default_WeddingData_Endtime     = uint32(0)
	Default_WeddingData_Notified    = bool(false)
)

func (x *WeddingData) Reset() {
	*x = WeddingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeddingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeddingData) ProtoMessage() {}

func (x *WeddingData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeddingData.ProtoReflect.Descriptor instead.
func (*WeddingData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{15}
}

func (x *WeddingData) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_WeddingData_Id
}

func (x *WeddingData) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_WeddingData_Zoneid
}

func (x *WeddingData) GetCharid1() uint64 {
	if x != nil && x.Charid1 != nil {
		return *x.Charid1
	}
	return Default_WeddingData_Charid1
}

func (x *WeddingData) GetCharid2() uint64 {
	if x != nil && x.Charid2 != nil {
		return *x.Charid2
	}
	return Default_WeddingData_Charid2
}

func (x *WeddingData) GetWeddingtime() uint32 {
	if x != nil && x.Weddingtime != nil {
		return *x.Weddingtime
	}
	return Default_WeddingData_Weddingtime
}

func (x *WeddingData) GetPhotoidx() uint32 {
	if x != nil && x.Photoidx != nil {
		return *x.Photoidx
	}
	return Default_WeddingData_Photoidx
}

func (x *WeddingData) GetPhototime() uint32 {
	if x != nil && x.Phototime != nil {
		return *x.Phototime
	}
	return Default_WeddingData_Phototime
}

func (x *WeddingData) GetMyname() string {
	if x != nil && x.Myname != nil {
		return *x.Myname
	}
	return ""
}

func (x *WeddingData) GetPartnername() string {
	if x != nil && x.Partnername != nil {
		return *x.Partnername
	}
	return ""
}

func (x *WeddingData) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return Default_WeddingData_Starttime
}

func (x *WeddingData) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return Default_WeddingData_Endtime
}

func (x *WeddingData) GetNotified() bool {
	if x != nil && x.Notified != nil {
		return *x.Notified
	}
	return Default_WeddingData_Notified
}

type SenderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid *uint64 `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Name   *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *SenderData) Reset() {
	*x = SenderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenderData) ProtoMessage() {}

func (x *SenderData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenderData.ProtoReflect.Descriptor instead.
func (*SenderData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{16}
}

func (x *SenderData) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *SenderData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GemAttrData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Lv     *uint32 `protobuf:"varint,2,opt,name=lv,def=1" json:"lv,omitempty"`
	Exp    *uint64 `protobuf:"varint,3,opt,name=exp,def=0" json:"exp,omitempty"`
	Pos    *uint32 `protobuf:"varint,4,opt,name=pos,def=0" json:"pos,omitempty"`
	Time   *uint32 `protobuf:"varint,5,opt,name=time,def=0" json:"time,omitempty"`
	Charid *uint64 `protobuf:"varint,6,opt,name=charid,def=0" json:"charid,omitempty"`
}

// Default values for GemAttrData fields.
const (
	Default_GemAttrData_Lv     = uint32(1)
	Default_GemAttrData_Exp    = uint64(0)
	Default_GemAttrData_Pos    = uint32(0)
	Default_GemAttrData_Time   = uint32(0)
	Default_GemAttrData_Charid = uint64(0)
)

func (x *GemAttrData) Reset() {
	*x = GemAttrData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GemAttrData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GemAttrData) ProtoMessage() {}

func (x *GemAttrData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GemAttrData.ProtoReflect.Descriptor instead.
func (*GemAttrData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{17}
}

func (x *GemAttrData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GemAttrData) GetLv() uint32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return Default_GemAttrData_Lv
}

func (x *GemAttrData) GetExp() uint64 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return Default_GemAttrData_Exp
}

func (x *GemAttrData) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_GemAttrData_Pos
}

func (x *GemAttrData) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_GemAttrData_Time
}

func (x *GemAttrData) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_GemAttrData_Charid
}

type BuffParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paramid    *uint32        `protobuf:"varint,1,opt,name=paramid" json:"paramid,omitempty"`
	Paramper1  *uint32        `protobuf:"varint,2,opt,name=paramper1" json:"paramper1,omitempty"`
	Paramper2  *uint32        `protobuf:"varint,3,opt,name=paramper2" json:"paramper2,omitempty"`
	Paramvalue *int32         `protobuf:"varint,4,opt,name=paramvalue" json:"paramvalue,omitempty"`
	Attrs      []*UserAttrSvr `protobuf:"bytes,5,rep,name=attrs" json:"attrs,omitempty"`
}

func (x *BuffParam) Reset() {
	*x = BuffParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffParam) ProtoMessage() {}

func (x *BuffParam) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffParam.ProtoReflect.Descriptor instead.
func (*BuffParam) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{18}
}

func (x *BuffParam) GetParamid() uint32 {
	if x != nil && x.Paramid != nil {
		return *x.Paramid
	}
	return 0
}

func (x *BuffParam) GetParamper1() uint32 {
	if x != nil && x.Paramper1 != nil {
		return *x.Paramper1
	}
	return 0
}

func (x *BuffParam) GetParamper2() uint32 {
	if x != nil && x.Paramper2 != nil {
		return *x.Paramper2
	}
	return 0
}

func (x *BuffParam) GetParamvalue() int32 {
	if x != nil && x.Paramvalue != nil {
		return *x.Paramvalue
	}
	return 0
}

func (x *BuffParam) GetAttrs() []*UserAttrSvr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type GemBuff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buffid *uint32      `protobuf:"varint,1,opt,name=buffid" json:"buffid,omitempty"`
	Params []*BuffParam `protobuf:"bytes,2,rep,name=params" json:"params,omitempty"`
}

func (x *GemBuff) Reset() {
	*x = GemBuff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GemBuff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GemBuff) ProtoMessage() {}

func (x *GemBuff) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GemBuff.ProtoReflect.Descriptor instead.
func (*GemBuff) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{19}
}

func (x *GemBuff) GetBuffid() uint32 {
	if x != nil && x.Buffid != nil {
		return *x.Buffid
	}
	return 0
}

func (x *GemBuff) GetParams() []*BuffParam {
	if x != nil {
		return x.Params
	}
	return nil
}

type GemCarves struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *uint32 `protobuf:"varint,1,opt,name=type,def=0" json:"type,omitempty"`
	Pos  *uint32 `protobuf:"varint,2,opt,name=pos,def=0" json:"pos,omitempty"`
}

// Default values for GemCarves fields.
const (
	Default_GemCarves_Type = uint32(0)
	Default_GemCarves_Pos  = uint32(0)
)

func (x *GemCarves) Reset() {
	*x = GemCarves{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GemCarves) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GemCarves) ProtoMessage() {}

func (x *GemCarves) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GemCarves.ProtoReflect.Descriptor instead.
func (*GemCarves) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{20}
}

func (x *GemCarves) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_GemCarves_Type
}

func (x *GemCarves) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_GemCarves_Pos
}

type GemSkillData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Pos      *uint32      `protobuf:"varint,2,opt,name=pos,def=0" json:"pos,omitempty"`
	Charid   *uint64      `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Issame   *bool        `protobuf:"varint,4,opt,name=issame,def=0" json:"issame,omitempty"`
	Buffs    []*GemBuff   `protobuf:"bytes,5,rep,name=buffs" json:"buffs,omitempty"`
	Carves   []*GemCarves `protobuf:"bytes,6,rep,name=carves" json:"carves,omitempty"`
	Isforbid *bool        `protobuf:"varint,7,opt,name=isforbid,def=0" json:"isforbid,omitempty"`
}

// Default values for GemSkillData fields.
const (
	Default_GemSkillData_Pos      = uint32(0)
	Default_GemSkillData_Charid   = uint64(0)
	Default_GemSkillData_Issame   = bool(false)
	Default_GemSkillData_Isforbid = bool(false)
)

func (x *GemSkillData) Reset() {
	*x = GemSkillData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GemSkillData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GemSkillData) ProtoMessage() {}

func (x *GemSkillData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GemSkillData.ProtoReflect.Descriptor instead.
func (*GemSkillData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{21}
}

func (x *GemSkillData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GemSkillData) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_GemSkillData_Pos
}

func (x *GemSkillData) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_GemSkillData_Charid
}

func (x *GemSkillData) GetIssame() bool {
	if x != nil && x.Issame != nil {
		return *x.Issame
	}
	return Default_GemSkillData_Issame
}

func (x *GemSkillData) GetBuffs() []*GemBuff {
	if x != nil {
		return x.Buffs
	}
	return nil
}

func (x *GemSkillData) GetCarves() []*GemCarves {
	if x != nil {
		return x.Carves
	}
	return nil
}

func (x *GemSkillData) GetIsforbid() bool {
	if x != nil && x.Isforbid != nil {
		return *x.Isforbid
	}
	return Default_GemSkillData_Isforbid
}

type ArtifactAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Value *int32  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (x *ArtifactAttr) Reset() {
	*x = ArtifactAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactAttr) ProtoMessage() {}

func (x *ArtifactAttr) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactAttr.ProtoReflect.Descriptor instead.
func (*ArtifactAttr) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{22}
}

func (x *ArtifactAttr) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ArtifactAttr) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type ArtifactData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attrs       []*ArtifactAttr `protobuf:"bytes,1,rep,name=attrs" json:"attrs,omitempty"`
	Preattrs    []*ArtifactAttr `protobuf:"bytes,2,rep,name=preattrs" json:"preattrs,omitempty"`
	ArtState    *EArtifactState `protobuf:"varint,3,opt,name=art_state,json=artState,enum=Cmd.EArtifactState,def=1" json:"art_state,omitempty"`
	ArtFragment []uint32        `protobuf:"varint,4,rep,name=art_fragment,json=artFragment" json:"art_fragment,omitempty"`
	Noattrs     []*ArtifactAttr `protobuf:"bytes,5,rep,name=noattrs" json:"noattrs,omitempty"`
}

// Default values for ArtifactData fields.
const (
	Default_ArtifactData_ArtState = EArtifactState_ESTATE_INACTIVATED
)

func (x *ArtifactData) Reset() {
	*x = ArtifactData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactData) ProtoMessage() {}

func (x *ArtifactData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactData.ProtoReflect.Descriptor instead.
func (*ArtifactData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{23}
}

func (x *ArtifactData) GetAttrs() []*ArtifactAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *ArtifactData) GetPreattrs() []*ArtifactAttr {
	if x != nil {
		return x.Preattrs
	}
	return nil
}

func (x *ArtifactData) GetArtState() EArtifactState {
	if x != nil && x.ArtState != nil {
		return *x.ArtState
	}
	return Default_ArtifactData_ArtState
}

func (x *ArtifactData) GetArtFragment() []uint32 {
	if x != nil {
		return x.ArtFragment
	}
	return nil
}

func (x *ArtifactData) GetNoattrs() []*ArtifactAttr {
	if x != nil {
		return x.Noattrs
	}
	return nil
}

type FurnitureSeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Point  *uint32 `protobuf:"varint,1,opt,name=point" json:"point,omitempty"`
	Charid *uint64 `protobuf:"varint,2,opt,name=charid" json:"charid,omitempty"`
}

func (x *FurnitureSeat) Reset() {
	*x = FurnitureSeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnitureSeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnitureSeat) ProtoMessage() {}

func (x *FurnitureSeat) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnitureSeat.ProtoReflect.Descriptor instead.
func (*FurnitureSeat) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{24}
}

func (x *FurnitureSeat) GetPoint() uint32 {
	if x != nil && x.Point != nil {
		return *x.Point
	}
	return 0
}

func (x *FurnitureSeat) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

type FurniturePhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accid  *uint64 `protobuf:"varint,1,opt,name=accid,def=0" json:"accid,omitempty"`
	Charid *uint64 `protobuf:"varint,2,opt,name=charid,def=0" json:"charid,omitempty"`
	Id     *uint32 `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Source *uint32 `protobuf:"varint,4,opt,name=source,def=0" json:"source,omitempty"`
	Time   *uint32 `protobuf:"varint,5,opt,name=time,def=0" json:"time,omitempty"`
}

// Default values for FurniturePhoto fields.
const (
	Default_FurniturePhoto_Accid  = uint64(0)
	Default_FurniturePhoto_Charid = uint64(0)
	Default_FurniturePhoto_Id     = uint32(0)
	Default_FurniturePhoto_Source = uint32(0)
	Default_FurniturePhoto_Time   = uint32(0)
)

func (x *FurniturePhoto) Reset() {
	*x = FurniturePhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurniturePhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurniturePhoto) ProtoMessage() {}

func (x *FurniturePhoto) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurniturePhoto.ProtoReflect.Descriptor instead.
func (*FurniturePhoto) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{25}
}

func (x *FurniturePhoto) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return Default_FurniturePhoto_Accid
}

func (x *FurniturePhoto) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_FurniturePhoto_Charid
}

func (x *FurniturePhoto) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_FurniturePhoto_Id
}

func (x *FurniturePhoto) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return Default_FurniturePhoto_Source
}

func (x *FurniturePhoto) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_FurniturePhoto_Time
}

type DamageRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skillid     *uint32 `protobuf:"varint,1,opt,name=skillid,def=0" json:"skillid,omitempty"`
	Atkcount    *uint32 `protobuf:"varint,2,opt,name=atkcount,def=0" json:"atkcount,omitempty"`
	Totaldamage *uint64 `protobuf:"varint,3,opt,name=totaldamage,def=0" json:"totaldamage,omitempty"`
}

// Default values for DamageRound fields.
const (
	Default_DamageRound_Skillid     = uint32(0)
	Default_DamageRound_Atkcount    = uint32(0)
	Default_DamageRound_Totaldamage = uint64(0)
)

func (x *DamageRound) Reset() {
	*x = DamageRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DamageRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DamageRound) ProtoMessage() {}

func (x *DamageRound) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DamageRound.ProtoReflect.Descriptor instead.
func (*DamageRound) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{26}
}

func (x *DamageRound) GetSkillid() uint32 {
	if x != nil && x.Skillid != nil {
		return *x.Skillid
	}
	return Default_DamageRound_Skillid
}

func (x *DamageRound) GetAtkcount() uint32 {
	if x != nil && x.Atkcount != nil {
		return *x.Atkcount
	}
	return Default_DamageRound_Atkcount
}

func (x *DamageRound) GetTotaldamage() uint64 {
	if x != nil && x.Totaldamage != nil {
		return *x.Totaldamage
	}
	return Default_DamageRound_Totaldamage
}

type DamageUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid     *uint64      `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Body       *uint32      `protobuf:"varint,2,opt,name=body,def=0" json:"body,omitempty"`
	Eye        *uint32      `protobuf:"varint,3,opt,name=eye,def=0" json:"eye,omitempty"`
	Hair       *uint32      `protobuf:"varint,4,opt,name=hair,def=0" json:"hair,omitempty"`
	Haircolor  *uint32      `protobuf:"varint,5,opt,name=haircolor,def=0" json:"haircolor,omitempty"`
	Baselevel  *uint32      `protobuf:"varint,6,opt,name=baselevel,def=0" json:"baselevel,omitempty"`
	Serverid   *uint32      `protobuf:"varint,12,opt,name=serverid" json:"serverid,omitempty"`
	Blink      *bool        `protobuf:"varint,7,opt,name=blink,def=0" json:"blink,omitempty"`
	Profession *EProfession `protobuf:"varint,8,opt,name=profession,enum=Cmd.EProfession,def=0" json:"profession,omitempty"`
	Gender     *EGender     `protobuf:"varint,9,opt,name=gender,enum=Cmd.EGender,def=0" json:"gender,omitempty"`
	Name       *string      `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
	Guildname  *string      `protobuf:"bytes,11,opt,name=guildname" json:"guildname,omitempty"`
}

// Default values for DamageUser fields.
const (
	Default_DamageUser_Charid     = uint64(0)
	Default_DamageUser_Body       = uint32(0)
	Default_DamageUser_Eye        = uint32(0)
	Default_DamageUser_Hair       = uint32(0)
	Default_DamageUser_Haircolor  = uint32(0)
	Default_DamageUser_Baselevel  = uint32(0)
	Default_DamageUser_Blink      = bool(false)
	Default_DamageUser_Profession = EProfession_EPROFESSION_MIN
	Default_DamageUser_Gender     = EGender_EGENDER_MIN
)

func (x *DamageUser) Reset() {
	*x = DamageUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DamageUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DamageUser) ProtoMessage() {}

func (x *DamageUser) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DamageUser.ProtoReflect.Descriptor instead.
func (*DamageUser) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{27}
}

func (x *DamageUser) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_DamageUser_Charid
}

func (x *DamageUser) GetBody() uint32 {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return Default_DamageUser_Body
}

func (x *DamageUser) GetEye() uint32 {
	if x != nil && x.Eye != nil {
		return *x.Eye
	}
	return Default_DamageUser_Eye
}

func (x *DamageUser) GetHair() uint32 {
	if x != nil && x.Hair != nil {
		return *x.Hair
	}
	return Default_DamageUser_Hair
}

func (x *DamageUser) GetHaircolor() uint32 {
	if x != nil && x.Haircolor != nil {
		return *x.Haircolor
	}
	return Default_DamageUser_Haircolor
}

func (x *DamageUser) GetBaselevel() uint32 {
	if x != nil && x.Baselevel != nil {
		return *x.Baselevel
	}
	return Default_DamageUser_Baselevel
}

func (x *DamageUser) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return 0
}

func (x *DamageUser) GetBlink() bool {
	if x != nil && x.Blink != nil {
		return *x.Blink
	}
	return Default_DamageUser_Blink
}

func (x *DamageUser) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return Default_DamageUser_Profession
}

func (x *DamageUser) GetGender() EGender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Default_DamageUser_Gender
}

func (x *DamageUser) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DamageUser) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

type DamageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Totaldamage *uint64        `protobuf:"varint,1,opt,name=totaldamage,def=0" json:"totaldamage,omitempty"`
	Totaltime   *uint32        `protobuf:"varint,2,opt,name=totaltime,def=0" json:"totaltime,omitempty"`
	Race        *uint32        `protobuf:"varint,5,opt,name=race,def=0" json:"race,omitempty"`
	Shape       *uint32        `protobuf:"varint,6,opt,name=shape,def=0" json:"shape,omitempty"`
	Nature      *uint32        `protobuf:"varint,7,opt,name=nature,def=0" json:"nature,omitempty"`
	Hpreduce    *uint32        `protobuf:"varint,8,opt,name=hpreduce,def=0" json:"hpreduce,omitempty"`
	User        *DamageUser    `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Rounds      []*DamageRound `protobuf:"bytes,4,rep,name=rounds" json:"rounds,omitempty"`
	Bosstype    *uint32        `protobuf:"varint,9,opt,name=bosstype,def=0" json:"bosstype,omitempty"`
}

// Default values for DamageItem fields.
const (
	Default_DamageItem_Totaldamage = uint64(0)
	Default_DamageItem_Totaltime   = uint32(0)
	Default_DamageItem_Race        = uint32(0)
	Default_DamageItem_Shape       = uint32(0)
	Default_DamageItem_Nature      = uint32(0)
	Default_DamageItem_Hpreduce    = uint32(0)
	Default_DamageItem_Bosstype    = uint32(0)
)

func (x *DamageItem) Reset() {
	*x = DamageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DamageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DamageItem) ProtoMessage() {}

func (x *DamageItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DamageItem.ProtoReflect.Descriptor instead.
func (*DamageItem) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{28}
}

func (x *DamageItem) GetTotaldamage() uint64 {
	if x != nil && x.Totaldamage != nil {
		return *x.Totaldamage
	}
	return Default_DamageItem_Totaldamage
}

func (x *DamageItem) GetTotaltime() uint32 {
	if x != nil && x.Totaltime != nil {
		return *x.Totaltime
	}
	return Default_DamageItem_Totaltime
}

func (x *DamageItem) GetRace() uint32 {
	if x != nil && x.Race != nil {
		return *x.Race
	}
	return Default_DamageItem_Race
}

func (x *DamageItem) GetShape() uint32 {
	if x != nil && x.Shape != nil {
		return *x.Shape
	}
	return Default_DamageItem_Shape
}

func (x *DamageItem) GetNature() uint32 {
	if x != nil && x.Nature != nil {
		return *x.Nature
	}
	return Default_DamageItem_Nature
}

func (x *DamageItem) GetHpreduce() uint32 {
	if x != nil && x.Hpreduce != nil {
		return *x.Hpreduce
	}
	return Default_DamageItem_Hpreduce
}

func (x *DamageItem) GetUser() *DamageUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *DamageItem) GetRounds() []*DamageRound {
	if x != nil {
		return x.Rounds
	}
	return nil
}

func (x *DamageItem) GetBosstype() uint32 {
	if x != nil && x.Bosstype != nil {
		return *x.Bosstype
	}
	return Default_DamageItem_Bosstype
}

type FurnitureNpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Race       *uint32       `protobuf:"varint,1,opt,name=race,def=0" json:"race,omitempty"`
	Shape      *uint32       `protobuf:"varint,2,opt,name=shape,def=0" json:"shape,omitempty"`
	Nature     *uint32       `protobuf:"varint,3,opt,name=nature,def=0" json:"nature,omitempty"`
	Hpreduce   *uint32       `protobuf:"varint,4,opt,name=hpreduce,def=0" json:"hpreduce,omitempty"`
	HistoryMax []*DamageItem `protobuf:"bytes,5,rep,name=history_max,json=historyMax" json:"history_max,omitempty"`
	DayMax     []*DamageItem `protobuf:"bytes,6,rep,name=day_max,json=dayMax" json:"day_max,omitempty"`
	Bosstype   *uint32       `protobuf:"varint,7,opt,name=bosstype,def=0" json:"bosstype,omitempty"`
}

// Default values for FurnitureNpc fields.
const (
	Default_FurnitureNpc_Race     = uint32(0)
	Default_FurnitureNpc_Shape    = uint32(0)
	Default_FurnitureNpc_Nature   = uint32(0)
	Default_FurnitureNpc_Hpreduce = uint32(0)
	Default_FurnitureNpc_Bosstype = uint32(0)
)

func (x *FurnitureNpc) Reset() {
	*x = FurnitureNpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FurnitureNpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FurnitureNpc) ProtoMessage() {}

func (x *FurnitureNpc) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FurnitureNpc.ProtoReflect.Descriptor instead.
func (*FurnitureNpc) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{29}
}

func (x *FurnitureNpc) GetRace() uint32 {
	if x != nil && x.Race != nil {
		return *x.Race
	}
	return Default_FurnitureNpc_Race
}

func (x *FurnitureNpc) GetShape() uint32 {
	if x != nil && x.Shape != nil {
		return *x.Shape
	}
	return Default_FurnitureNpc_Shape
}

func (x *FurnitureNpc) GetNature() uint32 {
	if x != nil && x.Nature != nil {
		return *x.Nature
	}
	return Default_FurnitureNpc_Nature
}

func (x *FurnitureNpc) GetHpreduce() uint32 {
	if x != nil && x.Hpreduce != nil {
		return *x.Hpreduce
	}
	return Default_FurnitureNpc_Hpreduce
}

func (x *FurnitureNpc) GetHistoryMax() []*DamageItem {
	if x != nil {
		return x.HistoryMax
	}
	return nil
}

func (x *FurnitureNpc) GetDayMax() []*DamageItem {
	if x != nil {
		return x.DayMax
	}
	return nil
}

func (x *FurnitureNpc) GetBosstype() uint32 {
	if x != nil && x.Bosstype != nil {
		return *x.Bosstype
	}
	return Default_FurnitureNpc_Bosstype
}

type Furniture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *uint32           `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Angle      *uint32           `protobuf:"varint,2,opt,name=angle,def=0" json:"angle,omitempty"`
	Lv         *uint32           `protobuf:"varint,3,opt,name=lv,def=0" json:"lv,omitempty"`
	Row        *uint32           `protobuf:"varint,4,opt,name=row,def=0" json:"row,omitempty"`
	Col        *uint32           `protobuf:"varint,5,opt,name=col,def=0" json:"col,omitempty"`
	Floor      *uint32           `protobuf:"varint,6,opt,name=floor,def=0" json:"floor,omitempty"`
	Rewardtime *uint32           `protobuf:"varint,7,opt,name=rewardtime,def=0" json:"rewardtime,omitempty"`
	State      *EFurnitureState  `protobuf:"varint,8,opt,name=state,enum=Cmd.EFurnitureState,def=0" json:"state,omitempty"`
	Guid       *string           `protobuf:"bytes,9,opt,name=guid" json:"guid,omitempty"`
	OldGuid    *string           `protobuf:"bytes,10,opt,name=old_guid,json=oldGuid" json:"old_guid,omitempty"`
	Var        []byte            `protobuf:"bytes,11,opt,name=var" json:"var,omitempty"`
	Seats      []*FurnitureSeat  `protobuf:"bytes,12,rep,name=seats" json:"seats,omitempty"`
	Seatskills []*FurnitureSeat  `protobuf:"bytes,13,rep,name=seatskills" json:"seatskills,omitempty"`
	Photos     []*FurniturePhoto `protobuf:"bytes,14,rep,name=photos" json:"photos,omitempty"`
	Npc        *FurnitureNpc     `protobuf:"bytes,15,opt,name=npc" json:"npc,omitempty"`
}

// Default values for Furniture fields.
const (
	Default_Furniture_Id         = uint32(0)
	Default_Furniture_Angle      = uint32(0)
	Default_Furniture_Lv         = uint32(0)
	Default_Furniture_Row        = uint32(0)
	Default_Furniture_Col        = uint32(0)
	Default_Furniture_Floor      = uint32(0)
	Default_Furniture_Rewardtime = uint32(0)
	Default_Furniture_State      = EFurnitureState_EFURNITURESTATE_MIN
)

func (x *Furniture) Reset() {
	*x = Furniture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Furniture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Furniture) ProtoMessage() {}

func (x *Furniture) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Furniture.ProtoReflect.Descriptor instead.
func (*Furniture) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{30}
}

func (x *Furniture) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_Furniture_Id
}

func (x *Furniture) GetAngle() uint32 {
	if x != nil && x.Angle != nil {
		return *x.Angle
	}
	return Default_Furniture_Angle
}

func (x *Furniture) GetLv() uint32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return Default_Furniture_Lv
}

func (x *Furniture) GetRow() uint32 {
	if x != nil && x.Row != nil {
		return *x.Row
	}
	return Default_Furniture_Row
}

func (x *Furniture) GetCol() uint32 {
	if x != nil && x.Col != nil {
		return *x.Col
	}
	return Default_Furniture_Col
}

func (x *Furniture) GetFloor() uint32 {
	if x != nil && x.Floor != nil {
		return *x.Floor
	}
	return Default_Furniture_Floor
}

func (x *Furniture) GetRewardtime() uint32 {
	if x != nil && x.Rewardtime != nil {
		return *x.Rewardtime
	}
	return Default_Furniture_Rewardtime
}

func (x *Furniture) GetState() EFurnitureState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_Furniture_State
}

func (x *Furniture) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *Furniture) GetOldGuid() string {
	if x != nil && x.OldGuid != nil {
		return *x.OldGuid
	}
	return ""
}

func (x *Furniture) GetVar() []byte {
	if x != nil {
		return x.Var
	}
	return nil
}

func (x *Furniture) GetSeats() []*FurnitureSeat {
	if x != nil {
		return x.Seats
	}
	return nil
}

func (x *Furniture) GetSeatskills() []*FurnitureSeat {
	if x != nil {
		return x.Seatskills
	}
	return nil
}

func (x *Furniture) GetPhotos() []*FurniturePhoto {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *Furniture) GetNpc() *FurnitureNpc {
	if x != nil {
		return x.Npc
	}
	return nil
}

type HomeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ownerid *uint64 `protobuf:"varint,1,opt,name=ownerid,def=0" json:"ownerid,omitempty"`
}

// Default values for HomeItem fields.
const (
	Default_HomeItem_Ownerid = uint64(0)
)

func (x *HomeItem) Reset() {
	*x = HomeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeItem) ProtoMessage() {}

func (x *HomeItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeItem.ProtoReflect.Descriptor instead.
func (*HomeItem) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{31}
}

func (x *HomeItem) GetOwnerid() uint64 {
	if x != nil && x.Ownerid != nil {
		return *x.Ownerid
	}
	return Default_HomeItem_Ownerid
}

type CupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *CupItem) Reset() {
	*x = CupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CupItem) ProtoMessage() {}

func (x *CupItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CupItem.ProtoReflect.Descriptor instead.
func (*CupItem) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{32}
}

func (x *CupItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type RedPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId *uint32 `protobuf:"varint,1,opt,name=config_id,json=configId" json:"config_id,omitempty"`
	MinNum   *uint32 `protobuf:"varint,2,opt,name=min_num,json=minNum" json:"min_num,omitempty"`
	MaxNum   *uint32 `protobuf:"varint,3,opt,name=max_num,json=maxNum" json:"max_num,omitempty"`
	MinMoney *uint32 `protobuf:"varint,4,opt,name=min_money,json=minMoney" json:"min_money,omitempty"`
	MaxMoney *uint32 `protobuf:"varint,5,opt,name=max_money,json=maxMoney" json:"max_money,omitempty"`
}

func (x *RedPacket) Reset() {
	*x = RedPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPacket) ProtoMessage() {}

func (x *RedPacket) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPacket.ProtoReflect.Descriptor instead.
func (*RedPacket) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{33}
}

func (x *RedPacket) GetConfigId() uint32 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *RedPacket) GetMinNum() uint32 {
	if x != nil && x.MinNum != nil {
		return *x.MinNum
	}
	return 0
}

func (x *RedPacket) GetMaxNum() uint32 {
	if x != nil && x.MaxNum != nil {
		return *x.MaxNum
	}
	return 0
}

func (x *RedPacket) GetMinMoney() uint32 {
	if x != nil && x.MinMoney != nil {
		return *x.MinMoney
	}
	return 0
}

func (x *RedPacket) GetMaxMoney() uint32 {
	if x != nil && x.MaxMoney != nil {
		return *x.MaxMoney
	}
	return 0
}

type ItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base           *ItemInfo       `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Equiped        *bool           `protobuf:"varint,2,opt,name=equiped,def=0" json:"equiped,omitempty"`
	Battlepoint    *uint32         `protobuf:"varint,3,opt,name=battlepoint,def=0" json:"battlepoint,omitempty"`
	Equip          *EquipData      `protobuf:"bytes,4,opt,name=equip" json:"equip,omitempty"`
	Card           []*CardData     `protobuf:"bytes,5,rep,name=card" json:"card,omitempty"`
	Enchant        *EnchantData    `protobuf:"bytes,6,opt,name=enchant" json:"enchant,omitempty"`
	Prenchant      *EnchantData    `protobuf:"bytes,7,opt,name=prenchant" json:"prenchant,omitempty"`
	Refine         *RefineData     `protobuf:"bytes,8,opt,name=refine" json:"refine,omitempty"`
	Egg            *EggData        `protobuf:"bytes,9,opt,name=egg" json:"egg,omitempty"`
	Letter         *LoveLetterData `protobuf:"bytes,10,opt,name=letter" json:"letter,omitempty"`
	Code           *CodeData       `protobuf:"bytes,11,opt,name=code" json:"code,omitempty"`
	Wedding        *WeddingData    `protobuf:"bytes,12,opt,name=wedding" json:"wedding,omitempty"`
	Sender         *SenderData     `protobuf:"bytes,13,opt,name=sender" json:"sender,omitempty"`
	Furniture      *Furniture      `protobuf:"bytes,14,opt,name=furniture" json:"furniture,omitempty"`
	Attr           *GemAttrData    `protobuf:"bytes,15,opt,name=attr" json:"attr,omitempty"`
	Skill          *GemSkillData   `protobuf:"bytes,16,opt,name=skill" json:"skill,omitempty"`
	Home           *HomeItem       `protobuf:"bytes,17,opt,name=home" json:"home,omitempty"`
	Artifact       *ArtifactData   `protobuf:"bytes,19,opt,name=artifact" json:"artifact,omitempty"`
	Cupinfo        *CupItem        `protobuf:"bytes,20,opt,name=cupinfo" json:"cupinfo,omitempty"`
	Previewattr    []*EnchantAttr  `protobuf:"bytes,21,rep,name=previewattr" json:"previewattr,omitempty"`
	Previewenchant []*EnchantData  `protobuf:"bytes,22,rep,name=previewenchant" json:"previewenchant,omitempty"`
	RedPacket      *RedPacket      `protobuf:"bytes,23,opt,name=red_packet,json=redPacket" json:"red_packet,omitempty"`
}

// Default values for ItemData fields.
const (
	Default_ItemData_Equiped     = bool(false)
	Default_ItemData_Battlepoint = uint32(0)
)

func (x *ItemData) Reset() {
	*x = ItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemData) ProtoMessage() {}

func (x *ItemData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemData.ProtoReflect.Descriptor instead.
func (*ItemData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{34}
}

func (x *ItemData) GetBase() *ItemInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ItemData) GetEquiped() bool {
	if x != nil && x.Equiped != nil {
		return *x.Equiped
	}
	return Default_ItemData_Equiped
}

func (x *ItemData) GetBattlepoint() uint32 {
	if x != nil && x.Battlepoint != nil {
		return *x.Battlepoint
	}
	return Default_ItemData_Battlepoint
}

func (x *ItemData) GetEquip() *EquipData {
	if x != nil {
		return x.Equip
	}
	return nil
}

func (x *ItemData) GetCard() []*CardData {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *ItemData) GetEnchant() *EnchantData {
	if x != nil {
		return x.Enchant
	}
	return nil
}

func (x *ItemData) GetPrenchant() *EnchantData {
	if x != nil {
		return x.Prenchant
	}
	return nil
}

func (x *ItemData) GetRefine() *RefineData {
	if x != nil {
		return x.Refine
	}
	return nil
}

func (x *ItemData) GetEgg() *EggData {
	if x != nil {
		return x.Egg
	}
	return nil
}

func (x *ItemData) GetLetter() *LoveLetterData {
	if x != nil {
		return x.Letter
	}
	return nil
}

func (x *ItemData) GetCode() *CodeData {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ItemData) GetWedding() *WeddingData {
	if x != nil {
		return x.Wedding
	}
	return nil
}

func (x *ItemData) GetSender() *SenderData {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *ItemData) GetFurniture() *Furniture {
	if x != nil {
		return x.Furniture
	}
	return nil
}

func (x *ItemData) GetAttr() *GemAttrData {
	if x != nil {
		return x.Attr
	}
	return nil
}

func (x *ItemData) GetSkill() *GemSkillData {
	if x != nil {
		return x.Skill
	}
	return nil
}

func (x *ItemData) GetHome() *HomeItem {
	if x != nil {
		return x.Home
	}
	return nil
}

func (x *ItemData) GetArtifact() *ArtifactData {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *ItemData) GetCupinfo() *CupItem {
	if x != nil {
		return x.Cupinfo
	}
	return nil
}

func (x *ItemData) GetPreviewattr() []*EnchantAttr {
	if x != nil {
		return x.Previewattr
	}
	return nil
}

func (x *ItemData) GetPreviewenchant() []*EnchantData {
	if x != nil {
		return x.Previewenchant
	}
	return nil
}

func (x *ItemData) GetRedPacket() *RedPacket {
	if x != nil {
		return x.RedPacket
	}
	return nil
}

type PackageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=1" json:"param,omitempty"`
	Type    *EPackType  `protobuf:"varint,3,opt,name=type,enum=Cmd.EPackType,def=0" json:"type,omitempty"`
	Data    []*ItemData `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
	Maxslot *uint32     `protobuf:"varint,5,opt,name=maxslot,def=0" json:"maxslot,omitempty"`
}

// Default values for PackageItem fields.
const (
	Default_PackageItem_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PackageItem_Param   = ItemParam_ITEMPARAM_PACKAGEITEM
	Default_PackageItem_Type    = EPackType_EPACKTYPE_MIN
	Default_PackageItem_Maxslot = uint32(0)
)

func (x *PackageItem) Reset() {
	*x = PackageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageItem) ProtoMessage() {}

func (x *PackageItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageItem.ProtoReflect.Descriptor instead.
func (*PackageItem) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{35}
}

func (x *PackageItem) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PackageItem_Cmd
}

func (x *PackageItem) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PackageItem_Param
}

func (x *PackageItem) GetType() EPackType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_PackageItem_Type
}

func (x *PackageItem) GetData() []*ItemData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PackageItem) GetMaxslot() uint32 {
	if x != nil && x.Maxslot != nil {
		return *x.Maxslot
	}
	return Default_PackageItem_Maxslot
}

type PackageUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param       *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=2" json:"param,omitempty"`
	Type        *EPackType  `protobuf:"varint,3,opt,name=type,enum=Cmd.EPackType,def=0" json:"type,omitempty"`
	UpdateItems []*ItemData `protobuf:"bytes,4,rep,name=updateItems" json:"updateItems,omitempty"`
	DelItems    []*ItemData `protobuf:"bytes,5,rep,name=delItems" json:"delItems,omitempty"`
}

// Default values for PackageUpdate fields.
const (
	Default_PackageUpdate_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PackageUpdate_Param = ItemParam_ITEMPARAM_PACKAGEUPDATE
	Default_PackageUpdate_Type  = EPackType_EPACKTYPE_MIN
)

func (x *PackageUpdate) Reset() {
	*x = PackageUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageUpdate) ProtoMessage() {}

func (x *PackageUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageUpdate.ProtoReflect.Descriptor instead.
func (*PackageUpdate) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{36}
}

func (x *PackageUpdate) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PackageUpdate_Cmd
}

func (x *PackageUpdate) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PackageUpdate_Param
}

func (x *PackageUpdate) GetType() EPackType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_PackageUpdate_Type
}

func (x *PackageUpdate) GetUpdateItems() []*ItemData {
	if x != nil {
		return x.UpdateItems
	}
	return nil
}

func (x *PackageUpdate) GetDelItems() []*ItemData {
	if x != nil {
		return x.DelItems
	}
	return nil
}

type ItemUse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd             *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param           *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=3" json:"param,omitempty"`
	Itemguid        *string    `protobuf:"bytes,3,opt,name=itemguid" json:"itemguid,omitempty"`
	Targets         []uint64   `protobuf:"varint,4,rep,name=targets" json:"targets,omitempty"`
	Count           *uint32    `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Value           *uint32    `protobuf:"varint,6,opt,name=value,def=0" json:"value,omitempty"`
	TargetItemguids []string   `protobuf:"bytes,7,rep,name=targetItemguids" json:"targetItemguids,omitempty"`
}

// Default values for ItemUse fields.
const (
	Default_ItemUse_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ItemUse_Param = ItemParam_ITEMPARAM_ITEMUSE
	Default_ItemUse_Value = uint32(0)
)

func (x *ItemUse) Reset() {
	*x = ItemUse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemUse) ProtoMessage() {}

func (x *ItemUse) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemUse.ProtoReflect.Descriptor instead.
func (*ItemUse) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{37}
}

func (x *ItemUse) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ItemUse_Cmd
}

func (x *ItemUse) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ItemUse_Param
}

func (x *ItemUse) GetItemguid() string {
	if x != nil && x.Itemguid != nil {
		return *x.Itemguid
	}
	return ""
}

func (x *ItemUse) GetTargets() []uint64 {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *ItemUse) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *ItemUse) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_ItemUse_Value
}

func (x *ItemUse) GetTargetItemguids() []string {
	if x != nil {
		return x.TargetItemguids
	}
	return nil
}

type SortInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid  *string `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	Index *uint32 `protobuf:"varint,2,opt,name=index,def=0" json:"index,omitempty"`
}

// Default values for SortInfo fields.
const (
	Default_SortInfo_Index = uint32(0)
)

func (x *SortInfo) Reset() {
	*x = SortInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortInfo) ProtoMessage() {}

func (x *SortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortInfo.ProtoReflect.Descriptor instead.
func (*SortInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{38}
}

func (x *SortInfo) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *SortInfo) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_SortInfo_Index
}

type PackageSort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=4" json:"param,omitempty"`
	Type  *EPackType  `protobuf:"varint,3,opt,name=type,enum=Cmd.EPackType,def=0" json:"type,omitempty"`
	Item  []*SortInfo `protobuf:"bytes,4,rep,name=item" json:"item,omitempty"`
}

// Default values for PackageSort fields.
const (
	Default_PackageSort_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PackageSort_Param = ItemParam_ITEMPARAM_PACKAGESORT
	Default_PackageSort_Type  = EPackType_EPACKTYPE_MIN
)

func (x *PackageSort) Reset() {
	*x = PackageSort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageSort) ProtoMessage() {}

func (x *PackageSort) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageSort.ProtoReflect.Descriptor instead.
func (*PackageSort) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{39}
}

func (x *PackageSort) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PackageSort_Cmd
}

func (x *PackageSort) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PackageSort_Param
}

func (x *PackageSort) GetType() EPackType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_PackageSort_Type
}

func (x *PackageSort) GetItem() []*SortInfo {
	if x != nil {
		return x.Item
	}
	return nil
}

type Equip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=5" json:"param,omitempty"`
	Oper     *EEquipOper `protobuf:"varint,3,opt,name=oper,enum=Cmd.EEquipOper,def=0" json:"oper,omitempty"`
	Pos      *EEquipPos  `protobuf:"varint,4,opt,name=pos,enum=Cmd.EEquipPos,def=0" json:"pos,omitempty"`
	Guid     *string     `protobuf:"bytes,5,opt,name=guid" json:"guid,omitempty"`
	Transfer *bool       `protobuf:"varint,6,opt,name=transfer,def=0" json:"transfer,omitempty"`
	Count    *uint32     `protobuf:"varint,7,opt,name=count,def=0" json:"count,omitempty"`
}

// Default values for Equip fields.
const (
	Default_Equip_Cmd      = Command_SCENE_USER_ITEM_PROTOCMD
	Default_Equip_Param    = ItemParam_ITEMPARAM_EQUIP
	Default_Equip_Oper     = EEquipOper_EEQUIPOPER_MIN
	Default_Equip_Pos      = EEquipPos_EEQUIPPOS_MIN
	Default_Equip_Transfer = bool(false)
	Default_Equip_Count    = uint32(0)
)

func (x *Equip) Reset() {
	*x = Equip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Equip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Equip) ProtoMessage() {}

func (x *Equip) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Equip.ProtoReflect.Descriptor instead.
func (*Equip) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{40}
}

func (x *Equip) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_Equip_Cmd
}

func (x *Equip) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_Equip_Param
}

func (x *Equip) GetOper() EEquipOper {
	if x != nil && x.Oper != nil {
		return *x.Oper
	}
	return Default_Equip_Oper
}

func (x *Equip) GetPos() EEquipPos {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_Equip_Pos
}

func (x *Equip) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *Equip) GetTransfer() bool {
	if x != nil && x.Transfer != nil {
		return *x.Transfer
	}
	return Default_Equip_Transfer
}

func (x *Equip) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_Equip_Count
}

type SItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid  *string `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	Count *uint32 `protobuf:"varint,2,opt,name=count,def=0" json:"count,omitempty"`
}

// Default values for SItem fields.
const (
	Default_SItem_Count = uint32(0)
)

func (x *SItem) Reset() {
	*x = SItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SItem) ProtoMessage() {}

func (x *SItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SItem.ProtoReflect.Descriptor instead.
func (*SItem) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{41}
}

func (x *SItem) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *SItem) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_SItem_Count
}

type SellItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=6" json:"param,omitempty"`
	Npcid *uint64    `protobuf:"varint,3,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Items []*SItem   `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

// Default values for SellItem fields.
const (
	Default_SellItem_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_SellItem_Param = ItemParam_ITEMPARAM_SELLITEM
	Default_SellItem_Npcid = uint64(0)
)

func (x *SellItem) Reset() {
	*x = SellItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellItem) ProtoMessage() {}

func (x *SellItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellItem.ProtoReflect.Descriptor instead.
func (*SellItem) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{42}
}

func (x *SellItem) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SellItem_Cmd
}

func (x *SellItem) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SellItem_Param
}

func (x *SellItem) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_SellItem_Npcid
}

func (x *SellItem) GetItems() []*SItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type EquipStrength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=7" json:"param,omitempty"`
	Guid      *string          `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Destcount *uint32          `protobuf:"varint,4,opt,name=destcount,def=0" json:"destcount,omitempty"`
	Count     *uint32          `protobuf:"varint,5,opt,name=count,def=0" json:"count,omitempty"`
	Cricount  *uint32          `protobuf:"varint,6,opt,name=cricount,def=0" json:"cricount,omitempty"`
	Oldlv     *uint32          `protobuf:"varint,7,opt,name=oldlv,def=0" json:"oldlv,omitempty"`
	Newlv     *uint32          `protobuf:"varint,8,opt,name=newlv,def=0" json:"newlv,omitempty"`
	Result    *EStrengthResult `protobuf:"varint,9,opt,name=result,enum=Cmd.EStrengthResult,def=0" json:"result,omitempty"`
	Type      *EStrengthType   `protobuf:"varint,10,opt,name=type,enum=Cmd.EStrengthType,def=0" json:"type,omitempty"`
}

// Default values for EquipStrength fields.
const (
	Default_EquipStrength_Cmd       = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipStrength_Param     = ItemParam_ITEMPARAM_EQUIPSTRENGTH
	Default_EquipStrength_Destcount = uint32(0)
	Default_EquipStrength_Count     = uint32(0)
	Default_EquipStrength_Cricount  = uint32(0)
	Default_EquipStrength_Oldlv     = uint32(0)
	Default_EquipStrength_Newlv     = uint32(0)
	Default_EquipStrength_Result    = EStrengthResult_ESTRENGTHRESULT_MIN
	Default_EquipStrength_Type      = EStrengthType_ESTRENGTHTYPE_MIN
)

func (x *EquipStrength) Reset() {
	*x = EquipStrength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipStrength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipStrength) ProtoMessage() {}

func (x *EquipStrength) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipStrength.ProtoReflect.Descriptor instead.
func (*EquipStrength) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{43}
}

func (x *EquipStrength) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipStrength_Cmd
}

func (x *EquipStrength) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipStrength_Param
}

func (x *EquipStrength) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *EquipStrength) GetDestcount() uint32 {
	if x != nil && x.Destcount != nil {
		return *x.Destcount
	}
	return Default_EquipStrength_Destcount
}

func (x *EquipStrength) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_EquipStrength_Count
}

func (x *EquipStrength) GetCricount() uint32 {
	if x != nil && x.Cricount != nil {
		return *x.Cricount
	}
	return Default_EquipStrength_Cricount
}

func (x *EquipStrength) GetOldlv() uint32 {
	if x != nil && x.Oldlv != nil {
		return *x.Oldlv
	}
	return Default_EquipStrength_Oldlv
}

func (x *EquipStrength) GetNewlv() uint32 {
	if x != nil && x.Newlv != nil {
		return *x.Newlv
	}
	return Default_EquipStrength_Newlv
}

func (x *EquipStrength) GetResult() EStrengthResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_EquipStrength_Result
}

func (x *EquipStrength) GetType() EStrengthType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_EquipStrength_Type
}

type Produce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param        *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=9" json:"param,omitempty"`
	Type         *EProduceType `protobuf:"varint,3,opt,name=type,enum=Cmd.EProduceType,def=1" json:"type,omitempty"`
	Composeid    *uint32       `protobuf:"varint,4,opt,name=composeid,def=0" json:"composeid,omitempty"`
	Npcid        *uint64       `protobuf:"varint,5,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Itemid       *uint32       `protobuf:"varint,6,opt,name=itemid,def=0" json:"itemid,omitempty"`
	Count        *uint32       `protobuf:"varint,7,opt,name=count,def=1" json:"count,omitempty"`
	Qucikproduce *bool         `protobuf:"varint,8,opt,name=qucikproduce,def=0" json:"qucikproduce,omitempty"`
}

// Default values for Produce fields.
const (
	Default_Produce_Cmd          = Command_SCENE_USER_ITEM_PROTOCMD
	Default_Produce_Param        = ItemParam_ITEMPARAM_PRODUCE
	Default_Produce_Type         = EProduceType_EPRODUCETYPE_MIN
	Default_Produce_Composeid    = uint32(0)
	Default_Produce_Npcid        = uint64(0)
	Default_Produce_Itemid       = uint32(0)
	Default_Produce_Count        = uint32(1)
	Default_Produce_Qucikproduce = bool(false)
)

func (x *Produce) Reset() {
	*x = Produce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Produce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Produce) ProtoMessage() {}

func (x *Produce) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Produce.ProtoReflect.Descriptor instead.
func (*Produce) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{44}
}

func (x *Produce) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_Produce_Cmd
}

func (x *Produce) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_Produce_Param
}

func (x *Produce) GetType() EProduceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_Produce_Type
}

func (x *Produce) GetComposeid() uint32 {
	if x != nil && x.Composeid != nil {
		return *x.Composeid
	}
	return Default_Produce_Composeid
}

func (x *Produce) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_Produce_Npcid
}

func (x *Produce) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_Produce_Itemid
}

func (x *Produce) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_Produce_Count
}

func (x *Produce) GetQucikproduce() bool {
	if x != nil && x.Qucikproduce != nil {
		return *x.Qucikproduce
	}
	return Default_Produce_Qucikproduce
}

type ProduceDone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=10" json:"param,omitempty"`
	Type   *EProduceType `protobuf:"varint,3,opt,name=type,enum=Cmd.EProduceType,def=1" json:"type,omitempty"`
	Npcid  *uint64       `protobuf:"varint,4,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Charid *uint64       `protobuf:"varint,5,opt,name=charid,def=0" json:"charid,omitempty"`
	Delay  *uint32       `protobuf:"varint,6,opt,name=delay,def=0" json:"delay,omitempty"`
	Itemid *uint32       `protobuf:"varint,7,opt,name=itemid,def=0" json:"itemid,omitempty"`
	Count  *uint32       `protobuf:"varint,8,opt,name=count" json:"count,omitempty"`
}

// Default values for ProduceDone fields.
const (
	Default_ProduceDone_Cmd    = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ProduceDone_Param  = ItemParam_ITEMPARAM_PRODUCEDONE
	Default_ProduceDone_Type   = EProduceType_EPRODUCETYPE_MIN
	Default_ProduceDone_Npcid  = uint64(0)
	Default_ProduceDone_Charid = uint64(0)
	Default_ProduceDone_Delay  = uint32(0)
	Default_ProduceDone_Itemid = uint32(0)
)

func (x *ProduceDone) Reset() {
	*x = ProduceDone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceDone) ProtoMessage() {}

func (x *ProduceDone) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceDone.ProtoReflect.Descriptor instead.
func (*ProduceDone) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{45}
}

func (x *ProduceDone) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ProduceDone_Cmd
}

func (x *ProduceDone) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ProduceDone_Param
}

func (x *ProduceDone) GetType() EProduceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ProduceDone_Type
}

func (x *ProduceDone) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_ProduceDone_Npcid
}

func (x *ProduceDone) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_ProduceDone_Charid
}

func (x *ProduceDone) GetDelay() uint32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return Default_ProduceDone_Delay
}

func (x *ProduceDone) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_ProduceDone_Itemid
}

func (x *ProduceDone) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type EquipRefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param      *ItemParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=11" json:"param,omitempty"`
	Guid       *string        `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Composeid  *uint32        `protobuf:"varint,4,opt,name=composeid,def=0" json:"composeid,omitempty"`
	Refinelv   *uint32        `protobuf:"varint,5,opt,name=refinelv,def=0" json:"refinelv,omitempty"`
	Eresult    *ERefineResult `protobuf:"varint,6,opt,name=eresult,enum=Cmd.ERefineResult,def=0" json:"eresult,omitempty"`
	Npcid      *uint64        `protobuf:"varint,7,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Saferefine *bool          `protobuf:"varint,8,opt,name=saferefine,def=0" json:"saferefine,omitempty"`
	Itemguid   []*ItemInfo    `protobuf:"bytes,9,rep,name=itemguid" json:"itemguid,omitempty"`
	ToSafelv   *uint32        `protobuf:"varint,10,opt,name=to_safelv,json=toSafelv" json:"to_safelv,omitempty"`
	Damage     *bool          `protobuf:"varint,11,opt,name=damage" json:"damage,omitempty"`
}

// Default values for EquipRefine fields.
const (
	Default_EquipRefine_Cmd        = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipRefine_Param      = ItemParam_ITEMPARAM_REFINE
	Default_EquipRefine_Composeid  = uint32(0)
	Default_EquipRefine_Refinelv   = uint32(0)
	Default_EquipRefine_Eresult    = ERefineResult_EREFINERESULT_MIN
	Default_EquipRefine_Npcid      = uint64(0)
	Default_EquipRefine_Saferefine = bool(false)
)

func (x *EquipRefine) Reset() {
	*x = EquipRefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipRefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipRefine) ProtoMessage() {}

func (x *EquipRefine) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipRefine.ProtoReflect.Descriptor instead.
func (*EquipRefine) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{46}
}

func (x *EquipRefine) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipRefine_Cmd
}

func (x *EquipRefine) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipRefine_Param
}

func (x *EquipRefine) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *EquipRefine) GetComposeid() uint32 {
	if x != nil && x.Composeid != nil {
		return *x.Composeid
	}
	return Default_EquipRefine_Composeid
}

func (x *EquipRefine) GetRefinelv() uint32 {
	if x != nil && x.Refinelv != nil {
		return *x.Refinelv
	}
	return Default_EquipRefine_Refinelv
}

func (x *EquipRefine) GetEresult() ERefineResult {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_EquipRefine_Eresult
}

func (x *EquipRefine) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_EquipRefine_Npcid
}

func (x *EquipRefine) GetSaferefine() bool {
	if x != nil && x.Saferefine != nil {
		return *x.Saferefine
	}
	return Default_EquipRefine_Saferefine
}

func (x *EquipRefine) GetItemguid() []*ItemInfo {
	if x != nil {
		return x.Itemguid
	}
	return nil
}

func (x *EquipRefine) GetToSafelv() uint32 {
	if x != nil && x.ToSafelv != nil {
		return *x.ToSafelv
	}
	return 0
}

func (x *EquipRefine) GetDamage() bool {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return false
}

type EquipDecompose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=12" json:"param,omitempty"`
	Equips []*ItemInfo       `protobuf:"bytes,3,rep,name=equips" json:"equips,omitempty"`
	Result *EDecomposeResult `protobuf:"varint,4,opt,name=result,enum=Cmd.EDecomposeResult" json:"result,omitempty"`
	Items  []*ItemInfo       `protobuf:"bytes,5,rep,name=items" json:"items,omitempty"`
}

// Default values for EquipDecompose fields.
const (
	Default_EquipDecompose_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipDecompose_Param = ItemParam_ITEMPARAM_DECOMPOSE
)

func (x *EquipDecompose) Reset() {
	*x = EquipDecompose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipDecompose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipDecompose) ProtoMessage() {}

func (x *EquipDecompose) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipDecompose.ProtoReflect.Descriptor instead.
func (*EquipDecompose) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{47}
}

func (x *EquipDecompose) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipDecompose_Cmd
}

func (x *EquipDecompose) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipDecompose_Param
}

func (x *EquipDecompose) GetEquips() []*ItemInfo {
	if x != nil {
		return x.Equips
	}
	return nil
}

func (x *EquipDecompose) GetResult() EDecomposeResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return EDecomposeResult_EDECOMPOSERESULT_MIN
}

func (x *EquipDecompose) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type DecomposeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item     *ItemInfo `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
	Rate     *uint32   `protobuf:"varint,2,opt,name=rate,def=0" json:"rate,omitempty"`
	MinCount *uint32   `protobuf:"varint,3,opt,name=min_count,json=minCount,def=0" json:"min_count,omitempty"`
	MaxCount *uint32   `protobuf:"varint,4,opt,name=max_count,json=maxCount,def=0" json:"max_count,omitempty"`
}

// Default values for DecomposeResult fields.
const (
	Default_DecomposeResult_Rate     = uint32(0)
	Default_DecomposeResult_MinCount = uint32(0)
	Default_DecomposeResult_MaxCount = uint32(0)
)

func (x *DecomposeResult) Reset() {
	*x = DecomposeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecomposeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecomposeResult) ProtoMessage() {}

func (x *DecomposeResult) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecomposeResult.ProtoReflect.Descriptor instead.
func (*DecomposeResult) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{48}
}

func (x *DecomposeResult) GetItem() *ItemInfo {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *DecomposeResult) GetRate() uint32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return Default_DecomposeResult_Rate
}

func (x *DecomposeResult) GetMinCount() uint32 {
	if x != nil && x.MinCount != nil {
		return *x.MinCount
	}
	return Default_DecomposeResult_MinCount
}

func (x *DecomposeResult) GetMaxCount() uint32 {
	if x != nil && x.MaxCount != nil {
		return *x.MaxCount
	}
	return Default_DecomposeResult_MaxCount
}

type QueryEquipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=13" json:"param,omitempty"`
	Guid  *string    `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Data  *EquipData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

// Default values for QueryEquipData fields.
const (
	Default_QueryEquipData_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QueryEquipData_Param = ItemParam_ITEMPARAM_QUERYEQUIPDATA
)

func (x *QueryEquipData) Reset() {
	*x = QueryEquipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEquipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEquipData) ProtoMessage() {}

func (x *QueryEquipData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEquipData.ProtoReflect.Descriptor instead.
func (*QueryEquipData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{49}
}

func (x *QueryEquipData) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryEquipData_Cmd
}

func (x *QueryEquipData) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryEquipData_Param
}

func (x *QueryEquipData) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *QueryEquipData) GetData() *EquipData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BrowsePackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=14" json:"param,omitempty"`
	Type  *EPackType `protobuf:"varint,3,opt,name=type,enum=Cmd.EPackType,def=0" json:"type,omitempty"`
}

// Default values for BrowsePackage fields.
const (
	Default_BrowsePackage_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_BrowsePackage_Param = ItemParam_ITEMPARAM_BROWSEPACK
	Default_BrowsePackage_Type  = EPackType_EPACKTYPE_MIN
)

func (x *BrowsePackage) Reset() {
	*x = BrowsePackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowsePackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowsePackage) ProtoMessage() {}

func (x *BrowsePackage) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowsePackage.ProtoReflect.Descriptor instead.
func (*BrowsePackage) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{50}
}

func (x *BrowsePackage) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BrowsePackage_Cmd
}

func (x *BrowsePackage) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BrowsePackage_Param
}

func (x *BrowsePackage) GetType() EPackType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_BrowsePackage_Type
}

type EquipCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=15" json:"param,omitempty"`
	Oper      *ECardOper `protobuf:"varint,3,opt,name=oper,enum=Cmd.ECardOper,def=0" json:"oper,omitempty"`
	Cardguid  *string    `protobuf:"bytes,4,opt,name=cardguid" json:"cardguid,omitempty"`
	Equipguid *string    `protobuf:"bytes,5,opt,name=equipguid" json:"equipguid,omitempty"`
	Pos       *uint32    `protobuf:"varint,6,opt,name=pos,def=0" json:"pos,omitempty"`
}

// Default values for EquipCard fields.
const (
	Default_EquipCard_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipCard_Param = ItemParam_ITEMPARAM_EQUIPCARD
	Default_EquipCard_Oper  = ECardOper_ECARDOPER_MIN
	Default_EquipCard_Pos   = uint32(0)
)

func (x *EquipCard) Reset() {
	*x = EquipCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipCard) ProtoMessage() {}

func (x *EquipCard) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipCard.ProtoReflect.Descriptor instead.
func (*EquipCard) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{51}
}

func (x *EquipCard) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipCard_Cmd
}

func (x *EquipCard) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipCard_Param
}

func (x *EquipCard) GetOper() ECardOper {
	if x != nil && x.Oper != nil {
		return *x.Oper
	}
	return Default_EquipCard_Oper
}

func (x *EquipCard) GetCardguid() string {
	if x != nil && x.Cardguid != nil {
		return *x.Cardguid
	}
	return ""
}

func (x *EquipCard) GetEquipguid() string {
	if x != nil && x.Equipguid != nil {
		return *x.Equipguid
	}
	return ""
}

func (x *EquipCard) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_EquipCard_Pos
}

type ItemShow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=16" json:"param,omitempty"`
	Items []*ItemData `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for ItemShow fields.
const (
	Default_ItemShow_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ItemShow_Param = ItemParam_ITEMPARAM_ITEMSHOW
)

func (x *ItemShow) Reset() {
	*x = ItemShow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemShow) ProtoMessage() {}

func (x *ItemShow) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemShow.ProtoReflect.Descriptor instead.
func (*ItemShow) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{52}
}

func (x *ItemShow) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ItemShow_Cmd
}

func (x *ItemShow) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ItemShow_Param
}

func (x *ItemShow) GetItems() []*ItemData {
	if x != nil {
		return x.Items
	}
	return nil
}

type ItemShow64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=35" json:"param,omitempty"`
	Id    *uint32    `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Count *uint64    `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

// Default values for ItemShow64 fields.
const (
	Default_ItemShow64_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ItemShow64_Param = ItemParam_ITEMPARAM_ITEMSHOW64
)

func (x *ItemShow64) Reset() {
	*x = ItemShow64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemShow64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemShow64) ProtoMessage() {}

func (x *ItemShow64) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemShow64.ProtoReflect.Descriptor instead.
func (*ItemShow64) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{53}
}

func (x *ItemShow64) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ItemShow64_Cmd
}

func (x *ItemShow64) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ItemShow64_Param
}

func (x *ItemShow64) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ItemShow64) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type EquipRepair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param      *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=17" json:"param,omitempty"`
	Targetguid *string    `protobuf:"bytes,3,opt,name=targetguid" json:"targetguid,omitempty"`
	Success    *bool      `protobuf:"varint,4,opt,name=success,def=0" json:"success,omitempty"`
	Stuffguid  *string    `protobuf:"bytes,5,opt,name=stuffguid" json:"stuffguid,omitempty"`
}

// Default values for EquipRepair fields.
const (
	Default_EquipRepair_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipRepair_Param   = ItemParam_ITEMPARAM_REPAIR
	Default_EquipRepair_Success = bool(false)
)

func (x *EquipRepair) Reset() {
	*x = EquipRepair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipRepair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipRepair) ProtoMessage() {}

func (x *EquipRepair) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipRepair.ProtoReflect.Descriptor instead.
func (*EquipRepair) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{54}
}

func (x *EquipRepair) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipRepair_Cmd
}

func (x *EquipRepair) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipRepair_Param
}

func (x *EquipRepair) GetTargetguid() string {
	if x != nil && x.Targetguid != nil {
		return *x.Targetguid
	}
	return ""
}

func (x *EquipRepair) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_EquipRepair_Success
}

func (x *EquipRepair) GetStuffguid() string {
	if x != nil && x.Stuffguid != nil {
		return *x.Stuffguid
	}
	return ""
}

type HintNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=18" json:"param,omitempty"`
	Itemid *uint32    `protobuf:"varint,3,opt,name=itemid,def=0" json:"itemid,omitempty"`
}

// Default values for HintNtf fields.
const (
	Default_HintNtf_Cmd    = Command_SCENE_USER_ITEM_PROTOCMD
	Default_HintNtf_Param  = ItemParam_ITEMPARAM_HINTNTF
	Default_HintNtf_Itemid = uint32(0)
)

func (x *HintNtf) Reset() {
	*x = HintNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HintNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HintNtf) ProtoMessage() {}

func (x *HintNtf) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HintNtf.ProtoReflect.Descriptor instead.
func (*HintNtf) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{55}
}

func (x *HintNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HintNtf_Cmd
}

func (x *HintNtf) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HintNtf_Param
}

func (x *HintNtf) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_HintNtf_Itemid
}

type EnchantEquip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param        *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=19" json:"param,omitempty"`
	Type         *EEnchantType `protobuf:"varint,3,opt,name=type,enum=Cmd.EEnchantType,def=0" json:"type,omitempty"`
	Guid         *string       `protobuf:"bytes,4,opt,name=guid" json:"guid,omitempty"`
	IsImprove    *bool         `protobuf:"varint,5,opt,name=is_improve,json=isImprove,def=0" json:"is_improve,omitempty"`
	MustBuffItem *uint32       `protobuf:"varint,6,opt,name=must_buff_item,json=mustBuffItem,def=0" json:"must_buff_item,omitempty"`
	Count        *uint32       `protobuf:"varint,7,opt,name=count,def=1" json:"count,omitempty"`
	Lockitem     *bool         `protobuf:"varint,8,opt,name=lockitem" json:"lockitem,omitempty"`
}

// Default values for EnchantEquip fields.
const (
	Default_EnchantEquip_Cmd          = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EnchantEquip_Param        = ItemParam_ITEMPARAM_ENCHANT
	Default_EnchantEquip_Type         = EEnchantType_EENCHANTTYPE_MIN
	Default_EnchantEquip_IsImprove    = bool(false)
	Default_EnchantEquip_MustBuffItem = uint32(0)
	Default_EnchantEquip_Count        = uint32(1)
)

func (x *EnchantEquip) Reset() {
	*x = EnchantEquip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantEquip) ProtoMessage() {}

func (x *EnchantEquip) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantEquip.ProtoReflect.Descriptor instead.
func (*EnchantEquip) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{56}
}

func (x *EnchantEquip) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnchantEquip_Cmd
}

func (x *EnchantEquip) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnchantEquip_Param
}

func (x *EnchantEquip) GetType() EEnchantType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_EnchantEquip_Type
}

func (x *EnchantEquip) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *EnchantEquip) GetIsImprove() bool {
	if x != nil && x.IsImprove != nil {
		return *x.IsImprove
	}
	return Default_EnchantEquip_IsImprove
}

func (x *EnchantEquip) GetMustBuffItem() uint32 {
	if x != nil && x.MustBuffItem != nil {
		return *x.MustBuffItem
	}
	return Default_EnchantEquip_MustBuffItem
}

func (x *EnchantEquip) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_EnchantEquip_Count
}

func (x *EnchantEquip) GetLockitem() bool {
	if x != nil && x.Lockitem != nil {
		return *x.Lockitem
	}
	return false
}

type TradeComposePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComposeId *uint32 `protobuf:"varint,1,opt,name=compose_id,json=composeId" json:"compose_id,omitempty"`
	Count     *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *TradeComposePair) Reset() {
	*x = TradeComposePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeComposePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeComposePair) ProtoMessage() {}

func (x *TradeComposePair) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeComposePair.ProtoReflect.Descriptor instead.
func (*TradeComposePair) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{57}
}

func (x *TradeComposePair) GetComposeId() uint32 {
	if x != nil && x.ComposeId != nil {
		return *x.ComposeId
	}
	return 0
}

func (x *TradeComposePair) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type TradeRefineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComposeInfos []*TradeComposePair `protobuf:"bytes,1,rep,name=composeInfos" json:"composeInfos,omitempty"`
}

func (x *TradeRefineData) Reset() {
	*x = TradeRefineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefineData) ProtoMessage() {}

func (x *TradeRefineData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefineData.ProtoReflect.Descriptor instead.
func (*TradeRefineData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{58}
}

func (x *TradeRefineData) GetComposeInfos() []*TradeComposePair {
	if x != nil {
		return x.ComposeInfos
	}
	return nil
}

type TradeItemBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid      *uint32     `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	Price       *uint64     `protobuf:"varint,2,opt,name=price" json:"price,omitempty"`
	Count       *uint32     `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Guid        *string     `protobuf:"bytes,4,opt,name=guid" json:"guid,omitempty"`
	OrderId     *uint64     `protobuf:"varint,5,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	RefineLv    *uint32     `protobuf:"varint,6,opt,name=refine_lv,json=refineLv" json:"refine_lv,omitempty"`
	Overlap     *bool       `protobuf:"varint,8,opt,name=overlap" json:"overlap,omitempty"`
	IsExpired   *bool       `protobuf:"varint,9,opt,name=is_expired,json=isExpired" json:"is_expired,omitempty"`
	ItemData    *ItemData   `protobuf:"bytes,10,opt,name=item_data,json=itemData" json:"item_data,omitempty"`
	PublicityId *uint32     `protobuf:"varint,11,opt,name=publicity_id,json=publicityId,def=0" json:"publicity_id,omitempty"`
	EndTime     *uint32     `protobuf:"varint,12,opt,name=end_time,json=endTime,def=0" json:"end_time,omitempty"`
	Key         *string     `protobuf:"bytes,13,opt,name=key" json:"key,omitempty"`
	Charid      *uint64     `protobuf:"varint,14,opt,name=charid" json:"charid,omitempty"`
	Name        *string     `protobuf:"bytes,15,opt,name=name" json:"name,omitempty"`
	Type        *ETradeType `protobuf:"varint,16,opt,name=type,enum=Cmd.ETradeType,def=1" json:"type,omitempty"`
	UpRate      *uint32     `protobuf:"varint,17,opt,name=up_rate,json=upRate,def=0" json:"up_rate,omitempty"`
	DownRate    *uint32     `protobuf:"varint,18,opt,name=down_rate,json=downRate,def=0" json:"down_rate,omitempty"`
}

// Default values for TradeItemBaseInfo fields.
const (
	Default_TradeItemBaseInfo_PublicityId = uint32(0)
	Default_TradeItemBaseInfo_EndTime     = uint32(0)
	Default_TradeItemBaseInfo_Type        = ETradeType_ETRADETYPE_TRADE
	Default_TradeItemBaseInfo_UpRate      = uint32(0)
	Default_TradeItemBaseInfo_DownRate    = uint32(0)
)

func (x *TradeItemBaseInfo) Reset() {
	*x = TradeItemBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeItemBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeItemBaseInfo) ProtoMessage() {}

func (x *TradeItemBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeItemBaseInfo.ProtoReflect.Descriptor instead.
func (*TradeItemBaseInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{59}
}

func (x *TradeItemBaseInfo) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *TradeItemBaseInfo) GetPrice() uint64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *TradeItemBaseInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *TradeItemBaseInfo) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *TradeItemBaseInfo) GetOrderId() uint64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *TradeItemBaseInfo) GetRefineLv() uint32 {
	if x != nil && x.RefineLv != nil {
		return *x.RefineLv
	}
	return 0
}

func (x *TradeItemBaseInfo) GetOverlap() bool {
	if x != nil && x.Overlap != nil {
		return *x.Overlap
	}
	return false
}

func (x *TradeItemBaseInfo) GetIsExpired() bool {
	if x != nil && x.IsExpired != nil {
		return *x.IsExpired
	}
	return false
}

func (x *TradeItemBaseInfo) GetItemData() *ItemData {
	if x != nil {
		return x.ItemData
	}
	return nil
}

func (x *TradeItemBaseInfo) GetPublicityId() uint32 {
	if x != nil && x.PublicityId != nil {
		return *x.PublicityId
	}
	return Default_TradeItemBaseInfo_PublicityId
}

func (x *TradeItemBaseInfo) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return Default_TradeItemBaseInfo_EndTime
}

func (x *TradeItemBaseInfo) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *TradeItemBaseInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *TradeItemBaseInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TradeItemBaseInfo) GetType() ETradeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_TradeItemBaseInfo_Type
}

func (x *TradeItemBaseInfo) GetUpRate() uint32 {
	if x != nil && x.UpRate != nil {
		return *x.UpRate
	}
	return Default_TradeItemBaseInfo_UpRate
}

func (x *TradeItemBaseInfo) GetDownRate() uint32 {
	if x != nil && x.DownRate != nil {
		return *x.DownRate
	}
	return Default_TradeItemBaseInfo_DownRate
}

type EnchantRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=122" json:"param,omitempty"`
	Results []*EnchantData `protobuf:"bytes,3,rep,name=results" json:"results,omitempty"`
}

// Default values for EnchantRes fields.
const (
	Default_EnchantRes_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EnchantRes_Param = ItemParam_ITEMPARAM_ENCHANT_RES
)

func (x *EnchantRes) Reset() {
	*x = EnchantRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantRes) ProtoMessage() {}

func (x *EnchantRes) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantRes.ProtoReflect.Descriptor instead.
func (*EnchantRes) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{60}
}

func (x *EnchantRes) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnchantRes_Cmd
}

func (x *EnchantRes) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnchantRes_Param
}

func (x *EnchantRes) GetResults() []*EnchantData {
	if x != nil {
		return x.Results
	}
	return nil
}

type ProcessEnchantItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param       *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=20" json:"param,omitempty"`
	Save        *bool      `protobuf:"varint,3,opt,name=save,def=0" json:"save,omitempty"`
	Itemid      *string    `protobuf:"bytes,4,opt,name=itemid" json:"itemid,omitempty"`
	ChoiceIndex *uint32    `protobuf:"varint,5,opt,name=choice_index,json=choiceIndex,def=0" json:"choice_index,omitempty"`
}

// Default values for ProcessEnchantItemCmd fields.
const (
	Default_ProcessEnchantItemCmd_Cmd         = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ProcessEnchantItemCmd_Param       = ItemParam_ITEMPARAM_PROCESSENCHANT
	Default_ProcessEnchantItemCmd_Save        = bool(false)
	Default_ProcessEnchantItemCmd_ChoiceIndex = uint32(0)
)

func (x *ProcessEnchantItemCmd) Reset() {
	*x = ProcessEnchantItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessEnchantItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEnchantItemCmd) ProtoMessage() {}

func (x *ProcessEnchantItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEnchantItemCmd.ProtoReflect.Descriptor instead.
func (*ProcessEnchantItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{61}
}

func (x *ProcessEnchantItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ProcessEnchantItemCmd_Cmd
}

func (x *ProcessEnchantItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ProcessEnchantItemCmd_Param
}

func (x *ProcessEnchantItemCmd) GetSave() bool {
	if x != nil && x.Save != nil {
		return *x.Save
	}
	return Default_ProcessEnchantItemCmd_Save
}

func (x *ProcessEnchantItemCmd) GetItemid() string {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return ""
}

func (x *ProcessEnchantItemCmd) GetChoiceIndex() uint32 {
	if x != nil && x.ChoiceIndex != nil {
		return *x.ChoiceIndex
	}
	return Default_ProcessEnchantItemCmd_ChoiceIndex
}

type ExchangeMaterial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid *string `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	Num  *uint32 `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
}

func (x *ExchangeMaterial) Reset() {
	*x = ExchangeMaterial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeMaterial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeMaterial) ProtoMessage() {}

func (x *ExchangeMaterial) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeMaterial.ProtoReflect.Descriptor instead.
func (*ExchangeMaterial) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{62}
}

func (x *ExchangeMaterial) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *ExchangeMaterial) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type EquipExchangeItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=21" json:"param,omitempty"`
	Guid      *string             `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Type      *EExchangeType      `protobuf:"varint,4,opt,name=type,enum=Cmd.EExchangeType" json:"type,omitempty"`
	Materials []*ExchangeMaterial `protobuf:"bytes,5,rep,name=materials" json:"materials,omitempty"`
}

// Default values for EquipExchangeItemCmd fields.
const (
	Default_EquipExchangeItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipExchangeItemCmd_Param = ItemParam_ITEMPARAM_EQUIPEXCHANGE
)

func (x *EquipExchangeItemCmd) Reset() {
	*x = EquipExchangeItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipExchangeItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipExchangeItemCmd) ProtoMessage() {}

func (x *EquipExchangeItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipExchangeItemCmd.ProtoReflect.Descriptor instead.
func (*EquipExchangeItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{63}
}

func (x *EquipExchangeItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipExchangeItemCmd_Cmd
}

func (x *EquipExchangeItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipExchangeItemCmd_Param
}

func (x *EquipExchangeItemCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *EquipExchangeItemCmd) GetType() EExchangeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EExchangeType_EEXCHANGETYPE_MIN
}

func (x *EquipExchangeItemCmd) GetMaterials() []*ExchangeMaterial {
	if x != nil {
		return x.Materials
	}
	return nil
}

type OnOffStoreItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=22" json:"param,omitempty"`
	Open  *bool      `protobuf:"varint,3,opt,name=open,def=0" json:"open,omitempty"`
}

// Default values for OnOffStoreItemCmd fields.
const (
	Default_OnOffStoreItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_OnOffStoreItemCmd_Param = ItemParam_ITEMPARAM_ONOFFSTORE
	Default_OnOffStoreItemCmd_Open  = bool(false)
)

func (x *OnOffStoreItemCmd) Reset() {
	*x = OnOffStoreItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnOffStoreItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnOffStoreItemCmd) ProtoMessage() {}

func (x *OnOffStoreItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnOffStoreItemCmd.ProtoReflect.Descriptor instead.
func (*OnOffStoreItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{64}
}

func (x *OnOffStoreItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_OnOffStoreItemCmd_Cmd
}

func (x *OnOffStoreItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_OnOffStoreItemCmd_Param
}

func (x *OnOffStoreItemCmd) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return Default_OnOffStoreItemCmd_Open
}

type PackSlotNtfItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=23" json:"param,omitempty"`
	Type    *EPackType `protobuf:"varint,3,opt,name=type,enum=Cmd.EPackType,def=0" json:"type,omitempty"`
	Maxslot *uint32    `protobuf:"varint,4,opt,name=maxslot,def=0" json:"maxslot,omitempty"`
}

// Default values for PackSlotNtfItemCmd fields.
const (
	Default_PackSlotNtfItemCmd_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PackSlotNtfItemCmd_Param   = ItemParam_ITEMPARAM_PACKSLOTNTF
	Default_PackSlotNtfItemCmd_Type    = EPackType_EPACKTYPE_MIN
	Default_PackSlotNtfItemCmd_Maxslot = uint32(0)
)

func (x *PackSlotNtfItemCmd) Reset() {
	*x = PackSlotNtfItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackSlotNtfItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackSlotNtfItemCmd) ProtoMessage() {}

func (x *PackSlotNtfItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackSlotNtfItemCmd.ProtoReflect.Descriptor instead.
func (*PackSlotNtfItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{65}
}

func (x *PackSlotNtfItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PackSlotNtfItemCmd_Cmd
}

func (x *PackSlotNtfItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PackSlotNtfItemCmd_Param
}

func (x *PackSlotNtfItemCmd) GetType() EPackType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_PackSlotNtfItemCmd_Type
}

func (x *PackSlotNtfItemCmd) GetMaxslot() uint32 {
	if x != nil && x.Maxslot != nil {
		return *x.Maxslot
	}
	return Default_PackSlotNtfItemCmd_Maxslot
}

type RestoreEquipItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param       *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=24" json:"param,omitempty"`
	Equipid     *string    `protobuf:"bytes,3,opt,name=equipid" json:"equipid,omitempty"`
	Strengthlv  *bool      `protobuf:"varint,4,opt,name=strengthlv,def=0" json:"strengthlv,omitempty"`
	Cardids     []string   `protobuf:"bytes,5,rep,name=cardids" json:"cardids,omitempty"`
	Enchant     *bool      `protobuf:"varint,6,opt,name=enchant,def=0" json:"enchant,omitempty"`
	Upgrade     *bool      `protobuf:"varint,7,opt,name=upgrade,def=0" json:"upgrade,omitempty"`
	Strengthlv2 *bool      `protobuf:"varint,8,opt,name=strengthlv2,def=0" json:"strengthlv2,omitempty"`
}

// Default values for RestoreEquipItemCmd fields.
const (
	Default_RestoreEquipItemCmd_Cmd         = Command_SCENE_USER_ITEM_PROTOCMD
	Default_RestoreEquipItemCmd_Param       = ItemParam_ITEMPARAM_RESTOREEQUIP
	Default_RestoreEquipItemCmd_Strengthlv  = bool(false)
	Default_RestoreEquipItemCmd_Enchant     = bool(false)
	Default_RestoreEquipItemCmd_Upgrade     = bool(false)
	Default_RestoreEquipItemCmd_Strengthlv2 = bool(false)
)

func (x *RestoreEquipItemCmd) Reset() {
	*x = RestoreEquipItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreEquipItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreEquipItemCmd) ProtoMessage() {}

func (x *RestoreEquipItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreEquipItemCmd.ProtoReflect.Descriptor instead.
func (*RestoreEquipItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{66}
}

func (x *RestoreEquipItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RestoreEquipItemCmd_Cmd
}

func (x *RestoreEquipItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RestoreEquipItemCmd_Param
}

func (x *RestoreEquipItemCmd) GetEquipid() string {
	if x != nil && x.Equipid != nil {
		return *x.Equipid
	}
	return ""
}

func (x *RestoreEquipItemCmd) GetStrengthlv() bool {
	if x != nil && x.Strengthlv != nil {
		return *x.Strengthlv
	}
	return Default_RestoreEquipItemCmd_Strengthlv
}

func (x *RestoreEquipItemCmd) GetCardids() []string {
	if x != nil {
		return x.Cardids
	}
	return nil
}

func (x *RestoreEquipItemCmd) GetEnchant() bool {
	if x != nil && x.Enchant != nil {
		return *x.Enchant
	}
	return Default_RestoreEquipItemCmd_Enchant
}

func (x *RestoreEquipItemCmd) GetUpgrade() bool {
	if x != nil && x.Upgrade != nil {
		return *x.Upgrade
	}
	return Default_RestoreEquipItemCmd_Upgrade
}

func (x *RestoreEquipItemCmd) GetStrengthlv2() bool {
	if x != nil && x.Strengthlv2 != nil {
		return *x.Strengthlv2
	}
	return Default_RestoreEquipItemCmd_Strengthlv2
}

type UseCountItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=25" json:"param,omitempty"`
	Itemid *uint32    `protobuf:"varint,3,req,name=itemid" json:"itemid,omitempty"`
	Count  *uint32    `protobuf:"varint,4,opt,name=count,def=0" json:"count,omitempty"`
}

// Default values for UseCountItemCmd fields.
const (
	Default_UseCountItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_UseCountItemCmd_Param = ItemParam_ITEMPARAM_USECOUNT
	Default_UseCountItemCmd_Count = uint32(0)
)

func (x *UseCountItemCmd) Reset() {
	*x = UseCountItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseCountItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseCountItemCmd) ProtoMessage() {}

func (x *UseCountItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseCountItemCmd.ProtoReflect.Descriptor instead.
func (*UseCountItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{67}
}

func (x *UseCountItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UseCountItemCmd_Cmd
}

func (x *UseCountItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UseCountItemCmd_Param
}

func (x *UseCountItemCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *UseCountItemCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_UseCountItemCmd_Count
}

type ExchangeCardItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param      *ItemParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=28" json:"param,omitempty"`
	Type       *EExchangeCardType `protobuf:"varint,3,opt,name=type,enum=Cmd.EExchangeCardType,def=1" json:"type,omitempty"`
	Npcid      *uint64            `protobuf:"varint,4,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Material   []string           `protobuf:"bytes,5,rep,name=material" json:"material,omitempty"`
	Charid     *uint64            `protobuf:"varint,6,opt,name=charid,def=0" json:"charid,omitempty"`
	Cardid     []uint32           `protobuf:"varint,7,rep,name=cardid" json:"cardid,omitempty"`
	Anim       *bool              `protobuf:"varint,8,opt,name=anim,def=0" json:"anim,omitempty"`
	Items      []*ItemInfo        `protobuf:"bytes,9,rep,name=items" json:"items,omitempty"`
	ComposeNum *uint32            `protobuf:"varint,10,opt,name=compose_num,json=composeNum,def=1" json:"compose_num,omitempty"`
}

// Default values for ExchangeCardItemCmd fields.
const (
	Default_ExchangeCardItemCmd_Cmd        = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ExchangeCardItemCmd_Param      = ItemParam_ITEMPARAM_EXCHANGECARD
	Default_ExchangeCardItemCmd_Type       = EExchangeCardType_EEXCHANGECARDTYPE_DRAW
	Default_ExchangeCardItemCmd_Npcid      = uint64(0)
	Default_ExchangeCardItemCmd_Charid     = uint64(0)
	Default_ExchangeCardItemCmd_Anim       = bool(false)
	Default_ExchangeCardItemCmd_ComposeNum = uint32(1)
)

func (x *ExchangeCardItemCmd) Reset() {
	*x = ExchangeCardItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeCardItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeCardItemCmd) ProtoMessage() {}

func (x *ExchangeCardItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeCardItemCmd.ProtoReflect.Descriptor instead.
func (*ExchangeCardItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{68}
}

func (x *ExchangeCardItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExchangeCardItemCmd_Cmd
}

func (x *ExchangeCardItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExchangeCardItemCmd_Param
}

func (x *ExchangeCardItemCmd) GetType() EExchangeCardType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ExchangeCardItemCmd_Type
}

func (x *ExchangeCardItemCmd) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_ExchangeCardItemCmd_Npcid
}

func (x *ExchangeCardItemCmd) GetMaterial() []string {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *ExchangeCardItemCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_ExchangeCardItemCmd_Charid
}

func (x *ExchangeCardItemCmd) GetCardid() []uint32 {
	if x != nil {
		return x.Cardid
	}
	return nil
}

func (x *ExchangeCardItemCmd) GetAnim() bool {
	if x != nil && x.Anim != nil {
		return *x.Anim
	}
	return Default_ExchangeCardItemCmd_Anim
}

func (x *ExchangeCardItemCmd) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ExchangeCardItemCmd) GetComposeNum() uint32 {
	if x != nil && x.ComposeNum != nil {
		return *x.ComposeNum
	}
	return Default_ExchangeCardItemCmd_ComposeNum
}

type GetCountItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=29" json:"param,omitempty"`
	Itemid  *uint32    `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	Count   *uint32    `protobuf:"varint,4,opt,name=count,def=0" json:"count,omitempty"`
	Sources []ESource  `protobuf:"varint,5,rep,name=sources,enum=Cmd.ESource" json:"sources,omitempty"`
}

// Default values for GetCountItemCmd fields.
const (
	Default_GetCountItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_GetCountItemCmd_Param = ItemParam_ITEMPARAM_GETCOUNT
	Default_GetCountItemCmd_Count = uint32(0)
)

func (x *GetCountItemCmd) Reset() {
	*x = GetCountItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCountItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCountItemCmd) ProtoMessage() {}

func (x *GetCountItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCountItemCmd.ProtoReflect.Descriptor instead.
func (*GetCountItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{69}
}

func (x *GetCountItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GetCountItemCmd_Cmd
}

func (x *GetCountItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GetCountItemCmd_Param
}

func (x *GetCountItemCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *GetCountItemCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_GetCountItemCmd_Count
}

func (x *GetCountItemCmd) GetSources() []ESource {
	if x != nil {
		return x.Sources
	}
	return nil
}

type SaveLoveLetterCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=30" json:"param,omitempty"`
	DwID  *uint32    `protobuf:"varint,3,opt,name=dwID" json:"dwID,omitempty"`
}

// Default values for SaveLoveLetterCmd fields.
const (
	Default_SaveLoveLetterCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_SaveLoveLetterCmd_Param = ItemParam_ITEMPARAM_SAVE_LOVE_LETTER
)

func (x *SaveLoveLetterCmd) Reset() {
	*x = SaveLoveLetterCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveLoveLetterCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveLoveLetterCmd) ProtoMessage() {}

func (x *SaveLoveLetterCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveLoveLetterCmd.ProtoReflect.Descriptor instead.
func (*SaveLoveLetterCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{70}
}

func (x *SaveLoveLetterCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SaveLoveLetterCmd_Cmd
}

func (x *SaveLoveLetterCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SaveLoveLetterCmd_Param
}

func (x *SaveLoveLetterCmd) GetDwID() uint32 {
	if x != nil && x.DwID != nil {
		return *x.DwID
	}
	return 0
}

type ItemDataShow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=31" json:"param,omitempty"`
	Items []*ItemData `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for ItemDataShow fields.
const (
	Default_ItemDataShow_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ItemDataShow_Param = ItemParam_ITEMPARAM_ITEMDATASHOW
)

func (x *ItemDataShow) Reset() {
	*x = ItemDataShow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemDataShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemDataShow) ProtoMessage() {}

func (x *ItemDataShow) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemDataShow.ProtoReflect.Descriptor instead.
func (*ItemDataShow) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{71}
}

func (x *ItemDataShow) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ItemDataShow_Cmd
}

func (x *ItemDataShow) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ItemDataShow_Param
}

func (x *ItemDataShow) GetItems() []*ItemData {
	if x != nil {
		return x.Items
	}
	return nil
}

type AELotteryExtraRewardRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Gotedges []uint32 `protobuf:"varint,2,rep,name=gotedges" json:"gotedges,omitempty"`
}

func (x *AELotteryExtraRewardRecord) Reset() {
	*x = AELotteryExtraRewardRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AELotteryExtraRewardRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AELotteryExtraRewardRecord) ProtoMessage() {}

func (x *AELotteryExtraRewardRecord) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AELotteryExtraRewardRecord.ProtoReflect.Descriptor instead.
func (*AELotteryExtraRewardRecord) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{72}
}

func (x *AELotteryExtraRewardRecord) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AELotteryExtraRewardRecord) GetGotedges() []uint32 {
	if x != nil {
		return x.Gotedges
	}
	return nil
}

type LotteryCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param         *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=32" json:"param,omitempty"`
	Year          *uint32       `protobuf:"varint,3,opt,name=year" json:"year,omitempty"`
	Month         *uint32       `protobuf:"varint,4,opt,name=month" json:"month,omitempty"`
	Npcid         *uint64       `protobuf:"varint,5,opt,name=npcid" json:"npcid,omitempty"`
	SkipAnim      *bool         `protobuf:"varint,6,opt,name=skip_anim,json=skipAnim,def=0" json:"skip_anim,omitempty"`
	Price         *uint32       `protobuf:"varint,7,opt,name=price" json:"price,omitempty"`
	Ticket        *uint32       `protobuf:"varint,8,opt,name=ticket" json:"ticket,omitempty"`
	Type          *ELotteryType `protobuf:"varint,9,opt,name=type,enum=Cmd.ELotteryType" json:"type,omitempty"`
	Count         *uint32       `protobuf:"varint,10,opt,name=count" json:"count,omitempty"`
	Items         []*ItemInfo   `protobuf:"bytes,11,rep,name=items" json:"items,omitempty"`
	Charid        *uint64       `protobuf:"varint,12,opt,name=charid" json:"charid,omitempty"`
	Guid          *string       `protobuf:"bytes,13,opt,name=guid" json:"guid,omitempty"`
	TodayCnt      *uint32       `protobuf:"varint,14,opt,name=today_cnt,json=todayCnt" json:"today_cnt,omitempty"`
	TodayExtraCnt *uint32       `protobuf:"varint,15,opt,name=today_extra_cnt,json=todayExtraCnt" json:"today_extra_cnt,omitempty"`
	TodayTenCnt   *uint32       `protobuf:"varint,16,opt,name=today_ten_cnt,json=todayTenCnt" json:"today_ten_cnt,omitempty"`
	Free          *bool         `protobuf:"varint,17,opt,name=free" json:"free,omitempty"`
}

// Default values for LotteryCmd fields.
const (
	Default_LotteryCmd_Cmd      = Command_SCENE_USER_ITEM_PROTOCMD
	Default_LotteryCmd_Param    = ItemParam_ITEMPARAM_LOTTERY
	Default_LotteryCmd_SkipAnim = bool(false)
)

func (x *LotteryCmd) Reset() {
	*x = LotteryCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryCmd) ProtoMessage() {}

func (x *LotteryCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryCmd.ProtoReflect.Descriptor instead.
func (*LotteryCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{73}
}

func (x *LotteryCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LotteryCmd_Cmd
}

func (x *LotteryCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LotteryCmd_Param
}

func (x *LotteryCmd) GetYear() uint32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *LotteryCmd) GetMonth() uint32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *LotteryCmd) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return 0
}

func (x *LotteryCmd) GetSkipAnim() bool {
	if x != nil && x.SkipAnim != nil {
		return *x.SkipAnim
	}
	return Default_LotteryCmd_SkipAnim
}

func (x *LotteryCmd) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *LotteryCmd) GetTicket() uint32 {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return 0
}

func (x *LotteryCmd) GetType() ELotteryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ELotteryType_ELotteryType_Min
}

func (x *LotteryCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *LotteryCmd) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *LotteryCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *LotteryCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *LotteryCmd) GetTodayCnt() uint32 {
	if x != nil && x.TodayCnt != nil {
		return *x.TodayCnt
	}
	return 0
}

func (x *LotteryCmd) GetTodayExtraCnt() uint32 {
	if x != nil && x.TodayExtraCnt != nil {
		return *x.TodayExtraCnt
	}
	return 0
}

func (x *LotteryCmd) GetTodayTenCnt() uint32 {
	if x != nil && x.TodayTenCnt != nil {
		return *x.TodayTenCnt
	}
	return 0
}

func (x *LotteryCmd) GetFree() bool {
	if x != nil && x.Free != nil {
		return *x.Free
	}
	return false
}

type LotteryRecoveryCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=33" json:"param,omitempty"`
	Items []*SItem      `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	Npcid *uint64       `protobuf:"varint,4,opt,name=npcid" json:"npcid,omitempty"`
	Type  *ELotteryType `protobuf:"varint,5,opt,name=type,enum=Cmd.ELotteryType" json:"type,omitempty"`
}

// Default values for LotteryRecoveryCmd fields.
const (
	Default_LotteryRecoveryCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_LotteryRecoveryCmd_Param = ItemParam_ITEMPARAM_LOTTERY_RECOVERY
)

func (x *LotteryRecoveryCmd) Reset() {
	*x = LotteryRecoveryCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryRecoveryCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryRecoveryCmd) ProtoMessage() {}

func (x *LotteryRecoveryCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryRecoveryCmd.ProtoReflect.Descriptor instead.
func (*LotteryRecoveryCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{74}
}

func (x *LotteryRecoveryCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LotteryRecoveryCmd_Cmd
}

func (x *LotteryRecoveryCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LotteryRecoveryCmd_Param
}

func (x *LotteryRecoveryCmd) GetItems() []*SItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *LotteryRecoveryCmd) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return 0
}

func (x *LotteryRecoveryCmd) GetType() ELotteryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ELotteryType_ELotteryType_Min
}

type LotterySubInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid        *uint32 `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	RecoverPrice  *uint32 `protobuf:"varint,2,opt,name=recover_price,json=recoverPrice" json:"recover_price,omitempty"`
	Rate          *uint32 `protobuf:"varint,3,opt,name=rate" json:"rate,omitempty"`
	Rarity        *string `protobuf:"bytes,4,opt,name=rarity" json:"rarity,omitempty"`
	CurBatch      *bool   `protobuf:"varint,5,opt,name=cur_batch,json=curBatch" json:"cur_batch,omitempty"`
	Itemtype      *uint32 `protobuf:"varint,6,opt,name=itemtype" json:"itemtype,omitempty"`
	RecoverItemid *uint32 `protobuf:"varint,7,opt,name=recover_itemid,json=recoverItemid" json:"recover_itemid,omitempty"`
	Count         *uint32 `protobuf:"varint,8,opt,name=count" json:"count,omitempty"`
	FemaleItemid  *uint32 `protobuf:"varint,9,opt,name=female_itemid,json=femaleItemid" json:"female_itemid,omitempty"`
	SafetyRate    *uint32 `protobuf:"varint,10,opt,name=safety_rate,json=safetyRate" json:"safety_rate,omitempty"`
	UpBegin       *uint32 `protobuf:"varint,11,opt,name=up_begin,json=upBegin" json:"up_begin,omitempty"`
	UpEnd         *uint32 `protobuf:"varint,12,opt,name=up_end,json=upEnd" json:"up_end,omitempty"`
	TimeShow      *uint32 `protobuf:"varint,13,opt,name=time_show,json=timeShow" json:"time_show,omitempty"`
	LotteryId     *uint32 `protobuf:"varint,14,opt,name=lottery_id,json=lotteryId" json:"lottery_id,omitempty"`
}

func (x *LotterySubInfo) Reset() {
	*x = LotterySubInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotterySubInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotterySubInfo) ProtoMessage() {}

func (x *LotterySubInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotterySubInfo.ProtoReflect.Descriptor instead.
func (*LotterySubInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{75}
}

func (x *LotterySubInfo) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *LotterySubInfo) GetRecoverPrice() uint32 {
	if x != nil && x.RecoverPrice != nil {
		return *x.RecoverPrice
	}
	return 0
}

func (x *LotterySubInfo) GetRate() uint32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *LotterySubInfo) GetRarity() string {
	if x != nil && x.Rarity != nil {
		return *x.Rarity
	}
	return ""
}

func (x *LotterySubInfo) GetCurBatch() bool {
	if x != nil && x.CurBatch != nil {
		return *x.CurBatch
	}
	return false
}

func (x *LotterySubInfo) GetItemtype() uint32 {
	if x != nil && x.Itemtype != nil {
		return *x.Itemtype
	}
	return 0
}

func (x *LotterySubInfo) GetRecoverItemid() uint32 {
	if x != nil && x.RecoverItemid != nil {
		return *x.RecoverItemid
	}
	return 0
}

func (x *LotterySubInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *LotterySubInfo) GetFemaleItemid() uint32 {
	if x != nil && x.FemaleItemid != nil {
		return *x.FemaleItemid
	}
	return 0
}

func (x *LotterySubInfo) GetSafetyRate() uint32 {
	if x != nil && x.SafetyRate != nil {
		return *x.SafetyRate
	}
	return 0
}

func (x *LotterySubInfo) GetUpBegin() uint32 {
	if x != nil && x.UpBegin != nil {
		return *x.UpBegin
	}
	return 0
}

func (x *LotterySubInfo) GetUpEnd() uint32 {
	if x != nil && x.UpEnd != nil {
		return *x.UpEnd
	}
	return 0
}

func (x *LotterySubInfo) GetTimeShow() uint32 {
	if x != nil && x.TimeShow != nil {
		return *x.TimeShow
	}
	return 0
}

func (x *LotterySubInfo) GetLotteryId() uint32 {
	if x != nil && x.LotteryId != nil {
		return *x.LotteryId
	}
	return 0
}

type LotteryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year       *uint32           `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month      *uint32           `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	Price      *uint32           `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
	Discount   *uint32           `protobuf:"varint,4,opt,name=discount" json:"discount,omitempty"`
	SubInfo    []*LotterySubInfo `protobuf:"bytes,5,rep,name=subInfo" json:"subInfo,omitempty"`
	Lotterybox *uint32           `protobuf:"varint,6,opt,name=lotterybox" json:"lotterybox,omitempty"`
}

func (x *LotteryInfo) Reset() {
	*x = LotteryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryInfo) ProtoMessage() {}

func (x *LotteryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryInfo.ProtoReflect.Descriptor instead.
func (*LotteryInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{76}
}

func (x *LotteryInfo) GetYear() uint32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *LotteryInfo) GetMonth() uint32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *LotteryInfo) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *LotteryInfo) GetDiscount() uint32 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *LotteryInfo) GetSubInfo() []*LotterySubInfo {
	if x != nil {
		return x.SubInfo
	}
	return nil
}

func (x *LotteryInfo) GetLotterybox() uint32 {
	if x != nil && x.Lotterybox != nil {
		return *x.Lotterybox
	}
	return 0
}

type MixLotteryiUseCoinCntInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etype    *EMixlotteryUseCoinType `protobuf:"varint,1,opt,name=etype,enum=Cmd.EMixlotteryUseCoinType,def=0" json:"etype,omitempty"`
	TodayCnt *uint32                 `protobuf:"varint,2,opt,name=today_cnt,json=todayCnt" json:"today_cnt,omitempty"`
	MaxCnt   *uint32                 `protobuf:"varint,3,opt,name=max_cnt,json=maxCnt" json:"max_cnt,omitempty"`
}

// Default values for MixLotteryiUseCoinCntInfo fields.
const (
	Default_MixLotteryiUseCoinCntInfo_Etype = EMixlotteryUseCoinType_EMIXLOTTERY_USECOIN_MIN
)

func (x *MixLotteryiUseCoinCntInfo) Reset() {
	*x = MixLotteryiUseCoinCntInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MixLotteryiUseCoinCntInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixLotteryiUseCoinCntInfo) ProtoMessage() {}

func (x *MixLotteryiUseCoinCntInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixLotteryiUseCoinCntInfo.ProtoReflect.Descriptor instead.
func (*MixLotteryiUseCoinCntInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{77}
}

func (x *MixLotteryiUseCoinCntInfo) GetEtype() EMixlotteryUseCoinType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_MixLotteryiUseCoinCntInfo_Etype
}

func (x *MixLotteryiUseCoinCntInfo) GetTodayCnt() uint32 {
	if x != nil && x.TodayCnt != nil {
		return *x.TodayCnt
	}
	return 0
}

func (x *MixLotteryiUseCoinCntInfo) GetMaxCnt() uint32 {
	if x != nil && x.MaxCnt != nil {
		return *x.MaxCnt
	}
	return 0
}

type LotterySafetyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemtype  *uint32 `protobuf:"varint,1,opt,name=itemtype" json:"itemtype,omitempty"`
	NeedCount *uint32 `protobuf:"varint,2,opt,name=need_count,json=needCount" json:"need_count,omitempty"`
}

func (x *LotterySafetyInfo) Reset() {
	*x = LotterySafetyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotterySafetyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotterySafetyInfo) ProtoMessage() {}

func (x *LotterySafetyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotterySafetyInfo.ProtoReflect.Descriptor instead.
func (*LotterySafetyInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{78}
}

func (x *LotterySafetyInfo) GetItemtype() uint32 {
	if x != nil && x.Itemtype != nil {
		return *x.Itemtype
	}
	return 0
}

func (x *LotterySafetyInfo) GetNeedCount() uint32 {
	if x != nil && x.NeedCount != nil {
		return *x.NeedCount
	}
	return 0
}

type QueryLotteryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command                     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param          *ItemParam                   `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=34" json:"param,omitempty"`
	Infos          []*LotteryInfo               `protobuf:"bytes,3,rep,name=infos" json:"infos,omitempty"`
	Type           *ELotteryType                `protobuf:"varint,4,opt,name=type,enum=Cmd.ELotteryType" json:"type,omitempty"`
	TodayCnt       *uint32                      `protobuf:"varint,5,opt,name=today_cnt,json=todayCnt" json:"today_cnt,omitempty"`
	MaxCnt         *uint32                      `protobuf:"varint,6,opt,name=max_cnt,json=maxCnt" json:"max_cnt,omitempty"`
	TodayExtraCnt  *uint32                      `protobuf:"varint,7,opt,name=today_extra_cnt,json=todayExtraCnt" json:"today_extra_cnt,omitempty"`
	MaxExtraCnt    *uint32                      `protobuf:"varint,8,opt,name=max_extra_cnt,json=maxExtraCnt" json:"max_extra_cnt,omitempty"`
	OnceMaxCnt     *uint32                      `protobuf:"varint,9,opt,name=once_max_cnt,json=onceMaxCnt,def=1" json:"once_max_cnt,omitempty"`
	Mixlotterycnts []*MixLotteryiUseCoinCntInfo `protobuf:"bytes,10,rep,name=mixlotterycnts" json:"mixlotterycnts,omitempty"`
	Safetyinfo     []*LotterySafetyInfo         `protobuf:"bytes,11,rep,name=safetyinfo" json:"safetyinfo,omitempty"`
	TodayTenCnt    *uint32                      `protobuf:"varint,12,opt,name=today_ten_cnt,json=todayTenCnt" json:"today_ten_cnt,omitempty"`
	MaxTenCnt      *uint32                      `protobuf:"varint,13,opt,name=max_ten_cnt,json=maxTenCnt" json:"max_ten_cnt,omitempty"`
	FreeCnt        *uint32                      `protobuf:"varint,14,opt,name=free_cnt,json=freeCnt" json:"free_cnt,omitempty"`
}

// Default values for QueryLotteryInfo fields.
const (
	Default_QueryLotteryInfo_Cmd        = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QueryLotteryInfo_Param      = ItemParam_ITEMPARAM_QUERY_LOTTERYINFO
	Default_QueryLotteryInfo_OnceMaxCnt = uint32(1)
)

func (x *QueryLotteryInfo) Reset() {
	*x = QueryLotteryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryLotteryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLotteryInfo) ProtoMessage() {}

func (x *QueryLotteryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLotteryInfo.ProtoReflect.Descriptor instead.
func (*QueryLotteryInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{79}
}

func (x *QueryLotteryInfo) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryLotteryInfo_Cmd
}

func (x *QueryLotteryInfo) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryLotteryInfo_Param
}

func (x *QueryLotteryInfo) GetInfos() []*LotteryInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *QueryLotteryInfo) GetType() ELotteryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ELotteryType_ELotteryType_Min
}

func (x *QueryLotteryInfo) GetTodayCnt() uint32 {
	if x != nil && x.TodayCnt != nil {
		return *x.TodayCnt
	}
	return 0
}

func (x *QueryLotteryInfo) GetMaxCnt() uint32 {
	if x != nil && x.MaxCnt != nil {
		return *x.MaxCnt
	}
	return 0
}

func (x *QueryLotteryInfo) GetTodayExtraCnt() uint32 {
	if x != nil && x.TodayExtraCnt != nil {
		return *x.TodayExtraCnt
	}
	return 0
}

func (x *QueryLotteryInfo) GetMaxExtraCnt() uint32 {
	if x != nil && x.MaxExtraCnt != nil {
		return *x.MaxExtraCnt
	}
	return 0
}

func (x *QueryLotteryInfo) GetOnceMaxCnt() uint32 {
	if x != nil && x.OnceMaxCnt != nil {
		return *x.OnceMaxCnt
	}
	return Default_QueryLotteryInfo_OnceMaxCnt
}

func (x *QueryLotteryInfo) GetMixlotterycnts() []*MixLotteryiUseCoinCntInfo {
	if x != nil {
		return x.Mixlotterycnts
	}
	return nil
}

func (x *QueryLotteryInfo) GetSafetyinfo() []*LotterySafetyInfo {
	if x != nil {
		return x.Safetyinfo
	}
	return nil
}

func (x *QueryLotteryInfo) GetTodayTenCnt() uint32 {
	if x != nil && x.TodayTenCnt != nil {
		return *x.TodayTenCnt
	}
	return 0
}

func (x *QueryLotteryInfo) GetMaxTenCnt() uint32 {
	if x != nil && x.MaxTenCnt != nil {
		return *x.MaxTenCnt
	}
	return 0
}

func (x *QueryLotteryInfo) GetFreeCnt() uint32 {
	if x != nil && x.FreeCnt != nil {
		return *x.FreeCnt
	}
	return 0
}

type QuotaLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *uint64     `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Type  *EQuotaType `protobuf:"varint,2,opt,name=type,enum=Cmd.EQuotaType" json:"type,omitempty"`
	Time  *uint32     `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
}

func (x *QuotaLog) Reset() {
	*x = QuotaLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaLog) ProtoMessage() {}

func (x *QuotaLog) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaLog.ProtoReflect.Descriptor instead.
func (*QuotaLog) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{80}
}

func (x *QuotaLog) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *QuotaLog) GetType() EQuotaType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EQuotaType_EQuotaType_NONE
}

func (x *QuotaLog) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type QuotaDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value      *uint64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Left       *uint64 `protobuf:"varint,2,opt,name=left" json:"left,omitempty"`
	ExpireTime *uint32 `protobuf:"varint,3,opt,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
	Time       *uint32 `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	ExpireLog  *bool   `protobuf:"varint,5,opt,name=expire_log,json=expireLog" json:"expire_log,omitempty"`
}

func (x *QuotaDetail) Reset() {
	*x = QuotaDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaDetail) ProtoMessage() {}

func (x *QuotaDetail) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaDetail.ProtoReflect.Descriptor instead.
func (*QuotaDetail) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{81}
}

func (x *QuotaDetail) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *QuotaDetail) GetLeft() uint64 {
	if x != nil && x.Left != nil {
		return *x.Left
	}
	return 0
}

func (x *QuotaDetail) GetExpireTime() uint32 {
	if x != nil && x.ExpireTime != nil {
		return *x.ExpireTime
	}
	return 0
}

func (x *QuotaDetail) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *QuotaDetail) GetExpireLog() bool {
	if x != nil && x.ExpireLog != nil {
		return *x.ExpireLog
	}
	return false
}

type ReqQuotaLogCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=40" json:"param,omitempty"`
	PageIndex *uint32     `protobuf:"varint,3,opt,name=page_index,json=pageIndex" json:"page_index,omitempty"`
	Log       []*QuotaLog `protobuf:"bytes,4,rep,name=log" json:"log,omitempty"`
}

// Default values for ReqQuotaLogCmd fields.
const (
	Default_ReqQuotaLogCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ReqQuotaLogCmd_Param = ItemParam_ITEMPARAM_REQ_QUOTA_LOG
)

func (x *ReqQuotaLogCmd) Reset() {
	*x = ReqQuotaLogCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQuotaLogCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQuotaLogCmd) ProtoMessage() {}

func (x *ReqQuotaLogCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQuotaLogCmd.ProtoReflect.Descriptor instead.
func (*ReqQuotaLogCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{82}
}

func (x *ReqQuotaLogCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqQuotaLogCmd_Cmd
}

func (x *ReqQuotaLogCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqQuotaLogCmd_Param
}

func (x *ReqQuotaLogCmd) GetPageIndex() uint32 {
	if x != nil && x.PageIndex != nil {
		return *x.PageIndex
	}
	return 0
}

func (x *ReqQuotaLogCmd) GetLog() []*QuotaLog {
	if x != nil {
		return x.Log
	}
	return nil
}

type ReqQuotaDetailCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=41" json:"param,omitempty"`
	PageIndex *uint32        `protobuf:"varint,3,opt,name=page_index,json=pageIndex" json:"page_index,omitempty"`
	Detail    []*QuotaDetail `protobuf:"bytes,4,rep,name=detail" json:"detail,omitempty"`
}

// Default values for ReqQuotaDetailCmd fields.
const (
	Default_ReqQuotaDetailCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ReqQuotaDetailCmd_Param = ItemParam_ITEMPARAM_REQ_QUOTA_DETAIL
)

func (x *ReqQuotaDetailCmd) Reset() {
	*x = ReqQuotaDetailCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQuotaDetailCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQuotaDetailCmd) ProtoMessage() {}

func (x *ReqQuotaDetailCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQuotaDetailCmd.ProtoReflect.Descriptor instead.
func (*ReqQuotaDetailCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{83}
}

func (x *ReqQuotaDetailCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqQuotaDetailCmd_Cmd
}

func (x *ReqQuotaDetailCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqQuotaDetailCmd_Param
}

func (x *ReqQuotaDetailCmd) GetPageIndex() uint32 {
	if x != nil && x.PageIndex != nil {
		return *x.PageIndex
	}
	return 0
}

func (x *ReqQuotaDetailCmd) GetDetail() []*QuotaDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type EquipPosData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos           *EEquipPos `protobuf:"varint,1,opt,name=pos,enum=Cmd.EEquipPos,def=0" json:"pos,omitempty"`
	Offstarttime  *uint32    `protobuf:"varint,2,opt,name=offstarttime,def=0" json:"offstarttime,omitempty"`
	Offendtime    *uint32    `protobuf:"varint,3,opt,name=offendtime,def=0" json:"offendtime,omitempty"`
	Protecttime   *uint32    `protobuf:"varint,4,opt,name=protecttime,def=0" json:"protecttime,omitempty"`
	Protectalways *uint32    `protobuf:"varint,5,opt,name=protectalways,def=0" json:"protectalways,omitempty"`
	Recordguid    *string    `protobuf:"bytes,6,opt,name=recordguid" json:"recordguid,omitempty"`
}

// Default values for EquipPosData fields.
const (
	Default_EquipPosData_Pos           = EEquipPos_EEQUIPPOS_MIN
	Default_EquipPosData_Offstarttime  = uint32(0)
	Default_EquipPosData_Offendtime    = uint32(0)
	Default_EquipPosData_Protecttime   = uint32(0)
	Default_EquipPosData_Protectalways = uint32(0)
)

func (x *EquipPosData) Reset() {
	*x = EquipPosData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipPosData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipPosData) ProtoMessage() {}

func (x *EquipPosData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipPosData.ProtoReflect.Descriptor instead.
func (*EquipPosData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{84}
}

func (x *EquipPosData) GetPos() EEquipPos {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_EquipPosData_Pos
}

func (x *EquipPosData) GetOffstarttime() uint32 {
	if x != nil && x.Offstarttime != nil {
		return *x.Offstarttime
	}
	return Default_EquipPosData_Offstarttime
}

func (x *EquipPosData) GetOffendtime() uint32 {
	if x != nil && x.Offendtime != nil {
		return *x.Offendtime
	}
	return Default_EquipPosData_Offendtime
}

func (x *EquipPosData) GetProtecttime() uint32 {
	if x != nil && x.Protecttime != nil {
		return *x.Protecttime
	}
	return Default_EquipPosData_Protecttime
}

func (x *EquipPosData) GetProtectalways() uint32 {
	if x != nil && x.Protectalways != nil {
		return *x.Protectalways
	}
	return Default_EquipPosData_Protectalways
}

func (x *EquipPosData) GetRecordguid() string {
	if x != nil && x.Recordguid != nil {
		return *x.Recordguid
	}
	return ""
}

type EquipPosDataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=42" json:"param,omitempty"`
	Datas []*EquipPosData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for EquipPosDataUpdate fields.
const (
	Default_EquipPosDataUpdate_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipPosDataUpdate_Param = ItemParam_ITEMPARAM_EQUIPPOSDATA_UPDATE
)

func (x *EquipPosDataUpdate) Reset() {
	*x = EquipPosDataUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipPosDataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipPosDataUpdate) ProtoMessage() {}

func (x *EquipPosDataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipPosDataUpdate.ProtoReflect.Descriptor instead.
func (*EquipPosDataUpdate) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{85}
}

func (x *EquipPosDataUpdate) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipPosDataUpdate_Cmd
}

func (x *EquipPosDataUpdate) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipPosDataUpdate_Param
}

func (x *EquipPosDataUpdate) GetDatas() []*EquipPosData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type MatItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid *uint32 `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	Num    *uint32 `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
}

func (x *MatItemInfo) Reset() {
	*x = MatItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatItemInfo) ProtoMessage() {}

func (x *MatItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatItemInfo.ProtoReflect.Descriptor instead.
func (*MatItemInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{86}
}

func (x *MatItemInfo) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *MatItemInfo) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type HighRefineMatComposeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param        *ItemParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=36" json:"param,omitempty"`
	Dataid       *uint32        `protobuf:"varint,3,opt,name=dataid" json:"dataid,omitempty"`
	Npcid        *uint64        `protobuf:"varint,4,opt,name=npcid" json:"npcid,omitempty"`
	Mainmaterial []*MatItemInfo `protobuf:"bytes,5,rep,name=mainmaterial" json:"mainmaterial,omitempty"`
	Vicematerial []*MatItemInfo `protobuf:"bytes,6,rep,name=vicematerial" json:"vicematerial,omitempty"`
	Success      *bool          `protobuf:"varint,7,opt,name=success" json:"success,omitempty"`
}

// Default values for HighRefineMatComposeCmd fields.
const (
	Default_HighRefineMatComposeCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_HighRefineMatComposeCmd_Param = ItemParam_ITEMPARAM_HIGHREFINE_MATCOMPOSE
)

func (x *HighRefineMatComposeCmd) Reset() {
	*x = HighRefineMatComposeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighRefineMatComposeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighRefineMatComposeCmd) ProtoMessage() {}

func (x *HighRefineMatComposeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighRefineMatComposeCmd.ProtoReflect.Descriptor instead.
func (*HighRefineMatComposeCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{87}
}

func (x *HighRefineMatComposeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HighRefineMatComposeCmd_Cmd
}

func (x *HighRefineMatComposeCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HighRefineMatComposeCmd_Param
}

func (x *HighRefineMatComposeCmd) GetDataid() uint32 {
	if x != nil && x.Dataid != nil {
		return *x.Dataid
	}
	return 0
}

func (x *HighRefineMatComposeCmd) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return 0
}

func (x *HighRefineMatComposeCmd) GetMainmaterial() []*MatItemInfo {
	if x != nil {
		return x.Mainmaterial
	}
	return nil
}

func (x *HighRefineMatComposeCmd) GetVicematerial() []*MatItemInfo {
	if x != nil {
		return x.Vicematerial
	}
	return nil
}

func (x *HighRefineMatComposeCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type HighRefineCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=37" json:"param,omitempty"`
	Dataid *uint32    `protobuf:"varint,3,opt,name=dataid" json:"dataid,omitempty"`
}

// Default values for HighRefineCmd fields.
const (
	Default_HighRefineCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_HighRefineCmd_Param = ItemParam_ITEMPARAM_HIGHREFINE
)

func (x *HighRefineCmd) Reset() {
	*x = HighRefineCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighRefineCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighRefineCmd) ProtoMessage() {}

func (x *HighRefineCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighRefineCmd.ProtoReflect.Descriptor instead.
func (*HighRefineCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{88}
}

func (x *HighRefineCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HighRefineCmd_Cmd
}

func (x *HighRefineCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HighRefineCmd_Param
}

func (x *HighRefineCmd) GetDataid() uint32 {
	if x != nil && x.Dataid != nil {
		return *x.Dataid
	}
	return 0
}

type HighRefineStr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level *uint32    `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	Type  *EAttrType `protobuf:"varint,2,opt,name=type,enum=Cmd.EAttrType" json:"type,omitempty"`
}

func (x *HighRefineStr) Reset() {
	*x = HighRefineStr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighRefineStr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighRefineStr) ProtoMessage() {}

func (x *HighRefineStr) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighRefineStr.ProtoReflect.Descriptor instead.
func (*HighRefineStr) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{89}
}

func (x *HighRefineStr) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *HighRefineStr) GetType() EAttrType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EAttrType_EATTRTYPE_MIN
}

type HighRefineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profession *EProfession     `protobuf:"varint,1,opt,name=profession,enum=Cmd.EProfession" json:"profession,omitempty"`
	Pos        *EEquipPos       `protobuf:"varint,2,opt,name=pos,enum=Cmd.EEquipPos" json:"pos,omitempty"`
	Item       []*HighRefineStr `protobuf:"bytes,3,rep,name=item" json:"item,omitempty"`
}

func (x *HighRefineItem) Reset() {
	*x = HighRefineItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighRefineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighRefineItem) ProtoMessage() {}

func (x *HighRefineItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighRefineItem.ProtoReflect.Descriptor instead.
func (*HighRefineItem) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{90}
}

func (x *HighRefineItem) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return EProfession_EPROFESSION_MIN
}

func (x *HighRefineItem) GetPos() EEquipPos {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return EEquipPos_EEQUIPPOS_MIN
}

func (x *HighRefineItem) GetItem() []*HighRefineStr {
	if x != nil {
		return x.Item
	}
	return nil
}

type HighRefineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos   *EEquipPos `protobuf:"varint,1,opt,name=pos,enum=Cmd.EEquipPos" json:"pos,omitempty"`
	Level []uint32   `protobuf:"varint,2,rep,name=level" json:"level,omitempty"`
}

func (x *HighRefineData) Reset() {
	*x = HighRefineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighRefineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighRefineData) ProtoMessage() {}

func (x *HighRefineData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighRefineData.ProtoReflect.Descriptor instead.
func (*HighRefineData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{91}
}

func (x *HighRefineData) GetPos() EEquipPos {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return EEquipPos_EEQUIPPOS_MIN
}

func (x *HighRefineData) GetLevel() []uint32 {
	if x != nil {
		return x.Level
	}
	return nil
}

type NtfHighRefineDataCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=38" json:"param,omitempty"`
	Datas []*HighRefineData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for NtfHighRefineDataCmd fields.
const (
	Default_NtfHighRefineDataCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_NtfHighRefineDataCmd_Param = ItemParam_ITEMPARAM_NTF_HIGHTREFINE_DATA
)

func (x *NtfHighRefineDataCmd) Reset() {
	*x = NtfHighRefineDataCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfHighRefineDataCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfHighRefineDataCmd) ProtoMessage() {}

func (x *NtfHighRefineDataCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfHighRefineDataCmd.ProtoReflect.Descriptor instead.
func (*NtfHighRefineDataCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{92}
}

func (x *NtfHighRefineDataCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfHighRefineDataCmd_Cmd
}

func (x *NtfHighRefineDataCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfHighRefineDataCmd_Param
}

func (x *NtfHighRefineDataCmd) GetDatas() []*HighRefineData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type UpdateHighRefineDataCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=39" json:"param,omitempty"`
	Data  *HighRefineData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

// Default values for UpdateHighRefineDataCmd fields.
const (
	Default_UpdateHighRefineDataCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_UpdateHighRefineDataCmd_Param = ItemParam_ITEMPARAM_UPDATE_HIGHTREFINE_DATA
)

func (x *UpdateHighRefineDataCmd) Reset() {
	*x = UpdateHighRefineDataCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHighRefineDataCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHighRefineDataCmd) ProtoMessage() {}

func (x *UpdateHighRefineDataCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHighRefineDataCmd.ProtoReflect.Descriptor instead.
func (*UpdateHighRefineDataCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{93}
}

func (x *UpdateHighRefineDataCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateHighRefineDataCmd_Cmd
}

func (x *UpdateHighRefineDataCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateHighRefineDataCmd_Param
}

func (x *UpdateHighRefineDataCmd) GetData() *HighRefineData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UseCodItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=43" json:"param,omitempty"`
	Guid  *string    `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Code  *string    `protobuf:"bytes,4,opt,name=code" json:"code,omitempty"`
}

// Default values for UseCodItemCmd fields.
const (
	Default_UseCodItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_UseCodItemCmd_Param = ItemParam_ITEMPARAM_USE_CODE_ITEM
)

func (x *UseCodItemCmd) Reset() {
	*x = UseCodItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseCodItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseCodItemCmd) ProtoMessage() {}

func (x *UseCodItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseCodItemCmd.ProtoReflect.Descriptor instead.
func (*UseCodItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{94}
}

func (x *UseCodItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UseCodItemCmd_Cmd
}

func (x *UseCodItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UseCodItemCmd_Param
}

func (x *UseCodItemCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *UseCodItemCmd) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

type AddJobLevelItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=44" json:"param,omitempty"`
	Item  *uint32    `protobuf:"varint,3,opt,name=item,def=0" json:"item,omitempty"`
	Num   *uint32    `protobuf:"varint,4,opt,name=num,def=0" json:"num,omitempty"`
}

// Default values for AddJobLevelItemCmd fields.
const (
	Default_AddJobLevelItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_AddJobLevelItemCmd_Param = ItemParam_ITEMPARAM_ADD_JOBLEVEL
	Default_AddJobLevelItemCmd_Item  = uint32(0)
	Default_AddJobLevelItemCmd_Num   = uint32(0)
)

func (x *AddJobLevelItemCmd) Reset() {
	*x = AddJobLevelItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddJobLevelItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddJobLevelItemCmd) ProtoMessage() {}

func (x *AddJobLevelItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddJobLevelItemCmd.ProtoReflect.Descriptor instead.
func (*AddJobLevelItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{95}
}

func (x *AddJobLevelItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AddJobLevelItemCmd_Cmd
}

func (x *AddJobLevelItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AddJobLevelItemCmd_Param
}

func (x *AddJobLevelItemCmd) GetItem() uint32 {
	if x != nil && x.Item != nil {
		return *x.Item
	}
	return Default_AddJobLevelItemCmd_Item
}

func (x *AddJobLevelItemCmd) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return Default_AddJobLevelItemCmd_Num
}

type LotterGivBuyCountCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=46" json:"param,omitempty"`
	GotCount *uint32    `protobuf:"varint,3,opt,name=got_count,json=gotCount" json:"got_count,omitempty"`
	MaxCount *uint32    `protobuf:"varint,4,opt,name=max_count,json=maxCount" json:"max_count,omitempty"`
}

// Default values for LotterGivBuyCountCmd fields.
const (
	Default_LotterGivBuyCountCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_LotterGivBuyCountCmd_Param = ItemParam_ITEMPARAM_LOTTERY_GIVE_BUY_COUNT
)

func (x *LotterGivBuyCountCmd) Reset() {
	*x = LotterGivBuyCountCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotterGivBuyCountCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotterGivBuyCountCmd) ProtoMessage() {}

func (x *LotterGivBuyCountCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotterGivBuyCountCmd.ProtoReflect.Descriptor instead.
func (*LotterGivBuyCountCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{96}
}

func (x *LotterGivBuyCountCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LotterGivBuyCountCmd_Cmd
}

func (x *LotterGivBuyCountCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LotterGivBuyCountCmd_Param
}

func (x *LotterGivBuyCountCmd) GetGotCount() uint32 {
	if x != nil && x.GotCount != nil {
		return *x.GotCount
	}
	return 0
}

func (x *LotterGivBuyCountCmd) GetMaxCount() uint32 {
	if x != nil && x.MaxCount != nil {
		return *x.MaxCount
	}
	return 0
}

type GiveWeddingDressCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param      *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=47" json:"param,omitempty"`
	Guid       *string    `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Content    *string    `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	Receiverid *uint64    `protobuf:"varint,8,opt,name=receiverid" json:"receiverid,omitempty"`
}

// Default values for GiveWeddingDressCmd fields.
const (
	Default_GiveWeddingDressCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_GiveWeddingDressCmd_Param = ItemParam_ITEMPARAM_GIVE_WEDDING_DRESS
)

func (x *GiveWeddingDressCmd) Reset() {
	*x = GiveWeddingDressCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiveWeddingDressCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveWeddingDressCmd) ProtoMessage() {}

func (x *GiveWeddingDressCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveWeddingDressCmd.ProtoReflect.Descriptor instead.
func (*GiveWeddingDressCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{97}
}

func (x *GiveWeddingDressCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GiveWeddingDressCmd_Cmd
}

func (x *GiveWeddingDressCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GiveWeddingDressCmd_Param
}

func (x *GiveWeddingDressCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *GiveWeddingDressCmd) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *GiveWeddingDressCmd) GetReceiverid() uint64 {
	if x != nil && x.Receiverid != nil {
		return *x.Receiverid
	}
	return 0
}

type QuickStoreItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=48" json:"param,omitempty"`
	Items []*ItemInfo `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for QuickStoreItemCmd fields.
const (
	Default_QuickStoreItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QuickStoreItemCmd_Param = ItemParam_ITEMPARAM_QUICK_STOREITEM
)

func (x *QuickStoreItemCmd) Reset() {
	*x = QuickStoreItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickStoreItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickStoreItemCmd) ProtoMessage() {}

func (x *QuickStoreItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickStoreItemCmd.ProtoReflect.Descriptor instead.
func (*QuickStoreItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{98}
}

func (x *QuickStoreItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuickStoreItemCmd_Cmd
}

func (x *QuickStoreItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuickStoreItemCmd_Param
}

func (x *QuickStoreItemCmd) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type QuickSellItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=49" json:"param,omitempty"`
	Items []*SItem   `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for QuickSellItemCmd fields.
const (
	Default_QuickSellItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QuickSellItemCmd_Param = ItemParam_ITEMPARAM_QUICK_SELLITEM
)

func (x *QuickSellItemCmd) Reset() {
	*x = QuickSellItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickSellItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickSellItemCmd) ProtoMessage() {}

func (x *QuickSellItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickSellItemCmd.ProtoReflect.Descriptor instead.
func (*QuickSellItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{99}
}

func (x *QuickSellItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuickSellItemCmd_Cmd
}

func (x *QuickSellItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuickSellItemCmd_Param
}

func (x *QuickSellItemCmd) GetItems() []*SItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type EnchantTransItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=50" json:"param,omitempty"`
	FromGuid *string    `protobuf:"bytes,3,opt,name=from_guid,json=fromGuid" json:"from_guid,omitempty"`
	ToGuid   *string    `protobuf:"bytes,4,opt,name=to_guid,json=toGuid" json:"to_guid,omitempty"`
	Success  *bool      `protobuf:"varint,5,opt,name=success,def=0" json:"success,omitempty"`
}

// Default values for EnchantTransItemCmd fields.
const (
	Default_EnchantTransItemCmd_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EnchantTransItemCmd_Param   = ItemParam_ITEMPARAM_ENCHANT_TRANS
	Default_EnchantTransItemCmd_Success = bool(false)
)

func (x *EnchantTransItemCmd) Reset() {
	*x = EnchantTransItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantTransItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantTransItemCmd) ProtoMessage() {}

func (x *EnchantTransItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantTransItemCmd.ProtoReflect.Descriptor instead.
func (*EnchantTransItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{100}
}

func (x *EnchantTransItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnchantTransItemCmd_Cmd
}

func (x *EnchantTransItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnchantTransItemCmd_Param
}

func (x *EnchantTransItemCmd) GetFromGuid() string {
	if x != nil && x.FromGuid != nil {
		return *x.FromGuid
	}
	return ""
}

func (x *EnchantTransItemCmd) GetToGuid() string {
	if x != nil && x.ToGuid != nil {
		return *x.ToGuid
	}
	return ""
}

func (x *EnchantTransItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_EnchantTransItemCmd_Success
}

type QueryLotteryHeadItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=51" json:"param,omitempty"`
	Ids   []uint32   `protobuf:"varint,3,rep,name=ids" json:"ids,omitempty"`
}

// Default values for QueryLotteryHeadItemCmd fields.
const (
	Default_QueryLotteryHeadItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QueryLotteryHeadItemCmd_Param = ItemParam_ITEMPARAM_QUERY_LOTTERYHEAD
)

func (x *QueryLotteryHeadItemCmd) Reset() {
	*x = QueryLotteryHeadItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryLotteryHeadItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLotteryHeadItemCmd) ProtoMessage() {}

func (x *QueryLotteryHeadItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLotteryHeadItemCmd.ProtoReflect.Descriptor instead.
func (*QueryLotteryHeadItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{101}
}

func (x *QueryLotteryHeadItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryLotteryHeadItemCmd_Cmd
}

func (x *QueryLotteryHeadItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryLotteryHeadItemCmd_Param
}

func (x *QueryLotteryHeadItemCmd) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type LotteryRateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Rate *uint32 `protobuf:"varint,2,opt,name=rate" json:"rate,omitempty"`
}

func (x *LotteryRateInfo) Reset() {
	*x = LotteryRateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryRateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryRateInfo) ProtoMessage() {}

func (x *LotteryRateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryRateInfo.ProtoReflect.Descriptor instead.
func (*LotteryRateInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{102}
}

func (x *LotteryRateInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *LotteryRateInfo) GetRate() uint32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

type LotteryRateQueryCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=52" json:"param,omitempty"`
	Type  *ELotteryType      `protobuf:"varint,3,opt,name=type,enum=Cmd.ELotteryType" json:"type,omitempty"`
	Infos []*LotteryRateInfo `protobuf:"bytes,4,rep,name=infos" json:"infos,omitempty"`
}

// Default values for LotteryRateQueryCmd fields.
const (
	Default_LotteryRateQueryCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_LotteryRateQueryCmd_Param = ItemParam_ITEMPARAM_LOTTERY_RATE_QUERY
)

func (x *LotteryRateQueryCmd) Reset() {
	*x = LotteryRateQueryCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryRateQueryCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryRateQueryCmd) ProtoMessage() {}

func (x *LotteryRateQueryCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryRateQueryCmd.ProtoReflect.Descriptor instead.
func (*LotteryRateQueryCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{103}
}

func (x *LotteryRateQueryCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LotteryRateQueryCmd_Cmd
}

func (x *LotteryRateQueryCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LotteryRateQueryCmd_Param
}

func (x *LotteryRateQueryCmd) GetType() ELotteryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ELotteryType_ELotteryType_Min
}

func (x *LotteryRateQueryCmd) GetInfos() []*LotteryRateInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type EquipComposeItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param          *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=53" json:"param,omitempty"`
	Id             *uint32    `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Materialequips []string   `protobuf:"bytes,4,rep,name=materialequips" json:"materialequips,omitempty"`
	Retmsg         *uint32    `protobuf:"varint,5,opt,name=retmsg,def=0" json:"retmsg,omitempty"`
}

// Default values for EquipComposeItemCmd fields.
const (
	Default_EquipComposeItemCmd_Cmd    = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipComposeItemCmd_Param  = ItemParam_ITEMPARAM_EQUIPCOMPOSE
	Default_EquipComposeItemCmd_Id     = uint32(0)
	Default_EquipComposeItemCmd_Retmsg = uint32(0)
)

func (x *EquipComposeItemCmd) Reset() {
	*x = EquipComposeItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipComposeItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipComposeItemCmd) ProtoMessage() {}

func (x *EquipComposeItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipComposeItemCmd.ProtoReflect.Descriptor instead.
func (*EquipComposeItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{104}
}

func (x *EquipComposeItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipComposeItemCmd_Cmd
}

func (x *EquipComposeItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipComposeItemCmd_Param
}

func (x *EquipComposeItemCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_EquipComposeItemCmd_Id
}

func (x *EquipComposeItemCmd) GetMaterialequips() []string {
	if x != nil {
		return x.Materialequips
	}
	return nil
}

func (x *EquipComposeItemCmd) GetRetmsg() uint32 {
	if x != nil && x.Retmsg != nil {
		return *x.Retmsg
	}
	return Default_EquipComposeItemCmd_Retmsg
}

type QueryDebtItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=54" json:"param,omitempty"`
	AccItems []*ItemData `protobuf:"bytes,3,rep,name=acc_items,json=accItems" json:"acc_items,omitempty"`
}

// Default values for QueryDebtItemCmd fields.
const (
	Default_QueryDebtItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QueryDebtItemCmd_Param = ItemParam_ITEMPARAM_QUERY_ITEMDEBT
)

func (x *QueryDebtItemCmd) Reset() {
	*x = QueryDebtItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDebtItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDebtItemCmd) ProtoMessage() {}

func (x *QueryDebtItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDebtItemCmd.ProtoReflect.Descriptor instead.
func (*QueryDebtItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{105}
}

func (x *QueryDebtItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryDebtItemCmd_Cmd
}

func (x *QueryDebtItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryDebtItemCmd_Param
}

func (x *QueryDebtItemCmd) GetAccItems() []*ItemData {
	if x != nil {
		return x.AccItems
	}
	return nil
}

type LotteryActivityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Open      *bool   `protobuf:"varint,2,opt,name=open,def=1" json:"open,omitempty"`
	Starttime *uint32 `protobuf:"varint,3,opt,name=starttime" json:"starttime,omitempty"`
	Endtime   *uint32 `protobuf:"varint,4,opt,name=endtime" json:"endtime,omitempty"`
}

// Default values for LotteryActivityInfo fields.
const (
	Default_LotteryActivityInfo_Open = bool(true)
)

func (x *LotteryActivityInfo) Reset() {
	*x = LotteryActivityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryActivityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryActivityInfo) ProtoMessage() {}

func (x *LotteryActivityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryActivityInfo.ProtoReflect.Descriptor instead.
func (*LotteryActivityInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{106}
}

func (x *LotteryActivityInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *LotteryActivityInfo) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return Default_LotteryActivityInfo_Open
}

func (x *LotteryActivityInfo) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

func (x *LotteryActivityInfo) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

type LotteryActivityNtfCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command               `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam             `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=57" json:"param,omitempty"`
	Infos []*LotteryActivityInfo `protobuf:"bytes,3,rep,name=infos" json:"infos,omitempty"`
}

// Default values for LotteryActivityNtfCmd fields.
const (
	Default_LotteryActivityNtfCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_LotteryActivityNtfCmd_Param = ItemParam_ITEMPARAM_LOTTERY_ACTIVITY_NTF
)

func (x *LotteryActivityNtfCmd) Reset() {
	*x = LotteryActivityNtfCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryActivityNtfCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryActivityNtfCmd) ProtoMessage() {}

func (x *LotteryActivityNtfCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryActivityNtfCmd.ProtoReflect.Descriptor instead.
func (*LotteryActivityNtfCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{107}
}

func (x *LotteryActivityNtfCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LotteryActivityNtfCmd_Cmd
}

func (x *LotteryActivityNtfCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LotteryActivityNtfCmd_Param
}

func (x *LotteryActivityNtfCmd) GetInfos() []*LotteryActivityInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type FavoriteItemActionItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=56" json:"param,omitempty"`
	Action   *EFavoriteAction `protobuf:"varint,3,opt,name=action,enum=Cmd.EFavoriteAction,def=0" json:"action,omitempty"`
	Guids    []string         `protobuf:"bytes,4,rep,name=guids" json:"guids,omitempty"`
	Packtype *EPackType       `protobuf:"varint,5,opt,name=packtype,enum=Cmd.EPackType,def=1" json:"packtype,omitempty"`
}

// Default values for FavoriteItemActionItemCmd fields.
const (
	Default_FavoriteItemActionItemCmd_Cmd      = Command_SCENE_USER_ITEM_PROTOCMD
	Default_FavoriteItemActionItemCmd_Param    = ItemParam_ITEMPARAM_FAVORITE_ACTION
	Default_FavoriteItemActionItemCmd_Action   = EFavoriteAction_EFAVORITEACTION_MIN
	Default_FavoriteItemActionItemCmd_Packtype = EPackType_EPACKTYPE_MAIN
)

func (x *FavoriteItemActionItemCmd) Reset() {
	*x = FavoriteItemActionItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteItemActionItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteItemActionItemCmd) ProtoMessage() {}

func (x *FavoriteItemActionItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteItemActionItemCmd.ProtoReflect.Descriptor instead.
func (*FavoriteItemActionItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{108}
}

func (x *FavoriteItemActionItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FavoriteItemActionItemCmd_Cmd
}

func (x *FavoriteItemActionItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FavoriteItemActionItemCmd_Param
}

func (x *FavoriteItemActionItemCmd) GetAction() EFavoriteAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_FavoriteItemActionItemCmd_Action
}

func (x *FavoriteItemActionItemCmd) GetGuids() []string {
	if x != nil {
		return x.Guids
	}
	return nil
}

func (x *FavoriteItemActionItemCmd) GetPacktype() EPackType {
	if x != nil && x.Packtype != nil {
		return *x.Packtype
	}
	return Default_FavoriteItemActionItemCmd_Packtype
}

type LotteryExtraBonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lotterycount *uint32     `protobuf:"varint,1,opt,name=lotterycount,def=0" json:"lotterycount,omitempty"`
	Items        []*ItemInfo `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

// Default values for LotteryExtraBonus fields.
const (
	Default_LotteryExtraBonus_Lotterycount = uint32(0)
)

func (x *LotteryExtraBonus) Reset() {
	*x = LotteryExtraBonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryExtraBonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryExtraBonus) ProtoMessage() {}

func (x *LotteryExtraBonus) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryExtraBonus.ProtoReflect.Descriptor instead.
func (*LotteryExtraBonus) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{109}
}

func (x *LotteryExtraBonus) GetLotterycount() uint32 {
	if x != nil && x.Lotterycount != nil {
		return *x.Lotterycount
	}
	return Default_LotteryExtraBonus_Lotterycount
}

func (x *LotteryExtraBonus) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type QueryLotteryExtraBonusItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param        *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=59" json:"param,omitempty"`
	Etype        *ELotteryType `protobuf:"varint,3,opt,name=etype,enum=Cmd.ELotteryType,def=0" json:"etype,omitempty"`
	Lotterycount *uint32       `protobuf:"varint,4,opt,name=lotterycount,def=0" json:"lotterycount,omitempty"`
	Extrabonus   []uint32      `protobuf:"varint,5,rep,name=extrabonus" json:"extrabonus,omitempty"`
}

// Default values for QueryLotteryExtraBonusItemCmd fields.
const (
	Default_QueryLotteryExtraBonusItemCmd_Cmd          = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QueryLotteryExtraBonusItemCmd_Param        = ItemParam_ITEMPARAM_QUERY_LOTTERY_EXTRA_BONUS
	Default_QueryLotteryExtraBonusItemCmd_Etype        = ELotteryType_ELotteryType_Min
	Default_QueryLotteryExtraBonusItemCmd_Lotterycount = uint32(0)
)

func (x *QueryLotteryExtraBonusItemCmd) Reset() {
	*x = QueryLotteryExtraBonusItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryLotteryExtraBonusItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLotteryExtraBonusItemCmd) ProtoMessage() {}

func (x *QueryLotteryExtraBonusItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLotteryExtraBonusItemCmd.ProtoReflect.Descriptor instead.
func (*QueryLotteryExtraBonusItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{110}
}

func (x *QueryLotteryExtraBonusItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryLotteryExtraBonusItemCmd_Cmd
}

func (x *QueryLotteryExtraBonusItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryLotteryExtraBonusItemCmd_Param
}

func (x *QueryLotteryExtraBonusItemCmd) GetEtype() ELotteryType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_QueryLotteryExtraBonusItemCmd_Etype
}

func (x *QueryLotteryExtraBonusItemCmd) GetLotterycount() uint32 {
	if x != nil && x.Lotterycount != nil {
		return *x.Lotterycount
	}
	return Default_QueryLotteryExtraBonusItemCmd_Lotterycount
}

func (x *QueryLotteryExtraBonusItemCmd) GetExtrabonus() []uint32 {
	if x != nil {
		return x.Extrabonus
	}
	return nil
}

type QueryLotteryExtraBonusCfgCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param      *ItemParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=120" json:"param,omitempty"`
	Etype      *ELotteryType        `protobuf:"varint,3,opt,name=etype,enum=Cmd.ELotteryType,def=0" json:"etype,omitempty"`
	Extrabonus []*LotteryExtraBonus `protobuf:"bytes,4,rep,name=extrabonus" json:"extrabonus,omitempty"`
}

// Default values for QueryLotteryExtraBonusCfgCmd fields.
const (
	Default_QueryLotteryExtraBonusCfgCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QueryLotteryExtraBonusCfgCmd_Param = ItemParam_ITEMPARAM_QUERY_LOTTERY_EXTRA_BONUS_CFG
	Default_QueryLotteryExtraBonusCfgCmd_Etype = ELotteryType_ELotteryType_Min
)

func (x *QueryLotteryExtraBonusCfgCmd) Reset() {
	*x = QueryLotteryExtraBonusCfgCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryLotteryExtraBonusCfgCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLotteryExtraBonusCfgCmd) ProtoMessage() {}

func (x *QueryLotteryExtraBonusCfgCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLotteryExtraBonusCfgCmd.ProtoReflect.Descriptor instead.
func (*QueryLotteryExtraBonusCfgCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{111}
}

func (x *QueryLotteryExtraBonusCfgCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryLotteryExtraBonusCfgCmd_Cmd
}

func (x *QueryLotteryExtraBonusCfgCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryLotteryExtraBonusCfgCmd_Param
}

func (x *QueryLotteryExtraBonusCfgCmd) GetEtype() ELotteryType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_QueryLotteryExtraBonusCfgCmd_Etype
}

func (x *QueryLotteryExtraBonusCfgCmd) GetExtrabonus() []*LotteryExtraBonus {
	if x != nil {
		return x.Extrabonus
	}
	return nil
}

type GetLotteryExtraBonusItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd                *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param              *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=60" json:"param,omitempty"`
	Etype              *ELotteryType `protobuf:"varint,3,opt,name=etype,enum=Cmd.ELotteryType,def=0" json:"etype,omitempty"`
	Lotterycount       *uint32       `protobuf:"varint,4,opt,name=lotterycount,def=0" json:"lotterycount,omitempty"`
	Npcid              *uint64       `protobuf:"varint,5,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Optionalbonusindex *uint32       `protobuf:"varint,6,opt,name=optionalbonusindex,def=0" json:"optionalbonusindex,omitempty"`
}

// Default values for GetLotteryExtraBonusItemCmd fields.
const (
	Default_GetLotteryExtraBonusItemCmd_Cmd                = Command_SCENE_USER_ITEM_PROTOCMD
	Default_GetLotteryExtraBonusItemCmd_Param              = ItemParam_ITEMPARAM_GET_LOTTERY_EXTRA_BONUS
	Default_GetLotteryExtraBonusItemCmd_Etype              = ELotteryType_ELotteryType_Min
	Default_GetLotteryExtraBonusItemCmd_Lotterycount       = uint32(0)
	Default_GetLotteryExtraBonusItemCmd_Npcid              = uint64(0)
	Default_GetLotteryExtraBonusItemCmd_Optionalbonusindex = uint32(0)
)

func (x *GetLotteryExtraBonusItemCmd) Reset() {
	*x = GetLotteryExtraBonusItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLotteryExtraBonusItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLotteryExtraBonusItemCmd) ProtoMessage() {}

func (x *GetLotteryExtraBonusItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLotteryExtraBonusItemCmd.ProtoReflect.Descriptor instead.
func (*GetLotteryExtraBonusItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{112}
}

func (x *GetLotteryExtraBonusItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GetLotteryExtraBonusItemCmd_Cmd
}

func (x *GetLotteryExtraBonusItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GetLotteryExtraBonusItemCmd_Param
}

func (x *GetLotteryExtraBonusItemCmd) GetEtype() ELotteryType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_GetLotteryExtraBonusItemCmd_Etype
}

func (x *GetLotteryExtraBonusItemCmd) GetLotterycount() uint32 {
	if x != nil && x.Lotterycount != nil {
		return *x.Lotterycount
	}
	return Default_GetLotteryExtraBonusItemCmd_Lotterycount
}

func (x *GetLotteryExtraBonusItemCmd) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_GetLotteryExtraBonusItemCmd_Npcid
}

func (x *GetLotteryExtraBonusItemCmd) GetOptionalbonusindex() uint32 {
	if x != nil && x.Optionalbonusindex != nil {
		return *x.Optionalbonusindex
	}
	return Default_GetLotteryExtraBonusItemCmd_Optionalbonusindex
}

type RollCatLitterBoxItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=58" json:"param,omitempty"`
	Count   *uint32     `protobuf:"varint,3,opt,name=count,def=0" json:"count,omitempty"`
	Rewards []*ItemInfo `protobuf:"bytes,4,rep,name=rewards" json:"rewards,omitempty"`
}

// Default values for RollCatLitterBoxItemCmd fields.
const (
	Default_RollCatLitterBoxItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_RollCatLitterBoxItemCmd_Param = ItemParam_ITEMPARAM_ROLL_CATLITTERBOX
	Default_RollCatLitterBoxItemCmd_Count = uint32(0)
)

func (x *RollCatLitterBoxItemCmd) Reset() {
	*x = RollCatLitterBoxItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollCatLitterBoxItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollCatLitterBoxItemCmd) ProtoMessage() {}

func (x *RollCatLitterBoxItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollCatLitterBoxItemCmd.ProtoReflect.Descriptor instead.
func (*RollCatLitterBoxItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{113}
}

func (x *RollCatLitterBoxItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RollCatLitterBoxItemCmd_Cmd
}

func (x *RollCatLitterBoxItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RollCatLitterBoxItemCmd_Param
}

func (x *RollCatLitterBoxItemCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_RollCatLitterBoxItemCmd_Count
}

func (x *RollCatLitterBoxItemCmd) GetRewards() []*ItemInfo {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type AlterFashionEquipBuffCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=63" json:"param,omitempty"`
	Guid    *string    `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Addbuff *bool      `protobuf:"varint,4,opt,name=addbuff,def=0" json:"addbuff,omitempty"`
}

// Default values for AlterFashionEquipBuffCmd fields.
const (
	Default_AlterFashionEquipBuffCmd_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_AlterFashionEquipBuffCmd_Param   = ItemParam_ITEMPARAM_ALTER_FASHION_EQUIP_BUFF
	Default_AlterFashionEquipBuffCmd_Addbuff = bool(false)
)

func (x *AlterFashionEquipBuffCmd) Reset() {
	*x = AlterFashionEquipBuffCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterFashionEquipBuffCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterFashionEquipBuffCmd) ProtoMessage() {}

func (x *AlterFashionEquipBuffCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterFashionEquipBuffCmd.ProtoReflect.Descriptor instead.
func (*AlterFashionEquipBuffCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{114}
}

func (x *AlterFashionEquipBuffCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AlterFashionEquipBuffCmd_Cmd
}

func (x *AlterFashionEquipBuffCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AlterFashionEquipBuffCmd_Param
}

func (x *AlterFashionEquipBuffCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *AlterFashionEquipBuffCmd) GetAddbuff() bool {
	if x != nil && x.Addbuff != nil {
		return *x.Addbuff
	}
	return Default_AlterFashionEquipBuffCmd_Addbuff
}

type RideLotteryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Itemid *uint32 `protobuf:"varint,2,opt,name=itemid,def=0" json:"itemid,omitempty"`
	Count  *uint32 `protobuf:"varint,3,opt,name=count,def=0" json:"count,omitempty"`
	Weight *uint32 `protobuf:"varint,4,opt,name=weight,def=0" json:"weight,omitempty"`
	Round  *uint32 `protobuf:"varint,5,opt,name=round,def=0" json:"round,omitempty"`
	Sold   *bool   `protobuf:"varint,6,opt,name=sold,def=0" json:"sold,omitempty"`
}

// Default values for RideLotteryInfo fields.
const (
	Default_RideLotteryInfo_Id     = uint32(0)
	Default_RideLotteryInfo_Itemid = uint32(0)
	Default_RideLotteryInfo_Count  = uint32(0)
	Default_RideLotteryInfo_Weight = uint32(0)
	Default_RideLotteryInfo_Round  = uint32(0)
	Default_RideLotteryInfo_Sold   = bool(false)
)

func (x *RideLotteryInfo) Reset() {
	*x = RideLotteryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RideLotteryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RideLotteryInfo) ProtoMessage() {}

func (x *RideLotteryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RideLotteryInfo.ProtoReflect.Descriptor instead.
func (*RideLotteryInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{115}
}

func (x *RideLotteryInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_RideLotteryInfo_Id
}

func (x *RideLotteryInfo) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_RideLotteryInfo_Itemid
}

func (x *RideLotteryInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_RideLotteryInfo_Count
}

func (x *RideLotteryInfo) GetWeight() uint32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return Default_RideLotteryInfo_Weight
}

func (x *RideLotteryInfo) GetRound() uint32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return Default_RideLotteryInfo_Round
}

func (x *RideLotteryInfo) GetSold() bool {
	if x != nil && x.Sold != nil {
		return *x.Sold
	}
	return Default_RideLotteryInfo_Sold
}

type QueryRideLotteryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param         *ItemParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=61" json:"param,omitempty"`
	Update        *bool              `protobuf:"varint,3,opt,name=update,def=0" json:"update,omitempty"`
	Finished      *bool              `protobuf:"varint,4,opt,name=finished,def=0" json:"finished,omitempty"`
	Infos         []*RideLotteryInfo `protobuf:"bytes,5,rep,name=infos" json:"infos,omitempty"`
	Skipanimation *bool              `protobuf:"varint,6,opt,name=skipanimation,def=0" json:"skipanimation,omitempty"`
	Chooseids     []uint32           `protobuf:"varint,7,rep,name=chooseids" json:"chooseids,omitempty"`
	Skinid        *uint32            `protobuf:"varint,8,opt,name=skinid,def=0" json:"skinid,omitempty"`
	Batch         *uint32            `protobuf:"varint,9,opt,name=batch,def=0" json:"batch,omitempty"`
}

// Default values for QueryRideLotteryInfo fields.
const (
	Default_QueryRideLotteryInfo_Cmd           = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QueryRideLotteryInfo_Param         = ItemParam_ITEMPARAM_QUERY_RIDELOTTERYINFO
	Default_QueryRideLotteryInfo_Update        = bool(false)
	Default_QueryRideLotteryInfo_Finished      = bool(false)
	Default_QueryRideLotteryInfo_Skipanimation = bool(false)
	Default_QueryRideLotteryInfo_Skinid        = uint32(0)
	Default_QueryRideLotteryInfo_Batch         = uint32(0)
)

func (x *QueryRideLotteryInfo) Reset() {
	*x = QueryRideLotteryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRideLotteryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRideLotteryInfo) ProtoMessage() {}

func (x *QueryRideLotteryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRideLotteryInfo.ProtoReflect.Descriptor instead.
func (*QueryRideLotteryInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{116}
}

func (x *QueryRideLotteryInfo) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryRideLotteryInfo_Cmd
}

func (x *QueryRideLotteryInfo) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryRideLotteryInfo_Param
}

func (x *QueryRideLotteryInfo) GetUpdate() bool {
	if x != nil && x.Update != nil {
		return *x.Update
	}
	return Default_QueryRideLotteryInfo_Update
}

func (x *QueryRideLotteryInfo) GetFinished() bool {
	if x != nil && x.Finished != nil {
		return *x.Finished
	}
	return Default_QueryRideLotteryInfo_Finished
}

func (x *QueryRideLotteryInfo) GetInfos() []*RideLotteryInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *QueryRideLotteryInfo) GetSkipanimation() bool {
	if x != nil && x.Skipanimation != nil {
		return *x.Skipanimation
	}
	return Default_QueryRideLotteryInfo_Skipanimation
}

func (x *QueryRideLotteryInfo) GetChooseids() []uint32 {
	if x != nil {
		return x.Chooseids
	}
	return nil
}

func (x *QueryRideLotteryInfo) GetSkinid() uint32 {
	if x != nil && x.Skinid != nil {
		return *x.Skinid
	}
	return Default_QueryRideLotteryInfo_Skinid
}

func (x *QueryRideLotteryInfo) GetBatch() uint32 {
	if x != nil && x.Batch != nil {
		return *x.Batch
	}
	return Default_QueryRideLotteryInfo_Batch
}

type ExecRideLotteryCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param         *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=62" json:"param,omitempty"`
	Id            *uint32    `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Finish        *bool      `protobuf:"varint,4,opt,name=finish,def=0" json:"finish,omitempty"`
	Skipanimation *bool      `protobuf:"varint,5,opt,name=skipanimation,def=0" json:"skipanimation,omitempty"`
	Tenpick       *bool      `protobuf:"varint,6,opt,name=tenpick,def=0" json:"tenpick,omitempty"`
	Ids           []uint32   `protobuf:"varint,7,rep,name=ids" json:"ids,omitempty"`
}

// Default values for ExecRideLotteryCmd fields.
const (
	Default_ExecRideLotteryCmd_Cmd           = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ExecRideLotteryCmd_Param         = ItemParam_ITEMPARAM_EXEC_RIDELOTTEY
	Default_ExecRideLotteryCmd_Id            = uint32(0)
	Default_ExecRideLotteryCmd_Finish        = bool(false)
	Default_ExecRideLotteryCmd_Skipanimation = bool(false)
	Default_ExecRideLotteryCmd_Tenpick       = bool(false)
)

func (x *ExecRideLotteryCmd) Reset() {
	*x = ExecRideLotteryCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecRideLotteryCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecRideLotteryCmd) ProtoMessage() {}

func (x *ExecRideLotteryCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecRideLotteryCmd.ProtoReflect.Descriptor instead.
func (*ExecRideLotteryCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{117}
}

func (x *ExecRideLotteryCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExecRideLotteryCmd_Cmd
}

func (x *ExecRideLotteryCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExecRideLotteryCmd_Param
}

func (x *ExecRideLotteryCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_ExecRideLotteryCmd_Id
}

func (x *ExecRideLotteryCmd) GetFinish() bool {
	if x != nil && x.Finish != nil {
		return *x.Finish
	}
	return Default_ExecRideLotteryCmd_Finish
}

func (x *ExecRideLotteryCmd) GetSkipanimation() bool {
	if x != nil && x.Skipanimation != nil {
		return *x.Skipanimation
	}
	return Default_ExecRideLotteryCmd_Skipanimation
}

func (x *ExecRideLotteryCmd) GetTenpick() bool {
	if x != nil && x.Tenpick != nil {
		return *x.Tenpick
	}
	return Default_ExecRideLotteryCmd_Tenpick
}

func (x *ExecRideLotteryCmd) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GemSkillAppraisalItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=64" json:"param,omitempty"`
	Itemid  *uint32    `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	Count   *uint32    `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Success *bool      `protobuf:"varint,5,opt,name=success,def=1" json:"success,omitempty"`
}

// Default values for GemSkillAppraisalItemCmd fields.
const (
	Default_GemSkillAppraisalItemCmd_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_GemSkillAppraisalItemCmd_Param   = ItemParam_ITEMPARAM_GEM_SKILL_APPRAISAL
	Default_GemSkillAppraisalItemCmd_Success = bool(true)
)

func (x *GemSkillAppraisalItemCmd) Reset() {
	*x = GemSkillAppraisalItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GemSkillAppraisalItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GemSkillAppraisalItemCmd) ProtoMessage() {}

func (x *GemSkillAppraisalItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GemSkillAppraisalItemCmd.ProtoReflect.Descriptor instead.
func (*GemSkillAppraisalItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{118}
}

func (x *GemSkillAppraisalItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GemSkillAppraisalItemCmd_Cmd
}

func (x *GemSkillAppraisalItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GemSkillAppraisalItemCmd_Param
}

func (x *GemSkillAppraisalItemCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *GemSkillAppraisalItemCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *GemSkillAppraisalItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_GemSkillAppraisalItemCmd_Success
}

type GemComposeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guids []string `protobuf:"bytes,1,rep,name=guids" json:"guids,omitempty"`
}

func (x *GemComposeGroup) Reset() {
	*x = GemComposeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GemComposeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GemComposeGroup) ProtoMessage() {}

func (x *GemComposeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GemComposeGroup.ProtoReflect.Descriptor instead.
func (*GemComposeGroup) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{119}
}

func (x *GemComposeGroup) GetGuids() []string {
	if x != nil {
		return x.Guids
	}
	return nil
}

type GemSkillComposeSameItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=65" json:"param,omitempty"`
	Groups  []*GemComposeGroup `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	Success *bool              `protobuf:"varint,4,opt,name=success,def=1" json:"success,omitempty"`
}

// Default values for GemSkillComposeSameItemCmd fields.
const (
	Default_GemSkillComposeSameItemCmd_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_GemSkillComposeSameItemCmd_Param   = ItemParam_ITEMPARAM_GEM_SKILL_COMPOSE_SAME
	Default_GemSkillComposeSameItemCmd_Success = bool(true)
)

func (x *GemSkillComposeSameItemCmd) Reset() {
	*x = GemSkillComposeSameItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GemSkillComposeSameItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GemSkillComposeSameItemCmd) ProtoMessage() {}

func (x *GemSkillComposeSameItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GemSkillComposeSameItemCmd.ProtoReflect.Descriptor instead.
func (*GemSkillComposeSameItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{120}
}

func (x *GemSkillComposeSameItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GemSkillComposeSameItemCmd_Cmd
}

func (x *GemSkillComposeSameItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GemSkillComposeSameItemCmd_Param
}

func (x *GemSkillComposeSameItemCmd) GetGroups() []*GemComposeGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *GemSkillComposeSameItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_GemSkillComposeSameItemCmd_Success
}

type GemSkillComposeQualityItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param       *ItemParam            `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=66" json:"param,omitempty"`
	ComposeType *EGemSkillComposeType `protobuf:"varint,3,opt,name=compose_type,json=composeType,enum=Cmd.EGemSkillComposeType" json:"compose_type,omitempty"`
	Groups      []*GemComposeGroup    `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	Profession  *EProfession          `protobuf:"varint,5,opt,name=profession,enum=Cmd.EProfession" json:"profession,omitempty"`
	Success     *bool                 `protobuf:"varint,6,opt,name=success,def=1" json:"success,omitempty"`
}

// Default values for GemSkillComposeQualityItemCmd fields.
const (
	Default_GemSkillComposeQualityItemCmd_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_GemSkillComposeQualityItemCmd_Param   = ItemParam_ITEMPARAM_GEM_SKILL_COMPOSE_QUALITY
	Default_GemSkillComposeQualityItemCmd_Success = bool(true)
)

func (x *GemSkillComposeQualityItemCmd) Reset() {
	*x = GemSkillComposeQualityItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GemSkillComposeQualityItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GemSkillComposeQualityItemCmd) ProtoMessage() {}

func (x *GemSkillComposeQualityItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GemSkillComposeQualityItemCmd.ProtoReflect.Descriptor instead.
func (*GemSkillComposeQualityItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{121}
}

func (x *GemSkillComposeQualityItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GemSkillComposeQualityItemCmd_Cmd
}

func (x *GemSkillComposeQualityItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GemSkillComposeQualityItemCmd_Param
}

func (x *GemSkillComposeQualityItemCmd) GetComposeType() EGemSkillComposeType {
	if x != nil && x.ComposeType != nil {
		return *x.ComposeType
	}
	return EGemSkillComposeType_EGEMCOMPOSETYPE_MIN
}

func (x *GemSkillComposeQualityItemCmd) GetGroups() []*GemComposeGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *GemSkillComposeQualityItemCmd) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return EProfession_EPROFESSION_MIN
}

func (x *GemSkillComposeQualityItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_GemSkillComposeQualityItemCmd_Success
}

type GemAttrComposeItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=67" json:"param,omitempty"`
	Level   *uint32    `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	Success *bool      `protobuf:"varint,4,opt,name=success,def=1" json:"success,omitempty"`
}

// Default values for GemAttrComposeItemCmd fields.
const (
	Default_GemAttrComposeItemCmd_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_GemAttrComposeItemCmd_Param   = ItemParam_ITEMPARAM_GEM_ATTR_COMPOSE
	Default_GemAttrComposeItemCmd_Success = bool(true)
)

func (x *GemAttrComposeItemCmd) Reset() {
	*x = GemAttrComposeItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GemAttrComposeItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GemAttrComposeItemCmd) ProtoMessage() {}

func (x *GemAttrComposeItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GemAttrComposeItemCmd.ProtoReflect.Descriptor instead.
func (*GemAttrComposeItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{122}
}

func (x *GemAttrComposeItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GemAttrComposeItemCmd_Cmd
}

func (x *GemAttrComposeItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GemAttrComposeItemCmd_Param
}

func (x *GemAttrComposeItemCmd) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *GemAttrComposeItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_GemAttrComposeItemCmd_Success
}

type GemAttrUpgradeItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=68" json:"param,omitempty"`
	Guid    *string    `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Items   []*SItem   `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
	Success *bool      `protobuf:"varint,5,opt,name=success,def=1" json:"success,omitempty"`
}

// Default values for GemAttrUpgradeItemCmd fields.
const (
	Default_GemAttrUpgradeItemCmd_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_GemAttrUpgradeItemCmd_Param   = ItemParam_ITEMPARAM_GEM_ATTR_UPGRADE
	Default_GemAttrUpgradeItemCmd_Success = bool(true)
)

func (x *GemAttrUpgradeItemCmd) Reset() {
	*x = GemAttrUpgradeItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GemAttrUpgradeItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GemAttrUpgradeItemCmd) ProtoMessage() {}

func (x *GemAttrUpgradeItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GemAttrUpgradeItemCmd.ProtoReflect.Descriptor instead.
func (*GemAttrUpgradeItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{123}
}

func (x *GemAttrUpgradeItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GemAttrUpgradeItemCmd_Cmd
}

func (x *GemAttrUpgradeItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GemAttrUpgradeItemCmd_Param
}

func (x *GemAttrUpgradeItemCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *GemAttrUpgradeItemCmd) GetItems() []*SItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GemAttrUpgradeItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_GemAttrUpgradeItemCmd_Success
}

type GemMountItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=69" json:"param,omitempty"`
	GemType *EGemType  `protobuf:"varint,3,opt,name=gem_type,json=gemType,enum=Cmd.EGemType" json:"gem_type,omitempty"`
	Guid    *string    `protobuf:"bytes,4,opt,name=guid" json:"guid,omitempty"`
	Pos     *uint32    `protobuf:"varint,5,opt,name=pos" json:"pos,omitempty"`
	Success *bool      `protobuf:"varint,6,opt,name=success,def=1" json:"success,omitempty"`
}

// Default values for GemMountItemCmd fields.
const (
	Default_GemMountItemCmd_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_GemMountItemCmd_Param   = ItemParam_ITEMPARAM_GEM_MOUNT
	Default_GemMountItemCmd_Success = bool(true)
)

func (x *GemMountItemCmd) Reset() {
	*x = GemMountItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GemMountItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GemMountItemCmd) ProtoMessage() {}

func (x *GemMountItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GemMountItemCmd.ProtoReflect.Descriptor instead.
func (*GemMountItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{124}
}

func (x *GemMountItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GemMountItemCmd_Cmd
}

func (x *GemMountItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GemMountItemCmd_Param
}

func (x *GemMountItemCmd) GetGemType() EGemType {
	if x != nil && x.GemType != nil {
		return *x.GemType
	}
	return EGemType_EGEMTYPE_MIN
}

func (x *GemMountItemCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *GemMountItemCmd) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *GemMountItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_GemMountItemCmd_Success
}

type GemUnmountItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=70" json:"param,omitempty"`
	GemType *EGemType  `protobuf:"varint,3,opt,name=gem_type,json=gemType,enum=Cmd.EGemType" json:"gem_type,omitempty"`
	Guid    *string    `protobuf:"bytes,4,opt,name=guid" json:"guid,omitempty"`
	Success *bool      `protobuf:"varint,5,opt,name=success,def=1" json:"success,omitempty"`
}

// Default values for GemUnmountItemCmd fields.
const (
	Default_GemUnmountItemCmd_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_GemUnmountItemCmd_Param   = ItemParam_ITEMPARAM_GEM_UNMOUNT
	Default_GemUnmountItemCmd_Success = bool(true)
)

func (x *GemUnmountItemCmd) Reset() {
	*x = GemUnmountItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GemUnmountItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GemUnmountItemCmd) ProtoMessage() {}

func (x *GemUnmountItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GemUnmountItemCmd.ProtoReflect.Descriptor instead.
func (*GemUnmountItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{125}
}

func (x *GemUnmountItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GemUnmountItemCmd_Cmd
}

func (x *GemUnmountItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GemUnmountItemCmd_Param
}

func (x *GemUnmountItemCmd) GetGemType() EGemType {
	if x != nil && x.GemType != nil {
		return *x.GemType
	}
	return EGemType_EGEMTYPE_MIN
}

func (x *GemUnmountItemCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *GemUnmountItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_GemUnmountItemCmd_Success
}

type GemCarveItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=71" json:"param,omitempty"`
	Guid    *string    `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Type    *uint32    `protobuf:"varint,4,opt,name=type,def=0" json:"type,omitempty"`
	Pos     *uint32    `protobuf:"varint,5,opt,name=pos,def=0" json:"pos,omitempty"`
	Reset_  *bool      `protobuf:"varint,6,opt,name=reset,def=0" json:"reset,omitempty"`
	Success *bool      `protobuf:"varint,7,opt,name=success,def=1" json:"success,omitempty"`
}

// Default values for GemCarveItemCmd fields.
const (
	Default_GemCarveItemCmd_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_GemCarveItemCmd_Param   = ItemParam_ITEMPARAM_GEM_CARVE
	Default_GemCarveItemCmd_Type    = uint32(0)
	Default_GemCarveItemCmd_Pos     = uint32(0)
	Default_GemCarveItemCmd_Reset_  = bool(false)
	Default_GemCarveItemCmd_Success = bool(true)
)

func (x *GemCarveItemCmd) Reset() {
	*x = GemCarveItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GemCarveItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GemCarveItemCmd) ProtoMessage() {}

func (x *GemCarveItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GemCarveItemCmd.ProtoReflect.Descriptor instead.
func (*GemCarveItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{126}
}

func (x *GemCarveItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GemCarveItemCmd_Cmd
}

func (x *GemCarveItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GemCarveItemCmd_Param
}

func (x *GemCarveItemCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *GemCarveItemCmd) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_GemCarveItemCmd_Type
}

func (x *GemCarveItemCmd) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_GemCarveItemCmd_Pos
}

func (x *GemCarveItemCmd) GetReset_() bool {
	if x != nil && x.Reset_ != nil {
		return *x.Reset_
	}
	return Default_GemCarveItemCmd_Reset_
}

func (x *GemCarveItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_GemCarveItemCmd_Success
}

type GemSmeltItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=74" json:"param,omitempty"`
	Itemid  *uint32            `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	Groups  []*GemComposeGroup `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	Success *bool              `protobuf:"varint,5,opt,name=success,def=1" json:"success,omitempty"`
}

// Default values for GemSmeltItemCmd fields.
const (
	Default_GemSmeltItemCmd_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_GemSmeltItemCmd_Param   = ItemParam_ITEMPARAM_GEM_SMELT
	Default_GemSmeltItemCmd_Success = bool(true)
)

func (x *GemSmeltItemCmd) Reset() {
	*x = GemSmeltItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GemSmeltItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GemSmeltItemCmd) ProtoMessage() {}

func (x *GemSmeltItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GemSmeltItemCmd.ProtoReflect.Descriptor instead.
func (*GemSmeltItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{127}
}

func (x *GemSmeltItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GemSmeltItemCmd_Cmd
}

func (x *GemSmeltItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GemSmeltItemCmd_Param
}

func (x *GemSmeltItemCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *GemSmeltItemCmd) GetGroups() []*GemComposeGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *GemSmeltItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_GemSmeltItemCmd_Success
}

type RideLotteyPickItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=72" json:"param,omitempty"`
}

// Default values for RideLotteyPickItemCmd fields.
const (
	Default_RideLotteyPickItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_RideLotteyPickItemCmd_Param = ItemParam_ITEMPARAM_RIDELOTTEY_PICKITEM
)

func (x *RideLotteyPickItemCmd) Reset() {
	*x = RideLotteyPickItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RideLotteyPickItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RideLotteyPickItemCmd) ProtoMessage() {}

func (x *RideLotteyPickItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RideLotteyPickItemCmd.ProtoReflect.Descriptor instead.
func (*RideLotteyPickItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{128}
}

func (x *RideLotteyPickItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RideLotteyPickItemCmd_Cmd
}

func (x *RideLotteyPickItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RideLotteyPickItemCmd_Param
}

type RideLotteyPickInfoCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=73" json:"param,omitempty"`
	Totalnum *uint32    `protobuf:"varint,3,opt,name=totalnum,def=0" json:"totalnum,omitempty"`
	Donenum  *uint32    `protobuf:"varint,4,opt,name=donenum,def=0" json:"donenum,omitempty"`
	Itemid   *uint32    `protobuf:"varint,5,opt,name=itemid,def=0" json:"itemid,omitempty"`
	Itemnum  *uint32    `protobuf:"varint,6,opt,name=itemnum,def=0" json:"itemnum,omitempty"`
	Done     *bool      `protobuf:"varint,7,opt,name=done,def=0" json:"done,omitempty"`
}

// Default values for RideLotteyPickInfoCmd fields.
const (
	Default_RideLotteyPickInfoCmd_Cmd      = Command_SCENE_USER_ITEM_PROTOCMD
	Default_RideLotteyPickInfoCmd_Param    = ItemParam_ITEMPARAM_RIDELOTTEY_PICKINFO
	Default_RideLotteyPickInfoCmd_Totalnum = uint32(0)
	Default_RideLotteyPickInfoCmd_Donenum  = uint32(0)
	Default_RideLotteyPickInfoCmd_Itemid   = uint32(0)
	Default_RideLotteyPickInfoCmd_Itemnum  = uint32(0)
	Default_RideLotteyPickInfoCmd_Done     = bool(false)
)

func (x *RideLotteyPickInfoCmd) Reset() {
	*x = RideLotteyPickInfoCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RideLotteyPickInfoCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RideLotteyPickInfoCmd) ProtoMessage() {}

func (x *RideLotteyPickInfoCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RideLotteyPickInfoCmd.ProtoReflect.Descriptor instead.
func (*RideLotteyPickInfoCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{129}
}

func (x *RideLotteyPickInfoCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RideLotteyPickInfoCmd_Cmd
}

func (x *RideLotteyPickInfoCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RideLotteyPickInfoCmd_Param
}

func (x *RideLotteyPickInfoCmd) GetTotalnum() uint32 {
	if x != nil && x.Totalnum != nil {
		return *x.Totalnum
	}
	return Default_RideLotteyPickInfoCmd_Totalnum
}

func (x *RideLotteyPickInfoCmd) GetDonenum() uint32 {
	if x != nil && x.Donenum != nil {
		return *x.Donenum
	}
	return Default_RideLotteyPickInfoCmd_Donenum
}

func (x *RideLotteyPickInfoCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_RideLotteyPickInfoCmd_Itemid
}

func (x *RideLotteyPickInfoCmd) GetItemnum() uint32 {
	if x != nil && x.Itemnum != nil {
		return *x.Itemnum
	}
	return Default_RideLotteyPickInfoCmd_Itemnum
}

func (x *RideLotteyPickInfoCmd) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return Default_RideLotteyPickInfoCmd_Done
}

type SandExchangeItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=75" json:"param,omitempty"`
	Items []*ItemInfo `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for SandExchangeItemCmd fields.
const (
	Default_SandExchangeItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_SandExchangeItemCmd_Param = ItemParam_ITEMPARAM_SAND_EXCHANGE
)

func (x *SandExchangeItemCmd) Reset() {
	*x = SandExchangeItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SandExchangeItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SandExchangeItemCmd) ProtoMessage() {}

func (x *SandExchangeItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SandExchangeItemCmd.ProtoReflect.Descriptor instead.
func (*SandExchangeItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{130}
}

func (x *SandExchangeItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SandExchangeItemCmd_Cmd
}

func (x *SandExchangeItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SandExchangeItemCmd_Param
}

func (x *SandExchangeItemCmd) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type GemDataUpdateItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=76" json:"param,omitempty"`
	Items []*ItemData `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for GemDataUpdateItemCmd fields.
const (
	Default_GemDataUpdateItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_GemDataUpdateItemCmd_Param = ItemParam_ITEMPARAM_GEM_DATA_UPDATE
)

func (x *GemDataUpdateItemCmd) Reset() {
	*x = GemDataUpdateItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GemDataUpdateItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GemDataUpdateItemCmd) ProtoMessage() {}

func (x *GemDataUpdateItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GemDataUpdateItemCmd.ProtoReflect.Descriptor instead.
func (*GemDataUpdateItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{131}
}

func (x *GemDataUpdateItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GemDataUpdateItemCmd_Cmd
}

func (x *GemDataUpdateItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GemDataUpdateItemCmd_Param
}

func (x *GemDataUpdateItemCmd) GetItems() []*ItemData {
	if x != nil {
		return x.Items
	}
	return nil
}

type LotteryDollInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *uint32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Weight *uint32   `protobuf:"varint,2,opt,name=weight" json:"weight,omitempty"`
	Item   *ItemInfo `protobuf:"bytes,3,opt,name=item" json:"item,omitempty"`
}

func (x *LotteryDollInfo) Reset() {
	*x = LotteryDollInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryDollInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryDollInfo) ProtoMessage() {}

func (x *LotteryDollInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryDollInfo.ProtoReflect.Descriptor instead.
func (*LotteryDollInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{132}
}

func (x *LotteryDollInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *LotteryDollInfo) GetWeight() uint32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *LotteryDollInfo) GetItem() *ItemInfo {
	if x != nil {
		return x.Item
	}
	return nil
}

type LotteryDollQueryItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param      *ItemParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=81" json:"param,omitempty"`
	TotalInfos []*LotteryDollInfo `protobuf:"bytes,3,rep,name=total_infos,json=totalInfos" json:"total_infos,omitempty"`
	MyInfos    []*LotteryDollInfo `protobuf:"bytes,4,rep,name=my_infos,json=myInfos" json:"my_infos,omitempty"`
}

// Default values for LotteryDollQueryItemCmd fields.
const (
	Default_LotteryDollQueryItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_LotteryDollQueryItemCmd_Param = ItemParam_ITEMPARAM_LOTTERY_DOLL_QUERY
)

func (x *LotteryDollQueryItemCmd) Reset() {
	*x = LotteryDollQueryItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryDollQueryItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryDollQueryItemCmd) ProtoMessage() {}

func (x *LotteryDollQueryItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryDollQueryItemCmd.ProtoReflect.Descriptor instead.
func (*LotteryDollQueryItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{133}
}

func (x *LotteryDollQueryItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LotteryDollQueryItemCmd_Cmd
}

func (x *LotteryDollQueryItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LotteryDollQueryItemCmd_Param
}

func (x *LotteryDollQueryItemCmd) GetTotalInfos() []*LotteryDollInfo {
	if x != nil {
		return x.TotalInfos
	}
	return nil
}

func (x *LotteryDollQueryItemCmd) GetMyInfos() []*LotteryDollInfo {
	if x != nil {
		return x.MyInfos
	}
	return nil
}

type LotteryDollPayItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=82" json:"param,omitempty"`
	Info  *LotteryDollInfo `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
}

// Default values for LotteryDollPayItemCmd fields.
const (
	Default_LotteryDollPayItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_LotteryDollPayItemCmd_Param = ItemParam_ITEMPARAM_LOTTERY_DOLL_PAY
)

func (x *LotteryDollPayItemCmd) Reset() {
	*x = LotteryDollPayItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryDollPayItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryDollPayItemCmd) ProtoMessage() {}

func (x *LotteryDollPayItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryDollPayItemCmd.ProtoReflect.Descriptor instead.
func (*LotteryDollPayItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{134}
}

func (x *LotteryDollPayItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LotteryDollPayItemCmd_Cmd
}

func (x *LotteryDollPayItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LotteryDollPayItemCmd_Param
}

func (x *LotteryDollPayItemCmd) GetInfo() *LotteryDollInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type PersonalArtifactExchangeItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=83" json:"param,omitempty"`
	Itemid *uint32    `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	Items  []*SItem   `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

// Default values for PersonalArtifactExchangeItemCmd fields.
const (
	Default_PersonalArtifactExchangeItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PersonalArtifactExchangeItemCmd_Param = ItemParam_ITEMPARAM_PERSONAL_ARTIFACT_EXCHANGE
)

func (x *PersonalArtifactExchangeItemCmd) Reset() {
	*x = PersonalArtifactExchangeItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalArtifactExchangeItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalArtifactExchangeItemCmd) ProtoMessage() {}

func (x *PersonalArtifactExchangeItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalArtifactExchangeItemCmd.ProtoReflect.Descriptor instead.
func (*PersonalArtifactExchangeItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{135}
}

func (x *PersonalArtifactExchangeItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PersonalArtifactExchangeItemCmd_Cmd
}

func (x *PersonalArtifactExchangeItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PersonalArtifactExchangeItemCmd_Param
}

func (x *PersonalArtifactExchangeItemCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *PersonalArtifactExchangeItemCmd) GetItems() []*SItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type PersonalArtifactDecomposeItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=84" json:"param,omitempty"`
	Items []*SItem   `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for PersonalArtifactDecomposeItemCmd fields.
const (
	Default_PersonalArtifactDecomposeItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PersonalArtifactDecomposeItemCmd_Param = ItemParam_ITEMPARAM_PERSONAL_ARTIFACT_DECOMPOSE
)

func (x *PersonalArtifactDecomposeItemCmd) Reset() {
	*x = PersonalArtifactDecomposeItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalArtifactDecomposeItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalArtifactDecomposeItemCmd) ProtoMessage() {}

func (x *PersonalArtifactDecomposeItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalArtifactDecomposeItemCmd.ProtoReflect.Descriptor instead.
func (*PersonalArtifactDecomposeItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{136}
}

func (x *PersonalArtifactDecomposeItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PersonalArtifactDecomposeItemCmd_Cmd
}

func (x *PersonalArtifactDecomposeItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PersonalArtifactDecomposeItemCmd_Param
}

func (x *PersonalArtifactDecomposeItemCmd) GetItems() []*SItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type PersonalArtifactComposeItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=85" json:"param,omitempty"`
	Itemid *uint32    `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	Items  []*SItem   `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

// Default values for PersonalArtifactComposeItemCmd fields.
const (
	Default_PersonalArtifactComposeItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PersonalArtifactComposeItemCmd_Param = ItemParam_ITEMPARAM_PERSONAL_ARTIFACT_COMPOSE
)

func (x *PersonalArtifactComposeItemCmd) Reset() {
	*x = PersonalArtifactComposeItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalArtifactComposeItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalArtifactComposeItemCmd) ProtoMessage() {}

func (x *PersonalArtifactComposeItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalArtifactComposeItemCmd.ProtoReflect.Descriptor instead.
func (*PersonalArtifactComposeItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{137}
}

func (x *PersonalArtifactComposeItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PersonalArtifactComposeItemCmd_Cmd
}

func (x *PersonalArtifactComposeItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PersonalArtifactComposeItemCmd_Param
}

func (x *PersonalArtifactComposeItemCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *PersonalArtifactComposeItemCmd) GetItems() []*SItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type PersonalArtifactRemouldItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command                     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam                   `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=86" json:"param,omitempty"`
	Guid      *string                      `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Type      *PersonalArtifactRemouldType `protobuf:"varint,4,opt,name=type,enum=Cmd.PersonalArtifactRemouldType" json:"type,omitempty"`
	LockAttrs []uint32                     `protobuf:"varint,5,rep,name=lock_attrs,json=lockAttrs" json:"lock_attrs,omitempty"`
}

// Default values for PersonalArtifactRemouldItemCmd fields.
const (
	Default_PersonalArtifactRemouldItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PersonalArtifactRemouldItemCmd_Param = ItemParam_ITEMPARAM_PERSONAL_ARTIFACT_REMOULD
)

func (x *PersonalArtifactRemouldItemCmd) Reset() {
	*x = PersonalArtifactRemouldItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalArtifactRemouldItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalArtifactRemouldItemCmd) ProtoMessage() {}

func (x *PersonalArtifactRemouldItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalArtifactRemouldItemCmd.ProtoReflect.Descriptor instead.
func (*PersonalArtifactRemouldItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{138}
}

func (x *PersonalArtifactRemouldItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PersonalArtifactRemouldItemCmd_Cmd
}

func (x *PersonalArtifactRemouldItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PersonalArtifactRemouldItemCmd_Param
}

func (x *PersonalArtifactRemouldItemCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *PersonalArtifactRemouldItemCmd) GetType() PersonalArtifactRemouldType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PersonalArtifactRemouldType_PERSONALARTIFACT_REMOULD_TYPE_MIN
}

func (x *PersonalArtifactRemouldItemCmd) GetLockAttrs() []uint32 {
	if x != nil {
		return x.LockAttrs
	}
	return nil
}

type PersonalArtifactAttrSaveItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=87" json:"param,omitempty"`
	Guid  *string    `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Save  *bool      `protobuf:"varint,4,opt,name=save" json:"save,omitempty"`
}

// Default values for PersonalArtifactAttrSaveItemCmd fields.
const (
	Default_PersonalArtifactAttrSaveItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PersonalArtifactAttrSaveItemCmd_Param = ItemParam_ITEMPARAM_PERSONAL_ARTIFACT_ATTR_SAVE
)

func (x *PersonalArtifactAttrSaveItemCmd) Reset() {
	*x = PersonalArtifactAttrSaveItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalArtifactAttrSaveItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalArtifactAttrSaveItemCmd) ProtoMessage() {}

func (x *PersonalArtifactAttrSaveItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalArtifactAttrSaveItemCmd.ProtoReflect.Descriptor instead.
func (*PersonalArtifactAttrSaveItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{139}
}

func (x *PersonalArtifactAttrSaveItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PersonalArtifactAttrSaveItemCmd_Cmd
}

func (x *PersonalArtifactAttrSaveItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PersonalArtifactAttrSaveItemCmd_Param
}

func (x *PersonalArtifactAttrSaveItemCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *PersonalArtifactAttrSaveItemCmd) GetSave() bool {
	if x != nil && x.Save != nil {
		return *x.Save
	}
	return false
}

type PersonalArtifactAppraisalItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=90" json:"param,omitempty"`
	Itemid  *uint32    `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	Count   *uint32    `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Success *bool      `protobuf:"varint,5,opt,name=success" json:"success,omitempty"`
}

// Default values for PersonalArtifactAppraisalItemCmd fields.
const (
	Default_PersonalArtifactAppraisalItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PersonalArtifactAppraisalItemCmd_Param = ItemParam_ITEMPARAM_PERSONAL_ARTIFACT_APPRAISAL
)

func (x *PersonalArtifactAppraisalItemCmd) Reset() {
	*x = PersonalArtifactAppraisalItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalArtifactAppraisalItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalArtifactAppraisalItemCmd) ProtoMessage() {}

func (x *PersonalArtifactAppraisalItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalArtifactAppraisalItemCmd.ProtoReflect.Descriptor instead.
func (*PersonalArtifactAppraisalItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{140}
}

func (x *PersonalArtifactAppraisalItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PersonalArtifactAppraisalItemCmd_Cmd
}

func (x *PersonalArtifactAppraisalItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PersonalArtifactAppraisalItemCmd_Param
}

func (x *PersonalArtifactAppraisalItemCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *PersonalArtifactAppraisalItemCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *PersonalArtifactAppraisalItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type EquipPosCD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos  *EEquipPos `protobuf:"varint,1,opt,name=pos,enum=Cmd.EEquipPos" json:"pos,omitempty"`
	Time *uint32    `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
}

func (x *EquipPosCD) Reset() {
	*x = EquipPosCD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipPosCD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipPosCD) ProtoMessage() {}

func (x *EquipPosCD) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipPosCD.ProtoReflect.Descriptor instead.
func (*EquipPosCD) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{141}
}

func (x *EquipPosCD) GetPos() EEquipPos {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return EEquipPos_EEQUIPPOS_MIN
}

func (x *EquipPosCD) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type EquipPosCDNtfItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=96" json:"param,omitempty"`
	Poscd []*EquipPosCD `protobuf:"bytes,3,rep,name=poscd" json:"poscd,omitempty"`
}

// Default values for EquipPosCDNtfItemCmd fields.
const (
	Default_EquipPosCDNtfItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipPosCDNtfItemCmd_Param = ItemParam_ITEMPARAM_EQUIP_POS_CD_NTF
)

func (x *EquipPosCDNtfItemCmd) Reset() {
	*x = EquipPosCDNtfItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipPosCDNtfItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipPosCDNtfItemCmd) ProtoMessage() {}

func (x *EquipPosCDNtfItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipPosCDNtfItemCmd.ProtoReflect.Descriptor instead.
func (*EquipPosCDNtfItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{142}
}

func (x *EquipPosCDNtfItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipPosCDNtfItemCmd_Cmd
}

func (x *EquipPosCDNtfItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipPosCDNtfItemCmd_Param
}

func (x *EquipPosCDNtfItemCmd) GetPoscd() []*EquipPosCD {
	if x != nil {
		return x.Poscd
	}
	return nil
}

type BatchRefineItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=88" json:"param,omitempty"`
	Equips []*ItemInfo `protobuf:"bytes,3,rep,name=equips" json:"equips,omitempty"`
	Npcid  *uint64     `protobuf:"varint,4,opt,name=npcid" json:"npcid,omitempty"`
	Result *bool       `protobuf:"varint,5,opt,name=result" json:"result,omitempty"`
}

// Default values for BatchRefineItemCmd fields.
const (
	Default_BatchRefineItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_BatchRefineItemCmd_Param = ItemParam_ITEMPARAM_BATCH_REFINE
)

func (x *BatchRefineItemCmd) Reset() {
	*x = BatchRefineItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRefineItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRefineItemCmd) ProtoMessage() {}

func (x *BatchRefineItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRefineItemCmd.ProtoReflect.Descriptor instead.
func (*BatchRefineItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{143}
}

func (x *BatchRefineItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BatchRefineItemCmd_Cmd
}

func (x *BatchRefineItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BatchRefineItemCmd_Param
}

func (x *BatchRefineItemCmd) GetEquips() []*ItemInfo {
	if x != nil {
		return x.Equips
	}
	return nil
}

func (x *BatchRefineItemCmd) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return 0
}

func (x *BatchRefineItemCmd) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

type MixLotteryArchiveItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Count *uint32 `protobuf:"varint,2,opt,name=count,def=1" json:"count,omitempty"`
}

// Default values for MixLotteryArchiveItem fields.
const (
	Default_MixLotteryArchiveItem_Count = uint32(1)
)

func (x *MixLotteryArchiveItem) Reset() {
	*x = MixLotteryArchiveItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MixLotteryArchiveItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixLotteryArchiveItem) ProtoMessage() {}

func (x *MixLotteryArchiveItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixLotteryArchiveItem.ProtoReflect.Descriptor instead.
func (*MixLotteryArchiveItem) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{144}
}

func (x *MixLotteryArchiveItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MixLotteryArchiveItem) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_MixLotteryArchiveItem_Count
}

type MixLotteryArchiveGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groupid   *uint32                  `protobuf:"varint,1,opt,name=groupid" json:"groupid,omitempty"`
	Items     []*MixLotteryArchiveItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	Grouprate *uint32                  `protobuf:"varint,3,opt,name=grouprate" json:"grouprate,omitempty"`
}

func (x *MixLotteryArchiveGroup) Reset() {
	*x = MixLotteryArchiveGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MixLotteryArchiveGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixLotteryArchiveGroup) ProtoMessage() {}

func (x *MixLotteryArchiveGroup) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixLotteryArchiveGroup.ProtoReflect.Descriptor instead.
func (*MixLotteryArchiveGroup) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{145}
}

func (x *MixLotteryArchiveGroup) GetGroupid() uint32 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

func (x *MixLotteryArchiveGroup) GetItems() []*MixLotteryArchiveItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MixLotteryArchiveGroup) GetGrouprate() uint32 {
	if x != nil && x.Grouprate != nil {
		return *x.Grouprate
	}
	return 0
}

type MixLotteryArchiveCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command                  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param      *ItemParam                `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=91" json:"param,omitempty"`
	Type       *ELotteryType             `protobuf:"varint,3,opt,name=type,enum=Cmd.ELotteryType" json:"type,omitempty"`
	Price      *uint32                   `protobuf:"varint,4,opt,name=price" json:"price,omitempty"`
	OnceMaxCnt *uint32                   `protobuf:"varint,5,opt,name=once_max_cnt,json=onceMaxCnt" json:"once_max_cnt,omitempty"`
	Discount   *uint32                   `protobuf:"varint,6,opt,name=discount" json:"discount,omitempty"`
	Groups     []*MixLotteryArchiveGroup `protobuf:"bytes,7,rep,name=groups" json:"groups,omitempty"`
}

// Default values for MixLotteryArchiveCmd fields.
const (
	Default_MixLotteryArchiveCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_MixLotteryArchiveCmd_Param = ItemParam_ITEMPARAM_MIXTYPELOTTERY_ARCHIVE
)

func (x *MixLotteryArchiveCmd) Reset() {
	*x = MixLotteryArchiveCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MixLotteryArchiveCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixLotteryArchiveCmd) ProtoMessage() {}

func (x *MixLotteryArchiveCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixLotteryArchiveCmd.ProtoReflect.Descriptor instead.
func (*MixLotteryArchiveCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{146}
}

func (x *MixLotteryArchiveCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MixLotteryArchiveCmd_Cmd
}

func (x *MixLotteryArchiveCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MixLotteryArchiveCmd_Param
}

func (x *MixLotteryArchiveCmd) GetType() ELotteryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ELotteryType_ELotteryType_Min
}

func (x *MixLotteryArchiveCmd) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *MixLotteryArchiveCmd) GetOnceMaxCnt() uint32 {
	if x != nil && x.OnceMaxCnt != nil {
		return *x.OnceMaxCnt
	}
	return 0
}

func (x *MixLotteryArchiveCmd) GetDiscount() uint32 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *MixLotteryArchiveCmd) GetGroups() []*MixLotteryArchiveGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type PackMailData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint64          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Sendtime *uint32          `protobuf:"varint,2,opt,name=sendtime" json:"sendtime,omitempty"`
	Type     *EPackMailType   `protobuf:"varint,5,opt,name=type,enum=Cmd.EPackMailType" json:"type,omitempty"`
	Status   *EPackMailStatus `protobuf:"varint,6,opt,name=status,enum=Cmd.EPackMailStatus" json:"status,omitempty"`
	Title    *string          `protobuf:"bytes,7,opt,name=title" json:"title,omitempty"`
	Sender   *string          `protobuf:"bytes,8,opt,name=sender" json:"sender,omitempty"`
	Msg      *string          `protobuf:"bytes,9,opt,name=msg" json:"msg,omitempty"`
	Items    []*ItemData      `protobuf:"bytes,10,rep,name=items" json:"items,omitempty"`
}

func (x *PackMailData) Reset() {
	*x = PackMailData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackMailData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackMailData) ProtoMessage() {}

func (x *PackMailData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackMailData.ProtoReflect.Descriptor instead.
func (*PackMailData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{147}
}

func (x *PackMailData) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PackMailData) GetSendtime() uint32 {
	if x != nil && x.Sendtime != nil {
		return *x.Sendtime
	}
	return 0
}

func (x *PackMailData) GetType() EPackMailType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EPackMailType_EPACKMAILTYPE_MIN
}

func (x *PackMailData) GetStatus() EPackMailStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return EPackMailStatus_EPACKMAILSTATUS_MIN
}

func (x *PackMailData) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PackMailData) GetSender() string {
	if x != nil && x.Sender != nil {
		return *x.Sender
	}
	return ""
}

func (x *PackMailData) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *PackMailData) GetItems() []*ItemData {
	if x != nil {
		return x.Items
	}
	return nil
}

type QueryPackMailItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=107" json:"param,omitempty"`
	Mails []*PackMailData `protobuf:"bytes,3,rep,name=mails" json:"mails,omitempty"`
}

// Default values for QueryPackMailItemCmd fields.
const (
	Default_QueryPackMailItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QueryPackMailItemCmd_Param = ItemParam_ITEMPARAM_PACKMAIL_QUERY
)

func (x *QueryPackMailItemCmd) Reset() {
	*x = QueryPackMailItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPackMailItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPackMailItemCmd) ProtoMessage() {}

func (x *QueryPackMailItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPackMailItemCmd.ProtoReflect.Descriptor instead.
func (*QueryPackMailItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{148}
}

func (x *QueryPackMailItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryPackMailItemCmd_Cmd
}

func (x *QueryPackMailItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryPackMailItemCmd_Param
}

func (x *QueryPackMailItemCmd) GetMails() []*PackMailData {
	if x != nil {
		return x.Mails
	}
	return nil
}

type PackMailUpdateItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=108" json:"param,omitempty"`
	Mails []*PackMailData `protobuf:"bytes,3,rep,name=mails" json:"mails,omitempty"`
	Dels  []uint64        `protobuf:"varint,4,rep,name=dels" json:"dels,omitempty"`
}

// Default values for PackMailUpdateItemCmd fields.
const (
	Default_PackMailUpdateItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PackMailUpdateItemCmd_Param = ItemParam_ITEMPARAM_PACKMAIL_UPDATE
)

func (x *PackMailUpdateItemCmd) Reset() {
	*x = PackMailUpdateItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackMailUpdateItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackMailUpdateItemCmd) ProtoMessage() {}

func (x *PackMailUpdateItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackMailUpdateItemCmd.ProtoReflect.Descriptor instead.
func (*PackMailUpdateItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{149}
}

func (x *PackMailUpdateItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PackMailUpdateItemCmd_Cmd
}

func (x *PackMailUpdateItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PackMailUpdateItemCmd_Param
}

func (x *PackMailUpdateItemCmd) GetMails() []*PackMailData {
	if x != nil {
		return x.Mails
	}
	return nil
}

func (x *PackMailUpdateItemCmd) GetDels() []uint64 {
	if x != nil {
		return x.Dels
	}
	return nil
}

type PackMailActionItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=109" json:"param,omitempty"`
	Action *EPackMailAction `protobuf:"varint,3,opt,name=action,enum=Cmd.EPackMailAction" json:"action,omitempty"`
	Id     *uint64          `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
}

// Default values for PackMailActionItemCmd fields.
const (
	Default_PackMailActionItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PackMailActionItemCmd_Param = ItemParam_ITEMPARAM_PACKMAIL_ACTION
)

func (x *PackMailActionItemCmd) Reset() {
	*x = PackMailActionItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackMailActionItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackMailActionItemCmd) ProtoMessage() {}

func (x *PackMailActionItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackMailActionItemCmd.ProtoReflect.Descriptor instead.
func (*PackMailActionItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{150}
}

func (x *PackMailActionItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PackMailActionItemCmd_Cmd
}

func (x *PackMailActionItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PackMailActionItemCmd_Param
}

func (x *PackMailActionItemCmd) GetAction() EPackMailAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return EPackMailAction_EPACKMAILACTION_MIN
}

func (x *PackMailActionItemCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type FavoriteDesire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *EFavoriteDesireType `protobuf:"varint,1,opt,name=type,enum=Cmd.EFavoriteDesireType" json:"type,omitempty"`
	Count *uint32              `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *FavoriteDesire) Reset() {
	*x = FavoriteDesire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteDesire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteDesire) ProtoMessage() {}

func (x *FavoriteDesire) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteDesire.ProtoReflect.Descriptor instead.
func (*FavoriteDesire) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{151}
}

func (x *FavoriteDesire) GetType() EFavoriteDesireType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EFavoriteDesireType_EFAVORITEDESIRE_TYPE_MIN
}

func (x *FavoriteDesire) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type FavoriteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activityid    *uint32           `protobuf:"varint,1,opt,name=activityid" json:"activityid,omitempty"`
	Level         *uint32           `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	Exp           *uint32           `protobuf:"varint,3,opt,name=exp" json:"exp,omitempty"`
	FavoriteItem  *uint32           `protobuf:"varint,4,opt,name=favorite_item,json=favoriteItem" json:"favorite_item,omitempty"`
	InteractTimes *uint32           `protobuf:"varint,5,opt,name=interact_times,json=interactTimes" json:"interact_times,omitempty"`
	Rewardids     []uint32          `protobuf:"varint,6,rep,name=rewardids" json:"rewardids,omitempty"`
	Desires       []*FavoriteDesire `protobuf:"bytes,7,rep,name=desires" json:"desires,omitempty"`
	HasInteract   *bool             `protobuf:"varint,8,opt,name=has_interact,json=hasInteract" json:"has_interact,omitempty"`
	ShowFavorite  *bool             `protobuf:"varint,9,opt,name=show_favorite,json=showFavorite" json:"show_favorite,omitempty"`
}

func (x *FavoriteData) Reset() {
	*x = FavoriteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteData) ProtoMessage() {}

func (x *FavoriteData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteData.ProtoReflect.Descriptor instead.
func (*FavoriteData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{152}
}

func (x *FavoriteData) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *FavoriteData) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *FavoriteData) GetExp() uint32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *FavoriteData) GetFavoriteItem() uint32 {
	if x != nil && x.FavoriteItem != nil {
		return *x.FavoriteItem
	}
	return 0
}

func (x *FavoriteData) GetInteractTimes() uint32 {
	if x != nil && x.InteractTimes != nil {
		return *x.InteractTimes
	}
	return 0
}

func (x *FavoriteData) GetRewardids() []uint32 {
	if x != nil {
		return x.Rewardids
	}
	return nil
}

func (x *FavoriteData) GetDesires() []*FavoriteDesire {
	if x != nil {
		return x.Desires
	}
	return nil
}

func (x *FavoriteData) GetHasInteract() bool {
	if x != nil && x.HasInteract != nil {
		return *x.HasInteract
	}
	return false
}

func (x *FavoriteData) GetShowFavorite() bool {
	if x != nil && x.ShowFavorite != nil {
		return *x.ShowFavorite
	}
	return false
}

type FavoriteQueryItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param      *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=110" json:"param,omitempty"`
	Activityid *uint32       `protobuf:"varint,3,opt,name=activityid" json:"activityid,omitempty"`
	Data       *FavoriteData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

// Default values for FavoriteQueryItemCmd fields.
const (
	Default_FavoriteQueryItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_FavoriteQueryItemCmd_Param = ItemParam_ITEMPARAM_FAVORITE_QUERY
)

func (x *FavoriteQueryItemCmd) Reset() {
	*x = FavoriteQueryItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteQueryItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteQueryItemCmd) ProtoMessage() {}

func (x *FavoriteQueryItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteQueryItemCmd.ProtoReflect.Descriptor instead.
func (*FavoriteQueryItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{153}
}

func (x *FavoriteQueryItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FavoriteQueryItemCmd_Cmd
}

func (x *FavoriteQueryItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FavoriteQueryItemCmd_Param
}

func (x *FavoriteQueryItemCmd) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *FavoriteQueryItemCmd) GetData() *FavoriteData {
	if x != nil {
		return x.Data
	}
	return nil
}

type FavoriteGiveItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param      *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=111" json:"param,omitempty"`
	Activityid *uint32       `protobuf:"varint,3,opt,name=activityid" json:"activityid,omitempty"`
	Items      []*ItemInfo   `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
	Once       *bool         `protobuf:"varint,5,opt,name=once" json:"once,omitempty"`
	Data       *FavoriteData `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
}

// Default values for FavoriteGiveItemCmd fields.
const (
	Default_FavoriteGiveItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_FavoriteGiveItemCmd_Param = ItemParam_ITEMPARAM_FAVORITE_GIVE
)

func (x *FavoriteGiveItemCmd) Reset() {
	*x = FavoriteGiveItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteGiveItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteGiveItemCmd) ProtoMessage() {}

func (x *FavoriteGiveItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteGiveItemCmd.ProtoReflect.Descriptor instead.
func (*FavoriteGiveItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{154}
}

func (x *FavoriteGiveItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FavoriteGiveItemCmd_Cmd
}

func (x *FavoriteGiveItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FavoriteGiveItemCmd_Param
}

func (x *FavoriteGiveItemCmd) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *FavoriteGiveItemCmd) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *FavoriteGiveItemCmd) GetOnce() bool {
	if x != nil && x.Once != nil {
		return *x.Once
	}
	return false
}

func (x *FavoriteGiveItemCmd) GetData() *FavoriteData {
	if x != nil {
		return x.Data
	}
	return nil
}

type FavoriteRewardItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param      *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=112" json:"param,omitempty"`
	Activityid *uint32       `protobuf:"varint,3,opt,name=activityid" json:"activityid,omitempty"`
	Rewardid   *uint32       `protobuf:"varint,4,opt,name=rewardid" json:"rewardid,omitempty"`
	Data       *FavoriteData `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
}

// Default values for FavoriteRewardItemCmd fields.
const (
	Default_FavoriteRewardItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_FavoriteRewardItemCmd_Param = ItemParam_ITEMPARAM_FAVORITE_REWARD
)

func (x *FavoriteRewardItemCmd) Reset() {
	*x = FavoriteRewardItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteRewardItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteRewardItemCmd) ProtoMessage() {}

func (x *FavoriteRewardItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteRewardItemCmd.ProtoReflect.Descriptor instead.
func (*FavoriteRewardItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{155}
}

func (x *FavoriteRewardItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FavoriteRewardItemCmd_Cmd
}

func (x *FavoriteRewardItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FavoriteRewardItemCmd_Param
}

func (x *FavoriteRewardItemCmd) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *FavoriteRewardItemCmd) GetRewardid() uint32 {
	if x != nil && x.Rewardid != nil {
		return *x.Rewardid
	}
	return 0
}

func (x *FavoriteRewardItemCmd) GetData() *FavoriteData {
	if x != nil {
		return x.Data
	}
	return nil
}

type FavoriteInteractItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param      *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=113" json:"param,omitempty"`
	Activityid *uint32       `protobuf:"varint,3,opt,name=activityid" json:"activityid,omitempty"`
	Data       *FavoriteData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

// Default values for FavoriteInteractItemCmd fields.
const (
	Default_FavoriteInteractItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_FavoriteInteractItemCmd_Param = ItemParam_ITEMPARAM_FAVORITE_INTERACT
)

func (x *FavoriteInteractItemCmd) Reset() {
	*x = FavoriteInteractItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteInteractItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteInteractItemCmd) ProtoMessage() {}

func (x *FavoriteInteractItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteInteractItemCmd.ProtoReflect.Descriptor instead.
func (*FavoriteInteractItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{156}
}

func (x *FavoriteInteractItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FavoriteInteractItemCmd_Cmd
}

func (x *FavoriteInteractItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FavoriteInteractItemCmd_Param
}

func (x *FavoriteInteractItemCmd) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *FavoriteInteractItemCmd) GetData() *FavoriteData {
	if x != nil {
		return x.Data
	}
	return nil
}

type FavoriteDesireConditionItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param      *ItemParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=116" json:"param,omitempty"`
	Activityid *uint32              `protobuf:"varint,3,opt,name=activityid" json:"activityid,omitempty"`
	Count      *uint32              `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Type       *EFavoriteDesireType `protobuf:"varint,5,opt,name=type,enum=Cmd.EFavoriteDesireType" json:"type,omitempty"`
	Data       *FavoriteData        `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
}

// Default values for FavoriteDesireConditionItemCmd fields.
const (
	Default_FavoriteDesireConditionItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_FavoriteDesireConditionItemCmd_Param = ItemParam_ITEMPARAM_FAVORITE_DESIRE_CONDITION
)

func (x *FavoriteDesireConditionItemCmd) Reset() {
	*x = FavoriteDesireConditionItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteDesireConditionItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteDesireConditionItemCmd) ProtoMessage() {}

func (x *FavoriteDesireConditionItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteDesireConditionItemCmd.ProtoReflect.Descriptor instead.
func (*FavoriteDesireConditionItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{157}
}

func (x *FavoriteDesireConditionItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FavoriteDesireConditionItemCmd_Cmd
}

func (x *FavoriteDesireConditionItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FavoriteDesireConditionItemCmd_Param
}

func (x *FavoriteDesireConditionItemCmd) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *FavoriteDesireConditionItemCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *FavoriteDesireConditionItemCmd) GetType() EFavoriteDesireType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EFavoriteDesireType_EFAVORITEDESIRE_TYPE_MIN
}

func (x *FavoriteDesireConditionItemCmd) GetData() *FavoriteData {
	if x != nil {
		return x.Data
	}
	return nil
}

type EquipEnchantTransferItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=97" json:"param,omitempty"`
	SrcGuid  *string    `protobuf:"bytes,3,opt,name=src_guid,json=srcGuid" json:"src_guid,omitempty"`
	DestGuid *string    `protobuf:"bytes,4,opt,name=dest_guid,json=destGuid" json:"dest_guid,omitempty"`
	Success  *bool      `protobuf:"varint,5,opt,name=success" json:"success,omitempty"`
}

// Default values for EquipEnchantTransferItemCmd fields.
const (
	Default_EquipEnchantTransferItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipEnchantTransferItemCmd_Param = ItemParam_ITEMPARAM_ENCHANT_TRANSFER
)

func (x *EquipEnchantTransferItemCmd) Reset() {
	*x = EquipEnchantTransferItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipEnchantTransferItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipEnchantTransferItemCmd) ProtoMessage() {}

func (x *EquipEnchantTransferItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipEnchantTransferItemCmd.ProtoReflect.Descriptor instead.
func (*EquipEnchantTransferItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{158}
}

func (x *EquipEnchantTransferItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipEnchantTransferItemCmd_Cmd
}

func (x *EquipEnchantTransferItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipEnchantTransferItemCmd_Param
}

func (x *EquipEnchantTransferItemCmd) GetSrcGuid() string {
	if x != nil && x.SrcGuid != nil {
		return *x.SrcGuid
	}
	return ""
}

func (x *EquipEnchantTransferItemCmd) GetDestGuid() string {
	if x != nil && x.DestGuid != nil {
		return *x.DestGuid
	}
	return ""
}

func (x *EquipEnchantTransferItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type EquipRefineTransferItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=98" json:"param,omitempty"`
	SrcGuid  *string    `protobuf:"bytes,3,opt,name=src_guid,json=srcGuid" json:"src_guid,omitempty"`
	DestGuid *string    `protobuf:"bytes,4,opt,name=dest_guid,json=destGuid" json:"dest_guid,omitempty"`
	Success  *bool      `protobuf:"varint,5,opt,name=success" json:"success,omitempty"`
}

// Default values for EquipRefineTransferItemCmd fields.
const (
	Default_EquipRefineTransferItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipRefineTransferItemCmd_Param = ItemParam_ITEMPARAM_REFINE_TRANSFER
)

func (x *EquipRefineTransferItemCmd) Reset() {
	*x = EquipRefineTransferItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipRefineTransferItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipRefineTransferItemCmd) ProtoMessage() {}

func (x *EquipRefineTransferItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipRefineTransferItemCmd.ProtoReflect.Descriptor instead.
func (*EquipRefineTransferItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{159}
}

func (x *EquipRefineTransferItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipRefineTransferItemCmd_Cmd
}

func (x *EquipRefineTransferItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipRefineTransferItemCmd_Param
}

func (x *EquipRefineTransferItemCmd) GetSrcGuid() string {
	if x != nil && x.SrcGuid != nil {
		return *x.SrcGuid
	}
	return ""
}

func (x *EquipRefineTransferItemCmd) GetDestGuid() string {
	if x != nil && x.DestGuid != nil {
		return *x.DestGuid
	}
	return ""
}

func (x *EquipRefineTransferItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type EquipPowerInputItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param       *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=99" json:"param,omitempty"`
	Items       []*ItemInfo `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	Npcfunction *uint32     `protobuf:"varint,4,opt,name=npcfunction" json:"npcfunction,omitempty"`
	AfterPower  *uint32     `protobuf:"varint,5,opt,name=after_power,json=afterPower" json:"after_power,omitempty"`
}

// Default values for EquipPowerInputItemCmd fields.
const (
	Default_EquipPowerInputItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipPowerInputItemCmd_Param = ItemParam_ITEMPARAM_EQUIP_POWER_INPUT
)

func (x *EquipPowerInputItemCmd) Reset() {
	*x = EquipPowerInputItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipPowerInputItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipPowerInputItemCmd) ProtoMessage() {}

func (x *EquipPowerInputItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipPowerInputItemCmd.ProtoReflect.Descriptor instead.
func (*EquipPowerInputItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{160}
}

func (x *EquipPowerInputItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipPowerInputItemCmd_Cmd
}

func (x *EquipPowerInputItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipPowerInputItemCmd_Param
}

func (x *EquipPowerInputItemCmd) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *EquipPowerInputItemCmd) GetNpcfunction() uint32 {
	if x != nil && x.Npcfunction != nil {
		return *x.Npcfunction
	}
	return 0
}

func (x *EquipPowerInputItemCmd) GetAfterPower() uint32 {
	if x != nil && x.AfterPower != nil {
		return *x.AfterPower
	}
	return 0
}

type EquipPowerOutputItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param       *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=100" json:"param,omitempty"`
	Npcfunction *uint32    `protobuf:"varint,3,opt,name=npcfunction" json:"npcfunction,omitempty"`
	AfterPower  *uint32    `protobuf:"varint,4,opt,name=after_power,json=afterPower" json:"after_power,omitempty"`
}

// Default values for EquipPowerOutputItemCmd fields.
const (
	Default_EquipPowerOutputItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipPowerOutputItemCmd_Param = ItemParam_ITEMPARAM_EQUIP_POWER_OUTPUT
)

func (x *EquipPowerOutputItemCmd) Reset() {
	*x = EquipPowerOutputItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipPowerOutputItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipPowerOutputItemCmd) ProtoMessage() {}

func (x *EquipPowerOutputItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipPowerOutputItemCmd.ProtoReflect.Descriptor instead.
func (*EquipPowerOutputItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{161}
}

func (x *EquipPowerOutputItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipPowerOutputItemCmd_Cmd
}

func (x *EquipPowerOutputItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipPowerOutputItemCmd_Param
}

func (x *EquipPowerOutputItemCmd) GetNpcfunction() uint32 {
	if x != nil && x.Npcfunction != nil {
		return *x.Npcfunction
	}
	return 0
}

func (x *EquipPowerOutputItemCmd) GetAfterPower() uint32 {
	if x != nil && x.AfterPower != nil {
		return *x.AfterPower
	}
	return 0
}

type RGB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R *uint32 `protobuf:"varint,1,opt,name=r" json:"r,omitempty"`
	G *uint32 `protobuf:"varint,2,opt,name=g" json:"g,omitempty"`
	B *uint32 `protobuf:"varint,3,opt,name=b" json:"b,omitempty"`
}

func (x *RGB) Reset() {
	*x = RGB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RGB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RGB) ProtoMessage() {}

func (x *RGB) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RGB.ProtoReflect.Descriptor instead.
func (*RGB) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{162}
}

func (x *RGB) GetR() uint32 {
	if x != nil && x.R != nil {
		return *x.R
	}
	return 0
}

func (x *RGB) GetG() uint32 {
	if x != nil && x.G != nil {
		return *x.G
	}
	return 0
}

func (x *RGB) GetB() uint32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

type ColoringPicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Picid *uint32 `protobuf:"varint,1,opt,name=picid" json:"picid,omitempty"`
	Rgb   *RGB    `protobuf:"bytes,2,opt,name=rgb" json:"rgb,omitempty"`
}

func (x *ColoringPicInfo) Reset() {
	*x = ColoringPicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColoringPicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColoringPicInfo) ProtoMessage() {}

func (x *ColoringPicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColoringPicInfo.ProtoReflect.Descriptor instead.
func (*ColoringPicInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{163}
}

func (x *ColoringPicInfo) GetPicid() uint32 {
	if x != nil && x.Picid != nil {
		return *x.Picid
	}
	return 0
}

func (x *ColoringPicInfo) GetRgb() *RGB {
	if x != nil {
		return x.Rgb
	}
	return nil
}

type ColoringTextInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Textid  *uint32 `protobuf:"varint,1,opt,name=textid" json:"textid,omitempty"`
	Content *string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (x *ColoringTextInfo) Reset() {
	*x = ColoringTextInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColoringTextInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColoringTextInfo) ProtoMessage() {}

func (x *ColoringTextInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColoringTextInfo.ProtoReflect.Descriptor instead.
func (*ColoringTextInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{164}
}

func (x *ColoringTextInfo) GetTextid() uint32 {
	if x != nil && x.Textid != nil {
		return *x.Textid
	}
	return 0
}

func (x *ColoringTextInfo) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

type ColoringQueryItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=101" json:"param,omitempty"`
	Itemid *uint32             `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	Pics   []*ColoringPicInfo  `protobuf:"bytes,4,rep,name=pics" json:"pics,omitempty"`
	Texts  []*ColoringTextInfo `protobuf:"bytes,5,rep,name=texts" json:"texts,omitempty"`
}

// Default values for ColoringQueryItemCmd fields.
const (
	Default_ColoringQueryItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ColoringQueryItemCmd_Param = ItemParam_ITEMPARAM_COLORING_QUERY
)

func (x *ColoringQueryItemCmd) Reset() {
	*x = ColoringQueryItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColoringQueryItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColoringQueryItemCmd) ProtoMessage() {}

func (x *ColoringQueryItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColoringQueryItemCmd.ProtoReflect.Descriptor instead.
func (*ColoringQueryItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{165}
}

func (x *ColoringQueryItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ColoringQueryItemCmd_Cmd
}

func (x *ColoringQueryItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ColoringQueryItemCmd_Param
}

func (x *ColoringQueryItemCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *ColoringQueryItemCmd) GetPics() []*ColoringPicInfo {
	if x != nil {
		return x.Pics
	}
	return nil
}

func (x *ColoringQueryItemCmd) GetTexts() []*ColoringTextInfo {
	if x != nil {
		return x.Texts
	}
	return nil
}

type ColoringModifyItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=102" json:"param,omitempty"`
	Itemid  *uint32             `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	Pics    []*ColoringPicInfo  `protobuf:"bytes,4,rep,name=pics" json:"pics,omitempty"`
	Texts   []*ColoringTextInfo `protobuf:"bytes,5,rep,name=texts" json:"texts,omitempty"`
	Success *bool               `protobuf:"varint,6,opt,name=success" json:"success,omitempty"`
}

// Default values for ColoringModifyItemCmd fields.
const (
	Default_ColoringModifyItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ColoringModifyItemCmd_Param = ItemParam_ITEMPARAM_COLORING_MODIFY
)

func (x *ColoringModifyItemCmd) Reset() {
	*x = ColoringModifyItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColoringModifyItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColoringModifyItemCmd) ProtoMessage() {}

func (x *ColoringModifyItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColoringModifyItemCmd.ProtoReflect.Descriptor instead.
func (*ColoringModifyItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{166}
}

func (x *ColoringModifyItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ColoringModifyItemCmd_Cmd
}

func (x *ColoringModifyItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ColoringModifyItemCmd_Param
}

func (x *ColoringModifyItemCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *ColoringModifyItemCmd) GetPics() []*ColoringPicInfo {
	if x != nil {
		return x.Pics
	}
	return nil
}

func (x *ColoringModifyItemCmd) GetTexts() []*ColoringTextInfo {
	if x != nil {
		return x.Texts
	}
	return nil
}

func (x *ColoringModifyItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type ColoringShareItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=103" json:"param,omitempty"`
	Itemid  *uint32    `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	Success *bool      `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
}

// Default values for ColoringShareItemCmd fields.
const (
	Default_ColoringShareItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ColoringShareItemCmd_Param = ItemParam_ITEMPARAM_COLORING_SHARE
)

func (x *ColoringShareItemCmd) Reset() {
	*x = ColoringShareItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColoringShareItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColoringShareItemCmd) ProtoMessage() {}

func (x *ColoringShareItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColoringShareItemCmd.ProtoReflect.Descriptor instead.
func (*ColoringShareItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{167}
}

func (x *ColoringShareItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ColoringShareItemCmd_Cmd
}

func (x *ColoringShareItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ColoringShareItemCmd_Param
}

func (x *ColoringShareItemCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *ColoringShareItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type PosStrengthItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=104" json:"param,omitempty"`
	Epos      *EEquipPos       `protobuf:"varint,3,opt,name=epos,enum=Cmd.EEquipPos" json:"epos,omitempty"`
	Type      *EStrengthType   `protobuf:"varint,4,opt,name=type,enum=Cmd.EStrengthType,def=0" json:"type,omitempty"`
	Destcount *uint32          `protobuf:"varint,5,opt,name=destcount" json:"destcount,omitempty"`
	Newlv     *uint32          `protobuf:"varint,6,opt,name=newlv" json:"newlv,omitempty"`
	Result    *EStrengthResult `protobuf:"varint,7,opt,name=result,enum=Cmd.EStrengthResult" json:"result,omitempty"`
	NewSumLv  *uint32          `protobuf:"varint,8,opt,name=new_sum_lv,json=newSumLv" json:"new_sum_lv,omitempty"`
}

// Default values for PosStrengthItemCmd fields.
const (
	Default_PosStrengthItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PosStrengthItemCmd_Param = ItemParam_ITEMPARAM_POS_STRENGTH
	Default_PosStrengthItemCmd_Type  = EStrengthType_ESTRENGTHTYPE_MIN
)

func (x *PosStrengthItemCmd) Reset() {
	*x = PosStrengthItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosStrengthItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosStrengthItemCmd) ProtoMessage() {}

func (x *PosStrengthItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosStrengthItemCmd.ProtoReflect.Descriptor instead.
func (*PosStrengthItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{168}
}

func (x *PosStrengthItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PosStrengthItemCmd_Cmd
}

func (x *PosStrengthItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PosStrengthItemCmd_Param
}

func (x *PosStrengthItemCmd) GetEpos() EEquipPos {
	if x != nil && x.Epos != nil {
		return *x.Epos
	}
	return EEquipPos_EEQUIPPOS_MIN
}

func (x *PosStrengthItemCmd) GetType() EStrengthType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_PosStrengthItemCmd_Type
}

func (x *PosStrengthItemCmd) GetDestcount() uint32 {
	if x != nil && x.Destcount != nil {
		return *x.Destcount
	}
	return 0
}

func (x *PosStrengthItemCmd) GetNewlv() uint32 {
	if x != nil && x.Newlv != nil {
		return *x.Newlv
	}
	return 0
}

func (x *PosStrengthItemCmd) GetResult() EStrengthResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return EStrengthResult_ESTRENGTHRESULT_MIN
}

func (x *PosStrengthItemCmd) GetNewSumLv() uint32 {
	if x != nil && x.NewSumLv != nil {
		return *x.NewSumLv
	}
	return 0
}

type PosStrengthData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epos *EEquipPos `protobuf:"varint,1,opt,name=epos,enum=Cmd.EEquipPos" json:"epos,omitempty"`
	Lv   *uint32    `protobuf:"varint,2,opt,name=lv" json:"lv,omitempty"`
}

func (x *PosStrengthData) Reset() {
	*x = PosStrengthData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosStrengthData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosStrengthData) ProtoMessage() {}

func (x *PosStrengthData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosStrengthData.ProtoReflect.Descriptor instead.
func (*PosStrengthData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{169}
}

func (x *PosStrengthData) GetEpos() EEquipPos {
	if x != nil && x.Epos != nil {
		return *x.Epos
	}
	return EEquipPos_EEQUIPPOS_MIN
}

func (x *PosStrengthData) GetLv() uint32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return 0
}

type StrengthData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *EStrengthType     `protobuf:"varint,1,opt,name=type,enum=Cmd.EStrengthType" json:"type,omitempty"`
	PosData  []*PosStrengthData `protobuf:"bytes,2,rep,name=pos_data,json=posData" json:"pos_data,omitempty"`
	NewSumLv *uint32            `protobuf:"varint,3,opt,name=new_sum_lv,json=newSumLv" json:"new_sum_lv,omitempty"`
}

func (x *StrengthData) Reset() {
	*x = StrengthData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrengthData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrengthData) ProtoMessage() {}

func (x *StrengthData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrengthData.ProtoReflect.Descriptor instead.
func (*StrengthData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{170}
}

func (x *StrengthData) GetType() EStrengthType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EStrengthType_ESTRENGTHTYPE_MIN
}

func (x *StrengthData) GetPosData() []*PosStrengthData {
	if x != nil {
		return x.PosData
	}
	return nil
}

func (x *StrengthData) GetNewSumLv() uint32 {
	if x != nil && x.NewSumLv != nil {
		return *x.NewSumLv
	}
	return 0
}

type LotteryHeadwearExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=115" json:"param,omitempty"`
	Items   []*SItem      `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	Success *bool         `protobuf:"varint,4,opt,name=success,def=0" json:"success,omitempty"`
	Type    *ELotteryType `protobuf:"varint,5,opt,name=type,enum=Cmd.ELotteryType" json:"type,omitempty"`
}

// Default values for LotteryHeadwearExchange fields.
const (
	Default_LotteryHeadwearExchange_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_LotteryHeadwearExchange_Param   = ItemParam_ITEMPARAM_RECOVER_HEADWEAR
	Default_LotteryHeadwearExchange_Success = bool(false)
)

func (x *LotteryHeadwearExchange) Reset() {
	*x = LotteryHeadwearExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryHeadwearExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryHeadwearExchange) ProtoMessage() {}

func (x *LotteryHeadwearExchange) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryHeadwearExchange.ProtoReflect.Descriptor instead.
func (*LotteryHeadwearExchange) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{171}
}

func (x *LotteryHeadwearExchange) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LotteryHeadwearExchange_Cmd
}

func (x *LotteryHeadwearExchange) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LotteryHeadwearExchange_Param
}

func (x *LotteryHeadwearExchange) GetItems() []*SItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *LotteryHeadwearExchange) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_LotteryHeadwearExchange_Success
}

func (x *LotteryHeadwearExchange) GetType() ELotteryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ELotteryType_ELotteryType_Min
}

type RandSelectRewardItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=106" json:"param,omitempty"`
	Guid      *string    `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	RandItems []uint32   `protobuf:"varint,4,rep,name=rand_items,json=randItems" json:"rand_items,omitempty"`
}

// Default values for RandSelectRewardItemCmd fields.
const (
	Default_RandSelectRewardItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_RandSelectRewardItemCmd_Param = ItemParam_ITEMPARAM_RAND_SELECT_REWARD
)

func (x *RandSelectRewardItemCmd) Reset() {
	*x = RandSelectRewardItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandSelectRewardItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandSelectRewardItemCmd) ProtoMessage() {}

func (x *RandSelectRewardItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandSelectRewardItemCmd.ProtoReflect.Descriptor instead.
func (*RandSelectRewardItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{172}
}

func (x *RandSelectRewardItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RandSelectRewardItemCmd_Cmd
}

func (x *RandSelectRewardItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RandSelectRewardItemCmd_Param
}

func (x *RandSelectRewardItemCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *RandSelectRewardItemCmd) GetRandItems() []uint32 {
	if x != nil {
		return x.RandItems
	}
	return nil
}

type EquipRecoveryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos                *EEquipPos `protobuf:"varint,1,opt,name=pos,enum=Cmd.EEquipPos" json:"pos,omitempty"`
	RecoveryTimes      *uint32    `protobuf:"varint,2,opt,name=recovery_times,json=recoveryTimes" json:"recovery_times,omitempty"`
	SuperRecoveryTimes *uint32    `protobuf:"varint,3,opt,name=super_recovery_times,json=superRecoveryTimes" json:"super_recovery_times,omitempty"`
}

func (x *EquipRecoveryData) Reset() {
	*x = EquipRecoveryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipRecoveryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipRecoveryData) ProtoMessage() {}

func (x *EquipRecoveryData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipRecoveryData.ProtoReflect.Descriptor instead.
func (*EquipRecoveryData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{173}
}

func (x *EquipRecoveryData) GetPos() EEquipPos {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return EEquipPos_EEQUIPPOS_MIN
}

func (x *EquipRecoveryData) GetRecoveryTimes() uint32 {
	if x != nil && x.RecoveryTimes != nil {
		return *x.RecoveryTimes
	}
	return 0
}

func (x *EquipRecoveryData) GetSuperRecoveryTimes() uint32 {
	if x != nil && x.SuperRecoveryTimes != nil {
		return *x.SuperRecoveryTimes
	}
	return 0
}

type EquipRecoveryQueryItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=118" json:"param,omitempty"`
	Datas []*EquipRecoveryData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for EquipRecoveryQueryItemCmd fields.
const (
	Default_EquipRecoveryQueryItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipRecoveryQueryItemCmd_Param = ItemParam_ITEMPARAM_EQUIP_RECOVERY_QUERY
)

func (x *EquipRecoveryQueryItemCmd) Reset() {
	*x = EquipRecoveryQueryItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipRecoveryQueryItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipRecoveryQueryItemCmd) ProtoMessage() {}

func (x *EquipRecoveryQueryItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipRecoveryQueryItemCmd.ProtoReflect.Descriptor instead.
func (*EquipRecoveryQueryItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{174}
}

func (x *EquipRecoveryQueryItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipRecoveryQueryItemCmd_Cmd
}

func (x *EquipRecoveryQueryItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipRecoveryQueryItemCmd_Param
}

func (x *EquipRecoveryQueryItemCmd) GetDatas() []*EquipRecoveryData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type EquipRecoveryItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=119" json:"param,omitempty"`
	Guid    *string    `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Success *bool      `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
}

// Default values for EquipRecoveryItemCmd fields.
const (
	Default_EquipRecoveryItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipRecoveryItemCmd_Param = ItemParam_ITEMPARAM_EQUIP_RECOVERY
)

func (x *EquipRecoveryItemCmd) Reset() {
	*x = EquipRecoveryItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipRecoveryItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipRecoveryItemCmd) ProtoMessage() {}

func (x *EquipRecoveryItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipRecoveryItemCmd.ProtoReflect.Descriptor instead.
func (*EquipRecoveryItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{175}
}

func (x *EquipRecoveryItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipRecoveryItemCmd_Cmd
}

func (x *EquipRecoveryItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipRecoveryItemCmd_Param
}

func (x *EquipRecoveryItemCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *EquipRecoveryItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type OneClickPutTakeStoreCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=114" json:"param,omitempty"`
	From     *EPackType `protobuf:"varint,3,opt,name=from,enum=Cmd.EPackType" json:"from,omitempty"`
	To       *EPackType `protobuf:"varint,4,opt,name=to,enum=Cmd.EPackType" json:"to,omitempty"`
	Page     *uint32    `protobuf:"varint,5,opt,name=page" json:"page,omitempty"`
	FurnGuid *string    `protobuf:"bytes,6,opt,name=furn_guid,json=furnGuid" json:"furn_guid,omitempty"`
}

// Default values for OneClickPutTakeStoreCmd fields.
const (
	Default_OneClickPutTakeStoreCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_OneClickPutTakeStoreCmd_Param = ItemParam_ITEMPARAM_ONE_CLICK_PUT_TAKE_STORE
)

func (x *OneClickPutTakeStoreCmd) Reset() {
	*x = OneClickPutTakeStoreCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneClickPutTakeStoreCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneClickPutTakeStoreCmd) ProtoMessage() {}

func (x *OneClickPutTakeStoreCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneClickPutTakeStoreCmd.ProtoReflect.Descriptor instead.
func (*OneClickPutTakeStoreCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{176}
}

func (x *OneClickPutTakeStoreCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_OneClickPutTakeStoreCmd_Cmd
}

func (x *OneClickPutTakeStoreCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_OneClickPutTakeStoreCmd_Param
}

func (x *OneClickPutTakeStoreCmd) GetFrom() EPackType {
	if x != nil && x.From != nil {
		return *x.From
	}
	return EPackType_EPACKTYPE_MIN
}

func (x *OneClickPutTakeStoreCmd) GetTo() EPackType {
	if x != nil && x.To != nil {
		return *x.To
	}
	return EPackType_EPACKTYPE_MIN
}

func (x *OneClickPutTakeStoreCmd) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *OneClickPutTakeStoreCmd) GetFurnGuid() string {
	if x != nil && x.FurnGuid != nil {
		return *x.FurnGuid
	}
	return ""
}

type QuestionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Opts []uint32 `protobuf:"varint,2,rep,name=opts" json:"opts,omitempty"`
	Text *string  `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
}

func (x *QuestionResult) Reset() {
	*x = QuestionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionResult) ProtoMessage() {}

func (x *QuestionResult) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionResult.ProtoReflect.Descriptor instead.
func (*QuestionResult) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{177}
}

func (x *QuestionResult) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *QuestionResult) GetOpts() []uint32 {
	if x != nil {
		return x.Opts
	}
	return nil
}

func (x *QuestionResult) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type QuestionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *uint32           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Results []*QuestionResult `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Time    *uint32           `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
}

func (x *QuestionData) Reset() {
	*x = QuestionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionData) ProtoMessage() {}

func (x *QuestionData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionData.ProtoReflect.Descriptor instead.
func (*QuestionData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{178}
}

func (x *QuestionData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *QuestionData) GetResults() []*QuestionResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *QuestionData) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type QuestionResultItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=117" json:"param,omitempty"`
	Data    *QuestionData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Success *bool         `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
}

// Default values for QuestionResultItemCmd fields.
const (
	Default_QuestionResultItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QuestionResultItemCmd_Param = ItemParam_ITEMPARAM_QUESTION_RESULT
)

func (x *QuestionResultItemCmd) Reset() {
	*x = QuestionResultItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionResultItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionResultItemCmd) ProtoMessage() {}

func (x *QuestionResultItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionResultItemCmd.ProtoReflect.Descriptor instead.
func (*QuestionResultItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{179}
}

func (x *QuestionResultItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuestionResultItemCmd_Cmd
}

func (x *QuestionResultItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuestionResultItemCmd_Param
}

func (x *QuestionResultItemCmd) GetData() *QuestionData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QuestionResultItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type PosStrengthSyncItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param        *ItemParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=105" json:"param,omitempty"`
	StrengthData []*StrengthData `protobuf:"bytes,3,rep,name=strength_data,json=strengthData" json:"strength_data,omitempty"`
}

// Default values for PosStrengthSyncItemCmd fields.
const (
	Default_PosStrengthSyncItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PosStrengthSyncItemCmd_Param = ItemParam_ITEMPARAM_POS_STRENGTH_SYNC
)

func (x *PosStrengthSyncItemCmd) Reset() {
	*x = PosStrengthSyncItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosStrengthSyncItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosStrengthSyncItemCmd) ProtoMessage() {}

func (x *PosStrengthSyncItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosStrengthSyncItemCmd.ProtoReflect.Descriptor instead.
func (*PosStrengthSyncItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{180}
}

func (x *PosStrengthSyncItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PosStrengthSyncItemCmd_Cmd
}

func (x *PosStrengthSyncItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PosStrengthSyncItemCmd_Param
}

func (x *PosStrengthSyncItemCmd) GetStrengthData() []*StrengthData {
	if x != nil {
		return x.StrengthData
	}
	return nil
}

type EquipPowerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Npcfunction *uint32 `protobuf:"varint,1,opt,name=npcfunction" json:"npcfunction,omitempty"`
	Power       *uint32 `protobuf:"varint,2,opt,name=power" json:"power,omitempty"`
}

func (x *EquipPowerData) Reset() {
	*x = EquipPowerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipPowerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipPowerData) ProtoMessage() {}

func (x *EquipPowerData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipPowerData.ProtoReflect.Descriptor instead.
func (*EquipPowerData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{181}
}

func (x *EquipPowerData) GetNpcfunction() uint32 {
	if x != nil && x.Npcfunction != nil {
		return *x.Npcfunction
	}
	return 0
}

func (x *EquipPowerData) GetPower() uint32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

type EquipPowerQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=121" json:"param,omitempty"`
	Data  []*EquipPowerData `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

// Default values for EquipPowerQuery fields.
const (
	Default_EquipPowerQuery_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipPowerQuery_Param = ItemParam_ITEMPARAM_EQUIP_POWER_QUERY
)

func (x *EquipPowerQuery) Reset() {
	*x = EquipPowerQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipPowerQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipPowerQuery) ProtoMessage() {}

func (x *EquipPowerQuery) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipPowerQuery.ProtoReflect.Descriptor instead.
func (*EquipPowerQuery) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{182}
}

func (x *EquipPowerQuery) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipPowerQuery_Cmd
}

func (x *EquipPowerQuery) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipPowerQuery_Param
}

func (x *EquipPowerQuery) GetData() []*EquipPowerData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MagicSuitPos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos    *EEquipPos `protobuf:"varint,1,opt,name=pos,enum=Cmd.EEquipPos,def=0" json:"pos,omitempty"`
	Guid   *string    `protobuf:"bytes,2,opt,name=guid" json:"guid,omitempty"`
	Itemid *uint32    `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
}

// Default values for MagicSuitPos fields.
const (
	Default_MagicSuitPos_Pos = EEquipPos_EEQUIPPOS_MIN
)

func (x *MagicSuitPos) Reset() {
	*x = MagicSuitPos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicSuitPos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicSuitPos) ProtoMessage() {}

func (x *MagicSuitPos) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicSuitPos.ProtoReflect.Descriptor instead.
func (*MagicSuitPos) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{183}
}

func (x *MagicSuitPos) GetPos() EEquipPos {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_MagicSuitPos_Pos
}

func (x *MagicSuitPos) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *MagicSuitPos) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

type MagicSuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   *uint32         `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Name    *string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	SuitPos []*MagicSuitPos `protobuf:"bytes,3,rep,name=suit_pos,json=suitPos" json:"suit_pos,omitempty"`
}

func (x *MagicSuit) Reset() {
	*x = MagicSuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicSuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicSuit) ProtoMessage() {}

func (x *MagicSuit) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicSuit.ProtoReflect.Descriptor instead.
func (*MagicSuit) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{184}
}

func (x *MagicSuit) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *MagicSuit) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MagicSuit) GetSuitPos() []*MagicSuitPos {
	if x != nil {
		return x.SuitPos
	}
	return nil
}

type MagicSuitSave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=92" json:"param,omitempty"`
	SuitIndex *uint32    `protobuf:"varint,3,opt,name=suit_index,json=suitIndex" json:"suit_index,omitempty"`
	Name      *string    `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

// Default values for MagicSuitSave fields.
const (
	Default_MagicSuitSave_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_MagicSuitSave_Param = ItemParam_ITEMPARAM_MAGICSUIT_SAVE
)

func (x *MagicSuitSave) Reset() {
	*x = MagicSuitSave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicSuitSave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicSuitSave) ProtoMessage() {}

func (x *MagicSuitSave) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicSuitSave.ProtoReflect.Descriptor instead.
func (*MagicSuitSave) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{185}
}

func (x *MagicSuitSave) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MagicSuitSave_Cmd
}

func (x *MagicSuitSave) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MagicSuitSave_Param
}

func (x *MagicSuitSave) GetSuitIndex() uint32 {
	if x != nil && x.SuitIndex != nil {
		return *x.SuitIndex
	}
	return 0
}

func (x *MagicSuitSave) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type MagicSuitNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=94" json:"param,omitempty"`
	Suits []*MagicSuit `protobuf:"bytes,3,rep,name=suits" json:"suits,omitempty"`
}

// Default values for MagicSuitNtf fields.
const (
	Default_MagicSuitNtf_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_MagicSuitNtf_Param = ItemParam_ITEMPARAM_MAGICSUIT_NTF
)

func (x *MagicSuitNtf) Reset() {
	*x = MagicSuitNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicSuitNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicSuitNtf) ProtoMessage() {}

func (x *MagicSuitNtf) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicSuitNtf.ProtoReflect.Descriptor instead.
func (*MagicSuitNtf) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{186}
}

func (x *MagicSuitNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MagicSuitNtf_Cmd
}

func (x *MagicSuitNtf) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MagicSuitNtf_Param
}

func (x *MagicSuitNtf) GetSuits() []*MagicSuit {
	if x != nil {
		return x.Suits
	}
	return nil
}

type MagicSuitApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=93" json:"param,omitempty"`
	Suitdest *uint32    `protobuf:"varint,3,opt,name=suitdest" json:"suitdest,omitempty"`
}

// Default values for MagicSuitApply fields.
const (
	Default_MagicSuitApply_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_MagicSuitApply_Param = ItemParam_ITEMPARAM_MAGICSUIT_APPLY
)

func (x *MagicSuitApply) Reset() {
	*x = MagicSuitApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MagicSuitApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagicSuitApply) ProtoMessage() {}

func (x *MagicSuitApply) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagicSuitApply.ProtoReflect.Descriptor instead.
func (*MagicSuitApply) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{187}
}

func (x *MagicSuitApply) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MagicSuitApply_Cmd
}

func (x *MagicSuitApply) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MagicSuitApply_Param
}

func (x *MagicSuitApply) GetSuitdest() uint32 {
	if x != nil && x.Suitdest != nil {
		return *x.Suitdest
	}
	return 0
}

type PotionStoreSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoOn *bool    `protobuf:"varint,1,opt,name=auto_on,json=autoOn" json:"auto_on,omitempty"`
	Edge   *uint32  `protobuf:"varint,2,opt,name=edge" json:"edge,omitempty"`
	Item   []uint32 `protobuf:"varint,3,rep,name=item" json:"item,omitempty"`
}

func (x *PotionStoreSetting) Reset() {
	*x = PotionStoreSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionStoreSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionStoreSetting) ProtoMessage() {}

func (x *PotionStoreSetting) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionStoreSetting.ProtoReflect.Descriptor instead.
func (*PotionStoreSetting) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{188}
}

func (x *PotionStoreSetting) GetAutoOn() bool {
	if x != nil && x.AutoOn != nil {
		return *x.AutoOn
	}
	return false
}

func (x *PotionStoreSetting) GetEdge() uint32 {
	if x != nil && x.Edge != nil {
		return *x.Edge
	}
	return 0
}

func (x *PotionStoreSetting) GetItem() []uint32 {
	if x != nil {
		return x.Item
	}
	return nil
}

type PotionStoreNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=95" json:"param,omitempty"`
	HpSetting *PotionStoreSetting `protobuf:"bytes,3,opt,name=hp_setting,json=hpSetting" json:"hp_setting,omitempty"`
	SpSetting *PotionStoreSetting `protobuf:"bytes,4,opt,name=sp_setting,json=spSetting" json:"sp_setting,omitempty"`
}

// Default values for PotionStoreNtf fields.
const (
	Default_PotionStoreNtf_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PotionStoreNtf_Param = ItemParam_ITEMPARAM_POTIONSTORE
)

func (x *PotionStoreNtf) Reset() {
	*x = PotionStoreNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotionStoreNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotionStoreNtf) ProtoMessage() {}

func (x *PotionStoreNtf) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotionStoreNtf.ProtoReflect.Descriptor instead.
func (*PotionStoreNtf) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{189}
}

func (x *PotionStoreNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PotionStoreNtf_Cmd
}

func (x *PotionStoreNtf) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PotionStoreNtf_Param
}

func (x *PotionStoreNtf) GetHpSetting() *PotionStoreSetting {
	if x != nil {
		return x.HpSetting
	}
	return nil
}

func (x *PotionStoreNtf) GetSpSetting() *PotionStoreSetting {
	if x != nil {
		return x.SpSetting
	}
	return nil
}

type EnchantHighestBuffNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=123" json:"param,omitempty"`
	Guid  *string    `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
}

// Default values for EnchantHighestBuffNotify fields.
const (
	Default_EnchantHighestBuffNotify_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EnchantHighestBuffNotify_Param = ItemParam_ITEMPARAM_ENCHANT_HIGHEST_BUFF
)

func (x *EnchantHighestBuffNotify) Reset() {
	*x = EnchantHighestBuffNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantHighestBuffNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantHighestBuffNotify) ProtoMessage() {}

func (x *EnchantHighestBuffNotify) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantHighestBuffNotify.ProtoReflect.Descriptor instead.
func (*EnchantHighestBuffNotify) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{190}
}

func (x *EnchantHighestBuffNotify) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnchantHighestBuffNotify_Cmd
}

func (x *EnchantHighestBuffNotify) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnchantHighestBuffNotify_Param
}

func (x *EnchantHighestBuffNotify) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

type LotteryDataSyncItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=124" json:"param,omitempty"`
	FreeTypes []ELotteryType `protobuf:"varint,3,rep,name=free_types,json=freeTypes,enum=Cmd.ELotteryType" json:"free_types,omitempty"`
}

// Default values for LotteryDataSyncItemCmd fields.
const (
	Default_LotteryDataSyncItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_LotteryDataSyncItemCmd_Param = ItemParam_ITEMPARAM_LOTTERY_DATA_SYNC
)

func (x *LotteryDataSyncItemCmd) Reset() {
	*x = LotteryDataSyncItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryDataSyncItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryDataSyncItemCmd) ProtoMessage() {}

func (x *LotteryDataSyncItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryDataSyncItemCmd.ProtoReflect.Descriptor instead.
func (*LotteryDataSyncItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{191}
}

func (x *LotteryDataSyncItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LotteryDataSyncItemCmd_Cmd
}

func (x *LotteryDataSyncItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LotteryDataSyncItemCmd_Param
}

func (x *LotteryDataSyncItemCmd) GetFreeTypes() []ELotteryType {
	if x != nil {
		return x.FreeTypes
	}
	return nil
}

type ArtifactFlagmentAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=125" json:"param,omitempty"`
	Guid  *string    `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Cost  *SItem     `protobuf:"bytes,4,opt,name=cost" json:"cost,omitempty"`
	Artid *uint32    `protobuf:"varint,5,opt,name=artid" json:"artid,omitempty"`
}

// Default values for ArtifactFlagmentAdd fields.
const (
	Default_ArtifactFlagmentAdd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ArtifactFlagmentAdd_Param = ItemParam_ITEMPARAM_ARTIFACT_ADD_FLAGMENT
)

func (x *ArtifactFlagmentAdd) Reset() {
	*x = ArtifactFlagmentAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactFlagmentAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactFlagmentAdd) ProtoMessage() {}

func (x *ArtifactFlagmentAdd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactFlagmentAdd.ProtoReflect.Descriptor instead.
func (*ArtifactFlagmentAdd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{192}
}

func (x *ArtifactFlagmentAdd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ArtifactFlagmentAdd_Cmd
}

func (x *ArtifactFlagmentAdd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ArtifactFlagmentAdd_Param
}

func (x *ArtifactFlagmentAdd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *ArtifactFlagmentAdd) GetCost() *SItem {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *ArtifactFlagmentAdd) GetArtid() uint32 {
	if x != nil && x.Artid != nil {
		return *x.Artid
	}
	return 0
}

type LotteryDailyReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activityid *uint32 `protobuf:"varint,1,opt,name=activityid" json:"activityid,omitempty"`
	Rewardday  *uint32 `protobuf:"varint,2,opt,name=rewardday" json:"rewardday,omitempty"`
	Rewardtime *uint32 `protobuf:"varint,3,opt,name=rewardtime" json:"rewardtime,omitempty"`
}

func (x *LotteryDailyReward) Reset() {
	*x = LotteryDailyReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryDailyReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryDailyReward) ProtoMessage() {}

func (x *LotteryDailyReward) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryDailyReward.ProtoReflect.Descriptor instead.
func (*LotteryDailyReward) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{193}
}

func (x *LotteryDailyReward) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *LotteryDailyReward) GetRewardday() uint32 {
	if x != nil && x.Rewardday != nil {
		return *x.Rewardday
	}
	return 0
}

func (x *LotteryDailyReward) GetRewardtime() uint32 {
	if x != nil && x.Rewardtime != nil {
		return *x.Rewardtime
	}
	return 0
}

type LotteryDailyRewardSyncItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param        *ItemParam            `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=127" json:"param,omitempty"`
	Dailyrewards []*LotteryDailyReward `protobuf:"bytes,3,rep,name=dailyrewards" json:"dailyrewards,omitempty"`
}

// Default values for LotteryDailyRewardSyncItemCmd fields.
const (
	Default_LotteryDailyRewardSyncItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_LotteryDailyRewardSyncItemCmd_Param = ItemParam_ITEMPARAM_LOTTERY_DAILY_REWARD_SYNC
)

func (x *LotteryDailyRewardSyncItemCmd) Reset() {
	*x = LotteryDailyRewardSyncItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryDailyRewardSyncItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryDailyRewardSyncItemCmd) ProtoMessage() {}

func (x *LotteryDailyRewardSyncItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryDailyRewardSyncItemCmd.ProtoReflect.Descriptor instead.
func (*LotteryDailyRewardSyncItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{194}
}

func (x *LotteryDailyRewardSyncItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LotteryDailyRewardSyncItemCmd_Cmd
}

func (x *LotteryDailyRewardSyncItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LotteryDailyRewardSyncItemCmd_Param
}

func (x *LotteryDailyRewardSyncItemCmd) GetDailyrewards() []*LotteryDailyReward {
	if x != nil {
		return x.Dailyrewards
	}
	return nil
}

type LotteryDailyRewardGetItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param       *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=128" json:"param,omitempty"`
	Activityid  *uint32    `protobuf:"varint,3,opt,name=activityid" json:"activityid,omitempty"`
	Lotterytype *uint32    `protobuf:"varint,4,opt,name=lotterytype" json:"lotterytype,omitempty"`
	Day         *uint32    `protobuf:"varint,5,opt,name=day" json:"day,omitempty"`
}

// Default values for LotteryDailyRewardGetItemCmd fields.
const (
	Default_LotteryDailyRewardGetItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_LotteryDailyRewardGetItemCmd_Param = ItemParam_ITEMPARAM_LOTTERY_DAILY_REWARD_GET
)

func (x *LotteryDailyRewardGetItemCmd) Reset() {
	*x = LotteryDailyRewardGetItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryDailyRewardGetItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryDailyRewardGetItemCmd) ProtoMessage() {}

func (x *LotteryDailyRewardGetItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryDailyRewardGetItemCmd.ProtoReflect.Descriptor instead.
func (*LotteryDailyRewardGetItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{195}
}

func (x *LotteryDailyRewardGetItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LotteryDailyRewardGetItemCmd_Cmd
}

func (x *LotteryDailyRewardGetItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LotteryDailyRewardGetItemCmd_Param
}

func (x *LotteryDailyRewardGetItemCmd) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *LotteryDailyRewardGetItemCmd) GetLotterytype() uint32 {
	if x != nil && x.Lotterytype != nil {
		return *x.Lotterytype
	}
	return 0
}

func (x *LotteryDailyRewardGetItemCmd) GetDay() uint32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

type AutoSellItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=126" json:"param,omitempty"`
	On    *bool      `protobuf:"varint,3,opt,name=on" json:"on,omitempty"`
}

// Default values for AutoSellItemCmd fields.
const (
	Default_AutoSellItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_AutoSellItemCmd_Param = ItemParam_ITEMPARAM_AUTOSELL
)

func (x *AutoSellItemCmd) Reset() {
	*x = AutoSellItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoSellItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoSellItemCmd) ProtoMessage() {}

func (x *AutoSellItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoSellItemCmd.ProtoReflect.Descriptor instead.
func (*AutoSellItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{196}
}

func (x *AutoSellItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AutoSellItemCmd_Cmd
}

func (x *AutoSellItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AutoSellItemCmd_Param
}

func (x *AutoSellItemCmd) GetOn() bool {
	if x != nil && x.On != nil {
		return *x.On
	}
	return false
}

type AfricanPoringItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *uint32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Get    *bool     `protobuf:"varint,2,opt,name=get" json:"get,omitempty"`
	Select *bool     `protobuf:"varint,3,opt,name=select" json:"select,omitempty"`
	Item   *ItemData `protobuf:"bytes,4,opt,name=item" json:"item,omitempty"`
	Weight *uint32   `protobuf:"varint,5,opt,name=weight" json:"weight,omitempty"`
}

func (x *AfricanPoringItem) Reset() {
	*x = AfricanPoringItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AfricanPoringItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AfricanPoringItem) ProtoMessage() {}

func (x *AfricanPoringItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AfricanPoringItem.ProtoReflect.Descriptor instead.
func (*AfricanPoringItem) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{197}
}

func (x *AfricanPoringItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AfricanPoringItem) GetGet() bool {
	if x != nil && x.Get != nil {
		return *x.Get
	}
	return false
}

func (x *AfricanPoringItem) GetSelect() bool {
	if x != nil && x.Select != nil {
		return *x.Select
	}
	return false
}

func (x *AfricanPoringItem) GetItem() *ItemData {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *AfricanPoringItem) GetWeight() uint32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

type AfricanPoringPos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groupid   *uint32                  `protobuf:"varint,1,opt,name=groupid" json:"groupid,omitempty"`
	Pos       *uint32                  `protobuf:"varint,2,opt,name=pos" json:"pos,omitempty"`
	Curreward *uint32                  `protobuf:"varint,3,opt,name=curreward" json:"curreward,omitempty"`
	Status    *EAfricanPoringPosStatus `protobuf:"varint,4,opt,name=status,enum=Cmd.EAfricanPoringPosStatus" json:"status,omitempty"`
	Items     []*AfricanPoringItem     `protobuf:"bytes,5,rep,name=items" json:"items,omitempty"`
}

func (x *AfricanPoringPos) Reset() {
	*x = AfricanPoringPos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AfricanPoringPos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AfricanPoringPos) ProtoMessage() {}

func (x *AfricanPoringPos) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AfricanPoringPos.ProtoReflect.Descriptor instead.
func (*AfricanPoringPos) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{198}
}

func (x *AfricanPoringPos) GetGroupid() uint32 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

func (x *AfricanPoringPos) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *AfricanPoringPos) GetCurreward() uint32 {
	if x != nil && x.Curreward != nil {
		return *x.Curreward
	}
	return 0
}

func (x *AfricanPoringPos) GetStatus() EAfricanPoringPosStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return EAfricanPoringPosStatus_EAFRICANPORINGPOSSTATUS_MIN
}

func (x *AfricanPoringPos) GetItems() []*AfricanPoringItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type QueryAfricanPoringItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd                *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param              *ItemParam            `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=129" json:"param,omitempty"`
	Freenormalcount    *uint32               `protobuf:"varint,3,opt,name=freenormalcount" json:"freenormalcount,omitempty"`
	Lotterycount       *uint32               `protobuf:"varint,4,opt,name=lotterycount" json:"lotterycount,omitempty"`
	Nextfreenormaltime *uint32               `protobuf:"varint,7,opt,name=nextfreenormaltime" json:"nextfreenormaltime,omitempty"`
	Status             *EAfricanPoringStatus `protobuf:"varint,5,opt,name=status,enum=Cmd.EAfricanPoringStatus" json:"status,omitempty"`
	Items              []*AfricanPoringPos   `protobuf:"bytes,6,rep,name=items" json:"items,omitempty"`
}

// Default values for QueryAfricanPoringItemCmd fields.
const (
	Default_QueryAfricanPoringItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QueryAfricanPoringItemCmd_Param = ItemParam_ITEMPARAM_AFRICANPORING_QUERY
)

func (x *QueryAfricanPoringItemCmd) Reset() {
	*x = QueryAfricanPoringItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAfricanPoringItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAfricanPoringItemCmd) ProtoMessage() {}

func (x *QueryAfricanPoringItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAfricanPoringItemCmd.ProtoReflect.Descriptor instead.
func (*QueryAfricanPoringItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{199}
}

func (x *QueryAfricanPoringItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryAfricanPoringItemCmd_Cmd
}

func (x *QueryAfricanPoringItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryAfricanPoringItemCmd_Param
}

func (x *QueryAfricanPoringItemCmd) GetFreenormalcount() uint32 {
	if x != nil && x.Freenormalcount != nil {
		return *x.Freenormalcount
	}
	return 0
}

func (x *QueryAfricanPoringItemCmd) GetLotterycount() uint32 {
	if x != nil && x.Lotterycount != nil {
		return *x.Lotterycount
	}
	return 0
}

func (x *QueryAfricanPoringItemCmd) GetNextfreenormaltime() uint32 {
	if x != nil && x.Nextfreenormaltime != nil {
		return *x.Nextfreenormaltime
	}
	return 0
}

func (x *QueryAfricanPoringItemCmd) GetStatus() EAfricanPoringStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return EAfricanPoringStatus_EAFRICANPORINGSTATUS_MIN
}

func (x *QueryAfricanPoringItemCmd) GetItems() []*AfricanPoringPos {
	if x != nil {
		return x.Items
	}
	return nil
}

type AfricanPoringUpdateItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd             *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param           *ItemParam            `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=130" json:"param,omitempty"`
	Freenormalcount *uint32               `protobuf:"varint,3,opt,name=freenormalcount" json:"freenormalcount,omitempty"`
	Lotterycount    *uint32               `protobuf:"varint,4,opt,name=lotterycount" json:"lotterycount,omitempty"`
	Status          *EAfricanPoringStatus `protobuf:"varint,5,opt,name=status,enum=Cmd.EAfricanPoringStatus" json:"status,omitempty"`
	Items           []*AfricanPoringPos   `protobuf:"bytes,6,rep,name=items" json:"items,omitempty"`
}

// Default values for AfricanPoringUpdateItemCmd fields.
const (
	Default_AfricanPoringUpdateItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_AfricanPoringUpdateItemCmd_Param = ItemParam_ITEMPARAM_AFRICANPORING_UPDATE
)

func (x *AfricanPoringUpdateItemCmd) Reset() {
	*x = AfricanPoringUpdateItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AfricanPoringUpdateItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AfricanPoringUpdateItemCmd) ProtoMessage() {}

func (x *AfricanPoringUpdateItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AfricanPoringUpdateItemCmd.ProtoReflect.Descriptor instead.
func (*AfricanPoringUpdateItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{200}
}

func (x *AfricanPoringUpdateItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AfricanPoringUpdateItemCmd_Cmd
}

func (x *AfricanPoringUpdateItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AfricanPoringUpdateItemCmd_Param
}

func (x *AfricanPoringUpdateItemCmd) GetFreenormalcount() uint32 {
	if x != nil && x.Freenormalcount != nil {
		return *x.Freenormalcount
	}
	return 0
}

func (x *AfricanPoringUpdateItemCmd) GetLotterycount() uint32 {
	if x != nil && x.Lotterycount != nil {
		return *x.Lotterycount
	}
	return 0
}

func (x *AfricanPoringUpdateItemCmd) GetStatus() EAfricanPoringStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return EAfricanPoringStatus_EAFRICANPORINGSTATUS_MIN
}

func (x *AfricanPoringUpdateItemCmd) GetItems() []*AfricanPoringPos {
	if x != nil {
		return x.Items
	}
	return nil
}

type AfricanPoringLotteryItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param       *ItemParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=131" json:"param,omitempty"`
	Groupid     *uint32         `protobuf:"varint,3,opt,name=groupid" json:"groupid,omitempty"`
	Action      *EAfricanPoring `protobuf:"varint,4,opt,name=action,enum=Cmd.EAfricanPoring" json:"action,omitempty"`
	Rewardid    *uint32         `protobuf:"varint,5,opt,name=rewardid" json:"rewardid,omitempty"`
	Hitpos      *uint32         `protobuf:"varint,6,opt,name=hitpos" json:"hitpos,omitempty"`
	RewardItems []*ItemInfo     `protobuf:"bytes,7,rep,name=reward_items,json=rewardItems" json:"reward_items,omitempty"`
}

// Default values for AfricanPoringLotteryItemCmd fields.
const (
	Default_AfricanPoringLotteryItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_AfricanPoringLotteryItemCmd_Param = ItemParam_ITEMPARAM_AFRICANPORING_LOTTERY
)

func (x *AfricanPoringLotteryItemCmd) Reset() {
	*x = AfricanPoringLotteryItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AfricanPoringLotteryItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AfricanPoringLotteryItemCmd) ProtoMessage() {}

func (x *AfricanPoringLotteryItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AfricanPoringLotteryItemCmd.ProtoReflect.Descriptor instead.
func (*AfricanPoringLotteryItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{201}
}

func (x *AfricanPoringLotteryItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AfricanPoringLotteryItemCmd_Cmd
}

func (x *AfricanPoringLotteryItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AfricanPoringLotteryItemCmd_Param
}

func (x *AfricanPoringLotteryItemCmd) GetGroupid() uint32 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

func (x *AfricanPoringLotteryItemCmd) GetAction() EAfricanPoring {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return EAfricanPoring_EAFRICANPORING_MIN
}

func (x *AfricanPoringLotteryItemCmd) GetRewardid() uint32 {
	if x != nil && x.Rewardid != nil {
		return *x.Rewardid
	}
	return 0
}

func (x *AfricanPoringLotteryItemCmd) GetHitpos() uint32 {
	if x != nil && x.Hitpos != nil {
		return *x.Hitpos
	}
	return 0
}

func (x *AfricanPoringLotteryItemCmd) GetRewardItems() []*ItemInfo {
	if x != nil {
		return x.RewardItems
	}
	return nil
}

type ExtractLevelUpItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param      *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=135" json:"param,omitempty"`
	Grid       *uint32     `protobuf:"varint,3,opt,name=grid" json:"grid,omitempty"`
	Costequips []*ItemInfo `protobuf:"bytes,4,rep,name=costequips" json:"costequips,omitempty"`
}

// Default values for ExtractLevelUpItemCmd fields.
const (
	Default_ExtractLevelUpItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ExtractLevelUpItemCmd_Param = ItemParam_ITEMPARAM_EQUIP_EXTRACT_LEVELUP
)

func (x *ExtractLevelUpItemCmd) Reset() {
	*x = ExtractLevelUpItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractLevelUpItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractLevelUpItemCmd) ProtoMessage() {}

func (x *ExtractLevelUpItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractLevelUpItemCmd.ProtoReflect.Descriptor instead.
func (*ExtractLevelUpItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{202}
}

func (x *ExtractLevelUpItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExtractLevelUpItemCmd_Cmd
}

func (x *ExtractLevelUpItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExtractLevelUpItemCmd_Param
}

func (x *ExtractLevelUpItemCmd) GetGrid() uint32 {
	if x != nil && x.Grid != nil {
		return *x.Grid
	}
	return 0
}

func (x *ExtractLevelUpItemCmd) GetCostequips() []*ItemInfo {
	if x != nil {
		return x.Costequips
	}
	return nil
}

type EnchantRefreshAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=132" json:"param,omitempty"`
	Itemid *string        `protobuf:"bytes,3,opt,name=itemid" json:"itemid,omitempty"`
	Multi  *bool          `protobuf:"varint,4,opt,name=multi" json:"multi,omitempty"`
	Attrs  []*EnchantAttr `protobuf:"bytes,5,rep,name=attrs" json:"attrs,omitempty"`
}

// Default values for EnchantRefreshAttr fields.
const (
	Default_EnchantRefreshAttr_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EnchantRefreshAttr_Param = ItemParam_ITEMPARAM_ENCHANT_REFRESH
)

func (x *EnchantRefreshAttr) Reset() {
	*x = EnchantRefreshAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantRefreshAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantRefreshAttr) ProtoMessage() {}

func (x *EnchantRefreshAttr) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantRefreshAttr.ProtoReflect.Descriptor instead.
func (*EnchantRefreshAttr) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{203}
}

func (x *EnchantRefreshAttr) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnchantRefreshAttr_Cmd
}

func (x *EnchantRefreshAttr) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnchantRefreshAttr_Param
}

func (x *EnchantRefreshAttr) GetItemid() string {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return ""
}

func (x *EnchantRefreshAttr) GetMulti() bool {
	if x != nil && x.Multi != nil {
		return *x.Multi
	}
	return false
}

func (x *EnchantRefreshAttr) GetAttrs() []*EnchantAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type ProcessEnchantRefreshAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=133" json:"param,omitempty"`
	Save   *bool      `protobuf:"varint,3,opt,name=save" json:"save,omitempty"`
	Itemid *string    `protobuf:"bytes,4,opt,name=itemid" json:"itemid,omitempty"`
	Index  *uint32    `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
}

// Default values for ProcessEnchantRefreshAttr fields.
const (
	Default_ProcessEnchantRefreshAttr_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ProcessEnchantRefreshAttr_Param = ItemParam_ITEMPARAM_PROCESS_ENCHANT_REFRESH
)

func (x *ProcessEnchantRefreshAttr) Reset() {
	*x = ProcessEnchantRefreshAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessEnchantRefreshAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEnchantRefreshAttr) ProtoMessage() {}

func (x *ProcessEnchantRefreshAttr) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEnchantRefreshAttr.ProtoReflect.Descriptor instead.
func (*ProcessEnchantRefreshAttr) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{204}
}

func (x *ProcessEnchantRefreshAttr) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ProcessEnchantRefreshAttr_Cmd
}

func (x *ProcessEnchantRefreshAttr) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ProcessEnchantRefreshAttr_Param
}

func (x *ProcessEnchantRefreshAttr) GetSave() bool {
	if x != nil && x.Save != nil {
		return *x.Save
	}
	return false
}

func (x *ProcessEnchantRefreshAttr) GetItemid() string {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return ""
}

func (x *ProcessEnchantRefreshAttr) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type EnchantUpgradeAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=134" json:"param,omitempty"`
	Itemid *string    `protobuf:"bytes,3,opt,name=itemid" json:"itemid,omitempty"`
	Etype  *EAttrType `protobuf:"varint,4,opt,name=etype,enum=Cmd.EAttrType" json:"etype,omitempty"`
}

// Default values for EnchantUpgradeAttr fields.
const (
	Default_EnchantUpgradeAttr_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EnchantUpgradeAttr_Param = ItemParam_ITEMPARAM_ENCHANT_UPGRADE
)

func (x *EnchantUpgradeAttr) Reset() {
	*x = EnchantUpgradeAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantUpgradeAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantUpgradeAttr) ProtoMessage() {}

func (x *EnchantUpgradeAttr) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantUpgradeAttr.ProtoReflect.Descriptor instead.
func (*EnchantUpgradeAttr) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{205}
}

func (x *EnchantUpgradeAttr) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnchantUpgradeAttr_Cmd
}

func (x *EnchantUpgradeAttr) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnchantUpgradeAttr_Param
}

func (x *EnchantUpgradeAttr) GetItemid() string {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return ""
}

func (x *EnchantUpgradeAttr) GetEtype() EAttrType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return EAttrType_EATTRTYPE_MIN
}

type RefreshEquipAttrCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=136" json:"param,omitempty"`
	Guid      *string    `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	AttrId    *uint32    `protobuf:"varint,4,opt,name=attr_id,json=attrId" json:"attr_id,omitempty"`
	FormulaId *uint32    `protobuf:"varint,5,opt,name=formula_id,json=formulaId" json:"formula_id,omitempty"`
	Increase  *bool      `protobuf:"varint,6,opt,name=increase" json:"increase,omitempty"`
}

// Default values for RefreshEquipAttrCmd fields.
const (
	Default_RefreshEquipAttrCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_RefreshEquipAttrCmd_Param = ItemParam_ITEMPARAM_REFRESH_EQUIP_ATTR
)

func (x *RefreshEquipAttrCmd) Reset() {
	*x = RefreshEquipAttrCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshEquipAttrCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshEquipAttrCmd) ProtoMessage() {}

func (x *RefreshEquipAttrCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshEquipAttrCmd.ProtoReflect.Descriptor instead.
func (*RefreshEquipAttrCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{206}
}

func (x *RefreshEquipAttrCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RefreshEquipAttrCmd_Cmd
}

func (x *RefreshEquipAttrCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RefreshEquipAttrCmd_Param
}

func (x *RefreshEquipAttrCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *RefreshEquipAttrCmd) GetAttrId() uint32 {
	if x != nil && x.AttrId != nil {
		return *x.AttrId
	}
	return 0
}

func (x *RefreshEquipAttrCmd) GetFormulaId() uint32 {
	if x != nil && x.FormulaId != nil {
		return *x.FormulaId
	}
	return 0
}

func (x *RefreshEquipAttrCmd) GetIncrease() bool {
	if x != nil && x.Increase != nil {
		return *x.Increase
	}
	return false
}

var File_SceneItem_proto protoreflect.FileDescriptor

var file_SceneItem_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x08, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x11, 0x0a, 0x02, 0x63, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x02,
	0x63, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x0d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x42, 0x69, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x0d, 0x45, 0x42, 0x49, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x49, 0x4e, 0x52, 0x04, 0x62, 0x69, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0f, 0x45, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0e, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a,
	0x0e, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x05, 0x69, 0x73, 0x6e, 0x65, 0x77,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x69,
	0x73, 0x6e, 0x65, 0x77, 0x12, 0x23, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x63, 0x61, 0x72, 0x64, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x06, 0x69, 0x73, 0x68,
	0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x06, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x69, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x08, 0x69, 0x73, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x70, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x70, 0x63, 0x12, 0x1d, 0x0a,
	0x08, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6c, 0x76, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x08, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6c, 0x76, 0x12, 0x23, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x1d, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x64, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0a, 0x69, 0x73, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x75, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x3a, 0x0e, 0x45, 0x53, 0x55, 0x42, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x61, 0x6e, 0x64, 0x6b, 0x65, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x61,
	0x6e, 0x64, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x22, 0x37, 0x0a, 0x0d,
	0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x11, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x13, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x58, 0x0a, 0x14, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x62, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41, 0x74, 0x74, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x05, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x22, 0xb4, 0x04, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x6c, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x6c, 0x76, 0x12, 0x1d, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6c, 0x76,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x72, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x6c, 0x76, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x72, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x6c, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x06, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x6c, 0x76,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x6c, 0x76, 0x12, 0x17, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x0e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x0e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x6c, 0x76, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x6c, 0x76, 0x32, 0x12, 0x37, 0x0a,
	0x0f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x6c, 0x76, 0x32, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x6c,
	0x76, 0x32, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x41, 0x74, 0x74, 0x72, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x52,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x46, 0x0a, 0x08, 0x43, 0x61,
	0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x13, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x22, 0x59, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x0d, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x48, 0x0a,
	0x0c, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1d, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06,
	0x62, 0x75, 0x66, 0x66, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x62, 0x75, 0x66, 0x66, 0x69, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x6e, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x45, 0x4e, 0x43, 0x48, 0x41,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x06, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22, 0xc3, 0x01, 0x0a, 0x0a, 0x52, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x66, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0b, 0x72,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x66, 0x61, 0x69, 0x6c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x66, 0x61, 0x69,
	0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x66, 0x69, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x78, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xe7, 0x02, 0x0a, 0x08, 0x45, 0x67, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x21, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x6e,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x70, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x61, 0x74, 0x74, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x61, 0x74, 0x74, 0x72, 0x12,
	0x38, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x6e,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x0c, 0x50, 0x65, 0x74,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x04, 0x65, 0x70, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x69, 0x64, 0x22, 0x8f, 0x08, 0x0a, 0x07, 0x45, 0x67, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x13, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x1f, 0x0a, 0x09, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x65, 0x78, 0x70, 0x12, 0x1f, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x78, 0x70, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x11, 0x0a, 0x02, 0x6c,
	0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x6c, 0x76, 0x12, 0x1d,
	0x0a, 0x08, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x08, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x76, 0x12, 0x15, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x21, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x72, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x68, 0x70, 0x12, 0x23, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x69,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x78, 0x63, 0x69, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x68, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x2b, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x48, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x69, 0x66, 0x74, 0x12, 0x2b,
	0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x69,
	0x66, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x78, 0x63, 0x69, 0x74, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x69,
	0x66, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x11, 0x74, 0x69, 0x6d,
	0x65, 0x48, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x69, 0x66, 0x74, 0x12, 0x20,
	0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x54, 0x69, 0x63, 0x6b,
	0x12, 0x1e, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x54, 0x69, 0x63, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x76, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69,
	0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69,
	0x64, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x67, 0x67, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x52, 0x06, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x66,
	0x66, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x75, 0x66, 0x66, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x1b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x6f, 0x66,
	0x66, 0x12, 0x28, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12,
	0x35, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x77, 0x65, 0x61, 0x72, 0x73, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x77, 0x65, 0x61, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x77, 0x65, 0x61, 0x72, 0x73, 0x18,
	0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x77, 0x65, 0x61, 0x72, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x63, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x76, 0x65,
	0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x62, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32,
	0x22, 0x39, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x22, 0xf5, 0x02, 0x0a, 0x0b,
	0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x11, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x31, 0x12, 0x1b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x32, 0x12, 0x23, 0x0a, 0x0b, 0x77, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x77, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x69, 0x64, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x69, 0x64, 0x78, 0x12, 0x1f, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x79, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x79, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x22, 0x38, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x01,
	0x0a, 0x0b, 0x47, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x11, 0x0a,
	0x02, 0x6c, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x02, 0x6c, 0x76,
	0x12, 0x13, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x13, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0xa9, 0x01, 0x0a,
	0x09, 0x42, 0x75, 0x66, 0x66, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x70, 0x65, 0x72,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x70, 0x65,
	0x72, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x32,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x26, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x53, 0x76,
	0x72, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x22, 0x49, 0x0a, 0x07, 0x47, 0x65, 0x6d, 0x42,
	0x75, 0x66, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x6d, 0x43, 0x61, 0x72, 0x76, 0x65, 0x73,
	0x12, 0x15, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xdc, 0x01, 0x0a,
	0x0c, 0x47, 0x65, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x13, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x06, 0x69, 0x73, 0x73, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x05,
	0x62, 0x75, 0x66, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x47, 0x65, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x52, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73,
	0x12, 0x26, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x76, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x65, 0x6d, 0x43, 0x61, 0x72, 0x76, 0x65, 0x73,
	0x52, 0x06, 0x63, 0x61, 0x72, 0x76, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x08, 0x69, 0x73, 0x66, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x08, 0x69, 0x73, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x0c, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xfc, 0x01, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x70,
	0x72, 0x65, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x08, 0x70, 0x72, 0x65, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x72,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x3a, 0x12, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x52, 0x08, 0x61, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x72, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x6e, 0x6f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x07, 0x6e, 0x6f, 0x61, 0x74, 0x74, 0x72, 0x73,
	0x22, 0x3d, 0x0a, 0x0d, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22,
	0x89, 0x01, 0x0a, 0x0e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x0b, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x61, 0x74, 0x6b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x61, 0x74,
	0x6b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x8d, 0x03, 0x0a, 0x0a,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x13, 0x0a, 0x03,
	0x65, 0x79, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x65, 0x79,
	0x65, 0x12, 0x15, 0x0a, 0x04, 0x68, 0x61, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x04, 0x68, 0x61, 0x69, 0x72, 0x12, 0x1f, 0x0a, 0x09, 0x68, 0x61, 0x69, 0x72,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09,
	0x68, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x62, 0x6c,
	0x69, 0x6e, 0x6b, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50,
	0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x0f, 0x45, 0x50, 0x52, 0x4f, 0x46,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x3a, 0x0b, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x49,
	0x4e, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x0a,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x23, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x15, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x68,
	0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x08, 0x68, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x08, 0x62, 0x6f, 0x73,
	0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08,
	0x62, 0x6f, 0x73, 0x73, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x0c, 0x46, 0x75, 0x72,
	0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x70, 0x63, 0x12, 0x15, 0x0a, 0x04, 0x72, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x17, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x68, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x68, 0x70, 0x72, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x64, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x12,
	0x1d, 0x0a, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe2,
	0x03, 0x0a, 0x09, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x12, 0x11, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x6c, 0x76, 0x12, 0x13, 0x0a, 0x03, 0x72,
	0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x72, 0x6f, 0x77,
	0x12, 0x13, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x21,
	0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x13, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55,
	0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x47, 0x75, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x76, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x61, 0x74, 0x52, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x12, 0x32, 0x0a,
	0x0a, 0x73, 0x65, 0x61, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x61, 0x74, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x23,
	0x0a, 0x03, 0x6e, 0x70, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x70, 0x63, 0x52, 0x03,
	0x6e, 0x70, 0x63, 0x22, 0x27, 0x0a, 0x08, 0x48, 0x6f, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1b, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x07,
	0x43, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x09,
	0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x12,
	0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x22, 0x9a, 0x07, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x21, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x65, 0x71, 0x75, 0x69, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x65, 0x71, 0x75, 0x69, 0x70, 0x12, 0x21,
	0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x61, 0x72,
	0x64, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x09, 0x70, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x06, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x65, 0x67, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x67, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x03, 0x65, 0x67, 0x67, 0x12, 0x2b, 0x0a, 0x06, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x76,
	0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x77, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x77, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x09, 0x66,
	0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09,
	0x66, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x74, 0x74,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x65,
	0x6d, 0x41, 0x74, 0x74, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x12,
	0x27, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x65, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x04, 0x68, 0x6f, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x6f, 0x6d,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x75,
	0x70, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x63, 0x75, 0x70, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x61, 0x74, 0x74,
	0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x6e,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x61, 0x74, 0x74, 0x72, 0x12, 0x38, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22,
	0xf7, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x0d, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x97, 0x02, 0x0a, 0x0d, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x0d, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x8b, 0x02, 0x0a, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x55, 0x53, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x67, 0x75, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x67, 0x75, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x67, 0x75, 0x69, 0x64,
	0x73, 0x22, 0x37, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xda, 0x01, 0x0a, 0x0b, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x53, 0x4f, 0x52, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x0d, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xae, 0x02, 0x0a, 0x05, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0f, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x33, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4f, 0x70, 0x65,
	0x72, 0x3a, 0x0e, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x49,
	0x4e, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x50, 0x6f, 0x73, 0x3a, 0x0d, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f,
	0x4d, 0x49, 0x4e, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x34, 0x0a, 0x05, 0x53, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb9,
	0x01, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x53, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x17, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa5, 0x03, 0x0a, 0x0d, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x64, 0x65, 0x73,
	0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x09, 0x64, 0x65, 0x73, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x72, 0x69, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x6f, 0x6c, 0x64, 0x6c, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6f, 0x6c, 0x64, 0x6c, 0x76, 0x12, 0x17, 0x0a, 0x05, 0x6e,
	0x65, 0x77, 0x6c, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e,
	0x65, 0x77, 0x6c, 0x76, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x13, 0x45, 0x53, 0x54, 0x52,
	0x45, 0x4e, 0x47, 0x54, 0x48, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x45, 0x53, 0x54, 0x52, 0x45,
	0x4e, 0x47, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x38,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x10, 0x45, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x6e,
	0x70, 0x63, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e,
	0x70, 0x63, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x31, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0c, 0x71, 0x75, 0x63, 0x69,
	0x6b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x71, 0x75, 0x63, 0x69, 0x6b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x22, 0xbb, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x44,
	0x4f, 0x4e, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x19, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xb4, 0x03, 0x0a, 0x0b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x10, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x6c, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x72,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x6c, 0x76, 0x12, 0x3f, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x11, 0x45, 0x52,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x73, 0x61,
	0x66, 0x65, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x67,
	0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x6c, 0x76,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x53, 0x61, 0x66, 0x65, 0x6c, 0x76,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x0e, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x25, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x44,
	0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0f,
	0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x21, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x6d, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x45, 0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x45, 0x51, 0x55, 0x49, 0x50, 0x44, 0x41, 0x54, 0x41, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb8,
	0x01, 0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x0d, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x09, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x43, 0x61, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x13, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x43, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x04,
	0x6f, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x3a, 0x0d, 0x45, 0x43, 0x41, 0x52,
	0x44, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x67, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x67, 0x75, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xa3,
	0x01, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x53, 0x48, 0x4f, 0x57, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x6f,
	0x77, 0x36, 0x34, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x48, 0x4f, 0x57,
	0x36, 0x34, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xde, 0x01, 0x0a, 0x0b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x41, 0x49, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x67, 0x75, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x66, 0x66, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x66, 0x66, 0x67, 0x75, 0x69, 0x64,
	0x22, 0x97, 0x01, 0x0a, 0x07, 0x48, 0x69, 0x6e, 0x74, 0x4e, 0x74, 0x66, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x48, 0x49, 0x4e, 0x54, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x19, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x22, 0xd2, 0x02, 0x0a, 0x0c, 0x45,
	0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x37,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x10, 0x45, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6d, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x12, 0x27, 0x0a, 0x0e, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x6d, 0x75,
	0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0x47, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xfd, 0x03, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x76, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x4c, 0x76, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x24, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x10, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x75, 0x70,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06,
	0x75, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x4e,
	0x43, 0x48, 0x41, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x04,
	0x73, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x04, 0x73, 0x61, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x0c, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x38, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22,
	0x80, 0x02, 0x0a, 0x14, 0x45, 0x71, 0x75, 0x69, 0x70, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a,
	0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x4f, 0x6e, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x14, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x4e, 0x4f,
	0x46, 0x46, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0xdb, 0x01, 0x0a, 0x12, 0x50, 0x61,
	0x63, 0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x74, 0x66, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64,
	0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x53, 0x4c, 0x4f, 0x54, 0x4e, 0x54, 0x46,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x61, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0d, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x6d, 0x61,
	0x78, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0xd3, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x71, 0x75, 0x69, 0x70, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x6c, 0x76, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x6c, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x69,
	0x64, 0x73, 0x12, 0x1f, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x6c, 0x76, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x6c, 0x76, 0x32, 0x22, 0xb6, 0x01,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d,
	0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9d, 0x03, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x43, 0x41, 0x52, 0x44, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x16, 0x45, 0x45,
	0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x43, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x52, 0x41, 0x57, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x70,
	0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x70,
	0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61,
	0x72, 0x64, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x61, 0x6e, 0x69, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x61, 0x6e, 0x69, 0x6d, 0x12, 0x23, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xde, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47,
	0x45, 0x54, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65,
	0x4c, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x4c, 0x4f, 0x56, 0x45, 0x5f, 0x4c, 0x45, 0x54, 0x54,
	0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x77, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x77, 0x49, 0x44, 0x22, 0xab, 0x01,
	0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x38,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x53, 0x48, 0x4f, 0x57, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x48, 0x0a, 0x1a, 0x41,
	0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x6f, 0x74,
	0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x6f, 0x74,
	0x65, 0x64, 0x67, 0x65, 0x73, 0x22, 0x9c, 0x04, 0x0a, 0x0a, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x49,
	0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x61, 0x6e, 0x69, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x41, 0x6e, 0x69, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x64, 0x61, 0x79,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x64, 0x61,
	0x79, 0x43, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x6e, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x54, 0x65, 0x6e, 0x43, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x70, 0x63,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa3, 0x03, 0x0a, 0x0e, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x75, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x6d, 0x61,
	0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x70, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x75, 0x70, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x70, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x75, 0x70, 0x45, 0x6e, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0xb8, 0x01, 0x0a,
	0x0b, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x62, 0x6f, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x62, 0x6f, 0x78, 0x22, 0x9d, 0x01, 0x0a, 0x19, 0x4d, 0x69, 0x78, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x69, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69, 0x78, 0x6c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x17, 0x45, 0x4d, 0x49, 0x58, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x55,
	0x53, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x43, 0x6e, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x43, 0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x11, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe4, 0x04, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x64, 0x61,
	0x79, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x64,
	0x61, 0x79, 0x43, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x43, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x43, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e,
	0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x31, 0x52, 0x0a, 0x6f, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x6e, 0x74, 0x12,
	0x46, 0x0a, 0x0e, 0x6d, 0x69, 0x78, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x63, 0x6e, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x69,
	0x78, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x69, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x43, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6d, 0x69, 0x78, 0x6c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x63, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x6e, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x54, 0x65, 0x6e,
	0x43, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x65, 0x6e, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x54, 0x65, 0x6e,
	0x43, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x72, 0x65, 0x65, 0x43, 0x6e, 0x74, 0x22, 0x59,
	0x0a, 0x08, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6c,
	0x65, 0x66, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x4c, 0x6f, 0x67, 0x22, 0xc9, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52,
	0x45, 0x51, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x4c, 0x4f, 0x47, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1f, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x52, 0x03,
	0x6c, 0x6f, 0x67, 0x22, 0xd8, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45,
	0x51, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xf7,
	0x01, 0x0a, 0x0c, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x3a, 0x0d, 0x45, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x25, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x6e,
	0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a,
	0x6f, 0x66, 0x66, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x67, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x67, 0x75, 0x69, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x12, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x37, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x22, 0xce, 0x02, 0x0a, 0x17, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x4d,
	0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x61, 0x74, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64,
	0x61, 0x74, 0x61, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x6d,
	0x61, 0x69, 0x6e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x34, 0x0a, 0x0c, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x76, 0x69, 0x63, 0x65, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x9d, 0x01, 0x0a, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x52, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74,
	0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x69,
	0x64, 0x22, 0x49, 0x0a, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x74,
	0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8c, 0x01, 0x0a,
	0x0e, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x30, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x72, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x48, 0x0a, 0x0e, 0x48,
	0x69, 0x67, 0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xc1, 0x01, 0x0a, 0x14, 0x4e, 0x74, 0x66, 0x48, 0x69, 0x67,
	0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6d, 0x64, 0x12, 0x38,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x54, 0x52, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x29,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x47, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x54, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x69, 0x67,
	0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xb0, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x13, 0x0a, 0x03, 0x6e, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22,
	0xd2, 0x01, 0x0a, 0x14, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x47, 0x69, 0x76, 0x42, 0x75, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x20, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67,
	0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x13, 0x47, 0x69, 0x76, 0x65, 0x57, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x47, 0x49, 0x56, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x69, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x69,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xae,
	0x01, 0x0a, 0x10, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f, 0x53, 0x45,
	0x4c, 0x4c, 0x49, 0x54, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0xe5, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x43, 0x48,
	0x41, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x47, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x6f, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x6f, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x48, 0x65, 0x61, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f,
	0x54, 0x54, 0x45, 0x52, 0x59, 0x48, 0x45, 0x41, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0x39, 0x0a, 0x0f, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22, 0xe6, 0x01,
	0x0a, 0x13, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52,
	0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x13, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x73, 0x12, 0x19, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x72, 0x65, 0x74, 0x6d, 0x73, 0x67, 0x22, 0xb8, 0x01, 0x0a,
	0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x62, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d,
	0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x44, 0x45, 0x42, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x7b, 0x0a, 0x13, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x15, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x74, 0x66, 0x43, 0x6d, 0x64, 0x12, 0x38,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2e,
	0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xab,
	0x02, 0x0a, 0x19, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x41, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x13, 0x45,
	0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x49, 0x4e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x75,
	0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x75, 0x69, 0x64, 0x73,
	0x12, 0x3a, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x0e, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x11,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x12, 0x25, 0x0a, 0x0c, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x6c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa6, 0x02,
	0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x23, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52,
	0x59, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x0c, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x43, 0x66, 0x67, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x4d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x27, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f,
	0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x43, 0x46, 0x47, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x39, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x10, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4d, 0x69, 0x6e, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x22, 0xce, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x4f, 0x54, 0x54,
	0x45, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x0c, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x6c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xd8, 0x01, 0x0a, 0x17, 0x52, 0x6f, 0x6c, 0x6c, 0x43, 0x61, 0x74,
	0x4c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64,
	0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x4c, 0x49, 0x54,
	0x54, 0x45, 0x52, 0x42, 0x4f, 0x58, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22,
	0xd3, 0x01, 0x0a, 0x18, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x42, 0x75, 0x66, 0x66, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x62, 0x75, 0x66, 0x66, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x62, 0x75, 0x66, 0x66, 0x22, 0xa7, 0x01, 0x0a, 0x0f, 0x52, 0x69, 0x64, 0x65, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x73, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x73, 0x6f, 0x6c, 0x64, 0x22,
	0x84, 0x03, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x69, 0x64, 0x65, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1f, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x49, 0x44, 0x45, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x52, 0x69, 0x64, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2b, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x69, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x69,
	0x64, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x22, 0xa1, 0x02, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x69, 0x64, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x52, 0x49, 0x44, 0x45, 0x4c, 0x4f, 0x54, 0x54, 0x45,
	0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x06, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x0d, 0x73, 0x6b,
	0x69, 0x70, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x61, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x70, 0x69,
	0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x07, 0x74, 0x65, 0x6e, 0x70, 0x69, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x61, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x1d, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x4d, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x41, 0x49, 0x53, 0x41, 0x4c, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x27, 0x0a, 0x0f, 0x47, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x75, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x75, 0x69, 0x64, 0x73, 0x22, 0xec, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x53, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x53, 0x45, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c,
	0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xe2, 0x02, 0x0a,
	0x1d, 0x47, 0x65, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x23, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x53, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x47, 0x65, 0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x30, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x47, 0x45, 0x4d, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xe9, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x4d, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x6d, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x28, 0x0a, 0x08, 0x67, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x67, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x6d, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x4d,
	0x5f, 0x55, 0x4e, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x28, 0x0a, 0x08, 0x67, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x67, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x83, 0x02,
	0x0a, 0x0f, 0x47, 0x65, 0x6d, 0x43, 0x61, 0x72, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d,
	0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x52, 0x56, 0x45, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x6d, 0x53, 0x6d, 0x65, 0x6c, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x13, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x4d, 0x5f,
	0x53, 0x4d, 0x45, 0x4c, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x65, 0x6d, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x15, 0x52, 0x69, 0x64, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x79, 0x50, 0x69, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x52, 0x49, 0x44, 0x45, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x59, 0x5f, 0x50, 0x49, 0x43, 0x4b,
	0x49, 0x54, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xa5, 0x02, 0x0a, 0x15,
	0x52, 0x69, 0x64, 0x65, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x79, 0x50, 0x69, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x49, 0x44, 0x45, 0x4c, 0x4f,
	0x54, 0x54, 0x45, 0x59, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x6e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x64, 0x6f, 0x6e, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x64, 0x6f, 0x6e, 0x65, 0x6e, 0x75, 0x6d,
	0x12, 0x19, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x64,
	0x6f, 0x6e, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x53, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x53, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x47, 0x65,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x5c, 0x0a, 0x0f, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x22, 0xff, 0x01, 0x0a, 0x17, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6c, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x4f, 0x4c, 0x4c, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x44, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x15, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x6f,
	0x6c, 0x6c, 0x50, 0x61, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x4f, 0x4c, 0x4c, 0x5f, 0x50, 0x41,
	0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0xe1, 0x01, 0x0a, 0x1f, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x4a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x24, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x20, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x65, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x25, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43,
	0x54, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x20, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x1e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x23, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x53,
	0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x1e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x75,
	0x6c, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x23, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x45,
	0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x55, 0x4c, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f,
	0x63, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x1f, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x53, 0x61, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x25, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x61, 0x76, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x20, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41,
	0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x25, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x54,
	0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x41, 0x49, 0x53, 0x41, 0x4c, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x42,
	0x0a, 0x0a, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x43, 0x44, 0x12, 0x20, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x14, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x43,
	0x44, 0x4e, 0x74, 0x66, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x43, 0x44, 0x5f, 0x4e, 0x54, 0x46,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x63, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x50, 0x6f, 0x73, 0x43, 0x44, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x63, 0x64, 0x22, 0xe1,
	0x01, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x25, 0x0a,
	0x06, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x40, 0x0a, 0x15, 0x4d, 0x69, 0x78, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x4d, 0x69, 0x78, 0x4c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d,
	0x69, 0x78, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x72, 0x61, 0x74, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x14, 0x4d, 0x69,
	0x78, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43,
	0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x49, 0x58, 0x54, 0x59, 0x50, 0x45, 0x4c, 0x4f,
	0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x78,
	0x43, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x69, 0x78, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x69,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x69, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb9, 0x01, 0x0a,
	0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x27, 0x0a, 0x05, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x63,
	0x6b, 0x4d, 0x61, 0x69, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a,
	0x05, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x15, 0x50,
	0x61, 0x63, 0x6b, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x49,
	0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x2c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x69, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x54, 0x0a,
	0x0e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xb7, 0x02, 0x0a, 0x0c, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x52, 0x07, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x22, 0xd7, 0x01,
	0x0a, 0x14, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x18, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x02, 0x0a, 0x13, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x47, 0x69, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x47, 0x49, 0x56,
	0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf5, 0x01, 0x0a, 0x15, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xdd, 0x01, 0x0a, 0x17, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41,
	0x43, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xb0, 0x02, 0x0a, 0x1e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x23, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45,
	0x5f, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xeb, 0x01, 0x0a, 0x1b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x45, 0x6e, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x73, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x73, 0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0xe9, 0x01, 0x0a, 0x1a, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64,
	0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x72, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x72, 0x63, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xfd, 0x01,
	0x0a, 0x16, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1b, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x70,
	0x63, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6e, 0x70, 0x63, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0xda, 0x01,
	0x0a, 0x17, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1c, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x70, 0x63, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x70,
	0x63, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x2f, 0x0a, 0x03, 0x52, 0x47,
	0x42, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x72, 0x12,
	0x0c, 0x0a, 0x01, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x67, 0x12, 0x0c, 0x0a,
	0x01, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x62, 0x22, 0x43, 0x0a, 0x0f, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x69, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70,
	0x69, 0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x03, 0x72, 0x67, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x47, 0x42, 0x52, 0x03, 0x72, 0x67, 0x62,
	0x22, 0x44, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x78, 0x74, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x78, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xff, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x69, 0x63, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x74,
	0x65, 0x78, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x69, 0x63, 0x73, 0x12,
	0x2b, 0x0a, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xeb, 0x02, 0x0a, 0x12,
	0x50, 0x6f, 0x73, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x4e,
	0x47, 0x54, 0x48, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x04, 0x65, 0x70,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x39,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x11, 0x45, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x73,
	0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65,
	0x73, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x65, 0x77, 0x6c, 0x76,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x65, 0x77, 0x6c, 0x76, 0x12, 0x2c, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6e,
	0x65, 0x77, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x6c, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x53, 0x75, 0x6d, 0x4c, 0x76, 0x22, 0x45, 0x0a, 0x0f, 0x50, 0x6f, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x04,
	0x65, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x65, 0x70, 0x6f, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6c, 0x76,
	0x22, 0x85, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x50, 0x6f, 0x73, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x65,
	0x77, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x6c, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6e, 0x65, 0x77, 0x53, 0x75, 0x6d, 0x4c, 0x76, 0x22, 0xff, 0x01, 0x0a, 0x17, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x48, 0x65, 0x61, 0x64, 0x77, 0x65, 0x61, 0x72, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x49,
	0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x20, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x17, 0x52,
	0x61, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x1c, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x61,
	0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x75, 0x70, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x19, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x1e, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x14, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x17, 0x4f, 0x6e, 0x65, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x50, 0x75, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6d,
	0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f,
	0x50, 0x55, 0x54, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x61, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x61, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x75, 0x72, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x75, 0x72, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x0e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6f, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x61, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d,
	0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xcd, 0x01,
	0x0a, 0x16, 0x50, 0x6f, 0x73, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x79, 0x6e,
	0x63, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1b, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x4f, 0x53,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x36, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0c, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a,
	0x0e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x20, 0x0a, 0x0b, 0x6e, 0x70, 0x63, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x70, 0x63, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x6b, 0x0a, 0x0c, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x75, 0x69, 0x74, 0x50, 0x6f,
	0x73, 0x12, 0x2f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x3a, 0x0d,
	0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x22, 0x63,
	0x0a, 0x09, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x75, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x75, 0x69, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61,
	0x67, 0x69, 0x63, 0x53, 0x75, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x52, 0x07, 0x73, 0x75, 0x69, 0x74,
	0x50, 0x6f, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x75, 0x69,
	0x74, 0x53, 0x61, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x53,
	0x55, 0x49, 0x54, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x75, 0x69, 0x74,
	0x4e, 0x74, 0x66, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x53, 0x55, 0x49,
	0x54, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x05,
	0x73, 0x75, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x75, 0x69, 0x74, 0x52, 0x05, 0x73, 0x75, 0x69,
	0x74, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x75, 0x69, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x53,
	0x55, 0x49, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x69, 0x74, 0x64, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x69, 0x74, 0x64, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x12,
	0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x75, 0x74, 0x6f, 0x4f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x65, 0x64, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x22, 0xf7, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x4e, 0x74, 0x66, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x15, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x4f, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x36, 0x0a,
	0x0a, 0x68, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x68, 0x70, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x73, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xae, 0x01,
	0x0a, 0x18, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45,
	0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0xc7,
	0x01, 0x0a, 0x16, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79,
	0x6e, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1b, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f,
	0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66,
	0x72, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x13, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x44,
	0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x74, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x72, 0x74, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x12, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x64, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x64, 0x61, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xe1, 0x01, 0x0a, 0x1d, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d,
	0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x23, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x41,
	0x49, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x0c, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x1c, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x48,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x49,
	0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59,
	0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x45,
	0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0x95, 0x01, 0x0a,
	0x0f, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64,
	0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x53, 0x45, 0x4c, 0x4c, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61, 0x6e,
	0x50, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0xc0, 0x01, 0x0a, 0x10, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61,
	0x6e, 0x50, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xf8, 0x02, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x66, 0x72, 0x69,
	0x63, 0x61, 0x6e, 0x50, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64,
	0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x28, 0x0a, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x6e, 0x65, 0x78, 0x74, 0x66, 0x72, 0x65, 0x65, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x66,
	0x72, 0x65, 0x65, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xca, 0x02,
	0x0a, 0x1a, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x0f,
	0x66, 0x72, 0x65, 0x65, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xcb, 0x02, 0x0a, 0x1b, 0x41,
	0x66, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41,
	0x46, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x4f, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x66, 0x72,
	0x69, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x69, 0x74, 0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x68, 0x69, 0x74, 0x70, 0x6f, 0x73, 0x12, 0x30, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x45, 0x58, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x67, 0x72, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x74, 0x74, 0x72, 0x12, 0x38, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53,
	0x48, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x26, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x22, 0xe0,
	0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x74, 0x74, 0x72, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73,
	0x61, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0xcd, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x43,
	0x48, 0x41, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xfb, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x41, 0x74, 0x74, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1c, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45,
	0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x74,
	0x74, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x2a,
	0xca, 0x1f, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41,
	0x47, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x55, 0x53, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47,
	0x45, 0x53, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x49, 0x54,
	0x45, 0x4d, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10,
	0x07, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x44, 0x4f, 0x4e,
	0x45, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45,
	0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x45, 0x51, 0x55, 0x49, 0x50, 0x44, 0x41, 0x54, 0x41, 0x10, 0x0d,
	0x12, 0x18, 0x0a, 0x14, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x52,
	0x4f, 0x57, 0x53, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x43, 0x41, 0x52,
	0x44, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x49,
	0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x41, 0x49, 0x52, 0x10,
	0x11, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48,
	0x49, 0x4e, 0x54, 0x4e, 0x54, 0x46, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x10, 0x13, 0x12,
	0x1c, 0x0a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x1b, 0x0a,
	0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x4e, 0x4f, 0x46, 0x46, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x53, 0x4c, 0x4f, 0x54, 0x4e, 0x54, 0x46, 0x10, 0x17, 0x12,
	0x1a, 0x0a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x49,
	0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x19, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x43, 0x41, 0x52, 0x44, 0x10, 0x1c, 0x12,
	0x16, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x54,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x1d, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x4c, 0x4f, 0x56, 0x45, 0x5f, 0x4c,
	0x45, 0x54, 0x54, 0x45, 0x52, 0x10, 0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x53, 0x48, 0x4f,
	0x57, 0x10, 0x1f, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x20, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x21, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f,
	0x54, 0x54, 0x45, 0x52, 0x59, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x22, 0x12, 0x18, 0x0a, 0x14, 0x49,
	0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x48, 0x4f,
	0x57, 0x36, 0x34, 0x10, 0x23, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x24, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x52, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x10, 0x25, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x54, 0x52, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x26, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x54, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x27, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51,
	0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x28, 0x12, 0x1e, 0x0a, 0x1a,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x51, 0x55,
	0x4f, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x29, 0x12, 0x21, 0x0a, 0x1d,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50,
	0x4f, 0x53, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x2a, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x2b, 0x12, 0x1a, 0x0a, 0x16,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4a, 0x4f,
	0x42, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x2c, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x49,
	0x56, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x2e, 0x12, 0x20,
	0x0a, 0x1c, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x49, 0x56, 0x45,
	0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x2f,
	0x12, 0x1d, 0x0a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55,
	0x49, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x30, 0x12,
	0x1c, 0x0a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x49,
	0x43, 0x4b, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x31, 0x12, 0x1b, 0x0a,
	0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41,
	0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x10, 0x32, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f,
	0x54, 0x54, 0x45, 0x52, 0x59, 0x48, 0x45, 0x41, 0x44, 0x10, 0x33, 0x12, 0x20, 0x0a, 0x1c, 0x49,
	0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x34, 0x12, 0x1a, 0x0a,
	0x16, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x35, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x44, 0x45, 0x42, 0x54, 0x10, 0x36, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x38, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x39, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x54,
	0x4c, 0x49, 0x54, 0x54, 0x45, 0x52, 0x42, 0x4f, 0x58, 0x10, 0x3a, 0x12, 0x27, 0x0a, 0x23, 0x49,
	0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4c,
	0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x42, 0x4f, 0x4e,
	0x55, 0x53, 0x10, 0x3b, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x58,
	0x54, 0x52, 0x41, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0x3c, 0x12, 0x23, 0x0a, 0x1f, 0x49,
	0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x49, 0x44, 0x45, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x3d,
	0x12, 0x1d, 0x0a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x5f, 0x52, 0x49, 0x44, 0x45, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x59, 0x10, 0x3e, 0x12,
	0x26, 0x0a, 0x22, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x46, 0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x3f, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x41,
	0x50, 0x50, 0x52, 0x41, 0x49, 0x53, 0x41, 0x4c, 0x10, 0x40, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x10, 0x41,
	0x12, 0x27, 0x0a, 0x23, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45,
	0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x5f,
	0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x42, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x43, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x44, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x45, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x47, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x46, 0x12, 0x17, 0x0a,
	0x13, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x43,
	0x41, 0x52, 0x56, 0x45, 0x10, 0x47, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x52, 0x49, 0x44, 0x45, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x59, 0x5f, 0x50,
	0x49, 0x43, 0x4b, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x48, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x49, 0x44, 0x45, 0x4c, 0x4f, 0x54, 0x54, 0x45,
	0x59, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x49, 0x12, 0x17, 0x0a, 0x13,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x53, 0x4d,
	0x45, 0x4c, 0x54, 0x10, 0x4a, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x4b, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x47, 0x45, 0x4d, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x4c, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c,
	0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x4f, 0x4c, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x10, 0x51, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x4f, 0x4c, 0x4c, 0x5f, 0x50, 0x41,
	0x59, 0x10, 0x52, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41,
	0x43, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x53, 0x12, 0x29, 0x0a,
	0x25, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x54, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41,
	0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x10,
	0x55, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x55, 0x4c, 0x44, 0x10, 0x56, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c,
	0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53,
	0x41, 0x56, 0x45, 0x10, 0x57, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10,
	0x58, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x10, 0x59, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46,
	0x41, 0x43, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x41, 0x49, 0x53, 0x41, 0x4c, 0x10, 0x5a, 0x12,
	0x24, 0x0a, 0x20, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x49, 0x58,
	0x54, 0x59, 0x50, 0x45, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x52, 0x43, 0x48,
	0x49, 0x56, 0x45, 0x10, 0x5b, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x53, 0x41, 0x56,
	0x45, 0x10, 0x5c, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59,
	0x10, 0x5d, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4d, 0x41, 0x47, 0x49, 0x43, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x5e, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x4f, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x5f, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x50, 0x4f,
	0x53, 0x5f, 0x43, 0x44, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x60, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x61, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x62, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x63, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x64, 0x12, 0x1c, 0x0a, 0x18,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x66, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x67, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54,
	0x48, 0x10, 0x68, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0x69, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x10, 0x6a, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x10, 0x6b, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x6c, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x6d, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x6e,
	0x12, 0x1b, 0x0a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41,
	0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x10, 0x6f, 0x12, 0x1d, 0x0a,
	0x19, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x70, 0x12, 0x1f, 0x0a, 0x1b,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x10, 0x71, 0x12, 0x26, 0x0a,
	0x22, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x43,
	0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x10, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57,
	0x45, 0x41, 0x52, 0x10, 0x73, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x49,
	0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x74, 0x12, 0x1d,
	0x0a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x75, 0x12, 0x22, 0x0a,
	0x1e, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0x76, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x77, 0x12,
	0x2b, 0x0a, 0x27, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41,
	0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x5f, 0x43, 0x46, 0x47, 0x10, 0x78, 0x12, 0x1f, 0x0a, 0x1b,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f,
	0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x79, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x7a, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x7b, 0x12, 0x1f, 0x0a, 0x1b,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52,
	0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x7c, 0x12, 0x23, 0x0a,
	0x1f, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46,
	0x41, 0x43, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x7d, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x7e, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f,
	0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x10, 0x7f, 0x12, 0x27, 0x0a, 0x22, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x52,
	0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x80, 0x01, 0x12, 0x22, 0x0a, 0x1d,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41,
	0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x81, 0x01,
	0x12, 0x23, 0x0a, 0x1e, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x46,
	0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x82, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x83, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x49,
	0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0x84, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x49,
	0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48,
	0x10, 0x85, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45,
	0x10, 0x86, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x10, 0x87, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x10, 0x88, 0x01, 0x2a, 0xec, 0x03, 0x0a,
	0x09, 0x45, 0x50, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x50,
	0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x48, 0x49,
	0x4f, 0x4e, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x50, 0x41,
	0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x05, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x07,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45,
	0x4d, 0x50, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x50, 0x41,
	0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x09, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x50, 0x41, 0x43,
	0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x54, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55,
	0x52, 0x45, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x50, 0x41,
	0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x11, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54,
	0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x12, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x50, 0x41, 0x43, 0x4b,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x50, 0x41, 0x43,
	0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x14, 0x2a, 0xdc, 0x2f, 0x0a, 0x09,
	0x45, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x4e, 0x4f, 0x52, 0x10,
	0x0a, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45,
	0x10, 0x1e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x55, 0x46, 0x46, 0x10, 0x28, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x55, 0x46, 0x46, 0x4e, 0x4f, 0x43, 0x55, 0x54, 0x10,
	0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x52, 0x52, 0x4f, 0x57, 0x10, 0x2b, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x2c, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x48, 0x4f, 0x53,
	0x54, 0x4c, 0x41, 0x4d, 0x50, 0x10, 0x2d, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x2e,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f,
	0x4e, 0x54, 0x48, 0x43, 0x41, 0x52, 0x44, 0x10, 0x2f, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x43,
	0x45, 0x10, 0x30, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x31, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x45, 0x45, 0x54,
	0x10, 0x32, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x45, 0x54, 0x5f, 0x57, 0x45, 0x41, 0x52, 0x53, 0x48, 0x45, 0x45, 0x54, 0x10, 0x33, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x54,
	0x5f, 0x57, 0x45, 0x41, 0x52, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x34, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x10, 0x35, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x36, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x52, 0x4e,
	0x49, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x48, 0x45, 0x45, 0x54, 0x10, 0x37, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x38, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x57, 0x45, 0x41, 0x52,
	0x53, 0x48, 0x45, 0x45, 0x54, 0x10, 0x3a, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x10, 0x3b, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x3c, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x53, 0x54, 0x55, 0x46, 0x46,
	0x10, 0x3d, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x32, 0x10, 0x3e, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x3f, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x40, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x41, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x42, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x43, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x46, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x54, 0x54,
	0x45, 0x52, 0x10, 0x47, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x10, 0x48, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x10, 0x49, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x4a, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x49,
	0x45, 0x4e, 0x44, 0x10, 0x4b, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x31, 0x10,
	0x4c, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x4f, 0x59, 0x10, 0x4d, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x10, 0x4f, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x10, 0x51, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x10, 0x52, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x52, 0x4d, 0x4f,
	0x55, 0x52, 0x10, 0x53, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x54, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x53, 0x48, 0x4f, 0x45, 0x53, 0x10, 0x55, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x4f, 0x52, 0x59, 0x10, 0x56, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x57, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x5a, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x5b, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x10, 0x5d, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x54,
	0x49, 0x47, 0x45, 0x10, 0x5e, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x60, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x54, 0x10,
	0x64, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x47, 0x47, 0x10, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x45, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x66, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x54, 0x5f, 0x43,
	0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x67, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x50, 0x49, 0x45, 0x43, 0x45, 0x10,
	0x6e, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x50, 0x49, 0x45, 0x43, 0x45, 0x10, 0x78, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x49, 0x45, 0x43, 0x45, 0x10, 0x79, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x7b, 0x12, 0x13, 0x0a, 0x0e, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x10, 0x81, 0x01,
	0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f,
	0x4c, 0x44, 0x10, 0x82, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x10, 0x83, 0x01, 0x12, 0x16, 0x0a, 0x11,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e,
	0x44, 0x10, 0x84, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53, 0x10, 0x85, 0x01, 0x12,
	0x18, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x49, 0x47,
	0x48, 0x54, 0x4d, 0x41, 0x52, 0x45, 0x10, 0x86, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x5f, 0x47, 0x4f,
	0x4c, 0x44, 0x10, 0x87, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d,
	0x45, 0x10, 0x88, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41,
	0x4c, 0x10, 0x89, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x8a, 0x01,
	0x12, 0x15, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x41,
	0x52, 0x44, 0x45, 0x4e, 0x10, 0x8c, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10,
	0x91, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x53, 0x53, 0x45, 0x54, 0x10, 0x92, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x53, 0x48, 0x49, 0x50,
	0x10, 0x93, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x53, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x8f, 0x01,
	0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f,
	0x52, 0x41, 0x10, 0x90, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x56, 0x50, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x8d, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41,
	0x10, 0x95, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x45, 0x58, 0x50, 0x10, 0x96, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x4f, 0x42, 0x45, 0x58, 0x50, 0x10,
	0x97, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x55, 0x52, 0x49, 0x46, 0x59, 0x10, 0x98, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x10, 0x99, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x9a, 0x01, 0x12, 0x19, 0x0a,
	0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x45,
	0x52, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x9b, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x48, 0x4f, 0x4e, 0x4f, 0x52,
	0x10, 0x9c, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x9d, 0x01, 0x12, 0x1d,
	0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44,
	0x57, 0x45, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x41, 0x10, 0x9e, 0x01, 0x12, 0x1d, 0x0a,
	0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57,
	0x45, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x42, 0x10, 0x9f, 0x01, 0x12, 0x18, 0x0a, 0x13,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49,
	0x54, 0x45, 0x4d, 0x10, 0xa0, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x45, 0x10, 0xa1, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x52, 0x41, 0x47, 0x45, 0x10, 0xa4, 0x01, 0x12, 0x1d,
	0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x49, 0x54, 0x45, 0x4d, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xa5, 0x01, 0x12, 0x1b, 0x0a,
	0x16, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x10, 0xa6, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0xa7, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0xa8, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0xa9,
	0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57,
	0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0xaa, 0x01, 0x12, 0x1b,
	0x0a, 0x16, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50,
	0x4f, 0x4e, 0x5f, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0xb4, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f,
	0x57, 0x41, 0x4e, 0x44, 0x10, 0xbe, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x4b, 0x4e, 0x49, 0x46,
	0x45, 0x10, 0xc8, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x57, 0x10, 0xd2, 0x01, 0x12,
	0x1c, 0x0a, 0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41,
	0x50, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x4d, 0x4d, 0x45, 0x52, 0x10, 0xdc, 0x01, 0x12, 0x19, 0x0a,
	0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f,
	0x4e, 0x5f, 0x41, 0x58, 0x45, 0x10, 0xe6, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x4f,
	0x4b, 0x10, 0xf0, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x47, 0x47, 0x45, 0x52, 0x10,
	0xfa, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4d,
	0x54, 0x10, 0x84, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x57, 0x48, 0x49, 0x50, 0x10, 0x8e, 0x02,
	0x12, 0x1a, 0x0a, 0x15, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45,
	0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x54, 0x55, 0x42, 0x45, 0x10, 0x98, 0x02, 0x12, 0x1a, 0x0a, 0x15,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e,
	0x5f, 0x46, 0x49, 0x53, 0x54, 0x10, 0xa2, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x4b, 0x41, 0x54,
	0x41, 0x4e, 0x41, 0x10, 0xac, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x50, 0x49, 0x53, 0x54, 0x4f,
	0x4c, 0x10, 0xb6, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x46, 0x4c, 0x45, 0x10, 0xc0,
	0x02, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0xc2, 0x03,
	0x12, 0x1d, 0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52,
	0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0xc3, 0x03, 0x12,
	0x1c, 0x0a, 0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54,
	0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x57, 0x41, 0x4e, 0x44, 0x10, 0xc4, 0x03, 0x12, 0x1d, 0x0a,
	0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46,
	0x41, 0x43, 0x54, 0x5f, 0x4b, 0x4e, 0x49, 0x46, 0x45, 0x10, 0xc5, 0x03, 0x12, 0x1b, 0x0a, 0x16,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41,
	0x43, 0x54, 0x5f, 0x42, 0x4f, 0x57, 0x10, 0xc6, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f,
	0x48, 0x41, 0x4d, 0x4d, 0x45, 0x52, 0x10, 0xc7, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f,
	0x41, 0x58, 0x45, 0x10, 0xc8, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x41, 0x47,
	0x47, 0x45, 0x52, 0x10, 0xc9, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x53,
	0x54, 0x10, 0xca, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x4d, 0x45, 0x4d, 0x54, 0x10, 0xcb, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x57,
	0x48, 0x49, 0x50, 0x10, 0xcc, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x42, 0x4f, 0x4f,
	0x4b, 0x10, 0xcd, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x41, 0x52, 0x54, 0x53,
	0x10, 0xce, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x49, 0x53, 0x54, 0x4f, 0x4c,
	0x10, 0xcf, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x52, 0x49, 0x46, 0x4c, 0x45, 0x10,
	0xd0, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0xe5, 0x03,
	0x12, 0x1c, 0x0a, 0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52,
	0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0xe8, 0x03, 0x12, 0x15,
	0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x4d, 0x4f,
	0x55, 0x52, 0x10, 0xf4, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x52, 0x4d, 0x4f, 0x55, 0x52, 0x5f, 0x46, 0x41, 0x53, 0x48, 0x49, 0x4f,
	0x4e, 0x10, 0xf5, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x10, 0xfe, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x41, 0x52, 0x4c, 0x10, 0xff,
	0x03, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x49, 0x4b, 0x4f, 0x4e, 0x10, 0x80, 0x04, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x43, 0x45, 0x52, 0x10, 0x81, 0x04, 0x12, 0x17,
	0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x43,
	0x45, 0x4c, 0x45, 0x54, 0x10, 0x82, 0x04, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x59, 0x10, 0x83, 0x04, 0x12,
	0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x42,
	0x45, 0x10, 0x88, 0x04, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x48, 0x4f, 0x45, 0x53, 0x10, 0x92, 0x04, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52,
	0x59, 0x10, 0x9c, 0x04, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x4f, 0x4b, 0x49, 0x5f, 0x45, 0x58, 0x50, 0x10, 0xa8, 0x04, 0x12, 0x21, 0x0a,
	0x1c, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46,
	0x41, 0x43, 0x54, 0x5f, 0x46, 0x46, 0x4c, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xa5, 0x04,
	0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52,
	0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0xa6, 0x04, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f,
	0x46, 0x4c, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xa7, 0x04, 0x12, 0x23, 0x0a, 0x1e, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43,
	0x54, 0x5f, 0x55, 0x4e, 0x41, 0x50, 0x50, 0x52, 0x41, 0x49, 0x53, 0x41, 0x4c, 0x10, 0xa9, 0x04,
	0x12, 0x18, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f,
	0x4f, 0x44, 0x5f, 0x4d, 0x45, 0x41, 0x54, 0x10, 0xd9, 0x04, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x46, 0x49, 0x53,
	0x48, 0x10, 0xda, 0x04, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x56, 0x45, 0x47, 0x45, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0xdb, 0x04, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x46, 0x52, 0x55, 0x49, 0x54, 0x10, 0xdc, 0x04, 0x12, 0x1d,
	0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44,
	0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0xdd, 0x04, 0x12, 0x13, 0x0a,
	0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x10,
	0xe2, 0x04, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x10, 0xa0, 0x06, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0xaa, 0x06, 0x12, 0x13, 0x0a, 0x0e,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x10, 0xb4,
	0x06, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48,
	0x41, 0x49, 0x52, 0x5f, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0xb5, 0x06, 0x12, 0x1a, 0x0a, 0x15, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x46, 0x45,
	0x4d, 0x41, 0x4c, 0x45, 0x10, 0xb6, 0x06, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x59, 0x45, 0x5f, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0xb7, 0x06,
	0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x59,
	0x45, 0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0xb8, 0x06, 0x12, 0x13, 0x0a, 0x0e, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0xbe, 0x06,
	0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41,
	0x49, 0x4c, 0x10, 0xc8, 0x06, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x10, 0xd2, 0x06, 0x12, 0x13, 0x0a, 0x0e, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x46, 0x41, 0x10, 0x85, 0x07,
	0x12, 0x18, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49,
	0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x86, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x50, 0x45, 0x54, 0x10, 0x87,
	0x07, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x53, 0x4b, 0x10, 0x88, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x44, 0x10, 0x89, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x52, 0x10, 0x8a, 0x07,
	0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41,
	0x52, 0x44, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x8b, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x8c, 0x07,
	0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41,
	0x4c, 0x4c, 0x4c, 0x41, 0x4d, 0x50, 0x10, 0x8d, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x42, 0x4f, 0x58, 0x10,
	0x8e, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x4f, 0x4e, 0x47, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x8f, 0x07, 0x12, 0x19, 0x0a, 0x14,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x10, 0x90, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x10, 0x91, 0x07,
	0x12, 0x15, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f,
	0x54, 0x41, 0x52, 0x59, 0x10, 0x92, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x56, 0x10, 0x93, 0x07, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x10, 0x94, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x48, 0x10, 0x95, 0x07, 0x12, 0x14, 0x0a, 0x0f,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x10,
	0x96, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x4f, 0x52, 0x4b, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x97, 0x07, 0x12, 0x12, 0x0a, 0x0d,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x98, 0x07,
	0x12, 0x15, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x99, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x10, 0x9a, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x54, 0x52, 0x4f, 0x54, 0x41,
	0x52, 0x59, 0x10, 0x9b, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x10, 0x9c,
	0x07, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x45, 0x54, 0x4c, 0x41, 0x4d, 0x50, 0x10, 0x9d, 0x07, 0x12, 0x18, 0x0a, 0x13,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x43, 0x48,
	0x41, 0x49, 0x52, 0x10, 0x9e, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x4f, 0x44, 0x50, 0x49, 0x4c, 0x45, 0x10, 0x9f, 0x07, 0x12,
	0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x10, 0xa0, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x45, 0x10, 0xa1, 0x07, 0x12,
	0x16, 0x0a, 0x11, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x45,
	0x48, 0x49, 0x56, 0x45, 0x10, 0xa2, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x54, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0xa3, 0x07,
	0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41,
	0x56, 0x49, 0x4c, 0x49, 0x4f, 0x4e, 0x10, 0xa4, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x10, 0xa5, 0x07, 0x12, 0x17,
	0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x52, 0x10, 0xa6, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x53, 0x53, 0x10, 0xa7, 0x07, 0x12, 0x15, 0x0a,
	0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x44, 0x42, 0x4f,
	0x58, 0x10, 0xa8, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x42, 0x4f, 0x58, 0x10, 0xa9, 0x07, 0x12, 0x18, 0x0a,
	0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x53,
	0x48, 0x45, 0x4c, 0x46, 0x10, 0xaa, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0xab, 0x07, 0x12, 0x12,
	0x0a, 0x0d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x10,
	0xac, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x4f, 0x4c, 0x4c, 0x10, 0xad, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45,
	0x10, 0xae, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0xaf, 0x07, 0x12,
	0x18, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x45,
	0x52, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xb0, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0xb1, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x10, 0xb2, 0x07, 0x12, 0x18,
	0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x5f,
	0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x10, 0xb3, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x49, 0x52, 0x53,
	0x10, 0xb4, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x43, 0x5f, 0x52, 0x4f, 0x4f, 0x46, 0x10, 0xb5, 0x07, 0x12, 0x17, 0x0a, 0x12,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x5f, 0x44, 0x4f,
	0x4f, 0x52, 0x10, 0xb6, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xb7, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x10, 0xb8, 0x07,
	0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55,
	0x52, 0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xb9, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x5f, 0x44, 0x45,
	0x43, 0x10, 0xba, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xbb, 0x07, 0x12, 0x15,
	0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x41, 0x55,
	0x54, 0x59, 0x10, 0xbc, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0xbd, 0x07, 0x12,
	0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x54,
	0x54, 0x4c, 0x45, 0x54, 0x52, 0x45, 0x45, 0x10, 0xbe, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0xbf, 0x07,
	0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53,
	0x54, 0x52, 0x4f, 0x4c, 0x41, 0x42, 0x45, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x10, 0xe8,
	0x07, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x52, 0x41, 0x59, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x10, 0xea, 0x07, 0x12, 0x1c, 0x0a,
	0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52,
	0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xe9, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49,
	0x54, 0x10, 0xb0, 0x09, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0xba, 0x09, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa0, 0x1f, 0x12,
	0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x46, 0x43,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xe8, 0x20, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0xe9, 0x20, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52, 0x5f, 0x43, 0x52, 0x59, 0x53, 0x54, 0x41, 0x4c,
	0x10, 0xea, 0x20, 0x12, 0x27, 0x0a, 0x22, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x52, 0x59, 0x53, 0x54, 0x41, 0x4c, 0x10, 0xeb, 0x20, 0x12, 0x19, 0x0a, 0x14,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x5f,
	0x44, 0x49, 0x43, 0x45, 0x10, 0xec, 0x20, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x49, 0x47, 0x48, 0x54, 0x10,
	0xed, 0x20, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x41, 0x50, 0x50, 0x59, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xee, 0x20, 0x12, 0x1c, 0x0a,
	0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4e, 0x45,
	0x59, 0x5f, 0x4d, 0x49, 0x43, 0x4b, 0x45, 0x59, 0x10, 0xef, 0x20, 0x12, 0x19, 0x0a, 0x14, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x10, 0xf0, 0x20, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0xf1, 0x20, 0x2a, 0xc3, 0x04, 0x0a, 0x0a, 0x45,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x4d, 0x4f, 0x55, 0x52,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x45, 0x53, 0x10, 0x05, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x4f, 0x52, 0x59, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10,
	0x09, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x41, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x0c, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x4f, 0x55, 0x54, 0x48, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x0e, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x41,
	0x52, 0x4c, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x49, 0x4b, 0x4f, 0x4e, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x43, 0x45, 0x4c, 0x45,
	0x54, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x42, 0x52, 0x41, 0x43, 0x45, 0x4c, 0x45, 0x54, 0x10, 0x13,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x59, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10,
	0x15, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x16, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52,
	0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x17, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49,
	0x46, 0x41, 0x43, 0x54, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x31, 0x10, 0x19, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x1a,
	0x2a, 0x5b, 0x0a, 0x09, 0x45, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x42, 0x49, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x42, 0x49, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x42, 0x49, 0x4e, 0x44, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x42, 0x49, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x42,
	0x49, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x37, 0x0a,
	0x0b, 0x45, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0x01, 0x2a, 0x56, 0x0a, 0x09, 0x45, 0x52, 0x69, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x49, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x52, 0x49, 0x44, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x49, 0x44,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45,
	0x52, 0x49, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0xbd,
	0x01, 0x0a, 0x0b, 0x45, 0x54, 0x72, 0x61, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x59,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x41, 0x4e, 0x44, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x54, 0x41, 0x52, 0x47,
	0x45, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x59, 0x4e,
	0x50, 0x43, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x4e, 0x50, 0x43, 0x10, 0x06, 0x2a, 0x86,
	0x01, 0x0a, 0x0c, 0x45, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x45, 0x4e, 0x43,
	0x48, 0x41, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x49, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x57, 0x0a, 0x11, 0x45, 0x52, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x54,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02,
	0x2a, 0xc1, 0x01, 0x0a, 0x0b, 0x45, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x4f, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4c, 0x45, 0x54, 0x54, 0x45,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x52, 0x49, 0x53, 0x54, 0x4d, 0x41, 0x53, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x50, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4c, 0x45, 0x54,
	0x54, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10,
	0x05, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x06, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4f, 0x53, 0x10, 0x07, 0x2a, 0x67, 0x0a, 0x0e, 0x45, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x45,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x04, 0x2a, 0xa8, 0x01,
	0x0a, 0x0f, 0x45, 0x46, 0x75, 0x72, 0x6e, 0x69, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x46,
	0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55,
	0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49,
	0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x04, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0xd7, 0x03, 0x0a, 0x0a, 0x45, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45,
	0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52,
	0x5f, 0x50, 0x55, 0x54, 0x46, 0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x46,
	0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x54, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f,
	0x4f, 0x46, 0x46, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x41, 0x4c, 0x4c, 0x10,
	0x07, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f,
	0x4f, 0x46, 0x46, 0x50, 0x4f, 0x53, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x54, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52,
	0x5f, 0x4f, 0x46, 0x46, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x54, 0x45,
	0x4d, 0x50, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50,
	0x45, 0x52, 0x5f, 0x50, 0x55, 0x54, 0x42, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x0c, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46,
	0x42, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x45, 0x53, 0x53, 0x55, 0x50, 0x5f, 0x4f,
	0x4e, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x44, 0x52, 0x45, 0x53, 0x53, 0x55, 0x50, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x0f, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x52, 0x49,
	0x44, 0x45, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x44, 0x45, 0x4f, 0x46, 0x46, 0x10, 0x11, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58,
	0x10, 0x12, 0x2a, 0xd0, 0x03, 0x0a, 0x09, 0x45, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53,
	0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x41, 0x52, 0x4d, 0x4f, 0x55, 0x52, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x53, 0x48, 0x49,
	0x45, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50,
	0x4f, 0x53, 0x5f, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x45, 0x53, 0x10, 0x04, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x4f, 0x52, 0x59, 0x31, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x59, 0x32,
	0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x50, 0x4f, 0x53, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0x09, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x54, 0x41, 0x49, 0x4c,
	0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x50, 0x4f, 0x53, 0x5f, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x4f, 0x57,
	0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f,
	0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54,
	0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x50, 0x4f, 0x53, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f,
	0x53, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x31,
	0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x14, 0x2a, 0x82, 0x01, 0x0a, 0x0f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x53, 0x54,
	0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x4c, 0x56, 0x10, 0x03, 0x2a, 0x70, 0x0a, 0x0d, 0x45, 0x53,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47,
	0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0xb7, 0x01, 0x0a,
	0x0c, 0x45, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x52, 0x4e,
	0x49, 0x54, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0x07, 0x2a, 0xce, 0x01, 0x0a, 0x0d, 0x45, 0x52, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x53, 0x54, 0x41, 0x59, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x42, 0x41, 0x43, 0x4b,
	0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x53, 0x54, 0x41, 0x59, 0x44, 0x41, 0x4d, 0x10,
	0x04, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x44, 0x41, 0x4d, 0x10, 0x05,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x06, 0x2a, 0xea, 0x01, 0x0a, 0x10, 0x45, 0x44, 0x65, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x44, 0x45, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x53, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x45, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x49, 0x47, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x42,
	0x49, 0x47, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x53, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x46, 0x41, 0x4e, 0x54, 0x41, 0x53, 0x59, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x44,
	0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4d,
	0x41, 0x58, 0x10, 0x06, 0x2a, 0x60, 0x0a, 0x09, 0x45, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x65,
	0x72, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x43, 0x41, 0x52, 0x44, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4d,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x43, 0x41, 0x52, 0x44, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x43, 0x41, 0x52, 0x44, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x46,
	0x46, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x43, 0x41, 0x52, 0x44, 0x4f, 0x50, 0x45, 0x52,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x4c, 0x0a, 0x0a, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f,
	0x54, 0x48, 0x10, 0x02, 0x2a, 0x74, 0x0a, 0x0d, 0x45, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55,
	0x50, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x92, 0x01, 0x0a, 0x11, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x43, 0x41, 0x52,
	0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x45, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x43, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x43, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d,
	0x45, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x43, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x04, 0x2a,
	0x99, 0x03, 0x0a, 0x0c, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4d, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x65, 0x61, 0x64, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19,
	0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x61, 0x74,
	0x4c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x32, 0x10, 0x06, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61,
	0x67, 0x69, 0x63, 0x5f, 0x33, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x69, 0x64, 0x65, 0x10, 0x08, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d,
	0x49, 0x58, 0x31, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x49, 0x58, 0x32, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x49, 0x58,
	0x33, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4d, 0x49, 0x58, 0x34, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x5f,
	0x4e, 0x65, 0x77, 0x10, 0x1f, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x10, 0x20, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x78, 0x10, 0x21, 0x2a, 0x91, 0x01, 0x0a, 0x16,
	0x45, 0x4d, 0x69, 0x78, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4d, 0x49, 0x58, 0x4c, 0x4f,
	0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4d, 0x49, 0x58, 0x4c, 0x4f, 0x54, 0x54, 0x45,
	0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4e, 0x43, 0x4f, 0x4d, 0x42, 0x4f, 0x53,
	0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4d, 0x49, 0x58, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52,
	0x59, 0x5f, 0x55, 0x53, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a,
	0x80, 0x04, 0x0a, 0x0a, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x47, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x5f, 0x47, 0x69, 0x76,
	0x65, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x43, 0x5f, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x5f, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x5f, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x10,
	0x05, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x43, 0x5f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x78, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19,
	0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x5f, 0x57, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x65, 0x73, 0x73, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x5f, 0x42, 0x6f, 0x6f, 0x74,
	0x68, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x55, 0x5f, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x5f, 0x42, 0x6f, 0x6f, 0x74,
	0x68, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4c, 0x5f, 0x47, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x0b,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55,
	0x5f, 0x47, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x0c, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x5f, 0x47, 0x69,
	0x76, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x5f, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x43, 0x5f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4c, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x5f, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x43, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x10, 0x16, 0x2a, 0x75, 0x0a, 0x0f, 0x45, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49,
	0x54, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x46, 0x41, 0x56, 0x4f,
	0x52, 0x49, 0x54, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x7d, 0x0a, 0x14, 0x45, 0x47, 0x65,
	0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x47, 0x45, 0x4d, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x47,
	0x45, 0x4d, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48,
	0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x47, 0x45, 0x4d, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x53, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x47, 0x45, 0x4d, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0xa5, 0x01, 0x0a, 0x14, 0x45, 0x47, 0x65,
	0x6d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x47, 0x45, 0x4d, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47,
	0x45, 0x4d, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47, 0x45, 0x4d, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47, 0x45, 0x4d,
	0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x47, 0x45, 0x4d, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x53, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x47, 0x45, 0x4d, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05,
	0x2a, 0x55, 0x0a, 0x08, 0x45, 0x47, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x47, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x47, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x47, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x47, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0xea, 0x01, 0x0a, 0x1b, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f,
	0x75, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x41, 0x4c, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x55, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x26,
	0x0a, 0x22, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41,
	0x43, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e,
	0x41, 0x4c, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x55,
	0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x10, 0x02, 0x12, 0x29, 0x0a,
	0x25, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43,
	0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x41, 0x59, 0x5f, 0x54, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x45, 0x52, 0x53,
	0x4f, 0x4e, 0x41, 0x4c, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x54,
	0x45, 0x4e, 0x10, 0x04, 0x2a, 0xff, 0x06, 0x0a, 0x0d, 0x45, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x61,
	0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d,
	0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x4f, 0x57, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d,
	0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x52, 0x41, 0x49,
	0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x41, 0x54, 0x4f, 0x53, 0x10, 0x03, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x56, 0x45, 0x43, 0x41, 0x52, 0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x50,
	0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x56, 0x50, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x50, 0x41, 0x43,
	0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x52, 0x41, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x41, 0x43,
	0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x56, 0x47, 0x10, 0x07, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x5f, 0x47, 0x56, 0x47, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41,
	0x42, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x46, 0x4b,
	0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x44, 0x45, 0x41, 0x44, 0x42, 0x4f, 0x53, 0x53,
	0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52, 0x10, 0x0d, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x45, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x50,
	0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x54, 0x5f,
	0x41, 0x44, 0x56, 0x45, 0x4e, 0x54, 0x55, 0x52, 0x45, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54,
	0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x41,
	0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x59,
	0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x54,
	0x50, 0x4f, 0x4c, 0x4c, 0x59, 0x10, 0x13, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x41, 0x43, 0x4b,
	0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x10,
	0x14, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x4d, 0x49, 0x4e, 0x49, 0x52, 0x4f, 0x10, 0x15, 0x12, 0x1c,
	0x0a, 0x18, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x16, 0x12, 0x20, 0x0a, 0x1c,
	0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48,
	0x4f, 0x50, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x10, 0x17, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x4f, 0x47, 0x55, 0x45, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x18, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x4f, 0x44, 0x4f, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x19, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x50,
	0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x4e, 0x5f, 0x52, 0x4f, 0x59, 0x41, 0x4c, 0x10, 0x1a, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x50, 0x41,
	0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x53, 0x54, 0x49,
	0x56, 0x41, 0x4c, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41,
	0x4c, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x41, 0x43,
	0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x41, 0x43, 0x4b, 0x10,
	0x1c, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x4d, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x10, 0x1d, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0x1e, 0x2a, 0x76, 0x0a, 0x0f, 0x45, 0x50, 0x61, 0x63, 0x6b, 0x4d,
	0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x41,
	0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41,
	0x49, 0x4c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x90,
	0x01, 0x0a, 0x0f, 0x45, 0x50, 0x61, 0x63, 0x6b, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41,
	0x49, 0x4c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x03, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x41, 0x43,
	0x4b, 0x4d, 0x41, 0x49, 0x4c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10,
	0x05, 0x2a, 0xe2, 0x02, 0x0a, 0x13, 0x45, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x46, 0x41,
	0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x46, 0x41, 0x56, 0x4f,
	0x52, 0x49, 0x54, 0x45, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x46, 0x41,
	0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22,
	0x45, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x56, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41,
	0x44, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54,
	0x45, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54,
	0x45, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27,
	0x45, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x56, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41,
	0x44, 0x44, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x46, 0x41,
	0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x10, 0x07, 0x12,
	0x25, 0x0a, 0x21, 0x45, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x44, 0x45, 0x53, 0x49,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x53, 0x10, 0x08, 0x2a, 0xd2, 0x01, 0x0a, 0x14, 0x45, 0x41, 0x66, 0x72, 0x69,
	0x63, 0x61, 0x6e, 0x50, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e,
	0x47, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x45, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b,
	0x45, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x04, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0xa1, 0x01, 0x0a, 0x17,
	0x45, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x41, 0x46, 0x52, 0x49,
	0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x53, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x41, 0x46, 0x52,
	0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x53, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x44, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x45, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x50, 0x4f,
	0x53, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x10, 0x02, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47,
	0x50, 0x4f, 0x53, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a,
	0x92, 0x01, 0x0a, 0x0e, 0x45, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x41,
	0x46, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x4e,
	0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4d,
	0x41, 0x58, 0x10, 0x04,
}

var (
	file_SceneItem_proto_rawDescOnce sync.Once
	file_SceneItem_proto_rawDescData = file_SceneItem_proto_rawDesc
)

func file_SceneItem_proto_rawDescGZIP() []byte {
	file_SceneItem_proto_rawDescOnce.Do(func() {
		file_SceneItem_proto_rawDescData = protoimpl.X.CompressGZIP(file_SceneItem_proto_rawDescData)
	})
	return file_SceneItem_proto_rawDescData
}

var file_SceneItem_proto_enumTypes = make([]protoimpl.EnumInfo, 39)
var file_SceneItem_proto_msgTypes = make([]protoimpl.MessageInfo, 207)
var file_SceneItem_proto_goTypes = []interface{}{
	(ItemParam)(0),                           // 0: Cmd.ItemParam
	(EPackType)(0),                           // 1: Cmd.EPackType
	(EItemType)(0),                           // 2: Cmd.EItemType
	(EEquipType)(0),                          // 3: Cmd.EEquipType
	(EBindType)(0),                           // 4: Cmd.EBindType
	(EExpireType)(0),                         // 5: Cmd.EExpireType
	(ERideType)(0),                           // 6: Cmd.ERideType
	(ETragetType)(0),                         // 7: Cmd.ETragetType
	(EEnchantType)(0),                        // 8: Cmd.EEnchantType
	(ERefineLastResult)(0),                   // 9: Cmd.ERefineLastResult
	(ELetterType)(0),                         // 10: Cmd.ELetterType
	(EArtifactState)(0),                      // 11: Cmd.EArtifactState
	(EFurnitureState)(0),                     // 12: Cmd.EFurnitureState
	(EEquipOper)(0),                          // 13: Cmd.EEquipOper
	(EEquipPos)(0),                           // 14: Cmd.EEquipPos
	(EStrengthResult)(0),                     // 15: Cmd.EStrengthResult
	(EStrengthType)(0),                       // 16: Cmd.EStrengthType
	(EProduceType)(0),                        // 17: Cmd.EProduceType
	(ERefineResult)(0),                       // 18: Cmd.ERefineResult
	(EDecomposeResult)(0),                    // 19: Cmd.EDecomposeResult
	(ECardOper)(0),                           // 20: Cmd.ECardOper
	(ETradeType)(0),                          // 21: Cmd.ETradeType
	(EExchangeType)(0),                       // 22: Cmd.EExchangeType
	(EExchangeCardType)(0),                   // 23: Cmd.EExchangeCardType
	(ELotteryType)(0),                        // 24: Cmd.ELotteryType
	(EMixlotteryUseCoinType)(0),              // 25: Cmd.EMixlotteryUseCoinType
	(EQuotaType)(0),                          // 26: Cmd.EQuotaType
	(EFavoriteAction)(0),                     // 27: Cmd.EFavoriteAction
	(EGemSkillComposeType)(0),                // 28: Cmd.EGemSkillComposeType
	(EGemSkillQualityType)(0),                // 29: Cmd.EGemSkillQualityType
	(EGemType)(0),                            // 30: Cmd.EGemType
	(PersonalArtifactRemouldType)(0),         // 31: Cmd.PersonalArtifactRemouldType
	(EPackMailType)(0),                       // 32: Cmd.EPackMailType
	(EPackMailStatus)(0),                     // 33: Cmd.EPackMailStatus
	(EPackMailAction)(0),                     // 34: Cmd.EPackMailAction
	(EFavoriteDesireType)(0),                 // 35: Cmd.EFavoriteDesireType
	(EAfricanPoringStatus)(0),                // 36: Cmd.EAfricanPoringStatus
	(EAfricanPoringPosStatus)(0),             // 37: Cmd.EAfricanPoringPosStatus
	(EAfricanPoring)(0),                      // 38: Cmd.EAfricanPoring
	(*ItemInfo)(nil),                         // 39: Cmd.ItemInfo
	(*RefineCompose)(nil),                    // 40: Cmd.RefineCompose
	(*EquipAttrRefreshTime)(nil),             // 41: Cmd.EquipAttrRefreshTime
	(*EquipAttr)(nil),                        // 42: Cmd.EquipAttr
	(*EquipData)(nil),                        // 43: Cmd.EquipData
	(*CardData)(nil),                         // 44: Cmd.CardData
	(*EnchantAttr)(nil),                      // 45: Cmd.EnchantAttr
	(*EnchantExtra)(nil),                     // 46: Cmd.EnchantExtra
	(*EnchantData)(nil),                      // 47: Cmd.EnchantData
	(*RefineData)(nil),                       // 48: Cmd.RefineData
	(*EggEquip)(nil),                         // 49: Cmd.EggEquip
	(*PetEquipData)(nil),                     // 50: Cmd.PetEquipData
	(*EggData)(nil),                          // 51: Cmd.EggData
	(*LoveLetterData)(nil),                   // 52: Cmd.LoveLetterData
	(*CodeData)(nil),                         // 53: Cmd.CodeData
	(*WeddingData)(nil),                      // 54: Cmd.WeddingData
	(*SenderData)(nil),                       // 55: Cmd.SenderData
	(*GemAttrData)(nil),                      // 56: Cmd.GemAttrData
	(*BuffParam)(nil),                        // 57: Cmd.BuffParam
	(*GemBuff)(nil),                          // 58: Cmd.GemBuff
	(*GemCarves)(nil),                        // 59: Cmd.GemCarves
	(*GemSkillData)(nil),                     // 60: Cmd.GemSkillData
	(*ArtifactAttr)(nil),                     // 61: Cmd.ArtifactAttr
	(*ArtifactData)(nil),                     // 62: Cmd.ArtifactData
	(*FurnitureSeat)(nil),                    // 63: Cmd.FurnitureSeat
	(*FurniturePhoto)(nil),                   // 64: Cmd.FurniturePhoto
	(*DamageRound)(nil),                      // 65: Cmd.DamageRound
	(*DamageUser)(nil),                       // 66: Cmd.DamageUser
	(*DamageItem)(nil),                       // 67: Cmd.DamageItem
	(*FurnitureNpc)(nil),                     // 68: Cmd.FurnitureNpc
	(*Furniture)(nil),                        // 69: Cmd.Furniture
	(*HomeItem)(nil),                         // 70: Cmd.HomeItem
	(*CupItem)(nil),                          // 71: Cmd.CupItem
	(*RedPacket)(nil),                        // 72: Cmd.RedPacket
	(*ItemData)(nil),                         // 73: Cmd.ItemData
	(*PackageItem)(nil),                      // 74: Cmd.PackageItem
	(*PackageUpdate)(nil),                    // 75: Cmd.PackageUpdate
	(*ItemUse)(nil),                          // 76: Cmd.ItemUse
	(*SortInfo)(nil),                         // 77: Cmd.SortInfo
	(*PackageSort)(nil),                      // 78: Cmd.PackageSort
	(*Equip)(nil),                            // 79: Cmd.Equip
	(*SItem)(nil),                            // 80: Cmd.SItem
	(*SellItem)(nil),                         // 81: Cmd.SellItem
	(*EquipStrength)(nil),                    // 82: Cmd.EquipStrength
	(*Produce)(nil),                          // 83: Cmd.Produce
	(*ProduceDone)(nil),                      // 84: Cmd.ProduceDone
	(*EquipRefine)(nil),                      // 85: Cmd.EquipRefine
	(*EquipDecompose)(nil),                   // 86: Cmd.EquipDecompose
	(*DecomposeResult)(nil),                  // 87: Cmd.DecomposeResult
	(*QueryEquipData)(nil),                   // 88: Cmd.QueryEquipData
	(*BrowsePackage)(nil),                    // 89: Cmd.BrowsePackage
	(*EquipCard)(nil),                        // 90: Cmd.EquipCard
	(*ItemShow)(nil),                         // 91: Cmd.ItemShow
	(*ItemShow64)(nil),                       // 92: Cmd.ItemShow64
	(*EquipRepair)(nil),                      // 93: Cmd.EquipRepair
	(*HintNtf)(nil),                          // 94: Cmd.HintNtf
	(*EnchantEquip)(nil),                     // 95: Cmd.EnchantEquip
	(*TradeComposePair)(nil),                 // 96: Cmd.TradeComposePair
	(*TradeRefineData)(nil),                  // 97: Cmd.TradeRefineData
	(*TradeItemBaseInfo)(nil),                // 98: Cmd.TradeItemBaseInfo
	(*EnchantRes)(nil),                       // 99: Cmd.EnchantRes
	(*ProcessEnchantItemCmd)(nil),            // 100: Cmd.ProcessEnchantItemCmd
	(*ExchangeMaterial)(nil),                 // 101: Cmd.ExchangeMaterial
	(*EquipExchangeItemCmd)(nil),             // 102: Cmd.EquipExchangeItemCmd
	(*OnOffStoreItemCmd)(nil),                // 103: Cmd.OnOffStoreItemCmd
	(*PackSlotNtfItemCmd)(nil),               // 104: Cmd.PackSlotNtfItemCmd
	(*RestoreEquipItemCmd)(nil),              // 105: Cmd.RestoreEquipItemCmd
	(*UseCountItemCmd)(nil),                  // 106: Cmd.UseCountItemCmd
	(*ExchangeCardItemCmd)(nil),              // 107: Cmd.ExchangeCardItemCmd
	(*GetCountItemCmd)(nil),                  // 108: Cmd.GetCountItemCmd
	(*SaveLoveLetterCmd)(nil),                // 109: Cmd.SaveLoveLetterCmd
	(*ItemDataShow)(nil),                     // 110: Cmd.ItemDataShow
	(*AELotteryExtraRewardRecord)(nil),       // 111: Cmd.AELotteryExtraRewardRecord
	(*LotteryCmd)(nil),                       // 112: Cmd.LotteryCmd
	(*LotteryRecoveryCmd)(nil),               // 113: Cmd.LotteryRecoveryCmd
	(*LotterySubInfo)(nil),                   // 114: Cmd.LotterySubInfo
	(*LotteryInfo)(nil),                      // 115: Cmd.LotteryInfo
	(*MixLotteryiUseCoinCntInfo)(nil),        // 116: Cmd.MixLotteryiUseCoinCntInfo
	(*LotterySafetyInfo)(nil),                // 117: Cmd.LotterySafetyInfo
	(*QueryLotteryInfo)(nil),                 // 118: Cmd.QueryLotteryInfo
	(*QuotaLog)(nil),                         // 119: Cmd.QuotaLog
	(*QuotaDetail)(nil),                      // 120: Cmd.QuotaDetail
	(*ReqQuotaLogCmd)(nil),                   // 121: Cmd.ReqQuotaLogCmd
	(*ReqQuotaDetailCmd)(nil),                // 122: Cmd.ReqQuotaDetailCmd
	(*EquipPosData)(nil),                     // 123: Cmd.EquipPosData
	(*EquipPosDataUpdate)(nil),               // 124: Cmd.EquipPosDataUpdate
	(*MatItemInfo)(nil),                      // 125: Cmd.MatItemInfo
	(*HighRefineMatComposeCmd)(nil),          // 126: Cmd.HighRefineMatComposeCmd
	(*HighRefineCmd)(nil),                    // 127: Cmd.HighRefineCmd
	(*HighRefineStr)(nil),                    // 128: Cmd.HighRefineStr
	(*HighRefineItem)(nil),                   // 129: Cmd.HighRefineItem
	(*HighRefineData)(nil),                   // 130: Cmd.HighRefineData
	(*NtfHighRefineDataCmd)(nil),             // 131: Cmd.NtfHighRefineDataCmd
	(*UpdateHighRefineDataCmd)(nil),          // 132: Cmd.UpdateHighRefineDataCmd
	(*UseCodItemCmd)(nil),                    // 133: Cmd.UseCodItemCmd
	(*AddJobLevelItemCmd)(nil),               // 134: Cmd.AddJobLevelItemCmd
	(*LotterGivBuyCountCmd)(nil),             // 135: Cmd.LotterGivBuyCountCmd
	(*GiveWeddingDressCmd)(nil),              // 136: Cmd.GiveWeddingDressCmd
	(*QuickStoreItemCmd)(nil),                // 137: Cmd.QuickStoreItemCmd
	(*QuickSellItemCmd)(nil),                 // 138: Cmd.QuickSellItemCmd
	(*EnchantTransItemCmd)(nil),              // 139: Cmd.EnchantTransItemCmd
	(*QueryLotteryHeadItemCmd)(nil),          // 140: Cmd.QueryLotteryHeadItemCmd
	(*LotteryRateInfo)(nil),                  // 141: Cmd.LotteryRateInfo
	(*LotteryRateQueryCmd)(nil),              // 142: Cmd.LotteryRateQueryCmd
	(*EquipComposeItemCmd)(nil),              // 143: Cmd.EquipComposeItemCmd
	(*QueryDebtItemCmd)(nil),                 // 144: Cmd.QueryDebtItemCmd
	(*LotteryActivityInfo)(nil),              // 145: Cmd.LotteryActivityInfo
	(*LotteryActivityNtfCmd)(nil),            // 146: Cmd.LotteryActivityNtfCmd
	(*FavoriteItemActionItemCmd)(nil),        // 147: Cmd.FavoriteItemActionItemCmd
	(*LotteryExtraBonus)(nil),                // 148: Cmd.LotteryExtraBonus
	(*QueryLotteryExtraBonusItemCmd)(nil),    // 149: Cmd.QueryLotteryExtraBonusItemCmd
	(*QueryLotteryExtraBonusCfgCmd)(nil),     // 150: Cmd.QueryLotteryExtraBonusCfgCmd
	(*GetLotteryExtraBonusItemCmd)(nil),      // 151: Cmd.GetLotteryExtraBonusItemCmd
	(*RollCatLitterBoxItemCmd)(nil),          // 152: Cmd.RollCatLitterBoxItemCmd
	(*AlterFashionEquipBuffCmd)(nil),         // 153: Cmd.AlterFashionEquipBuffCmd
	(*RideLotteryInfo)(nil),                  // 154: Cmd.RideLotteryInfo
	(*QueryRideLotteryInfo)(nil),             // 155: Cmd.QueryRideLotteryInfo
	(*ExecRideLotteryCmd)(nil),               // 156: Cmd.ExecRideLotteryCmd
	(*GemSkillAppraisalItemCmd)(nil),         // 157: Cmd.GemSkillAppraisalItemCmd
	(*GemComposeGroup)(nil),                  // 158: Cmd.GemComposeGroup
	(*GemSkillComposeSameItemCmd)(nil),       // 159: Cmd.GemSkillComposeSameItemCmd
	(*GemSkillComposeQualityItemCmd)(nil),    // 160: Cmd.GemSkillComposeQualityItemCmd
	(*GemAttrComposeItemCmd)(nil),            // 161: Cmd.GemAttrComposeItemCmd
	(*GemAttrUpgradeItemCmd)(nil),            // 162: Cmd.GemAttrUpgradeItemCmd
	(*GemMountItemCmd)(nil),                  // 163: Cmd.GemMountItemCmd
	(*GemUnmountItemCmd)(nil),                // 164: Cmd.GemUnmountItemCmd
	(*GemCarveItemCmd)(nil),                  // 165: Cmd.GemCarveItemCmd
	(*GemSmeltItemCmd)(nil),                  // 166: Cmd.GemSmeltItemCmd
	(*RideLotteyPickItemCmd)(nil),            // 167: Cmd.RideLotteyPickItemCmd
	(*RideLotteyPickInfoCmd)(nil),            // 168: Cmd.RideLotteyPickInfoCmd
	(*SandExchangeItemCmd)(nil),              // 169: Cmd.SandExchangeItemCmd
	(*GemDataUpdateItemCmd)(nil),             // 170: Cmd.GemDataUpdateItemCmd
	(*LotteryDollInfo)(nil),                  // 171: Cmd.LotteryDollInfo
	(*LotteryDollQueryItemCmd)(nil),          // 172: Cmd.LotteryDollQueryItemCmd
	(*LotteryDollPayItemCmd)(nil),            // 173: Cmd.LotteryDollPayItemCmd
	(*PersonalArtifactExchangeItemCmd)(nil),  // 174: Cmd.PersonalArtifactExchangeItemCmd
	(*PersonalArtifactDecomposeItemCmd)(nil), // 175: Cmd.PersonalArtifactDecomposeItemCmd
	(*PersonalArtifactComposeItemCmd)(nil),   // 176: Cmd.PersonalArtifactComposeItemCmd
	(*PersonalArtifactRemouldItemCmd)(nil),   // 177: Cmd.PersonalArtifactRemouldItemCmd
	(*PersonalArtifactAttrSaveItemCmd)(nil),  // 178: Cmd.PersonalArtifactAttrSaveItemCmd
	(*PersonalArtifactAppraisalItemCmd)(nil), // 179: Cmd.PersonalArtifactAppraisalItemCmd
	(*EquipPosCD)(nil),                       // 180: Cmd.EquipPosCD
	(*EquipPosCDNtfItemCmd)(nil),             // 181: Cmd.EquipPosCDNtfItemCmd
	(*BatchRefineItemCmd)(nil),               // 182: Cmd.BatchRefineItemCmd
	(*MixLotteryArchiveItem)(nil),            // 183: Cmd.MixLotteryArchiveItem
	(*MixLotteryArchiveGroup)(nil),           // 184: Cmd.MixLotteryArchiveGroup
	(*MixLotteryArchiveCmd)(nil),             // 185: Cmd.MixLotteryArchiveCmd
	(*PackMailData)(nil),                     // 186: Cmd.PackMailData
	(*QueryPackMailItemCmd)(nil),             // 187: Cmd.QueryPackMailItemCmd
	(*PackMailUpdateItemCmd)(nil),            // 188: Cmd.PackMailUpdateItemCmd
	(*PackMailActionItemCmd)(nil),            // 189: Cmd.PackMailActionItemCmd
	(*FavoriteDesire)(nil),                   // 190: Cmd.FavoriteDesire
	(*FavoriteData)(nil),                     // 191: Cmd.FavoriteData
	(*FavoriteQueryItemCmd)(nil),             // 192: Cmd.FavoriteQueryItemCmd
	(*FavoriteGiveItemCmd)(nil),              // 193: Cmd.FavoriteGiveItemCmd
	(*FavoriteRewardItemCmd)(nil),            // 194: Cmd.FavoriteRewardItemCmd
	(*FavoriteInteractItemCmd)(nil),          // 195: Cmd.FavoriteInteractItemCmd
	(*FavoriteDesireConditionItemCmd)(nil),   // 196: Cmd.FavoriteDesireConditionItemCmd
	(*EquipEnchantTransferItemCmd)(nil),      // 197: Cmd.EquipEnchantTransferItemCmd
	(*EquipRefineTransferItemCmd)(nil),       // 198: Cmd.EquipRefineTransferItemCmd
	(*EquipPowerInputItemCmd)(nil),           // 199: Cmd.EquipPowerInputItemCmd
	(*EquipPowerOutputItemCmd)(nil),          // 200: Cmd.EquipPowerOutputItemCmd
	(*RGB)(nil),                              // 201: Cmd.RGB
	(*ColoringPicInfo)(nil),                  // 202: Cmd.ColoringPicInfo
	(*ColoringTextInfo)(nil),                 // 203: Cmd.ColoringTextInfo
	(*ColoringQueryItemCmd)(nil),             // 204: Cmd.ColoringQueryItemCmd
	(*ColoringModifyItemCmd)(nil),            // 205: Cmd.ColoringModifyItemCmd
	(*ColoringShareItemCmd)(nil),             // 206: Cmd.ColoringShareItemCmd
	(*PosStrengthItemCmd)(nil),               // 207: Cmd.PosStrengthItemCmd
	(*PosStrengthData)(nil),                  // 208: Cmd.PosStrengthData
	(*StrengthData)(nil),                     // 209: Cmd.StrengthData
	(*LotteryHeadwearExchange)(nil),          // 210: Cmd.LotteryHeadwearExchange
	(*RandSelectRewardItemCmd)(nil),          // 211: Cmd.RandSelectRewardItemCmd
	(*EquipRecoveryData)(nil),                // 212: Cmd.EquipRecoveryData
	(*EquipRecoveryQueryItemCmd)(nil),        // 213: Cmd.EquipRecoveryQueryItemCmd
	(*EquipRecoveryItemCmd)(nil),             // 214: Cmd.EquipRecoveryItemCmd
	(*OneClickPutTakeStoreCmd)(nil),          // 215: Cmd.OneClickPutTakeStoreCmd
	(*QuestionResult)(nil),                   // 216: Cmd.QuestionResult
	(*QuestionData)(nil),                     // 217: Cmd.QuestionData
	(*QuestionResultItemCmd)(nil),            // 218: Cmd.QuestionResultItemCmd
	(*PosStrengthSyncItemCmd)(nil),           // 219: Cmd.PosStrengthSyncItemCmd
	(*EquipPowerData)(nil),                   // 220: Cmd.EquipPowerData
	(*EquipPowerQuery)(nil),                  // 221: Cmd.EquipPowerQuery
	(*MagicSuitPos)(nil),                     // 222: Cmd.MagicSuitPos
	(*MagicSuit)(nil),                        // 223: Cmd.MagicSuit
	(*MagicSuitSave)(nil),                    // 224: Cmd.MagicSuitSave
	(*MagicSuitNtf)(nil),                     // 225: Cmd.MagicSuitNtf
	(*MagicSuitApply)(nil),                   // 226: Cmd.MagicSuitApply
	(*PotionStoreSetting)(nil),               // 227: Cmd.PotionStoreSetting
	(*PotionStoreNtf)(nil),                   // 228: Cmd.PotionStoreNtf
	(*EnchantHighestBuffNotify)(nil),         // 229: Cmd.EnchantHighestBuffNotify
	(*LotteryDataSyncItemCmd)(nil),           // 230: Cmd.LotteryDataSyncItemCmd
	(*ArtifactFlagmentAdd)(nil),              // 231: Cmd.ArtifactFlagmentAdd
	(*LotteryDailyReward)(nil),               // 232: Cmd.LotteryDailyReward
	(*LotteryDailyRewardSyncItemCmd)(nil),    // 233: Cmd.LotteryDailyRewardSyncItemCmd
	(*LotteryDailyRewardGetItemCmd)(nil),     // 234: Cmd.LotteryDailyRewardGetItemCmd
	(*AutoSellItemCmd)(nil),                  // 235: Cmd.AutoSellItemCmd
	(*AfricanPoringItem)(nil),                // 236: Cmd.AfricanPoringItem
	(*AfricanPoringPos)(nil),                 // 237: Cmd.AfricanPoringPos
	(*QueryAfricanPoringItemCmd)(nil),        // 238: Cmd.QueryAfricanPoringItemCmd
	(*AfricanPoringUpdateItemCmd)(nil),       // 239: Cmd.AfricanPoringUpdateItemCmd
	(*AfricanPoringLotteryItemCmd)(nil),      // 240: Cmd.AfricanPoringLotteryItemCmd
	(*ExtractLevelUpItemCmd)(nil),            // 241: Cmd.ExtractLevelUpItemCmd
	(*EnchantRefreshAttr)(nil),               // 242: Cmd.EnchantRefreshAttr
	(*ProcessEnchantRefreshAttr)(nil),        // 243: Cmd.ProcessEnchantRefreshAttr
	(*EnchantUpgradeAttr)(nil),               // 244: Cmd.EnchantUpgradeAttr
	(*RefreshEquipAttrCmd)(nil),              // 245: Cmd.RefreshEquipAttrCmd
	(EQualityType)(0),                        // 246: Cmd.EQualityType
	(ESource)(0),                             // 247: Cmd.ESource
	(ESubSource)(0),                          // 248: Cmd.ESubSource
	(EAttrType)(0),                           // 249: Cmd.EAttrType
	(*UserAttrSvr)(nil),                      // 250: Cmd.UserAttrSvr
	(EProfession)(0),                         // 251: Cmd.EProfession
	(EGender)(0),                             // 252: Cmd.EGender
	(Command)(0),                             // 253: Cmd.Command
}
var file_SceneItem_proto_depIdxs = []int32{
	2,   // 0: Cmd.ItemInfo.type:type_name -> Cmd.EItemType
	4,   // 1: Cmd.ItemInfo.bind:type_name -> Cmd.EBindType
	5,   // 2: Cmd.ItemInfo.expire:type_name -> Cmd.EExpireType
	246, // 3: Cmd.ItemInfo.quality:type_name -> Cmd.EQualityType
	3,   // 4: Cmd.ItemInfo.equipType:type_name -> Cmd.EEquipType
	247, // 5: Cmd.ItemInfo.source:type_name -> Cmd.ESource
	248, // 6: Cmd.ItemInfo.subsource:type_name -> Cmd.ESubSource
	41,  // 7: Cmd.EquipAttr.times:type_name -> Cmd.EquipAttrRefreshTime
	40,  // 8: Cmd.EquipData.refineCompose:type_name -> Cmd.RefineCompose
	39,  // 9: Cmd.EquipData.strengthlv2cost:type_name -> Cmd.ItemInfo
	42,  // 10: Cmd.EquipData.attrs:type_name -> Cmd.EquipAttr
	249, // 11: Cmd.EnchantAttr.type:type_name -> Cmd.EAttrType
	8,   // 12: Cmd.EnchantData.type:type_name -> Cmd.EEnchantType
	45,  // 13: Cmd.EnchantData.attrs:type_name -> Cmd.EnchantAttr
	46,  // 14: Cmd.EnchantData.extras:type_name -> Cmd.EnchantExtra
	39,  // 15: Cmd.EggEquip.base:type_name -> Cmd.ItemInfo
	43,  // 16: Cmd.EggEquip.data:type_name -> Cmd.EquipData
	44,  // 17: Cmd.EggEquip.card:type_name -> Cmd.CardData
	47,  // 18: Cmd.EggEquip.enchant:type_name -> Cmd.EnchantData
	47,  // 19: Cmd.EggEquip.prenchant:type_name -> Cmd.EnchantData
	48,  // 20: Cmd.EggEquip.refine:type_name -> Cmd.RefineData
	45,  // 21: Cmd.EggEquip.previewattr:type_name -> Cmd.EnchantAttr
	47,  // 22: Cmd.EggEquip.previewenchant:type_name -> Cmd.EnchantData
	14,  // 23: Cmd.PetEquipData.epos:type_name -> Cmd.EEquipPos
	49,  // 24: Cmd.EggData.equips:type_name -> Cmd.EggEquip
	50,  // 25: Cmd.EggData.defaultwears:type_name -> Cmd.PetEquipData
	50,  // 26: Cmd.EggData.wears:type_name -> Cmd.PetEquipData
	250, // 27: Cmd.BuffParam.attrs:type_name -> Cmd.UserAttrSvr
	57,  // 28: Cmd.GemBuff.params:type_name -> Cmd.BuffParam
	58,  // 29: Cmd.GemSkillData.buffs:type_name -> Cmd.GemBuff
	59,  // 30: Cmd.GemSkillData.carves:type_name -> Cmd.GemCarves
	61,  // 31: Cmd.ArtifactData.attrs:type_name -> Cmd.ArtifactAttr
	61,  // 32: Cmd.ArtifactData.preattrs:type_name -> Cmd.ArtifactAttr
	11,  // 33: Cmd.ArtifactData.art_state:type_name -> Cmd.EArtifactState
	61,  // 34: Cmd.ArtifactData.noattrs:type_name -> Cmd.ArtifactAttr
	251, // 35: Cmd.DamageUser.profession:type_name -> Cmd.EProfession
	252, // 36: Cmd.DamageUser.gender:type_name -> Cmd.EGender
	66,  // 37: Cmd.DamageItem.user:type_name -> Cmd.DamageUser
	65,  // 38: Cmd.DamageItem.rounds:type_name -> Cmd.DamageRound
	67,  // 39: Cmd.FurnitureNpc.history_max:type_name -> Cmd.DamageItem
	67,  // 40: Cmd.FurnitureNpc.day_max:type_name -> Cmd.DamageItem
	12,  // 41: Cmd.Furniture.state:type_name -> Cmd.EFurnitureState
	63,  // 42: Cmd.Furniture.seats:type_name -> Cmd.FurnitureSeat
	63,  // 43: Cmd.Furniture.seatskills:type_name -> Cmd.FurnitureSeat
	64,  // 44: Cmd.Furniture.photos:type_name -> Cmd.FurniturePhoto
	68,  // 45: Cmd.Furniture.npc:type_name -> Cmd.FurnitureNpc
	39,  // 46: Cmd.ItemData.base:type_name -> Cmd.ItemInfo
	43,  // 47: Cmd.ItemData.equip:type_name -> Cmd.EquipData
	44,  // 48: Cmd.ItemData.card:type_name -> Cmd.CardData
	47,  // 49: Cmd.ItemData.enchant:type_name -> Cmd.EnchantData
	47,  // 50: Cmd.ItemData.prenchant:type_name -> Cmd.EnchantData
	48,  // 51: Cmd.ItemData.refine:type_name -> Cmd.RefineData
	51,  // 52: Cmd.ItemData.egg:type_name -> Cmd.EggData
	52,  // 53: Cmd.ItemData.letter:type_name -> Cmd.LoveLetterData
	53,  // 54: Cmd.ItemData.code:type_name -> Cmd.CodeData
	54,  // 55: Cmd.ItemData.wedding:type_name -> Cmd.WeddingData
	55,  // 56: Cmd.ItemData.sender:type_name -> Cmd.SenderData
	69,  // 57: Cmd.ItemData.furniture:type_name -> Cmd.Furniture
	56,  // 58: Cmd.ItemData.attr:type_name -> Cmd.GemAttrData
	60,  // 59: Cmd.ItemData.skill:type_name -> Cmd.GemSkillData
	70,  // 60: Cmd.ItemData.home:type_name -> Cmd.HomeItem
	62,  // 61: Cmd.ItemData.artifact:type_name -> Cmd.ArtifactData
	71,  // 62: Cmd.ItemData.cupinfo:type_name -> Cmd.CupItem
	45,  // 63: Cmd.ItemData.previewattr:type_name -> Cmd.EnchantAttr
	47,  // 64: Cmd.ItemData.previewenchant:type_name -> Cmd.EnchantData
	72,  // 65: Cmd.ItemData.red_packet:type_name -> Cmd.RedPacket
	253, // 66: Cmd.PackageItem.cmd:type_name -> Cmd.Command
	0,   // 67: Cmd.PackageItem.param:type_name -> Cmd.ItemParam
	1,   // 68: Cmd.PackageItem.type:type_name -> Cmd.EPackType
	73,  // 69: Cmd.PackageItem.data:type_name -> Cmd.ItemData
	253, // 70: Cmd.PackageUpdate.cmd:type_name -> Cmd.Command
	0,   // 71: Cmd.PackageUpdate.param:type_name -> Cmd.ItemParam
	1,   // 72: Cmd.PackageUpdate.type:type_name -> Cmd.EPackType
	73,  // 73: Cmd.PackageUpdate.updateItems:type_name -> Cmd.ItemData
	73,  // 74: Cmd.PackageUpdate.delItems:type_name -> Cmd.ItemData
	253, // 75: Cmd.ItemUse.cmd:type_name -> Cmd.Command
	0,   // 76: Cmd.ItemUse.param:type_name -> Cmd.ItemParam
	253, // 77: Cmd.PackageSort.cmd:type_name -> Cmd.Command
	0,   // 78: Cmd.PackageSort.param:type_name -> Cmd.ItemParam
	1,   // 79: Cmd.PackageSort.type:type_name -> Cmd.EPackType
	77,  // 80: Cmd.PackageSort.item:type_name -> Cmd.SortInfo
	253, // 81: Cmd.Equip.cmd:type_name -> Cmd.Command
	0,   // 82: Cmd.Equip.param:type_name -> Cmd.ItemParam
	13,  // 83: Cmd.Equip.oper:type_name -> Cmd.EEquipOper
	14,  // 84: Cmd.Equip.pos:type_name -> Cmd.EEquipPos
	253, // 85: Cmd.SellItem.cmd:type_name -> Cmd.Command
	0,   // 86: Cmd.SellItem.param:type_name -> Cmd.ItemParam
	80,  // 87: Cmd.SellItem.items:type_name -> Cmd.SItem
	253, // 88: Cmd.EquipStrength.cmd:type_name -> Cmd.Command
	0,   // 89: Cmd.EquipStrength.param:type_name -> Cmd.ItemParam
	15,  // 90: Cmd.EquipStrength.result:type_name -> Cmd.EStrengthResult
	16,  // 91: Cmd.EquipStrength.type:type_name -> Cmd.EStrengthType
	253, // 92: Cmd.Produce.cmd:type_name -> Cmd.Command
	0,   // 93: Cmd.Produce.param:type_name -> Cmd.ItemParam
	17,  // 94: Cmd.Produce.type:type_name -> Cmd.EProduceType
	253, // 95: Cmd.ProduceDone.cmd:type_name -> Cmd.Command
	0,   // 96: Cmd.ProduceDone.param:type_name -> Cmd.ItemParam
	17,  // 97: Cmd.ProduceDone.type:type_name -> Cmd.EProduceType
	253, // 98: Cmd.EquipRefine.cmd:type_name -> Cmd.Command
	0,   // 99: Cmd.EquipRefine.param:type_name -> Cmd.ItemParam
	18,  // 100: Cmd.EquipRefine.eresult:type_name -> Cmd.ERefineResult
	39,  // 101: Cmd.EquipRefine.itemguid:type_name -> Cmd.ItemInfo
	253, // 102: Cmd.EquipDecompose.cmd:type_name -> Cmd.Command
	0,   // 103: Cmd.EquipDecompose.param:type_name -> Cmd.ItemParam
	39,  // 104: Cmd.EquipDecompose.equips:type_name -> Cmd.ItemInfo
	19,  // 105: Cmd.EquipDecompose.result:type_name -> Cmd.EDecomposeResult
	39,  // 106: Cmd.EquipDecompose.items:type_name -> Cmd.ItemInfo
	39,  // 107: Cmd.DecomposeResult.item:type_name -> Cmd.ItemInfo
	253, // 108: Cmd.QueryEquipData.cmd:type_name -> Cmd.Command
	0,   // 109: Cmd.QueryEquipData.param:type_name -> Cmd.ItemParam
	43,  // 110: Cmd.QueryEquipData.data:type_name -> Cmd.EquipData
	253, // 111: Cmd.BrowsePackage.cmd:type_name -> Cmd.Command
	0,   // 112: Cmd.BrowsePackage.param:type_name -> Cmd.ItemParam
	1,   // 113: Cmd.BrowsePackage.type:type_name -> Cmd.EPackType
	253, // 114: Cmd.EquipCard.cmd:type_name -> Cmd.Command
	0,   // 115: Cmd.EquipCard.param:type_name -> Cmd.ItemParam
	20,  // 116: Cmd.EquipCard.oper:type_name -> Cmd.ECardOper
	253, // 117: Cmd.ItemShow.cmd:type_name -> Cmd.Command
	0,   // 118: Cmd.ItemShow.param:type_name -> Cmd.ItemParam
	73,  // 119: Cmd.ItemShow.items:type_name -> Cmd.ItemData
	253, // 120: Cmd.ItemShow64.cmd:type_name -> Cmd.Command
	0,   // 121: Cmd.ItemShow64.param:type_name -> Cmd.ItemParam
	253, // 122: Cmd.EquipRepair.cmd:type_name -> Cmd.Command
	0,   // 123: Cmd.EquipRepair.param:type_name -> Cmd.ItemParam
	253, // 124: Cmd.HintNtf.cmd:type_name -> Cmd.Command
	0,   // 125: Cmd.HintNtf.param:type_name -> Cmd.ItemParam
	253, // 126: Cmd.EnchantEquip.cmd:type_name -> Cmd.Command
	0,   // 127: Cmd.EnchantEquip.param:type_name -> Cmd.ItemParam
	8,   // 128: Cmd.EnchantEquip.type:type_name -> Cmd.EEnchantType
	96,  // 129: Cmd.TradeRefineData.composeInfos:type_name -> Cmd.TradeComposePair
	73,  // 130: Cmd.TradeItemBaseInfo.item_data:type_name -> Cmd.ItemData
	21,  // 131: Cmd.TradeItemBaseInfo.type:type_name -> Cmd.ETradeType
	253, // 132: Cmd.EnchantRes.cmd:type_name -> Cmd.Command
	0,   // 133: Cmd.EnchantRes.param:type_name -> Cmd.ItemParam
	47,  // 134: Cmd.EnchantRes.results:type_name -> Cmd.EnchantData
	253, // 135: Cmd.ProcessEnchantItemCmd.cmd:type_name -> Cmd.Command
	0,   // 136: Cmd.ProcessEnchantItemCmd.param:type_name -> Cmd.ItemParam
	253, // 137: Cmd.EquipExchangeItemCmd.cmd:type_name -> Cmd.Command
	0,   // 138: Cmd.EquipExchangeItemCmd.param:type_name -> Cmd.ItemParam
	22,  // 139: Cmd.EquipExchangeItemCmd.type:type_name -> Cmd.EExchangeType
	101, // 140: Cmd.EquipExchangeItemCmd.materials:type_name -> Cmd.ExchangeMaterial
	253, // 141: Cmd.OnOffStoreItemCmd.cmd:type_name -> Cmd.Command
	0,   // 142: Cmd.OnOffStoreItemCmd.param:type_name -> Cmd.ItemParam
	253, // 143: Cmd.PackSlotNtfItemCmd.cmd:type_name -> Cmd.Command
	0,   // 144: Cmd.PackSlotNtfItemCmd.param:type_name -> Cmd.ItemParam
	1,   // 145: Cmd.PackSlotNtfItemCmd.type:type_name -> Cmd.EPackType
	253, // 146: Cmd.RestoreEquipItemCmd.cmd:type_name -> Cmd.Command
	0,   // 147: Cmd.RestoreEquipItemCmd.param:type_name -> Cmd.ItemParam
	253, // 148: Cmd.UseCountItemCmd.cmd:type_name -> Cmd.Command
	0,   // 149: Cmd.UseCountItemCmd.param:type_name -> Cmd.ItemParam
	253, // 150: Cmd.ExchangeCardItemCmd.cmd:type_name -> Cmd.Command
	0,   // 151: Cmd.ExchangeCardItemCmd.param:type_name -> Cmd.ItemParam
	23,  // 152: Cmd.ExchangeCardItemCmd.type:type_name -> Cmd.EExchangeCardType
	39,  // 153: Cmd.ExchangeCardItemCmd.items:type_name -> Cmd.ItemInfo
	253, // 154: Cmd.GetCountItemCmd.cmd:type_name -> Cmd.Command
	0,   // 155: Cmd.GetCountItemCmd.param:type_name -> Cmd.ItemParam
	247, // 156: Cmd.GetCountItemCmd.sources:type_name -> Cmd.ESource
	253, // 157: Cmd.SaveLoveLetterCmd.cmd:type_name -> Cmd.Command
	0,   // 158: Cmd.SaveLoveLetterCmd.param:type_name -> Cmd.ItemParam
	253, // 159: Cmd.ItemDataShow.cmd:type_name -> Cmd.Command
	0,   // 160: Cmd.ItemDataShow.param:type_name -> Cmd.ItemParam
	73,  // 161: Cmd.ItemDataShow.items:type_name -> Cmd.ItemData
	253, // 162: Cmd.LotteryCmd.cmd:type_name -> Cmd.Command
	0,   // 163: Cmd.LotteryCmd.param:type_name -> Cmd.ItemParam
	24,  // 164: Cmd.LotteryCmd.type:type_name -> Cmd.ELotteryType
	39,  // 165: Cmd.LotteryCmd.items:type_name -> Cmd.ItemInfo
	253, // 166: Cmd.LotteryRecoveryCmd.cmd:type_name -> Cmd.Command
	0,   // 167: Cmd.LotteryRecoveryCmd.param:type_name -> Cmd.ItemParam
	80,  // 168: Cmd.LotteryRecoveryCmd.items:type_name -> Cmd.SItem
	24,  // 169: Cmd.LotteryRecoveryCmd.type:type_name -> Cmd.ELotteryType
	114, // 170: Cmd.LotteryInfo.subInfo:type_name -> Cmd.LotterySubInfo
	25,  // 171: Cmd.MixLotteryiUseCoinCntInfo.etype:type_name -> Cmd.EMixlotteryUseCoinType
	253, // 172: Cmd.QueryLotteryInfo.cmd:type_name -> Cmd.Command
	0,   // 173: Cmd.QueryLotteryInfo.param:type_name -> Cmd.ItemParam
	115, // 174: Cmd.QueryLotteryInfo.infos:type_name -> Cmd.LotteryInfo
	24,  // 175: Cmd.QueryLotteryInfo.type:type_name -> Cmd.ELotteryType
	116, // 176: Cmd.QueryLotteryInfo.mixlotterycnts:type_name -> Cmd.MixLotteryiUseCoinCntInfo
	117, // 177: Cmd.QueryLotteryInfo.safetyinfo:type_name -> Cmd.LotterySafetyInfo
	26,  // 178: Cmd.QuotaLog.type:type_name -> Cmd.EQuotaType
	253, // 179: Cmd.ReqQuotaLogCmd.cmd:type_name -> Cmd.Command
	0,   // 180: Cmd.ReqQuotaLogCmd.param:type_name -> Cmd.ItemParam
	119, // 181: Cmd.ReqQuotaLogCmd.log:type_name -> Cmd.QuotaLog
	253, // 182: Cmd.ReqQuotaDetailCmd.cmd:type_name -> Cmd.Command
	0,   // 183: Cmd.ReqQuotaDetailCmd.param:type_name -> Cmd.ItemParam
	120, // 184: Cmd.ReqQuotaDetailCmd.detail:type_name -> Cmd.QuotaDetail
	14,  // 185: Cmd.EquipPosData.pos:type_name -> Cmd.EEquipPos
	253, // 186: Cmd.EquipPosDataUpdate.cmd:type_name -> Cmd.Command
	0,   // 187: Cmd.EquipPosDataUpdate.param:type_name -> Cmd.ItemParam
	123, // 188: Cmd.EquipPosDataUpdate.datas:type_name -> Cmd.EquipPosData
	253, // 189: Cmd.HighRefineMatComposeCmd.cmd:type_name -> Cmd.Command
	0,   // 190: Cmd.HighRefineMatComposeCmd.param:type_name -> Cmd.ItemParam
	125, // 191: Cmd.HighRefineMatComposeCmd.mainmaterial:type_name -> Cmd.MatItemInfo
	125, // 192: Cmd.HighRefineMatComposeCmd.vicematerial:type_name -> Cmd.MatItemInfo
	253, // 193: Cmd.HighRefineCmd.cmd:type_name -> Cmd.Command
	0,   // 194: Cmd.HighRefineCmd.param:type_name -> Cmd.ItemParam
	249, // 195: Cmd.HighRefineStr.type:type_name -> Cmd.EAttrType
	251, // 196: Cmd.HighRefineItem.profession:type_name -> Cmd.EProfession
	14,  // 197: Cmd.HighRefineItem.pos:type_name -> Cmd.EEquipPos
	128, // 198: Cmd.HighRefineItem.item:type_name -> Cmd.HighRefineStr
	14,  // 199: Cmd.HighRefineData.pos:type_name -> Cmd.EEquipPos
	253, // 200: Cmd.NtfHighRefineDataCmd.cmd:type_name -> Cmd.Command
	0,   // 201: Cmd.NtfHighRefineDataCmd.param:type_name -> Cmd.ItemParam
	130, // 202: Cmd.NtfHighRefineDataCmd.datas:type_name -> Cmd.HighRefineData
	253, // 203: Cmd.UpdateHighRefineDataCmd.cmd:type_name -> Cmd.Command
	0,   // 204: Cmd.UpdateHighRefineDataCmd.param:type_name -> Cmd.ItemParam
	130, // 205: Cmd.UpdateHighRefineDataCmd.data:type_name -> Cmd.HighRefineData
	253, // 206: Cmd.UseCodItemCmd.cmd:type_name -> Cmd.Command
	0,   // 207: Cmd.UseCodItemCmd.param:type_name -> Cmd.ItemParam
	253, // 208: Cmd.AddJobLevelItemCmd.cmd:type_name -> Cmd.Command
	0,   // 209: Cmd.AddJobLevelItemCmd.param:type_name -> Cmd.ItemParam
	253, // 210: Cmd.LotterGivBuyCountCmd.cmd:type_name -> Cmd.Command
	0,   // 211: Cmd.LotterGivBuyCountCmd.param:type_name -> Cmd.ItemParam
	253, // 212: Cmd.GiveWeddingDressCmd.cmd:type_name -> Cmd.Command
	0,   // 213: Cmd.GiveWeddingDressCmd.param:type_name -> Cmd.ItemParam
	253, // 214: Cmd.QuickStoreItemCmd.cmd:type_name -> Cmd.Command
	0,   // 215: Cmd.QuickStoreItemCmd.param:type_name -> Cmd.ItemParam
	39,  // 216: Cmd.QuickStoreItemCmd.items:type_name -> Cmd.ItemInfo
	253, // 217: Cmd.QuickSellItemCmd.cmd:type_name -> Cmd.Command
	0,   // 218: Cmd.QuickSellItemCmd.param:type_name -> Cmd.ItemParam
	80,  // 219: Cmd.QuickSellItemCmd.items:type_name -> Cmd.SItem
	253, // 220: Cmd.EnchantTransItemCmd.cmd:type_name -> Cmd.Command
	0,   // 221: Cmd.EnchantTransItemCmd.param:type_name -> Cmd.ItemParam
	253, // 222: Cmd.QueryLotteryHeadItemCmd.cmd:type_name -> Cmd.Command
	0,   // 223: Cmd.QueryLotteryHeadItemCmd.param:type_name -> Cmd.ItemParam
	253, // 224: Cmd.LotteryRateQueryCmd.cmd:type_name -> Cmd.Command
	0,   // 225: Cmd.LotteryRateQueryCmd.param:type_name -> Cmd.ItemParam
	24,  // 226: Cmd.LotteryRateQueryCmd.type:type_name -> Cmd.ELotteryType
	141, // 227: Cmd.LotteryRateQueryCmd.infos:type_name -> Cmd.LotteryRateInfo
	253, // 228: Cmd.EquipComposeItemCmd.cmd:type_name -> Cmd.Command
	0,   // 229: Cmd.EquipComposeItemCmd.param:type_name -> Cmd.ItemParam
	253, // 230: Cmd.QueryDebtItemCmd.cmd:type_name -> Cmd.Command
	0,   // 231: Cmd.QueryDebtItemCmd.param:type_name -> Cmd.ItemParam
	73,  // 232: Cmd.QueryDebtItemCmd.acc_items:type_name -> Cmd.ItemData
	253, // 233: Cmd.LotteryActivityNtfCmd.cmd:type_name -> Cmd.Command
	0,   // 234: Cmd.LotteryActivityNtfCmd.param:type_name -> Cmd.ItemParam
	145, // 235: Cmd.LotteryActivityNtfCmd.infos:type_name -> Cmd.LotteryActivityInfo
	253, // 236: Cmd.FavoriteItemActionItemCmd.cmd:type_name -> Cmd.Command
	0,   // 237: Cmd.FavoriteItemActionItemCmd.param:type_name -> Cmd.ItemParam
	27,  // 238: Cmd.FavoriteItemActionItemCmd.action:type_name -> Cmd.EFavoriteAction
	1,   // 239: Cmd.FavoriteItemActionItemCmd.packtype:type_name -> Cmd.EPackType
	39,  // 240: Cmd.LotteryExtraBonus.items:type_name -> Cmd.ItemInfo
	253, // 241: Cmd.QueryLotteryExtraBonusItemCmd.cmd:type_name -> Cmd.Command
	0,   // 242: Cmd.QueryLotteryExtraBonusItemCmd.param:type_name -> Cmd.ItemParam
	24,  // 243: Cmd.QueryLotteryExtraBonusItemCmd.etype:type_name -> Cmd.ELotteryType
	253, // 244: Cmd.QueryLotteryExtraBonusCfgCmd.cmd:type_name -> Cmd.Command
	0,   // 245: Cmd.QueryLotteryExtraBonusCfgCmd.param:type_name -> Cmd.ItemParam
	24,  // 246: Cmd.QueryLotteryExtraBonusCfgCmd.etype:type_name -> Cmd.ELotteryType
	148, // 247: Cmd.QueryLotteryExtraBonusCfgCmd.extrabonus:type_name -> Cmd.LotteryExtraBonus
	253, // 248: Cmd.GetLotteryExtraBonusItemCmd.cmd:type_name -> Cmd.Command
	0,   // 249: Cmd.GetLotteryExtraBonusItemCmd.param:type_name -> Cmd.ItemParam
	24,  // 250: Cmd.GetLotteryExtraBonusItemCmd.etype:type_name -> Cmd.ELotteryType
	253, // 251: Cmd.RollCatLitterBoxItemCmd.cmd:type_name -> Cmd.Command
	0,   // 252: Cmd.RollCatLitterBoxItemCmd.param:type_name -> Cmd.ItemParam
	39,  // 253: Cmd.RollCatLitterBoxItemCmd.rewards:type_name -> Cmd.ItemInfo
	253, // 254: Cmd.AlterFashionEquipBuffCmd.cmd:type_name -> Cmd.Command
	0,   // 255: Cmd.AlterFashionEquipBuffCmd.param:type_name -> Cmd.ItemParam
	253, // 256: Cmd.QueryRideLotteryInfo.cmd:type_name -> Cmd.Command
	0,   // 257: Cmd.QueryRideLotteryInfo.param:type_name -> Cmd.ItemParam
	154, // 258: Cmd.QueryRideLotteryInfo.infos:type_name -> Cmd.RideLotteryInfo
	253, // 259: Cmd.ExecRideLotteryCmd.cmd:type_name -> Cmd.Command
	0,   // 260: Cmd.ExecRideLotteryCmd.param:type_name -> Cmd.ItemParam
	253, // 261: Cmd.GemSkillAppraisalItemCmd.cmd:type_name -> Cmd.Command
	0,   // 262: Cmd.GemSkillAppraisalItemCmd.param:type_name -> Cmd.ItemParam
	253, // 263: Cmd.GemSkillComposeSameItemCmd.cmd:type_name -> Cmd.Command
	0,   // 264: Cmd.GemSkillComposeSameItemCmd.param:type_name -> Cmd.ItemParam
	158, // 265: Cmd.GemSkillComposeSameItemCmd.groups:type_name -> Cmd.GemComposeGroup
	253, // 266: Cmd.GemSkillComposeQualityItemCmd.cmd:type_name -> Cmd.Command
	0,   // 267: Cmd.GemSkillComposeQualityItemCmd.param:type_name -> Cmd.ItemParam
	28,  // 268: Cmd.GemSkillComposeQualityItemCmd.compose_type:type_name -> Cmd.EGemSkillComposeType
	158, // 269: Cmd.GemSkillComposeQualityItemCmd.groups:type_name -> Cmd.GemComposeGroup
	251, // 270: Cmd.GemSkillComposeQualityItemCmd.profession:type_name -> Cmd.EProfession
	253, // 271: Cmd.GemAttrComposeItemCmd.cmd:type_name -> Cmd.Command
	0,   // 272: Cmd.GemAttrComposeItemCmd.param:type_name -> Cmd.ItemParam
	253, // 273: Cmd.GemAttrUpgradeItemCmd.cmd:type_name -> Cmd.Command
	0,   // 274: Cmd.GemAttrUpgradeItemCmd.param:type_name -> Cmd.ItemParam
	80,  // 275: Cmd.GemAttrUpgradeItemCmd.items:type_name -> Cmd.SItem
	253, // 276: Cmd.GemMountItemCmd.cmd:type_name -> Cmd.Command
	0,   // 277: Cmd.GemMountItemCmd.param:type_name -> Cmd.ItemParam
	30,  // 278: Cmd.GemMountItemCmd.gem_type:type_name -> Cmd.EGemType
	253, // 279: Cmd.GemUnmountItemCmd.cmd:type_name -> Cmd.Command
	0,   // 280: Cmd.GemUnmountItemCmd.param:type_name -> Cmd.ItemParam
	30,  // 281: Cmd.GemUnmountItemCmd.gem_type:type_name -> Cmd.EGemType
	253, // 282: Cmd.GemCarveItemCmd.cmd:type_name -> Cmd.Command
	0,   // 283: Cmd.GemCarveItemCmd.param:type_name -> Cmd.ItemParam
	253, // 284: Cmd.GemSmeltItemCmd.cmd:type_name -> Cmd.Command
	0,   // 285: Cmd.GemSmeltItemCmd.param:type_name -> Cmd.ItemParam
	158, // 286: Cmd.GemSmeltItemCmd.groups:type_name -> Cmd.GemComposeGroup
	253, // 287: Cmd.RideLotteyPickItemCmd.cmd:type_name -> Cmd.Command
	0,   // 288: Cmd.RideLotteyPickItemCmd.param:type_name -> Cmd.ItemParam
	253, // 289: Cmd.RideLotteyPickInfoCmd.cmd:type_name -> Cmd.Command
	0,   // 290: Cmd.RideLotteyPickInfoCmd.param:type_name -> Cmd.ItemParam
	253, // 291: Cmd.SandExchangeItemCmd.cmd:type_name -> Cmd.Command
	0,   // 292: Cmd.SandExchangeItemCmd.param:type_name -> Cmd.ItemParam
	39,  // 293: Cmd.SandExchangeItemCmd.items:type_name -> Cmd.ItemInfo
	253, // 294: Cmd.GemDataUpdateItemCmd.cmd:type_name -> Cmd.Command
	0,   // 295: Cmd.GemDataUpdateItemCmd.param:type_name -> Cmd.ItemParam
	73,  // 296: Cmd.GemDataUpdateItemCmd.items:type_name -> Cmd.ItemData
	39,  // 297: Cmd.LotteryDollInfo.item:type_name -> Cmd.ItemInfo
	253, // 298: Cmd.LotteryDollQueryItemCmd.cmd:type_name -> Cmd.Command
	0,   // 299: Cmd.LotteryDollQueryItemCmd.param:type_name -> Cmd.ItemParam
	171, // 300: Cmd.LotteryDollQueryItemCmd.total_infos:type_name -> Cmd.LotteryDollInfo
	171, // 301: Cmd.LotteryDollQueryItemCmd.my_infos:type_name -> Cmd.LotteryDollInfo
	253, // 302: Cmd.LotteryDollPayItemCmd.cmd:type_name -> Cmd.Command
	0,   // 303: Cmd.LotteryDollPayItemCmd.param:type_name -> Cmd.ItemParam
	171, // 304: Cmd.LotteryDollPayItemCmd.info:type_name -> Cmd.LotteryDollInfo
	253, // 305: Cmd.PersonalArtifactExchangeItemCmd.cmd:type_name -> Cmd.Command
	0,   // 306: Cmd.PersonalArtifactExchangeItemCmd.param:type_name -> Cmd.ItemParam
	80,  // 307: Cmd.PersonalArtifactExchangeItemCmd.items:type_name -> Cmd.SItem
	253, // 308: Cmd.PersonalArtifactDecomposeItemCmd.cmd:type_name -> Cmd.Command
	0,   // 309: Cmd.PersonalArtifactDecomposeItemCmd.param:type_name -> Cmd.ItemParam
	80,  // 310: Cmd.PersonalArtifactDecomposeItemCmd.items:type_name -> Cmd.SItem
	253, // 311: Cmd.PersonalArtifactComposeItemCmd.cmd:type_name -> Cmd.Command
	0,   // 312: Cmd.PersonalArtifactComposeItemCmd.param:type_name -> Cmd.ItemParam
	80,  // 313: Cmd.PersonalArtifactComposeItemCmd.items:type_name -> Cmd.SItem
	253, // 314: Cmd.PersonalArtifactRemouldItemCmd.cmd:type_name -> Cmd.Command
	0,   // 315: Cmd.PersonalArtifactRemouldItemCmd.param:type_name -> Cmd.ItemParam
	31,  // 316: Cmd.PersonalArtifactRemouldItemCmd.type:type_name -> Cmd.PersonalArtifactRemouldType
	253, // 317: Cmd.PersonalArtifactAttrSaveItemCmd.cmd:type_name -> Cmd.Command
	0,   // 318: Cmd.PersonalArtifactAttrSaveItemCmd.param:type_name -> Cmd.ItemParam
	253, // 319: Cmd.PersonalArtifactAppraisalItemCmd.cmd:type_name -> Cmd.Command
	0,   // 320: Cmd.PersonalArtifactAppraisalItemCmd.param:type_name -> Cmd.ItemParam
	14,  // 321: Cmd.EquipPosCD.pos:type_name -> Cmd.EEquipPos
	253, // 322: Cmd.EquipPosCDNtfItemCmd.cmd:type_name -> Cmd.Command
	0,   // 323: Cmd.EquipPosCDNtfItemCmd.param:type_name -> Cmd.ItemParam
	180, // 324: Cmd.EquipPosCDNtfItemCmd.poscd:type_name -> Cmd.EquipPosCD
	253, // 325: Cmd.BatchRefineItemCmd.cmd:type_name -> Cmd.Command
	0,   // 326: Cmd.BatchRefineItemCmd.param:type_name -> Cmd.ItemParam
	39,  // 327: Cmd.BatchRefineItemCmd.equips:type_name -> Cmd.ItemInfo
	183, // 328: Cmd.MixLotteryArchiveGroup.items:type_name -> Cmd.MixLotteryArchiveItem
	253, // 329: Cmd.MixLotteryArchiveCmd.cmd:type_name -> Cmd.Command
	0,   // 330: Cmd.MixLotteryArchiveCmd.param:type_name -> Cmd.ItemParam
	24,  // 331: Cmd.MixLotteryArchiveCmd.type:type_name -> Cmd.ELotteryType
	184, // 332: Cmd.MixLotteryArchiveCmd.groups:type_name -> Cmd.MixLotteryArchiveGroup
	32,  // 333: Cmd.PackMailData.type:type_name -> Cmd.EPackMailType
	33,  // 334: Cmd.PackMailData.status:type_name -> Cmd.EPackMailStatus
	73,  // 335: Cmd.PackMailData.items:type_name -> Cmd.ItemData
	253, // 336: Cmd.QueryPackMailItemCmd.cmd:type_name -> Cmd.Command
	0,   // 337: Cmd.QueryPackMailItemCmd.param:type_name -> Cmd.ItemParam
	186, // 338: Cmd.QueryPackMailItemCmd.mails:type_name -> Cmd.PackMailData
	253, // 339: Cmd.PackMailUpdateItemCmd.cmd:type_name -> Cmd.Command
	0,   // 340: Cmd.PackMailUpdateItemCmd.param:type_name -> Cmd.ItemParam
	186, // 341: Cmd.PackMailUpdateItemCmd.mails:type_name -> Cmd.PackMailData
	253, // 342: Cmd.PackMailActionItemCmd.cmd:type_name -> Cmd.Command
	0,   // 343: Cmd.PackMailActionItemCmd.param:type_name -> Cmd.ItemParam
	34,  // 344: Cmd.PackMailActionItemCmd.action:type_name -> Cmd.EPackMailAction
	35,  // 345: Cmd.FavoriteDesire.type:type_name -> Cmd.EFavoriteDesireType
	190, // 346: Cmd.FavoriteData.desires:type_name -> Cmd.FavoriteDesire
	253, // 347: Cmd.FavoriteQueryItemCmd.cmd:type_name -> Cmd.Command
	0,   // 348: Cmd.FavoriteQueryItemCmd.param:type_name -> Cmd.ItemParam
	191, // 349: Cmd.FavoriteQueryItemCmd.data:type_name -> Cmd.FavoriteData
	253, // 350: Cmd.FavoriteGiveItemCmd.cmd:type_name -> Cmd.Command
	0,   // 351: Cmd.FavoriteGiveItemCmd.param:type_name -> Cmd.ItemParam
	39,  // 352: Cmd.FavoriteGiveItemCmd.items:type_name -> Cmd.ItemInfo
	191, // 353: Cmd.FavoriteGiveItemCmd.data:type_name -> Cmd.FavoriteData
	253, // 354: Cmd.FavoriteRewardItemCmd.cmd:type_name -> Cmd.Command
	0,   // 355: Cmd.FavoriteRewardItemCmd.param:type_name -> Cmd.ItemParam
	191, // 356: Cmd.FavoriteRewardItemCmd.data:type_name -> Cmd.FavoriteData
	253, // 357: Cmd.FavoriteInteractItemCmd.cmd:type_name -> Cmd.Command
	0,   // 358: Cmd.FavoriteInteractItemCmd.param:type_name -> Cmd.ItemParam
	191, // 359: Cmd.FavoriteInteractItemCmd.data:type_name -> Cmd.FavoriteData
	253, // 360: Cmd.FavoriteDesireConditionItemCmd.cmd:type_name -> Cmd.Command
	0,   // 361: Cmd.FavoriteDesireConditionItemCmd.param:type_name -> Cmd.ItemParam
	35,  // 362: Cmd.FavoriteDesireConditionItemCmd.type:type_name -> Cmd.EFavoriteDesireType
	191, // 363: Cmd.FavoriteDesireConditionItemCmd.data:type_name -> Cmd.FavoriteData
	253, // 364: Cmd.EquipEnchantTransferItemCmd.cmd:type_name -> Cmd.Command
	0,   // 365: Cmd.EquipEnchantTransferItemCmd.param:type_name -> Cmd.ItemParam
	253, // 366: Cmd.EquipRefineTransferItemCmd.cmd:type_name -> Cmd.Command
	0,   // 367: Cmd.EquipRefineTransferItemCmd.param:type_name -> Cmd.ItemParam
	253, // 368: Cmd.EquipPowerInputItemCmd.cmd:type_name -> Cmd.Command
	0,   // 369: Cmd.EquipPowerInputItemCmd.param:type_name -> Cmd.ItemParam
	39,  // 370: Cmd.EquipPowerInputItemCmd.items:type_name -> Cmd.ItemInfo
	253, // 371: Cmd.EquipPowerOutputItemCmd.cmd:type_name -> Cmd.Command
	0,   // 372: Cmd.EquipPowerOutputItemCmd.param:type_name -> Cmd.ItemParam
	201, // 373: Cmd.ColoringPicInfo.rgb:type_name -> Cmd.RGB
	253, // 374: Cmd.ColoringQueryItemCmd.cmd:type_name -> Cmd.Command
	0,   // 375: Cmd.ColoringQueryItemCmd.param:type_name -> Cmd.ItemParam
	202, // 376: Cmd.ColoringQueryItemCmd.pics:type_name -> Cmd.ColoringPicInfo
	203, // 377: Cmd.ColoringQueryItemCmd.texts:type_name -> Cmd.ColoringTextInfo
	253, // 378: Cmd.ColoringModifyItemCmd.cmd:type_name -> Cmd.Command
	0,   // 379: Cmd.ColoringModifyItemCmd.param:type_name -> Cmd.ItemParam
	202, // 380: Cmd.ColoringModifyItemCmd.pics:type_name -> Cmd.ColoringPicInfo
	203, // 381: Cmd.ColoringModifyItemCmd.texts:type_name -> Cmd.ColoringTextInfo
	253, // 382: Cmd.ColoringShareItemCmd.cmd:type_name -> Cmd.Command
	0,   // 383: Cmd.ColoringShareItemCmd.param:type_name -> Cmd.ItemParam
	253, // 384: Cmd.PosStrengthItemCmd.cmd:type_name -> Cmd.Command
	0,   // 385: Cmd.PosStrengthItemCmd.param:type_name -> Cmd.ItemParam
	14,  // 386: Cmd.PosStrengthItemCmd.epos:type_name -> Cmd.EEquipPos
	16,  // 387: Cmd.PosStrengthItemCmd.type:type_name -> Cmd.EStrengthType
	15,  // 388: Cmd.PosStrengthItemCmd.result:type_name -> Cmd.EStrengthResult
	14,  // 389: Cmd.PosStrengthData.epos:type_name -> Cmd.EEquipPos
	16,  // 390: Cmd.StrengthData.type:type_name -> Cmd.EStrengthType
	208, // 391: Cmd.StrengthData.pos_data:type_name -> Cmd.PosStrengthData
	253, // 392: Cmd.LotteryHeadwearExchange.cmd:type_name -> Cmd.Command
	0,   // 393: Cmd.LotteryHeadwearExchange.param:type_name -> Cmd.ItemParam
	80,  // 394: Cmd.LotteryHeadwearExchange.items:type_name -> Cmd.SItem
	24,  // 395: Cmd.LotteryHeadwearExchange.type:type_name -> Cmd.ELotteryType
	253, // 396: Cmd.RandSelectRewardItemCmd.cmd:type_name -> Cmd.Command
	0,   // 397: Cmd.RandSelectRewardItemCmd.param:type_name -> Cmd.ItemParam
	14,  // 398: Cmd.EquipRecoveryData.pos:type_name -> Cmd.EEquipPos
	253, // 399: Cmd.EquipRecoveryQueryItemCmd.cmd:type_name -> Cmd.Command
	0,   // 400: Cmd.EquipRecoveryQueryItemCmd.param:type_name -> Cmd.ItemParam
	212, // 401: Cmd.EquipRecoveryQueryItemCmd.datas:type_name -> Cmd.EquipRecoveryData
	253, // 402: Cmd.EquipRecoveryItemCmd.cmd:type_name -> Cmd.Command
	0,   // 403: Cmd.EquipRecoveryItemCmd.param:type_name -> Cmd.ItemParam
	253, // 404: Cmd.OneClickPutTakeStoreCmd.cmd:type_name -> Cmd.Command
	0,   // 405: Cmd.OneClickPutTakeStoreCmd.param:type_name -> Cmd.ItemParam
	1,   // 406: Cmd.OneClickPutTakeStoreCmd.from:type_name -> Cmd.EPackType
	1,   // 407: Cmd.OneClickPutTakeStoreCmd.to:type_name -> Cmd.EPackType
	216, // 408: Cmd.QuestionData.results:type_name -> Cmd.QuestionResult
	253, // 409: Cmd.QuestionResultItemCmd.cmd:type_name -> Cmd.Command
	0,   // 410: Cmd.QuestionResultItemCmd.param:type_name -> Cmd.ItemParam
	217, // 411: Cmd.QuestionResultItemCmd.data:type_name -> Cmd.QuestionData
	253, // 412: Cmd.PosStrengthSyncItemCmd.cmd:type_name -> Cmd.Command
	0,   // 413: Cmd.PosStrengthSyncItemCmd.param:type_name -> Cmd.ItemParam
	209, // 414: Cmd.PosStrengthSyncItemCmd.strength_data:type_name -> Cmd.StrengthData
	253, // 415: Cmd.EquipPowerQuery.cmd:type_name -> Cmd.Command
	0,   // 416: Cmd.EquipPowerQuery.param:type_name -> Cmd.ItemParam
	220, // 417: Cmd.EquipPowerQuery.data:type_name -> Cmd.EquipPowerData
	14,  // 418: Cmd.MagicSuitPos.pos:type_name -> Cmd.EEquipPos
	222, // 419: Cmd.MagicSuit.suit_pos:type_name -> Cmd.MagicSuitPos
	253, // 420: Cmd.MagicSuitSave.cmd:type_name -> Cmd.Command
	0,   // 421: Cmd.MagicSuitSave.param:type_name -> Cmd.ItemParam
	253, // 422: Cmd.MagicSuitNtf.cmd:type_name -> Cmd.Command
	0,   // 423: Cmd.MagicSuitNtf.param:type_name -> Cmd.ItemParam
	223, // 424: Cmd.MagicSuitNtf.suits:type_name -> Cmd.MagicSuit
	253, // 425: Cmd.MagicSuitApply.cmd:type_name -> Cmd.Command
	0,   // 426: Cmd.MagicSuitApply.param:type_name -> Cmd.ItemParam
	253, // 427: Cmd.PotionStoreNtf.cmd:type_name -> Cmd.Command
	0,   // 428: Cmd.PotionStoreNtf.param:type_name -> Cmd.ItemParam
	227, // 429: Cmd.PotionStoreNtf.hp_setting:type_name -> Cmd.PotionStoreSetting
	227, // 430: Cmd.PotionStoreNtf.sp_setting:type_name -> Cmd.PotionStoreSetting
	253, // 431: Cmd.EnchantHighestBuffNotify.cmd:type_name -> Cmd.Command
	0,   // 432: Cmd.EnchantHighestBuffNotify.param:type_name -> Cmd.ItemParam
	253, // 433: Cmd.LotteryDataSyncItemCmd.cmd:type_name -> Cmd.Command
	0,   // 434: Cmd.LotteryDataSyncItemCmd.param:type_name -> Cmd.ItemParam
	24,  // 435: Cmd.LotteryDataSyncItemCmd.free_types:type_name -> Cmd.ELotteryType
	253, // 436: Cmd.ArtifactFlagmentAdd.cmd:type_name -> Cmd.Command
	0,   // 437: Cmd.ArtifactFlagmentAdd.param:type_name -> Cmd.ItemParam
	80,  // 438: Cmd.ArtifactFlagmentAdd.cost:type_name -> Cmd.SItem
	253, // 439: Cmd.LotteryDailyRewardSyncItemCmd.cmd:type_name -> Cmd.Command
	0,   // 440: Cmd.LotteryDailyRewardSyncItemCmd.param:type_name -> Cmd.ItemParam
	232, // 441: Cmd.LotteryDailyRewardSyncItemCmd.dailyrewards:type_name -> Cmd.LotteryDailyReward
	253, // 442: Cmd.LotteryDailyRewardGetItemCmd.cmd:type_name -> Cmd.Command
	0,   // 443: Cmd.LotteryDailyRewardGetItemCmd.param:type_name -> Cmd.ItemParam
	253, // 444: Cmd.AutoSellItemCmd.cmd:type_name -> Cmd.Command
	0,   // 445: Cmd.AutoSellItemCmd.param:type_name -> Cmd.ItemParam
	73,  // 446: Cmd.AfricanPoringItem.item:type_name -> Cmd.ItemData
	37,  // 447: Cmd.AfricanPoringPos.status:type_name -> Cmd.EAfricanPoringPosStatus
	236, // 448: Cmd.AfricanPoringPos.items:type_name -> Cmd.AfricanPoringItem
	253, // 449: Cmd.QueryAfricanPoringItemCmd.cmd:type_name -> Cmd.Command
	0,   // 450: Cmd.QueryAfricanPoringItemCmd.param:type_name -> Cmd.ItemParam
	36,  // 451: Cmd.QueryAfricanPoringItemCmd.status:type_name -> Cmd.EAfricanPoringStatus
	237, // 452: Cmd.QueryAfricanPoringItemCmd.items:type_name -> Cmd.AfricanPoringPos
	253, // 453: Cmd.AfricanPoringUpdateItemCmd.cmd:type_name -> Cmd.Command
	0,   // 454: Cmd.AfricanPoringUpdateItemCmd.param:type_name -> Cmd.ItemParam
	36,  // 455: Cmd.AfricanPoringUpdateItemCmd.status:type_name -> Cmd.EAfricanPoringStatus
	237, // 456: Cmd.AfricanPoringUpdateItemCmd.items:type_name -> Cmd.AfricanPoringPos
	253, // 457: Cmd.AfricanPoringLotteryItemCmd.cmd:type_name -> Cmd.Command
	0,   // 458: Cmd.AfricanPoringLotteryItemCmd.param:type_name -> Cmd.ItemParam
	38,  // 459: Cmd.AfricanPoringLotteryItemCmd.action:type_name -> Cmd.EAfricanPoring
	39,  // 460: Cmd.AfricanPoringLotteryItemCmd.reward_items:type_name -> Cmd.ItemInfo
	253, // 461: Cmd.ExtractLevelUpItemCmd.cmd:type_name -> Cmd.Command
	0,   // 462: Cmd.ExtractLevelUpItemCmd.param:type_name -> Cmd.ItemParam
	39,  // 463: Cmd.ExtractLevelUpItemCmd.costequips:type_name -> Cmd.ItemInfo
	253, // 464: Cmd.EnchantRefreshAttr.cmd:type_name -> Cmd.Command
	0,   // 465: Cmd.EnchantRefreshAttr.param:type_name -> Cmd.ItemParam
	45,  // 466: Cmd.EnchantRefreshAttr.attrs:type_name -> Cmd.EnchantAttr
	253, // 467: Cmd.ProcessEnchantRefreshAttr.cmd:type_name -> Cmd.Command
	0,   // 468: Cmd.ProcessEnchantRefreshAttr.param:type_name -> Cmd.ItemParam
	253, // 469: Cmd.EnchantUpgradeAttr.cmd:type_name -> Cmd.Command
	0,   // 470: Cmd.EnchantUpgradeAttr.param:type_name -> Cmd.ItemParam
	249, // 471: Cmd.EnchantUpgradeAttr.etype:type_name -> Cmd.EAttrType
	253, // 472: Cmd.RefreshEquipAttrCmd.cmd:type_name -> Cmd.Command
	0,   // 473: Cmd.RefreshEquipAttrCmd.param:type_name -> Cmd.ItemParam
	474, // [474:474] is the sub-list for method output_type
	474, // [474:474] is the sub-list for method input_type
	474, // [474:474] is the sub-list for extension type_name
	474, // [474:474] is the sub-list for extension extendee
	0,   // [0:474] is the sub-list for field type_name
}

func init() { file_SceneItem_proto_init() }
func file_SceneItem_proto_init() {
	if File_SceneItem_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	file_SceneUser_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SceneItem_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefineCompose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipAttrRefreshTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EggEquip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetEquipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EggData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoveLetterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeddingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GemAttrData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GemBuff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GemCarves); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GemSkillData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnitureSeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurniturePhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DamageRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DamageUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DamageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FurnitureNpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Furniture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemUse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageSort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Equip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipStrength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Produce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceDone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipRefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipDecompose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecomposeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryEquipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowsePackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemShow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemShow64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipRepair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HintNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantEquip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeComposePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeItemBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessEnchantItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeMaterial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipExchangeItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnOffStoreItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackSlotNtfItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreEquipItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseCountItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeCardItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCountItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveLoveLetterCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemDataShow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AELotteryExtraRewardRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryRecoveryCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotterySubInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MixLotteryiUseCoinCntInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotterySafetyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryLotteryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQuotaLogCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQuotaDetailCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipPosData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipPosDataUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighRefineMatComposeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighRefineCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighRefineStr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighRefineItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighRefineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfHighRefineDataCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHighRefineDataCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseCodItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddJobLevelItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotterGivBuyCountCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiveWeddingDressCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickStoreItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickSellItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantTransItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryLotteryHeadItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryRateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryRateQueryCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipComposeItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDebtItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryActivityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryActivityNtfCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteItemActionItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryExtraBonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryLotteryExtraBonusItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryLotteryExtraBonusCfgCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLotteryExtraBonusItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollCatLitterBoxItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterFashionEquipBuffCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RideLotteryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRideLotteryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecRideLotteryCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GemSkillAppraisalItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GemComposeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GemSkillComposeSameItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GemSkillComposeQualityItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GemAttrComposeItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GemAttrUpgradeItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GemMountItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GemUnmountItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GemCarveItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GemSmeltItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RideLotteyPickItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RideLotteyPickInfoCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SandExchangeItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GemDataUpdateItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryDollInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryDollQueryItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryDollPayItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalArtifactExchangeItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalArtifactDecomposeItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalArtifactComposeItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalArtifactRemouldItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalArtifactAttrSaveItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalArtifactAppraisalItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipPosCD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipPosCDNtfItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchRefineItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MixLotteryArchiveItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MixLotteryArchiveGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MixLotteryArchiveCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackMailData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPackMailItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackMailUpdateItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackMailActionItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteDesire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteQueryItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteGiveItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteRewardItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteInteractItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteDesireConditionItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipEnchantTransferItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipRefineTransferItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipPowerInputItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipPowerOutputItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RGB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColoringPicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColoringTextInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColoringQueryItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColoringModifyItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColoringShareItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosStrengthItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosStrengthData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrengthData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryHeadwearExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandSelectRewardItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipRecoveryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipRecoveryQueryItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipRecoveryItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneClickPutTakeStoreCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionResultItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosStrengthSyncItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipPowerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipPowerQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagicSuitPos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagicSuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagicSuitSave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagicSuitNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MagicSuitApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionStoreSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotionStoreNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantHighestBuffNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryDataSyncItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactFlagmentAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryDailyReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryDailyRewardSyncItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryDailyRewardGetItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoSellItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AfricanPoringItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AfricanPoringPos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAfricanPoringItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AfricanPoringUpdateItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AfricanPoringLotteryItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractLevelUpItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantRefreshAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessEnchantRefreshAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantUpgradeAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshEquipAttrCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SceneItem_proto_rawDesc,
			NumEnums:      39,
			NumMessages:   207,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SceneItem_proto_goTypes,
		DependencyIndexes: file_SceneItem_proto_depIdxs,
		EnumInfos:         file_SceneItem_proto_enumTypes,
		MessageInfos:      file_SceneItem_proto_msgTypes,
	}.Build()
	File_SceneItem_proto = out.File
	file_SceneItem_proto_rawDesc = nil
	file_SceneItem_proto_goTypes = nil
	file_SceneItem_proto_depIdxs = nil
}
