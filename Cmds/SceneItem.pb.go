// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: SceneItem.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ItemParam int32

const (
	ItemParam_ITEMPARAM_PACKAGEITEM             ItemParam = 1
	ItemParam_ITEMPARAM_PACKAGEUPDATE           ItemParam = 2
	ItemParam_ITEMPARAM_ITEMUSE                 ItemParam = 3
	ItemParam_ITEMPARAM_PACKAGESORT             ItemParam = 4
	ItemParam_ITEMPARAM_EQUIP                   ItemParam = 5
	ItemParam_ITEMPARAM_SELLITEM                ItemParam = 6
	ItemParam_ITEMPARAM_EQUIPSTRENGTH           ItemParam = 7
	ItemParam_ITEMPARAM_PRODUCE                 ItemParam = 9
	ItemParam_ITEMPARAM_PRODUCEDONE             ItemParam = 10
	ItemParam_ITEMPARAM_REFINE                  ItemParam = 11
	ItemParam_ITEMPARAM_DECOMPOSE               ItemParam = 12
	ItemParam_ITEMPARAM_QUERYEQUIPDATA          ItemParam = 13
	ItemParam_ITEMPARAM_BROWSEPACK              ItemParam = 14
	ItemParam_ITEMPARAM_EQUIPCARD               ItemParam = 15
	ItemParam_ITEMPARAM_ITEMSHOW                ItemParam = 16
	ItemParam_ITEMPARAM_REPAIR                  ItemParam = 17
	ItemParam_ITEMPARAM_HINTNTF                 ItemParam = 18
	ItemParam_ITEMPARAM_ENCHANT                 ItemParam = 19
	ItemParam_ITEMPARAM_PROCESSENCHANT          ItemParam = 20
	ItemParam_ITEMPARAM_EQUIPEXCHANGE           ItemParam = 21
	ItemParam_ITEMPARAM_ONOFFSTORE              ItemParam = 22
	ItemParam_ITEMPARAM_PACKSLOTNTF             ItemParam = 23
	ItemParam_ITEMPARAM_RESTOREEQUIP            ItemParam = 24
	ItemParam_ITEMPARAM_USECOUNT                ItemParam = 25
	ItemParam_ITEMPARAM_QUERYDECOMPOSERESULT    ItemParam = 27
	ItemParam_ITEMPARAM_EXCHANGECARD            ItemParam = 28
	ItemParam_ITEMPARAM_GETCOUNT                ItemParam = 29
	ItemParam_ITEMPARAM_SAVE_LOVE_LETTER        ItemParam = 30
	ItemParam_ITEMPARAM_ITEMDATASHOW            ItemParam = 31
	ItemParam_ITEMPARAM_LOTTERY                 ItemParam = 32
	ItemParam_ITEMPARAM_LOTTERY_RECOVERY        ItemParam = 33
	ItemParam_ITEMPARAM_QUERY_LOTTERYINFO       ItemParam = 34
	ItemParam_ITEMPARAM_ITEMSHOW64              ItemParam = 35
	ItemParam_ITEMPARAM_HIGHREFINE_MATCOMPOSE   ItemParam = 36
	ItemParam_ITEMPARAM_HIGHREFINE              ItemParam = 37
	ItemParam_ITEMPARAM_NTF_HIGHTREFINE_DATA    ItemParam = 38
	ItemParam_ITEMPARAM_UPDATE_HIGHTREFINE_DATA ItemParam = 39
	ItemParam_ITEMPARAM_REQ_QUOTA_LOG           ItemParam = 40
	ItemParam_ITEMPARAM_REQ_QUOTA_DETAIL        ItemParam = 41
	ItemParam_ITEMPARAM_EQUIPPOSDATA_UPDATE     ItemParam = 42
	ItemParam_ITEMPARAM_USE_CODE_ITEM           ItemParam = 43
	ItemParam_ITEMPARAM_ADD_JOBLEVEL            ItemParam = 44
	ItemParam_ITEMPARAM_LOTTERY_GIVE_BUY_COUNT  ItemParam = 46
	ItemParam_ITEMPARAM_GIVE_WEDDING_DRESS      ItemParam = 47
	ItemParam_ITEMPARAM_QUICK_STOREITEM         ItemParam = 48
	ItemParam_ITEMPARAM_QUICK_SELLITEM          ItemParam = 49
	ItemParam_ITEMPARAM_ENCHANT_TRANS           ItemParam = 50
	ItemParam_ITEMPARAM_QUERY_LOTTERYHEAD       ItemParam = 51
	ItemParam_ITEMPARAM_LOTTERY_RATE_QUERY      ItemParam = 52
	ItemParam_ITEMPARAM_EQUIPCOMPOSE            ItemParam = 53
)

// Enum value maps for ItemParam.
var (
	ItemParam_name = map[int32]string{
		1:  "ITEMPARAM_PACKAGEITEM",
		2:  "ITEMPARAM_PACKAGEUPDATE",
		3:  "ITEMPARAM_ITEMUSE",
		4:  "ITEMPARAM_PACKAGESORT",
		5:  "ITEMPARAM_EQUIP",
		6:  "ITEMPARAM_SELLITEM",
		7:  "ITEMPARAM_EQUIPSTRENGTH",
		9:  "ITEMPARAM_PRODUCE",
		10: "ITEMPARAM_PRODUCEDONE",
		11: "ITEMPARAM_REFINE",
		12: "ITEMPARAM_DECOMPOSE",
		13: "ITEMPARAM_QUERYEQUIPDATA",
		14: "ITEMPARAM_BROWSEPACK",
		15: "ITEMPARAM_EQUIPCARD",
		16: "ITEMPARAM_ITEMSHOW",
		17: "ITEMPARAM_REPAIR",
		18: "ITEMPARAM_HINTNTF",
		19: "ITEMPARAM_ENCHANT",
		20: "ITEMPARAM_PROCESSENCHANT",
		21: "ITEMPARAM_EQUIPEXCHANGE",
		22: "ITEMPARAM_ONOFFSTORE",
		23: "ITEMPARAM_PACKSLOTNTF",
		24: "ITEMPARAM_RESTOREEQUIP",
		25: "ITEMPARAM_USECOUNT",
		27: "ITEMPARAM_QUERYDECOMPOSERESULT",
		28: "ITEMPARAM_EXCHANGECARD",
		29: "ITEMPARAM_GETCOUNT",
		30: "ITEMPARAM_SAVE_LOVE_LETTER",
		31: "ITEMPARAM_ITEMDATASHOW",
		32: "ITEMPARAM_LOTTERY",
		33: "ITEMPARAM_LOTTERY_RECOVERY",
		34: "ITEMPARAM_QUERY_LOTTERYINFO",
		35: "ITEMPARAM_ITEMSHOW64",
		36: "ITEMPARAM_HIGHREFINE_MATCOMPOSE",
		37: "ITEMPARAM_HIGHREFINE",
		38: "ITEMPARAM_NTF_HIGHTREFINE_DATA",
		39: "ITEMPARAM_UPDATE_HIGHTREFINE_DATA",
		40: "ITEMPARAM_REQ_QUOTA_LOG",
		41: "ITEMPARAM_REQ_QUOTA_DETAIL",
		42: "ITEMPARAM_EQUIPPOSDATA_UPDATE",
		43: "ITEMPARAM_USE_CODE_ITEM",
		44: "ITEMPARAM_ADD_JOBLEVEL",
		46: "ITEMPARAM_LOTTERY_GIVE_BUY_COUNT",
		47: "ITEMPARAM_GIVE_WEDDING_DRESS",
		48: "ITEMPARAM_QUICK_STOREITEM",
		49: "ITEMPARAM_QUICK_SELLITEM",
		50: "ITEMPARAM_ENCHANT_TRANS",
		51: "ITEMPARAM_QUERY_LOTTERYHEAD",
		52: "ITEMPARAM_LOTTERY_RATE_QUERY",
		53: "ITEMPARAM_EQUIPCOMPOSE",
	}
	ItemParam_value = map[string]int32{
		"ITEMPARAM_PACKAGEITEM":             1,
		"ITEMPARAM_PACKAGEUPDATE":           2,
		"ITEMPARAM_ITEMUSE":                 3,
		"ITEMPARAM_PACKAGESORT":             4,
		"ITEMPARAM_EQUIP":                   5,
		"ITEMPARAM_SELLITEM":                6,
		"ITEMPARAM_EQUIPSTRENGTH":           7,
		"ITEMPARAM_PRODUCE":                 9,
		"ITEMPARAM_PRODUCEDONE":             10,
		"ITEMPARAM_REFINE":                  11,
		"ITEMPARAM_DECOMPOSE":               12,
		"ITEMPARAM_QUERYEQUIPDATA":          13,
		"ITEMPARAM_BROWSEPACK":              14,
		"ITEMPARAM_EQUIPCARD":               15,
		"ITEMPARAM_ITEMSHOW":                16,
		"ITEMPARAM_REPAIR":                  17,
		"ITEMPARAM_HINTNTF":                 18,
		"ITEMPARAM_ENCHANT":                 19,
		"ITEMPARAM_PROCESSENCHANT":          20,
		"ITEMPARAM_EQUIPEXCHANGE":           21,
		"ITEMPARAM_ONOFFSTORE":              22,
		"ITEMPARAM_PACKSLOTNTF":             23,
		"ITEMPARAM_RESTOREEQUIP":            24,
		"ITEMPARAM_USECOUNT":                25,
		"ITEMPARAM_QUERYDECOMPOSERESULT":    27,
		"ITEMPARAM_EXCHANGECARD":            28,
		"ITEMPARAM_GETCOUNT":                29,
		"ITEMPARAM_SAVE_LOVE_LETTER":        30,
		"ITEMPARAM_ITEMDATASHOW":            31,
		"ITEMPARAM_LOTTERY":                 32,
		"ITEMPARAM_LOTTERY_RECOVERY":        33,
		"ITEMPARAM_QUERY_LOTTERYINFO":       34,
		"ITEMPARAM_ITEMSHOW64":              35,
		"ITEMPARAM_HIGHREFINE_MATCOMPOSE":   36,
		"ITEMPARAM_HIGHREFINE":              37,
		"ITEMPARAM_NTF_HIGHTREFINE_DATA":    38,
		"ITEMPARAM_UPDATE_HIGHTREFINE_DATA": 39,
		"ITEMPARAM_REQ_QUOTA_LOG":           40,
		"ITEMPARAM_REQ_QUOTA_DETAIL":        41,
		"ITEMPARAM_EQUIPPOSDATA_UPDATE":     42,
		"ITEMPARAM_USE_CODE_ITEM":           43,
		"ITEMPARAM_ADD_JOBLEVEL":            44,
		"ITEMPARAM_LOTTERY_GIVE_BUY_COUNT":  46,
		"ITEMPARAM_GIVE_WEDDING_DRESS":      47,
		"ITEMPARAM_QUICK_STOREITEM":         48,
		"ITEMPARAM_QUICK_SELLITEM":          49,
		"ITEMPARAM_ENCHANT_TRANS":           50,
		"ITEMPARAM_QUERY_LOTTERYHEAD":       51,
		"ITEMPARAM_LOTTERY_RATE_QUERY":      52,
		"ITEMPARAM_EQUIPCOMPOSE":            53,
	}
)

func (x ItemParam) Enum() *ItemParam {
	p := new(ItemParam)
	*p = x
	return p
}

func (x ItemParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemParam) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[0].Descriptor()
}

func (ItemParam) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[0]
}

func (x ItemParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ItemParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ItemParam(num)
	return nil
}

// Deprecated: Use ItemParam.Descriptor instead.
func (ItemParam) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{0}
}

type EPackType int32

const (
	EPackType_EPACKTYPE_MIN            EPackType = 0
	EPackType_EPACKTYPE_MAIN           EPackType = 1
	EPackType_EPACKTYPE_EQUIP          EPackType = 2
	EPackType_EPACKTYPE_FASHION        EPackType = 3
	EPackType_EPACKTYPE_FASHIONEQUIP   EPackType = 4
	EPackType_EPACKTYPE_CARD           EPackType = 5
	EPackType_EPACKTYPE_STORE          EPackType = 6
	EPackType_EPACKTYPE_PERSONAL_STORE EPackType = 7
	EPackType_EPACKTYPE_TEMP_MAIN      EPackType = 8
	EPackType_EPACKTYPE_BARROW         EPackType = 9
	EPackType_EPACKTYPE_QUEST          EPackType = 10
	EPackType_EPACKTYPE_FOOD           EPackType = 11
	EPackType_EPACKTYPE_PET            EPackType = 12
	EPackType_EPACKTYPE_MAX            EPackType = 13
)

// Enum value maps for EPackType.
var (
	EPackType_name = map[int32]string{
		0:  "EPACKTYPE_MIN",
		1:  "EPACKTYPE_MAIN",
		2:  "EPACKTYPE_EQUIP",
		3:  "EPACKTYPE_FASHION",
		4:  "EPACKTYPE_FASHIONEQUIP",
		5:  "EPACKTYPE_CARD",
		6:  "EPACKTYPE_STORE",
		7:  "EPACKTYPE_PERSONAL_STORE",
		8:  "EPACKTYPE_TEMP_MAIN",
		9:  "EPACKTYPE_BARROW",
		10: "EPACKTYPE_QUEST",
		11: "EPACKTYPE_FOOD",
		12: "EPACKTYPE_PET",
		13: "EPACKTYPE_MAX",
	}
	EPackType_value = map[string]int32{
		"EPACKTYPE_MIN":            0,
		"EPACKTYPE_MAIN":           1,
		"EPACKTYPE_EQUIP":          2,
		"EPACKTYPE_FASHION":        3,
		"EPACKTYPE_FASHIONEQUIP":   4,
		"EPACKTYPE_CARD":           5,
		"EPACKTYPE_STORE":          6,
		"EPACKTYPE_PERSONAL_STORE": 7,
		"EPACKTYPE_TEMP_MAIN":      8,
		"EPACKTYPE_BARROW":         9,
		"EPACKTYPE_QUEST":          10,
		"EPACKTYPE_FOOD":           11,
		"EPACKTYPE_PET":            12,
		"EPACKTYPE_MAX":            13,
	}
)

func (x EPackType) Enum() *EPackType {
	p := new(EPackType)
	*p = x
	return p
}

func (x EPackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPackType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[1].Descriptor()
}

func (EPackType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[1]
}

func (x EPackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPackType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPackType(num)
	return nil
}

// Deprecated: Use EPackType.Descriptor instead.
func (EPackType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{1}
}

type EItemType int32

const (
	EItemType_EITEMTYPE_MIN                 EItemType = 0
	EItemType_EITEMTYPE_HONOR               EItemType = 10
	EItemType_EITEMTYPE_STREASURE           EItemType = 20
	EItemType_EITEMTYPE_TREASURE            EItemType = 30
	EItemType_EITEMTYPE_STUFF               EItemType = 40
	EItemType_EITEMTYPE_STUFFNOCUT          EItemType = 41
	EItemType_EITEMTYPE_ARROW               EItemType = 43
	EItemType_EITEMTYPE_USESKILL            EItemType = 44
	EItemType_EITEMTYPE_GHOSTLAMP           EItemType = 45
	EItemType_EITEMTYPE_MULTITIME           EItemType = 46
	EItemType_EITEMTYPE_MONTHCARD           EItemType = 47
	EItemType_EITEMTYPE_QUEST_ONCE          EItemType = 48
	EItemType_EITEMTYPE_QUEST_TIME          EItemType = 49
	EItemType_EITEMTYPE_SHEET               EItemType = 50
	EItemType_EITEMTYPE_PET_WEARSHEET       EItemType = 51
	EItemType_EITEMTYPE_PET_WEARUNLOCK      EItemType = 52
	EItemType_EITEMTYPE_CONSUME             EItemType = 60
	EItemType_EITEMTYPE_HAIRSTUFF           EItemType = 61
	EItemType_EITEMTYPE_CONSUME_2           EItemType = 62
	EItemType_EITEMTYPE_COLLECTION          EItemType = 63
	EItemType_EITEMTYPE_RANGE               EItemType = 64
	EItemType_EITEMTYPE_FUNCTION            EItemType = 65
	EItemType_EITEMTYPE_ACTIVITY            EItemType = 66
	EItemType_EITEMTYPE_WEDDING_RING        EItemType = 67
	EItemType_EITEMTYPE_MATERIAL            EItemType = 70
	EItemType_EITEMTYPE_LETTER              EItemType = 71
	EItemType_EITEMTYPE_GOLDAPPLE           EItemType = 72
	EItemType_EITEMTYPE_GETSKILL            EItemType = 73
	EItemType_EITEMTYPE_PICKEFFECT          EItemType = 74
	EItemType_EITEMTYPE_FRIEND              EItemType = 75
	EItemType_EITEMTYPE_PICKEFFECT_1        EItemType = 76
	EItemType_EITEMTYPE_CARD_WEAPON         EItemType = 81
	EItemType_EITEMTYPE_CARD_ASSIST         EItemType = 82
	EItemType_EITEMTYPE_CARD_ARMOUR         EItemType = 83
	EItemType_EITEMTYPE_CARD_ROBE           EItemType = 84
	EItemType_EITEMTYPE_CARD_SHOES          EItemType = 85
	EItemType_EITEMTYPE_CARD_ACCESSORY      EItemType = 86
	EItemType_EITEMTYPE_CARD_HEAD           EItemType = 87
	EItemType_EITEMTYPE_MOUNT               EItemType = 90
	EItemType_EITEMTYPE_BARROW              EItemType = 91
	EItemType_EITEMTYPE_PET                 EItemType = 100
	EItemType_EITEMTYPE_EGG                 EItemType = 101
	EItemType_EITEMTYPE_PET_EQUIP           EItemType = 102
	EItemType_EITEMTYPE_PET_CONSUME         EItemType = 103
	EItemType_EITEMTYPE_CARDPIECE           EItemType = 110
	EItemType_EITEMTYPE_EQUIPPIECE          EItemType = 120
	EItemType_EITEMTYPE_FASHION_PIECE       EItemType = 121
	EItemType_EITEMTYPE_GOLD                EItemType = 130
	EItemType_EITEMTYPE_SILVER              EItemType = 131
	EItemType_EITEMTYPE_DIAMOND             EItemType = 132
	EItemType_EITEMTYPE_GARDEN              EItemType = 140
	EItemType_EITEMTYPE_CONTRIBUTE          EItemType = 145
	EItemType_EITEMTYPE_ASSET               EItemType = 146
	EItemType_EITEMTYPE_FRIENDSHIP          EItemType = 147
	EItemType_EITEMTYPE_MANUALSPOINT        EItemType = 143
	EItemType_EITEMTYPE_MORA                EItemType = 144
	EItemType_EITEMTYPE_PVPCOIN             EItemType = 141
	EItemType_EITEMTYPE_BASEEXP             EItemType = 150
	EItemType_EITEMTYPE_JOBEXP              EItemType = 151
	EItemType_EITEMTYPE_PURIFY              EItemType = 152
	EItemType_EITEMTYPE_MANUALPOINT         EItemType = 153
	EItemType_EITEMTYPE_LOTTERY             EItemType = 154
	EItemType_EITEMTYPE_COOKER_EXP          EItemType = 155
	EItemType_EITEMTYPE_GUILDHONOR          EItemType = 156
	EItemType_EITEMTYPE_POLLY_COIN          EItemType = 157
	EItemType_EITEMTYPE_QUESTITEM           EItemType = 160
	EItemType_EITEMTYPE_QUESTITEMCOUNT      EItemType = 165
	EItemType_EITEMTYPE_WEDDING_CERT        EItemType = 166
	EItemType_EITEMTYPE_WEDDING_INVITE      EItemType = 167
	EItemType_EITEMTYPE_WEDDING_MANUAL      EItemType = 168
	EItemType_EITEMTYPE_DEADCOIN            EItemType = 169
	EItemType_EITEMTYPE_WEAPON_LANCE        EItemType = 170
	EItemType_EITEMTYPE_WEAPON_SWORD        EItemType = 180
	EItemType_EITEMTYPE_WEAPON_WAND         EItemType = 190
	EItemType_EITEMTYPE_WEAPON_KNIFE        EItemType = 200
	EItemType_EITEMTYPE_WEAPON_BOW          EItemType = 210
	EItemType_EITEMTYPE_WEAPON_HAMMER       EItemType = 220
	EItemType_EITEMTYPE_WEAPON_AXE          EItemType = 230
	EItemType_EITEMTYPE_WEAPON_BOOK         EItemType = 240
	EItemType_EITEMTYPE_WEAPON_DAGGER       EItemType = 250
	EItemType_EITEMTYPE_WEAPON_INSTRUMEMT   EItemType = 260
	EItemType_EITEMTYPE_WEAPON_WHIP         EItemType = 270
	EItemType_EITEMTYPE_WEAPON_TUBE         EItemType = 280
	EItemType_EITEMTYPE_WEAPON_FIST         EItemType = 290
	EItemType_EITEMTYPE_ARTIFACT_LANCE      EItemType = 450
	EItemType_EITEMTYPE_ARTIFACT_SWORD      EItemType = 451
	EItemType_EITEMTYPE_ARTIFACT_WAND       EItemType = 452
	EItemType_EITEMTYPE_ARTIFACT_KNIFE      EItemType = 453
	EItemType_EITEMTYPE_ARTIFACT_BOW        EItemType = 454
	EItemType_EITEMTYPE_ARTIFACT_HAMMER     EItemType = 455
	EItemType_EITEMTYPE_ARTIFACT_AXE        EItemType = 456
	EItemType_EITEMTYPE_ARTIFACT_DAGGER     EItemType = 457
	EItemType_EITEMTYPE_ARTIFACT_FIST       EItemType = 458
	EItemType_EITEMTYPE_ARTIFACT_INSTRUMEMT EItemType = 459
	EItemType_EITEMTYPE_ARTIFACT_WHIP       EItemType = 460
	EItemType_EITEMTYPE_ARTIFACT_BOOK       EItemType = 461
	EItemType_EITEMTYPE_ARTIFACT_HEAD       EItemType = 485
	EItemType_EITEMTYPE_ARTIFACT_BACK       EItemType = 488
	EItemType_EITEMTYPE_ARMOUR              EItemType = 500
	EItemType_EITEMTYPE_ARMOUR_FASHION      EItemType = 501
	EItemType_EITEMTYPE_SHIELD              EItemType = 510
	EItemType_EITEMTYPE_PEARL               EItemType = 511
	EItemType_EITEMTYPE_EIKON               EItemType = 512
	EItemType_EITEMTYPE_BRACER              EItemType = 513
	EItemType_EITEMTYPE_BRACELET            EItemType = 514
	EItemType_EITEMTYPE_TROLLEY             EItemType = 515
	EItemType_EITEMTYPE_ROBE                EItemType = 520
	EItemType_EITEMTYPE_SHOES               EItemType = 530
	EItemType_EITEMTYPE_ACCESSORY           EItemType = 540
	EItemType_EITEMTYPE_FOOD_MEAT           EItemType = 601
	EItemType_EITEMTYPE_FOOD_FISH           EItemType = 602
	EItemType_EITEMTYPE_FOOD_VEGETABLE      EItemType = 603
	EItemType_EITEMTYPE_FOOD_FRUIT          EItemType = 604
	EItemType_EITEMTYPE_FOOD_SEASONING      EItemType = 605
	EItemType_EITEMTYPE_FOOD                EItemType = 610
	EItemType_EITEMTYPE_HEAD                EItemType = 800
	EItemType_EITEMTYPE_BACK                EItemType = 810
	EItemType_EITEMTYPE_HAIR                EItemType = 820
	EItemType_EITEMTYPE_HAIR_MALE           EItemType = 821
	EItemType_EITEMTYPE_HAIR_FEMALE         EItemType = 822
	EItemType_EITEMTYPE_EYE_MALE            EItemType = 823
	EItemType_EITEMTYPE_EYE_FEMALE          EItemType = 824
	EItemType_EITEMTYPE_FACE                EItemType = 830
	EItemType_EITEMTYPE_TAIL                EItemType = 840
	EItemType_EITEMTYPE_MOUTH               EItemType = 850
	EItemType_EITEMTYPE_WATER_ELEMENT       EItemType = 1001
	EItemType_EITEMTYPE_PORTRAIT            EItemType = 1200
	EItemType_EITEMTYPE_FRAME               EItemType = 1210
	EItemType_EITEMTYPE_CODE                EItemType = 4000
	EItemType_EITEMTYPE_KFC_CODE            EItemType = 4200
	EItemType_EITEMTYPE_MAX                 EItemType = 4201
)

// Enum value maps for EItemType.
var (
	EItemType_name = map[int32]string{
		0:    "EITEMTYPE_MIN",
		10:   "EITEMTYPE_HONOR",
		20:   "EITEMTYPE_STREASURE",
		30:   "EITEMTYPE_TREASURE",
		40:   "EITEMTYPE_STUFF",
		41:   "EITEMTYPE_STUFFNOCUT",
		43:   "EITEMTYPE_ARROW",
		44:   "EITEMTYPE_USESKILL",
		45:   "EITEMTYPE_GHOSTLAMP",
		46:   "EITEMTYPE_MULTITIME",
		47:   "EITEMTYPE_MONTHCARD",
		48:   "EITEMTYPE_QUEST_ONCE",
		49:   "EITEMTYPE_QUEST_TIME",
		50:   "EITEMTYPE_SHEET",
		51:   "EITEMTYPE_PET_WEARSHEET",
		52:   "EITEMTYPE_PET_WEARUNLOCK",
		60:   "EITEMTYPE_CONSUME",
		61:   "EITEMTYPE_HAIRSTUFF",
		62:   "EITEMTYPE_CONSUME_2",
		63:   "EITEMTYPE_COLLECTION",
		64:   "EITEMTYPE_RANGE",
		65:   "EITEMTYPE_FUNCTION",
		66:   "EITEMTYPE_ACTIVITY",
		67:   "EITEMTYPE_WEDDING_RING",
		70:   "EITEMTYPE_MATERIAL",
		71:   "EITEMTYPE_LETTER",
		72:   "EITEMTYPE_GOLDAPPLE",
		73:   "EITEMTYPE_GETSKILL",
		74:   "EITEMTYPE_PICKEFFECT",
		75:   "EITEMTYPE_FRIEND",
		76:   "EITEMTYPE_PICKEFFECT_1",
		81:   "EITEMTYPE_CARD_WEAPON",
		82:   "EITEMTYPE_CARD_ASSIST",
		83:   "EITEMTYPE_CARD_ARMOUR",
		84:   "EITEMTYPE_CARD_ROBE",
		85:   "EITEMTYPE_CARD_SHOES",
		86:   "EITEMTYPE_CARD_ACCESSORY",
		87:   "EITEMTYPE_CARD_HEAD",
		90:   "EITEMTYPE_MOUNT",
		91:   "EITEMTYPE_BARROW",
		100:  "EITEMTYPE_PET",
		101:  "EITEMTYPE_EGG",
		102:  "EITEMTYPE_PET_EQUIP",
		103:  "EITEMTYPE_PET_CONSUME",
		110:  "EITEMTYPE_CARDPIECE",
		120:  "EITEMTYPE_EQUIPPIECE",
		121:  "EITEMTYPE_FASHION_PIECE",
		130:  "EITEMTYPE_GOLD",
		131:  "EITEMTYPE_SILVER",
		132:  "EITEMTYPE_DIAMOND",
		140:  "EITEMTYPE_GARDEN",
		145:  "EITEMTYPE_CONTRIBUTE",
		146:  "EITEMTYPE_ASSET",
		147:  "EITEMTYPE_FRIENDSHIP",
		143:  "EITEMTYPE_MANUALSPOINT",
		144:  "EITEMTYPE_MORA",
		141:  "EITEMTYPE_PVPCOIN",
		150:  "EITEMTYPE_BASEEXP",
		151:  "EITEMTYPE_JOBEXP",
		152:  "EITEMTYPE_PURIFY",
		153:  "EITEMTYPE_MANUALPOINT",
		154:  "EITEMTYPE_LOTTERY",
		155:  "EITEMTYPE_COOKER_EXP",
		156:  "EITEMTYPE_GUILDHONOR",
		157:  "EITEMTYPE_POLLY_COIN",
		160:  "EITEMTYPE_QUESTITEM",
		165:  "EITEMTYPE_QUESTITEMCOUNT",
		166:  "EITEMTYPE_WEDDING_CERT",
		167:  "EITEMTYPE_WEDDING_INVITE",
		168:  "EITEMTYPE_WEDDING_MANUAL",
		169:  "EITEMTYPE_DEADCOIN",
		170:  "EITEMTYPE_WEAPON_LANCE",
		180:  "EITEMTYPE_WEAPON_SWORD",
		190:  "EITEMTYPE_WEAPON_WAND",
		200:  "EITEMTYPE_WEAPON_KNIFE",
		210:  "EITEMTYPE_WEAPON_BOW",
		220:  "EITEMTYPE_WEAPON_HAMMER",
		230:  "EITEMTYPE_WEAPON_AXE",
		240:  "EITEMTYPE_WEAPON_BOOK",
		250:  "EITEMTYPE_WEAPON_DAGGER",
		260:  "EITEMTYPE_WEAPON_INSTRUMEMT",
		270:  "EITEMTYPE_WEAPON_WHIP",
		280:  "EITEMTYPE_WEAPON_TUBE",
		290:  "EITEMTYPE_WEAPON_FIST",
		450:  "EITEMTYPE_ARTIFACT_LANCE",
		451:  "EITEMTYPE_ARTIFACT_SWORD",
		452:  "EITEMTYPE_ARTIFACT_WAND",
		453:  "EITEMTYPE_ARTIFACT_KNIFE",
		454:  "EITEMTYPE_ARTIFACT_BOW",
		455:  "EITEMTYPE_ARTIFACT_HAMMER",
		456:  "EITEMTYPE_ARTIFACT_AXE",
		457:  "EITEMTYPE_ARTIFACT_DAGGER",
		458:  "EITEMTYPE_ARTIFACT_FIST",
		459:  "EITEMTYPE_ARTIFACT_INSTRUMEMT",
		460:  "EITEMTYPE_ARTIFACT_WHIP",
		461:  "EITEMTYPE_ARTIFACT_BOOK",
		485:  "EITEMTYPE_ARTIFACT_HEAD",
		488:  "EITEMTYPE_ARTIFACT_BACK",
		500:  "EITEMTYPE_ARMOUR",
		501:  "EITEMTYPE_ARMOUR_FASHION",
		510:  "EITEMTYPE_SHIELD",
		511:  "EITEMTYPE_PEARL",
		512:  "EITEMTYPE_EIKON",
		513:  "EITEMTYPE_BRACER",
		514:  "EITEMTYPE_BRACELET",
		515:  "EITEMTYPE_TROLLEY",
		520:  "EITEMTYPE_ROBE",
		530:  "EITEMTYPE_SHOES",
		540:  "EITEMTYPE_ACCESSORY",
		601:  "EITEMTYPE_FOOD_MEAT",
		602:  "EITEMTYPE_FOOD_FISH",
		603:  "EITEMTYPE_FOOD_VEGETABLE",
		604:  "EITEMTYPE_FOOD_FRUIT",
		605:  "EITEMTYPE_FOOD_SEASONING",
		610:  "EITEMTYPE_FOOD",
		800:  "EITEMTYPE_HEAD",
		810:  "EITEMTYPE_BACK",
		820:  "EITEMTYPE_HAIR",
		821:  "EITEMTYPE_HAIR_MALE",
		822:  "EITEMTYPE_HAIR_FEMALE",
		823:  "EITEMTYPE_EYE_MALE",
		824:  "EITEMTYPE_EYE_FEMALE",
		830:  "EITEMTYPE_FACE",
		840:  "EITEMTYPE_TAIL",
		850:  "EITEMTYPE_MOUTH",
		1001: "EITEMTYPE_WATER_ELEMENT",
		1200: "EITEMTYPE_PORTRAIT",
		1210: "EITEMTYPE_FRAME",
		4000: "EITEMTYPE_CODE",
		4200: "EITEMTYPE_KFC_CODE",
		4201: "EITEMTYPE_MAX",
	}
	EItemType_value = map[string]int32{
		"EITEMTYPE_MIN":                 0,
		"EITEMTYPE_HONOR":               10,
		"EITEMTYPE_STREASURE":           20,
		"EITEMTYPE_TREASURE":            30,
		"EITEMTYPE_STUFF":               40,
		"EITEMTYPE_STUFFNOCUT":          41,
		"EITEMTYPE_ARROW":               43,
		"EITEMTYPE_USESKILL":            44,
		"EITEMTYPE_GHOSTLAMP":           45,
		"EITEMTYPE_MULTITIME":           46,
		"EITEMTYPE_MONTHCARD":           47,
		"EITEMTYPE_QUEST_ONCE":          48,
		"EITEMTYPE_QUEST_TIME":          49,
		"EITEMTYPE_SHEET":               50,
		"EITEMTYPE_PET_WEARSHEET":       51,
		"EITEMTYPE_PET_WEARUNLOCK":      52,
		"EITEMTYPE_CONSUME":             60,
		"EITEMTYPE_HAIRSTUFF":           61,
		"EITEMTYPE_CONSUME_2":           62,
		"EITEMTYPE_COLLECTION":          63,
		"EITEMTYPE_RANGE":               64,
		"EITEMTYPE_FUNCTION":            65,
		"EITEMTYPE_ACTIVITY":            66,
		"EITEMTYPE_WEDDING_RING":        67,
		"EITEMTYPE_MATERIAL":            70,
		"EITEMTYPE_LETTER":              71,
		"EITEMTYPE_GOLDAPPLE":           72,
		"EITEMTYPE_GETSKILL":            73,
		"EITEMTYPE_PICKEFFECT":          74,
		"EITEMTYPE_FRIEND":              75,
		"EITEMTYPE_PICKEFFECT_1":        76,
		"EITEMTYPE_CARD_WEAPON":         81,
		"EITEMTYPE_CARD_ASSIST":         82,
		"EITEMTYPE_CARD_ARMOUR":         83,
		"EITEMTYPE_CARD_ROBE":           84,
		"EITEMTYPE_CARD_SHOES":          85,
		"EITEMTYPE_CARD_ACCESSORY":      86,
		"EITEMTYPE_CARD_HEAD":           87,
		"EITEMTYPE_MOUNT":               90,
		"EITEMTYPE_BARROW":              91,
		"EITEMTYPE_PET":                 100,
		"EITEMTYPE_EGG":                 101,
		"EITEMTYPE_PET_EQUIP":           102,
		"EITEMTYPE_PET_CONSUME":         103,
		"EITEMTYPE_CARDPIECE":           110,
		"EITEMTYPE_EQUIPPIECE":          120,
		"EITEMTYPE_FASHION_PIECE":       121,
		"EITEMTYPE_GOLD":                130,
		"EITEMTYPE_SILVER":              131,
		"EITEMTYPE_DIAMOND":             132,
		"EITEMTYPE_GARDEN":              140,
		"EITEMTYPE_CONTRIBUTE":          145,
		"EITEMTYPE_ASSET":               146,
		"EITEMTYPE_FRIENDSHIP":          147,
		"EITEMTYPE_MANUALSPOINT":        143,
		"EITEMTYPE_MORA":                144,
		"EITEMTYPE_PVPCOIN":             141,
		"EITEMTYPE_BASEEXP":             150,
		"EITEMTYPE_JOBEXP":              151,
		"EITEMTYPE_PURIFY":              152,
		"EITEMTYPE_MANUALPOINT":         153,
		"EITEMTYPE_LOTTERY":             154,
		"EITEMTYPE_COOKER_EXP":          155,
		"EITEMTYPE_GUILDHONOR":          156,
		"EITEMTYPE_POLLY_COIN":          157,
		"EITEMTYPE_QUESTITEM":           160,
		"EITEMTYPE_QUESTITEMCOUNT":      165,
		"EITEMTYPE_WEDDING_CERT":        166,
		"EITEMTYPE_WEDDING_INVITE":      167,
		"EITEMTYPE_WEDDING_MANUAL":      168,
		"EITEMTYPE_DEADCOIN":            169,
		"EITEMTYPE_WEAPON_LANCE":        170,
		"EITEMTYPE_WEAPON_SWORD":        180,
		"EITEMTYPE_WEAPON_WAND":         190,
		"EITEMTYPE_WEAPON_KNIFE":        200,
		"EITEMTYPE_WEAPON_BOW":          210,
		"EITEMTYPE_WEAPON_HAMMER":       220,
		"EITEMTYPE_WEAPON_AXE":          230,
		"EITEMTYPE_WEAPON_BOOK":         240,
		"EITEMTYPE_WEAPON_DAGGER":       250,
		"EITEMTYPE_WEAPON_INSTRUMEMT":   260,
		"EITEMTYPE_WEAPON_WHIP":         270,
		"EITEMTYPE_WEAPON_TUBE":         280,
		"EITEMTYPE_WEAPON_FIST":         290,
		"EITEMTYPE_ARTIFACT_LANCE":      450,
		"EITEMTYPE_ARTIFACT_SWORD":      451,
		"EITEMTYPE_ARTIFACT_WAND":       452,
		"EITEMTYPE_ARTIFACT_KNIFE":      453,
		"EITEMTYPE_ARTIFACT_BOW":        454,
		"EITEMTYPE_ARTIFACT_HAMMER":     455,
		"EITEMTYPE_ARTIFACT_AXE":        456,
		"EITEMTYPE_ARTIFACT_DAGGER":     457,
		"EITEMTYPE_ARTIFACT_FIST":       458,
		"EITEMTYPE_ARTIFACT_INSTRUMEMT": 459,
		"EITEMTYPE_ARTIFACT_WHIP":       460,
		"EITEMTYPE_ARTIFACT_BOOK":       461,
		"EITEMTYPE_ARTIFACT_HEAD":       485,
		"EITEMTYPE_ARTIFACT_BACK":       488,
		"EITEMTYPE_ARMOUR":              500,
		"EITEMTYPE_ARMOUR_FASHION":      501,
		"EITEMTYPE_SHIELD":              510,
		"EITEMTYPE_PEARL":               511,
		"EITEMTYPE_EIKON":               512,
		"EITEMTYPE_BRACER":              513,
		"EITEMTYPE_BRACELET":            514,
		"EITEMTYPE_TROLLEY":             515,
		"EITEMTYPE_ROBE":                520,
		"EITEMTYPE_SHOES":               530,
		"EITEMTYPE_ACCESSORY":           540,
		"EITEMTYPE_FOOD_MEAT":           601,
		"EITEMTYPE_FOOD_FISH":           602,
		"EITEMTYPE_FOOD_VEGETABLE":      603,
		"EITEMTYPE_FOOD_FRUIT":          604,
		"EITEMTYPE_FOOD_SEASONING":      605,
		"EITEMTYPE_FOOD":                610,
		"EITEMTYPE_HEAD":                800,
		"EITEMTYPE_BACK":                810,
		"EITEMTYPE_HAIR":                820,
		"EITEMTYPE_HAIR_MALE":           821,
		"EITEMTYPE_HAIR_FEMALE":         822,
		"EITEMTYPE_EYE_MALE":            823,
		"EITEMTYPE_EYE_FEMALE":          824,
		"EITEMTYPE_FACE":                830,
		"EITEMTYPE_TAIL":                840,
		"EITEMTYPE_MOUTH":               850,
		"EITEMTYPE_WATER_ELEMENT":       1001,
		"EITEMTYPE_PORTRAIT":            1200,
		"EITEMTYPE_FRAME":               1210,
		"EITEMTYPE_CODE":                4000,
		"EITEMTYPE_KFC_CODE":            4200,
		"EITEMTYPE_MAX":                 4201,
	}
)

func (x EItemType) Enum() *EItemType {
	p := new(EItemType)
	*p = x
	return p
}

func (x EItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[2].Descriptor()
}

func (EItemType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[2]
}

func (x EItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EItemType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EItemType(num)
	return nil
}

// Deprecated: Use EItemType.Descriptor instead.
func (EItemType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{2}
}

type EEquipType int32

const (
	EEquipType_EEQUIPTYPE_MIN           EEquipType = 0
	EEquipType_EEQUIPTYPE_WEAPON        EEquipType = 1
	EEquipType_EEQUIPTYPE_SHIELD        EEquipType = 3
	EEquipType_EEQUIPTYPE_ARMOUR        EEquipType = 2
	EEquipType_EEQUIPTYPE_ROBE          EEquipType = 4
	EEquipType_EEQUIPTYPE_SHOES         EEquipType = 5
	EEquipType_EEQUIPTYPE_ACCESSORY     EEquipType = 6
	EEquipType_EEQUIPTYPE_HEAD          EEquipType = 8
	EEquipType_EEQUIPTYPE_BACK          EEquipType = 9
	EEquipType_EEQUIPTYPE_FACE          EEquipType = 10
	EEquipType_EEQUIPTYPE_TAIL          EEquipType = 11
	EEquipType_EEQUIPTYPE_MOUNT         EEquipType = 12
	EEquipType_EEQUIPTYPE_MOUTH         EEquipType = 13
	EEquipType_EEQUIPTYPE_BARROW        EEquipType = 14
	EEquipType_EEQUIPTYPE_PEARL         EEquipType = 16
	EEquipType_EEQUIPTYPE_EIKON         EEquipType = 17
	EEquipType_EEQUIPTYPE_BRACELET      EEquipType = 18
	EEquipType_EEQUIPTYPE_HANDBRACELET  EEquipType = 19
	EEquipType_EEQUIPTYPE_TROLLEY       EEquipType = 20
	EEquipType_EEQUIPTYPE_ARTIFACT      EEquipType = 21
	EEquipType_EEQUIPTYPE_ARTIFACT_HEAD EEquipType = 22
	EEquipType_EEQUIPTYPE_ARTIFACT_BACK EEquipType = 23
	EEquipType_EEQUIPTYPE_MAX           EEquipType = 24
)

// Enum value maps for EEquipType.
var (
	EEquipType_name = map[int32]string{
		0:  "EEQUIPTYPE_MIN",
		1:  "EEQUIPTYPE_WEAPON",
		3:  "EEQUIPTYPE_SHIELD",
		2:  "EEQUIPTYPE_ARMOUR",
		4:  "EEQUIPTYPE_ROBE",
		5:  "EEQUIPTYPE_SHOES",
		6:  "EEQUIPTYPE_ACCESSORY",
		8:  "EEQUIPTYPE_HEAD",
		9:  "EEQUIPTYPE_BACK",
		10: "EEQUIPTYPE_FACE",
		11: "EEQUIPTYPE_TAIL",
		12: "EEQUIPTYPE_MOUNT",
		13: "EEQUIPTYPE_MOUTH",
		14: "EEQUIPTYPE_BARROW",
		16: "EEQUIPTYPE_PEARL",
		17: "EEQUIPTYPE_EIKON",
		18: "EEQUIPTYPE_BRACELET",
		19: "EEQUIPTYPE_HANDBRACELET",
		20: "EEQUIPTYPE_TROLLEY",
		21: "EEQUIPTYPE_ARTIFACT",
		22: "EEQUIPTYPE_ARTIFACT_HEAD",
		23: "EEQUIPTYPE_ARTIFACT_BACK",
		24: "EEQUIPTYPE_MAX",
	}
	EEquipType_value = map[string]int32{
		"EEQUIPTYPE_MIN":           0,
		"EEQUIPTYPE_WEAPON":        1,
		"EEQUIPTYPE_SHIELD":        3,
		"EEQUIPTYPE_ARMOUR":        2,
		"EEQUIPTYPE_ROBE":          4,
		"EEQUIPTYPE_SHOES":         5,
		"EEQUIPTYPE_ACCESSORY":     6,
		"EEQUIPTYPE_HEAD":          8,
		"EEQUIPTYPE_BACK":          9,
		"EEQUIPTYPE_FACE":          10,
		"EEQUIPTYPE_TAIL":          11,
		"EEQUIPTYPE_MOUNT":         12,
		"EEQUIPTYPE_MOUTH":         13,
		"EEQUIPTYPE_BARROW":        14,
		"EEQUIPTYPE_PEARL":         16,
		"EEQUIPTYPE_EIKON":         17,
		"EEQUIPTYPE_BRACELET":      18,
		"EEQUIPTYPE_HANDBRACELET":  19,
		"EEQUIPTYPE_TROLLEY":       20,
		"EEQUIPTYPE_ARTIFACT":      21,
		"EEQUIPTYPE_ARTIFACT_HEAD": 22,
		"EEQUIPTYPE_ARTIFACT_BACK": 23,
		"EEQUIPTYPE_MAX":           24,
	}
)

func (x EEquipType) Enum() *EEquipType {
	p := new(EEquipType)
	*p = x
	return p
}

func (x EEquipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEquipType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[3].Descriptor()
}

func (EEquipType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[3]
}

func (x EEquipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEquipType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEquipType(num)
	return nil
}

// Deprecated: Use EEquipType.Descriptor instead.
func (EEquipType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{3}
}

type EBindType int32

const (
	EBindType_EBINDTYPE_MIN    EBindType = 0
	EBindType_EBINDTYPE_BIND   EBindType = 1
	EBindType_EBINDTYPE_NOBIND EBindType = 2
	EBindType_EBINDTYPE_MAX    EBindType = 3
)

// Enum value maps for EBindType.
var (
	EBindType_name = map[int32]string{
		0: "EBINDTYPE_MIN",
		1: "EBINDTYPE_BIND",
		2: "EBINDTYPE_NOBIND",
		3: "EBINDTYPE_MAX",
	}
	EBindType_value = map[string]int32{
		"EBINDTYPE_MIN":    0,
		"EBINDTYPE_BIND":   1,
		"EBINDTYPE_NOBIND": 2,
		"EBINDTYPE_MAX":    3,
	}
)

func (x EBindType) Enum() *EBindType {
	p := new(EBindType)
	*p = x
	return p
}

func (x EBindType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBindType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[4].Descriptor()
}

func (EBindType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[4]
}

func (x EBindType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBindType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBindType(num)
	return nil
}

// Deprecated: Use EBindType.Descriptor instead.
func (EBindType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{4}
}

type EExpireType int32

const (
	EExpireType_EEXPIRETYPE_MIN EExpireType = 0
	EExpireType_EEXPIRETYPE_MAX EExpireType = 1
)

// Enum value maps for EExpireType.
var (
	EExpireType_name = map[int32]string{
		0: "EEXPIRETYPE_MIN",
		1: "EEXPIRETYPE_MAX",
	}
	EExpireType_value = map[string]int32{
		"EEXPIRETYPE_MIN": 0,
		"EEXPIRETYPE_MAX": 1,
	}
)

func (x EExpireType) Enum() *EExpireType {
	p := new(EExpireType)
	*p = x
	return p
}

func (x EExpireType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EExpireType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[5].Descriptor()
}

func (EExpireType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[5]
}

func (x EExpireType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EExpireType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EExpireType(num)
	return nil
}

// Deprecated: Use EExpireType.Descriptor instead.
func (EExpireType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{5}
}

type ERideType int32

const (
	ERideType_ERIDETYPE_MIN ERideType = 0
	ERideType_ERIDETYPE_ON  ERideType = 1
	ERideType_ERIDETYPE_OFF ERideType = 2
	ERideType_ERIDETYPE_MAX ERideType = 3
)

// Enum value maps for ERideType.
var (
	ERideType_name = map[int32]string{
		0: "ERIDETYPE_MIN",
		1: "ERIDETYPE_ON",
		2: "ERIDETYPE_OFF",
		3: "ERIDETYPE_MAX",
	}
	ERideType_value = map[string]int32{
		"ERIDETYPE_MIN": 0,
		"ERIDETYPE_ON":  1,
		"ERIDETYPE_OFF": 2,
		"ERIDETYPE_MAX": 3,
	}
)

func (x ERideType) Enum() *ERideType {
	p := new(ERideType)
	*p = x
	return p
}

func (x ERideType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERideType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[6].Descriptor()
}

func (ERideType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[6]
}

func (x ERideType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERideType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERideType(num)
	return nil
}

// Deprecated: Use ERideType.Descriptor instead.
func (ERideType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{6}
}

type ETragetType int32

const (
	ETragetType_ETARGETTYPE_MY             ETragetType = 0
	ETragetType_ETARGETTYPE_USER           ETragetType = 1
	ETragetType_ETARGETTYPE_MONSTER        ETragetType = 2
	ETragetType_ETARGETTYPE_USERANDMONSTER ETragetType = 3
)

// Enum value maps for ETragetType.
var (
	ETragetType_name = map[int32]string{
		0: "ETARGETTYPE_MY",
		1: "ETARGETTYPE_USER",
		2: "ETARGETTYPE_MONSTER",
		3: "ETARGETTYPE_USERANDMONSTER",
	}
	ETragetType_value = map[string]int32{
		"ETARGETTYPE_MY":             0,
		"ETARGETTYPE_USER":           1,
		"ETARGETTYPE_MONSTER":        2,
		"ETARGETTYPE_USERANDMONSTER": 3,
	}
)

func (x ETragetType) Enum() *ETragetType {
	p := new(ETragetType)
	*p = x
	return p
}

func (x ETragetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETragetType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[7].Descriptor()
}

func (ETragetType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[7]
}

func (x ETragetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETragetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETragetType(num)
	return nil
}

// Deprecated: Use ETragetType.Descriptor instead.
func (ETragetType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{7}
}

type EEnchantType int32

const (
	EEnchantType_EENCHANTTYPE_MIN     EEnchantType = 0
	EEnchantType_EENCHANTTYPE_PRIMARY EEnchantType = 1
	EEnchantType_EENCHANTTYPE_MEDIUM  EEnchantType = 2
	EEnchantType_EENCHANTTYPE_SENIOR  EEnchantType = 3
	EEnchantType_EENCHANTTYPE_MAX     EEnchantType = 4
)

// Enum value maps for EEnchantType.
var (
	EEnchantType_name = map[int32]string{
		0: "EENCHANTTYPE_MIN",
		1: "EENCHANTTYPE_PRIMARY",
		2: "EENCHANTTYPE_MEDIUM",
		3: "EENCHANTTYPE_SENIOR",
		4: "EENCHANTTYPE_MAX",
	}
	EEnchantType_value = map[string]int32{
		"EENCHANTTYPE_MIN":     0,
		"EENCHANTTYPE_PRIMARY": 1,
		"EENCHANTTYPE_MEDIUM":  2,
		"EENCHANTTYPE_SENIOR":  3,
		"EENCHANTTYPE_MAX":     4,
	}
)

func (x EEnchantType) Enum() *EEnchantType {
	p := new(EEnchantType)
	*p = x
	return p
}

func (x EEnchantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEnchantType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[8].Descriptor()
}

func (EEnchantType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[8]
}

func (x EEnchantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEnchantType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEnchantType(num)
	return nil
}

// Deprecated: Use EEnchantType.Descriptor instead.
func (EEnchantType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{8}
}

type ELetterType int32

const (
	ELetterType_ELETTERTYPE_LOVE          ELetterType = 1
	ELetterType_ELETTERTYPE_CONSTELLATION ELetterType = 2
	ELetterType_ELETTERTYPE_CHRISTMAS     ELetterType = 3
	ELetterType_ELETTERTYPE_SPRING        ELetterType = 4
	ELetterType_ELETTERTYPE_LOTTERY       ELetterType = 5
	ELetterType_ELETTERTYPE_WEDDINGDRESS  ELetterType = 6
)

// Enum value maps for ELetterType.
var (
	ELetterType_name = map[int32]string{
		1: "ELETTERTYPE_LOVE",
		2: "ELETTERTYPE_CONSTELLATION",
		3: "ELETTERTYPE_CHRISTMAS",
		4: "ELETTERTYPE_SPRING",
		5: "ELETTERTYPE_LOTTERY",
		6: "ELETTERTYPE_WEDDINGDRESS",
	}
	ELetterType_value = map[string]int32{
		"ELETTERTYPE_LOVE":          1,
		"ELETTERTYPE_CONSTELLATION": 2,
		"ELETTERTYPE_CHRISTMAS":     3,
		"ELETTERTYPE_SPRING":        4,
		"ELETTERTYPE_LOTTERY":       5,
		"ELETTERTYPE_WEDDINGDRESS":  6,
	}
)

func (x ELetterType) Enum() *ELetterType {
	p := new(ELetterType)
	*p = x
	return p
}

func (x ELetterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELetterType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[9].Descriptor()
}

func (ELetterType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[9]
}

func (x ELetterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELetterType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELetterType(num)
	return nil
}

// Deprecated: Use ELetterType.Descriptor instead.
func (ELetterType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{9}
}

type EEquipOper int32

const (
	EEquipOper_EEQUIPOPER_MIN         EEquipOper = 0
	EEquipOper_EEQUIPOPER_ON          EEquipOper = 1
	EEquipOper_EEQUIPOPER_OFF         EEquipOper = 2
	EEquipOper_EEQUIPOPER_PUTFASHION  EEquipOper = 3
	EEquipOper_EEQUIPOPER_OFFFASHION  EEquipOper = 4
	EEquipOper_EEQUIPOPER_PUTSTORE    EEquipOper = 5
	EEquipOper_EEQUIPOPER_OFFSTORE    EEquipOper = 6
	EEquipOper_EEQUIPOPER_OFFALL      EEquipOper = 7
	EEquipOper_EEQUIPOPER_OFFPOS      EEquipOper = 8
	EEquipOper_EEQUIPOPER_PUTPSTORE   EEquipOper = 9
	EEquipOper_EEQUIPOPER_OFFPSTORE   EEquipOper = 10
	EEquipOper_EEQUIPOPER_OFFTEMP     EEquipOper = 11
	EEquipOper_EEQUIPOPER_PUTBARROW   EEquipOper = 12
	EEquipOper_EEQUIPOPER_OFFBARROW   EEquipOper = 13
	EEquipOper_EEQUIPOPER_DRESSUP_ON  EEquipOper = 14
	EEquipOper_EEQUIPOPER_DRESSUP_OFF EEquipOper = 15
	EEquipOper_EEQUIPOPER_MAX         EEquipOper = 16
)

// Enum value maps for EEquipOper.
var (
	EEquipOper_name = map[int32]string{
		0:  "EEQUIPOPER_MIN",
		1:  "EEQUIPOPER_ON",
		2:  "EEQUIPOPER_OFF",
		3:  "EEQUIPOPER_PUTFASHION",
		4:  "EEQUIPOPER_OFFFASHION",
		5:  "EEQUIPOPER_PUTSTORE",
		6:  "EEQUIPOPER_OFFSTORE",
		7:  "EEQUIPOPER_OFFALL",
		8:  "EEQUIPOPER_OFFPOS",
		9:  "EEQUIPOPER_PUTPSTORE",
		10: "EEQUIPOPER_OFFPSTORE",
		11: "EEQUIPOPER_OFFTEMP",
		12: "EEQUIPOPER_PUTBARROW",
		13: "EEQUIPOPER_OFFBARROW",
		14: "EEQUIPOPER_DRESSUP_ON",
		15: "EEQUIPOPER_DRESSUP_OFF",
		16: "EEQUIPOPER_MAX",
	}
	EEquipOper_value = map[string]int32{
		"EEQUIPOPER_MIN":         0,
		"EEQUIPOPER_ON":          1,
		"EEQUIPOPER_OFF":         2,
		"EEQUIPOPER_PUTFASHION":  3,
		"EEQUIPOPER_OFFFASHION":  4,
		"EEQUIPOPER_PUTSTORE":    5,
		"EEQUIPOPER_OFFSTORE":    6,
		"EEQUIPOPER_OFFALL":      7,
		"EEQUIPOPER_OFFPOS":      8,
		"EEQUIPOPER_PUTPSTORE":   9,
		"EEQUIPOPER_OFFPSTORE":   10,
		"EEQUIPOPER_OFFTEMP":     11,
		"EEQUIPOPER_PUTBARROW":   12,
		"EEQUIPOPER_OFFBARROW":   13,
		"EEQUIPOPER_DRESSUP_ON":  14,
		"EEQUIPOPER_DRESSUP_OFF": 15,
		"EEQUIPOPER_MAX":         16,
	}
)

func (x EEquipOper) Enum() *EEquipOper {
	p := new(EEquipOper)
	*p = x
	return p
}

func (x EEquipOper) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEquipOper) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[10].Descriptor()
}

func (EEquipOper) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[10]
}

func (x EEquipOper) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEquipOper) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEquipOper(num)
	return nil
}

// Deprecated: Use EEquipOper.Descriptor instead.
func (EEquipOper) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{10}
}

type EEquipPos int32

const (
	EEquipPos_EEQUIPPOS_MIN           EEquipPos = 0
	EEquipPos_EEQUIPPOS_WEAPON        EEquipPos = 7
	EEquipPos_EEQUIPPOS_ARMOUR        EEquipPos = 2
	EEquipPos_EEQUIPPOS_SHIELD        EEquipPos = 1
	EEquipPos_EEQUIPPOS_ROBE          EEquipPos = 3
	EEquipPos_EEQUIPPOS_SHOES         EEquipPos = 4
	EEquipPos_EEQUIPPOS_ACCESSORY1    EEquipPos = 5
	EEquipPos_EEQUIPPOS_ACCESSORY2    EEquipPos = 6
	EEquipPos_EEQUIPPOS_HEAD          EEquipPos = 8
	EEquipPos_EEQUIPPOS_BACK          EEquipPos = 11
	EEquipPos_EEQUIPPOS_FACE          EEquipPos = 9
	EEquipPos_EEQUIPPOS_TAIL          EEquipPos = 12
	EEquipPos_EEQUIPPOS_MOUNT         EEquipPos = 13
	EEquipPos_EEQUIPPOS_MOUTH         EEquipPos = 10
	EEquipPos_EEQUIPPOS_BARROW        EEquipPos = 14
	EEquipPos_EEQUIPPOS_ARTIFACT      EEquipPos = 15
	EEquipPos_EEQUIPPOS_ARTIFACT_HEAD EEquipPos = 16
	EEquipPos_EEQUIPPOS_ARTIFACT_BACK EEquipPos = 17
	EEquipPos_EEQUIPPOS_MAX           EEquipPos = 18
)

// Enum value maps for EEquipPos.
var (
	EEquipPos_name = map[int32]string{
		0:  "EEQUIPPOS_MIN",
		7:  "EEQUIPPOS_WEAPON",
		2:  "EEQUIPPOS_ARMOUR",
		1:  "EEQUIPPOS_SHIELD",
		3:  "EEQUIPPOS_ROBE",
		4:  "EEQUIPPOS_SHOES",
		5:  "EEQUIPPOS_ACCESSORY1",
		6:  "EEQUIPPOS_ACCESSORY2",
		8:  "EEQUIPPOS_HEAD",
		11: "EEQUIPPOS_BACK",
		9:  "EEQUIPPOS_FACE",
		12: "EEQUIPPOS_TAIL",
		13: "EEQUIPPOS_MOUNT",
		10: "EEQUIPPOS_MOUTH",
		14: "EEQUIPPOS_BARROW",
		15: "EEQUIPPOS_ARTIFACT",
		16: "EEQUIPPOS_ARTIFACT_HEAD",
		17: "EEQUIPPOS_ARTIFACT_BACK",
		18: "EEQUIPPOS_MAX",
	}
	EEquipPos_value = map[string]int32{
		"EEQUIPPOS_MIN":           0,
		"EEQUIPPOS_WEAPON":        7,
		"EEQUIPPOS_ARMOUR":        2,
		"EEQUIPPOS_SHIELD":        1,
		"EEQUIPPOS_ROBE":          3,
		"EEQUIPPOS_SHOES":         4,
		"EEQUIPPOS_ACCESSORY1":    5,
		"EEQUIPPOS_ACCESSORY2":    6,
		"EEQUIPPOS_HEAD":          8,
		"EEQUIPPOS_BACK":          11,
		"EEQUIPPOS_FACE":          9,
		"EEQUIPPOS_TAIL":          12,
		"EEQUIPPOS_MOUNT":         13,
		"EEQUIPPOS_MOUTH":         10,
		"EEQUIPPOS_BARROW":        14,
		"EEQUIPPOS_ARTIFACT":      15,
		"EEQUIPPOS_ARTIFACT_HEAD": 16,
		"EEQUIPPOS_ARTIFACT_BACK": 17,
		"EEQUIPPOS_MAX":           18,
	}
)

func (x EEquipPos) Enum() *EEquipPos {
	p := new(EEquipPos)
	*p = x
	return p
}

func (x EEquipPos) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEquipPos) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[11].Descriptor()
}

func (EEquipPos) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[11]
}

func (x EEquipPos) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEquipPos) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEquipPos(num)
	return nil
}

// Deprecated: Use EEquipPos.Descriptor instead.
func (EEquipPos) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{11}
}

type EStrengthResult int32

const (
	EStrengthResult_ESTRENGTHRESULT_MIN        EStrengthResult = 0
	EStrengthResult_ESTRENGTHRESULT_SUCCESS    EStrengthResult = 1
	EStrengthResult_ESTRENGTHRESULT_NOMATERIAL EStrengthResult = 2
	EStrengthResult_ESTRENGTHRESULT_MAXLV      EStrengthResult = 3
)

// Enum value maps for EStrengthResult.
var (
	EStrengthResult_name = map[int32]string{
		0: "ESTRENGTHRESULT_MIN",
		1: "ESTRENGTHRESULT_SUCCESS",
		2: "ESTRENGTHRESULT_NOMATERIAL",
		3: "ESTRENGTHRESULT_MAXLV",
	}
	EStrengthResult_value = map[string]int32{
		"ESTRENGTHRESULT_MIN":        0,
		"ESTRENGTHRESULT_SUCCESS":    1,
		"ESTRENGTHRESULT_NOMATERIAL": 2,
		"ESTRENGTHRESULT_MAXLV":      3,
	}
)

func (x EStrengthResult) Enum() *EStrengthResult {
	p := new(EStrengthResult)
	*p = x
	return p
}

func (x EStrengthResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStrengthResult) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[12].Descriptor()
}

func (EStrengthResult) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[12]
}

func (x EStrengthResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStrengthResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStrengthResult(num)
	return nil
}

// Deprecated: Use EStrengthResult.Descriptor instead.
func (EStrengthResult) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{12}
}

type EStrengthType int32

const (
	EStrengthType_ESTRENGTHTYPE_MIN    EStrengthType = 0
	EStrengthType_ESTRENGTHTYPE_NORMAL EStrengthType = 1
	EStrengthType_ESTRENGTHTYPE_GUILD  EStrengthType = 2
	EStrengthType_ESTRENGTHTYPE_MAX    EStrengthType = 3
)

// Enum value maps for EStrengthType.
var (
	EStrengthType_name = map[int32]string{
		0: "ESTRENGTHTYPE_MIN",
		1: "ESTRENGTHTYPE_NORMAL",
		2: "ESTRENGTHTYPE_GUILD",
		3: "ESTRENGTHTYPE_MAX",
	}
	EStrengthType_value = map[string]int32{
		"ESTRENGTHTYPE_MIN":    0,
		"ESTRENGTHTYPE_NORMAL": 1,
		"ESTRENGTHTYPE_GUILD":  2,
		"ESTRENGTHTYPE_MAX":    3,
	}
)

func (x EStrengthType) Enum() *EStrengthType {
	p := new(EStrengthType)
	*p = x
	return p
}

func (x EStrengthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStrengthType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[13].Descriptor()
}

func (EStrengthType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[13]
}

func (x EStrengthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStrengthType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStrengthType(num)
	return nil
}

// Deprecated: Use EStrengthType.Descriptor instead.
func (EStrengthType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{13}
}

type EProduceType int32

const (
	EProduceType_EPRODUCETYPE_MIN    EProduceType = 1
	EProduceType_EPRODUCETYPE_HEAD   EProduceType = 2
	EProduceType_EPRODUCETYPE_EQUIP  EProduceType = 3
	EProduceType_EPRODUCETYPE_TRADER EProduceType = 4
	EProduceType_EPRODUCETYPE_MAX    EProduceType = 5
)

// Enum value maps for EProduceType.
var (
	EProduceType_name = map[int32]string{
		1: "EPRODUCETYPE_MIN",
		2: "EPRODUCETYPE_HEAD",
		3: "EPRODUCETYPE_EQUIP",
		4: "EPRODUCETYPE_TRADER",
		5: "EPRODUCETYPE_MAX",
	}
	EProduceType_value = map[string]int32{
		"EPRODUCETYPE_MIN":    1,
		"EPRODUCETYPE_HEAD":   2,
		"EPRODUCETYPE_EQUIP":  3,
		"EPRODUCETYPE_TRADER": 4,
		"EPRODUCETYPE_MAX":    5,
	}
)

func (x EProduceType) Enum() *EProduceType {
	p := new(EProduceType)
	*p = x
	return p
}

func (x EProduceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProduceType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[14].Descriptor()
}

func (EProduceType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[14]
}

func (x EProduceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EProduceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EProduceType(num)
	return nil
}

// Deprecated: Use EProduceType.Descriptor instead.
func (EProduceType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{14}
}

type ERefineResult int32

const (
	ERefineResult_EREFINERESULT_MIN         ERefineResult = 0
	ERefineResult_EREFINERESULT_SUCCESS     ERefineResult = 1
	ERefineResult_EREFINERESULT_FAILSTAY    ERefineResult = 2
	ERefineResult_EREFINERESULT_FAILBACK    ERefineResult = 3
	ERefineResult_EREFINERESULT_FAILSTAYDAM ERefineResult = 4
	ERefineResult_EREFINERESULT_FAILBACKDAM ERefineResult = 5
	ERefineResult_EREFINERESULT_MAX         ERefineResult = 6
)

// Enum value maps for ERefineResult.
var (
	ERefineResult_name = map[int32]string{
		0: "EREFINERESULT_MIN",
		1: "EREFINERESULT_SUCCESS",
		2: "EREFINERESULT_FAILSTAY",
		3: "EREFINERESULT_FAILBACK",
		4: "EREFINERESULT_FAILSTAYDAM",
		5: "EREFINERESULT_FAILBACKDAM",
		6: "EREFINERESULT_MAX",
	}
	ERefineResult_value = map[string]int32{
		"EREFINERESULT_MIN":         0,
		"EREFINERESULT_SUCCESS":     1,
		"EREFINERESULT_FAILSTAY":    2,
		"EREFINERESULT_FAILBACK":    3,
		"EREFINERESULT_FAILSTAYDAM": 4,
		"EREFINERESULT_FAILBACKDAM": 5,
		"EREFINERESULT_MAX":         6,
	}
)

func (x ERefineResult) Enum() *ERefineResult {
	p := new(ERefineResult)
	*p = x
	return p
}

func (x ERefineResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERefineResult) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[15].Descriptor()
}

func (ERefineResult) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[15]
}

func (x ERefineResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERefineResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERefineResult(num)
	return nil
}

// Deprecated: Use ERefineResult.Descriptor instead.
func (ERefineResult) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{15}
}

type EDecomposeResult int32

const (
	EDecomposeResult_EDECOMPOSERESULT_MIN             EDecomposeResult = 0
	EDecomposeResult_EDECOMPOSERESULT_FAIL            EDecomposeResult = 1
	EDecomposeResult_EDECOMPOSERESULT_SUCCESS         EDecomposeResult = 2
	EDecomposeResult_EDECOMPOSERESULT_SUCCESS_BIG     EDecomposeResult = 3
	EDecomposeResult_EDECOMPOSERESULT_SUCCESS_SBIG    EDecomposeResult = 4
	EDecomposeResult_EDECOMPOSERESULT_SUCCESS_FANTASY EDecomposeResult = 5
	EDecomposeResult_EDECOMPOSERESULT_MAX             EDecomposeResult = 6
)

// Enum value maps for EDecomposeResult.
var (
	EDecomposeResult_name = map[int32]string{
		0: "EDECOMPOSERESULT_MIN",
		1: "EDECOMPOSERESULT_FAIL",
		2: "EDECOMPOSERESULT_SUCCESS",
		3: "EDECOMPOSERESULT_SUCCESS_BIG",
		4: "EDECOMPOSERESULT_SUCCESS_SBIG",
		5: "EDECOMPOSERESULT_SUCCESS_FANTASY",
		6: "EDECOMPOSERESULT_MAX",
	}
	EDecomposeResult_value = map[string]int32{
		"EDECOMPOSERESULT_MIN":             0,
		"EDECOMPOSERESULT_FAIL":            1,
		"EDECOMPOSERESULT_SUCCESS":         2,
		"EDECOMPOSERESULT_SUCCESS_BIG":     3,
		"EDECOMPOSERESULT_SUCCESS_SBIG":    4,
		"EDECOMPOSERESULT_SUCCESS_FANTASY": 5,
		"EDECOMPOSERESULT_MAX":             6,
	}
)

func (x EDecomposeResult) Enum() *EDecomposeResult {
	p := new(EDecomposeResult)
	*p = x
	return p
}

func (x EDecomposeResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDecomposeResult) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[16].Descriptor()
}

func (EDecomposeResult) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[16]
}

func (x EDecomposeResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDecomposeResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDecomposeResult(num)
	return nil
}

// Deprecated: Use EDecomposeResult.Descriptor instead.
func (EDecomposeResult) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{16}
}

type ECardOper int32

const (
	ECardOper_ECARDOPER_MIN      ECardOper = 0
	ECardOper_ECARDOPER_EQUIPON  ECardOper = 1
	ECardOper_ECARDOPER_EQUIPOFF ECardOper = 2
	ECardOper_ECARDOPER_MAX      ECardOper = 3
)

// Enum value maps for ECardOper.
var (
	ECardOper_name = map[int32]string{
		0: "ECARDOPER_MIN",
		1: "ECARDOPER_EQUIPON",
		2: "ECARDOPER_EQUIPOFF",
		3: "ECARDOPER_MAX",
	}
	ECardOper_value = map[string]int32{
		"ECARDOPER_MIN":      0,
		"ECARDOPER_EQUIPON":  1,
		"ECARDOPER_EQUIPOFF": 2,
		"ECARDOPER_MAX":      3,
	}
)

func (x ECardOper) Enum() *ECardOper {
	p := new(ECardOper)
	*p = x
	return p
}

func (x ECardOper) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECardOper) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[17].Descriptor()
}

func (ECardOper) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[17]
}

func (x ECardOper) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECardOper) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECardOper(num)
	return nil
}

// Deprecated: Use ECardOper.Descriptor instead.
func (ECardOper) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{17}
}

type ETradeType int32

const (
	ETradeType_ETRADETYPE_ALL   ETradeType = 0
	ETradeType_ETRADETYPE_TRADE ETradeType = 1
	ETradeType_ETRADETYPE_BOOTH ETradeType = 2
)

// Enum value maps for ETradeType.
var (
	ETradeType_name = map[int32]string{
		0: "ETRADETYPE_ALL",
		1: "ETRADETYPE_TRADE",
		2: "ETRADETYPE_BOOTH",
	}
	ETradeType_value = map[string]int32{
		"ETRADETYPE_ALL":   0,
		"ETRADETYPE_TRADE": 1,
		"ETRADETYPE_BOOTH": 2,
	}
)

func (x ETradeType) Enum() *ETradeType {
	p := new(ETradeType)
	*p = x
	return p
}

func (x ETradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[18].Descriptor()
}

func (ETradeType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[18]
}

func (x ETradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETradeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETradeType(num)
	return nil
}

// Deprecated: Use ETradeType.Descriptor instead.
func (ETradeType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{18}
}

type EExchangeType int32

const (
	EExchangeType_EEXCHANGETYPE_MIN      EExchangeType = 0
	EExchangeType_EEXCHANGETYPE_EXCHANGE EExchangeType = 1
	EExchangeType_EEXCHANGETYPE_LEVELUP  EExchangeType = 2
	EExchangeType_EEXCHANGETYPE_MAX      EExchangeType = 3
)

// Enum value maps for EExchangeType.
var (
	EExchangeType_name = map[int32]string{
		0: "EEXCHANGETYPE_MIN",
		1: "EEXCHANGETYPE_EXCHANGE",
		2: "EEXCHANGETYPE_LEVELUP",
		3: "EEXCHANGETYPE_MAX",
	}
	EExchangeType_value = map[string]int32{
		"EEXCHANGETYPE_MIN":      0,
		"EEXCHANGETYPE_EXCHANGE": 1,
		"EEXCHANGETYPE_LEVELUP":  2,
		"EEXCHANGETYPE_MAX":      3,
	}
)

func (x EExchangeType) Enum() *EExchangeType {
	p := new(EExchangeType)
	*p = x
	return p
}

func (x EExchangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EExchangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[19].Descriptor()
}

func (EExchangeType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[19]
}

func (x EExchangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EExchangeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EExchangeType(num)
	return nil
}

// Deprecated: Use EExchangeType.Descriptor instead.
func (EExchangeType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{19}
}

type EExchangeCardType int32

const (
	EExchangeCardType_EEXCHANGECARDTYPE_DRAW      EExchangeCardType = 1
	EExchangeCardType_EEXCHANGECARDTYPE_COMPOSE   EExchangeCardType = 2
	EExchangeCardType_EEXCHANGECARDTYPE_DECOMPOSE EExchangeCardType = 3
)

// Enum value maps for EExchangeCardType.
var (
	EExchangeCardType_name = map[int32]string{
		1: "EEXCHANGECARDTYPE_DRAW",
		2: "EEXCHANGECARDTYPE_COMPOSE",
		3: "EEXCHANGECARDTYPE_DECOMPOSE",
	}
	EExchangeCardType_value = map[string]int32{
		"EEXCHANGECARDTYPE_DRAW":      1,
		"EEXCHANGECARDTYPE_COMPOSE":   2,
		"EEXCHANGECARDTYPE_DECOMPOSE": 3,
	}
)

func (x EExchangeCardType) Enum() *EExchangeCardType {
	p := new(EExchangeCardType)
	*p = x
	return p
}

func (x EExchangeCardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EExchangeCardType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[20].Descriptor()
}

func (EExchangeCardType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[20]
}

func (x EExchangeCardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EExchangeCardType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EExchangeCardType(num)
	return nil
}

// Deprecated: Use EExchangeCardType.Descriptor instead.
func (EExchangeCardType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{20}
}

type ELotteryType int32

const (
	ELotteryType_ELotteryType_Min          ELotteryType = 0
	ELotteryType_ELotteryType_Head         ELotteryType = 1
	ELotteryType_ELotteryType_Equip        ELotteryType = 2
	ELotteryType_ELotteryType_Card         ELotteryType = 3
	ELotteryType_ELotteryType_CatLitterBox ELotteryType = 4
	ELotteryType_ELotteryType_Magic        ELotteryType = 5
	ELotteryType_ELotteryType_Max          ELotteryType = 6
)

// Enum value maps for ELotteryType.
var (
	ELotteryType_name = map[int32]string{
		0: "ELotteryType_Min",
		1: "ELotteryType_Head",
		2: "ELotteryType_Equip",
		3: "ELotteryType_Card",
		4: "ELotteryType_CatLitterBox",
		5: "ELotteryType_Magic",
		6: "ELotteryType_Max",
	}
	ELotteryType_value = map[string]int32{
		"ELotteryType_Min":          0,
		"ELotteryType_Head":         1,
		"ELotteryType_Equip":        2,
		"ELotteryType_Card":         3,
		"ELotteryType_CatLitterBox": 4,
		"ELotteryType_Magic":        5,
		"ELotteryType_Max":          6,
	}
)

func (x ELotteryType) Enum() *ELotteryType {
	p := new(ELotteryType)
	*p = x
	return p
}

func (x ELotteryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELotteryType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[21].Descriptor()
}

func (ELotteryType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[21]
}

func (x ELotteryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELotteryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELotteryType(num)
	return nil
}

// Deprecated: Use ELotteryType.Descriptor instead.
func (ELotteryType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{21}
}

type EQuotaType int32

const (
	EQuotaType_EQuotaType_G_Charge       EQuotaType = 1
	EQuotaType_EQuotaType_C_Give         EQuotaType = 2
	EQuotaType_EQuotaType_C_Auction      EQuotaType = 3
	EQuotaType_EQuotaType_G_Auction      EQuotaType = 4
	EQuotaType_EQuotaType_C_Lottery      EQuotaType = 5
	EQuotaType_EQuotaType_C_GuildBox     EQuotaType = 6
	EQuotaType_EQuotaType_C_WeddingDress EQuotaType = 7
	EQuotaType_EQuotaType_L_Booth        EQuotaType = 8
	EQuotaType_EQuotaType_U_Booth        EQuotaType = 9
	EQuotaType_EQuotaType_C_Booth        EQuotaType = 10
	EQuotaType_EQuotaType_L_Give_Trade   EQuotaType = 11
	EQuotaType_EQuotaType_U_Give_Trade   EQuotaType = 12
	EQuotaType_EQuotaType_C_Give_Trade   EQuotaType = 13
)

// Enum value maps for EQuotaType.
var (
	EQuotaType_name = map[int32]string{
		1:  "EQuotaType_G_Charge",
		2:  "EQuotaType_C_Give",
		3:  "EQuotaType_C_Auction",
		4:  "EQuotaType_G_Auction",
		5:  "EQuotaType_C_Lottery",
		6:  "EQuotaType_C_GuildBox",
		7:  "EQuotaType_C_WeddingDress",
		8:  "EQuotaType_L_Booth",
		9:  "EQuotaType_U_Booth",
		10: "EQuotaType_C_Booth",
		11: "EQuotaType_L_Give_Trade",
		12: "EQuotaType_U_Give_Trade",
		13: "EQuotaType_C_Give_Trade",
	}
	EQuotaType_value = map[string]int32{
		"EQuotaType_G_Charge":       1,
		"EQuotaType_C_Give":         2,
		"EQuotaType_C_Auction":      3,
		"EQuotaType_G_Auction":      4,
		"EQuotaType_C_Lottery":      5,
		"EQuotaType_C_GuildBox":     6,
		"EQuotaType_C_WeddingDress": 7,
		"EQuotaType_L_Booth":        8,
		"EQuotaType_U_Booth":        9,
		"EQuotaType_C_Booth":        10,
		"EQuotaType_L_Give_Trade":   11,
		"EQuotaType_U_Give_Trade":   12,
		"EQuotaType_C_Give_Trade":   13,
	}
)

func (x EQuotaType) Enum() *EQuotaType {
	p := new(EQuotaType)
	*p = x
	return p
}

func (x EQuotaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQuotaType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneItem_proto_enumTypes[22].Descriptor()
}

func (EQuotaType) Type() protoreflect.EnumType {
	return &file_SceneItem_proto_enumTypes[22]
}

func (x EQuotaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EQuotaType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EQuotaType(num)
	return nil
}

// Deprecated: Use EQuotaType.Descriptor instead.
func (EQuotaType) EnumDescriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{22}
}

type ItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid        *string       `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	Id          *uint32       `protobuf:"varint,2,opt,name=id,def=0" json:"id,omitempty"`
	Count       *uint32       `protobuf:"varint,3,opt,name=count,def=1" json:"count,omitempty"`
	Index       *uint32       `protobuf:"varint,4,opt,name=index,def=0" json:"index,omitempty"`
	Createtime  *uint32       `protobuf:"varint,5,opt,name=createtime,def=0" json:"createtime,omitempty"`
	Cd          *uint64       `protobuf:"varint,6,opt,name=cd,def=0" json:"cd,omitempty"`
	Type        *EItemType    `protobuf:"varint,7,opt,name=type,enum=Cmd.EItemType,def=0" json:"type,omitempty"`
	Bind        *EBindType    `protobuf:"varint,8,opt,name=bind,enum=Cmd.EBindType,def=0" json:"bind,omitempty"`
	Expire      *EExpireType  `protobuf:"varint,9,opt,name=expire,enum=Cmd.EExpireType,def=0" json:"expire,omitempty"`
	Quality     *EQualityType `protobuf:"varint,10,opt,name=quality,enum=Cmd.EQualityType,def=0" json:"quality,omitempty"`
	EquipType   *EEquipType   `protobuf:"varint,11,opt,name=equipType,enum=Cmd.EEquipType,def=0" json:"equipType,omitempty"`
	Source      *ESource      `protobuf:"varint,12,opt,name=source,enum=Cmd.ESource,def=1" json:"source,omitempty"`
	Isnew       *bool         `protobuf:"varint,13,opt,name=isnew,def=0" json:"isnew,omitempty"`
	Maxcardslot *uint32       `protobuf:"varint,14,opt,name=maxcardslot,def=0" json:"maxcardslot,omitempty"`
	Ishint      *bool         `protobuf:"varint,15,opt,name=ishint,def=0" json:"ishint,omitempty"`
	Isactive    *bool         `protobuf:"varint,16,opt,name=isactive,def=0" json:"isactive,omitempty"`
	SourceNpc   *uint32       `protobuf:"varint,17,opt,name=source_npc,json=sourceNpc,def=0" json:"source_npc,omitempty"`
	Refinelv    *uint32       `protobuf:"varint,18,opt,name=refinelv,def=0" json:"refinelv,omitempty"`
	Chargemoney *uint32       `protobuf:"varint,19,opt,name=chargemoney,def=0" json:"chargemoney,omitempty"`
	Overtime    *uint32       `protobuf:"varint,20,opt,name=overtime,def=0" json:"overtime,omitempty"`
	Quota       *uint64       `protobuf:"varint,21,opt,name=quota,def=0" json:"quota,omitempty"`
}

// Default values for ItemInfo fields.
const (
	Default_ItemInfo_Id          = uint32(0)
	Default_ItemInfo_Count       = uint32(1)
	Default_ItemInfo_Index       = uint32(0)
	Default_ItemInfo_Createtime  = uint32(0)
	Default_ItemInfo_Cd          = uint64(0)
	Default_ItemInfo_Type        = EItemType_EITEMTYPE_MIN
	Default_ItemInfo_Bind        = EBindType_EBINDTYPE_MIN
	Default_ItemInfo_Expire      = EExpireType_EEXPIRETYPE_MIN
	Default_ItemInfo_Quality     = EQualityType_EQUALITYTYPE_MIN
	Default_ItemInfo_EquipType   = EEquipType_EEQUIPTYPE_MIN
	Default_ItemInfo_Source      = ESource_ESOURCE_NORMAL
	Default_ItemInfo_Isnew       = bool(false)
	Default_ItemInfo_Maxcardslot = uint32(0)
	Default_ItemInfo_Ishint      = bool(false)
	Default_ItemInfo_Isactive    = bool(false)
	Default_ItemInfo_SourceNpc   = uint32(0)
	Default_ItemInfo_Refinelv    = uint32(0)
	Default_ItemInfo_Chargemoney = uint32(0)
	Default_ItemInfo_Overtime    = uint32(0)
	Default_ItemInfo_Quota       = uint64(0)
)

func (x *ItemInfo) Reset() {
	*x = ItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemInfo) ProtoMessage() {}

func (x *ItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemInfo.ProtoReflect.Descriptor instead.
func (*ItemInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{0}
}

func (x *ItemInfo) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *ItemInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_ItemInfo_Id
}

func (x *ItemInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_ItemInfo_Count
}

func (x *ItemInfo) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_ItemInfo_Index
}

func (x *ItemInfo) GetCreatetime() uint32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return Default_ItemInfo_Createtime
}

func (x *ItemInfo) GetCd() uint64 {
	if x != nil && x.Cd != nil {
		return *x.Cd
	}
	return Default_ItemInfo_Cd
}

func (x *ItemInfo) GetType() EItemType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ItemInfo_Type
}

func (x *ItemInfo) GetBind() EBindType {
	if x != nil && x.Bind != nil {
		return *x.Bind
	}
	return Default_ItemInfo_Bind
}

func (x *ItemInfo) GetExpire() EExpireType {
	if x != nil && x.Expire != nil {
		return *x.Expire
	}
	return Default_ItemInfo_Expire
}

func (x *ItemInfo) GetQuality() EQualityType {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return Default_ItemInfo_Quality
}

func (x *ItemInfo) GetEquipType() EEquipType {
	if x != nil && x.EquipType != nil {
		return *x.EquipType
	}
	return Default_ItemInfo_EquipType
}

func (x *ItemInfo) GetSource() ESource {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return Default_ItemInfo_Source
}

func (x *ItemInfo) GetIsnew() bool {
	if x != nil && x.Isnew != nil {
		return *x.Isnew
	}
	return Default_ItemInfo_Isnew
}

func (x *ItemInfo) GetMaxcardslot() uint32 {
	if x != nil && x.Maxcardslot != nil {
		return *x.Maxcardslot
	}
	return Default_ItemInfo_Maxcardslot
}

func (x *ItemInfo) GetIshint() bool {
	if x != nil && x.Ishint != nil {
		return *x.Ishint
	}
	return Default_ItemInfo_Ishint
}

func (x *ItemInfo) GetIsactive() bool {
	if x != nil && x.Isactive != nil {
		return *x.Isactive
	}
	return Default_ItemInfo_Isactive
}

func (x *ItemInfo) GetSourceNpc() uint32 {
	if x != nil && x.SourceNpc != nil {
		return *x.SourceNpc
	}
	return Default_ItemInfo_SourceNpc
}

func (x *ItemInfo) GetRefinelv() uint32 {
	if x != nil && x.Refinelv != nil {
		return *x.Refinelv
	}
	return Default_ItemInfo_Refinelv
}

func (x *ItemInfo) GetChargemoney() uint32 {
	if x != nil && x.Chargemoney != nil {
		return *x.Chargemoney
	}
	return Default_ItemInfo_Chargemoney
}

func (x *ItemInfo) GetOvertime() uint32 {
	if x != nil && x.Overtime != nil {
		return *x.Overtime
	}
	return Default_ItemInfo_Overtime
}

func (x *ItemInfo) GetQuota() uint64 {
	if x != nil && x.Quota != nil {
		return *x.Quota
	}
	return Default_ItemInfo_Quota
}

type RefineCompose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Num *uint32 `protobuf:"varint,2,opt,name=num,def=0" json:"num,omitempty"`
}

// Default values for RefineCompose fields.
const (
	Default_RefineCompose_Id  = uint32(0)
	Default_RefineCompose_Num = uint32(0)
)

func (x *RefineCompose) Reset() {
	*x = RefineCompose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefineCompose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefineCompose) ProtoMessage() {}

func (x *RefineCompose) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefineCompose.ProtoReflect.Descriptor instead.
func (*RefineCompose) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{1}
}

func (x *RefineCompose) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_RefineCompose_Id
}

func (x *RefineCompose) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return Default_RefineCompose_Num
}

type EquipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strengthlv      *uint32          `protobuf:"varint,1,opt,name=strengthlv,def=0" json:"strengthlv,omitempty"`
	Refinelv        *uint32          `protobuf:"varint,2,opt,name=refinelv,def=0" json:"refinelv,omitempty"`
	StrengthCost    *uint32          `protobuf:"varint,3,opt,name=strengthCost,def=0" json:"strengthCost,omitempty"`
	RefineCompose   []*RefineCompose `protobuf:"bytes,4,rep,name=refineCompose" json:"refineCompose,omitempty"`
	Cardslot        *uint32          `protobuf:"varint,5,opt,name=cardslot,def=0" json:"cardslot,omitempty"`
	Buffid          []uint32         `protobuf:"varint,6,rep,name=buffid" json:"buffid,omitempty"`
	Damage          *bool            `protobuf:"varint,7,opt,name=damage,def=0" json:"damage,omitempty"`
	Lv              *uint32          `protobuf:"varint,8,opt,name=lv,def=0" json:"lv,omitempty"`
	Color           *uint32          `protobuf:"varint,9,opt,name=color,def=0" json:"color,omitempty"`
	Breakstarttime  *uint32          `protobuf:"varint,10,opt,name=breakstarttime,def=0" json:"breakstarttime,omitempty"`
	Breakendtime    *uint32          `protobuf:"varint,11,opt,name=breakendtime,def=0" json:"breakendtime,omitempty"`
	Strengthlv2     *uint32          `protobuf:"varint,12,opt,name=strengthlv2,def=0" json:"strengthlv2,omitempty"`
	Strengthlv2Cost []*ItemInfo      `protobuf:"bytes,13,rep,name=strengthlv2cost" json:"strengthlv2cost,omitempty"`
}

// Default values for EquipData fields.
const (
	Default_EquipData_Strengthlv     = uint32(0)
	Default_EquipData_Refinelv       = uint32(0)
	Default_EquipData_StrengthCost   = uint32(0)
	Default_EquipData_Cardslot       = uint32(0)
	Default_EquipData_Damage         = bool(false)
	Default_EquipData_Lv             = uint32(0)
	Default_EquipData_Color          = uint32(0)
	Default_EquipData_Breakstarttime = uint32(0)
	Default_EquipData_Breakendtime   = uint32(0)
	Default_EquipData_Strengthlv2    = uint32(0)
)

func (x *EquipData) Reset() {
	*x = EquipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipData) ProtoMessage() {}

func (x *EquipData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipData.ProtoReflect.Descriptor instead.
func (*EquipData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{2}
}

func (x *EquipData) GetStrengthlv() uint32 {
	if x != nil && x.Strengthlv != nil {
		return *x.Strengthlv
	}
	return Default_EquipData_Strengthlv
}

func (x *EquipData) GetRefinelv() uint32 {
	if x != nil && x.Refinelv != nil {
		return *x.Refinelv
	}
	return Default_EquipData_Refinelv
}

func (x *EquipData) GetStrengthCost() uint32 {
	if x != nil && x.StrengthCost != nil {
		return *x.StrengthCost
	}
	return Default_EquipData_StrengthCost
}

func (x *EquipData) GetRefineCompose() []*RefineCompose {
	if x != nil {
		return x.RefineCompose
	}
	return nil
}

func (x *EquipData) GetCardslot() uint32 {
	if x != nil && x.Cardslot != nil {
		return *x.Cardslot
	}
	return Default_EquipData_Cardslot
}

func (x *EquipData) GetBuffid() []uint32 {
	if x != nil {
		return x.Buffid
	}
	return nil
}

func (x *EquipData) GetDamage() bool {
	if x != nil && x.Damage != nil {
		return *x.Damage
	}
	return Default_EquipData_Damage
}

func (x *EquipData) GetLv() uint32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return Default_EquipData_Lv
}

func (x *EquipData) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return Default_EquipData_Color
}

func (x *EquipData) GetBreakstarttime() uint32 {
	if x != nil && x.Breakstarttime != nil {
		return *x.Breakstarttime
	}
	return Default_EquipData_Breakstarttime
}

func (x *EquipData) GetBreakendtime() uint32 {
	if x != nil && x.Breakendtime != nil {
		return *x.Breakendtime
	}
	return Default_EquipData_Breakendtime
}

func (x *EquipData) GetStrengthlv2() uint32 {
	if x != nil && x.Strengthlv2 != nil {
		return *x.Strengthlv2
	}
	return Default_EquipData_Strengthlv2
}

func (x *EquipData) GetStrengthlv2Cost() []*ItemInfo {
	if x != nil {
		return x.Strengthlv2Cost
	}
	return nil
}

type CardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid *string `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	Id   *uint32 `protobuf:"varint,2,opt,name=id,def=0" json:"id,omitempty"`
	Pos  *uint32 `protobuf:"varint,3,opt,name=pos,def=0" json:"pos,omitempty"`
}

// Default values for CardData fields.
const (
	Default_CardData_Id  = uint32(0)
	Default_CardData_Pos = uint32(0)
)

func (x *CardData) Reset() {
	*x = CardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardData) ProtoMessage() {}

func (x *CardData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardData.ProtoReflect.Descriptor instead.
func (*CardData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{3}
}

func (x *CardData) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *CardData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CardData_Id
}

func (x *CardData) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_CardData_Pos
}

type EnchantAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *EAttrType `protobuf:"varint,1,opt,name=type,enum=Cmd.EAttrType,def=0" json:"type,omitempty"`
	Value *uint32    `protobuf:"varint,2,opt,name=value,def=0" json:"value,omitempty"`
}

// Default values for EnchantAttr fields.
const (
	Default_EnchantAttr_Type  = EAttrType_EATTRTYPE_MIN
	Default_EnchantAttr_Value = uint32(0)
)

func (x *EnchantAttr) Reset() {
	*x = EnchantAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantAttr) ProtoMessage() {}

func (x *EnchantAttr) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantAttr.ProtoReflect.Descriptor instead.
func (*EnchantAttr) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{4}
}

func (x *EnchantAttr) GetType() EAttrType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_EnchantAttr_Type
}

func (x *EnchantAttr) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_EnchantAttr_Value
}

type EnchantExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configid *uint32 `protobuf:"varint,1,opt,name=configid,def=0" json:"configid,omitempty"`
	Buffid   *uint32 `protobuf:"varint,2,opt,name=buffid,def=0" json:"buffid,omitempty"`
}

// Default values for EnchantExtra fields.
const (
	Default_EnchantExtra_Configid = uint32(0)
	Default_EnchantExtra_Buffid   = uint32(0)
)

func (x *EnchantExtra) Reset() {
	*x = EnchantExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantExtra) ProtoMessage() {}

func (x *EnchantExtra) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantExtra.ProtoReflect.Descriptor instead.
func (*EnchantExtra) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{5}
}

func (x *EnchantExtra) GetConfigid() uint32 {
	if x != nil && x.Configid != nil {
		return *x.Configid
	}
	return Default_EnchantExtra_Configid
}

func (x *EnchantExtra) GetBuffid() uint32 {
	if x != nil && x.Buffid != nil {
		return *x.Buffid
	}
	return Default_EnchantExtra_Buffid
}

type EnchantData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *EEnchantType   `protobuf:"varint,1,opt,name=type,enum=Cmd.EEnchantType,def=0" json:"type,omitempty"`
	Attrs  []*EnchantAttr  `protobuf:"bytes,2,rep,name=attrs" json:"attrs,omitempty"`
	Extras []*EnchantExtra `protobuf:"bytes,3,rep,name=extras" json:"extras,omitempty"`
	Patch  []uint32        `protobuf:"varint,4,rep,name=patch" json:"patch,omitempty"`
}

// Default values for EnchantData fields.
const (
	Default_EnchantData_Type = EEnchantType_EENCHANTTYPE_MIN
)

func (x *EnchantData) Reset() {
	*x = EnchantData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantData) ProtoMessage() {}

func (x *EnchantData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantData.ProtoReflect.Descriptor instead.
func (*EnchantData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{6}
}

func (x *EnchantData) GetType() EEnchantType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_EnchantData_Type
}

func (x *EnchantData) GetAttrs() []*EnchantAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *EnchantData) GetExtras() []*EnchantExtra {
	if x != nil {
		return x.Extras
	}
	return nil
}

func (x *EnchantData) GetPatch() []uint32 {
	if x != nil {
		return x.Patch
	}
	return nil
}

type RefineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lastfail    *bool   `protobuf:"varint,1,opt,name=lastfail,def=0" json:"lastfail,omitempty"`
	Repaircount *uint32 `protobuf:"varint,2,opt,name=repaircount,def=0" json:"repaircount,omitempty"`
}

// Default values for RefineData fields.
const (
	Default_RefineData_Lastfail    = bool(false)
	Default_RefineData_Repaircount = uint32(0)
)

func (x *RefineData) Reset() {
	*x = RefineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefineData) ProtoMessage() {}

func (x *RefineData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefineData.ProtoReflect.Descriptor instead.
func (*RefineData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{7}
}

func (x *RefineData) GetLastfail() bool {
	if x != nil && x.Lastfail != nil {
		return *x.Lastfail
	}
	return Default_RefineData_Lastfail
}

func (x *RefineData) GetRepaircount() uint32 {
	if x != nil && x.Repaircount != nil {
		return *x.Repaircount
	}
	return Default_RefineData_Repaircount
}

type EggEquip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base           *ItemInfo    `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Data           *EquipData   `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Card           []*CardData  `protobuf:"bytes,3,rep,name=card" json:"card,omitempty"`
	Enchant        *EnchantData `protobuf:"bytes,4,opt,name=enchant" json:"enchant,omitempty"`
	Previewenchant *EnchantData `protobuf:"bytes,5,opt,name=previewenchant" json:"previewenchant,omitempty"`
	Refine         *RefineData  `protobuf:"bytes,7,opt,name=refine" json:"refine,omitempty"`
}

func (x *EggEquip) Reset() {
	*x = EggEquip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EggEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggEquip) ProtoMessage() {}

func (x *EggEquip) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggEquip.ProtoReflect.Descriptor instead.
func (*EggEquip) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{8}
}

func (x *EggEquip) GetBase() *ItemInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *EggEquip) GetData() *EquipData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EggEquip) GetCard() []*CardData {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *EggEquip) GetEnchant() *EnchantData {
	if x != nil {
		return x.Enchant
	}
	return nil
}

func (x *EggEquip) GetPreviewenchant() *EnchantData {
	if x != nil {
		return x.Previewenchant
	}
	return nil
}

func (x *EggEquip) GetRefine() *RefineData {
	if x != nil {
		return x.Refine
	}
	return nil
}

type PetEquipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epos   *EEquipPos `protobuf:"varint,1,opt,name=epos,enum=Cmd.EEquipPos" json:"epos,omitempty"`
	Itemid *uint32    `protobuf:"varint,2,opt,name=itemid" json:"itemid,omitempty"`
}

func (x *PetEquipData) Reset() {
	*x = PetEquipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PetEquipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetEquipData) ProtoMessage() {}

func (x *PetEquipData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetEquipData.ProtoReflect.Descriptor instead.
func (*PetEquipData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{9}
}

func (x *PetEquipData) GetEpos() EEquipPos {
	if x != nil && x.Epos != nil {
		return *x.Epos
	}
	return EEquipPos_EEQUIPPOS_MIN
}

func (x *PetEquipData) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

type EggData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exp               *uint64         `protobuf:"varint,1,opt,name=exp,def=0" json:"exp,omitempty"`
	Friendexp         *uint64         `protobuf:"varint,2,opt,name=friendexp,def=0" json:"friendexp,omitempty"`
	Rewardexp         *uint64         `protobuf:"varint,3,opt,name=rewardexp,def=0" json:"rewardexp,omitempty"`
	Id                *uint32         `protobuf:"varint,4,opt,name=id,def=0" json:"id,omitempty"`
	Lv                *uint32         `protobuf:"varint,5,opt,name=lv,def=0" json:"lv,omitempty"`
	Friendlv          *uint32         `protobuf:"varint,6,opt,name=friendlv,def=0" json:"friendlv,omitempty"`
	Body              *uint32         `protobuf:"varint,7,opt,name=body,def=0" json:"body,omitempty"`
	Relivetime        *uint32         `protobuf:"varint,8,opt,name=relivetime,def=0" json:"relivetime,omitempty"`
	Hp                *uint32         `protobuf:"varint,9,opt,name=hp,def=0" json:"hp,omitempty"`
	Restoretime       *uint32         `protobuf:"varint,10,opt,name=restoretime,def=0" json:"restoretime,omitempty"`
	TimeHapply        *uint32         `protobuf:"varint,11,opt,name=time_happly,json=timeHapply,def=0" json:"time_happly,omitempty"`
	TimeExcite        *uint32         `protobuf:"varint,12,opt,name=time_excite,json=timeExcite,def=0" json:"time_excite,omitempty"`
	TimeHappiness     *uint32         `protobuf:"varint,13,opt,name=time_happiness,json=timeHappiness,def=0" json:"time_happiness,omitempty"`
	TimeHapplyGift    *uint32         `protobuf:"varint,14,opt,name=time_happly_gift,json=timeHapplyGift,def=0" json:"time_happly_gift,omitempty"`
	TimeExciteGift    *uint32         `protobuf:"varint,15,opt,name=time_excite_gift,json=timeExciteGift,def=0" json:"time_excite_gift,omitempty"`
	TimeHappinessGift *uint32         `protobuf:"varint,16,opt,name=time_happiness_gift,json=timeHappinessGift,def=0" json:"time_happiness_gift,omitempty"`
	TouchTick         *uint32         `protobuf:"varint,22,opt,name=touch_tick,json=touchTick,def=0" json:"touch_tick,omitempty"`
	FeedTick          *uint32         `protobuf:"varint,23,opt,name=feed_tick,json=feedTick,def=0" json:"feed_tick,omitempty"`
	Name              *string         `protobuf:"bytes,17,opt,name=name" json:"name,omitempty"`
	Var               []byte          `protobuf:"bytes,18,opt,name=var" json:"var,omitempty"`
	Skillids          []uint32        `protobuf:"varint,19,rep,name=skillids" json:"skillids,omitempty"`
	Equips            []*EggEquip     `protobuf:"bytes,20,rep,name=equips" json:"equips,omitempty"`
	Buff              []byte          `protobuf:"bytes,21,opt,name=buff" json:"buff,omitempty"`
	UnlockEquip       []uint32        `protobuf:"varint,24,rep,name=unlock_equip,json=unlockEquip" json:"unlock_equip,omitempty"`
	UnlockBody        []uint32        `protobuf:"varint,25,rep,name=unlock_body,json=unlockBody" json:"unlock_body,omitempty"`
	Version           *uint32         `protobuf:"varint,26,opt,name=version,def=0" json:"version,omitempty"`
	Skilloff          *bool           `protobuf:"varint,27,opt,name=skilloff,def=0" json:"skilloff,omitempty"`
	ExchangeCount     *uint32         `protobuf:"varint,28,opt,name=exchange_count,json=exchangeCount,def=0" json:"exchange_count,omitempty"`
	Guid              *string         `protobuf:"bytes,29,opt,name=guid" json:"guid,omitempty"`
	Defaultwears      []*PetEquipData `protobuf:"bytes,30,rep,name=defaultwears" json:"defaultwears,omitempty"`
	Wears             []*PetEquipData `protobuf:"bytes,31,rep,name=wears" json:"wears,omitempty"`
}

// Default values for EggData fields.
const (
	Default_EggData_Exp               = uint64(0)
	Default_EggData_Friendexp         = uint64(0)
	Default_EggData_Rewardexp         = uint64(0)
	Default_EggData_Id                = uint32(0)
	Default_EggData_Lv                = uint32(0)
	Default_EggData_Friendlv          = uint32(0)
	Default_EggData_Body              = uint32(0)
	Default_EggData_Relivetime        = uint32(0)
	Default_EggData_Hp                = uint32(0)
	Default_EggData_Restoretime       = uint32(0)
	Default_EggData_TimeHapply        = uint32(0)
	Default_EggData_TimeExcite        = uint32(0)
	Default_EggData_TimeHappiness     = uint32(0)
	Default_EggData_TimeHapplyGift    = uint32(0)
	Default_EggData_TimeExciteGift    = uint32(0)
	Default_EggData_TimeHappinessGift = uint32(0)
	Default_EggData_TouchTick         = uint32(0)
	Default_EggData_FeedTick          = uint32(0)
	Default_EggData_Version           = uint32(0)
	Default_EggData_Skilloff          = bool(false)
	Default_EggData_ExchangeCount     = uint32(0)
)

func (x *EggData) Reset() {
	*x = EggData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EggData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggData) ProtoMessage() {}

func (x *EggData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggData.ProtoReflect.Descriptor instead.
func (*EggData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{10}
}

func (x *EggData) GetExp() uint64 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return Default_EggData_Exp
}

func (x *EggData) GetFriendexp() uint64 {
	if x != nil && x.Friendexp != nil {
		return *x.Friendexp
	}
	return Default_EggData_Friendexp
}

func (x *EggData) GetRewardexp() uint64 {
	if x != nil && x.Rewardexp != nil {
		return *x.Rewardexp
	}
	return Default_EggData_Rewardexp
}

func (x *EggData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_EggData_Id
}

func (x *EggData) GetLv() uint32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return Default_EggData_Lv
}

func (x *EggData) GetFriendlv() uint32 {
	if x != nil && x.Friendlv != nil {
		return *x.Friendlv
	}
	return Default_EggData_Friendlv
}

func (x *EggData) GetBody() uint32 {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return Default_EggData_Body
}

func (x *EggData) GetRelivetime() uint32 {
	if x != nil && x.Relivetime != nil {
		return *x.Relivetime
	}
	return Default_EggData_Relivetime
}

func (x *EggData) GetHp() uint32 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return Default_EggData_Hp
}

func (x *EggData) GetRestoretime() uint32 {
	if x != nil && x.Restoretime != nil {
		return *x.Restoretime
	}
	return Default_EggData_Restoretime
}

func (x *EggData) GetTimeHapply() uint32 {
	if x != nil && x.TimeHapply != nil {
		return *x.TimeHapply
	}
	return Default_EggData_TimeHapply
}

func (x *EggData) GetTimeExcite() uint32 {
	if x != nil && x.TimeExcite != nil {
		return *x.TimeExcite
	}
	return Default_EggData_TimeExcite
}

func (x *EggData) GetTimeHappiness() uint32 {
	if x != nil && x.TimeHappiness != nil {
		return *x.TimeHappiness
	}
	return Default_EggData_TimeHappiness
}

func (x *EggData) GetTimeHapplyGift() uint32 {
	if x != nil && x.TimeHapplyGift != nil {
		return *x.TimeHapplyGift
	}
	return Default_EggData_TimeHapplyGift
}

func (x *EggData) GetTimeExciteGift() uint32 {
	if x != nil && x.TimeExciteGift != nil {
		return *x.TimeExciteGift
	}
	return Default_EggData_TimeExciteGift
}

func (x *EggData) GetTimeHappinessGift() uint32 {
	if x != nil && x.TimeHappinessGift != nil {
		return *x.TimeHappinessGift
	}
	return Default_EggData_TimeHappinessGift
}

func (x *EggData) GetTouchTick() uint32 {
	if x != nil && x.TouchTick != nil {
		return *x.TouchTick
	}
	return Default_EggData_TouchTick
}

func (x *EggData) GetFeedTick() uint32 {
	if x != nil && x.FeedTick != nil {
		return *x.FeedTick
	}
	return Default_EggData_FeedTick
}

func (x *EggData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EggData) GetVar() []byte {
	if x != nil {
		return x.Var
	}
	return nil
}

func (x *EggData) GetSkillids() []uint32 {
	if x != nil {
		return x.Skillids
	}
	return nil
}

func (x *EggData) GetEquips() []*EggEquip {
	if x != nil {
		return x.Equips
	}
	return nil
}

func (x *EggData) GetBuff() []byte {
	if x != nil {
		return x.Buff
	}
	return nil
}

func (x *EggData) GetUnlockEquip() []uint32 {
	if x != nil {
		return x.UnlockEquip
	}
	return nil
}

func (x *EggData) GetUnlockBody() []uint32 {
	if x != nil {
		return x.UnlockBody
	}
	return nil
}

func (x *EggData) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_EggData_Version
}

func (x *EggData) GetSkilloff() bool {
	if x != nil && x.Skilloff != nil {
		return *x.Skilloff
	}
	return Default_EggData_Skilloff
}

func (x *EggData) GetExchangeCount() uint32 {
	if x != nil && x.ExchangeCount != nil {
		return *x.ExchangeCount
	}
	return Default_EggData_ExchangeCount
}

func (x *EggData) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *EggData) GetDefaultwears() []*PetEquipData {
	if x != nil {
		return x.Defaultwears
	}
	return nil
}

func (x *EggData) GetWears() []*PetEquipData {
	if x != nil {
		return x.Wears
	}
	return nil
}

type LoveLetterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendUserName *string `protobuf:"bytes,1,opt,name=sendUserName" json:"sendUserName,omitempty"`
	Bg           *string `protobuf:"bytes,2,opt,name=bg" json:"bg,omitempty"`
	ConfigID     *uint32 `protobuf:"varint,3,opt,name=configID" json:"configID,omitempty"`
	Content      *string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	Content2     *string `protobuf:"bytes,5,opt,name=content2" json:"content2,omitempty"`
}

func (x *LoveLetterData) Reset() {
	*x = LoveLetterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoveLetterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoveLetterData) ProtoMessage() {}

func (x *LoveLetterData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoveLetterData.ProtoReflect.Descriptor instead.
func (*LoveLetterData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{11}
}

func (x *LoveLetterData) GetSendUserName() string {
	if x != nil && x.SendUserName != nil {
		return *x.SendUserName
	}
	return ""
}

func (x *LoveLetterData) GetBg() string {
	if x != nil && x.Bg != nil {
		return *x.Bg
	}
	return ""
}

func (x *LoveLetterData) GetConfigID() uint32 {
	if x != nil && x.ConfigID != nil {
		return *x.ConfigID
	}
	return 0
}

func (x *LoveLetterData) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *LoveLetterData) GetContent2() string {
	if x != nil && x.Content2 != nil {
		return *x.Content2
	}
	return ""
}

type CodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Used *bool   `protobuf:"varint,2,opt,name=used,def=0" json:"used,omitempty"`
}

// Default values for CodeData fields.
const (
	Default_CodeData_Used = bool(false)
)

func (x *CodeData) Reset() {
	*x = CodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeData) ProtoMessage() {}

func (x *CodeData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeData.ProtoReflect.Descriptor instead.
func (*CodeData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{12}
}

func (x *CodeData) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *CodeData) GetUsed() bool {
	if x != nil && x.Used != nil {
		return *x.Used
	}
	return Default_CodeData_Used
}

type WeddingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint64 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Zoneid      *uint32 `protobuf:"varint,2,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Charid1     *uint64 `protobuf:"varint,3,opt,name=charid1,def=0" json:"charid1,omitempty"`
	Charid2     *uint64 `protobuf:"varint,4,opt,name=charid2,def=0" json:"charid2,omitempty"`
	Weddingtime *uint32 `protobuf:"varint,5,opt,name=weddingtime,def=0" json:"weddingtime,omitempty"`
	Photoidx    *uint32 `protobuf:"varint,6,opt,name=photoidx,def=0" json:"photoidx,omitempty"`
	Phototime   *uint32 `protobuf:"varint,7,opt,name=phototime,def=0" json:"phototime,omitempty"`
	Myname      *string `protobuf:"bytes,8,opt,name=myname" json:"myname,omitempty"`
	Partnername *string `protobuf:"bytes,9,opt,name=partnername" json:"partnername,omitempty"`
	Starttime   *uint32 `protobuf:"varint,10,opt,name=starttime,def=0" json:"starttime,omitempty"`
	Endtime     *uint32 `protobuf:"varint,11,opt,name=endtime,def=0" json:"endtime,omitempty"`
	Notified    *bool   `protobuf:"varint,12,opt,name=notified,def=0" json:"notified,omitempty"`
}

// Default values for WeddingData fields.
const (
	Default_WeddingData_Id          = uint64(0)
	Default_WeddingData_Zoneid      = uint32(0)
	Default_WeddingData_Charid1     = uint64(0)
	Default_WeddingData_Charid2     = uint64(0)
	Default_WeddingData_Weddingtime = uint32(0)
	Default_WeddingData_Photoidx    = uint32(0)
	Default_WeddingData_Phototime   = uint32(0)
	Default_WeddingData_Starttime   = uint32(0)
	Default_WeddingData_Endtime     = uint32(0)
	Default_WeddingData_Notified    = bool(false)
)

func (x *WeddingData) Reset() {
	*x = WeddingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeddingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeddingData) ProtoMessage() {}

func (x *WeddingData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeddingData.ProtoReflect.Descriptor instead.
func (*WeddingData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{13}
}

func (x *WeddingData) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_WeddingData_Id
}

func (x *WeddingData) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_WeddingData_Zoneid
}

func (x *WeddingData) GetCharid1() uint64 {
	if x != nil && x.Charid1 != nil {
		return *x.Charid1
	}
	return Default_WeddingData_Charid1
}

func (x *WeddingData) GetCharid2() uint64 {
	if x != nil && x.Charid2 != nil {
		return *x.Charid2
	}
	return Default_WeddingData_Charid2
}

func (x *WeddingData) GetWeddingtime() uint32 {
	if x != nil && x.Weddingtime != nil {
		return *x.Weddingtime
	}
	return Default_WeddingData_Weddingtime
}

func (x *WeddingData) GetPhotoidx() uint32 {
	if x != nil && x.Photoidx != nil {
		return *x.Photoidx
	}
	return Default_WeddingData_Photoidx
}

func (x *WeddingData) GetPhototime() uint32 {
	if x != nil && x.Phototime != nil {
		return *x.Phototime
	}
	return Default_WeddingData_Phototime
}

func (x *WeddingData) GetMyname() string {
	if x != nil && x.Myname != nil {
		return *x.Myname
	}
	return ""
}

func (x *WeddingData) GetPartnername() string {
	if x != nil && x.Partnername != nil {
		return *x.Partnername
	}
	return ""
}

func (x *WeddingData) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return Default_WeddingData_Starttime
}

func (x *WeddingData) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return Default_WeddingData_Endtime
}

func (x *WeddingData) GetNotified() bool {
	if x != nil && x.Notified != nil {
		return *x.Notified
	}
	return Default_WeddingData_Notified
}

type SenderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid *uint64 `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Name   *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *SenderData) Reset() {
	*x = SenderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenderData) ProtoMessage() {}

func (x *SenderData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenderData.ProtoReflect.Descriptor instead.
func (*SenderData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{14}
}

func (x *SenderData) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *SenderData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base           *ItemInfo       `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Equiped        *bool           `protobuf:"varint,2,opt,name=equiped,def=0" json:"equiped,omitempty"`
	Battlepoint    *uint32         `protobuf:"varint,3,opt,name=battlepoint,def=0" json:"battlepoint,omitempty"`
	Equip          *EquipData      `protobuf:"bytes,4,opt,name=equip" json:"equip,omitempty"`
	Card           []*CardData     `protobuf:"bytes,5,rep,name=card" json:"card,omitempty"`
	Enchant        *EnchantData    `protobuf:"bytes,6,opt,name=enchant" json:"enchant,omitempty"`
	Previewenchant *EnchantData    `protobuf:"bytes,7,opt,name=previewenchant" json:"previewenchant,omitempty"`
	Refine         *RefineData     `protobuf:"bytes,8,opt,name=refine" json:"refine,omitempty"`
	Egg            *EggData        `protobuf:"bytes,9,opt,name=egg" json:"egg,omitempty"`
	Letter         *LoveLetterData `protobuf:"bytes,10,opt,name=letter" json:"letter,omitempty"`
	Code           *CodeData       `protobuf:"bytes,11,opt,name=code" json:"code,omitempty"`
	Wedding        *WeddingData    `protobuf:"bytes,12,opt,name=wedding" json:"wedding,omitempty"`
	Sender         *SenderData     `protobuf:"bytes,13,opt,name=sender" json:"sender,omitempty"`
}

// Default values for ItemData fields.
const (
	Default_ItemData_Equiped     = bool(false)
	Default_ItemData_Battlepoint = uint32(0)
)

func (x *ItemData) Reset() {
	*x = ItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemData) ProtoMessage() {}

func (x *ItemData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemData.ProtoReflect.Descriptor instead.
func (*ItemData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{15}
}

func (x *ItemData) GetBase() *ItemInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ItemData) GetEquiped() bool {
	if x != nil && x.Equiped != nil {
		return *x.Equiped
	}
	return Default_ItemData_Equiped
}

func (x *ItemData) GetBattlepoint() uint32 {
	if x != nil && x.Battlepoint != nil {
		return *x.Battlepoint
	}
	return Default_ItemData_Battlepoint
}

func (x *ItemData) GetEquip() *EquipData {
	if x != nil {
		return x.Equip
	}
	return nil
}

func (x *ItemData) GetCard() []*CardData {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *ItemData) GetEnchant() *EnchantData {
	if x != nil {
		return x.Enchant
	}
	return nil
}

func (x *ItemData) GetPreviewenchant() *EnchantData {
	if x != nil {
		return x.Previewenchant
	}
	return nil
}

func (x *ItemData) GetRefine() *RefineData {
	if x != nil {
		return x.Refine
	}
	return nil
}

func (x *ItemData) GetEgg() *EggData {
	if x != nil {
		return x.Egg
	}
	return nil
}

func (x *ItemData) GetLetter() *LoveLetterData {
	if x != nil {
		return x.Letter
	}
	return nil
}

func (x *ItemData) GetCode() *CodeData {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ItemData) GetWedding() *WeddingData {
	if x != nil {
		return x.Wedding
	}
	return nil
}

func (x *ItemData) GetSender() *SenderData {
	if x != nil {
		return x.Sender
	}
	return nil
}

type PackageItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=1" json:"param,omitempty"`
	Type    *EPackType  `protobuf:"varint,3,opt,name=type,enum=Cmd.EPackType,def=0" json:"type,omitempty"`
	Data    []*ItemData `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
	Maxslot *uint32     `protobuf:"varint,5,opt,name=maxslot,def=0" json:"maxslot,omitempty"`
}

// Default values for PackageItem fields.
const (
	Default_PackageItem_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PackageItem_Param   = ItemParam_ITEMPARAM_PACKAGEITEM
	Default_PackageItem_Type    = EPackType_EPACKTYPE_MIN
	Default_PackageItem_Maxslot = uint32(0)
)

func (x *PackageItem) Reset() {
	*x = PackageItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageItem) ProtoMessage() {}

func (x *PackageItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageItem.ProtoReflect.Descriptor instead.
func (*PackageItem) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{16}
}

func (x *PackageItem) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PackageItem_Cmd
}

func (x *PackageItem) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PackageItem_Param
}

func (x *PackageItem) GetType() EPackType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_PackageItem_Type
}

func (x *PackageItem) GetData() []*ItemData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PackageItem) GetMaxslot() uint32 {
	if x != nil && x.Maxslot != nil {
		return *x.Maxslot
	}
	return Default_PackageItem_Maxslot
}

type PackageUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param       *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=2" json:"param,omitempty"`
	Type        *EPackType  `protobuf:"varint,3,opt,name=type,enum=Cmd.EPackType,def=0" json:"type,omitempty"`
	UpdateItems []*ItemData `protobuf:"bytes,4,rep,name=updateItems" json:"updateItems,omitempty"`
	DelItems    []*ItemData `protobuf:"bytes,5,rep,name=delItems" json:"delItems,omitempty"`
}

// Default values for PackageUpdate fields.
const (
	Default_PackageUpdate_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PackageUpdate_Param = ItemParam_ITEMPARAM_PACKAGEUPDATE
	Default_PackageUpdate_Type  = EPackType_EPACKTYPE_MIN
)

func (x *PackageUpdate) Reset() {
	*x = PackageUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageUpdate) ProtoMessage() {}

func (x *PackageUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageUpdate.ProtoReflect.Descriptor instead.
func (*PackageUpdate) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{17}
}

func (x *PackageUpdate) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PackageUpdate_Cmd
}

func (x *PackageUpdate) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PackageUpdate_Param
}

func (x *PackageUpdate) GetType() EPackType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_PackageUpdate_Type
}

func (x *PackageUpdate) GetUpdateItems() []*ItemData {
	if x != nil {
		return x.UpdateItems
	}
	return nil
}

func (x *PackageUpdate) GetDelItems() []*ItemData {
	if x != nil {
		return x.DelItems
	}
	return nil
}

type ItemUse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=3" json:"param,omitempty"`
	Itemguid *string    `protobuf:"bytes,3,opt,name=itemguid" json:"itemguid,omitempty"`
	Targets  []uint64   `protobuf:"varint,4,rep,name=targets" json:"targets,omitempty"`
	Count    *uint32    `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
}

// Default values for ItemUse fields.
const (
	Default_ItemUse_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ItemUse_Param = ItemParam_ITEMPARAM_ITEMUSE
)

func (x *ItemUse) Reset() {
	*x = ItemUse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemUse) ProtoMessage() {}

func (x *ItemUse) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemUse.ProtoReflect.Descriptor instead.
func (*ItemUse) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{18}
}

func (x *ItemUse) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ItemUse_Cmd
}

func (x *ItemUse) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ItemUse_Param
}

func (x *ItemUse) GetItemguid() string {
	if x != nil && x.Itemguid != nil {
		return *x.Itemguid
	}
	return ""
}

func (x *ItemUse) GetTargets() []uint64 {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *ItemUse) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type SortInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid  *string `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	Index *uint32 `protobuf:"varint,2,opt,name=index,def=0" json:"index,omitempty"`
}

// Default values for SortInfo fields.
const (
	Default_SortInfo_Index = uint32(0)
)

func (x *SortInfo) Reset() {
	*x = SortInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortInfo) ProtoMessage() {}

func (x *SortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortInfo.ProtoReflect.Descriptor instead.
func (*SortInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{19}
}

func (x *SortInfo) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *SortInfo) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_SortInfo_Index
}

type PackageSort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=4" json:"param,omitempty"`
	Type  *EPackType  `protobuf:"varint,3,opt,name=type,enum=Cmd.EPackType,def=0" json:"type,omitempty"`
	Item  []*SortInfo `protobuf:"bytes,4,rep,name=item" json:"item,omitempty"`
}

// Default values for PackageSort fields.
const (
	Default_PackageSort_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PackageSort_Param = ItemParam_ITEMPARAM_PACKAGESORT
	Default_PackageSort_Type  = EPackType_EPACKTYPE_MIN
)

func (x *PackageSort) Reset() {
	*x = PackageSort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageSort) ProtoMessage() {}

func (x *PackageSort) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageSort.ProtoReflect.Descriptor instead.
func (*PackageSort) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{20}
}

func (x *PackageSort) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PackageSort_Cmd
}

func (x *PackageSort) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PackageSort_Param
}

func (x *PackageSort) GetType() EPackType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_PackageSort_Type
}

func (x *PackageSort) GetItem() []*SortInfo {
	if x != nil {
		return x.Item
	}
	return nil
}

type Equip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=5" json:"param,omitempty"`
	Oper     *EEquipOper `protobuf:"varint,3,opt,name=oper,enum=Cmd.EEquipOper,def=0" json:"oper,omitempty"`
	Pos      *EEquipPos  `protobuf:"varint,4,opt,name=pos,enum=Cmd.EEquipPos,def=0" json:"pos,omitempty"`
	Guid     *string     `protobuf:"bytes,5,opt,name=guid" json:"guid,omitempty"`
	Transfer *bool       `protobuf:"varint,6,opt,name=transfer,def=0" json:"transfer,omitempty"`
	Count    *uint32     `protobuf:"varint,7,opt,name=count,def=0" json:"count,omitempty"`
}

// Default values for Equip fields.
const (
	Default_Equip_Cmd      = Command_SCENE_USER_ITEM_PROTOCMD
	Default_Equip_Param    = ItemParam_ITEMPARAM_EQUIP
	Default_Equip_Oper     = EEquipOper_EEQUIPOPER_MIN
	Default_Equip_Pos      = EEquipPos_EEQUIPPOS_MIN
	Default_Equip_Transfer = bool(false)
	Default_Equip_Count    = uint32(0)
)

func (x *Equip) Reset() {
	*x = Equip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Equip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Equip) ProtoMessage() {}

func (x *Equip) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Equip.ProtoReflect.Descriptor instead.
func (*Equip) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{21}
}

func (x *Equip) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_Equip_Cmd
}

func (x *Equip) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_Equip_Param
}

func (x *Equip) GetOper() EEquipOper {
	if x != nil && x.Oper != nil {
		return *x.Oper
	}
	return Default_Equip_Oper
}

func (x *Equip) GetPos() EEquipPos {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_Equip_Pos
}

func (x *Equip) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *Equip) GetTransfer() bool {
	if x != nil && x.Transfer != nil {
		return *x.Transfer
	}
	return Default_Equip_Transfer
}

func (x *Equip) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_Equip_Count
}

type SItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid  *string `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	Count *uint32 `protobuf:"varint,2,opt,name=count,def=0" json:"count,omitempty"`
}

// Default values for SItem fields.
const (
	Default_SItem_Count = uint32(0)
)

func (x *SItem) Reset() {
	*x = SItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SItem) ProtoMessage() {}

func (x *SItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SItem.ProtoReflect.Descriptor instead.
func (*SItem) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{22}
}

func (x *SItem) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *SItem) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_SItem_Count
}

type SellItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=6" json:"param,omitempty"`
	Npcid *uint64    `protobuf:"varint,3,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Items []*SItem   `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

// Default values for SellItem fields.
const (
	Default_SellItem_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_SellItem_Param = ItemParam_ITEMPARAM_SELLITEM
	Default_SellItem_Npcid = uint64(0)
)

func (x *SellItem) Reset() {
	*x = SellItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellItem) ProtoMessage() {}

func (x *SellItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellItem.ProtoReflect.Descriptor instead.
func (*SellItem) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{23}
}

func (x *SellItem) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SellItem_Cmd
}

func (x *SellItem) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SellItem_Param
}

func (x *SellItem) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_SellItem_Npcid
}

func (x *SellItem) GetItems() []*SItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type EquipStrength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=7" json:"param,omitempty"`
	Guid      *string          `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Destcount *uint32          `protobuf:"varint,4,opt,name=destcount,def=0" json:"destcount,omitempty"`
	Count     *uint32          `protobuf:"varint,5,opt,name=count,def=0" json:"count,omitempty"`
	Cricount  *uint32          `protobuf:"varint,6,opt,name=cricount,def=0" json:"cricount,omitempty"`
	Oldlv     *uint32          `protobuf:"varint,7,opt,name=oldlv,def=0" json:"oldlv,omitempty"`
	Newlv     *uint32          `protobuf:"varint,8,opt,name=newlv,def=0" json:"newlv,omitempty"`
	Result    *EStrengthResult `protobuf:"varint,9,opt,name=result,enum=Cmd.EStrengthResult,def=0" json:"result,omitempty"`
	Type      *EStrengthType   `protobuf:"varint,10,opt,name=type,enum=Cmd.EStrengthType,def=0" json:"type,omitempty"`
}

// Default values for EquipStrength fields.
const (
	Default_EquipStrength_Cmd       = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipStrength_Param     = ItemParam_ITEMPARAM_EQUIPSTRENGTH
	Default_EquipStrength_Destcount = uint32(0)
	Default_EquipStrength_Count     = uint32(0)
	Default_EquipStrength_Cricount  = uint32(0)
	Default_EquipStrength_Oldlv     = uint32(0)
	Default_EquipStrength_Newlv     = uint32(0)
	Default_EquipStrength_Result    = EStrengthResult_ESTRENGTHRESULT_MIN
	Default_EquipStrength_Type      = EStrengthType_ESTRENGTHTYPE_MIN
)

func (x *EquipStrength) Reset() {
	*x = EquipStrength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipStrength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipStrength) ProtoMessage() {}

func (x *EquipStrength) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipStrength.ProtoReflect.Descriptor instead.
func (*EquipStrength) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{24}
}

func (x *EquipStrength) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipStrength_Cmd
}

func (x *EquipStrength) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipStrength_Param
}

func (x *EquipStrength) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *EquipStrength) GetDestcount() uint32 {
	if x != nil && x.Destcount != nil {
		return *x.Destcount
	}
	return Default_EquipStrength_Destcount
}

func (x *EquipStrength) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_EquipStrength_Count
}

func (x *EquipStrength) GetCricount() uint32 {
	if x != nil && x.Cricount != nil {
		return *x.Cricount
	}
	return Default_EquipStrength_Cricount
}

func (x *EquipStrength) GetOldlv() uint32 {
	if x != nil && x.Oldlv != nil {
		return *x.Oldlv
	}
	return Default_EquipStrength_Oldlv
}

func (x *EquipStrength) GetNewlv() uint32 {
	if x != nil && x.Newlv != nil {
		return *x.Newlv
	}
	return Default_EquipStrength_Newlv
}

func (x *EquipStrength) GetResult() EStrengthResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_EquipStrength_Result
}

func (x *EquipStrength) GetType() EStrengthType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_EquipStrength_Type
}

type Produce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param        *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=9" json:"param,omitempty"`
	Type         *EProduceType `protobuf:"varint,3,opt,name=type,enum=Cmd.EProduceType,def=1" json:"type,omitempty"`
	Composeid    *uint32       `protobuf:"varint,4,opt,name=composeid,def=0" json:"composeid,omitempty"`
	Npcid        *uint64       `protobuf:"varint,5,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Itemid       *uint32       `protobuf:"varint,6,opt,name=itemid,def=0" json:"itemid,omitempty"`
	Count        *uint32       `protobuf:"varint,7,opt,name=count,def=1" json:"count,omitempty"`
	Qucikproduce *bool         `protobuf:"varint,8,opt,name=qucikproduce,def=0" json:"qucikproduce,omitempty"`
}

// Default values for Produce fields.
const (
	Default_Produce_Cmd          = Command_SCENE_USER_ITEM_PROTOCMD
	Default_Produce_Param        = ItemParam_ITEMPARAM_PRODUCE
	Default_Produce_Type         = EProduceType_EPRODUCETYPE_MIN
	Default_Produce_Composeid    = uint32(0)
	Default_Produce_Npcid        = uint64(0)
	Default_Produce_Itemid       = uint32(0)
	Default_Produce_Count        = uint32(1)
	Default_Produce_Qucikproduce = bool(false)
)

func (x *Produce) Reset() {
	*x = Produce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Produce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Produce) ProtoMessage() {}

func (x *Produce) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Produce.ProtoReflect.Descriptor instead.
func (*Produce) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{25}
}

func (x *Produce) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_Produce_Cmd
}

func (x *Produce) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_Produce_Param
}

func (x *Produce) GetType() EProduceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_Produce_Type
}

func (x *Produce) GetComposeid() uint32 {
	if x != nil && x.Composeid != nil {
		return *x.Composeid
	}
	return Default_Produce_Composeid
}

func (x *Produce) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_Produce_Npcid
}

func (x *Produce) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_Produce_Itemid
}

func (x *Produce) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_Produce_Count
}

func (x *Produce) GetQucikproduce() bool {
	if x != nil && x.Qucikproduce != nil {
		return *x.Qucikproduce
	}
	return Default_Produce_Qucikproduce
}

type ProduceDone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=10" json:"param,omitempty"`
	Type   *EProduceType `protobuf:"varint,3,opt,name=type,enum=Cmd.EProduceType,def=1" json:"type,omitempty"`
	Npcid  *uint64       `protobuf:"varint,4,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Charid *uint64       `protobuf:"varint,5,opt,name=charid,def=0" json:"charid,omitempty"`
	Delay  *uint32       `protobuf:"varint,6,opt,name=delay,def=0" json:"delay,omitempty"`
	Itemid *uint32       `protobuf:"varint,7,opt,name=itemid,def=0" json:"itemid,omitempty"`
}

// Default values for ProduceDone fields.
const (
	Default_ProduceDone_Cmd    = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ProduceDone_Param  = ItemParam_ITEMPARAM_PRODUCEDONE
	Default_ProduceDone_Type   = EProduceType_EPRODUCETYPE_MIN
	Default_ProduceDone_Npcid  = uint64(0)
	Default_ProduceDone_Charid = uint64(0)
	Default_ProduceDone_Delay  = uint32(0)
	Default_ProduceDone_Itemid = uint32(0)
)

func (x *ProduceDone) Reset() {
	*x = ProduceDone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceDone) ProtoMessage() {}

func (x *ProduceDone) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceDone.ProtoReflect.Descriptor instead.
func (*ProduceDone) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{26}
}

func (x *ProduceDone) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ProduceDone_Cmd
}

func (x *ProduceDone) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ProduceDone_Param
}

func (x *ProduceDone) GetType() EProduceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ProduceDone_Type
}

func (x *ProduceDone) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_ProduceDone_Npcid
}

func (x *ProduceDone) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_ProduceDone_Charid
}

func (x *ProduceDone) GetDelay() uint32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return Default_ProduceDone_Delay
}

func (x *ProduceDone) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_ProduceDone_Itemid
}

type EquipRefine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param      *ItemParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=11" json:"param,omitempty"`
	Guid       *string        `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Composeid  *uint32        `protobuf:"varint,4,opt,name=composeid,def=0" json:"composeid,omitempty"`
	Refinelv   *uint32        `protobuf:"varint,5,opt,name=refinelv,def=0" json:"refinelv,omitempty"`
	Eresult    *ERefineResult `protobuf:"varint,6,opt,name=eresult,enum=Cmd.ERefineResult,def=0" json:"eresult,omitempty"`
	Npcid      *uint64        `protobuf:"varint,7,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Saferefine *bool          `protobuf:"varint,8,opt,name=saferefine,def=0" json:"saferefine,omitempty"`
	Itemguid   []string       `protobuf:"bytes,9,rep,name=itemguid" json:"itemguid,omitempty"`
}

// Default values for EquipRefine fields.
const (
	Default_EquipRefine_Cmd        = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipRefine_Param      = ItemParam_ITEMPARAM_REFINE
	Default_EquipRefine_Composeid  = uint32(0)
	Default_EquipRefine_Refinelv   = uint32(0)
	Default_EquipRefine_Eresult    = ERefineResult_EREFINERESULT_MIN
	Default_EquipRefine_Npcid      = uint64(0)
	Default_EquipRefine_Saferefine = bool(false)
)

func (x *EquipRefine) Reset() {
	*x = EquipRefine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipRefine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipRefine) ProtoMessage() {}

func (x *EquipRefine) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipRefine.ProtoReflect.Descriptor instead.
func (*EquipRefine) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{27}
}

func (x *EquipRefine) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipRefine_Cmd
}

func (x *EquipRefine) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipRefine_Param
}

func (x *EquipRefine) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *EquipRefine) GetComposeid() uint32 {
	if x != nil && x.Composeid != nil {
		return *x.Composeid
	}
	return Default_EquipRefine_Composeid
}

func (x *EquipRefine) GetRefinelv() uint32 {
	if x != nil && x.Refinelv != nil {
		return *x.Refinelv
	}
	return Default_EquipRefine_Refinelv
}

func (x *EquipRefine) GetEresult() ERefineResult {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_EquipRefine_Eresult
}

func (x *EquipRefine) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_EquipRefine_Npcid
}

func (x *EquipRefine) GetSaferefine() bool {
	if x != nil && x.Saferefine != nil {
		return *x.Saferefine
	}
	return Default_EquipRefine_Saferefine
}

func (x *EquipRefine) GetItemguid() []string {
	if x != nil {
		return x.Itemguid
	}
	return nil
}

type EquipDecompose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=12" json:"param,omitempty"`
	Guid   *string           `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Result *EDecomposeResult `protobuf:"varint,4,opt,name=result,enum=Cmd.EDecomposeResult,def=0" json:"result,omitempty"`
	Items  []*ItemInfo       `protobuf:"bytes,5,rep,name=items" json:"items,omitempty"`
}

// Default values for EquipDecompose fields.
const (
	Default_EquipDecompose_Cmd    = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipDecompose_Param  = ItemParam_ITEMPARAM_DECOMPOSE
	Default_EquipDecompose_Result = EDecomposeResult_EDECOMPOSERESULT_MIN
)

func (x *EquipDecompose) Reset() {
	*x = EquipDecompose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipDecompose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipDecompose) ProtoMessage() {}

func (x *EquipDecompose) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipDecompose.ProtoReflect.Descriptor instead.
func (*EquipDecompose) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{28}
}

func (x *EquipDecompose) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipDecompose_Cmd
}

func (x *EquipDecompose) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipDecompose_Param
}

func (x *EquipDecompose) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *EquipDecompose) GetResult() EDecomposeResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_EquipDecompose_Result
}

func (x *EquipDecompose) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type DecomposeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item     *ItemInfo `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
	Rate     *uint32   `protobuf:"varint,2,opt,name=rate,def=0" json:"rate,omitempty"`
	MinCount *uint32   `protobuf:"varint,3,opt,name=min_count,json=minCount,def=0" json:"min_count,omitempty"`
	MaxCount *uint32   `protobuf:"varint,4,opt,name=max_count,json=maxCount,def=0" json:"max_count,omitempty"`
}

// Default values for DecomposeResult fields.
const (
	Default_DecomposeResult_Rate     = uint32(0)
	Default_DecomposeResult_MinCount = uint32(0)
	Default_DecomposeResult_MaxCount = uint32(0)
)

func (x *DecomposeResult) Reset() {
	*x = DecomposeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecomposeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecomposeResult) ProtoMessage() {}

func (x *DecomposeResult) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecomposeResult.ProtoReflect.Descriptor instead.
func (*DecomposeResult) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{29}
}

func (x *DecomposeResult) GetItem() *ItemInfo {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *DecomposeResult) GetRate() uint32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return Default_DecomposeResult_Rate
}

func (x *DecomposeResult) GetMinCount() uint32 {
	if x != nil && x.MinCount != nil {
		return *x.MinCount
	}
	return Default_DecomposeResult_MinCount
}

func (x *DecomposeResult) GetMaxCount() uint32 {
	if x != nil && x.MaxCount != nil {
		return *x.MaxCount
	}
	return Default_DecomposeResult_MaxCount
}

type QueryDecomposeResultItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=27" json:"param,omitempty"`
	Guid      *string            `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Results   []*DecomposeResult `protobuf:"bytes,4,rep,name=results" json:"results,omitempty"`
	SellPrice *uint32            `protobuf:"varint,5,opt,name=sell_price,json=sellPrice,def=0" json:"sell_price,omitempty"`
}

// Default values for QueryDecomposeResultItemCmd fields.
const (
	Default_QueryDecomposeResultItemCmd_Cmd       = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QueryDecomposeResultItemCmd_Param     = ItemParam_ITEMPARAM_QUERYDECOMPOSERESULT
	Default_QueryDecomposeResultItemCmd_SellPrice = uint32(0)
)

func (x *QueryDecomposeResultItemCmd) Reset() {
	*x = QueryDecomposeResultItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDecomposeResultItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDecomposeResultItemCmd) ProtoMessage() {}

func (x *QueryDecomposeResultItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDecomposeResultItemCmd.ProtoReflect.Descriptor instead.
func (*QueryDecomposeResultItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{30}
}

func (x *QueryDecomposeResultItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryDecomposeResultItemCmd_Cmd
}

func (x *QueryDecomposeResultItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryDecomposeResultItemCmd_Param
}

func (x *QueryDecomposeResultItemCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *QueryDecomposeResultItemCmd) GetResults() []*DecomposeResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *QueryDecomposeResultItemCmd) GetSellPrice() uint32 {
	if x != nil && x.SellPrice != nil {
		return *x.SellPrice
	}
	return Default_QueryDecomposeResultItemCmd_SellPrice
}

type QueryEquipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=13" json:"param,omitempty"`
	Guid  *string    `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Data  *EquipData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

// Default values for QueryEquipData fields.
const (
	Default_QueryEquipData_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QueryEquipData_Param = ItemParam_ITEMPARAM_QUERYEQUIPDATA
)

func (x *QueryEquipData) Reset() {
	*x = QueryEquipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEquipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEquipData) ProtoMessage() {}

func (x *QueryEquipData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEquipData.ProtoReflect.Descriptor instead.
func (*QueryEquipData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{31}
}

func (x *QueryEquipData) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryEquipData_Cmd
}

func (x *QueryEquipData) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryEquipData_Param
}

func (x *QueryEquipData) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *QueryEquipData) GetData() *EquipData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BrowsePackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=14" json:"param,omitempty"`
	Type  *EPackType `protobuf:"varint,3,opt,name=type,enum=Cmd.EPackType,def=0" json:"type,omitempty"`
}

// Default values for BrowsePackage fields.
const (
	Default_BrowsePackage_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_BrowsePackage_Param = ItemParam_ITEMPARAM_BROWSEPACK
	Default_BrowsePackage_Type  = EPackType_EPACKTYPE_MIN
)

func (x *BrowsePackage) Reset() {
	*x = BrowsePackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrowsePackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrowsePackage) ProtoMessage() {}

func (x *BrowsePackage) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrowsePackage.ProtoReflect.Descriptor instead.
func (*BrowsePackage) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{32}
}

func (x *BrowsePackage) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BrowsePackage_Cmd
}

func (x *BrowsePackage) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BrowsePackage_Param
}

func (x *BrowsePackage) GetType() EPackType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_BrowsePackage_Type
}

type EquipCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=15" json:"param,omitempty"`
	Oper      *ECardOper `protobuf:"varint,3,opt,name=oper,enum=Cmd.ECardOper,def=0" json:"oper,omitempty"`
	Cardguid  *string    `protobuf:"bytes,4,opt,name=cardguid" json:"cardguid,omitempty"`
	Equipguid *string    `protobuf:"bytes,5,opt,name=equipguid" json:"equipguid,omitempty"`
	Pos       *uint32    `protobuf:"varint,6,opt,name=pos,def=0" json:"pos,omitempty"`
}

// Default values for EquipCard fields.
const (
	Default_EquipCard_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipCard_Param = ItemParam_ITEMPARAM_EQUIPCARD
	Default_EquipCard_Oper  = ECardOper_ECARDOPER_MIN
	Default_EquipCard_Pos   = uint32(0)
)

func (x *EquipCard) Reset() {
	*x = EquipCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipCard) ProtoMessage() {}

func (x *EquipCard) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipCard.ProtoReflect.Descriptor instead.
func (*EquipCard) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{33}
}

func (x *EquipCard) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipCard_Cmd
}

func (x *EquipCard) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipCard_Param
}

func (x *EquipCard) GetOper() ECardOper {
	if x != nil && x.Oper != nil {
		return *x.Oper
	}
	return Default_EquipCard_Oper
}

func (x *EquipCard) GetCardguid() string {
	if x != nil && x.Cardguid != nil {
		return *x.Cardguid
	}
	return ""
}

func (x *EquipCard) GetEquipguid() string {
	if x != nil && x.Equipguid != nil {
		return *x.Equipguid
	}
	return ""
}

func (x *EquipCard) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_EquipCard_Pos
}

type ItemShow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=16" json:"param,omitempty"`
	Items []*ItemInfo `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for ItemShow fields.
const (
	Default_ItemShow_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ItemShow_Param = ItemParam_ITEMPARAM_ITEMSHOW
)

func (x *ItemShow) Reset() {
	*x = ItemShow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemShow) ProtoMessage() {}

func (x *ItemShow) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemShow.ProtoReflect.Descriptor instead.
func (*ItemShow) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{34}
}

func (x *ItemShow) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ItemShow_Cmd
}

func (x *ItemShow) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ItemShow_Param
}

func (x *ItemShow) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type ItemShow64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=35" json:"param,omitempty"`
	Id    *uint32    `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Count *uint64    `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

// Default values for ItemShow64 fields.
const (
	Default_ItemShow64_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ItemShow64_Param = ItemParam_ITEMPARAM_ITEMSHOW64
)

func (x *ItemShow64) Reset() {
	*x = ItemShow64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemShow64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemShow64) ProtoMessage() {}

func (x *ItemShow64) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemShow64.ProtoReflect.Descriptor instead.
func (*ItemShow64) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{35}
}

func (x *ItemShow64) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ItemShow64_Cmd
}

func (x *ItemShow64) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ItemShow64_Param
}

func (x *ItemShow64) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ItemShow64) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type EquipRepair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param      *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=17" json:"param,omitempty"`
	Targetguid *string    `protobuf:"bytes,3,opt,name=targetguid" json:"targetguid,omitempty"`
	Success    *bool      `protobuf:"varint,4,opt,name=success,def=0" json:"success,omitempty"`
	Stuffguid  *string    `protobuf:"bytes,5,opt,name=stuffguid" json:"stuffguid,omitempty"`
}

// Default values for EquipRepair fields.
const (
	Default_EquipRepair_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipRepair_Param   = ItemParam_ITEMPARAM_REPAIR
	Default_EquipRepair_Success = bool(false)
)

func (x *EquipRepair) Reset() {
	*x = EquipRepair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipRepair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipRepair) ProtoMessage() {}

func (x *EquipRepair) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipRepair.ProtoReflect.Descriptor instead.
func (*EquipRepair) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{36}
}

func (x *EquipRepair) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipRepair_Cmd
}

func (x *EquipRepair) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipRepair_Param
}

func (x *EquipRepair) GetTargetguid() string {
	if x != nil && x.Targetguid != nil {
		return *x.Targetguid
	}
	return ""
}

func (x *EquipRepair) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_EquipRepair_Success
}

func (x *EquipRepair) GetStuffguid() string {
	if x != nil && x.Stuffguid != nil {
		return *x.Stuffguid
	}
	return ""
}

type HintNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=18" json:"param,omitempty"`
	Itemid *uint32    `protobuf:"varint,3,opt,name=itemid,def=0" json:"itemid,omitempty"`
}

// Default values for HintNtf fields.
const (
	Default_HintNtf_Cmd    = Command_SCENE_USER_ITEM_PROTOCMD
	Default_HintNtf_Param  = ItemParam_ITEMPARAM_HINTNTF
	Default_HintNtf_Itemid = uint32(0)
)

func (x *HintNtf) Reset() {
	*x = HintNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HintNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HintNtf) ProtoMessage() {}

func (x *HintNtf) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HintNtf.ProtoReflect.Descriptor instead.
func (*HintNtf) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{37}
}

func (x *HintNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HintNtf_Cmd
}

func (x *HintNtf) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HintNtf_Param
}

func (x *HintNtf) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_HintNtf_Itemid
}

type EnchantEquip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=19" json:"param,omitempty"`
	Type  *EEnchantType `protobuf:"varint,3,opt,name=type,enum=Cmd.EEnchantType,def=0" json:"type,omitempty"`
	Guid  *string       `protobuf:"bytes,4,opt,name=guid" json:"guid,omitempty"`
}

// Default values for EnchantEquip fields.
const (
	Default_EnchantEquip_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EnchantEquip_Param = ItemParam_ITEMPARAM_ENCHANT
	Default_EnchantEquip_Type  = EEnchantType_EENCHANTTYPE_MIN
)

func (x *EnchantEquip) Reset() {
	*x = EnchantEquip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantEquip) ProtoMessage() {}

func (x *EnchantEquip) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantEquip.ProtoReflect.Descriptor instead.
func (*EnchantEquip) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{38}
}

func (x *EnchantEquip) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnchantEquip_Cmd
}

func (x *EnchantEquip) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnchantEquip_Param
}

func (x *EnchantEquip) GetType() EEnchantType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_EnchantEquip_Type
}

func (x *EnchantEquip) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

type TradeComposePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComposeId *uint32 `protobuf:"varint,1,opt,name=compose_id,json=composeId" json:"compose_id,omitempty"`
	Count     *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *TradeComposePair) Reset() {
	*x = TradeComposePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeComposePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeComposePair) ProtoMessage() {}

func (x *TradeComposePair) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeComposePair.ProtoReflect.Descriptor instead.
func (*TradeComposePair) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{39}
}

func (x *TradeComposePair) GetComposeId() uint32 {
	if x != nil && x.ComposeId != nil {
		return *x.ComposeId
	}
	return 0
}

func (x *TradeComposePair) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type TradeRefineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComposeInfos []*TradeComposePair `protobuf:"bytes,1,rep,name=composeInfos" json:"composeInfos,omitempty"`
}

func (x *TradeRefineData) Reset() {
	*x = TradeRefineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRefineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRefineData) ProtoMessage() {}

func (x *TradeRefineData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRefineData.ProtoReflect.Descriptor instead.
func (*TradeRefineData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{40}
}

func (x *TradeRefineData) GetComposeInfos() []*TradeComposePair {
	if x != nil {
		return x.ComposeInfos
	}
	return nil
}

type TradeItemBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid      *uint32     `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	Price       *uint32     `protobuf:"varint,2,opt,name=price" json:"price,omitempty"`
	Count       *uint32     `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Guid        *string     `protobuf:"bytes,4,opt,name=guid" json:"guid,omitempty"`
	OrderId     *uint64     `protobuf:"varint,5,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	RefineLv    *uint32     `protobuf:"varint,6,opt,name=refine_lv,json=refineLv" json:"refine_lv,omitempty"`
	Overlap     *bool       `protobuf:"varint,8,opt,name=overlap" json:"overlap,omitempty"`
	IsExpired   *bool       `protobuf:"varint,9,opt,name=is_expired,json=isExpired" json:"is_expired,omitempty"`
	ItemData    *ItemData   `protobuf:"bytes,10,opt,name=item_data,json=itemData" json:"item_data,omitempty"`
	PublicityId *uint32     `protobuf:"varint,11,opt,name=publicity_id,json=publicityId,def=0" json:"publicity_id,omitempty"`
	EndTime     *uint32     `protobuf:"varint,12,opt,name=end_time,json=endTime,def=0" json:"end_time,omitempty"`
	Key         *string     `protobuf:"bytes,13,opt,name=key" json:"key,omitempty"`
	Charid      *uint64     `protobuf:"varint,14,opt,name=charid" json:"charid,omitempty"`
	Name        *string     `protobuf:"bytes,15,opt,name=name" json:"name,omitempty"`
	Type        *ETradeType `protobuf:"varint,16,opt,name=type,enum=Cmd.ETradeType,def=1" json:"type,omitempty"`
	UpRate      *uint32     `protobuf:"varint,17,opt,name=up_rate,json=upRate,def=0" json:"up_rate,omitempty"`
	DownRate    *uint32     `protobuf:"varint,18,opt,name=down_rate,json=downRate,def=0" json:"down_rate,omitempty"`
}

// Default values for TradeItemBaseInfo fields.
const (
	Default_TradeItemBaseInfo_PublicityId = uint32(0)
	Default_TradeItemBaseInfo_EndTime     = uint32(0)
	Default_TradeItemBaseInfo_Type        = ETradeType_ETRADETYPE_TRADE
	Default_TradeItemBaseInfo_UpRate      = uint32(0)
	Default_TradeItemBaseInfo_DownRate    = uint32(0)
)

func (x *TradeItemBaseInfo) Reset() {
	*x = TradeItemBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeItemBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeItemBaseInfo) ProtoMessage() {}

func (x *TradeItemBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeItemBaseInfo.ProtoReflect.Descriptor instead.
func (*TradeItemBaseInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{41}
}

func (x *TradeItemBaseInfo) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *TradeItemBaseInfo) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *TradeItemBaseInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *TradeItemBaseInfo) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *TradeItemBaseInfo) GetOrderId() uint64 {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return 0
}

func (x *TradeItemBaseInfo) GetRefineLv() uint32 {
	if x != nil && x.RefineLv != nil {
		return *x.RefineLv
	}
	return 0
}

func (x *TradeItemBaseInfo) GetOverlap() bool {
	if x != nil && x.Overlap != nil {
		return *x.Overlap
	}
	return false
}

func (x *TradeItemBaseInfo) GetIsExpired() bool {
	if x != nil && x.IsExpired != nil {
		return *x.IsExpired
	}
	return false
}

func (x *TradeItemBaseInfo) GetItemData() *ItemData {
	if x != nil {
		return x.ItemData
	}
	return nil
}

func (x *TradeItemBaseInfo) GetPublicityId() uint32 {
	if x != nil && x.PublicityId != nil {
		return *x.PublicityId
	}
	return Default_TradeItemBaseInfo_PublicityId
}

func (x *TradeItemBaseInfo) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return Default_TradeItemBaseInfo_EndTime
}

func (x *TradeItemBaseInfo) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *TradeItemBaseInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *TradeItemBaseInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TradeItemBaseInfo) GetType() ETradeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_TradeItemBaseInfo_Type
}

func (x *TradeItemBaseInfo) GetUpRate() uint32 {
	if x != nil && x.UpRate != nil {
		return *x.UpRate
	}
	return Default_TradeItemBaseInfo_UpRate
}

func (x *TradeItemBaseInfo) GetDownRate() uint32 {
	if x != nil && x.DownRate != nil {
		return *x.DownRate
	}
	return Default_TradeItemBaseInfo_DownRate
}

type ProcessEnchantItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=20" json:"param,omitempty"`
	Save   *bool      `protobuf:"varint,3,opt,name=save,def=0" json:"save,omitempty"`
	Itemid *string    `protobuf:"bytes,4,opt,name=itemid" json:"itemid,omitempty"`
}

// Default values for ProcessEnchantItemCmd fields.
const (
	Default_ProcessEnchantItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ProcessEnchantItemCmd_Param = ItemParam_ITEMPARAM_PROCESSENCHANT
	Default_ProcessEnchantItemCmd_Save  = bool(false)
)

func (x *ProcessEnchantItemCmd) Reset() {
	*x = ProcessEnchantItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessEnchantItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEnchantItemCmd) ProtoMessage() {}

func (x *ProcessEnchantItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEnchantItemCmd.ProtoReflect.Descriptor instead.
func (*ProcessEnchantItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{42}
}

func (x *ProcessEnchantItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ProcessEnchantItemCmd_Cmd
}

func (x *ProcessEnchantItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ProcessEnchantItemCmd_Param
}

func (x *ProcessEnchantItemCmd) GetSave() bool {
	if x != nil && x.Save != nil {
		return *x.Save
	}
	return Default_ProcessEnchantItemCmd_Save
}

func (x *ProcessEnchantItemCmd) GetItemid() string {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return ""
}

type EquipExchangeItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=21" json:"param,omitempty"`
	Guid  *string        `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Type  *EExchangeType `protobuf:"varint,4,opt,name=type,enum=Cmd.EExchangeType,def=0" json:"type,omitempty"`
}

// Default values for EquipExchangeItemCmd fields.
const (
	Default_EquipExchangeItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipExchangeItemCmd_Param = ItemParam_ITEMPARAM_EQUIPEXCHANGE
	Default_EquipExchangeItemCmd_Type  = EExchangeType_EEXCHANGETYPE_MIN
)

func (x *EquipExchangeItemCmd) Reset() {
	*x = EquipExchangeItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipExchangeItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipExchangeItemCmd) ProtoMessage() {}

func (x *EquipExchangeItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipExchangeItemCmd.ProtoReflect.Descriptor instead.
func (*EquipExchangeItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{43}
}

func (x *EquipExchangeItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipExchangeItemCmd_Cmd
}

func (x *EquipExchangeItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipExchangeItemCmd_Param
}

func (x *EquipExchangeItemCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *EquipExchangeItemCmd) GetType() EExchangeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_EquipExchangeItemCmd_Type
}

type OnOffStoreItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=22" json:"param,omitempty"`
	Open  *bool      `protobuf:"varint,3,opt,name=open,def=0" json:"open,omitempty"`
}

// Default values for OnOffStoreItemCmd fields.
const (
	Default_OnOffStoreItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_OnOffStoreItemCmd_Param = ItemParam_ITEMPARAM_ONOFFSTORE
	Default_OnOffStoreItemCmd_Open  = bool(false)
)

func (x *OnOffStoreItemCmd) Reset() {
	*x = OnOffStoreItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnOffStoreItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnOffStoreItemCmd) ProtoMessage() {}

func (x *OnOffStoreItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnOffStoreItemCmd.ProtoReflect.Descriptor instead.
func (*OnOffStoreItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{44}
}

func (x *OnOffStoreItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_OnOffStoreItemCmd_Cmd
}

func (x *OnOffStoreItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_OnOffStoreItemCmd_Param
}

func (x *OnOffStoreItemCmd) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return Default_OnOffStoreItemCmd_Open
}

type PackSlotNtfItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param   *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=23" json:"param,omitempty"`
	Type    *EPackType `protobuf:"varint,3,opt,name=type,enum=Cmd.EPackType,def=0" json:"type,omitempty"`
	Maxslot *uint32    `protobuf:"varint,4,opt,name=maxslot,def=0" json:"maxslot,omitempty"`
}

// Default values for PackSlotNtfItemCmd fields.
const (
	Default_PackSlotNtfItemCmd_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_PackSlotNtfItemCmd_Param   = ItemParam_ITEMPARAM_PACKSLOTNTF
	Default_PackSlotNtfItemCmd_Type    = EPackType_EPACKTYPE_MIN
	Default_PackSlotNtfItemCmd_Maxslot = uint32(0)
)

func (x *PackSlotNtfItemCmd) Reset() {
	*x = PackSlotNtfItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackSlotNtfItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackSlotNtfItemCmd) ProtoMessage() {}

func (x *PackSlotNtfItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackSlotNtfItemCmd.ProtoReflect.Descriptor instead.
func (*PackSlotNtfItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{45}
}

func (x *PackSlotNtfItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PackSlotNtfItemCmd_Cmd
}

func (x *PackSlotNtfItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PackSlotNtfItemCmd_Param
}

func (x *PackSlotNtfItemCmd) GetType() EPackType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_PackSlotNtfItemCmd_Type
}

func (x *PackSlotNtfItemCmd) GetMaxslot() uint32 {
	if x != nil && x.Maxslot != nil {
		return *x.Maxslot
	}
	return Default_PackSlotNtfItemCmd_Maxslot
}

type RestoreEquipItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param       *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=24" json:"param,omitempty"`
	Equipid     *string    `protobuf:"bytes,3,opt,name=equipid" json:"equipid,omitempty"`
	Strengthlv  *bool      `protobuf:"varint,4,opt,name=strengthlv,def=0" json:"strengthlv,omitempty"`
	Cardids     []string   `protobuf:"bytes,5,rep,name=cardids" json:"cardids,omitempty"`
	Enchant     *bool      `protobuf:"varint,6,opt,name=enchant,def=0" json:"enchant,omitempty"`
	Upgrade     *bool      `protobuf:"varint,7,opt,name=upgrade,def=0" json:"upgrade,omitempty"`
	Strengthlv2 *bool      `protobuf:"varint,8,opt,name=strengthlv2,def=0" json:"strengthlv2,omitempty"`
}

// Default values for RestoreEquipItemCmd fields.
const (
	Default_RestoreEquipItemCmd_Cmd         = Command_SCENE_USER_ITEM_PROTOCMD
	Default_RestoreEquipItemCmd_Param       = ItemParam_ITEMPARAM_RESTOREEQUIP
	Default_RestoreEquipItemCmd_Strengthlv  = bool(false)
	Default_RestoreEquipItemCmd_Enchant     = bool(false)
	Default_RestoreEquipItemCmd_Upgrade     = bool(false)
	Default_RestoreEquipItemCmd_Strengthlv2 = bool(false)
)

func (x *RestoreEquipItemCmd) Reset() {
	*x = RestoreEquipItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreEquipItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreEquipItemCmd) ProtoMessage() {}

func (x *RestoreEquipItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreEquipItemCmd.ProtoReflect.Descriptor instead.
func (*RestoreEquipItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{46}
}

func (x *RestoreEquipItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RestoreEquipItemCmd_Cmd
}

func (x *RestoreEquipItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RestoreEquipItemCmd_Param
}

func (x *RestoreEquipItemCmd) GetEquipid() string {
	if x != nil && x.Equipid != nil {
		return *x.Equipid
	}
	return ""
}

func (x *RestoreEquipItemCmd) GetStrengthlv() bool {
	if x != nil && x.Strengthlv != nil {
		return *x.Strengthlv
	}
	return Default_RestoreEquipItemCmd_Strengthlv
}

func (x *RestoreEquipItemCmd) GetCardids() []string {
	if x != nil {
		return x.Cardids
	}
	return nil
}

func (x *RestoreEquipItemCmd) GetEnchant() bool {
	if x != nil && x.Enchant != nil {
		return *x.Enchant
	}
	return Default_RestoreEquipItemCmd_Enchant
}

func (x *RestoreEquipItemCmd) GetUpgrade() bool {
	if x != nil && x.Upgrade != nil {
		return *x.Upgrade
	}
	return Default_RestoreEquipItemCmd_Upgrade
}

func (x *RestoreEquipItemCmd) GetStrengthlv2() bool {
	if x != nil && x.Strengthlv2 != nil {
		return *x.Strengthlv2
	}
	return Default_RestoreEquipItemCmd_Strengthlv2
}

type UseCountItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=25" json:"param,omitempty"`
	Itemid *uint32    `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	Count  *uint32    `protobuf:"varint,4,opt,name=count,def=0" json:"count,omitempty"`
}

// Default values for UseCountItemCmd fields.
const (
	Default_UseCountItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_UseCountItemCmd_Param = ItemParam_ITEMPARAM_USECOUNT
	Default_UseCountItemCmd_Count = uint32(0)
)

func (x *UseCountItemCmd) Reset() {
	*x = UseCountItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseCountItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseCountItemCmd) ProtoMessage() {}

func (x *UseCountItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseCountItemCmd.ProtoReflect.Descriptor instead.
func (*UseCountItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{47}
}

func (x *UseCountItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UseCountItemCmd_Cmd
}

func (x *UseCountItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UseCountItemCmd_Param
}

func (x *UseCountItemCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *UseCountItemCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_UseCountItemCmd_Count
}

type ExchangeCardItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=28" json:"param,omitempty"`
	Type     *EExchangeCardType `protobuf:"varint,3,opt,name=type,enum=Cmd.EExchangeCardType,def=1" json:"type,omitempty"`
	Npcid    *uint64            `protobuf:"varint,4,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Material []string           `protobuf:"bytes,5,rep,name=material" json:"material,omitempty"`
	Charid   *uint64            `protobuf:"varint,6,opt,name=charid,def=0" json:"charid,omitempty"`
	Cardid   *uint32            `protobuf:"varint,7,opt,name=cardid,def=0" json:"cardid,omitempty"`
	Anim     *bool              `protobuf:"varint,8,opt,name=anim,def=0" json:"anim,omitempty"`
	Items    []*ItemInfo        `protobuf:"bytes,9,rep,name=items" json:"items,omitempty"`
}

// Default values for ExchangeCardItemCmd fields.
const (
	Default_ExchangeCardItemCmd_Cmd    = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ExchangeCardItemCmd_Param  = ItemParam_ITEMPARAM_EXCHANGECARD
	Default_ExchangeCardItemCmd_Type   = EExchangeCardType_EEXCHANGECARDTYPE_DRAW
	Default_ExchangeCardItemCmd_Npcid  = uint64(0)
	Default_ExchangeCardItemCmd_Charid = uint64(0)
	Default_ExchangeCardItemCmd_Cardid = uint32(0)
	Default_ExchangeCardItemCmd_Anim   = bool(false)
)

func (x *ExchangeCardItemCmd) Reset() {
	*x = ExchangeCardItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeCardItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeCardItemCmd) ProtoMessage() {}

func (x *ExchangeCardItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeCardItemCmd.ProtoReflect.Descriptor instead.
func (*ExchangeCardItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{48}
}

func (x *ExchangeCardItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExchangeCardItemCmd_Cmd
}

func (x *ExchangeCardItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExchangeCardItemCmd_Param
}

func (x *ExchangeCardItemCmd) GetType() EExchangeCardType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ExchangeCardItemCmd_Type
}

func (x *ExchangeCardItemCmd) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_ExchangeCardItemCmd_Npcid
}

func (x *ExchangeCardItemCmd) GetMaterial() []string {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *ExchangeCardItemCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_ExchangeCardItemCmd_Charid
}

func (x *ExchangeCardItemCmd) GetCardid() uint32 {
	if x != nil && x.Cardid != nil {
		return *x.Cardid
	}
	return Default_ExchangeCardItemCmd_Cardid
}

func (x *ExchangeCardItemCmd) GetAnim() bool {
	if x != nil && x.Anim != nil {
		return *x.Anim
	}
	return Default_ExchangeCardItemCmd_Anim
}

func (x *ExchangeCardItemCmd) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetCountItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=29" json:"param,omitempty"`
	Itemid *uint32    `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	Count  *uint32    `protobuf:"varint,4,opt,name=count,def=0" json:"count,omitempty"`
	Source *ESource   `protobuf:"varint,5,opt,name=source,enum=Cmd.ESource,def=0" json:"source,omitempty"`
}

// Default values for GetCountItemCmd fields.
const (
	Default_GetCountItemCmd_Cmd    = Command_SCENE_USER_ITEM_PROTOCMD
	Default_GetCountItemCmd_Param  = ItemParam_ITEMPARAM_GETCOUNT
	Default_GetCountItemCmd_Count  = uint32(0)
	Default_GetCountItemCmd_Source = ESource_ESOURCE_MIN
)

func (x *GetCountItemCmd) Reset() {
	*x = GetCountItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCountItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCountItemCmd) ProtoMessage() {}

func (x *GetCountItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCountItemCmd.ProtoReflect.Descriptor instead.
func (*GetCountItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{49}
}

func (x *GetCountItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GetCountItemCmd_Cmd
}

func (x *GetCountItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GetCountItemCmd_Param
}

func (x *GetCountItemCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *GetCountItemCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_GetCountItemCmd_Count
}

func (x *GetCountItemCmd) GetSource() ESource {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return Default_GetCountItemCmd_Source
}

type SaveLoveLetterCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=30" json:"param,omitempty"`
	DwID  *uint32    `protobuf:"varint,3,opt,name=dwID" json:"dwID,omitempty"`
}

// Default values for SaveLoveLetterCmd fields.
const (
	Default_SaveLoveLetterCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_SaveLoveLetterCmd_Param = ItemParam_ITEMPARAM_SAVE_LOVE_LETTER
)

func (x *SaveLoveLetterCmd) Reset() {
	*x = SaveLoveLetterCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveLoveLetterCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveLoveLetterCmd) ProtoMessage() {}

func (x *SaveLoveLetterCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveLoveLetterCmd.ProtoReflect.Descriptor instead.
func (*SaveLoveLetterCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{50}
}

func (x *SaveLoveLetterCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SaveLoveLetterCmd_Cmd
}

func (x *SaveLoveLetterCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SaveLoveLetterCmd_Param
}

func (x *SaveLoveLetterCmd) GetDwID() uint32 {
	if x != nil && x.DwID != nil {
		return *x.DwID
	}
	return 0
}

type ItemDataShow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=31" json:"param,omitempty"`
	Items []*ItemData `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for ItemDataShow fields.
const (
	Default_ItemDataShow_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ItemDataShow_Param = ItemParam_ITEMPARAM_ITEMDATASHOW
)

func (x *ItemDataShow) Reset() {
	*x = ItemDataShow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemDataShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemDataShow) ProtoMessage() {}

func (x *ItemDataShow) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemDataShow.ProtoReflect.Descriptor instead.
func (*ItemDataShow) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{51}
}

func (x *ItemDataShow) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ItemDataShow_Cmd
}

func (x *ItemDataShow) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ItemDataShow_Param
}

func (x *ItemDataShow) GetItems() []*ItemData {
	if x != nil {
		return x.Items
	}
	return nil
}

type LotteryCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=32" json:"param,omitempty"`
	Year     *uint32       `protobuf:"varint,3,opt,name=year" json:"year,omitempty"`
	Month    *uint32       `protobuf:"varint,4,opt,name=month" json:"month,omitempty"`
	Npcid    *uint64       `protobuf:"varint,5,opt,name=npcid" json:"npcid,omitempty"`
	SkipAnim *bool         `protobuf:"varint,6,opt,name=skip_anim,json=skipAnim,def=0" json:"skip_anim,omitempty"`
	Price    *uint32       `protobuf:"varint,7,opt,name=price" json:"price,omitempty"`
	Ticket   *uint32       `protobuf:"varint,8,opt,name=ticket" json:"ticket,omitempty"`
	Type     *ELotteryType `protobuf:"varint,9,opt,name=type,enum=Cmd.ELotteryType" json:"type,omitempty"`
	Count    *uint32       `protobuf:"varint,10,opt,name=count" json:"count,omitempty"`
	Items    []*ItemInfo   `protobuf:"bytes,11,rep,name=items" json:"items,omitempty"`
	Charid   *uint64       `protobuf:"varint,12,opt,name=charid" json:"charid,omitempty"`
	Guid     *string       `protobuf:"bytes,13,opt,name=guid" json:"guid,omitempty"`
	TodayCnt *uint32       `protobuf:"varint,14,opt,name=today_cnt,json=todayCnt" json:"today_cnt,omitempty"`
}

// Default values for LotteryCmd fields.
const (
	Default_LotteryCmd_Cmd      = Command_SCENE_USER_ITEM_PROTOCMD
	Default_LotteryCmd_Param    = ItemParam_ITEMPARAM_LOTTERY
	Default_LotteryCmd_SkipAnim = bool(false)
)

func (x *LotteryCmd) Reset() {
	*x = LotteryCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryCmd) ProtoMessage() {}

func (x *LotteryCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryCmd.ProtoReflect.Descriptor instead.
func (*LotteryCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{52}
}

func (x *LotteryCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LotteryCmd_Cmd
}

func (x *LotteryCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LotteryCmd_Param
}

func (x *LotteryCmd) GetYear() uint32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *LotteryCmd) GetMonth() uint32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *LotteryCmd) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return 0
}

func (x *LotteryCmd) GetSkipAnim() bool {
	if x != nil && x.SkipAnim != nil {
		return *x.SkipAnim
	}
	return Default_LotteryCmd_SkipAnim
}

func (x *LotteryCmd) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *LotteryCmd) GetTicket() uint32 {
	if x != nil && x.Ticket != nil {
		return *x.Ticket
	}
	return 0
}

func (x *LotteryCmd) GetType() ELotteryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ELotteryType_ELotteryType_Min
}

func (x *LotteryCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *LotteryCmd) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *LotteryCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *LotteryCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *LotteryCmd) GetTodayCnt() uint32 {
	if x != nil && x.TodayCnt != nil {
		return *x.TodayCnt
	}
	return 0
}

type LotteryRecoveryCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=33" json:"param,omitempty"`
	Guids []string      `protobuf:"bytes,3,rep,name=guids" json:"guids,omitempty"`
	Npcid *uint64       `protobuf:"varint,4,opt,name=npcid" json:"npcid,omitempty"`
	Type  *ELotteryType `protobuf:"varint,5,opt,name=type,enum=Cmd.ELotteryType" json:"type,omitempty"`
}

// Default values for LotteryRecoveryCmd fields.
const (
	Default_LotteryRecoveryCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_LotteryRecoveryCmd_Param = ItemParam_ITEMPARAM_LOTTERY_RECOVERY
)

func (x *LotteryRecoveryCmd) Reset() {
	*x = LotteryRecoveryCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryRecoveryCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryRecoveryCmd) ProtoMessage() {}

func (x *LotteryRecoveryCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryRecoveryCmd.ProtoReflect.Descriptor instead.
func (*LotteryRecoveryCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{53}
}

func (x *LotteryRecoveryCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LotteryRecoveryCmd_Cmd
}

func (x *LotteryRecoveryCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LotteryRecoveryCmd_Param
}

func (x *LotteryRecoveryCmd) GetGuids() []string {
	if x != nil {
		return x.Guids
	}
	return nil
}

func (x *LotteryRecoveryCmd) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return 0
}

func (x *LotteryRecoveryCmd) GetType() ELotteryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ELotteryType_ELotteryType_Min
}

type LotterySubInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid        *uint32 `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	RecoverPrice  *uint32 `protobuf:"varint,2,opt,name=recover_price,json=recoverPrice" json:"recover_price,omitempty"`
	Rate          *uint32 `protobuf:"varint,3,opt,name=rate" json:"rate,omitempty"`
	Rarity        *string `protobuf:"bytes,4,opt,name=rarity" json:"rarity,omitempty"`
	CurBatch      *bool   `protobuf:"varint,5,opt,name=cur_batch,json=curBatch" json:"cur_batch,omitempty"`
	Id            *uint32 `protobuf:"varint,6,opt,name=id" json:"id,omitempty"`
	RecoverItemid *uint32 `protobuf:"varint,7,opt,name=recover_itemid,json=recoverItemid" json:"recover_itemid,omitempty"`
	Count         *uint32 `protobuf:"varint,8,opt,name=count" json:"count,omitempty"`
	FemaleItemid  *uint32 `protobuf:"varint,9,opt,name=female_itemid,json=femaleItemid" json:"female_itemid,omitempty"`
}

func (x *LotterySubInfo) Reset() {
	*x = LotterySubInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotterySubInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotterySubInfo) ProtoMessage() {}

func (x *LotterySubInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotterySubInfo.ProtoReflect.Descriptor instead.
func (*LotterySubInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{54}
}

func (x *LotterySubInfo) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *LotterySubInfo) GetRecoverPrice() uint32 {
	if x != nil && x.RecoverPrice != nil {
		return *x.RecoverPrice
	}
	return 0
}

func (x *LotterySubInfo) GetRate() uint32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *LotterySubInfo) GetRarity() string {
	if x != nil && x.Rarity != nil {
		return *x.Rarity
	}
	return ""
}

func (x *LotterySubInfo) GetCurBatch() bool {
	if x != nil && x.CurBatch != nil {
		return *x.CurBatch
	}
	return false
}

func (x *LotterySubInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *LotterySubInfo) GetRecoverItemid() uint32 {
	if x != nil && x.RecoverItemid != nil {
		return *x.RecoverItemid
	}
	return 0
}

func (x *LotterySubInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *LotterySubInfo) GetFemaleItemid() uint32 {
	if x != nil && x.FemaleItemid != nil {
		return *x.FemaleItemid
	}
	return 0
}

type LotteryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year       *uint32           `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month      *uint32           `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	Price      *uint32           `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
	Discount   *uint32           `protobuf:"varint,4,opt,name=discount" json:"discount,omitempty"`
	SubInfo    []*LotterySubInfo `protobuf:"bytes,5,rep,name=subInfo" json:"subInfo,omitempty"`
	Lotterybox *uint32           `protobuf:"varint,6,opt,name=lotterybox" json:"lotterybox,omitempty"`
}

func (x *LotteryInfo) Reset() {
	*x = LotteryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryInfo) ProtoMessage() {}

func (x *LotteryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryInfo.ProtoReflect.Descriptor instead.
func (*LotteryInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{55}
}

func (x *LotteryInfo) GetYear() uint32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *LotteryInfo) GetMonth() uint32 {
	if x != nil && x.Month != nil {
		return *x.Month
	}
	return 0
}

func (x *LotteryInfo) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *LotteryInfo) GetDiscount() uint32 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *LotteryInfo) GetSubInfo() []*LotterySubInfo {
	if x != nil {
		return x.SubInfo
	}
	return nil
}

func (x *LotteryInfo) GetLotterybox() uint32 {
	if x != nil && x.Lotterybox != nil {
		return *x.Lotterybox
	}
	return 0
}

type QueryLotteryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=34" json:"param,omitempty"`
	Infos    []*LotteryInfo `protobuf:"bytes,3,rep,name=infos" json:"infos,omitempty"`
	Type     *ELotteryType  `protobuf:"varint,4,opt,name=type,enum=Cmd.ELotteryType" json:"type,omitempty"`
	TodayCnt *uint32        `protobuf:"varint,5,opt,name=today_cnt,json=todayCnt" json:"today_cnt,omitempty"`
	MaxCnt   *uint32        `protobuf:"varint,6,opt,name=max_cnt,json=maxCnt" json:"max_cnt,omitempty"`
}

// Default values for QueryLotteryInfo fields.
const (
	Default_QueryLotteryInfo_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QueryLotteryInfo_Param = ItemParam_ITEMPARAM_QUERY_LOTTERYINFO
)

func (x *QueryLotteryInfo) Reset() {
	*x = QueryLotteryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryLotteryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLotteryInfo) ProtoMessage() {}

func (x *QueryLotteryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLotteryInfo.ProtoReflect.Descriptor instead.
func (*QueryLotteryInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{56}
}

func (x *QueryLotteryInfo) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryLotteryInfo_Cmd
}

func (x *QueryLotteryInfo) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryLotteryInfo_Param
}

func (x *QueryLotteryInfo) GetInfos() []*LotteryInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *QueryLotteryInfo) GetType() ELotteryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ELotteryType_ELotteryType_Min
}

func (x *QueryLotteryInfo) GetTodayCnt() uint32 {
	if x != nil && x.TodayCnt != nil {
		return *x.TodayCnt
	}
	return 0
}

func (x *QueryLotteryInfo) GetMaxCnt() uint32 {
	if x != nil && x.MaxCnt != nil {
		return *x.MaxCnt
	}
	return 0
}

type QuotaLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *uint64     `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Type  *EQuotaType `protobuf:"varint,2,opt,name=type,enum=Cmd.EQuotaType" json:"type,omitempty"`
	Time  *uint32     `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
}

func (x *QuotaLog) Reset() {
	*x = QuotaLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaLog) ProtoMessage() {}

func (x *QuotaLog) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaLog.ProtoReflect.Descriptor instead.
func (*QuotaLog) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{57}
}

func (x *QuotaLog) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *QuotaLog) GetType() EQuotaType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EQuotaType_EQuotaType_G_Charge
}

func (x *QuotaLog) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type QuotaDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value      *uint64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Left       *uint64 `protobuf:"varint,2,opt,name=left" json:"left,omitempty"`
	ExpireTime *uint32 `protobuf:"varint,3,opt,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
	Time       *uint32 `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
}

func (x *QuotaDetail) Reset() {
	*x = QuotaDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaDetail) ProtoMessage() {}

func (x *QuotaDetail) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaDetail.ProtoReflect.Descriptor instead.
func (*QuotaDetail) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{58}
}

func (x *QuotaDetail) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *QuotaDetail) GetLeft() uint64 {
	if x != nil && x.Left != nil {
		return *x.Left
	}
	return 0
}

func (x *QuotaDetail) GetExpireTime() uint32 {
	if x != nil && x.ExpireTime != nil {
		return *x.ExpireTime
	}
	return 0
}

func (x *QuotaDetail) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type ReqQuotaLogCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=40" json:"param,omitempty"`
	PageIndex *uint32     `protobuf:"varint,3,opt,name=page_index,json=pageIndex" json:"page_index,omitempty"`
	Log       []*QuotaLog `protobuf:"bytes,4,rep,name=log" json:"log,omitempty"`
}

// Default values for ReqQuotaLogCmd fields.
const (
	Default_ReqQuotaLogCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ReqQuotaLogCmd_Param = ItemParam_ITEMPARAM_REQ_QUOTA_LOG
)

func (x *ReqQuotaLogCmd) Reset() {
	*x = ReqQuotaLogCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQuotaLogCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQuotaLogCmd) ProtoMessage() {}

func (x *ReqQuotaLogCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQuotaLogCmd.ProtoReflect.Descriptor instead.
func (*ReqQuotaLogCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{59}
}

func (x *ReqQuotaLogCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqQuotaLogCmd_Cmd
}

func (x *ReqQuotaLogCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqQuotaLogCmd_Param
}

func (x *ReqQuotaLogCmd) GetPageIndex() uint32 {
	if x != nil && x.PageIndex != nil {
		return *x.PageIndex
	}
	return 0
}

func (x *ReqQuotaLogCmd) GetLog() []*QuotaLog {
	if x != nil {
		return x.Log
	}
	return nil
}

type ReqQuotaDetailCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param     *ItemParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=41" json:"param,omitempty"`
	PageIndex *uint32        `protobuf:"varint,3,opt,name=page_index,json=pageIndex" json:"page_index,omitempty"`
	Detail    []*QuotaDetail `protobuf:"bytes,4,rep,name=detail" json:"detail,omitempty"`
}

// Default values for ReqQuotaDetailCmd fields.
const (
	Default_ReqQuotaDetailCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_ReqQuotaDetailCmd_Param = ItemParam_ITEMPARAM_REQ_QUOTA_DETAIL
)

func (x *ReqQuotaDetailCmd) Reset() {
	*x = ReqQuotaDetailCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqQuotaDetailCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqQuotaDetailCmd) ProtoMessage() {}

func (x *ReqQuotaDetailCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqQuotaDetailCmd.ProtoReflect.Descriptor instead.
func (*ReqQuotaDetailCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{60}
}

func (x *ReqQuotaDetailCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqQuotaDetailCmd_Cmd
}

func (x *ReqQuotaDetailCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqQuotaDetailCmd_Param
}

func (x *ReqQuotaDetailCmd) GetPageIndex() uint32 {
	if x != nil && x.PageIndex != nil {
		return *x.PageIndex
	}
	return 0
}

func (x *ReqQuotaDetailCmd) GetDetail() []*QuotaDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type EquipPosData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos           *EEquipPos `protobuf:"varint,1,opt,name=pos,enum=Cmd.EEquipPos,def=0" json:"pos,omitempty"`
	Offstarttime  *uint32    `protobuf:"varint,2,opt,name=offstarttime,def=0" json:"offstarttime,omitempty"`
	Offendtime    *uint32    `protobuf:"varint,3,opt,name=offendtime,def=0" json:"offendtime,omitempty"`
	Protecttime   *uint32    `protobuf:"varint,4,opt,name=protecttime,def=0" json:"protecttime,omitempty"`
	Protectalways *uint32    `protobuf:"varint,5,opt,name=protectalways,def=0" json:"protectalways,omitempty"`
	Recordguid    *string    `protobuf:"bytes,6,opt,name=recordguid" json:"recordguid,omitempty"`
}

// Default values for EquipPosData fields.
const (
	Default_EquipPosData_Pos           = EEquipPos_EEQUIPPOS_MIN
	Default_EquipPosData_Offstarttime  = uint32(0)
	Default_EquipPosData_Offendtime    = uint32(0)
	Default_EquipPosData_Protecttime   = uint32(0)
	Default_EquipPosData_Protectalways = uint32(0)
)

func (x *EquipPosData) Reset() {
	*x = EquipPosData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipPosData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipPosData) ProtoMessage() {}

func (x *EquipPosData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipPosData.ProtoReflect.Descriptor instead.
func (*EquipPosData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{61}
}

func (x *EquipPosData) GetPos() EEquipPos {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_EquipPosData_Pos
}

func (x *EquipPosData) GetOffstarttime() uint32 {
	if x != nil && x.Offstarttime != nil {
		return *x.Offstarttime
	}
	return Default_EquipPosData_Offstarttime
}

func (x *EquipPosData) GetOffendtime() uint32 {
	if x != nil && x.Offendtime != nil {
		return *x.Offendtime
	}
	return Default_EquipPosData_Offendtime
}

func (x *EquipPosData) GetProtecttime() uint32 {
	if x != nil && x.Protecttime != nil {
		return *x.Protecttime
	}
	return Default_EquipPosData_Protecttime
}

func (x *EquipPosData) GetProtectalways() uint32 {
	if x != nil && x.Protectalways != nil {
		return *x.Protectalways
	}
	return Default_EquipPosData_Protectalways
}

func (x *EquipPosData) GetRecordguid() string {
	if x != nil && x.Recordguid != nil {
		return *x.Recordguid
	}
	return ""
}

type EquipPosDataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=42" json:"param,omitempty"`
	Datas []*EquipPosData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for EquipPosDataUpdate fields.
const (
	Default_EquipPosDataUpdate_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipPosDataUpdate_Param = ItemParam_ITEMPARAM_EQUIPPOSDATA_UPDATE
)

func (x *EquipPosDataUpdate) Reset() {
	*x = EquipPosDataUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipPosDataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipPosDataUpdate) ProtoMessage() {}

func (x *EquipPosDataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipPosDataUpdate.ProtoReflect.Descriptor instead.
func (*EquipPosDataUpdate) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{62}
}

func (x *EquipPosDataUpdate) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipPosDataUpdate_Cmd
}

func (x *EquipPosDataUpdate) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipPosDataUpdate_Param
}

func (x *EquipPosDataUpdate) GetDatas() []*EquipPosData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type MatItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid *uint32 `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	Num    *uint32 `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
}

func (x *MatItemInfo) Reset() {
	*x = MatItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatItemInfo) ProtoMessage() {}

func (x *MatItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatItemInfo.ProtoReflect.Descriptor instead.
func (*MatItemInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{63}
}

func (x *MatItemInfo) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *MatItemInfo) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type HighRefineMatComposeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param        *ItemParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=36" json:"param,omitempty"`
	Dataid       *uint32        `protobuf:"varint,3,opt,name=dataid" json:"dataid,omitempty"`
	Npcid        *uint64        `protobuf:"varint,4,opt,name=npcid" json:"npcid,omitempty"`
	Mainmaterial []*MatItemInfo `protobuf:"bytes,5,rep,name=mainmaterial" json:"mainmaterial,omitempty"`
	Vicematerial []*MatItemInfo `protobuf:"bytes,6,rep,name=vicematerial" json:"vicematerial,omitempty"`
}

// Default values for HighRefineMatComposeCmd fields.
const (
	Default_HighRefineMatComposeCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_HighRefineMatComposeCmd_Param = ItemParam_ITEMPARAM_HIGHREFINE_MATCOMPOSE
)

func (x *HighRefineMatComposeCmd) Reset() {
	*x = HighRefineMatComposeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighRefineMatComposeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighRefineMatComposeCmd) ProtoMessage() {}

func (x *HighRefineMatComposeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighRefineMatComposeCmd.ProtoReflect.Descriptor instead.
func (*HighRefineMatComposeCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{64}
}

func (x *HighRefineMatComposeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HighRefineMatComposeCmd_Cmd
}

func (x *HighRefineMatComposeCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HighRefineMatComposeCmd_Param
}

func (x *HighRefineMatComposeCmd) GetDataid() uint32 {
	if x != nil && x.Dataid != nil {
		return *x.Dataid
	}
	return 0
}

func (x *HighRefineMatComposeCmd) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return 0
}

func (x *HighRefineMatComposeCmd) GetMainmaterial() []*MatItemInfo {
	if x != nil {
		return x.Mainmaterial
	}
	return nil
}

func (x *HighRefineMatComposeCmd) GetVicematerial() []*MatItemInfo {
	if x != nil {
		return x.Vicematerial
	}
	return nil
}

type HighRefineCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param  *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=37" json:"param,omitempty"`
	Dataid *uint32    `protobuf:"varint,3,opt,name=dataid" json:"dataid,omitempty"`
}

// Default values for HighRefineCmd fields.
const (
	Default_HighRefineCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_HighRefineCmd_Param = ItemParam_ITEMPARAM_HIGHREFINE
)

func (x *HighRefineCmd) Reset() {
	*x = HighRefineCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighRefineCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighRefineCmd) ProtoMessage() {}

func (x *HighRefineCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighRefineCmd.ProtoReflect.Descriptor instead.
func (*HighRefineCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{65}
}

func (x *HighRefineCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HighRefineCmd_Cmd
}

func (x *HighRefineCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HighRefineCmd_Param
}

func (x *HighRefineCmd) GetDataid() uint32 {
	if x != nil && x.Dataid != nil {
		return *x.Dataid
	}
	return 0
}

type HighRefineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos   *EEquipPos `protobuf:"varint,1,opt,name=pos,enum=Cmd.EEquipPos" json:"pos,omitempty"`
	Level []uint32   `protobuf:"varint,2,rep,name=level" json:"level,omitempty"`
}

func (x *HighRefineData) Reset() {
	*x = HighRefineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighRefineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighRefineData) ProtoMessage() {}

func (x *HighRefineData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighRefineData.ProtoReflect.Descriptor instead.
func (*HighRefineData) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{66}
}

func (x *HighRefineData) GetPos() EEquipPos {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return EEquipPos_EEQUIPPOS_MIN
}

func (x *HighRefineData) GetLevel() []uint32 {
	if x != nil {
		return x.Level
	}
	return nil
}

type NtfHighRefineDataCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=38" json:"param,omitempty"`
	Datas []*HighRefineData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for NtfHighRefineDataCmd fields.
const (
	Default_NtfHighRefineDataCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_NtfHighRefineDataCmd_Param = ItemParam_ITEMPARAM_NTF_HIGHTREFINE_DATA
)

func (x *NtfHighRefineDataCmd) Reset() {
	*x = NtfHighRefineDataCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfHighRefineDataCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfHighRefineDataCmd) ProtoMessage() {}

func (x *NtfHighRefineDataCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfHighRefineDataCmd.ProtoReflect.Descriptor instead.
func (*NtfHighRefineDataCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{67}
}

func (x *NtfHighRefineDataCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfHighRefineDataCmd_Cmd
}

func (x *NtfHighRefineDataCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfHighRefineDataCmd_Param
}

func (x *NtfHighRefineDataCmd) GetDatas() []*HighRefineData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type UpdateHighRefineDataCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=39" json:"param,omitempty"`
	Data  *HighRefineData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

// Default values for UpdateHighRefineDataCmd fields.
const (
	Default_UpdateHighRefineDataCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_UpdateHighRefineDataCmd_Param = ItemParam_ITEMPARAM_UPDATE_HIGHTREFINE_DATA
)

func (x *UpdateHighRefineDataCmd) Reset() {
	*x = UpdateHighRefineDataCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHighRefineDataCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHighRefineDataCmd) ProtoMessage() {}

func (x *UpdateHighRefineDataCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHighRefineDataCmd.ProtoReflect.Descriptor instead.
func (*UpdateHighRefineDataCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{68}
}

func (x *UpdateHighRefineDataCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateHighRefineDataCmd_Cmd
}

func (x *UpdateHighRefineDataCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateHighRefineDataCmd_Param
}

func (x *UpdateHighRefineDataCmd) GetData() *HighRefineData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UseCodItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=43" json:"param,omitempty"`
	Guid  *string    `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Code  *string    `protobuf:"bytes,4,opt,name=code" json:"code,omitempty"`
}

// Default values for UseCodItemCmd fields.
const (
	Default_UseCodItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_UseCodItemCmd_Param = ItemParam_ITEMPARAM_USE_CODE_ITEM
)

func (x *UseCodItemCmd) Reset() {
	*x = UseCodItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseCodItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseCodItemCmd) ProtoMessage() {}

func (x *UseCodItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseCodItemCmd.ProtoReflect.Descriptor instead.
func (*UseCodItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{69}
}

func (x *UseCodItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UseCodItemCmd_Cmd
}

func (x *UseCodItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UseCodItemCmd_Param
}

func (x *UseCodItemCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *UseCodItemCmd) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

type AddJobLevelItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=44" json:"param,omitempty"`
	Item  *uint32    `protobuf:"varint,3,opt,name=item,def=0" json:"item,omitempty"`
	Num   *uint32    `protobuf:"varint,4,opt,name=num,def=0" json:"num,omitempty"`
}

// Default values for AddJobLevelItemCmd fields.
const (
	Default_AddJobLevelItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_AddJobLevelItemCmd_Param = ItemParam_ITEMPARAM_ADD_JOBLEVEL
	Default_AddJobLevelItemCmd_Item  = uint32(0)
	Default_AddJobLevelItemCmd_Num   = uint32(0)
)

func (x *AddJobLevelItemCmd) Reset() {
	*x = AddJobLevelItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddJobLevelItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddJobLevelItemCmd) ProtoMessage() {}

func (x *AddJobLevelItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddJobLevelItemCmd.ProtoReflect.Descriptor instead.
func (*AddJobLevelItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{70}
}

func (x *AddJobLevelItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AddJobLevelItemCmd_Cmd
}

func (x *AddJobLevelItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AddJobLevelItemCmd_Param
}

func (x *AddJobLevelItemCmd) GetItem() uint32 {
	if x != nil && x.Item != nil {
		return *x.Item
	}
	return Default_AddJobLevelItemCmd_Item
}

func (x *AddJobLevelItemCmd) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return Default_AddJobLevelItemCmd_Num
}

type LotterGivBuyCountCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=46" json:"param,omitempty"`
	GotCount *uint32    `protobuf:"varint,3,opt,name=got_count,json=gotCount" json:"got_count,omitempty"`
	MaxCount *uint32    `protobuf:"varint,4,opt,name=max_count,json=maxCount" json:"max_count,omitempty"`
}

// Default values for LotterGivBuyCountCmd fields.
const (
	Default_LotterGivBuyCountCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_LotterGivBuyCountCmd_Param = ItemParam_ITEMPARAM_LOTTERY_GIVE_BUY_COUNT
)

func (x *LotterGivBuyCountCmd) Reset() {
	*x = LotterGivBuyCountCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotterGivBuyCountCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotterGivBuyCountCmd) ProtoMessage() {}

func (x *LotterGivBuyCountCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotterGivBuyCountCmd.ProtoReflect.Descriptor instead.
func (*LotterGivBuyCountCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{71}
}

func (x *LotterGivBuyCountCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LotterGivBuyCountCmd_Cmd
}

func (x *LotterGivBuyCountCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LotterGivBuyCountCmd_Param
}

func (x *LotterGivBuyCountCmd) GetGotCount() uint32 {
	if x != nil && x.GotCount != nil {
		return *x.GotCount
	}
	return 0
}

func (x *LotterGivBuyCountCmd) GetMaxCount() uint32 {
	if x != nil && x.MaxCount != nil {
		return *x.MaxCount
	}
	return 0
}

type GiveWeddingDressCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param      *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=47" json:"param,omitempty"`
	Guid       *string    `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Content    *string    `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	Receiverid *uint64    `protobuf:"varint,8,opt,name=receiverid" json:"receiverid,omitempty"`
}

// Default values for GiveWeddingDressCmd fields.
const (
	Default_GiveWeddingDressCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_GiveWeddingDressCmd_Param = ItemParam_ITEMPARAM_GIVE_WEDDING_DRESS
)

func (x *GiveWeddingDressCmd) Reset() {
	*x = GiveWeddingDressCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiveWeddingDressCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveWeddingDressCmd) ProtoMessage() {}

func (x *GiveWeddingDressCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveWeddingDressCmd.ProtoReflect.Descriptor instead.
func (*GiveWeddingDressCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{72}
}

func (x *GiveWeddingDressCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GiveWeddingDressCmd_Cmd
}

func (x *GiveWeddingDressCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GiveWeddingDressCmd_Param
}

func (x *GiveWeddingDressCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *GiveWeddingDressCmd) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *GiveWeddingDressCmd) GetReceiverid() uint64 {
	if x != nil && x.Receiverid != nil {
		return *x.Receiverid
	}
	return 0
}

type QuickStoreItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=48" json:"param,omitempty"`
	Items []*ItemInfo `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for QuickStoreItemCmd fields.
const (
	Default_QuickStoreItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QuickStoreItemCmd_Param = ItemParam_ITEMPARAM_QUICK_STOREITEM
)

func (x *QuickStoreItemCmd) Reset() {
	*x = QuickStoreItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickStoreItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickStoreItemCmd) ProtoMessage() {}

func (x *QuickStoreItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickStoreItemCmd.ProtoReflect.Descriptor instead.
func (*QuickStoreItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{73}
}

func (x *QuickStoreItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuickStoreItemCmd_Cmd
}

func (x *QuickStoreItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuickStoreItemCmd_Param
}

func (x *QuickStoreItemCmd) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type QuickSellItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=49" json:"param,omitempty"`
	Items []*SItem   `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for QuickSellItemCmd fields.
const (
	Default_QuickSellItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QuickSellItemCmd_Param = ItemParam_ITEMPARAM_QUICK_SELLITEM
)

func (x *QuickSellItemCmd) Reset() {
	*x = QuickSellItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickSellItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickSellItemCmd) ProtoMessage() {}

func (x *QuickSellItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickSellItemCmd.ProtoReflect.Descriptor instead.
func (*QuickSellItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{74}
}

func (x *QuickSellItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuickSellItemCmd_Cmd
}

func (x *QuickSellItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuickSellItemCmd_Param
}

func (x *QuickSellItemCmd) GetItems() []*SItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type EnchantTransItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param    *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=50" json:"param,omitempty"`
	FromGuid *string    `protobuf:"bytes,3,opt,name=from_guid,json=fromGuid" json:"from_guid,omitempty"`
	ToGuid   *string    `protobuf:"bytes,4,opt,name=to_guid,json=toGuid" json:"to_guid,omitempty"`
	Success  *bool      `protobuf:"varint,5,opt,name=success,def=0" json:"success,omitempty"`
}

// Default values for EnchantTransItemCmd fields.
const (
	Default_EnchantTransItemCmd_Cmd     = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EnchantTransItemCmd_Param   = ItemParam_ITEMPARAM_ENCHANT_TRANS
	Default_EnchantTransItemCmd_Success = bool(false)
)

func (x *EnchantTransItemCmd) Reset() {
	*x = EnchantTransItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnchantTransItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnchantTransItemCmd) ProtoMessage() {}

func (x *EnchantTransItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnchantTransItemCmd.ProtoReflect.Descriptor instead.
func (*EnchantTransItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{75}
}

func (x *EnchantTransItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnchantTransItemCmd_Cmd
}

func (x *EnchantTransItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnchantTransItemCmd_Param
}

func (x *EnchantTransItemCmd) GetFromGuid() string {
	if x != nil && x.FromGuid != nil {
		return *x.FromGuid
	}
	return ""
}

func (x *EnchantTransItemCmd) GetToGuid() string {
	if x != nil && x.ToGuid != nil {
		return *x.ToGuid
	}
	return ""
}

func (x *EnchantTransItemCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_EnchantTransItemCmd_Success
}

type QueryLotteryHeadItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=51" json:"param,omitempty"`
	Ids   []uint32   `protobuf:"varint,3,rep,name=ids" json:"ids,omitempty"`
}

// Default values for QueryLotteryHeadItemCmd fields.
const (
	Default_QueryLotteryHeadItemCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_QueryLotteryHeadItemCmd_Param = ItemParam_ITEMPARAM_QUERY_LOTTERYHEAD
)

func (x *QueryLotteryHeadItemCmd) Reset() {
	*x = QueryLotteryHeadItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryLotteryHeadItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLotteryHeadItemCmd) ProtoMessage() {}

func (x *QueryLotteryHeadItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLotteryHeadItemCmd.ProtoReflect.Descriptor instead.
func (*QueryLotteryHeadItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{76}
}

func (x *QueryLotteryHeadItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryLotteryHeadItemCmd_Cmd
}

func (x *QueryLotteryHeadItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryLotteryHeadItemCmd_Param
}

func (x *QueryLotteryHeadItemCmd) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type LotteryRateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Rate *uint32 `protobuf:"varint,2,opt,name=rate" json:"rate,omitempty"`
}

func (x *LotteryRateInfo) Reset() {
	*x = LotteryRateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryRateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryRateInfo) ProtoMessage() {}

func (x *LotteryRateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryRateInfo.ProtoReflect.Descriptor instead.
func (*LotteryRateInfo) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{77}
}

func (x *LotteryRateInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *LotteryRateInfo) GetRate() uint32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

type LotteryRateQueryCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param *ItemParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=52" json:"param,omitempty"`
	Type  *ELotteryType      `protobuf:"varint,3,opt,name=type,enum=Cmd.ELotteryType" json:"type,omitempty"`
	Infos []*LotteryRateInfo `protobuf:"bytes,4,rep,name=infos" json:"infos,omitempty"`
}

// Default values for LotteryRateQueryCmd fields.
const (
	Default_LotteryRateQueryCmd_Cmd   = Command_SCENE_USER_ITEM_PROTOCMD
	Default_LotteryRateQueryCmd_Param = ItemParam_ITEMPARAM_LOTTERY_RATE_QUERY
)

func (x *LotteryRateQueryCmd) Reset() {
	*x = LotteryRateQueryCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LotteryRateQueryCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LotteryRateQueryCmd) ProtoMessage() {}

func (x *LotteryRateQueryCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LotteryRateQueryCmd.ProtoReflect.Descriptor instead.
func (*LotteryRateQueryCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{78}
}

func (x *LotteryRateQueryCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LotteryRateQueryCmd_Cmd
}

func (x *LotteryRateQueryCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LotteryRateQueryCmd_Param
}

func (x *LotteryRateQueryCmd) GetType() ELotteryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ELotteryType_ELotteryType_Min
}

func (x *LotteryRateQueryCmd) GetInfos() []*LotteryRateInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type EquipComposeItemCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=6" json:"cmd,omitempty"`
	Param          *ItemParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ItemParam,def=53" json:"param,omitempty"`
	Id             *uint32    `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Materialequips []string   `protobuf:"bytes,4,rep,name=materialequips" json:"materialequips,omitempty"`
	Retmsg         *uint32    `protobuf:"varint,5,opt,name=retmsg,def=0" json:"retmsg,omitempty"`
}

// Default values for EquipComposeItemCmd fields.
const (
	Default_EquipComposeItemCmd_Cmd    = Command_SCENE_USER_ITEM_PROTOCMD
	Default_EquipComposeItemCmd_Param  = ItemParam_ITEMPARAM_EQUIPCOMPOSE
	Default_EquipComposeItemCmd_Id     = uint32(0)
	Default_EquipComposeItemCmd_Retmsg = uint32(0)
)

func (x *EquipComposeItemCmd) Reset() {
	*x = EquipComposeItemCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneItem_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipComposeItemCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipComposeItemCmd) ProtoMessage() {}

func (x *EquipComposeItemCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneItem_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipComposeItemCmd.ProtoReflect.Descriptor instead.
func (*EquipComposeItemCmd) Descriptor() ([]byte, []int) {
	return file_SceneItem_proto_rawDescGZIP(), []int{79}
}

func (x *EquipComposeItemCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipComposeItemCmd_Cmd
}

func (x *EquipComposeItemCmd) GetParam() ItemParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipComposeItemCmd_Param
}

func (x *EquipComposeItemCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_EquipComposeItemCmd_Id
}

func (x *EquipComposeItemCmd) GetMaterialequips() []string {
	if x != nil {
		return x.Materialequips
	}
	return nil
}

func (x *EquipComposeItemCmd) GetRetmsg() uint32 {
	if x != nil && x.Retmsg != nil {
		return *x.Retmsg
	}
	return Default_EquipComposeItemCmd_Retmsg
}

var File_SceneItem_proto protoreflect.FileDescriptor

var file_SceneItem_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x06, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x11, 0x0a, 0x02, 0x63, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x02,
	0x63, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x0d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x42, 0x69, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x0d, 0x45, 0x42, 0x49, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x49, 0x4e, 0x52, 0x04, 0x62, 0x69, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0f, 0x45, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0e, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a,
	0x0e, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x05, 0x69, 0x73, 0x6e, 0x65, 0x77,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x69,
	0x73, 0x6e, 0x65, 0x77, 0x12, 0x23, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x63, 0x61, 0x72, 0x64, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x06, 0x69, 0x73, 0x68,
	0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x06, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x69, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x08, 0x69, 0x73, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x70, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x70, 0x63, 0x12, 0x1d, 0x0a,
	0x08, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6c, 0x76, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x08, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6c, 0x76, 0x12, 0x23, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x1d, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x22, 0x37, 0x0a, 0x0d, 0x52, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x13, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x22, 0xe0, 0x03, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x6c, 0x76, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x6c, 0x76, 0x12, 0x1d, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6c, 0x76, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x6c, 0x76, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x73, 0x6c,
	0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x06, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x6c, 0x76, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x6c, 0x76, 0x12, 0x17, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x0e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x0e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0c, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x6c, 0x76, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x6c, 0x76, 0x32, 0x12, 0x37, 0x0a, 0x0f,
	0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x6c, 0x76, 0x32, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x6c, 0x76,
	0x32, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x59, 0x0a,
	0x0b, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x31, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0d, 0x45, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x48, 0x0a, 0x0c, 0x45, 0x6e, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66,
	0x69, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x61,
	0x74, 0x74, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x05, 0x61, 0x74,
	0x74, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x22, 0x54, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x21, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x08, 0x45,
	0x67, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x21, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21,
	0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x61, 0x72,
	0x64, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x22, 0x4a, 0x0a, 0x0c, 0x50, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x22, 0x0a, 0x04, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x52, 0x04,
	0x65, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x22, 0xf7, 0x07, 0x0a,
	0x07, 0x45, 0x67, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x13, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x1f, 0x0a,
	0x09, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x09, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x65, 0x78, 0x70, 0x12, 0x1f,
	0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x78, 0x70, 0x12,
	0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x11, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x02, 0x6c, 0x76, 0x12, 0x1d, 0x0a, 0x08, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c,
	0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6c, 0x76, 0x12, 0x15, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x21, 0x0a, 0x0a, 0x72,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x11,
	0x0a, 0x02, 0x68, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x68,
	0x70, 0x12, 0x23, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x48, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x69, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x63, 0x69, 0x74, 0x65, 0x12, 0x28,
	0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x48,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x68, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x47, 0x69, 0x66, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78,
	0x63, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x63, 0x69, 0x74, 0x65, 0x47, 0x69,
	0x66, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x47, 0x69, 0x66, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x74, 0x6f,
	0x75, 0x63, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x66,
	0x65, 0x65, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x61, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x76, 0x61, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x67, 0x67, 0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x06, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x66, 0x66, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x62, 0x75, 0x66, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x6f, 0x66,
	0x66, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x6f, 0x66, 0x66, 0x12, 0x28, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x77, 0x65, 0x61, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x50, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x77, 0x65, 0x61, 0x72, 0x73, 0x12, 0x27, 0x0a,
	0x05, 0x77, 0x65, 0x61, 0x72, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x50, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x77, 0x65, 0x61, 0x72, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x76, 0x65, 0x4c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x62, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32, 0x22,
	0x39, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x22, 0xf5, 0x02, 0x0a, 0x0b, 0x57,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x31, 0x12, 0x1b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x32,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x32, 0x12, 0x23, 0x0a, 0x0b, 0x77, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x77, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x69, 0x64, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x69, 0x64, 0x78, 0x12, 0x1f, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x79, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x22, 0x38, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x90, 0x04, 0x0a,
	0x08, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x07,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x65, 0x71, 0x75, 0x69, 0x70, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x65, 0x71, 0x75, 0x69, 0x70, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x65, 0x67,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x67,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x65, 0x67, 0x67, 0x12, 0x2b, 0x0a, 0x06, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x4c, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x77, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x77,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22,
	0xf7, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x0d, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x97, 0x02, 0x0a, 0x0d, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x0d, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x55, 0x53, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x67, 0x75, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x37,
	0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xda, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x41, 0x47, 0x45, 0x53, 0x4f, 0x52, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x31,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x50, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0d, 0x45, 0x50,
	0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x22, 0xae, 0x02, 0x0a, 0x05, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x38,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0f, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x33, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x3a, 0x0e,
	0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04,
	0x6f, 0x70, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f,
	0x73, 0x3a, 0x0d, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x4d, 0x49, 0x4e,
	0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x34, 0x0a, 0x05, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x08,
	0x53, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x4c,
	0x4c, 0x49, 0x54, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05,
	0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05,
	0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa5, 0x03, 0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x64, 0x65,
	0x73, 0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x72, 0x69, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x05, 0x6f, 0x6c, 0x64, 0x6c, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x05, 0x6f, 0x6c, 0x64, 0x6c, 0x76, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x65, 0x77, 0x6c,
	0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x65, 0x77, 0x6c,
	0x76, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x13, 0x45, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47,
	0x54, 0x48, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x45, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54,
	0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xce, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x37,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x10, 0x45, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0c, 0x71, 0x75, 0x63, 0x69, 0x6b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0c, 0x71, 0x75, 0x63, 0x69, 0x6b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x22, 0xa5, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x44, 0x4f, 0x4e, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x19, 0x0a,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x22, 0xf0, 0x02, 0x0a, 0x0b, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6c, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6c, 0x76, 0x12, 0x3f,
	0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x3a, 0x11, 0x45, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x17, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0a, 0x73, 0x61, 0x66, 0x65,
	0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x67, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x67, 0x75, 0x69, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x0e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x44,
	0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x14,
	0x45, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x83, 0x02, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x53, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67,
	0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x45, 0x51, 0x55, 0x49, 0x50, 0x44, 0x41, 0x54, 0x41, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb8, 0x01, 0x0a, 0x0d, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x0d, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x43, 0x41, 0x52,
	0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x43, 0x61,
	0x72, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x3a, 0x0d, 0x45, 0x43, 0x41, 0x52, 0x44, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x72, 0x64, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x72, 0x64, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x67, 0x75, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x08, 0x49,
	0x74, 0x65, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x53, 0x48, 0x4f, 0x57, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0xa8, 0x01, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x36, 0x34, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x48, 0x4f, 0x57, 0x36, 0x34, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x0b,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x52, 0x45, 0x50, 0x41, 0x49, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x75, 0x66, 0x66, 0x67, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x66, 0x66, 0x67, 0x75, 0x69, 0x64, 0x22, 0x97, 0x01, 0x0a,
	0x07, 0x48, 0x69, 0x6e, 0x74, 0x4e, 0x74, 0x66, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x49, 0x4e,
	0x54, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x43, 0x48,
	0x41, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x45, 0x4e,
	0x43, 0x48, 0x41, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x4c, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xfd,
	0x03, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x5f, 0x6c, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x4c, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2a, 0x0a,
	0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0c, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x75, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x22, 0xc4,
	0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x19, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x73, 0x61, 0x76, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x69, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x14, 0x45, 0x71, 0x75, 0x69, 0x70, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x45,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x4f, 0x6e, 0x4f, 0x66, 0x66,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4f, 0x4e, 0x4f, 0x46, 0x46, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x19, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0xdb, 0x01,
	0x0a, 0x12, 0x50, 0x61, 0x63, 0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x74, 0x66, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x49,
	0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x53, 0x4c, 0x4f,
	0x54, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x50, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0d, 0x45, 0x50, 0x41, 0x43, 0x4b,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0xd3, 0x02, 0x0a, 0x13,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x6c, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x6c, 0x76, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x61, 0x72, 0x64, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x61, 0x72, 0x64, 0x69, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x6c, 0x76, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x6c, 0x76,
	0x32, 0x22, 0xb6, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfc, 0x02, 0x0a, 0x13, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x43,
	0x41, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x16, 0x45, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x43, 0x41, 0x52, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x06, 0x63, 0x61, 0x72, 0x64, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x61, 0x6e, 0x69,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04,
	0x61, 0x6e, 0x69, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x47, 0x45, 0x54, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x3a, 0x0b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x6f,
	0x76, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x53, 0x41, 0x56, 0x45, 0x5f, 0x4c, 0x4f, 0x56, 0x45, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x77, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x77, 0x49, 0x44, 0x22, 0xab, 0x01, 0x0a, 0x0c,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x53, 0x48, 0x4f, 0x57, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xbc, 0x03, 0x0a, 0x0a, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x09, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x41, 0x6e, 0x69, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x25, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x43, 0x6e, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6d, 0x64, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x75, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x75, 0x69, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x88,
	0x02, 0x0a, 0x0e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75,
	0x72, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x65, 0x6d,
	0x61, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x0b, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x62,
	0x6f, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x62, 0x6f, 0x78, 0x22, 0x94, 0x02, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1b, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x25,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x43,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x43, 0x6e, 0x74, 0x22, 0x59, 0x0a, 0x08, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x0b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x4c, 0x6f, 0x67, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f,
	0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x4c, 0x4f, 0x47, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1f, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67,
	0x22, 0xd8, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x1a, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x51,
	0x55, 0x4f, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x28, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xf7, 0x01, 0x0a, 0x0c,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x3a, 0x0d, 0x45, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x50, 0x4f, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x25, 0x0a,
	0x0c, 0x6f, 0x66, 0x66, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x6e, 0x64, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6f, 0x66, 0x66,
	0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x67, 0x75, 0x69, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x12, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50,
	0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x22, 0x37, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0xb4, 0x02,
	0x0a, 0x17, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1f, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x53, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61,
	0x74, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x34,
	0x0a, 0x0c, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x22, 0x9d, 0x01, 0x0a, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x14, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x52,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x61, 0x74, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61,
	0x74, 0x61, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x0e, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xc1,
	0x01, 0x0a, 0x14, 0x4e, 0x74, 0x66, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x1e, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x54, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x69, 0x67,
	0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x69, 0x67,
	0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6d, 0x64, 0x12, 0x38,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x54, 0x52,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb0, 0x01, 0x0a, 0x0d, 0x55,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb8, 0x01,
	0x0a, 0x12, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x49,
	0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4a, 0x4f, 0x42,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x12, 0x13, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0xd2, 0x01, 0x0a, 0x14, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x47, 0x69, 0x76, 0x42, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6d,
	0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x49,
	0x56, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe1, 0x01,
	0x0a, 0x13, 0x47, 0x69, 0x76, 0x65, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x65,
	0x73, 0x73, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c,
	0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x5f, 0x57,
	0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x52, 0x45, 0x53, 0x53, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x69,
	0x64, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x19, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x49, 0x43,
	0x4b, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x69, 0x63,
	0x6b, 0x53, 0x65, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x4d, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64,
	0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72,
	0x6f, 0x6d, 0x47, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x47, 0x75, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0xa8, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x48, 0x65, 0x61, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x48, 0x45,
	0x41, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x0f, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x13, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6d, 0x64, 0x12, 0x38,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0xe3, 0x01, 0x0a, 0x13, 0x45, 0x71, 0x75, 0x69, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x65, 0x71, 0x75, 0x69, 0x70, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x72, 0x65,
	0x74, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x72,
	0x65, 0x74, 0x6d, 0x73, 0x67, 0x2a, 0x9b, 0x0b, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x41, 0x47, 0x45, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x55, 0x53, 0x45,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x53, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x53, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x53, 0x54, 0x52,
	0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x10, 0x09, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x45, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0x0b, 0x12,
	0x17, 0x0a, 0x13, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x45, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x0e,
	0x12, 0x17, 0x0a, 0x13, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x43, 0x41, 0x52, 0x44, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x48, 0x4f, 0x57, 0x10,
	0x10, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52,
	0x45, 0x50, 0x41, 0x49, 0x52, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x4e, 0x54, 0x46, 0x10, 0x12, 0x12, 0x15,
	0x0a, 0x11, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x43, 0x48,
	0x41, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e,
	0x54, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x15,
	0x12, 0x18, 0x0a, 0x14, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x4e,
	0x4f, 0x46, 0x46, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x53, 0x4c, 0x4f, 0x54,
	0x4e, 0x54, 0x46, 0x10, 0x17, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10,
	0x18, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55,
	0x53, 0x45, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x19, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x44, 0x45, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x1b, 0x12, 0x1a, 0x0a,
	0x16, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x43, 0x41, 0x52, 0x44, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x54, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x1d, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53,
	0x41, 0x56, 0x45, 0x5f, 0x4c, 0x4f, 0x56, 0x45, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x10,
	0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x1f, 0x12, 0x15, 0x0a,
	0x11, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45,
	0x52, 0x59, 0x10, 0x20, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x10, 0x21, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x22, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x48, 0x4f, 0x57, 0x36, 0x34, 0x10, 0x23, 0x12,
	0x23, 0x0a, 0x1f, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x53, 0x45, 0x10, 0x24, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0x25, 0x12, 0x22,
	0x0a, 0x1e, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x54, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x10, 0x26, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x54, 0x52, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x27, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41,
	0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x28, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x44, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x10, 0x29, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x2a, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x10, 0x2b, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0x2c, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x55, 0x59,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x2e, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x54, 0x45, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x2f, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x54,
	0x45, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x30, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x54, 0x45,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f, 0x53, 0x45, 0x4c,
	0x4c, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x31, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x10, 0x32, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x48,
	0x45, 0x41, 0x44, 0x10, 0x33, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x54, 0x45, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x34, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x54, 0x45, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53,
	0x45, 0x10, 0x35, 0x2a, 0xbf, 0x02, 0x0a, 0x09, 0x45, 0x50, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x50, 0x41, 0x43,
	0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x48, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x04,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x50, 0x41,
	0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x41, 0x43, 0x4b,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x08,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41,
	0x52, 0x52, 0x4f, 0x57, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x0b, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x54,
	0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x0d, 0x2a, 0xbd, 0x1a, 0x0a, 0x09, 0x45, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x4e, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55,
	0x52, 0x45, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x10, 0x1e, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x55, 0x46, 0x46, 0x10,
	0x28, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x55, 0x46, 0x46, 0x4e, 0x4f, 0x43, 0x55, 0x54, 0x10, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x2b,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x2c, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x48, 0x4f, 0x53, 0x54, 0x4c, 0x41, 0x4d, 0x50, 0x10,
	0x2d, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x2e, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x43, 0x41, 0x52,
	0x44, 0x10, 0x2f, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x30, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x31, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x45, 0x45, 0x54, 0x10, 0x32, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x54, 0x5f, 0x57, 0x45,
	0x41, 0x52, 0x53, 0x48, 0x45, 0x45, 0x54, 0x10, 0x33, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x54, 0x5f, 0x57, 0x45, 0x41, 0x52, 0x55,
	0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x34, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x3c, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x49, 0x52,
	0x53, 0x54, 0x55, 0x46, 0x46, 0x10, 0x3d, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x32, 0x10, 0x3e,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x3f, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x40, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x41, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x42, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x44,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x43, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41,
	0x4c, 0x10, 0x46, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x10, 0x47, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x50, 0x4c, 0x45,
	0x10, 0x48, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x45, 0x54, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x49, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x45, 0x46, 0x46, 0x45,
	0x43, 0x54, 0x10, 0x4a, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x4b, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x45, 0x46, 0x46, 0x45,
	0x43, 0x54, 0x5f, 0x31, 0x10, 0x4c, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x10,
	0x51, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x10, 0x52, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x41,
	0x52, 0x4d, 0x4f, 0x55, 0x52, 0x10, 0x53, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x54,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x53, 0x48, 0x4f, 0x45, 0x53, 0x10, 0x55, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x4f, 0x52, 0x59, 0x10, 0x56, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10,
	0x57, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x5a, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x5b, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x54, 0x10, 0x64, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x47, 0x47,
	0x10, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x45, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x66, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x55, 0x4d, 0x45, 0x10, 0x67, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x50, 0x49, 0x45, 0x43, 0x45, 0x10, 0x6e, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x50, 0x49, 0x45, 0x43, 0x45, 0x10, 0x78, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x49, 0x45, 0x43, 0x45, 0x10, 0x79, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x82, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x10,
	0x83, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x10, 0x84, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x41, 0x52, 0x44, 0x45, 0x4e, 0x10, 0x8c,
	0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x91, 0x01, 0x12, 0x14, 0x0a, 0x0f,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x10,
	0x92, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x53, 0x48, 0x49, 0x50, 0x10, 0x93, 0x01, 0x12, 0x1b, 0x0a,
	0x16, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x53, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x8f, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x52, 0x41, 0x10, 0x90, 0x01, 0x12,
	0x16, 0x0a, 0x11, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x56, 0x50,
	0x43, 0x4f, 0x49, 0x4e, 0x10, 0x8d, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x45, 0x58, 0x50, 0x10, 0x96, 0x01, 0x12,
	0x15, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x4f, 0x42,
	0x45, 0x58, 0x50, 0x10, 0x97, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x52, 0x49, 0x46, 0x59, 0x10, 0x98, 0x01, 0x12, 0x1a, 0x0a,
	0x15, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x99, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x9a,
	0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x9b, 0x01, 0x12, 0x19, 0x0a, 0x14,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x48,
	0x4f, 0x4e, 0x4f, 0x52, 0x10, 0x9c, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10,
	0x9d, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x10, 0xa0, 0x01, 0x12, 0x1d, 0x0a, 0x18,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49,
	0x54, 0x45, 0x4d, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xa5, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x45, 0x52, 0x54, 0x10, 0xa6, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x10, 0xa7, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x10, 0xa8, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0xa9, 0x01, 0x12,
	0x1b, 0x0a, 0x16, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41,
	0x50, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0xaa, 0x01, 0x12, 0x1b, 0x0a, 0x16,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e,
	0x5f, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0xb4, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x57, 0x41,
	0x4e, 0x44, 0x10, 0xbe, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x4b, 0x4e, 0x49, 0x46, 0x45, 0x10,
	0xc8, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x57, 0x10, 0xd2, 0x01, 0x12, 0x1c, 0x0a,
	0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f,
	0x4e, 0x5f, 0x48, 0x41, 0x4d, 0x4d, 0x45, 0x52, 0x10, 0xdc, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f,
	0x41, 0x58, 0x45, 0x10, 0xe6, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x10,
	0xf0, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x47, 0x47, 0x45, 0x52, 0x10, 0xfa, 0x01,
	0x12, 0x20, 0x0a, 0x1b, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45,
	0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4d, 0x54, 0x10,
	0x84, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x57, 0x48, 0x49, 0x50, 0x10, 0x8e, 0x02, 0x12, 0x1a,
	0x0a, 0x15, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50,
	0x4f, 0x4e, 0x5f, 0x54, 0x55, 0x42, 0x45, 0x10, 0x98, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x49,
	0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x46,
	0x49, 0x53, 0x54, 0x10, 0xa2, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x4c, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0xc2, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x57, 0x4f, 0x52,
	0x44, 0x10, 0xc3, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x57, 0x41, 0x4e, 0x44, 0x10,
	0xc4, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x4b, 0x4e, 0x49, 0x46, 0x45, 0x10, 0xc5,
	0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x42, 0x4f, 0x57, 0x10, 0xc6, 0x03, 0x12, 0x1e,
	0x0a, 0x19, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49,
	0x46, 0x41, 0x43, 0x54, 0x5f, 0x48, 0x41, 0x4d, 0x4d, 0x45, 0x52, 0x10, 0xc7, 0x03, 0x12, 0x1b,
	0x0a, 0x16, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49,
	0x46, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x58, 0x45, 0x10, 0xc8, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43,
	0x54, 0x5f, 0x44, 0x41, 0x47, 0x47, 0x45, 0x52, 0x10, 0xc9, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43,
	0x54, 0x5f, 0x46, 0x49, 0x53, 0x54, 0x10, 0xca, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4d, 0x54, 0x10, 0xcb, 0x03, 0x12, 0x1c, 0x0a,
	0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46,
	0x41, 0x43, 0x54, 0x5f, 0x57, 0x48, 0x49, 0x50, 0x10, 0xcc, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43,
	0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0xcd, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x10, 0xe5, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0xe8, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x52, 0x4d, 0x4f, 0x55, 0x52, 0x10, 0xf4, 0x03, 0x12, 0x1d, 0x0a, 0x18,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x4d, 0x4f, 0x55, 0x52,
	0x5f, 0x46, 0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e, 0x10, 0xf5, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x10,
	0xfe, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x45, 0x41, 0x52, 0x4c, 0x10, 0xff, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x49, 0x4b, 0x4f, 0x4e, 0x10, 0x80, 0x04, 0x12, 0x15,
	0x0a, 0x10, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x43,
	0x45, 0x52, 0x10, 0x81, 0x04, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x43, 0x45, 0x4c, 0x45, 0x54, 0x10, 0x82, 0x04, 0x12, 0x16,
	0x0a, 0x11, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x4f, 0x4c,
	0x4c, 0x45, 0x59, 0x10, 0x83, 0x04, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x88, 0x04, 0x12, 0x14, 0x0a, 0x0f, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x45, 0x53, 0x10, 0x92,
	0x04, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x59, 0x10, 0x9c, 0x04, 0x12, 0x18, 0x0a, 0x13, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x4d, 0x45,
	0x41, 0x54, 0x10, 0xd9, 0x04, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x46, 0x49, 0x53, 0x48, 0x10, 0xda, 0x04, 0x12,
	0x1d, 0x0a, 0x18, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f,
	0x44, 0x5f, 0x56, 0x45, 0x47, 0x45, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xdb, 0x04, 0x12, 0x19,
	0x0a, 0x14, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44,
	0x5f, 0x46, 0x52, 0x55, 0x49, 0x54, 0x10, 0xdc, 0x04, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x49, 0x54,
	0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x53, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0xdd, 0x04, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0xe2, 0x04, 0x12, 0x13, 0x0a,
	0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10,
	0xa0, 0x06, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x10, 0xaa, 0x06, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x10, 0xb4, 0x06, 0x12, 0x18, 0x0a, 0x13,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x4d,
	0x41, 0x4c, 0x45, 0x10, 0xb5, 0x06, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10,
	0xb6, 0x06, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x59, 0x45, 0x5f, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0xb7, 0x06, 0x12, 0x19, 0x0a, 0x14, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x59, 0x45, 0x5f, 0x46, 0x45, 0x4d,
	0x41, 0x4c, 0x45, 0x10, 0xb8, 0x06, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0xbe, 0x06, 0x12, 0x13, 0x0a, 0x0e, 0x45,
	0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x10, 0xc8, 0x06,
	0x12, 0x14, 0x0a, 0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f,
	0x55, 0x54, 0x48, 0x10, 0xd2, 0x06, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0xe9, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x10, 0xb0, 0x09, 0x12, 0x14, 0x0a,
	0x0f, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x10, 0xba, 0x09, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa0, 0x1f, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x46, 0x43, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xe8,
	0x20, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x58, 0x10, 0xe9, 0x20, 0x2a, 0xa4, 0x04, 0x0a, 0x0a, 0x45, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48,
	0x49, 0x45, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x4d, 0x4f, 0x55, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x42, 0x45,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x48, 0x4f, 0x45, 0x53, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x59,
	0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10,
	0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x41, 0x49, 0x4c, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x55, 0x54, 0x48,
	0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x41, 0x52, 0x4c, 0x10, 0x10, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x49,
	0x4b, 0x4f, 0x4e, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x43, 0x45, 0x4c, 0x45, 0x54, 0x10, 0x12, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x4e,
	0x44, 0x42, 0x52, 0x41, 0x43, 0x45, 0x4c, 0x45, 0x54, 0x10, 0x13, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45,
	0x59, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x15, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46,
	0x41, 0x43, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43,
	0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x17, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x18, 0x2a, 0x5b, 0x0a, 0x09,
	0x45, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x42, 0x49,
	0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x42, 0x49, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x42, 0x49, 0x4e, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x42, 0x49, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x42, 0x49, 0x4e, 0x44, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x37, 0x0a, 0x0b, 0x45, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58,
	0x10, 0x01, 0x2a, 0x56, 0x0a, 0x09, 0x45, 0x52, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x52, 0x49, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x52, 0x49, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x49, 0x44, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x49, 0x44, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x70, 0x0a, 0x0b, 0x45, 0x54,
	0x72, 0x61, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x59, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a,
	0x45, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x41, 0x4e, 0x44, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x86, 0x01, 0x0a,
	0x0c, 0x45, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x45, 0x4e, 0x43, 0x48, 0x41,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x49, 0x4f, 0x52, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0xac, 0x01, 0x0a, 0x0b, 0x45, 0x4c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54,
	0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4c,
	0x45, 0x54, 0x54, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x52, 0x49, 0x53, 0x54,
	0x4d, 0x41, 0x53, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4c, 0x45, 0x54, 0x54, 0x45,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x06, 0x2a, 0xa8, 0x03, 0x0a, 0x0a, 0x45, 0x45, 0x71, 0x75, 0x69, 0x70, 0x4f,
	0x70, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x54,
	0x46, 0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x46, 0x41, 0x53, 0x48, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50,
	0x45, 0x52, 0x5f, 0x50, 0x55, 0x54, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x41, 0x4c, 0x4c, 0x10, 0x07, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x50,
	0x4f, 0x53, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50,
	0x45, 0x52, 0x5f, 0x50, 0x55, 0x54, 0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x09, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46,
	0x50, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x54, 0x45, 0x4d, 0x50, 0x10, 0x0b,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x50,
	0x55, 0x54, 0x42, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x42, 0x41, 0x52, 0x52,
	0x4f, 0x57, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50,
	0x45, 0x52, 0x5f, 0x44, 0x52, 0x45, 0x53, 0x53, 0x55, 0x50, 0x5f, 0x4f, 0x4e, 0x10, 0x0e, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x55, 0x50, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x10, 0x2a,
	0xb2, 0x03, 0x0a, 0x09, 0x45, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x57, 0x45,
	0x41, 0x50, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x50, 0x4f, 0x53, 0x5f, 0x41, 0x52, 0x4d, 0x4f, 0x55, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f,
	0x52, 0x4f, 0x42, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x50, 0x4f, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x45, 0x53, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f,
	0x52, 0x59, 0x31, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50,
	0x4f, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x59, 0x32, 0x10, 0x06, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x48, 0x45, 0x41,
	0x44, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x50, 0x4f, 0x53, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x0c, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f,
	0x53, 0x5f, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x45, 0x51,
	0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x0e, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x41, 0x52, 0x54,
	0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x50, 0x4f, 0x53, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x48, 0x45,
	0x41, 0x44, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f,
	0x53, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10,
	0x11, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x50, 0x4f, 0x53, 0x5f, 0x4d,
	0x41, 0x58, 0x10, 0x12, 0x2a, 0x82, 0x01, 0x0a, 0x0f, 0x45, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x53, 0x54, 0x52,
	0x45, 0x4e, 0x47, 0x54, 0x48, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x4e, 0x4f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x4d, 0x41, 0x58, 0x4c, 0x56, 0x10, 0x03, 0x2a, 0x70, 0x0a, 0x0d, 0x45, 0x53, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x53,
	0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54,
	0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x82, 0x01, 0x0a, 0x0c,
	0x45, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05,
	0x2a, 0xce, 0x01, 0x0a, 0x0d, 0x45, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x53, 0x54, 0x41, 0x59, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19,
	0x45, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x53, 0x54, 0x41, 0x59, 0x44, 0x41, 0x4d, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x42, 0x41, 0x43, 0x4b, 0x44, 0x41, 0x4d, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x10,
	0x06, 0x2a, 0xea, 0x01, 0x0a, 0x10, 0x45, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x44, 0x45, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x53, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x44, 0x45,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x49, 0x47, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x45,
	0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x42, 0x49, 0x47, 0x10, 0x04, 0x12, 0x24,
	0x0a, 0x20, 0x45, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x4e, 0x54, 0x41,
	0x53, 0x59, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x53, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x06, 0x2a, 0x60,
	0x0a, 0x09, 0x45, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x45,
	0x43, 0x41, 0x52, 0x44, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x43, 0x41, 0x52, 0x44, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x43, 0x41, 0x52, 0x44, 0x4f, 0x50,
	0x45, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x43, 0x41, 0x52, 0x44, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03,
	0x2a, 0x4c, 0x0a, 0x0a, 0x45, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x48, 0x10, 0x02, 0x2a, 0x74,
	0x0a, 0x0d, 0x45, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x58, 0x10, 0x03, 0x2a, 0x6f, 0x0a, 0x11, 0x45, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x45, 0x58,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x43, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x43, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x53, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x43, 0x41, 0x52, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x53, 0x45, 0x10, 0x03, 0x2a, 0xb7, 0x01, 0x0a, 0x0c, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x65, 0x61,
	0x64, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x61, 0x72, 0x64,
	0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x43, 0x61, 0x74, 0x4c, 0x69, 0x74, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x10,
	0x04, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x78, 0x10, 0x06, 0x2a,
	0xe3, 0x02, 0x0a, 0x0a, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x5f, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x5f, 0x47, 0x69, 0x76, 0x65, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x5f, 0x41,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x5f, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x5f, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x5f, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x42, 0x6f, 0x78, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x5f, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x72, 0x65, 0x73, 0x73, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x5f, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x10, 0x08, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x5f, 0x42,
	0x6f, 0x6f, 0x74, 0x68, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x5f, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x10, 0x0a, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x5f, 0x47,
	0x69, 0x76, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x5f, 0x47, 0x69, 0x76, 0x65,
	0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x5f, 0x47, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x10, 0x0d,
}

var (
	file_SceneItem_proto_rawDescOnce sync.Once
	file_SceneItem_proto_rawDescData = file_SceneItem_proto_rawDesc
)

func file_SceneItem_proto_rawDescGZIP() []byte {
	file_SceneItem_proto_rawDescOnce.Do(func() {
		file_SceneItem_proto_rawDescData = protoimpl.X.CompressGZIP(file_SceneItem_proto_rawDescData)
	})
	return file_SceneItem_proto_rawDescData
}

var file_SceneItem_proto_enumTypes = make([]protoimpl.EnumInfo, 23)
var file_SceneItem_proto_msgTypes = make([]protoimpl.MessageInfo, 80)
var file_SceneItem_proto_goTypes = []interface{}{
	(ItemParam)(0),                      // 0: Cmd.ItemParam
	(EPackType)(0),                      // 1: Cmd.EPackType
	(EItemType)(0),                      // 2: Cmd.EItemType
	(EEquipType)(0),                     // 3: Cmd.EEquipType
	(EBindType)(0),                      // 4: Cmd.EBindType
	(EExpireType)(0),                    // 5: Cmd.EExpireType
	(ERideType)(0),                      // 6: Cmd.ERideType
	(ETragetType)(0),                    // 7: Cmd.ETragetType
	(EEnchantType)(0),                   // 8: Cmd.EEnchantType
	(ELetterType)(0),                    // 9: Cmd.ELetterType
	(EEquipOper)(0),                     // 10: Cmd.EEquipOper
	(EEquipPos)(0),                      // 11: Cmd.EEquipPos
	(EStrengthResult)(0),                // 12: Cmd.EStrengthResult
	(EStrengthType)(0),                  // 13: Cmd.EStrengthType
	(EProduceType)(0),                   // 14: Cmd.EProduceType
	(ERefineResult)(0),                  // 15: Cmd.ERefineResult
	(EDecomposeResult)(0),               // 16: Cmd.EDecomposeResult
	(ECardOper)(0),                      // 17: Cmd.ECardOper
	(ETradeType)(0),                     // 18: Cmd.ETradeType
	(EExchangeType)(0),                  // 19: Cmd.EExchangeType
	(EExchangeCardType)(0),              // 20: Cmd.EExchangeCardType
	(ELotteryType)(0),                   // 21: Cmd.ELotteryType
	(EQuotaType)(0),                     // 22: Cmd.EQuotaType
	(*ItemInfo)(nil),                    // 23: Cmd.ItemInfo
	(*RefineCompose)(nil),               // 24: Cmd.RefineCompose
	(*EquipData)(nil),                   // 25: Cmd.EquipData
	(*CardData)(nil),                    // 26: Cmd.CardData
	(*EnchantAttr)(nil),                 // 27: Cmd.EnchantAttr
	(*EnchantExtra)(nil),                // 28: Cmd.EnchantExtra
	(*EnchantData)(nil),                 // 29: Cmd.EnchantData
	(*RefineData)(nil),                  // 30: Cmd.RefineData
	(*EggEquip)(nil),                    // 31: Cmd.EggEquip
	(*PetEquipData)(nil),                // 32: Cmd.PetEquipData
	(*EggData)(nil),                     // 33: Cmd.EggData
	(*LoveLetterData)(nil),              // 34: Cmd.LoveLetterData
	(*CodeData)(nil),                    // 35: Cmd.CodeData
	(*WeddingData)(nil),                 // 36: Cmd.WeddingData
	(*SenderData)(nil),                  // 37: Cmd.SenderData
	(*ItemData)(nil),                    // 38: Cmd.ItemData
	(*PackageItem)(nil),                 // 39: Cmd.PackageItem
	(*PackageUpdate)(nil),               // 40: Cmd.PackageUpdate
	(*ItemUse)(nil),                     // 41: Cmd.ItemUse
	(*SortInfo)(nil),                    // 42: Cmd.SortInfo
	(*PackageSort)(nil),                 // 43: Cmd.PackageSort
	(*Equip)(nil),                       // 44: Cmd.Equip
	(*SItem)(nil),                       // 45: Cmd.SItem
	(*SellItem)(nil),                    // 46: Cmd.SellItem
	(*EquipStrength)(nil),               // 47: Cmd.EquipStrength
	(*Produce)(nil),                     // 48: Cmd.Produce
	(*ProduceDone)(nil),                 // 49: Cmd.ProduceDone
	(*EquipRefine)(nil),                 // 50: Cmd.EquipRefine
	(*EquipDecompose)(nil),              // 51: Cmd.EquipDecompose
	(*DecomposeResult)(nil),             // 52: Cmd.DecomposeResult
	(*QueryDecomposeResultItemCmd)(nil), // 53: Cmd.QueryDecomposeResultItemCmd
	(*QueryEquipData)(nil),              // 54: Cmd.QueryEquipData
	(*BrowsePackage)(nil),               // 55: Cmd.BrowsePackage
	(*EquipCard)(nil),                   // 56: Cmd.EquipCard
	(*ItemShow)(nil),                    // 57: Cmd.ItemShow
	(*ItemShow64)(nil),                  // 58: Cmd.ItemShow64
	(*EquipRepair)(nil),                 // 59: Cmd.EquipRepair
	(*HintNtf)(nil),                     // 60: Cmd.HintNtf
	(*EnchantEquip)(nil),                // 61: Cmd.EnchantEquip
	(*TradeComposePair)(nil),            // 62: Cmd.TradeComposePair
	(*TradeRefineData)(nil),             // 63: Cmd.TradeRefineData
	(*TradeItemBaseInfo)(nil),           // 64: Cmd.TradeItemBaseInfo
	(*ProcessEnchantItemCmd)(nil),       // 65: Cmd.ProcessEnchantItemCmd
	(*EquipExchangeItemCmd)(nil),        // 66: Cmd.EquipExchangeItemCmd
	(*OnOffStoreItemCmd)(nil),           // 67: Cmd.OnOffStoreItemCmd
	(*PackSlotNtfItemCmd)(nil),          // 68: Cmd.PackSlotNtfItemCmd
	(*RestoreEquipItemCmd)(nil),         // 69: Cmd.RestoreEquipItemCmd
	(*UseCountItemCmd)(nil),             // 70: Cmd.UseCountItemCmd
	(*ExchangeCardItemCmd)(nil),         // 71: Cmd.ExchangeCardItemCmd
	(*GetCountItemCmd)(nil),             // 72: Cmd.GetCountItemCmd
	(*SaveLoveLetterCmd)(nil),           // 73: Cmd.SaveLoveLetterCmd
	(*ItemDataShow)(nil),                // 74: Cmd.ItemDataShow
	(*LotteryCmd)(nil),                  // 75: Cmd.LotteryCmd
	(*LotteryRecoveryCmd)(nil),          // 76: Cmd.LotteryRecoveryCmd
	(*LotterySubInfo)(nil),              // 77: Cmd.LotterySubInfo
	(*LotteryInfo)(nil),                 // 78: Cmd.LotteryInfo
	(*QueryLotteryInfo)(nil),            // 79: Cmd.QueryLotteryInfo
	(*QuotaLog)(nil),                    // 80: Cmd.QuotaLog
	(*QuotaDetail)(nil),                 // 81: Cmd.QuotaDetail
	(*ReqQuotaLogCmd)(nil),              // 82: Cmd.ReqQuotaLogCmd
	(*ReqQuotaDetailCmd)(nil),           // 83: Cmd.ReqQuotaDetailCmd
	(*EquipPosData)(nil),                // 84: Cmd.EquipPosData
	(*EquipPosDataUpdate)(nil),          // 85: Cmd.EquipPosDataUpdate
	(*MatItemInfo)(nil),                 // 86: Cmd.MatItemInfo
	(*HighRefineMatComposeCmd)(nil),     // 87: Cmd.HighRefineMatComposeCmd
	(*HighRefineCmd)(nil),               // 88: Cmd.HighRefineCmd
	(*HighRefineData)(nil),              // 89: Cmd.HighRefineData
	(*NtfHighRefineDataCmd)(nil),        // 90: Cmd.NtfHighRefineDataCmd
	(*UpdateHighRefineDataCmd)(nil),     // 91: Cmd.UpdateHighRefineDataCmd
	(*UseCodItemCmd)(nil),               // 92: Cmd.UseCodItemCmd
	(*AddJobLevelItemCmd)(nil),          // 93: Cmd.AddJobLevelItemCmd
	(*LotterGivBuyCountCmd)(nil),        // 94: Cmd.LotterGivBuyCountCmd
	(*GiveWeddingDressCmd)(nil),         // 95: Cmd.GiveWeddingDressCmd
	(*QuickStoreItemCmd)(nil),           // 96: Cmd.QuickStoreItemCmd
	(*QuickSellItemCmd)(nil),            // 97: Cmd.QuickSellItemCmd
	(*EnchantTransItemCmd)(nil),         // 98: Cmd.EnchantTransItemCmd
	(*QueryLotteryHeadItemCmd)(nil),     // 99: Cmd.QueryLotteryHeadItemCmd
	(*LotteryRateInfo)(nil),             // 100: Cmd.LotteryRateInfo
	(*LotteryRateQueryCmd)(nil),         // 101: Cmd.LotteryRateQueryCmd
	(*EquipComposeItemCmd)(nil),         // 102: Cmd.EquipComposeItemCmd
	(EQualityType)(0),                   // 103: Cmd.EQualityType
	(ESource)(0),                        // 104: Cmd.ESource
	(EAttrType)(0),                      // 105: Cmd.EAttrType
	(Command)(0),                        // 106: Cmd.Command
}
var file_SceneItem_proto_depIdxs = []int32{
	2,   // 0: Cmd.ItemInfo.type:type_name -> Cmd.EItemType
	4,   // 1: Cmd.ItemInfo.bind:type_name -> Cmd.EBindType
	5,   // 2: Cmd.ItemInfo.expire:type_name -> Cmd.EExpireType
	103, // 3: Cmd.ItemInfo.quality:type_name -> Cmd.EQualityType
	3,   // 4: Cmd.ItemInfo.equipType:type_name -> Cmd.EEquipType
	104, // 5: Cmd.ItemInfo.source:type_name -> Cmd.ESource
	24,  // 6: Cmd.EquipData.refineCompose:type_name -> Cmd.RefineCompose
	23,  // 7: Cmd.EquipData.strengthlv2cost:type_name -> Cmd.ItemInfo
	105, // 8: Cmd.EnchantAttr.type:type_name -> Cmd.EAttrType
	8,   // 9: Cmd.EnchantData.type:type_name -> Cmd.EEnchantType
	27,  // 10: Cmd.EnchantData.attrs:type_name -> Cmd.EnchantAttr
	28,  // 11: Cmd.EnchantData.extras:type_name -> Cmd.EnchantExtra
	23,  // 12: Cmd.EggEquip.base:type_name -> Cmd.ItemInfo
	25,  // 13: Cmd.EggEquip.data:type_name -> Cmd.EquipData
	26,  // 14: Cmd.EggEquip.card:type_name -> Cmd.CardData
	29,  // 15: Cmd.EggEquip.enchant:type_name -> Cmd.EnchantData
	29,  // 16: Cmd.EggEquip.previewenchant:type_name -> Cmd.EnchantData
	30,  // 17: Cmd.EggEquip.refine:type_name -> Cmd.RefineData
	11,  // 18: Cmd.PetEquipData.epos:type_name -> Cmd.EEquipPos
	31,  // 19: Cmd.EggData.equips:type_name -> Cmd.EggEquip
	32,  // 20: Cmd.EggData.defaultwears:type_name -> Cmd.PetEquipData
	32,  // 21: Cmd.EggData.wears:type_name -> Cmd.PetEquipData
	23,  // 22: Cmd.ItemData.base:type_name -> Cmd.ItemInfo
	25,  // 23: Cmd.ItemData.equip:type_name -> Cmd.EquipData
	26,  // 24: Cmd.ItemData.card:type_name -> Cmd.CardData
	29,  // 25: Cmd.ItemData.enchant:type_name -> Cmd.EnchantData
	29,  // 26: Cmd.ItemData.previewenchant:type_name -> Cmd.EnchantData
	30,  // 27: Cmd.ItemData.refine:type_name -> Cmd.RefineData
	33,  // 28: Cmd.ItemData.egg:type_name -> Cmd.EggData
	34,  // 29: Cmd.ItemData.letter:type_name -> Cmd.LoveLetterData
	35,  // 30: Cmd.ItemData.code:type_name -> Cmd.CodeData
	36,  // 31: Cmd.ItemData.wedding:type_name -> Cmd.WeddingData
	37,  // 32: Cmd.ItemData.sender:type_name -> Cmd.SenderData
	106, // 33: Cmd.PackageItem.cmd:type_name -> Cmd.Command
	0,   // 34: Cmd.PackageItem.param:type_name -> Cmd.ItemParam
	1,   // 35: Cmd.PackageItem.type:type_name -> Cmd.EPackType
	38,  // 36: Cmd.PackageItem.data:type_name -> Cmd.ItemData
	106, // 37: Cmd.PackageUpdate.cmd:type_name -> Cmd.Command
	0,   // 38: Cmd.PackageUpdate.param:type_name -> Cmd.ItemParam
	1,   // 39: Cmd.PackageUpdate.type:type_name -> Cmd.EPackType
	38,  // 40: Cmd.PackageUpdate.updateItems:type_name -> Cmd.ItemData
	38,  // 41: Cmd.PackageUpdate.delItems:type_name -> Cmd.ItemData
	106, // 42: Cmd.ItemUse.cmd:type_name -> Cmd.Command
	0,   // 43: Cmd.ItemUse.param:type_name -> Cmd.ItemParam
	106, // 44: Cmd.PackageSort.cmd:type_name -> Cmd.Command
	0,   // 45: Cmd.PackageSort.param:type_name -> Cmd.ItemParam
	1,   // 46: Cmd.PackageSort.type:type_name -> Cmd.EPackType
	42,  // 47: Cmd.PackageSort.item:type_name -> Cmd.SortInfo
	106, // 48: Cmd.Equip.cmd:type_name -> Cmd.Command
	0,   // 49: Cmd.Equip.param:type_name -> Cmd.ItemParam
	10,  // 50: Cmd.Equip.oper:type_name -> Cmd.EEquipOper
	11,  // 51: Cmd.Equip.pos:type_name -> Cmd.EEquipPos
	106, // 52: Cmd.SellItem.cmd:type_name -> Cmd.Command
	0,   // 53: Cmd.SellItem.param:type_name -> Cmd.ItemParam
	45,  // 54: Cmd.SellItem.items:type_name -> Cmd.SItem
	106, // 55: Cmd.EquipStrength.cmd:type_name -> Cmd.Command
	0,   // 56: Cmd.EquipStrength.param:type_name -> Cmd.ItemParam
	12,  // 57: Cmd.EquipStrength.result:type_name -> Cmd.EStrengthResult
	13,  // 58: Cmd.EquipStrength.type:type_name -> Cmd.EStrengthType
	106, // 59: Cmd.Produce.cmd:type_name -> Cmd.Command
	0,   // 60: Cmd.Produce.param:type_name -> Cmd.ItemParam
	14,  // 61: Cmd.Produce.type:type_name -> Cmd.EProduceType
	106, // 62: Cmd.ProduceDone.cmd:type_name -> Cmd.Command
	0,   // 63: Cmd.ProduceDone.param:type_name -> Cmd.ItemParam
	14,  // 64: Cmd.ProduceDone.type:type_name -> Cmd.EProduceType
	106, // 65: Cmd.EquipRefine.cmd:type_name -> Cmd.Command
	0,   // 66: Cmd.EquipRefine.param:type_name -> Cmd.ItemParam
	15,  // 67: Cmd.EquipRefine.eresult:type_name -> Cmd.ERefineResult
	106, // 68: Cmd.EquipDecompose.cmd:type_name -> Cmd.Command
	0,   // 69: Cmd.EquipDecompose.param:type_name -> Cmd.ItemParam
	16,  // 70: Cmd.EquipDecompose.result:type_name -> Cmd.EDecomposeResult
	23,  // 71: Cmd.EquipDecompose.items:type_name -> Cmd.ItemInfo
	23,  // 72: Cmd.DecomposeResult.item:type_name -> Cmd.ItemInfo
	106, // 73: Cmd.QueryDecomposeResultItemCmd.cmd:type_name -> Cmd.Command
	0,   // 74: Cmd.QueryDecomposeResultItemCmd.param:type_name -> Cmd.ItemParam
	52,  // 75: Cmd.QueryDecomposeResultItemCmd.results:type_name -> Cmd.DecomposeResult
	106, // 76: Cmd.QueryEquipData.cmd:type_name -> Cmd.Command
	0,   // 77: Cmd.QueryEquipData.param:type_name -> Cmd.ItemParam
	25,  // 78: Cmd.QueryEquipData.data:type_name -> Cmd.EquipData
	106, // 79: Cmd.BrowsePackage.cmd:type_name -> Cmd.Command
	0,   // 80: Cmd.BrowsePackage.param:type_name -> Cmd.ItemParam
	1,   // 81: Cmd.BrowsePackage.type:type_name -> Cmd.EPackType
	106, // 82: Cmd.EquipCard.cmd:type_name -> Cmd.Command
	0,   // 83: Cmd.EquipCard.param:type_name -> Cmd.ItemParam
	17,  // 84: Cmd.EquipCard.oper:type_name -> Cmd.ECardOper
	106, // 85: Cmd.ItemShow.cmd:type_name -> Cmd.Command
	0,   // 86: Cmd.ItemShow.param:type_name -> Cmd.ItemParam
	23,  // 87: Cmd.ItemShow.items:type_name -> Cmd.ItemInfo
	106, // 88: Cmd.ItemShow64.cmd:type_name -> Cmd.Command
	0,   // 89: Cmd.ItemShow64.param:type_name -> Cmd.ItemParam
	106, // 90: Cmd.EquipRepair.cmd:type_name -> Cmd.Command
	0,   // 91: Cmd.EquipRepair.param:type_name -> Cmd.ItemParam
	106, // 92: Cmd.HintNtf.cmd:type_name -> Cmd.Command
	0,   // 93: Cmd.HintNtf.param:type_name -> Cmd.ItemParam
	106, // 94: Cmd.EnchantEquip.cmd:type_name -> Cmd.Command
	0,   // 95: Cmd.EnchantEquip.param:type_name -> Cmd.ItemParam
	8,   // 96: Cmd.EnchantEquip.type:type_name -> Cmd.EEnchantType
	62,  // 97: Cmd.TradeRefineData.composeInfos:type_name -> Cmd.TradeComposePair
	38,  // 98: Cmd.TradeItemBaseInfo.item_data:type_name -> Cmd.ItemData
	18,  // 99: Cmd.TradeItemBaseInfo.type:type_name -> Cmd.ETradeType
	106, // 100: Cmd.ProcessEnchantItemCmd.cmd:type_name -> Cmd.Command
	0,   // 101: Cmd.ProcessEnchantItemCmd.param:type_name -> Cmd.ItemParam
	106, // 102: Cmd.EquipExchangeItemCmd.cmd:type_name -> Cmd.Command
	0,   // 103: Cmd.EquipExchangeItemCmd.param:type_name -> Cmd.ItemParam
	19,  // 104: Cmd.EquipExchangeItemCmd.type:type_name -> Cmd.EExchangeType
	106, // 105: Cmd.OnOffStoreItemCmd.cmd:type_name -> Cmd.Command
	0,   // 106: Cmd.OnOffStoreItemCmd.param:type_name -> Cmd.ItemParam
	106, // 107: Cmd.PackSlotNtfItemCmd.cmd:type_name -> Cmd.Command
	0,   // 108: Cmd.PackSlotNtfItemCmd.param:type_name -> Cmd.ItemParam
	1,   // 109: Cmd.PackSlotNtfItemCmd.type:type_name -> Cmd.EPackType
	106, // 110: Cmd.RestoreEquipItemCmd.cmd:type_name -> Cmd.Command
	0,   // 111: Cmd.RestoreEquipItemCmd.param:type_name -> Cmd.ItemParam
	106, // 112: Cmd.UseCountItemCmd.cmd:type_name -> Cmd.Command
	0,   // 113: Cmd.UseCountItemCmd.param:type_name -> Cmd.ItemParam
	106, // 114: Cmd.ExchangeCardItemCmd.cmd:type_name -> Cmd.Command
	0,   // 115: Cmd.ExchangeCardItemCmd.param:type_name -> Cmd.ItemParam
	20,  // 116: Cmd.ExchangeCardItemCmd.type:type_name -> Cmd.EExchangeCardType
	23,  // 117: Cmd.ExchangeCardItemCmd.items:type_name -> Cmd.ItemInfo
	106, // 118: Cmd.GetCountItemCmd.cmd:type_name -> Cmd.Command
	0,   // 119: Cmd.GetCountItemCmd.param:type_name -> Cmd.ItemParam
	104, // 120: Cmd.GetCountItemCmd.source:type_name -> Cmd.ESource
	106, // 121: Cmd.SaveLoveLetterCmd.cmd:type_name -> Cmd.Command
	0,   // 122: Cmd.SaveLoveLetterCmd.param:type_name -> Cmd.ItemParam
	106, // 123: Cmd.ItemDataShow.cmd:type_name -> Cmd.Command
	0,   // 124: Cmd.ItemDataShow.param:type_name -> Cmd.ItemParam
	38,  // 125: Cmd.ItemDataShow.items:type_name -> Cmd.ItemData
	106, // 126: Cmd.LotteryCmd.cmd:type_name -> Cmd.Command
	0,   // 127: Cmd.LotteryCmd.param:type_name -> Cmd.ItemParam
	21,  // 128: Cmd.LotteryCmd.type:type_name -> Cmd.ELotteryType
	23,  // 129: Cmd.LotteryCmd.items:type_name -> Cmd.ItemInfo
	106, // 130: Cmd.LotteryRecoveryCmd.cmd:type_name -> Cmd.Command
	0,   // 131: Cmd.LotteryRecoveryCmd.param:type_name -> Cmd.ItemParam
	21,  // 132: Cmd.LotteryRecoveryCmd.type:type_name -> Cmd.ELotteryType
	77,  // 133: Cmd.LotteryInfo.subInfo:type_name -> Cmd.LotterySubInfo
	106, // 134: Cmd.QueryLotteryInfo.cmd:type_name -> Cmd.Command
	0,   // 135: Cmd.QueryLotteryInfo.param:type_name -> Cmd.ItemParam
	78,  // 136: Cmd.QueryLotteryInfo.infos:type_name -> Cmd.LotteryInfo
	21,  // 137: Cmd.QueryLotteryInfo.type:type_name -> Cmd.ELotteryType
	22,  // 138: Cmd.QuotaLog.type:type_name -> Cmd.EQuotaType
	106, // 139: Cmd.ReqQuotaLogCmd.cmd:type_name -> Cmd.Command
	0,   // 140: Cmd.ReqQuotaLogCmd.param:type_name -> Cmd.ItemParam
	80,  // 141: Cmd.ReqQuotaLogCmd.log:type_name -> Cmd.QuotaLog
	106, // 142: Cmd.ReqQuotaDetailCmd.cmd:type_name -> Cmd.Command
	0,   // 143: Cmd.ReqQuotaDetailCmd.param:type_name -> Cmd.ItemParam
	81,  // 144: Cmd.ReqQuotaDetailCmd.detail:type_name -> Cmd.QuotaDetail
	11,  // 145: Cmd.EquipPosData.pos:type_name -> Cmd.EEquipPos
	106, // 146: Cmd.EquipPosDataUpdate.cmd:type_name -> Cmd.Command
	0,   // 147: Cmd.EquipPosDataUpdate.param:type_name -> Cmd.ItemParam
	84,  // 148: Cmd.EquipPosDataUpdate.datas:type_name -> Cmd.EquipPosData
	106, // 149: Cmd.HighRefineMatComposeCmd.cmd:type_name -> Cmd.Command
	0,   // 150: Cmd.HighRefineMatComposeCmd.param:type_name -> Cmd.ItemParam
	86,  // 151: Cmd.HighRefineMatComposeCmd.mainmaterial:type_name -> Cmd.MatItemInfo
	86,  // 152: Cmd.HighRefineMatComposeCmd.vicematerial:type_name -> Cmd.MatItemInfo
	106, // 153: Cmd.HighRefineCmd.cmd:type_name -> Cmd.Command
	0,   // 154: Cmd.HighRefineCmd.param:type_name -> Cmd.ItemParam
	11,  // 155: Cmd.HighRefineData.pos:type_name -> Cmd.EEquipPos
	106, // 156: Cmd.NtfHighRefineDataCmd.cmd:type_name -> Cmd.Command
	0,   // 157: Cmd.NtfHighRefineDataCmd.param:type_name -> Cmd.ItemParam
	89,  // 158: Cmd.NtfHighRefineDataCmd.datas:type_name -> Cmd.HighRefineData
	106, // 159: Cmd.UpdateHighRefineDataCmd.cmd:type_name -> Cmd.Command
	0,   // 160: Cmd.UpdateHighRefineDataCmd.param:type_name -> Cmd.ItemParam
	89,  // 161: Cmd.UpdateHighRefineDataCmd.data:type_name -> Cmd.HighRefineData
	106, // 162: Cmd.UseCodItemCmd.cmd:type_name -> Cmd.Command
	0,   // 163: Cmd.UseCodItemCmd.param:type_name -> Cmd.ItemParam
	106, // 164: Cmd.AddJobLevelItemCmd.cmd:type_name -> Cmd.Command
	0,   // 165: Cmd.AddJobLevelItemCmd.param:type_name -> Cmd.ItemParam
	106, // 166: Cmd.LotterGivBuyCountCmd.cmd:type_name -> Cmd.Command
	0,   // 167: Cmd.LotterGivBuyCountCmd.param:type_name -> Cmd.ItemParam
	106, // 168: Cmd.GiveWeddingDressCmd.cmd:type_name -> Cmd.Command
	0,   // 169: Cmd.GiveWeddingDressCmd.param:type_name -> Cmd.ItemParam
	106, // 170: Cmd.QuickStoreItemCmd.cmd:type_name -> Cmd.Command
	0,   // 171: Cmd.QuickStoreItemCmd.param:type_name -> Cmd.ItemParam
	23,  // 172: Cmd.QuickStoreItemCmd.items:type_name -> Cmd.ItemInfo
	106, // 173: Cmd.QuickSellItemCmd.cmd:type_name -> Cmd.Command
	0,   // 174: Cmd.QuickSellItemCmd.param:type_name -> Cmd.ItemParam
	45,  // 175: Cmd.QuickSellItemCmd.items:type_name -> Cmd.SItem
	106, // 176: Cmd.EnchantTransItemCmd.cmd:type_name -> Cmd.Command
	0,   // 177: Cmd.EnchantTransItemCmd.param:type_name -> Cmd.ItemParam
	106, // 178: Cmd.QueryLotteryHeadItemCmd.cmd:type_name -> Cmd.Command
	0,   // 179: Cmd.QueryLotteryHeadItemCmd.param:type_name -> Cmd.ItemParam
	106, // 180: Cmd.LotteryRateQueryCmd.cmd:type_name -> Cmd.Command
	0,   // 181: Cmd.LotteryRateQueryCmd.param:type_name -> Cmd.ItemParam
	21,  // 182: Cmd.LotteryRateQueryCmd.type:type_name -> Cmd.ELotteryType
	100, // 183: Cmd.LotteryRateQueryCmd.infos:type_name -> Cmd.LotteryRateInfo
	106, // 184: Cmd.EquipComposeItemCmd.cmd:type_name -> Cmd.Command
	0,   // 185: Cmd.EquipComposeItemCmd.param:type_name -> Cmd.ItemParam
	186, // [186:186] is the sub-list for method output_type
	186, // [186:186] is the sub-list for method input_type
	186, // [186:186] is the sub-list for extension type_name
	186, // [186:186] is the sub-list for extension extendee
	0,   // [0:186] is the sub-list for field type_name
}

func init() { file_SceneItem_proto_init() }
func file_SceneItem_proto_init() {
	if File_SceneItem_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	file_SceneUser_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SceneItem_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefineCompose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EggEquip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PetEquipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EggData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoveLetterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeddingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemUse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageSort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Equip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipStrength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Produce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceDone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipRefine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipDecompose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecomposeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDecomposeResultItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryEquipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrowsePackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemShow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemShow64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipRepair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HintNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantEquip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeComposePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRefineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeItemBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessEnchantItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipExchangeItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnOffStoreItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackSlotNtfItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreEquipItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseCountItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeCardItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCountItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveLoveLetterCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemDataShow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryRecoveryCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotterySubInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryLotteryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQuotaLogCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqQuotaDetailCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipPosData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipPosDataUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighRefineMatComposeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighRefineCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighRefineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfHighRefineDataCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHighRefineDataCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseCodItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddJobLevelItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotterGivBuyCountCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiveWeddingDressCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickStoreItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickSellItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnchantTransItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryLotteryHeadItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryRateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LotteryRateQueryCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneItem_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipComposeItemCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SceneItem_proto_rawDesc,
			NumEnums:      23,
			NumMessages:   80,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SceneItem_proto_goTypes,
		DependencyIndexes: file_SceneItem_proto_depIdxs,
		EnumInfos:         file_SceneItem_proto_enumTypes,
		MessageInfos:      file_SceneItem_proto_msgTypes,
	}.Build()
	File_SceneItem_proto = out.File
	file_SceneItem_proto_rawDesc = nil
	file_SceneItem_proto_goTypes = nil
	file_SceneItem_proto_depIdxs = nil
}
