// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: WeddingCCmd.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WeddingCParam int32

const (
	WeddingCParam_WEDDINGCPARAM_REQ_WEDDINGDATE_LIST          WeddingCParam = 1
	WeddingCParam_WEDDINGCPARAM_REQ_WEDDING_ONEDAY_LIST       WeddingCParam = 3
	WeddingCParam_WEDDINGCPARAM_REQ_WEDDING_INFO              WeddingCParam = 4
	WeddingCParam_WEDDINGCPARAM_RESERVE_WEDDINGDATE           WeddingCParam = 5
	WeddingCParam_WEDDINGCPARAM_NTF_RESERVE_WEDDINGDATE       WeddingCParam = 6
	WeddingCParam_WEDDINGCPARAM_REPLY_RESERVE_WEDDINGDATE     WeddingCParam = 7
	WeddingCParam_WEDDINGCPARAM_GIVEUP_RESERVE                WeddingCParam = 8
	WeddingCParam_WEDDINGCPARAM_REQ_DIVORCE                   WeddingCParam = 9
	WeddingCParam_WEDDINGCPARAM_UPDATE_MANUAL                 WeddingCParam = 10
	WeddingCParam_WEDDINGCPARAM_BUY_PACKAGE                   WeddingCParam = 11
	WeddingCParam_WEDDINGCPARAM_BUY_RING                      WeddingCParam = 12
	WeddingCParam_WEDDINGCPARAM_INVITE                        WeddingCParam = 13
	WeddingCParam_WEDDINGCPARAM_UPLOAD_WEDDING_PHOTO          WeddingCParam = 14
	WeddingCParam_WEDDINGCPARAM_CHECK_CAN_RESERVE             WeddingCParam = 15
	WeddingCParam_WEDDINGCPARAM_REQ_PARTNER_INFO              WeddingCParam = 16
	WeddingCParam_WEDDINGCPARAM_NTF_WEDDING_INFO              WeddingCParam = 17
	WeddingCParam_WEDDINGCPARAM_INVITE_WEDDING                WeddingCParam = 18
	WeddingCParam_WEDDINGCPARAM_REPLY_WEDDING                 WeddingCParam = 19
	WeddingCParam_WEDDINGCPARAM_GOTO_WEDDINGPOS               WeddingCParam = 20
	WeddingCParam_WEDDINGCPARAM_QUESTION                      WeddingCParam = 21
	WeddingCParam_WEDDINGCPARAM_ANSWER                        WeddingCParam = 22
	WeddingCParam_WEDDINGCPARAM_WEDDING_EVENT_MSG             WeddingCParam = 23
	WeddingCParam_WEDDINGCPARAM_WEDDING_STOP                  WeddingCParam = 24
	WeddingCParam_WEDDINGCPARAM_QUESTION_SWITCH               WeddingCParam = 25
	WeddingCParam_WEDDINGCPARAM_ENTER_ROLLER_COASTER          WeddingCParam = 26
	WeddingCParam_WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_INVITE WeddingCParam = 27
	WeddingCParam_WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_REPLY  WeddingCParam = 28
	WeddingCParam_WEDDINGCPARAM_ENTER_WEDDINGMAP              WeddingCParam = 29
	WeddingCParam_WEDDINGCPARAM_MISSYOU_INVITE                WeddingCParam = 30
	WeddingCParam_WEDDINGCPARAM_MISSYOU_REPLY                 WeddingCParam = 31
	WeddingCParam_WEDDINGCPARAM_CARRIER                       WeddingCParam = 32
)

// Enum value maps for WeddingCParam.
var (
	WeddingCParam_name = map[int32]string{
		1:  "WEDDINGCPARAM_REQ_WEDDINGDATE_LIST",
		3:  "WEDDINGCPARAM_REQ_WEDDING_ONEDAY_LIST",
		4:  "WEDDINGCPARAM_REQ_WEDDING_INFO",
		5:  "WEDDINGCPARAM_RESERVE_WEDDINGDATE",
		6:  "WEDDINGCPARAM_NTF_RESERVE_WEDDINGDATE",
		7:  "WEDDINGCPARAM_REPLY_RESERVE_WEDDINGDATE",
		8:  "WEDDINGCPARAM_GIVEUP_RESERVE",
		9:  "WEDDINGCPARAM_REQ_DIVORCE",
		10: "WEDDINGCPARAM_UPDATE_MANUAL",
		11: "WEDDINGCPARAM_BUY_PACKAGE",
		12: "WEDDINGCPARAM_BUY_RING",
		13: "WEDDINGCPARAM_INVITE",
		14: "WEDDINGCPARAM_UPLOAD_WEDDING_PHOTO",
		15: "WEDDINGCPARAM_CHECK_CAN_RESERVE",
		16: "WEDDINGCPARAM_REQ_PARTNER_INFO",
		17: "WEDDINGCPARAM_NTF_WEDDING_INFO",
		18: "WEDDINGCPARAM_INVITE_WEDDING",
		19: "WEDDINGCPARAM_REPLY_WEDDING",
		20: "WEDDINGCPARAM_GOTO_WEDDINGPOS",
		21: "WEDDINGCPARAM_QUESTION",
		22: "WEDDINGCPARAM_ANSWER",
		23: "WEDDINGCPARAM_WEDDING_EVENT_MSG",
		24: "WEDDINGCPARAM_WEDDING_STOP",
		25: "WEDDINGCPARAM_QUESTION_SWITCH",
		26: "WEDDINGCPARAM_ENTER_ROLLER_COASTER",
		27: "WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_INVITE",
		28: "WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_REPLY",
		29: "WEDDINGCPARAM_ENTER_WEDDINGMAP",
		30: "WEDDINGCPARAM_MISSYOU_INVITE",
		31: "WEDDINGCPARAM_MISSYOU_REPLY",
		32: "WEDDINGCPARAM_CARRIER",
	}
	WeddingCParam_value = map[string]int32{
		"WEDDINGCPARAM_REQ_WEDDINGDATE_LIST":          1,
		"WEDDINGCPARAM_REQ_WEDDING_ONEDAY_LIST":       3,
		"WEDDINGCPARAM_REQ_WEDDING_INFO":              4,
		"WEDDINGCPARAM_RESERVE_WEDDINGDATE":           5,
		"WEDDINGCPARAM_NTF_RESERVE_WEDDINGDATE":       6,
		"WEDDINGCPARAM_REPLY_RESERVE_WEDDINGDATE":     7,
		"WEDDINGCPARAM_GIVEUP_RESERVE":                8,
		"WEDDINGCPARAM_REQ_DIVORCE":                   9,
		"WEDDINGCPARAM_UPDATE_MANUAL":                 10,
		"WEDDINGCPARAM_BUY_PACKAGE":                   11,
		"WEDDINGCPARAM_BUY_RING":                      12,
		"WEDDINGCPARAM_INVITE":                        13,
		"WEDDINGCPARAM_UPLOAD_WEDDING_PHOTO":          14,
		"WEDDINGCPARAM_CHECK_CAN_RESERVE":             15,
		"WEDDINGCPARAM_REQ_PARTNER_INFO":              16,
		"WEDDINGCPARAM_NTF_WEDDING_INFO":              17,
		"WEDDINGCPARAM_INVITE_WEDDING":                18,
		"WEDDINGCPARAM_REPLY_WEDDING":                 19,
		"WEDDINGCPARAM_GOTO_WEDDINGPOS":               20,
		"WEDDINGCPARAM_QUESTION":                      21,
		"WEDDINGCPARAM_ANSWER":                        22,
		"WEDDINGCPARAM_WEDDING_EVENT_MSG":             23,
		"WEDDINGCPARAM_WEDDING_STOP":                  24,
		"WEDDINGCPARAM_QUESTION_SWITCH":               25,
		"WEDDINGCPARAM_ENTER_ROLLER_COASTER":          26,
		"WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_INVITE": 27,
		"WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_REPLY":  28,
		"WEDDINGCPARAM_ENTER_WEDDINGMAP":              29,
		"WEDDINGCPARAM_MISSYOU_INVITE":                30,
		"WEDDINGCPARAM_MISSYOU_REPLY":                 31,
		"WEDDINGCPARAM_CARRIER":                       32,
	}
)

func (x WeddingCParam) Enum() *WeddingCParam {
	p := new(WeddingCParam)
	*p = x
	return p
}

func (x WeddingCParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeddingCParam) Descriptor() protoreflect.EnumDescriptor {
	return file_WeddingCCmd_proto_enumTypes[0].Descriptor()
}

func (WeddingCParam) Type() protoreflect.EnumType {
	return &file_WeddingCCmd_proto_enumTypes[0]
}

func (x WeddingCParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WeddingCParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WeddingCParam(num)
	return nil
}

// Deprecated: Use WeddingCParam.Descriptor instead.
func (WeddingCParam) EnumDescriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{0}
}

type EDateStatus int32

const (
	EDateStatus_EDateStatus_None EDateStatus = 0
	EDateStatus_EDateStatus_Full EDateStatus = 1
	EDateStatus_EdateStatus_Hot  EDateStatus = 2
)

// Enum value maps for EDateStatus.
var (
	EDateStatus_name = map[int32]string{
		0: "EDateStatus_None",
		1: "EDateStatus_Full",
		2: "EdateStatus_Hot",
	}
	EDateStatus_value = map[string]int32{
		"EDateStatus_None": 0,
		"EDateStatus_Full": 1,
		"EdateStatus_Hot":  2,
	}
)

func (x EDateStatus) Enum() *EDateStatus {
	p := new(EDateStatus)
	*p = x
	return p
}

func (x EDateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_WeddingCCmd_proto_enumTypes[1].Descriptor()
}

func (EDateStatus) Type() protoreflect.EnumType {
	return &file_WeddingCCmd_proto_enumTypes[1]
}

func (x EDateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDateStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDateStatus(num)
	return nil
}

// Deprecated: Use EDateStatus.Descriptor instead.
func (EDateStatus) EnumDescriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{1}
}

type EWeddingStatus int32

const (
	EWeddingStatus_EWeddingStatus_Reserve EWeddingStatus = 0
	EWeddingStatus_EWeddingStatus_Married EWeddingStatus = 1
	EWeddingStatus_EWeddingStatus_None    EWeddingStatus = 2
)

// Enum value maps for EWeddingStatus.
var (
	EWeddingStatus_name = map[int32]string{
		0: "EWeddingStatus_Reserve",
		1: "EWeddingStatus_Married",
		2: "EWeddingStatus_None",
	}
	EWeddingStatus_value = map[string]int32{
		"EWeddingStatus_Reserve": 0,
		"EWeddingStatus_Married": 1,
		"EWeddingStatus_None":    2,
	}
)

func (x EWeddingStatus) Enum() *EWeddingStatus {
	p := new(EWeddingStatus)
	*p = x
	return p
}

func (x EWeddingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EWeddingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_WeddingCCmd_proto_enumTypes[2].Descriptor()
}

func (EWeddingStatus) Type() protoreflect.EnumType {
	return &file_WeddingCCmd_proto_enumTypes[2]
}

func (x EWeddingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EWeddingStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EWeddingStatus(num)
	return nil
}

// Deprecated: Use EWeddingStatus.Descriptor instead.
func (EWeddingStatus) EnumDescriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{2}
}

type EReply int32

const (
	EReply_EReply_Agree  EReply = 1
	EReply_EReply_Refuse EReply = 2
)

// Enum value maps for EReply.
var (
	EReply_name = map[int32]string{
		1: "EReply_Agree",
		2: "EReply_Refuse",
	}
	EReply_value = map[string]int32{
		"EReply_Agree":  1,
		"EReply_Refuse": 2,
	}
)

func (x EReply) Enum() *EReply {
	p := new(EReply)
	*p = x
	return p
}

func (x EReply) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EReply) Descriptor() protoreflect.EnumDescriptor {
	return file_WeddingCCmd_proto_enumTypes[3].Descriptor()
}

func (EReply) Type() protoreflect.EnumType {
	return &file_WeddingCCmd_proto_enumTypes[3]
}

func (x EReply) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EReply) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EReply(num)
	return nil
}

// Deprecated: Use EReply.Descriptor instead.
func (EReply) EnumDescriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{3}
}

type EGiveUpType int32

const (
	EGiveUpType_EGiveUpType_Together EGiveUpType = 1
	EGiveUpType_EGiveUpType_Single   EGiveUpType = 2
	EGiveUpType_EGiveUpType_Force    EGiveUpType = 3
	EGiveUpType_EGiveUpType_DelChar  EGiveUpType = 4
)

// Enum value maps for EGiveUpType.
var (
	EGiveUpType_name = map[int32]string{
		1: "EGiveUpType_Together",
		2: "EGiveUpType_Single",
		3: "EGiveUpType_Force",
		4: "EGiveUpType_DelChar",
	}
	EGiveUpType_value = map[string]int32{
		"EGiveUpType_Together": 1,
		"EGiveUpType_Single":   2,
		"EGiveUpType_Force":    3,
		"EGiveUpType_DelChar":  4,
	}
)

func (x EGiveUpType) Enum() *EGiveUpType {
	p := new(EGiveUpType)
	*p = x
	return p
}

func (x EGiveUpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGiveUpType) Descriptor() protoreflect.EnumDescriptor {
	return file_WeddingCCmd_proto_enumTypes[4].Descriptor()
}

func (EGiveUpType) Type() protoreflect.EnumType {
	return &file_WeddingCCmd_proto_enumTypes[4]
}

func (x EGiveUpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGiveUpType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGiveUpType(num)
	return nil
}

// Deprecated: Use EGiveUpType.Descriptor instead.
func (EGiveUpType) EnumDescriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{4}
}

type EWeddingEvent int32

const (
	EWeddingEvent_EWeddingEvent_Reserve              EWeddingEvent = 1
	EWeddingEvent_EWeddingEvent_GiveupReserve        EWeddingEvent = 2
	EWeddingEvent_EWeddingEvent_Marry                EWeddingEvent = 3
	EWeddingEvent_EWeddingEvent_CancelReserveTimeOut EWeddingEvent = 5
	EWeddingEvent_EWeddingEvent_CancelReserveSys     EWeddingEvent = 6
	EWeddingEvent_EWeddingEvent_DivorceTogether      EWeddingEvent = 7
	EWeddingEvent_EWeddingEvent_DivorceSingle        EWeddingEvent = 8
	EWeddingEvent_EWeddingEvent_DivorceForce         EWeddingEvent = 9
	EWeddingEvent_EWeddingEvent_DivorceDelChar       EWeddingEvent = 10
	EWeddingEvent_EWeddingEvent_DelInvitation        EWeddingEvent = 11
)

// Enum value maps for EWeddingEvent.
var (
	EWeddingEvent_name = map[int32]string{
		1:  "EWeddingEvent_Reserve",
		2:  "EWeddingEvent_GiveupReserve",
		3:  "EWeddingEvent_Marry",
		5:  "EWeddingEvent_CancelReserveTimeOut",
		6:  "EWeddingEvent_CancelReserveSys",
		7:  "EWeddingEvent_DivorceTogether",
		8:  "EWeddingEvent_DivorceSingle",
		9:  "EWeddingEvent_DivorceForce",
		10: "EWeddingEvent_DivorceDelChar",
		11: "EWeddingEvent_DelInvitation",
	}
	EWeddingEvent_value = map[string]int32{
		"EWeddingEvent_Reserve":              1,
		"EWeddingEvent_GiveupReserve":        2,
		"EWeddingEvent_Marry":                3,
		"EWeddingEvent_CancelReserveTimeOut": 5,
		"EWeddingEvent_CancelReserveSys":     6,
		"EWeddingEvent_DivorceTogether":      7,
		"EWeddingEvent_DivorceSingle":        8,
		"EWeddingEvent_DivorceForce":         9,
		"EWeddingEvent_DivorceDelChar":       10,
		"EWeddingEvent_DelInvitation":        11,
	}
)

func (x EWeddingEvent) Enum() *EWeddingEvent {
	p := new(EWeddingEvent)
	*p = x
	return p
}

func (x EWeddingEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EWeddingEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_WeddingCCmd_proto_enumTypes[5].Descriptor()
}

func (EWeddingEvent) Type() protoreflect.EnumType {
	return &file_WeddingCCmd_proto_enumTypes[5]
}

func (x EWeddingEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EWeddingEvent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EWeddingEvent(num)
	return nil
}

// Deprecated: Use EWeddingEvent.Descriptor instead.
func (EWeddingEvent) EnumDescriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{5}
}

type WeddingDateStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date   *uint32      `protobuf:"varint,1,opt,name=date,def=0" json:"date,omitempty"`
	Count  *uint32      `protobuf:"varint,3,opt,name=count,def=0" json:"count,omitempty"`
	Status *EDateStatus `protobuf:"varint,2,opt,name=status,enum=Cmd.EDateStatus" json:"status,omitempty"`
}

// Default values for WeddingDateStatus fields.
const (
	Default_WeddingDateStatus_Date  = uint32(0)
	Default_WeddingDateStatus_Count = uint32(0)
)

func (x *WeddingDateStatus) Reset() {
	*x = WeddingDateStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeddingDateStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeddingDateStatus) ProtoMessage() {}

func (x *WeddingDateStatus) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeddingDateStatus.ProtoReflect.Descriptor instead.
func (*WeddingDateStatus) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{0}
}

func (x *WeddingDateStatus) GetDate() uint32 {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return Default_WeddingDateStatus_Date
}

func (x *WeddingDateStatus) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_WeddingDateStatus_Count
}

func (x *WeddingDateStatus) GetStatus() EDateStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return EDateStatus_EDateStatus_None
}

type ReqWeddingDateListCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param     *WeddingCParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=1" json:"param,omitempty"`
	DateList  []*WeddingDateStatus `protobuf:"bytes,3,rep,name=date_list,json=dateList" json:"date_list,omitempty"`
	UseTicket *bool                `protobuf:"varint,4,opt,name=use_ticket,json=useTicket" json:"use_ticket,omitempty"`
}

// Default values for ReqWeddingDateListCCmd fields.
const (
	Default_ReqWeddingDateListCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_ReqWeddingDateListCCmd_Param = WeddingCParam_WEDDINGCPARAM_REQ_WEDDINGDATE_LIST
)

func (x *ReqWeddingDateListCCmd) Reset() {
	*x = ReqWeddingDateListCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqWeddingDateListCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqWeddingDateListCCmd) ProtoMessage() {}

func (x *ReqWeddingDateListCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqWeddingDateListCCmd.ProtoReflect.Descriptor instead.
func (*ReqWeddingDateListCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{1}
}

func (x *ReqWeddingDateListCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqWeddingDateListCCmd_Cmd
}

func (x *ReqWeddingDateListCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqWeddingDateListCCmd_Param
}

func (x *ReqWeddingDateListCCmd) GetDateList() []*WeddingDateStatus {
	if x != nil {
		return x.DateList
	}
	return nil
}

func (x *ReqWeddingDateListCCmd) GetUseTicket() bool {
	if x != nil && x.UseTicket != nil {
		return *x.UseTicket
	}
	return false
}

type WeddingOneDayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configid  *uint32 `protobuf:"varint,1,opt,name=configid" json:"configid,omitempty"`
	Ban       *bool   `protobuf:"varint,2,opt,name=ban,def=0" json:"ban,omitempty"`
	Starttime *uint32 `protobuf:"varint,3,opt,name=starttime" json:"starttime,omitempty"`
	Endtime   *uint32 `protobuf:"varint,4,opt,name=endtime" json:"endtime,omitempty"`
	Price     *uint32 `protobuf:"varint,5,opt,name=price" json:"price,omitempty"`
	Id        *uint64 `protobuf:"varint,6,opt,name=id" json:"id,omitempty"`
}

// Default values for WeddingOneDayInfo fields.
const (
	Default_WeddingOneDayInfo_Ban = bool(false)
)

func (x *WeddingOneDayInfo) Reset() {
	*x = WeddingOneDayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeddingOneDayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeddingOneDayInfo) ProtoMessage() {}

func (x *WeddingOneDayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeddingOneDayInfo.ProtoReflect.Descriptor instead.
func (*WeddingOneDayInfo) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{2}
}

func (x *WeddingOneDayInfo) GetConfigid() uint32 {
	if x != nil && x.Configid != nil {
		return *x.Configid
	}
	return 0
}

func (x *WeddingOneDayInfo) GetBan() bool {
	if x != nil && x.Ban != nil {
		return *x.Ban
	}
	return Default_WeddingOneDayInfo_Ban
}

func (x *WeddingOneDayInfo) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

func (x *WeddingOneDayInfo) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

func (x *WeddingOneDayInfo) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *WeddingOneDayInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type ReqWeddingOneDayListCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param *WeddingCParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=3" json:"param,omitempty"`
	Date  *uint32              `protobuf:"varint,3,opt,name=date" json:"date,omitempty"`
	Info  []*WeddingOneDayInfo `protobuf:"bytes,4,rep,name=info" json:"info,omitempty"`
}

// Default values for ReqWeddingOneDayListCCmd fields.
const (
	Default_ReqWeddingOneDayListCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_ReqWeddingOneDayListCCmd_Param = WeddingCParam_WEDDINGCPARAM_REQ_WEDDING_ONEDAY_LIST
)

func (x *ReqWeddingOneDayListCCmd) Reset() {
	*x = ReqWeddingOneDayListCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqWeddingOneDayListCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqWeddingOneDayListCCmd) ProtoMessage() {}

func (x *ReqWeddingOneDayListCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqWeddingOneDayListCCmd.ProtoReflect.Descriptor instead.
func (*ReqWeddingOneDayListCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{3}
}

func (x *ReqWeddingOneDayListCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqWeddingOneDayListCCmd_Cmd
}

func (x *ReqWeddingOneDayListCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqWeddingOneDayListCCmd_Param
}

func (x *ReqWeddingOneDayListCCmd) GetDate() uint32 {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return 0
}

func (x *ReqWeddingOneDayListCCmd) GetInfo() []*WeddingOneDayInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CharData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid     *uint64  `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Name       *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Profession *uint32  `protobuf:"varint,3,opt,name=profession" json:"profession,omitempty"`
	Gender     *EGender `protobuf:"varint,4,opt,name=gender,enum=Cmd.EGender" json:"gender,omitempty"`
	Portrait   *uint32  `protobuf:"varint,5,opt,name=portrait,def=0" json:"portrait,omitempty"`
	Hair       *uint32  `protobuf:"varint,7,opt,name=hair,def=0" json:"hair,omitempty"`
	Haircolor  *uint32  `protobuf:"varint,8,opt,name=haircolor,def=0" json:"haircolor,omitempty"`
	Body       *uint32  `protobuf:"varint,9,opt,name=body,def=0" json:"body,omitempty"`
	Head       *uint32  `protobuf:"varint,10,opt,name=head,def=0" json:"head,omitempty"`
	Face       *uint32  `protobuf:"varint,11,opt,name=face,def=0" json:"face,omitempty"`
	Mouth      *uint32  `protobuf:"varint,12,opt,name=mouth,def=0" json:"mouth,omitempty"`
	Eye        *uint32  `protobuf:"varint,13,opt,name=eye,def=0" json:"eye,omitempty"`
	Level      *uint32  `protobuf:"varint,14,opt,name=level" json:"level,omitempty"`
	Guildname  *string  `protobuf:"bytes,15,opt,name=guildname" json:"guildname,omitempty"`
}

// Default values for CharData fields.
const (
	Default_CharData_Portrait  = uint32(0)
	Default_CharData_Hair      = uint32(0)
	Default_CharData_Haircolor = uint32(0)
	Default_CharData_Body      = uint32(0)
	Default_CharData_Head      = uint32(0)
	Default_CharData_Face      = uint32(0)
	Default_CharData_Mouth     = uint32(0)
	Default_CharData_Eye       = uint32(0)
)

func (x *CharData) Reset() {
	*x = CharData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharData) ProtoMessage() {}

func (x *CharData) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharData.ProtoReflect.Descriptor instead.
func (*CharData) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{4}
}

func (x *CharData) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *CharData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CharData) GetProfession() uint32 {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return 0
}

func (x *CharData) GetGender() EGender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return EGender_EGENDER_MIN
}

func (x *CharData) GetPortrait() uint32 {
	if x != nil && x.Portrait != nil {
		return *x.Portrait
	}
	return Default_CharData_Portrait
}

func (x *CharData) GetHair() uint32 {
	if x != nil && x.Hair != nil {
		return *x.Hair
	}
	return Default_CharData_Hair
}

func (x *CharData) GetHaircolor() uint32 {
	if x != nil && x.Haircolor != nil {
		return *x.Haircolor
	}
	return Default_CharData_Haircolor
}

func (x *CharData) GetBody() uint32 {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return Default_CharData_Body
}

func (x *CharData) GetHead() uint32 {
	if x != nil && x.Head != nil {
		return *x.Head
	}
	return Default_CharData_Head
}

func (x *CharData) GetFace() uint32 {
	if x != nil && x.Face != nil {
		return *x.Face
	}
	return Default_CharData_Face
}

func (x *CharData) GetMouth() uint32 {
	if x != nil && x.Mouth != nil {
		return *x.Mouth
	}
	return Default_CharData_Mouth
}

func (x *CharData) GetEye() uint32 {
	if x != nil && x.Eye != nil {
		return *x.Eye
	}
	return Default_CharData_Eye
}

func (x *CharData) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CharData) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

type BirefWeddingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *uint64         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Status           *EWeddingStatus `protobuf:"varint,2,opt,name=status,enum=Cmd.EWeddingStatus" json:"status,omitempty"`
	Char1            *CharData       `protobuf:"bytes,3,opt,name=char1" json:"char1,omitempty"`
	Char2            *CharData       `protobuf:"bytes,4,opt,name=char2" json:"char2,omitempty"`
	Zoneid           *uint32         `protobuf:"varint,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Starttime        *uint32         `protobuf:"varint,6,opt,name=starttime" json:"starttime,omitempty"`
	Endtime          *uint32         `protobuf:"varint,7,opt,name=endtime" json:"endtime,omitempty"`
	CanSingleDivorce *bool           `protobuf:"varint,8,opt,name=can_single_divorce,json=canSingleDivorce" json:"can_single_divorce,omitempty"`
}

func (x *BirefWeddingInfo) Reset() {
	*x = BirefWeddingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BirefWeddingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BirefWeddingInfo) ProtoMessage() {}

func (x *BirefWeddingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BirefWeddingInfo.ProtoReflect.Descriptor instead.
func (*BirefWeddingInfo) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{5}
}

func (x *BirefWeddingInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BirefWeddingInfo) GetStatus() EWeddingStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return EWeddingStatus_EWeddingStatus_Reserve
}

func (x *BirefWeddingInfo) GetChar1() *CharData {
	if x != nil {
		return x.Char1
	}
	return nil
}

func (x *BirefWeddingInfo) GetChar2() *CharData {
	if x != nil {
		return x.Char2
	}
	return nil
}

func (x *BirefWeddingInfo) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return 0
}

func (x *BirefWeddingInfo) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

func (x *BirefWeddingInfo) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

func (x *BirefWeddingInfo) GetCanSingleDivorce() bool {
	if x != nil && x.CanSingleDivorce != nil {
		return *x.CanSingleDivorce
	}
	return false
}

type ReqWeddingInfoCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param *WeddingCParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=4" json:"param,omitempty"`
	Id    *uint64           `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Info  *BirefWeddingInfo `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
}

// Default values for ReqWeddingInfoCCmd fields.
const (
	Default_ReqWeddingInfoCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_ReqWeddingInfoCCmd_Param = WeddingCParam_WEDDINGCPARAM_REQ_WEDDING_INFO
)

func (x *ReqWeddingInfoCCmd) Reset() {
	*x = ReqWeddingInfoCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqWeddingInfoCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqWeddingInfoCCmd) ProtoMessage() {}

func (x *ReqWeddingInfoCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqWeddingInfoCCmd.ProtoReflect.Descriptor instead.
func (*ReqWeddingInfoCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{6}
}

func (x *ReqWeddingInfoCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqWeddingInfoCCmd_Cmd
}

func (x *ReqWeddingInfoCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqWeddingInfoCCmd_Param
}

func (x *ReqWeddingInfoCCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ReqWeddingInfoCCmd) GetInfo() *BirefWeddingInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type ReserveWeddingDateCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param     *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=5" json:"param,omitempty"`
	Date      *uint32        `protobuf:"varint,3,opt,name=date" json:"date,omitempty"`
	Configid  *uint32        `protobuf:"varint,4,opt,name=configid" json:"configid,omitempty"`
	Charid2   *uint64        `protobuf:"varint,5,opt,name=charid2" json:"charid2,omitempty"`
	UseTicket *bool          `protobuf:"varint,6,opt,name=use_ticket,json=useTicket" json:"use_ticket,omitempty"`
}

// Default values for ReserveWeddingDateCCmd fields.
const (
	Default_ReserveWeddingDateCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_ReserveWeddingDateCCmd_Param = WeddingCParam_WEDDINGCPARAM_RESERVE_WEDDINGDATE
)

func (x *ReserveWeddingDateCCmd) Reset() {
	*x = ReserveWeddingDateCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveWeddingDateCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveWeddingDateCCmd) ProtoMessage() {}

func (x *ReserveWeddingDateCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveWeddingDateCCmd.ProtoReflect.Descriptor instead.
func (*ReserveWeddingDateCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{7}
}

func (x *ReserveWeddingDateCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReserveWeddingDateCCmd_Cmd
}

func (x *ReserveWeddingDateCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReserveWeddingDateCCmd_Param
}

func (x *ReserveWeddingDateCCmd) GetDate() uint32 {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return 0
}

func (x *ReserveWeddingDateCCmd) GetConfigid() uint32 {
	if x != nil && x.Configid != nil {
		return *x.Configid
	}
	return 0
}

func (x *ReserveWeddingDateCCmd) GetCharid2() uint64 {
	if x != nil && x.Charid2 != nil {
		return *x.Charid2
	}
	return 0
}

func (x *ReserveWeddingDateCCmd) GetUseTicket() bool {
	if x != nil && x.UseTicket != nil {
		return *x.UseTicket
	}
	return false
}

type NtfReserveWeddingDateCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param     *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=6" json:"param,omitempty"`
	Date      *uint32        `protobuf:"varint,3,opt,name=date" json:"date,omitempty"`
	Configid  *uint32        `protobuf:"varint,4,opt,name=configid" json:"configid,omitempty"`
	Charid1   *uint64        `protobuf:"varint,5,opt,name=charid1" json:"charid1,omitempty"`
	Name      *string        `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Starttime *uint32        `protobuf:"varint,7,opt,name=starttime" json:"starttime,omitempty"`
	Endtime   *uint32        `protobuf:"varint,8,opt,name=endtime" json:"endtime,omitempty"`
	Time      *uint32        `protobuf:"varint,9,opt,name=time" json:"time,omitempty"`
	UseTicket *bool          `protobuf:"varint,10,opt,name=use_ticket,json=useTicket" json:"use_ticket,omitempty"`
	Zoneid    *uint32        `protobuf:"varint,11,opt,name=zoneid" json:"zoneid,omitempty"`
	Sign      *string        `protobuf:"bytes,12,opt,name=sign" json:"sign,omitempty"`
}

// Default values for NtfReserveWeddingDateCCmd fields.
const (
	Default_NtfReserveWeddingDateCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_NtfReserveWeddingDateCCmd_Param = WeddingCParam_WEDDINGCPARAM_NTF_RESERVE_WEDDINGDATE
)

func (x *NtfReserveWeddingDateCCmd) Reset() {
	*x = NtfReserveWeddingDateCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfReserveWeddingDateCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfReserveWeddingDateCCmd) ProtoMessage() {}

func (x *NtfReserveWeddingDateCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfReserveWeddingDateCCmd.ProtoReflect.Descriptor instead.
func (*NtfReserveWeddingDateCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{8}
}

func (x *NtfReserveWeddingDateCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfReserveWeddingDateCCmd_Cmd
}

func (x *NtfReserveWeddingDateCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfReserveWeddingDateCCmd_Param
}

func (x *NtfReserveWeddingDateCCmd) GetDate() uint32 {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return 0
}

func (x *NtfReserveWeddingDateCCmd) GetConfigid() uint32 {
	if x != nil && x.Configid != nil {
		return *x.Configid
	}
	return 0
}

func (x *NtfReserveWeddingDateCCmd) GetCharid1() uint64 {
	if x != nil && x.Charid1 != nil {
		return *x.Charid1
	}
	return 0
}

func (x *NtfReserveWeddingDateCCmd) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NtfReserveWeddingDateCCmd) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

func (x *NtfReserveWeddingDateCCmd) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

func (x *NtfReserveWeddingDateCCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *NtfReserveWeddingDateCCmd) GetUseTicket() bool {
	if x != nil && x.UseTicket != nil {
		return *x.UseTicket
	}
	return false
}

func (x *NtfReserveWeddingDateCCmd) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return 0
}

func (x *NtfReserveWeddingDateCCmd) GetSign() string {
	if x != nil && x.Sign != nil {
		return *x.Sign
	}
	return ""
}

type ReplyReserveWeddingDateCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param     *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=7" json:"param,omitempty"`
	Date      *uint32        `protobuf:"varint,3,opt,name=date" json:"date,omitempty"`
	Configid  *uint32        `protobuf:"varint,4,opt,name=configid" json:"configid,omitempty"`
	Charid1   *uint64        `protobuf:"varint,5,opt,name=charid1" json:"charid1,omitempty"`
	Reply     *EReply        `protobuf:"varint,6,opt,name=reply,enum=Cmd.EReply" json:"reply,omitempty"`
	Time      *uint32        `protobuf:"varint,7,opt,name=time" json:"time,omitempty"`
	UseTicket *bool          `protobuf:"varint,8,opt,name=use_ticket,json=useTicket" json:"use_ticket,omitempty"`
	Zoneid    *uint32        `protobuf:"varint,9,opt,name=zoneid" json:"zoneid,omitempty"`
	Sign      *string        `protobuf:"bytes,10,opt,name=sign" json:"sign,omitempty"`
}

// Default values for ReplyReserveWeddingDateCCmd fields.
const (
	Default_ReplyReserveWeddingDateCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_ReplyReserveWeddingDateCCmd_Param = WeddingCParam_WEDDINGCPARAM_REPLY_RESERVE_WEDDINGDATE
)

func (x *ReplyReserveWeddingDateCCmd) Reset() {
	*x = ReplyReserveWeddingDateCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyReserveWeddingDateCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyReserveWeddingDateCCmd) ProtoMessage() {}

func (x *ReplyReserveWeddingDateCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyReserveWeddingDateCCmd.ProtoReflect.Descriptor instead.
func (*ReplyReserveWeddingDateCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{9}
}

func (x *ReplyReserveWeddingDateCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReplyReserveWeddingDateCCmd_Cmd
}

func (x *ReplyReserveWeddingDateCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReplyReserveWeddingDateCCmd_Param
}

func (x *ReplyReserveWeddingDateCCmd) GetDate() uint32 {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return 0
}

func (x *ReplyReserveWeddingDateCCmd) GetConfigid() uint32 {
	if x != nil && x.Configid != nil {
		return *x.Configid
	}
	return 0
}

func (x *ReplyReserveWeddingDateCCmd) GetCharid1() uint64 {
	if x != nil && x.Charid1 != nil {
		return *x.Charid1
	}
	return 0
}

func (x *ReplyReserveWeddingDateCCmd) GetReply() EReply {
	if x != nil && x.Reply != nil {
		return *x.Reply
	}
	return EReply_EReply_Agree
}

func (x *ReplyReserveWeddingDateCCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *ReplyReserveWeddingDateCCmd) GetUseTicket() bool {
	if x != nil && x.UseTicket != nil {
		return *x.UseTicket
	}
	return false
}

func (x *ReplyReserveWeddingDateCCmd) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return 0
}

func (x *ReplyReserveWeddingDateCCmd) GetSign() string {
	if x != nil && x.Sign != nil {
		return *x.Sign
	}
	return ""
}

type GiveUpReserveCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=8" json:"param,omitempty"`
	Id    *uint64        `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

// Default values for GiveUpReserveCCmd fields.
const (
	Default_GiveUpReserveCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_GiveUpReserveCCmd_Param = WeddingCParam_WEDDINGCPARAM_GIVEUP_RESERVE
)

func (x *GiveUpReserveCCmd) Reset() {
	*x = GiveUpReserveCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiveUpReserveCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveUpReserveCCmd) ProtoMessage() {}

func (x *GiveUpReserveCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveUpReserveCCmd.ProtoReflect.Descriptor instead.
func (*GiveUpReserveCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{10}
}

func (x *GiveUpReserveCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GiveUpReserveCCmd_Cmd
}

func (x *GiveUpReserveCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GiveUpReserveCCmd_Param
}

func (x *GiveUpReserveCCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type ReqDivorceCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=9" json:"param,omitempty"`
	Id    *uint64        `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Type  *EGiveUpType   `protobuf:"varint,4,opt,name=type,enum=Cmd.EGiveUpType" json:"type,omitempty"`
}

// Default values for ReqDivorceCCmd fields.
const (
	Default_ReqDivorceCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_ReqDivorceCCmd_Param = WeddingCParam_WEDDINGCPARAM_REQ_DIVORCE
)

func (x *ReqDivorceCCmd) Reset() {
	*x = ReqDivorceCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDivorceCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDivorceCCmd) ProtoMessage() {}

func (x *ReqDivorceCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDivorceCCmd.ProtoReflect.Descriptor instead.
func (*ReqDivorceCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{11}
}

func (x *ReqDivorceCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqDivorceCCmd_Cmd
}

func (x *ReqDivorceCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqDivorceCCmd_Param
}

func (x *ReqDivorceCCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ReqDivorceCCmd) GetType() EGiveUpType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EGiveUpType_EGiveUpType_Together
}

type ClientWeddingManual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packageids []uint32 `protobuf:"varint,1,rep,name=packageids" json:"packageids,omitempty"`
	Ringid     *uint32  `protobuf:"varint,2,opt,name=ringid,def=0" json:"ringid,omitempty"`
	Photoindex *uint32  `protobuf:"varint,3,opt,name=photoindex,def=0" json:"photoindex,omitempty"`
	Phototime  *uint32  `protobuf:"varint,4,opt,name=phototime,def=0" json:"phototime,omitempty"`
}

// Default values for ClientWeddingManual fields.
const (
	Default_ClientWeddingManual_Ringid     = uint32(0)
	Default_ClientWeddingManual_Photoindex = uint32(0)
	Default_ClientWeddingManual_Phototime  = uint32(0)
)

func (x *ClientWeddingManual) Reset() {
	*x = ClientWeddingManual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientWeddingManual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientWeddingManual) ProtoMessage() {}

func (x *ClientWeddingManual) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientWeddingManual.ProtoReflect.Descriptor instead.
func (*ClientWeddingManual) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{12}
}

func (x *ClientWeddingManual) GetPackageids() []uint32 {
	if x != nil {
		return x.Packageids
	}
	return nil
}

func (x *ClientWeddingManual) GetRingid() uint32 {
	if x != nil && x.Ringid != nil {
		return *x.Ringid
	}
	return Default_ClientWeddingManual_Ringid
}

func (x *ClientWeddingManual) GetPhotoindex() uint32 {
	if x != nil && x.Photoindex != nil {
		return *x.Photoindex
	}
	return Default_ClientWeddingManual_Photoindex
}

func (x *ClientWeddingManual) GetPhototime() uint32 {
	if x != nil && x.Phototime != nil {
		return *x.Phototime
	}
	return Default_ClientWeddingManual_Phototime
}

type WeddingInvitee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid     *uint64 `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Name       *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Invitetime *uint32 `protobuf:"varint,3,opt,name=invitetime,def=0" json:"invitetime,omitempty"`
}

// Default values for WeddingInvitee fields.
const (
	Default_WeddingInvitee_Charid     = uint64(0)
	Default_WeddingInvitee_Invitetime = uint32(0)
)

func (x *WeddingInvitee) Reset() {
	*x = WeddingInvitee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeddingInvitee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeddingInvitee) ProtoMessage() {}

func (x *WeddingInvitee) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeddingInvitee.ProtoReflect.Descriptor instead.
func (*WeddingInvitee) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{13}
}

func (x *WeddingInvitee) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_WeddingInvitee_Charid
}

func (x *WeddingInvitee) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *WeddingInvitee) GetInvitetime() uint32 {
	if x != nil && x.Invitetime != nil {
		return *x.Invitetime
	}
	return Default_WeddingInvitee_Invitetime
}

type UpdateWeddingManualCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param    *WeddingCParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=10" json:"param,omitempty"`
	Manual   *ClientWeddingManual `protobuf:"bytes,3,opt,name=manual" json:"manual,omitempty"`
	Invitees []*WeddingInvitee    `protobuf:"bytes,4,rep,name=invitees" json:"invitees,omitempty"`
}

// Default values for UpdateWeddingManualCCmd fields.
const (
	Default_UpdateWeddingManualCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_UpdateWeddingManualCCmd_Param = WeddingCParam_WEDDINGCPARAM_UPDATE_MANUAL
)

func (x *UpdateWeddingManualCCmd) Reset() {
	*x = UpdateWeddingManualCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWeddingManualCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWeddingManualCCmd) ProtoMessage() {}

func (x *UpdateWeddingManualCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWeddingManualCCmd.ProtoReflect.Descriptor instead.
func (*UpdateWeddingManualCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateWeddingManualCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateWeddingManualCCmd_Cmd
}

func (x *UpdateWeddingManualCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateWeddingManualCCmd_Param
}

func (x *UpdateWeddingManualCCmd) GetManual() *ClientWeddingManual {
	if x != nil {
		return x.Manual
	}
	return nil
}

func (x *UpdateWeddingManualCCmd) GetInvitees() []*WeddingInvitee {
	if x != nil {
		return x.Invitees
	}
	return nil
}

type BuyWeddingPackageCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param     *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=11" json:"param,omitempty"`
	Id        *uint32        `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Priceitem *uint32        `protobuf:"varint,4,opt,name=priceitem,def=0" json:"priceitem,omitempty"`
}

// Default values for BuyWeddingPackageCCmd fields.
const (
	Default_BuyWeddingPackageCCmd_Cmd       = Command_WEDDINGC_PROTOCMD
	Default_BuyWeddingPackageCCmd_Param     = WeddingCParam_WEDDINGCPARAM_BUY_PACKAGE
	Default_BuyWeddingPackageCCmd_Id        = uint32(0)
	Default_BuyWeddingPackageCCmd_Priceitem = uint32(0)
)

func (x *BuyWeddingPackageCCmd) Reset() {
	*x = BuyWeddingPackageCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyWeddingPackageCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyWeddingPackageCCmd) ProtoMessage() {}

func (x *BuyWeddingPackageCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyWeddingPackageCCmd.ProtoReflect.Descriptor instead.
func (*BuyWeddingPackageCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{15}
}

func (x *BuyWeddingPackageCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuyWeddingPackageCCmd_Cmd
}

func (x *BuyWeddingPackageCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuyWeddingPackageCCmd_Param
}

func (x *BuyWeddingPackageCCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_BuyWeddingPackageCCmd_Id
}

func (x *BuyWeddingPackageCCmd) GetPriceitem() uint32 {
	if x != nil && x.Priceitem != nil {
		return *x.Priceitem
	}
	return Default_BuyWeddingPackageCCmd_Priceitem
}

type BuyWeddingRingCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param     *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=12" json:"param,omitempty"`
	Id        *uint32        `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Priceitem *uint32        `protobuf:"varint,4,opt,name=priceitem,def=0" json:"priceitem,omitempty"`
}

// Default values for BuyWeddingRingCCmd fields.
const (
	Default_BuyWeddingRingCCmd_Cmd       = Command_WEDDINGC_PROTOCMD
	Default_BuyWeddingRingCCmd_Param     = WeddingCParam_WEDDINGCPARAM_BUY_RING
	Default_BuyWeddingRingCCmd_Id        = uint32(0)
	Default_BuyWeddingRingCCmd_Priceitem = uint32(0)
)

func (x *BuyWeddingRingCCmd) Reset() {
	*x = BuyWeddingRingCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyWeddingRingCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyWeddingRingCCmd) ProtoMessage() {}

func (x *BuyWeddingRingCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyWeddingRingCCmd.ProtoReflect.Descriptor instead.
func (*BuyWeddingRingCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{16}
}

func (x *BuyWeddingRingCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuyWeddingRingCCmd_Cmd
}

func (x *BuyWeddingRingCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuyWeddingRingCCmd_Param
}

func (x *BuyWeddingRingCCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_BuyWeddingRingCCmd_Id
}

func (x *BuyWeddingRingCCmd) GetPriceitem() uint32 {
	if x != nil && x.Priceitem != nil {
		return *x.Priceitem
	}
	return Default_BuyWeddingRingCCmd_Priceitem
}

type WeddingInviteCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param   *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=13" json:"param,omitempty"`
	Charids []uint64       `protobuf:"varint,3,rep,name=charids" json:"charids,omitempty"`
}

// Default values for WeddingInviteCCmd fields.
const (
	Default_WeddingInviteCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_WeddingInviteCCmd_Param = WeddingCParam_WEDDINGCPARAM_INVITE
)

func (x *WeddingInviteCCmd) Reset() {
	*x = WeddingInviteCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeddingInviteCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeddingInviteCCmd) ProtoMessage() {}

func (x *WeddingInviteCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeddingInviteCCmd.ProtoReflect.Descriptor instead.
func (*WeddingInviteCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{17}
}

func (x *WeddingInviteCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_WeddingInviteCCmd_Cmd
}

func (x *WeddingInviteCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_WeddingInviteCCmd_Param
}

func (x *WeddingInviteCCmd) GetCharids() []uint64 {
	if x != nil {
		return x.Charids
	}
	return nil
}

type UploadWeddingPhotoCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=14" json:"param,omitempty"`
	Index *uint32        `protobuf:"varint,3,opt,name=index,def=0" json:"index,omitempty"`
	Time  *uint32        `protobuf:"varint,4,opt,name=time,def=0" json:"time,omitempty"`
}

// Default values for UploadWeddingPhotoCCmd fields.
const (
	Default_UploadWeddingPhotoCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_UploadWeddingPhotoCCmd_Param = WeddingCParam_WEDDINGCPARAM_UPLOAD_WEDDING_PHOTO
	Default_UploadWeddingPhotoCCmd_Index = uint32(0)
	Default_UploadWeddingPhotoCCmd_Time  = uint32(0)
)

func (x *UploadWeddingPhotoCCmd) Reset() {
	*x = UploadWeddingPhotoCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadWeddingPhotoCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadWeddingPhotoCCmd) ProtoMessage() {}

func (x *UploadWeddingPhotoCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadWeddingPhotoCCmd.ProtoReflect.Descriptor instead.
func (*UploadWeddingPhotoCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{18}
}

func (x *UploadWeddingPhotoCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UploadWeddingPhotoCCmd_Cmd
}

func (x *UploadWeddingPhotoCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UploadWeddingPhotoCCmd_Param
}

func (x *UploadWeddingPhotoCCmd) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_UploadWeddingPhotoCCmd_Index
}

func (x *UploadWeddingPhotoCCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_UploadWeddingPhotoCCmd_Time
}

type CheckCanReserveCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param   *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=15" json:"param,omitempty"`
	Charid2 *uint64        `protobuf:"varint,3,opt,name=charid2" json:"charid2,omitempty"`
	Success *bool          `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
}

// Default values for CheckCanReserveCCmd fields.
const (
	Default_CheckCanReserveCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_CheckCanReserveCCmd_Param = WeddingCParam_WEDDINGCPARAM_CHECK_CAN_RESERVE
)

func (x *CheckCanReserveCCmd) Reset() {
	*x = CheckCanReserveCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCanReserveCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCanReserveCCmd) ProtoMessage() {}

func (x *CheckCanReserveCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCanReserveCCmd.ProtoReflect.Descriptor instead.
func (*CheckCanReserveCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{19}
}

func (x *CheckCanReserveCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CheckCanReserveCCmd_Cmd
}

func (x *CheckCanReserveCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CheckCanReserveCCmd_Param
}

func (x *CheckCanReserveCCmd) GetCharid2() uint64 {
	if x != nil && x.Charid2 != nil {
		return *x.Charid2
	}
	return 0
}

func (x *CheckCanReserveCCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type ReqPartnerInfoCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param    *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=16" json:"param,omitempty"`
	Chardata *CharData      `protobuf:"bytes,3,opt,name=chardata" json:"chardata,omitempty"`
}

// Default values for ReqPartnerInfoCCmd fields.
const (
	Default_ReqPartnerInfoCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_ReqPartnerInfoCCmd_Param = WeddingCParam_WEDDINGCPARAM_REQ_PARTNER_INFO
)

func (x *ReqPartnerInfoCCmd) Reset() {
	*x = ReqPartnerInfoCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqPartnerInfoCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqPartnerInfoCCmd) ProtoMessage() {}

func (x *ReqPartnerInfoCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqPartnerInfoCCmd.ProtoReflect.Descriptor instead.
func (*ReqPartnerInfoCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{20}
}

func (x *ReqPartnerInfoCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqPartnerInfoCCmd_Cmd
}

func (x *ReqPartnerInfoCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqPartnerInfoCCmd_Param
}

func (x *ReqPartnerInfoCCmd) GetChardata() *CharData {
	if x != nil {
		return x.Chardata
	}
	return nil
}

type NtfWeddingInfoCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param *WeddingCParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=17" json:"param,omitempty"`
	Info  *BirefWeddingInfo `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
}

// Default values for NtfWeddingInfoCCmd fields.
const (
	Default_NtfWeddingInfoCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_NtfWeddingInfoCCmd_Param = WeddingCParam_WEDDINGCPARAM_NTF_WEDDING_INFO
)

func (x *NtfWeddingInfoCCmd) Reset() {
	*x = NtfWeddingInfoCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfWeddingInfoCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfWeddingInfoCCmd) ProtoMessage() {}

func (x *NtfWeddingInfoCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfWeddingInfoCCmd.ProtoReflect.Descriptor instead.
func (*NtfWeddingInfoCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{21}
}

func (x *NtfWeddingInfoCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfWeddingInfoCCmd_Cmd
}

func (x *NtfWeddingInfoCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfWeddingInfoCCmd_Param
}

func (x *NtfWeddingInfoCCmd) GetInfo() *BirefWeddingInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type InviteBeginWeddingCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param    *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=18" json:"param,omitempty"`
	Masterid *uint64        `protobuf:"varint,3,opt,name=masterid,def=0" json:"masterid,omitempty"`
	Name     *string        `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Tocharid *uint64        `protobuf:"varint,6,opt,name=tocharid,def=0" json:"tocharid,omitempty"`
}

// Default values for InviteBeginWeddingCCmd fields.
const (
	Default_InviteBeginWeddingCCmd_Cmd      = Command_WEDDINGC_PROTOCMD
	Default_InviteBeginWeddingCCmd_Param    = WeddingCParam_WEDDINGCPARAM_INVITE_WEDDING
	Default_InviteBeginWeddingCCmd_Masterid = uint64(0)
	Default_InviteBeginWeddingCCmd_Tocharid = uint64(0)
)

func (x *InviteBeginWeddingCCmd) Reset() {
	*x = InviteBeginWeddingCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteBeginWeddingCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteBeginWeddingCCmd) ProtoMessage() {}

func (x *InviteBeginWeddingCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteBeginWeddingCCmd.ProtoReflect.Descriptor instead.
func (*InviteBeginWeddingCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{22}
}

func (x *InviteBeginWeddingCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InviteBeginWeddingCCmd_Cmd
}

func (x *InviteBeginWeddingCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InviteBeginWeddingCCmd_Param
}

func (x *InviteBeginWeddingCCmd) GetMasterid() uint64 {
	if x != nil && x.Masterid != nil {
		return *x.Masterid
	}
	return Default_InviteBeginWeddingCCmd_Masterid
}

func (x *InviteBeginWeddingCCmd) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *InviteBeginWeddingCCmd) GetTocharid() uint64 {
	if x != nil && x.Tocharid != nil {
		return *x.Tocharid
	}
	return Default_InviteBeginWeddingCCmd_Tocharid
}

type ReplyBeginWeddingCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param    *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=19" json:"param,omitempty"`
	Masterid *uint64        `protobuf:"varint,3,opt,name=masterid,def=0" json:"masterid,omitempty"`
}

// Default values for ReplyBeginWeddingCCmd fields.
const (
	Default_ReplyBeginWeddingCCmd_Cmd      = Command_WEDDINGC_PROTOCMD
	Default_ReplyBeginWeddingCCmd_Param    = WeddingCParam_WEDDINGCPARAM_REPLY_WEDDING
	Default_ReplyBeginWeddingCCmd_Masterid = uint64(0)
)

func (x *ReplyBeginWeddingCCmd) Reset() {
	*x = ReplyBeginWeddingCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyBeginWeddingCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyBeginWeddingCCmd) ProtoMessage() {}

func (x *ReplyBeginWeddingCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyBeginWeddingCCmd.ProtoReflect.Descriptor instead.
func (*ReplyBeginWeddingCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{23}
}

func (x *ReplyBeginWeddingCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReplyBeginWeddingCCmd_Cmd
}

func (x *ReplyBeginWeddingCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReplyBeginWeddingCCmd_Param
}

func (x *ReplyBeginWeddingCCmd) GetMasterid() uint64 {
	if x != nil && x.Masterid != nil {
		return *x.Masterid
	}
	return Default_ReplyBeginWeddingCCmd_Masterid
}

type GoToWeddingPosCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=20" json:"param,omitempty"`
}

// Default values for GoToWeddingPosCCmd fields.
const (
	Default_GoToWeddingPosCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_GoToWeddingPosCCmd_Param = WeddingCParam_WEDDINGCPARAM_GOTO_WEDDINGPOS
)

func (x *GoToWeddingPosCCmd) Reset() {
	*x = GoToWeddingPosCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoToWeddingPosCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoToWeddingPosCCmd) ProtoMessage() {}

func (x *GoToWeddingPosCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoToWeddingPosCCmd.ProtoReflect.Descriptor instead.
func (*GoToWeddingPosCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{24}
}

func (x *GoToWeddingPosCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GoToWeddingPosCCmd_Cmd
}

func (x *GoToWeddingPosCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GoToWeddingPosCCmd_Param
}

type QuestionWeddingCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param      *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=21" json:"param,omitempty"`
	Questionid *uint32        `protobuf:"varint,3,opt,name=questionid,def=0" json:"questionid,omitempty"`
	Charids    []uint64       `protobuf:"varint,4,rep,name=charids" json:"charids,omitempty"`
	Npcguid    *uint64        `protobuf:"varint,5,opt,name=npcguid,def=0" json:"npcguid,omitempty"`
}

// Default values for QuestionWeddingCCmd fields.
const (
	Default_QuestionWeddingCCmd_Cmd        = Command_WEDDINGC_PROTOCMD
	Default_QuestionWeddingCCmd_Param      = WeddingCParam_WEDDINGCPARAM_QUESTION
	Default_QuestionWeddingCCmd_Questionid = uint32(0)
	Default_QuestionWeddingCCmd_Npcguid    = uint64(0)
)

func (x *QuestionWeddingCCmd) Reset() {
	*x = QuestionWeddingCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionWeddingCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionWeddingCCmd) ProtoMessage() {}

func (x *QuestionWeddingCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionWeddingCCmd.ProtoReflect.Descriptor instead.
func (*QuestionWeddingCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{25}
}

func (x *QuestionWeddingCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuestionWeddingCCmd_Cmd
}

func (x *QuestionWeddingCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuestionWeddingCCmd_Param
}

func (x *QuestionWeddingCCmd) GetQuestionid() uint32 {
	if x != nil && x.Questionid != nil {
		return *x.Questionid
	}
	return Default_QuestionWeddingCCmd_Questionid
}

func (x *QuestionWeddingCCmd) GetCharids() []uint64 {
	if x != nil {
		return x.Charids
	}
	return nil
}

func (x *QuestionWeddingCCmd) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return Default_QuestionWeddingCCmd_Npcguid
}

type AnswerWeddingCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param      *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=22" json:"param,omitempty"`
	Questionid *uint32        `protobuf:"varint,3,opt,name=questionid,def=0" json:"questionid,omitempty"`
	Answer     *uint32        `protobuf:"varint,4,opt,name=answer,def=0" json:"answer,omitempty"`
}

// Default values for AnswerWeddingCCmd fields.
const (
	Default_AnswerWeddingCCmd_Cmd        = Command_WEDDINGC_PROTOCMD
	Default_AnswerWeddingCCmd_Param      = WeddingCParam_WEDDINGCPARAM_ANSWER
	Default_AnswerWeddingCCmd_Questionid = uint32(0)
	Default_AnswerWeddingCCmd_Answer     = uint32(0)
)

func (x *AnswerWeddingCCmd) Reset() {
	*x = AnswerWeddingCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerWeddingCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerWeddingCCmd) ProtoMessage() {}

func (x *AnswerWeddingCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerWeddingCCmd.ProtoReflect.Descriptor instead.
func (*AnswerWeddingCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{26}
}

func (x *AnswerWeddingCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AnswerWeddingCCmd_Cmd
}

func (x *AnswerWeddingCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AnswerWeddingCCmd_Param
}

func (x *AnswerWeddingCCmd) GetQuestionid() uint32 {
	if x != nil && x.Questionid != nil {
		return *x.Questionid
	}
	return Default_AnswerWeddingCCmd_Questionid
}

func (x *AnswerWeddingCCmd) GetAnswer() uint32 {
	if x != nil && x.Answer != nil {
		return *x.Answer
	}
	return Default_AnswerWeddingCCmd_Answer
}

type WeddingEventMsgCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param     *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=23" json:"param,omitempty"`
	Charid    *uint64        `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Event     *EWeddingEvent `protobuf:"varint,4,opt,name=event,enum=Cmd.EWeddingEvent" json:"event,omitempty"`
	Id        *uint64        `protobuf:"varint,5,opt,name=id" json:"id,omitempty"`
	Charid1   *uint64        `protobuf:"varint,6,opt,name=charid1" json:"charid1,omitempty"`
	Charid2   *uint64        `protobuf:"varint,7,opt,name=charid2" json:"charid2,omitempty"`
	Msg       *string        `protobuf:"bytes,8,opt,name=msg" json:"msg,omitempty"`
	OptCharid *uint64        `protobuf:"varint,9,opt,name=opt_charid,json=optCharid" json:"opt_charid,omitempty"`
}

// Default values for WeddingEventMsgCCmd fields.
const (
	Default_WeddingEventMsgCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_WeddingEventMsgCCmd_Param = WeddingCParam_WEDDINGCPARAM_WEDDING_EVENT_MSG
)

func (x *WeddingEventMsgCCmd) Reset() {
	*x = WeddingEventMsgCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeddingEventMsgCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeddingEventMsgCCmd) ProtoMessage() {}

func (x *WeddingEventMsgCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeddingEventMsgCCmd.ProtoReflect.Descriptor instead.
func (*WeddingEventMsgCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{27}
}

func (x *WeddingEventMsgCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_WeddingEventMsgCCmd_Cmd
}

func (x *WeddingEventMsgCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_WeddingEventMsgCCmd_Param
}

func (x *WeddingEventMsgCCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *WeddingEventMsgCCmd) GetEvent() EWeddingEvent {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return EWeddingEvent_EWeddingEvent_Reserve
}

func (x *WeddingEventMsgCCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *WeddingEventMsgCCmd) GetCharid1() uint64 {
	if x != nil && x.Charid1 != nil {
		return *x.Charid1
	}
	return 0
}

func (x *WeddingEventMsgCCmd) GetCharid2() uint64 {
	if x != nil && x.Charid2 != nil {
		return *x.Charid2
	}
	return 0
}

func (x *WeddingEventMsgCCmd) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *WeddingEventMsgCCmd) GetOptCharid() uint64 {
	if x != nil && x.OptCharid != nil {
		return *x.OptCharid
	}
	return 0
}

type WeddingOverCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param   *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=24" json:"param,omitempty"`
	Success *bool          `protobuf:"varint,3,opt,name=success,def=0" json:"success,omitempty"`
}

// Default values for WeddingOverCCmd fields.
const (
	Default_WeddingOverCCmd_Cmd     = Command_WEDDINGC_PROTOCMD
	Default_WeddingOverCCmd_Param   = WeddingCParam_WEDDINGCPARAM_WEDDING_STOP
	Default_WeddingOverCCmd_Success = bool(false)
)

func (x *WeddingOverCCmd) Reset() {
	*x = WeddingOverCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeddingOverCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeddingOverCCmd) ProtoMessage() {}

func (x *WeddingOverCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeddingOverCCmd.ProtoReflect.Descriptor instead.
func (*WeddingOverCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{28}
}

func (x *WeddingOverCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_WeddingOverCCmd_Cmd
}

func (x *WeddingOverCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_WeddingOverCCmd_Param
}

func (x *WeddingOverCCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_WeddingOverCCmd_Success
}

type WeddingSwitchQuestionCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param   *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=25" json:"param,omitempty"`
	Onoff   *bool          `protobuf:"varint,3,opt,name=onoff,def=0" json:"onoff,omitempty"`
	Npcguid *uint64        `protobuf:"varint,4,opt,name=npcguid,def=0" json:"npcguid,omitempty"`
}

// Default values for WeddingSwitchQuestionCCmd fields.
const (
	Default_WeddingSwitchQuestionCCmd_Cmd     = Command_WEDDINGC_PROTOCMD
	Default_WeddingSwitchQuestionCCmd_Param   = WeddingCParam_WEDDINGCPARAM_QUESTION_SWITCH
	Default_WeddingSwitchQuestionCCmd_Onoff   = bool(false)
	Default_WeddingSwitchQuestionCCmd_Npcguid = uint64(0)
)

func (x *WeddingSwitchQuestionCCmd) Reset() {
	*x = WeddingSwitchQuestionCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeddingSwitchQuestionCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeddingSwitchQuestionCCmd) ProtoMessage() {}

func (x *WeddingSwitchQuestionCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeddingSwitchQuestionCCmd.ProtoReflect.Descriptor instead.
func (*WeddingSwitchQuestionCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{29}
}

func (x *WeddingSwitchQuestionCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_WeddingSwitchQuestionCCmd_Cmd
}

func (x *WeddingSwitchQuestionCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_WeddingSwitchQuestionCCmd_Param
}

func (x *WeddingSwitchQuestionCCmd) GetOnoff() bool {
	if x != nil && x.Onoff != nil {
		return *x.Onoff
	}
	return Default_WeddingSwitchQuestionCCmd_Onoff
}

func (x *WeddingSwitchQuestionCCmd) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return Default_WeddingSwitchQuestionCCmd_Npcguid
}

type EnterRollerCoasterCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=26" json:"param,omitempty"`
}

// Default values for EnterRollerCoasterCCmd fields.
const (
	Default_EnterRollerCoasterCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_EnterRollerCoasterCCmd_Param = WeddingCParam_WEDDINGCPARAM_ENTER_ROLLER_COASTER
)

func (x *EnterRollerCoasterCCmd) Reset() {
	*x = EnterRollerCoasterCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterRollerCoasterCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterRollerCoasterCCmd) ProtoMessage() {}

func (x *EnterRollerCoasterCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterRollerCoasterCCmd.ProtoReflect.Descriptor instead.
func (*EnterRollerCoasterCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{30}
}

func (x *EnterRollerCoasterCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnterRollerCoasterCCmd_Cmd
}

func (x *EnterRollerCoasterCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnterRollerCoasterCCmd_Param
}

type DivorceRollerCoasterInviteCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param       *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=27" json:"param,omitempty"`
	Inviter     *uint64        `protobuf:"varint,3,opt,name=inviter" json:"inviter,omitempty"`
	Invitee     *uint64        `protobuf:"varint,4,opt,name=invitee" json:"invitee,omitempty"`
	InviterName *string        `protobuf:"bytes,5,opt,name=inviter_name,json=inviterName" json:"inviter_name,omitempty"`
}

// Default values for DivorceRollerCoasterInviteCCmd fields.
const (
	Default_DivorceRollerCoasterInviteCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_DivorceRollerCoasterInviteCCmd_Param = WeddingCParam_WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_INVITE
)

func (x *DivorceRollerCoasterInviteCCmd) Reset() {
	*x = DivorceRollerCoasterInviteCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DivorceRollerCoasterInviteCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivorceRollerCoasterInviteCCmd) ProtoMessage() {}

func (x *DivorceRollerCoasterInviteCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivorceRollerCoasterInviteCCmd.ProtoReflect.Descriptor instead.
func (*DivorceRollerCoasterInviteCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{31}
}

func (x *DivorceRollerCoasterInviteCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DivorceRollerCoasterInviteCCmd_Cmd
}

func (x *DivorceRollerCoasterInviteCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DivorceRollerCoasterInviteCCmd_Param
}

func (x *DivorceRollerCoasterInviteCCmd) GetInviter() uint64 {
	if x != nil && x.Inviter != nil {
		return *x.Inviter
	}
	return 0
}

func (x *DivorceRollerCoasterInviteCCmd) GetInvitee() uint64 {
	if x != nil && x.Invitee != nil {
		return *x.Invitee
	}
	return 0
}

func (x *DivorceRollerCoasterInviteCCmd) GetInviterName() string {
	if x != nil && x.InviterName != nil {
		return *x.InviterName
	}
	return ""
}

type DivorceRollerCoasterReplyCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param   *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=28" json:"param,omitempty"`
	Inviter *uint64        `protobuf:"varint,3,opt,name=inviter" json:"inviter,omitempty"`
	Reply   *EReply        `protobuf:"varint,5,opt,name=reply,enum=Cmd.EReply" json:"reply,omitempty"`
}

// Default values for DivorceRollerCoasterReplyCCmd fields.
const (
	Default_DivorceRollerCoasterReplyCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_DivorceRollerCoasterReplyCCmd_Param = WeddingCParam_WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_REPLY
)

func (x *DivorceRollerCoasterReplyCCmd) Reset() {
	*x = DivorceRollerCoasterReplyCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DivorceRollerCoasterReplyCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivorceRollerCoasterReplyCCmd) ProtoMessage() {}

func (x *DivorceRollerCoasterReplyCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivorceRollerCoasterReplyCCmd.ProtoReflect.Descriptor instead.
func (*DivorceRollerCoasterReplyCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{32}
}

func (x *DivorceRollerCoasterReplyCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DivorceRollerCoasterReplyCCmd_Cmd
}

func (x *DivorceRollerCoasterReplyCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DivorceRollerCoasterReplyCCmd_Param
}

func (x *DivorceRollerCoasterReplyCCmd) GetInviter() uint64 {
	if x != nil && x.Inviter != nil {
		return *x.Inviter
	}
	return 0
}

func (x *DivorceRollerCoasterReplyCCmd) GetReply() EReply {
	if x != nil && x.Reply != nil {
		return *x.Reply
	}
	return EReply_EReply_Agree
}

type EnterWeddingMapCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=29" json:"param,omitempty"`
}

// Default values for EnterWeddingMapCCmd fields.
const (
	Default_EnterWeddingMapCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_EnterWeddingMapCCmd_Param = WeddingCParam_WEDDINGCPARAM_ENTER_WEDDINGMAP
)

func (x *EnterWeddingMapCCmd) Reset() {
	*x = EnterWeddingMapCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterWeddingMapCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterWeddingMapCCmd) ProtoMessage() {}

func (x *EnterWeddingMapCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterWeddingMapCCmd.ProtoReflect.Descriptor instead.
func (*EnterWeddingMapCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{33}
}

func (x *EnterWeddingMapCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnterWeddingMapCCmd_Cmd
}

func (x *EnterWeddingMapCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnterWeddingMapCCmd_Param
}

type MissyouInviteWedCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=30" json:"param,omitempty"`
}

// Default values for MissyouInviteWedCCmd fields.
const (
	Default_MissyouInviteWedCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_MissyouInviteWedCCmd_Param = WeddingCParam_WEDDINGCPARAM_MISSYOU_INVITE
)

func (x *MissyouInviteWedCCmd) Reset() {
	*x = MissyouInviteWedCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissyouInviteWedCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissyouInviteWedCCmd) ProtoMessage() {}

func (x *MissyouInviteWedCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissyouInviteWedCCmd.ProtoReflect.Descriptor instead.
func (*MissyouInviteWedCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{34}
}

func (x *MissyouInviteWedCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MissyouInviteWedCCmd_Cmd
}

func (x *MissyouInviteWedCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MissyouInviteWedCCmd_Param
}

type MisccyouReplyWedCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=31" json:"param,omitempty"`
	Agree *bool          `protobuf:"varint,3,opt,name=agree,def=0" json:"agree,omitempty"`
}

// Default values for MisccyouReplyWedCCmd fields.
const (
	Default_MisccyouReplyWedCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_MisccyouReplyWedCCmd_Param = WeddingCParam_WEDDINGCPARAM_MISSYOU_REPLY
	Default_MisccyouReplyWedCCmd_Agree = bool(false)
)

func (x *MisccyouReplyWedCCmd) Reset() {
	*x = MisccyouReplyWedCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MisccyouReplyWedCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MisccyouReplyWedCCmd) ProtoMessage() {}

func (x *MisccyouReplyWedCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MisccyouReplyWedCCmd.ProtoReflect.Descriptor instead.
func (*MisccyouReplyWedCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{35}
}

func (x *MisccyouReplyWedCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MisccyouReplyWedCCmd_Cmd
}

func (x *MisccyouReplyWedCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MisccyouReplyWedCCmd_Param
}

func (x *MisccyouReplyWedCCmd) GetAgree() bool {
	if x != nil && x.Agree != nil {
		return *x.Agree
	}
	return Default_MisccyouReplyWedCCmd_Agree
}

type WeddingCarrierCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=65" json:"cmd,omitempty"`
	Param *WeddingCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.WeddingCParam,def=32" json:"param,omitempty"`
}

// Default values for WeddingCarrierCCmd fields.
const (
	Default_WeddingCarrierCCmd_Cmd   = Command_WEDDINGC_PROTOCMD
	Default_WeddingCarrierCCmd_Param = WeddingCParam_WEDDINGCPARAM_CARRIER
)

func (x *WeddingCarrierCCmd) Reset() {
	*x = WeddingCarrierCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_WeddingCCmd_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeddingCarrierCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeddingCarrierCCmd) ProtoMessage() {}

func (x *WeddingCarrierCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_WeddingCCmd_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeddingCarrierCCmd.ProtoReflect.Descriptor instead.
func (*WeddingCarrierCCmd) Descriptor() ([]byte, []int) {
	return file_WeddingCCmd_proto_rawDescGZIP(), []int{36}
}

func (x *WeddingCarrierCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_WeddingCarrierCCmd_Cmd
}

func (x *WeddingCarrierCCmd) GetParam() WeddingCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_WeddingCarrierCCmd_Param
}

var File_WeddingCCmd_proto protoreflect.FileDescriptor

var file_WeddingCCmd_proto_rawDesc = []byte{
	0x0a, 0x11, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x11, 0x57, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x57, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x43, 0x6d,
	0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45,
	0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x4c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x11, 0x57, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x4f, 0x6e, 0x65, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x03, 0x62, 0x61, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x03, 0x62, 0x61,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xde, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x6e,
	0x65, 0x44, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x4f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x25, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x4e,
	0x45, 0x44, 0x41, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x4f, 0x6e, 0x65, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0xfa, 0x02, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x15,
	0x0a, 0x04, 0x68, 0x61, 0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x04, 0x68, 0x61, 0x69, 0x72, 0x12, 0x1f, 0x0a, 0x09, 0x68, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x68, 0x61, 0x69,
	0x72, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x15, 0x0a,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04,
	0x68, 0x65, 0x61, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6d,
	0x6f, 0x75, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d,
	0x6f, 0x75, 0x74, 0x68, 0x12, 0x13, 0x0a, 0x03, 0x65, 0x79, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x65, 0x79, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x97, 0x02,
	0x0a, 0x10, 0x42, 0x69, 0x72, 0x65, 0x66, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x23, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x63,
	0x68, 0x61, 0x72, 0x31, 0x12, 0x23, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x32, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e,
	0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6e,
	0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x44, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x57,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x42, 0x69, 0x72, 0x65, 0x66, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x81, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x43, 0x43, 0x6d,
	0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45,
	0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x5f, 0x57,
	0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x32, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x94, 0x03, 0x0a, 0x19, 0x4e,
	0x74, 0x66, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4f, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x25,
	0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54,
	0x46, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e,
	0x47, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x22, 0xef, 0x02, 0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x43, 0x43, 0x6d,
	0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45,
	0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x51, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x27, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x44, 0x41, 0x54, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x31, 0x12, 0x21, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x11, 0x47, 0x69, 0x76, 0x65, 0x55, 0x70, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x1c, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47,
	0x49, 0x56, 0x45, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x44, 0x69, 0x76, 0x6f,
	0x72, 0x63, 0x65, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x57,
	0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51,
	0x5f, 0x44, 0x49, 0x56, 0x4f, 0x52, 0x43, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x69, 0x76, 0x65, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x73, 0x12, 0x19, 0x0a,
	0x06, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x09, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x0e,
	0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x12, 0x19,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xf6, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1b, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x52, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x52,
	0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x15, 0x42, 0x75,
	0x79, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x43,
	0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11,
	0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x57, 0x45, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x41, 0x47, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0xbd, 0x01, 0x0a, 0x12, 0x42, 0x75, 0x79, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69,
	0x6e, 0x67, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x57, 0x45,
	0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x59, 0x5f,
	0x52, 0x49, 0x4e, 0x47, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0xa0, 0x01, 0x0a, 0x11, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x57, 0x45, 0x44,
	0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e,
	0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x4c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x22, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc7,
	0x01, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x57, 0x45,
	0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x32, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x43, 0x6d, 0x64, 0x12,
	0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44,
	0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x72, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x72, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbc, 0x01, 0x0a, 0x12, 0x4e, 0x74, 0x66, 0x57,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x42, 0x69, 0x72, 0x65, 0x66, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xe5, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x43, 0x6d,
	0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45,
	0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x57, 0x45,
	0x44, 0x44, 0x49, 0x4e, 0x47, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x08, 0x74, 0x6f, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x74, 0x6f, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0xb0,
	0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x57, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b,
	0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x64, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x47, 0x6f, 0x54, 0x6f, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x73, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d,
	0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4f,
	0x54, 0x4f, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x53, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0xe4, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x16, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x21, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x73, 0x12, 0x1b,
	0x0a, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x11,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x43, 0x6d,
	0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45,
	0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x22, 0xca, 0x02, 0x0a, 0x13, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x1f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x53,
	0x47, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x32, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x32, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x43, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22,
	0xab, 0x01, 0x0a, 0x0f, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x43,
	0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11,
	0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x57, 0x45, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xd1, 0x01,
	0x0a, 0x19, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1d, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x05, 0x6f, 0x6e, 0x6f, 0x66, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x6f,
	0x6e, 0x6f, 0x66, 0x66, 0x12, 0x1b, 0x0a, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69,
	0x64, 0x22, 0x99, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x4c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x22, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x41, 0x53, 0x54, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x81, 0x02,
	0x0a, 0x1e, 0x44, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x43, 0x6d, 0x64,
	0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44,
	0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x55, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x2b, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x49, 0x56, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x4f,
	0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xe5, 0x01, 0x0a, 0x1d, 0x44, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43,
	0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11,
	0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x54, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x2a, 0x57, 0x45, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x49, 0x56, 0x4f, 0x52, 0x43, 0x45,
	0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x43, 0x43, 0x6d,
	0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45,
	0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x57, 0x45, 0x44,
	0x44, 0x49, 0x4e, 0x47, 0x4d, 0x41, 0x50, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x91,
	0x01, 0x0a, 0x14, 0x4d, 0x69, 0x73, 0x73, 0x79, 0x6f, 0x75, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x57, 0x65, 0x64, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x57,
	0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x59, 0x4f, 0x55, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0xad, 0x01, 0x0a, 0x14, 0x4d, 0x69, 0x73, 0x63, 0x63, 0x79, 0x6f, 0x75, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x57, 0x65, 0x64, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1b, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4d, 0x49, 0x53, 0x53, 0x59, 0x4f, 0x55, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x61, 0x67, 0x72,
	0x65, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x15, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43,
	0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x2a, 0xe0, 0x08,
	0x0a, 0x0d, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x26, 0x0a, 0x22, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x52, 0x45, 0x51, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x57, 0x45, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x57, 0x45, 0x44,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x4e, 0x45, 0x44, 0x41, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e,
	0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x5f,
	0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x44, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x29, 0x0a,
	0x25, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e,
	0x54, 0x46, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x44, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x57, 0x45, 0x44, 0x44,
	0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x55, 0x50, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x45, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x44, 0x49, 0x56,
	0x4f, 0x52, 0x43, 0x45, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e,
	0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x45, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x41, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e,
	0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x0d, 0x12, 0x26, 0x0a, 0x22,
	0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x48, 0x4f,
	0x54, 0x4f, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x43, 0x41, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x45, 0x44,
	0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x10, 0x12, 0x22, 0x0a,
	0x1e, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e,
	0x54, 0x46, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x11, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x12, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x13, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x50, 0x4f, 0x53, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x45, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x16, 0x12, 0x23, 0x0a,
	0x1f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x57,
	0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x53, 0x47,
	0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x10, 0x18, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x10, 0x19, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c,
	0x4c, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x1a, 0x12, 0x2f, 0x0a,
	0x2b, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44,
	0x49, 0x56, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x1b, 0x12, 0x2e,
	0x0a, 0x2a, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x44, 0x49, 0x56, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x1c, 0x12, 0x22,
	0x0a, 0x1e, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x4d, 0x41, 0x50,
	0x10, 0x1d, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x59, 0x4f, 0x55, 0x5f, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x10, 0x1e, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x59, 0x4f, 0x55, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x10, 0x1f, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x20,
	0x2a, 0x4e, 0x0a, 0x0b, 0x45, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x48, 0x6f, 0x74, 0x10, 0x02,
	0x2a, 0x61, 0x0a, 0x0e, 0x45, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x4d, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x57,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x02, 0x2a, 0x2d, 0x0a, 0x06, 0x45, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a,
	0x0c, 0x45, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x41, 0x67, 0x72, 0x65, 0x65, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65,
	0x10, 0x02, 0x2a, 0x6f, 0x0a, 0x0b, 0x45, 0x47, 0x69, 0x76, 0x65, 0x55, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x47, 0x69, 0x76, 0x65, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x47, 0x69, 0x76, 0x65, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47, 0x69, 0x76, 0x65, 0x55, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x47,
	0x69, 0x76, 0x65, 0x55, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61,
	0x72, 0x10, 0x04, 0x2a, 0xd7, 0x02, 0x0a, 0x0d, 0x45, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x47, 0x69, 0x76, 0x65, 0x75, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x4d, 0x61, 0x72, 0x72, 0x79, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x57,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74,
	0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x53, 0x79, 0x73, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x57, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65, 0x54,
	0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x57, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x69, 0x76, 0x6f, 0x72,
	0x63, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x57,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x69, 0x76, 0x6f,
	0x72, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x57,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x69, 0x76, 0x6f,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b,
	0x45, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x65,
	0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0b,
}

var (
	file_WeddingCCmd_proto_rawDescOnce sync.Once
	file_WeddingCCmd_proto_rawDescData = file_WeddingCCmd_proto_rawDesc
)

func file_WeddingCCmd_proto_rawDescGZIP() []byte {
	file_WeddingCCmd_proto_rawDescOnce.Do(func() {
		file_WeddingCCmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_WeddingCCmd_proto_rawDescData)
	})
	return file_WeddingCCmd_proto_rawDescData
}

var file_WeddingCCmd_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_WeddingCCmd_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_WeddingCCmd_proto_goTypes = []interface{}{
	(WeddingCParam)(0),                     // 0: Cmd.WeddingCParam
	(EDateStatus)(0),                       // 1: Cmd.EDateStatus
	(EWeddingStatus)(0),                    // 2: Cmd.EWeddingStatus
	(EReply)(0),                            // 3: Cmd.EReply
	(EGiveUpType)(0),                       // 4: Cmd.EGiveUpType
	(EWeddingEvent)(0),                     // 5: Cmd.EWeddingEvent
	(*WeddingDateStatus)(nil),              // 6: Cmd.WeddingDateStatus
	(*ReqWeddingDateListCCmd)(nil),         // 7: Cmd.ReqWeddingDateListCCmd
	(*WeddingOneDayInfo)(nil),              // 8: Cmd.WeddingOneDayInfo
	(*ReqWeddingOneDayListCCmd)(nil),       // 9: Cmd.ReqWeddingOneDayListCCmd
	(*CharData)(nil),                       // 10: Cmd.CharData
	(*BirefWeddingInfo)(nil),               // 11: Cmd.BirefWeddingInfo
	(*ReqWeddingInfoCCmd)(nil),             // 12: Cmd.ReqWeddingInfoCCmd
	(*ReserveWeddingDateCCmd)(nil),         // 13: Cmd.ReserveWeddingDateCCmd
	(*NtfReserveWeddingDateCCmd)(nil),      // 14: Cmd.NtfReserveWeddingDateCCmd
	(*ReplyReserveWeddingDateCCmd)(nil),    // 15: Cmd.ReplyReserveWeddingDateCCmd
	(*GiveUpReserveCCmd)(nil),              // 16: Cmd.GiveUpReserveCCmd
	(*ReqDivorceCCmd)(nil),                 // 17: Cmd.ReqDivorceCCmd
	(*ClientWeddingManual)(nil),            // 18: Cmd.ClientWeddingManual
	(*WeddingInvitee)(nil),                 // 19: Cmd.WeddingInvitee
	(*UpdateWeddingManualCCmd)(nil),        // 20: Cmd.UpdateWeddingManualCCmd
	(*BuyWeddingPackageCCmd)(nil),          // 21: Cmd.BuyWeddingPackageCCmd
	(*BuyWeddingRingCCmd)(nil),             // 22: Cmd.BuyWeddingRingCCmd
	(*WeddingInviteCCmd)(nil),              // 23: Cmd.WeddingInviteCCmd
	(*UploadWeddingPhotoCCmd)(nil),         // 24: Cmd.UploadWeddingPhotoCCmd
	(*CheckCanReserveCCmd)(nil),            // 25: Cmd.CheckCanReserveCCmd
	(*ReqPartnerInfoCCmd)(nil),             // 26: Cmd.ReqPartnerInfoCCmd
	(*NtfWeddingInfoCCmd)(nil),             // 27: Cmd.NtfWeddingInfoCCmd
	(*InviteBeginWeddingCCmd)(nil),         // 28: Cmd.InviteBeginWeddingCCmd
	(*ReplyBeginWeddingCCmd)(nil),          // 29: Cmd.ReplyBeginWeddingCCmd
	(*GoToWeddingPosCCmd)(nil),             // 30: Cmd.GoToWeddingPosCCmd
	(*QuestionWeddingCCmd)(nil),            // 31: Cmd.QuestionWeddingCCmd
	(*AnswerWeddingCCmd)(nil),              // 32: Cmd.AnswerWeddingCCmd
	(*WeddingEventMsgCCmd)(nil),            // 33: Cmd.WeddingEventMsgCCmd
	(*WeddingOverCCmd)(nil),                // 34: Cmd.WeddingOverCCmd
	(*WeddingSwitchQuestionCCmd)(nil),      // 35: Cmd.WeddingSwitchQuestionCCmd
	(*EnterRollerCoasterCCmd)(nil),         // 36: Cmd.EnterRollerCoasterCCmd
	(*DivorceRollerCoasterInviteCCmd)(nil), // 37: Cmd.DivorceRollerCoasterInviteCCmd
	(*DivorceRollerCoasterReplyCCmd)(nil),  // 38: Cmd.DivorceRollerCoasterReplyCCmd
	(*EnterWeddingMapCCmd)(nil),            // 39: Cmd.EnterWeddingMapCCmd
	(*MissyouInviteWedCCmd)(nil),           // 40: Cmd.MissyouInviteWedCCmd
	(*MisccyouReplyWedCCmd)(nil),           // 41: Cmd.MisccyouReplyWedCCmd
	(*WeddingCarrierCCmd)(nil),             // 42: Cmd.WeddingCarrierCCmd
	(Command)(0),                           // 43: Cmd.Command
	(EGender)(0),                           // 44: Cmd.EGender
}
var file_WeddingCCmd_proto_depIdxs = []int32{
	1,  // 0: Cmd.WeddingDateStatus.status:type_name -> Cmd.EDateStatus
	43, // 1: Cmd.ReqWeddingDateListCCmd.cmd:type_name -> Cmd.Command
	0,  // 2: Cmd.ReqWeddingDateListCCmd.param:type_name -> Cmd.WeddingCParam
	6,  // 3: Cmd.ReqWeddingDateListCCmd.date_list:type_name -> Cmd.WeddingDateStatus
	43, // 4: Cmd.ReqWeddingOneDayListCCmd.cmd:type_name -> Cmd.Command
	0,  // 5: Cmd.ReqWeddingOneDayListCCmd.param:type_name -> Cmd.WeddingCParam
	8,  // 6: Cmd.ReqWeddingOneDayListCCmd.info:type_name -> Cmd.WeddingOneDayInfo
	44, // 7: Cmd.CharData.gender:type_name -> Cmd.EGender
	2,  // 8: Cmd.BirefWeddingInfo.status:type_name -> Cmd.EWeddingStatus
	10, // 9: Cmd.BirefWeddingInfo.char1:type_name -> Cmd.CharData
	10, // 10: Cmd.BirefWeddingInfo.char2:type_name -> Cmd.CharData
	43, // 11: Cmd.ReqWeddingInfoCCmd.cmd:type_name -> Cmd.Command
	0,  // 12: Cmd.ReqWeddingInfoCCmd.param:type_name -> Cmd.WeddingCParam
	11, // 13: Cmd.ReqWeddingInfoCCmd.info:type_name -> Cmd.BirefWeddingInfo
	43, // 14: Cmd.ReserveWeddingDateCCmd.cmd:type_name -> Cmd.Command
	0,  // 15: Cmd.ReserveWeddingDateCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 16: Cmd.NtfReserveWeddingDateCCmd.cmd:type_name -> Cmd.Command
	0,  // 17: Cmd.NtfReserveWeddingDateCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 18: Cmd.ReplyReserveWeddingDateCCmd.cmd:type_name -> Cmd.Command
	0,  // 19: Cmd.ReplyReserveWeddingDateCCmd.param:type_name -> Cmd.WeddingCParam
	3,  // 20: Cmd.ReplyReserveWeddingDateCCmd.reply:type_name -> Cmd.EReply
	43, // 21: Cmd.GiveUpReserveCCmd.cmd:type_name -> Cmd.Command
	0,  // 22: Cmd.GiveUpReserveCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 23: Cmd.ReqDivorceCCmd.cmd:type_name -> Cmd.Command
	0,  // 24: Cmd.ReqDivorceCCmd.param:type_name -> Cmd.WeddingCParam
	4,  // 25: Cmd.ReqDivorceCCmd.type:type_name -> Cmd.EGiveUpType
	43, // 26: Cmd.UpdateWeddingManualCCmd.cmd:type_name -> Cmd.Command
	0,  // 27: Cmd.UpdateWeddingManualCCmd.param:type_name -> Cmd.WeddingCParam
	18, // 28: Cmd.UpdateWeddingManualCCmd.manual:type_name -> Cmd.ClientWeddingManual
	19, // 29: Cmd.UpdateWeddingManualCCmd.invitees:type_name -> Cmd.WeddingInvitee
	43, // 30: Cmd.BuyWeddingPackageCCmd.cmd:type_name -> Cmd.Command
	0,  // 31: Cmd.BuyWeddingPackageCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 32: Cmd.BuyWeddingRingCCmd.cmd:type_name -> Cmd.Command
	0,  // 33: Cmd.BuyWeddingRingCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 34: Cmd.WeddingInviteCCmd.cmd:type_name -> Cmd.Command
	0,  // 35: Cmd.WeddingInviteCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 36: Cmd.UploadWeddingPhotoCCmd.cmd:type_name -> Cmd.Command
	0,  // 37: Cmd.UploadWeddingPhotoCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 38: Cmd.CheckCanReserveCCmd.cmd:type_name -> Cmd.Command
	0,  // 39: Cmd.CheckCanReserveCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 40: Cmd.ReqPartnerInfoCCmd.cmd:type_name -> Cmd.Command
	0,  // 41: Cmd.ReqPartnerInfoCCmd.param:type_name -> Cmd.WeddingCParam
	10, // 42: Cmd.ReqPartnerInfoCCmd.chardata:type_name -> Cmd.CharData
	43, // 43: Cmd.NtfWeddingInfoCCmd.cmd:type_name -> Cmd.Command
	0,  // 44: Cmd.NtfWeddingInfoCCmd.param:type_name -> Cmd.WeddingCParam
	11, // 45: Cmd.NtfWeddingInfoCCmd.info:type_name -> Cmd.BirefWeddingInfo
	43, // 46: Cmd.InviteBeginWeddingCCmd.cmd:type_name -> Cmd.Command
	0,  // 47: Cmd.InviteBeginWeddingCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 48: Cmd.ReplyBeginWeddingCCmd.cmd:type_name -> Cmd.Command
	0,  // 49: Cmd.ReplyBeginWeddingCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 50: Cmd.GoToWeddingPosCCmd.cmd:type_name -> Cmd.Command
	0,  // 51: Cmd.GoToWeddingPosCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 52: Cmd.QuestionWeddingCCmd.cmd:type_name -> Cmd.Command
	0,  // 53: Cmd.QuestionWeddingCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 54: Cmd.AnswerWeddingCCmd.cmd:type_name -> Cmd.Command
	0,  // 55: Cmd.AnswerWeddingCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 56: Cmd.WeddingEventMsgCCmd.cmd:type_name -> Cmd.Command
	0,  // 57: Cmd.WeddingEventMsgCCmd.param:type_name -> Cmd.WeddingCParam
	5,  // 58: Cmd.WeddingEventMsgCCmd.event:type_name -> Cmd.EWeddingEvent
	43, // 59: Cmd.WeddingOverCCmd.cmd:type_name -> Cmd.Command
	0,  // 60: Cmd.WeddingOverCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 61: Cmd.WeddingSwitchQuestionCCmd.cmd:type_name -> Cmd.Command
	0,  // 62: Cmd.WeddingSwitchQuestionCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 63: Cmd.EnterRollerCoasterCCmd.cmd:type_name -> Cmd.Command
	0,  // 64: Cmd.EnterRollerCoasterCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 65: Cmd.DivorceRollerCoasterInviteCCmd.cmd:type_name -> Cmd.Command
	0,  // 66: Cmd.DivorceRollerCoasterInviteCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 67: Cmd.DivorceRollerCoasterReplyCCmd.cmd:type_name -> Cmd.Command
	0,  // 68: Cmd.DivorceRollerCoasterReplyCCmd.param:type_name -> Cmd.WeddingCParam
	3,  // 69: Cmd.DivorceRollerCoasterReplyCCmd.reply:type_name -> Cmd.EReply
	43, // 70: Cmd.EnterWeddingMapCCmd.cmd:type_name -> Cmd.Command
	0,  // 71: Cmd.EnterWeddingMapCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 72: Cmd.MissyouInviteWedCCmd.cmd:type_name -> Cmd.Command
	0,  // 73: Cmd.MissyouInviteWedCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 74: Cmd.MisccyouReplyWedCCmd.cmd:type_name -> Cmd.Command
	0,  // 75: Cmd.MisccyouReplyWedCCmd.param:type_name -> Cmd.WeddingCParam
	43, // 76: Cmd.WeddingCarrierCCmd.cmd:type_name -> Cmd.Command
	0,  // 77: Cmd.WeddingCarrierCCmd.param:type_name -> Cmd.WeddingCParam
	78, // [78:78] is the sub-list for method output_type
	78, // [78:78] is the sub-list for method input_type
	78, // [78:78] is the sub-list for extension type_name
	78, // [78:78] is the sub-list for extension extendee
	0,  // [0:78] is the sub-list for field type_name
}

func init() { file_WeddingCCmd_proto_init() }
func file_WeddingCCmd_proto_init() {
	if File_WeddingCCmd_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_WeddingCCmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeddingDateStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqWeddingDateListCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeddingOneDayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqWeddingOneDayListCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BirefWeddingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqWeddingInfoCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveWeddingDateCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfReserveWeddingDateCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyReserveWeddingDateCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiveUpReserveCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDivorceCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientWeddingManual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeddingInvitee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWeddingManualCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyWeddingPackageCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyWeddingRingCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeddingInviteCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadWeddingPhotoCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCanReserveCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqPartnerInfoCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfWeddingInfoCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteBeginWeddingCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyBeginWeddingCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoToWeddingPosCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionWeddingCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerWeddingCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeddingEventMsgCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeddingOverCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeddingSwitchQuestionCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterRollerCoasterCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DivorceRollerCoasterInviteCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DivorceRollerCoasterReplyCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterWeddingMapCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissyouInviteWedCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MisccyouReplyWedCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_WeddingCCmd_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeddingCarrierCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_WeddingCCmd_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_WeddingCCmd_proto_goTypes,
		DependencyIndexes: file_WeddingCCmd_proto_depIdxs,
		EnumInfos:         file_WeddingCCmd_proto_enumTypes,
		MessageInfos:      file_WeddingCCmd_proto_msgTypes,
	}.Build()
	File_WeddingCCmd_proto = out.File
	file_WeddingCCmd_proto_rawDesc = nil
	file_WeddingCCmd_proto_goTypes = nil
	file_WeddingCCmd_proto_depIdxs = nil
}
