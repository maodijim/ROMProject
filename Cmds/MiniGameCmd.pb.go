// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: MiniGameCmd.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EMiniGameCmdParam int32

const (
	EMiniGameCmdParam_MINIGAMEPARAM_NTF_MONSTER_SHOT        EMiniGameCmdParam = 1
	EMiniGameCmdParam_MINIGAMEPARAM_SUBMIT_MONSTER_SHOT     EMiniGameCmdParam = 2
	EMiniGameCmdParam_MINIGAMEPARAM_RES_SUBMIT_MONSTER_SHOT EMiniGameCmdParam = 3
	EMiniGameCmdParam_MINIGAMEPARAM_NTF_MONSTER_ANSWER      EMiniGameCmdParam = 9
	EMiniGameCmdParam_MINIGAMEPARAM_SUBMIT_MONSTER_ANSWER   EMiniGameCmdParam = 10
	EMiniGameCmdParam_MINIGAMEPARAM_GET_UNLOCKLIST          EMiniGameCmdParam = 11
	EMiniGameCmdParam_MINIGAMEPARAM_RES_GET_UNLOCKLIST      EMiniGameCmdParam = 12
	EMiniGameCmdParam_MINIGAMEPARAM_ACTION_START            EMiniGameCmdParam = 13
	EMiniGameCmdParam_MINIGAMEPARAM_ACTION_NEXTROUND        EMiniGameCmdParam = 14
	EMiniGameCmdParam_MINIGAMEPARAM_NTF_GAME_OVER           EMiniGameCmdParam = 15
	EMiniGameCmdParam_MINIGAMEPARAM_OVERGAME                EMiniGameCmdParam = 16
	EMiniGameCmdParam_MINIGAMEPARAM_USE_ASSIST              EMiniGameCmdParam = 17
	EMiniGameCmdParam_MINIGAMEPARAM_ROUNDEND_NTF            EMiniGameCmdParam = 18
	EMiniGameCmdParam_MINIGAMEPARAM_QUERYRANK               EMiniGameCmdParam = 19
)

// Enum value maps for EMiniGameCmdParam.
var (
	EMiniGameCmdParam_name = map[int32]string{
		1:  "MINIGAMEPARAM_NTF_MONSTER_SHOT",
		2:  "MINIGAMEPARAM_SUBMIT_MONSTER_SHOT",
		3:  "MINIGAMEPARAM_RES_SUBMIT_MONSTER_SHOT",
		9:  "MINIGAMEPARAM_NTF_MONSTER_ANSWER",
		10: "MINIGAMEPARAM_SUBMIT_MONSTER_ANSWER",
		11: "MINIGAMEPARAM_GET_UNLOCKLIST",
		12: "MINIGAMEPARAM_RES_GET_UNLOCKLIST",
		13: "MINIGAMEPARAM_ACTION_START",
		14: "MINIGAMEPARAM_ACTION_NEXTROUND",
		15: "MINIGAMEPARAM_NTF_GAME_OVER",
		16: "MINIGAMEPARAM_OVERGAME",
		17: "MINIGAMEPARAM_USE_ASSIST",
		18: "MINIGAMEPARAM_ROUNDEND_NTF",
		19: "MINIGAMEPARAM_QUERYRANK",
	}
	EMiniGameCmdParam_value = map[string]int32{
		"MINIGAMEPARAM_NTF_MONSTER_SHOT":        1,
		"MINIGAMEPARAM_SUBMIT_MONSTER_SHOT":     2,
		"MINIGAMEPARAM_RES_SUBMIT_MONSTER_SHOT": 3,
		"MINIGAMEPARAM_NTF_MONSTER_ANSWER":      9,
		"MINIGAMEPARAM_SUBMIT_MONSTER_ANSWER":   10,
		"MINIGAMEPARAM_GET_UNLOCKLIST":          11,
		"MINIGAMEPARAM_RES_GET_UNLOCKLIST":      12,
		"MINIGAMEPARAM_ACTION_START":            13,
		"MINIGAMEPARAM_ACTION_NEXTROUND":        14,
		"MINIGAMEPARAM_NTF_GAME_OVER":           15,
		"MINIGAMEPARAM_OVERGAME":                16,
		"MINIGAMEPARAM_USE_ASSIST":              17,
		"MINIGAMEPARAM_ROUNDEND_NTF":            18,
		"MINIGAMEPARAM_QUERYRANK":               19,
	}
)

func (x EMiniGameCmdParam) Enum() *EMiniGameCmdParam {
	p := new(EMiniGameCmdParam)
	*p = x
	return p
}

func (x EMiniGameCmdParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMiniGameCmdParam) Descriptor() protoreflect.EnumDescriptor {
	return file_MiniGameCmd_proto_enumTypes[0].Descriptor()
}

func (EMiniGameCmdParam) Type() protoreflect.EnumType {
	return &file_MiniGameCmd_proto_enumTypes[0]
}

func (x EMiniGameCmdParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMiniGameCmdParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMiniGameCmdParam(num)
	return nil
}

// Deprecated: Use EMiniGameCmdParam.Descriptor instead.
func (EMiniGameCmdParam) EnumDescriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{0}
}

type EMiniGameType int32

const (
	EMiniGameType_EMINIGAMETYPE_NONE           EMiniGameType = 0
	EMiniGameType_EMINIGAMETYPE_MONSTER_ANSWER EMiniGameType = 1
	EMiniGameType_EMINIGAMETYPE_MONSTER_PHOTO  EMiniGameType = 2
	EMiniGameType_EMINIGAMETYPE_CARD_PAIR      EMiniGameType = 3
	EMiniGameType_EMINIGAMETYPE_MAX            EMiniGameType = 4
)

// Enum value maps for EMiniGameType.
var (
	EMiniGameType_name = map[int32]string{
		0: "EMINIGAMETYPE_NONE",
		1: "EMINIGAMETYPE_MONSTER_ANSWER",
		2: "EMINIGAMETYPE_MONSTER_PHOTO",
		3: "EMINIGAMETYPE_CARD_PAIR",
		4: "EMINIGAMETYPE_MAX",
	}
	EMiniGameType_value = map[string]int32{
		"EMINIGAMETYPE_NONE":           0,
		"EMINIGAMETYPE_MONSTER_ANSWER": 1,
		"EMINIGAMETYPE_MONSTER_PHOTO":  2,
		"EMINIGAMETYPE_CARD_PAIR":      3,
		"EMINIGAMETYPE_MAX":            4,
	}
)

func (x EMiniGameType) Enum() *EMiniGameType {
	p := new(EMiniGameType)
	*p = x
	return p
}

func (x EMiniGameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMiniGameType) Descriptor() protoreflect.EnumDescriptor {
	return file_MiniGameCmd_proto_enumTypes[1].Descriptor()
}

func (EMiniGameType) Type() protoreflect.EnumType {
	return &file_MiniGameCmd_proto_enumTypes[1]
}

func (x EMiniGameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMiniGameType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMiniGameType(num)
	return nil
}

// Deprecated: Use EMiniGameType.Descriptor instead.
func (EMiniGameType) EnumDescriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{1}
}

type EMiniGameErrcode int32

const (
	EMiniGameErrcode_EMINIGAME_ERROR_NONE                  EMiniGameErrcode = 0
	EMiniGameErrcode_EMINIGAME_ERROR_DIFFICULTY_NOT_UNLOCK EMiniGameErrcode = 1
	EMiniGameErrcode_EMINIGAME_ERROR_MONSTER_ANSWER_ERROR  EMiniGameErrcode = 2
	EMiniGameErrcode_ENIMIGAME_ERROR_OVER_ALREADY          EMiniGameErrcode = 3
	EMiniGameErrcode_ENIMIGAME_ERROR_NO_MAPRAID            EMiniGameErrcode = 4
	EMiniGameErrcode_ENIMIGAME_ERROR_DIFFICULTY_ILLEGAL    EMiniGameErrcode = 5
	EMiniGameErrcode_ENIMIGAME_ERROR_TYPE_ILLEGAL          EMiniGameErrcode = 6
	EMiniGameErrcode_ENIMIGAME_ERROR_MAP_NOMATCH           EMiniGameErrcode = 7
	EMiniGameErrcode_ENIMIGAME_ERROR_REACH_LIMIT           EMiniGameErrcode = 8
	EMiniGameErrcode_ENIMIGAME_ERROR_INGAME_ALREADY        EMiniGameErrcode = 9
	EMiniGameErrcode_ENIMIGAME_ERROR_NOT_INGAME            EMiniGameErrcode = 10
)

// Enum value maps for EMiniGameErrcode.
var (
	EMiniGameErrcode_name = map[int32]string{
		0:  "EMINIGAME_ERROR_NONE",
		1:  "EMINIGAME_ERROR_DIFFICULTY_NOT_UNLOCK",
		2:  "EMINIGAME_ERROR_MONSTER_ANSWER_ERROR",
		3:  "ENIMIGAME_ERROR_OVER_ALREADY",
		4:  "ENIMIGAME_ERROR_NO_MAPRAID",
		5:  "ENIMIGAME_ERROR_DIFFICULTY_ILLEGAL",
		6:  "ENIMIGAME_ERROR_TYPE_ILLEGAL",
		7:  "ENIMIGAME_ERROR_MAP_NOMATCH",
		8:  "ENIMIGAME_ERROR_REACH_LIMIT",
		9:  "ENIMIGAME_ERROR_INGAME_ALREADY",
		10: "ENIMIGAME_ERROR_NOT_INGAME",
	}
	EMiniGameErrcode_value = map[string]int32{
		"EMINIGAME_ERROR_NONE":                  0,
		"EMINIGAME_ERROR_DIFFICULTY_NOT_UNLOCK": 1,
		"EMINIGAME_ERROR_MONSTER_ANSWER_ERROR":  2,
		"ENIMIGAME_ERROR_OVER_ALREADY":          3,
		"ENIMIGAME_ERROR_NO_MAPRAID":            4,
		"ENIMIGAME_ERROR_DIFFICULTY_ILLEGAL":    5,
		"ENIMIGAME_ERROR_TYPE_ILLEGAL":          6,
		"ENIMIGAME_ERROR_MAP_NOMATCH":           7,
		"ENIMIGAME_ERROR_REACH_LIMIT":           8,
		"ENIMIGAME_ERROR_INGAME_ALREADY":        9,
		"ENIMIGAME_ERROR_NOT_INGAME":            10,
	}
)

func (x EMiniGameErrcode) Enum() *EMiniGameErrcode {
	p := new(EMiniGameErrcode)
	*p = x
	return p
}

func (x EMiniGameErrcode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMiniGameErrcode) Descriptor() protoreflect.EnumDescriptor {
	return file_MiniGameCmd_proto_enumTypes[2].Descriptor()
}

func (EMiniGameErrcode) Type() protoreflect.EnumType {
	return &file_MiniGameCmd_proto_enumTypes[2]
}

func (x EMiniGameErrcode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMiniGameErrcode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMiniGameErrcode(num)
	return nil
}

// Deprecated: Use EMiniGameErrcode.Descriptor instead.
func (EMiniGameErrcode) EnumDescriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{2}
}

type EMiniGameOverResult int32

const (
	EMiniGameOverResult_EMINIGAME_OVER_WIN  EMiniGameOverResult = 0
	EMiniGameOverResult_EMINIGAME_OVER_LOSE EMiniGameOverResult = 1
)

// Enum value maps for EMiniGameOverResult.
var (
	EMiniGameOverResult_name = map[int32]string{
		0: "EMINIGAME_OVER_WIN",
		1: "EMINIGAME_OVER_LOSE",
	}
	EMiniGameOverResult_value = map[string]int32{
		"EMINIGAME_OVER_WIN":  0,
		"EMINIGAME_OVER_LOSE": 1,
	}
)

func (x EMiniGameOverResult) Enum() *EMiniGameOverResult {
	p := new(EMiniGameOverResult)
	*p = x
	return p
}

func (x EMiniGameOverResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMiniGameOverResult) Descriptor() protoreflect.EnumDescriptor {
	return file_MiniGameCmd_proto_enumTypes[3].Descriptor()
}

func (EMiniGameOverResult) Type() protoreflect.EnumType {
	return &file_MiniGameCmd_proto_enumTypes[3]
}

func (x EMiniGameOverResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMiniGameOverResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMiniGameOverResult(num)
	return nil
}

// Deprecated: Use EMiniGameOverResult.Descriptor instead.
func (EMiniGameOverResult) EnumDescriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{3}
}

type EMonsterShotCompare int32

const (
	EMonsterShotCompare_EMONSTERSHOT_COMPARE_NONE EMonsterShotCompare = 0
	EMonsterShotCompare_EMONSTERSHOT_COMPARE_LT   EMonsterShotCompare = 1
	EMonsterShotCompare_EMONSTERSHOT_COMPARE_EQ   EMonsterShotCompare = 2
	EMonsterShotCompare_EMONSTERSHOT_COMPARE_GT   EMonsterShotCompare = 3
)

// Enum value maps for EMonsterShotCompare.
var (
	EMonsterShotCompare_name = map[int32]string{
		0: "EMONSTERSHOT_COMPARE_NONE",
		1: "EMONSTERSHOT_COMPARE_LT",
		2: "EMONSTERSHOT_COMPARE_EQ",
		3: "EMONSTERSHOT_COMPARE_GT",
	}
	EMonsterShotCompare_value = map[string]int32{
		"EMONSTERSHOT_COMPARE_NONE": 0,
		"EMONSTERSHOT_COMPARE_LT":   1,
		"EMONSTERSHOT_COMPARE_EQ":   2,
		"EMONSTERSHOT_COMPARE_GT":   3,
	}
)

func (x EMonsterShotCompare) Enum() *EMonsterShotCompare {
	p := new(EMonsterShotCompare)
	*p = x
	return p
}

func (x EMonsterShotCompare) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMonsterShotCompare) Descriptor() protoreflect.EnumDescriptor {
	return file_MiniGameCmd_proto_enumTypes[4].Descriptor()
}

func (EMonsterShotCompare) Type() protoreflect.EnumType {
	return &file_MiniGameCmd_proto_enumTypes[4]
}

func (x EMonsterShotCompare) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMonsterShotCompare) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMonsterShotCompare(num)
	return nil
}

// Deprecated: Use EMonsterShotCompare.Descriptor instead.
func (EMonsterShotCompare) EnumDescriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{4}
}

type EMonsterAnwserQuestType int32

const (
	EMonsterAnwserQuestType_EMONSTERANWSER_QUESTTYPE_FEET           EMonsterAnwserQuestType = 0
	EMonsterAnwserQuestType_EMONSTERANWSER_QUESTTYPE_ELEMENT        EMonsterAnwserQuestType = 1
	EMonsterAnwserQuestType_EMONSTERANWSER_QUESTTYPE_COLOR          EMonsterAnwserQuestType = 2
	EMonsterAnwserQuestType_EMONSTERAdifficultyNWSER_QUESTTYPE_RACE EMonsterAnwserQuestType = 3
	EMonsterAnwserQuestType_EMONSTERANWSER_QUESTTYPE_MAX            EMonsterAnwserQuestType = 4
)

// Enum value maps for EMonsterAnwserQuestType.
var (
	EMonsterAnwserQuestType_name = map[int32]string{
		0: "EMONSTERANWSER_QUESTTYPE_FEET",
		1: "EMONSTERANWSER_QUESTTYPE_ELEMENT",
		2: "EMONSTERANWSER_QUESTTYPE_COLOR",
		3: "EMONSTERAdifficultyNWSER_QUESTTYPE_RACE",
		4: "EMONSTERANWSER_QUESTTYPE_MAX",
	}
	EMonsterAnwserQuestType_value = map[string]int32{
		"EMONSTERANWSER_QUESTTYPE_FEET":           0,
		"EMONSTERANWSER_QUESTTYPE_ELEMENT":        1,
		"EMONSTERANWSER_QUESTTYPE_COLOR":          2,
		"EMONSTERAdifficultyNWSER_QUESTTYPE_RACE": 3,
		"EMONSTERANWSER_QUESTTYPE_MAX":            4,
	}
)

func (x EMonsterAnwserQuestType) Enum() *EMonsterAnwserQuestType {
	p := new(EMonsterAnwserQuestType)
	*p = x
	return p
}

func (x EMonsterAnwserQuestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMonsterAnwserQuestType) Descriptor() protoreflect.EnumDescriptor {
	return file_MiniGameCmd_proto_enumTypes[5].Descriptor()
}

func (EMonsterAnwserQuestType) Type() protoreflect.EnumType {
	return &file_MiniGameCmd_proto_enumTypes[5]
}

func (x EMonsterAnwserQuestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMonsterAnwserQuestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMonsterAnwserQuestType(num)
	return nil
}

// Deprecated: Use EMonsterAnwserQuestType.Descriptor instead.
func (EMonsterAnwserQuestType) EnumDescriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{5}
}

type EMonsterAnswerLinkSymbol int32

const (
	EMonsterAnswerLinkSymbol_EMONSTERANSWER_LINKSYMBOL_NONE EMonsterAnswerLinkSymbol = 0
	EMonsterAnswerLinkSymbol_EMONSTERANSWER_LINKSYMBOL_AND  EMonsterAnswerLinkSymbol = 1
	EMonsterAnswerLinkSymbol_EMONSTERANSWER_LINKSYMBOL_OR   EMonsterAnswerLinkSymbol = 2
)

// Enum value maps for EMonsterAnswerLinkSymbol.
var (
	EMonsterAnswerLinkSymbol_name = map[int32]string{
		0: "EMONSTERANSWER_LINKSYMBOL_NONE",
		1: "EMONSTERANSWER_LINKSYMBOL_AND",
		2: "EMONSTERANSWER_LINKSYMBOL_OR",
	}
	EMonsterAnswerLinkSymbol_value = map[string]int32{
		"EMONSTERANSWER_LINKSYMBOL_NONE": 0,
		"EMONSTERANSWER_LINKSYMBOL_AND":  1,
		"EMONSTERANSWER_LINKSYMBOL_OR":   2,
	}
)

func (x EMonsterAnswerLinkSymbol) Enum() *EMonsterAnswerLinkSymbol {
	p := new(EMonsterAnswerLinkSymbol)
	*p = x
	return p
}

func (x EMonsterAnswerLinkSymbol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMonsterAnswerLinkSymbol) Descriptor() protoreflect.EnumDescriptor {
	return file_MiniGameCmd_proto_enumTypes[6].Descriptor()
}

func (EMonsterAnswerLinkSymbol) Type() protoreflect.EnumType {
	return &file_MiniGameCmd_proto_enumTypes[6]
}

func (x EMonsterAnswerLinkSymbol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMonsterAnswerLinkSymbol) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMonsterAnswerLinkSymbol(num)
	return nil
}

// Deprecated: Use EMonsterAnswerLinkSymbol.Descriptor instead.
func (EMonsterAnswerLinkSymbol) EnumDescriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{6}
}

type ELastReplyStatus int32

const (
	ELastReplyStatus_ELASTREPLYSTATUS_NONE  ELastReplyStatus = 0
	ELastReplyStatus_ELASTREPLYSTATUS_ERROR ELastReplyStatus = 1
	ELastReplyStatus_ELASTREPLYSTATUS_RIGHT ELastReplyStatus = 2
)

// Enum value maps for ELastReplyStatus.
var (
	ELastReplyStatus_name = map[int32]string{
		0: "ELASTREPLYSTATUS_NONE",
		1: "ELASTREPLYSTATUS_ERROR",
		2: "ELASTREPLYSTATUS_RIGHT",
	}
	ELastReplyStatus_value = map[string]int32{
		"ELASTREPLYSTATUS_NONE":  0,
		"ELASTREPLYSTATUS_ERROR": 1,
		"ELASTREPLYSTATUS_RIGHT": 2,
	}
)

func (x ELastReplyStatus) Enum() *ELastReplyStatus {
	p := new(ELastReplyStatus)
	*p = x
	return p
}

func (x ELastReplyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELastReplyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_MiniGameCmd_proto_enumTypes[7].Descriptor()
}

func (ELastReplyStatus) Type() protoreflect.EnumType {
	return &file_MiniGameCmd_proto_enumTypes[7]
}

func (x ELastReplyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELastReplyStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELastReplyStatus(num)
	return nil
}

// Deprecated: Use ELastReplyStatus.Descriptor instead.
func (ELastReplyStatus) EnumDescriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{7}
}

type EAssistType int32

const (
	EAssistType_EASSISTTYPE_ADDTIME      EAssistType = 1
	EAssistType_EASSISTTYPE_QUICK_FINISH EAssistType = 2
	EAssistType_EASSISTTYPE_TIPS         EAssistType = 3
)

// Enum value maps for EAssistType.
var (
	EAssistType_name = map[int32]string{
		1: "EASSISTTYPE_ADDTIME",
		2: "EASSISTTYPE_QUICK_FINISH",
		3: "EASSISTTYPE_TIPS",
	}
	EAssistType_value = map[string]int32{
		"EASSISTTYPE_ADDTIME":      1,
		"EASSISTTYPE_QUICK_FINISH": 2,
		"EASSISTTYPE_TIPS":         3,
	}
)

func (x EAssistType) Enum() *EAssistType {
	p := new(EAssistType)
	*p = x
	return p
}

func (x EAssistType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAssistType) Descriptor() protoreflect.EnumDescriptor {
	return file_MiniGameCmd_proto_enumTypes[8].Descriptor()
}

func (EAssistType) Type() protoreflect.EnumType {
	return &file_MiniGameCmd_proto_enumTypes[8]
}

func (x EAssistType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAssistType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAssistType(num)
	return nil
}

// Deprecated: Use EAssistType.Descriptor instead.
func (EAssistType) EnumDescriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{8}
}

type EMinigameMode int32

const (
	EMinigameMode_EMINIGAMEMODE_NORMAL    EMinigameMode = 1
	EMinigameMode_EMINIGAMEMODE_CHALLENGE EMinigameMode = 2
)

// Enum value maps for EMinigameMode.
var (
	EMinigameMode_name = map[int32]string{
		1: "EMINIGAMEMODE_NORMAL",
		2: "EMINIGAMEMODE_CHALLENGE",
	}
	EMinigameMode_value = map[string]int32{
		"EMINIGAMEMODE_NORMAL":    1,
		"EMINIGAMEMODE_CHALLENGE": 2,
	}
)

func (x EMinigameMode) Enum() *EMinigameMode {
	p := new(EMinigameMode)
	*p = x
	return p
}

func (x EMinigameMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMinigameMode) Descriptor() protoreflect.EnumDescriptor {
	return file_MiniGameCmd_proto_enumTypes[9].Descriptor()
}

func (EMinigameMode) Type() protoreflect.EnumType {
	return &file_MiniGameCmd_proto_enumTypes[9]
}

func (x EMinigameMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMinigameMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMinigameMode(num)
	return nil
}

// Deprecated: Use EMinigameMode.Descriptor instead.
func (EMinigameMode) EnumDescriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{9}
}

type MiniGameAssist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *EAssistType `protobuf:"varint,1,opt,name=type,enum=Cmd.EAssistType" json:"type,omitempty"`
	Count  *uint32      `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Effect *uint32      `protobuf:"varint,3,opt,name=effect" json:"effect,omitempty"`
}

func (x *MiniGameAssist) Reset() {
	*x = MiniGameAssist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameAssist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameAssist) ProtoMessage() {}

func (x *MiniGameAssist) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameAssist.ProtoReflect.Descriptor instead.
func (*MiniGameAssist) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{0}
}

func (x *MiniGameAssist) GetType() EAssistType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EAssistType_EASSISTTYPE_ADDTIME
}

func (x *MiniGameAssist) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *MiniGameAssist) GetEffect() uint32 {
	if x != nil && x.Effect != nil {
		return *x.Effect
	}
	return 0
}

type MonsterShotRequirePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmptype   *EMonsterShotCompare `protobuf:"varint,1,opt,name=cmptype,enum=Cmd.EMonsterShotCompare,def=0" json:"cmptype,omitempty"`
	Value     *uint32              `protobuf:"varint,2,opt,name=value,def=0" json:"value,omitempty"`
	Plusleft  *uint32              `protobuf:"varint,3,opt,name=plusleft,def=0" json:"plusleft,omitempty"`
	Plusright *uint32              `protobuf:"varint,4,opt,name=plusright,def=0" json:"plusright,omitempty"`
}

// Default values for MonsterShotRequirePair fields.
const (
	Default_MonsterShotRequirePair_Cmptype   = EMonsterShotCompare_EMONSTERSHOT_COMPARE_NONE
	Default_MonsterShotRequirePair_Value     = uint32(0)
	Default_MonsterShotRequirePair_Plusleft  = uint32(0)
	Default_MonsterShotRequirePair_Plusright = uint32(0)
)

func (x *MonsterShotRequirePair) Reset() {
	*x = MonsterShotRequirePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonsterShotRequirePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonsterShotRequirePair) ProtoMessage() {}

func (x *MonsterShotRequirePair) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonsterShotRequirePair.ProtoReflect.Descriptor instead.
func (*MonsterShotRequirePair) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{1}
}

func (x *MonsterShotRequirePair) GetCmptype() EMonsterShotCompare {
	if x != nil && x.Cmptype != nil {
		return *x.Cmptype
	}
	return Default_MonsterShotRequirePair_Cmptype
}

func (x *MonsterShotRequirePair) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_MonsterShotRequirePair_Value
}

func (x *MonsterShotRequirePair) GetPlusleft() uint32 {
	if x != nil && x.Plusleft != nil {
		return *x.Plusleft
	}
	return Default_MonsterShotRequirePair_Plusleft
}

func (x *MonsterShotRequirePair) GetPlusright() uint32 {
	if x != nil && x.Plusright != nil {
		return *x.Plusright
	}
	return Default_MonsterShotRequirePair_Plusright
}

type MiniGameNtfMonsterShot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command                  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=223" json:"cmd,omitempty"`
	Param        *EMiniGameCmdParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.EMiniGameCmdParam,def=1" json:"param,omitempty"`
	Countdown    *uint32                   `protobuf:"varint,3,opt,name=countdown,def=0" json:"countdown,omitempty"`
	Requires     []*MonsterShotRequirePair `protobuf:"bytes,4,rep,name=requires" json:"requires,omitempty"`
	Misstimerest *uint32                   `protobuf:"varint,5,opt,name=misstimerest,def=0" json:"misstimerest,omitempty"`
	Totalrounds  *uint32                   `protobuf:"varint,6,opt,name=totalrounds,def=0" json:"totalrounds,omitempty"`
	Curround     *uint32                   `protobuf:"varint,7,opt,name=curround,def=0" json:"curround,omitempty"`
	Useplus      *bool                     `protobuf:"varint,8,opt,name=useplus,def=0" json:"useplus,omitempty"`
}

// Default values for MiniGameNtfMonsterShot fields.
const (
	Default_MiniGameNtfMonsterShot_Cmd          = Command_MINIGAME_PROTOCMD
	Default_MiniGameNtfMonsterShot_Param        = EMiniGameCmdParam_MINIGAMEPARAM_NTF_MONSTER_SHOT
	Default_MiniGameNtfMonsterShot_Countdown    = uint32(0)
	Default_MiniGameNtfMonsterShot_Misstimerest = uint32(0)
	Default_MiniGameNtfMonsterShot_Totalrounds  = uint32(0)
	Default_MiniGameNtfMonsterShot_Curround     = uint32(0)
	Default_MiniGameNtfMonsterShot_Useplus      = bool(false)
)

func (x *MiniGameNtfMonsterShot) Reset() {
	*x = MiniGameNtfMonsterShot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameNtfMonsterShot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameNtfMonsterShot) ProtoMessage() {}

func (x *MiniGameNtfMonsterShot) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameNtfMonsterShot.ProtoReflect.Descriptor instead.
func (*MiniGameNtfMonsterShot) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{2}
}

func (x *MiniGameNtfMonsterShot) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MiniGameNtfMonsterShot_Cmd
}

func (x *MiniGameNtfMonsterShot) GetParam() EMiniGameCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MiniGameNtfMonsterShot_Param
}

func (x *MiniGameNtfMonsterShot) GetCountdown() uint32 {
	if x != nil && x.Countdown != nil {
		return *x.Countdown
	}
	return Default_MiniGameNtfMonsterShot_Countdown
}

func (x *MiniGameNtfMonsterShot) GetRequires() []*MonsterShotRequirePair {
	if x != nil {
		return x.Requires
	}
	return nil
}

func (x *MiniGameNtfMonsterShot) GetMisstimerest() uint32 {
	if x != nil && x.Misstimerest != nil {
		return *x.Misstimerest
	}
	return Default_MiniGameNtfMonsterShot_Misstimerest
}

func (x *MiniGameNtfMonsterShot) GetTotalrounds() uint32 {
	if x != nil && x.Totalrounds != nil {
		return *x.Totalrounds
	}
	return Default_MiniGameNtfMonsterShot_Totalrounds
}

func (x *MiniGameNtfMonsterShot) GetCurround() uint32 {
	if x != nil && x.Curround != nil {
		return *x.Curround
	}
	return Default_MiniGameNtfMonsterShot_Curround
}

func (x *MiniGameNtfMonsterShot) GetUseplus() bool {
	if x != nil && x.Useplus != nil {
		return *x.Useplus
	}
	return Default_MiniGameNtfMonsterShot_Useplus
}

type MiniGameMonsterShotAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=223" json:"cmd,omitempty"`
	Param          *EMiniGameCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EMiniGameCmdParam,def=2" json:"param,omitempty"`
	Clientjudgesuc *bool              `protobuf:"varint,3,opt,name=clientjudgesuc,def=0" json:"clientjudgesuc,omitempty"`
	Errcode        *EMiniGameErrcode  `protobuf:"varint,4,opt,name=errcode,enum=Cmd.EMiniGameErrcode,def=0" json:"errcode,omitempty"`
}

// Default values for MiniGameMonsterShotAction fields.
const (
	Default_MiniGameMonsterShotAction_Cmd            = Command_MINIGAME_PROTOCMD
	Default_MiniGameMonsterShotAction_Param          = EMiniGameCmdParam_MINIGAMEPARAM_SUBMIT_MONSTER_SHOT
	Default_MiniGameMonsterShotAction_Clientjudgesuc = bool(false)
	Default_MiniGameMonsterShotAction_Errcode        = EMiniGameErrcode_EMINIGAME_ERROR_NONE
)

func (x *MiniGameMonsterShotAction) Reset() {
	*x = MiniGameMonsterShotAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameMonsterShotAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameMonsterShotAction) ProtoMessage() {}

func (x *MiniGameMonsterShotAction) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameMonsterShotAction.ProtoReflect.Descriptor instead.
func (*MiniGameMonsterShotAction) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{3}
}

func (x *MiniGameMonsterShotAction) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MiniGameMonsterShotAction_Cmd
}

func (x *MiniGameMonsterShotAction) GetParam() EMiniGameCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MiniGameMonsterShotAction_Param
}

func (x *MiniGameMonsterShotAction) GetClientjudgesuc() bool {
	if x != nil && x.Clientjudgesuc != nil {
		return *x.Clientjudgesuc
	}
	return Default_MiniGameMonsterShotAction_Clientjudgesuc
}

func (x *MiniGameMonsterShotAction) GetErrcode() EMiniGameErrcode {
	if x != nil && x.Errcode != nil {
		return *x.Errcode
	}
	return Default_MiniGameMonsterShotAction_Errcode
}

type MonsterAnswerQuestPart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *EMonsterAnwserQuestType `protobuf:"varint,1,opt,name=type,enum=Cmd.EMonsterAnwserQuestType,def=0" json:"type,omitempty"`
	Subparam *uint32                  `protobuf:"varint,2,opt,name=subparam" json:"subparam,omitempty"`
}

// Default values for MonsterAnswerQuestPart fields.
const (
	Default_MonsterAnswerQuestPart_Type = EMonsterAnwserQuestType_EMONSTERANWSER_QUESTTYPE_FEET
)

func (x *MonsterAnswerQuestPart) Reset() {
	*x = MonsterAnswerQuestPart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonsterAnswerQuestPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonsterAnswerQuestPart) ProtoMessage() {}

func (x *MonsterAnswerQuestPart) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonsterAnswerQuestPart.ProtoReflect.Descriptor instead.
func (*MonsterAnswerQuestPart) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{4}
}

func (x *MonsterAnswerQuestPart) GetType() EMonsterAnwserQuestType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_MonsterAnswerQuestPart_Type
}

func (x *MonsterAnswerQuestPart) GetSubparam() uint32 {
	if x != nil && x.Subparam != nil {
		return *x.Subparam
	}
	return 0
}

type MiniGameNtfMonsterAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd             *Command                  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=223" json:"cmd,omitempty"`
	Param           *EMiniGameCmdParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.EMiniGameCmdParam,def=9" json:"param,omitempty"`
	Countdown       *uint32                   `protobuf:"varint,3,opt,name=countdown,def=0" json:"countdown,omitempty"`
	Linksymbol      *EMonsterAnswerLinkSymbol `protobuf:"varint,4,opt,name=linksymbol,enum=Cmd.EMonsterAnswerLinkSymbol,def=0" json:"linksymbol,omitempty"`
	Questparts      []*MonsterAnswerQuestPart `protobuf:"bytes,5,rep,name=questparts" json:"questparts,omitempty"`
	Lastreplystatus *ELastReplyStatus         `protobuf:"varint,6,opt,name=lastreplystatus,enum=Cmd.ELastReplyStatus,def=0" json:"lastreplystatus,omitempty"`
}

// Default values for MiniGameNtfMonsterAnswer fields.
const (
	Default_MiniGameNtfMonsterAnswer_Cmd             = Command_MINIGAME_PROTOCMD
	Default_MiniGameNtfMonsterAnswer_Param           = EMiniGameCmdParam_MINIGAMEPARAM_NTF_MONSTER_ANSWER
	Default_MiniGameNtfMonsterAnswer_Countdown       = uint32(0)
	Default_MiniGameNtfMonsterAnswer_Linksymbol      = EMonsterAnswerLinkSymbol_EMONSTERANSWER_LINKSYMBOL_NONE
	Default_MiniGameNtfMonsterAnswer_Lastreplystatus = ELastReplyStatus_ELASTREPLYSTATUS_NONE
)

func (x *MiniGameNtfMonsterAnswer) Reset() {
	*x = MiniGameNtfMonsterAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameNtfMonsterAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameNtfMonsterAnswer) ProtoMessage() {}

func (x *MiniGameNtfMonsterAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameNtfMonsterAnswer.ProtoReflect.Descriptor instead.
func (*MiniGameNtfMonsterAnswer) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{5}
}

func (x *MiniGameNtfMonsterAnswer) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MiniGameNtfMonsterAnswer_Cmd
}

func (x *MiniGameNtfMonsterAnswer) GetParam() EMiniGameCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MiniGameNtfMonsterAnswer_Param
}

func (x *MiniGameNtfMonsterAnswer) GetCountdown() uint32 {
	if x != nil && x.Countdown != nil {
		return *x.Countdown
	}
	return Default_MiniGameNtfMonsterAnswer_Countdown
}

func (x *MiniGameNtfMonsterAnswer) GetLinksymbol() EMonsterAnswerLinkSymbol {
	if x != nil && x.Linksymbol != nil {
		return *x.Linksymbol
	}
	return Default_MiniGameNtfMonsterAnswer_Linksymbol
}

func (x *MiniGameNtfMonsterAnswer) GetQuestparts() []*MonsterAnswerQuestPart {
	if x != nil {
		return x.Questparts
	}
	return nil
}

func (x *MiniGameNtfMonsterAnswer) GetLastreplystatus() ELastReplyStatus {
	if x != nil && x.Lastreplystatus != nil {
		return *x.Lastreplystatus
	}
	return Default_MiniGameNtfMonsterAnswer_Lastreplystatus
}

type MiniGameSubmitMonsterAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=223" json:"cmd,omitempty"`
	Param  *EMiniGameCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EMiniGameCmdParam,def=10" json:"param,omitempty"`
	Answer *uint32            `protobuf:"varint,3,opt,name=answer,def=0" json:"answer,omitempty"`
}

// Default values for MiniGameSubmitMonsterAnswer fields.
const (
	Default_MiniGameSubmitMonsterAnswer_Cmd    = Command_MINIGAME_PROTOCMD
	Default_MiniGameSubmitMonsterAnswer_Param  = EMiniGameCmdParam_MINIGAMEPARAM_SUBMIT_MONSTER_ANSWER
	Default_MiniGameSubmitMonsterAnswer_Answer = uint32(0)
)

func (x *MiniGameSubmitMonsterAnswer) Reset() {
	*x = MiniGameSubmitMonsterAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameSubmitMonsterAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameSubmitMonsterAnswer) ProtoMessage() {}

func (x *MiniGameSubmitMonsterAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameSubmitMonsterAnswer.ProtoReflect.Descriptor instead.
func (*MiniGameSubmitMonsterAnswer) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{6}
}

func (x *MiniGameSubmitMonsterAnswer) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MiniGameSubmitMonsterAnswer_Cmd
}

func (x *MiniGameSubmitMonsterAnswer) GetParam() EMiniGameCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MiniGameSubmitMonsterAnswer_Param
}

func (x *MiniGameSubmitMonsterAnswer) GetAnswer() uint32 {
	if x != nil && x.Answer != nil {
		return *x.Answer
	}
	return Default_MiniGameSubmitMonsterAnswer_Answer
}

type MiniGameAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=223" json:"cmd,omitempty"`
	Param         *EMiniGameCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EMiniGameCmdParam,def=13" json:"param,omitempty"`
	Mode          *EMinigameMode     `protobuf:"varint,3,opt,name=mode,enum=Cmd.EMinigameMode,def=1" json:"mode,omitempty"`
	Gametype      *EMiniGameType     `protobuf:"varint,4,opt,name=gametype,enum=Cmd.EMiniGameType,def=0" json:"gametype,omitempty"`
	Difficulty    *uint32            `protobuf:"varint,5,opt,name=difficulty" json:"difficulty,omitempty"`
	Errcode       *EMiniGameErrcode  `protobuf:"varint,6,opt,name=errcode,enum=Cmd.EMiniGameErrcode,def=0" json:"errcode,omitempty"`
	Endcardpair   *bool              `protobuf:"varint,7,opt,name=endcardpair,def=0" json:"endcardpair,omitempty"`
	Addseconds    *uint32            `protobuf:"varint,8,opt,name=addseconds,def=0" json:"addseconds,omitempty"`
	Minusseconds  *uint32            `protobuf:"varint,9,opt,name=minusseconds,def=0" json:"minusseconds,omitempty"`
	Endtime       *uint32            `protobuf:"varint,10,opt,name=endtime,def=0" json:"endtime,omitempty"`
	Cardfailforce *bool              `protobuf:"varint,11,opt,name=cardfailforce,def=0" json:"cardfailforce,omitempty"`
	Roundendflag  *bool              `protobuf:"varint,12,opt,name=roundendflag" json:"roundendflag,omitempty"`
}

// Default values for MiniGameAction fields.
const (
	Default_MiniGameAction_Cmd           = Command_MINIGAME_PROTOCMD
	Default_MiniGameAction_Param         = EMiniGameCmdParam_MINIGAMEPARAM_ACTION_START
	Default_MiniGameAction_Mode          = EMinigameMode_EMINIGAMEMODE_NORMAL
	Default_MiniGameAction_Gametype      = EMiniGameType_EMINIGAMETYPE_NONE
	Default_MiniGameAction_Errcode       = EMiniGameErrcode_EMINIGAME_ERROR_NONE
	Default_MiniGameAction_Endcardpair   = bool(false)
	Default_MiniGameAction_Addseconds    = uint32(0)
	Default_MiniGameAction_Minusseconds  = uint32(0)
	Default_MiniGameAction_Endtime       = uint32(0)
	Default_MiniGameAction_Cardfailforce = bool(false)
)

func (x *MiniGameAction) Reset() {
	*x = MiniGameAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameAction) ProtoMessage() {}

func (x *MiniGameAction) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameAction.ProtoReflect.Descriptor instead.
func (*MiniGameAction) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{7}
}

func (x *MiniGameAction) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MiniGameAction_Cmd
}

func (x *MiniGameAction) GetParam() EMiniGameCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MiniGameAction_Param
}

func (x *MiniGameAction) GetMode() EMinigameMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Default_MiniGameAction_Mode
}

func (x *MiniGameAction) GetGametype() EMiniGameType {
	if x != nil && x.Gametype != nil {
		return *x.Gametype
	}
	return Default_MiniGameAction_Gametype
}

func (x *MiniGameAction) GetDifficulty() uint32 {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return 0
}

func (x *MiniGameAction) GetErrcode() EMiniGameErrcode {
	if x != nil && x.Errcode != nil {
		return *x.Errcode
	}
	return Default_MiniGameAction_Errcode
}

func (x *MiniGameAction) GetEndcardpair() bool {
	if x != nil && x.Endcardpair != nil {
		return *x.Endcardpair
	}
	return Default_MiniGameAction_Endcardpair
}

func (x *MiniGameAction) GetAddseconds() uint32 {
	if x != nil && x.Addseconds != nil {
		return *x.Addseconds
	}
	return Default_MiniGameAction_Addseconds
}

func (x *MiniGameAction) GetMinusseconds() uint32 {
	if x != nil && x.Minusseconds != nil {
		return *x.Minusseconds
	}
	return Default_MiniGameAction_Minusseconds
}

func (x *MiniGameAction) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return Default_MiniGameAction_Endtime
}

func (x *MiniGameAction) GetCardfailforce() bool {
	if x != nil && x.Cardfailforce != nil {
		return *x.Cardfailforce
	}
	return Default_MiniGameAction_Cardfailforce
}

func (x *MiniGameAction) GetRoundendflag() bool {
	if x != nil && x.Roundendflag != nil {
		return *x.Roundendflag
	}
	return false
}

type MiniGameNextRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=223" json:"cmd,omitempty"`
	Param       *EMiniGameCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EMiniGameCmdParam,def=14" json:"param,omitempty"`
	Gametype    *EMiniGameType     `protobuf:"varint,3,opt,name=gametype,enum=Cmd.EMiniGameType,def=0" json:"gametype,omitempty"`
	Assistlist  []*MiniGameAssist  `protobuf:"bytes,4,rep,name=assistlist" json:"assistlist,omitempty"`
	Endtime     *uint32            `protobuf:"varint,5,opt,name=endtime,def=0" json:"endtime,omitempty"`
	Carduseflag *bool              `protobuf:"varint,6,opt,name=carduseflag,def=0" json:"carduseflag,omitempty"`
}

// Default values for MiniGameNextRound fields.
const (
	Default_MiniGameNextRound_Cmd         = Command_MINIGAME_PROTOCMD
	Default_MiniGameNextRound_Param       = EMiniGameCmdParam_MINIGAMEPARAM_ACTION_NEXTROUND
	Default_MiniGameNextRound_Gametype    = EMiniGameType_EMINIGAMETYPE_NONE
	Default_MiniGameNextRound_Endtime     = uint32(0)
	Default_MiniGameNextRound_Carduseflag = bool(false)
)

func (x *MiniGameNextRound) Reset() {
	*x = MiniGameNextRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameNextRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameNextRound) ProtoMessage() {}

func (x *MiniGameNextRound) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameNextRound.ProtoReflect.Descriptor instead.
func (*MiniGameNextRound) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{8}
}

func (x *MiniGameNextRound) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MiniGameNextRound_Cmd
}

func (x *MiniGameNextRound) GetParam() EMiniGameCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MiniGameNextRound_Param
}

func (x *MiniGameNextRound) GetGametype() EMiniGameType {
	if x != nil && x.Gametype != nil {
		return *x.Gametype
	}
	return Default_MiniGameNextRound_Gametype
}

func (x *MiniGameNextRound) GetAssistlist() []*MiniGameAssist {
	if x != nil {
		return x.Assistlist
	}
	return nil
}

func (x *MiniGameNextRound) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return Default_MiniGameNextRound_Endtime
}

func (x *MiniGameNextRound) GetCarduseflag() bool {
	if x != nil && x.Carduseflag != nil {
		return *x.Carduseflag
	}
	return Default_MiniGameNextRound_Carduseflag
}

type MiniGameChanlegeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *EMiniGameType `protobuf:"varint,1,opt,name=type,enum=Cmd.EMiniGameType,def=0" json:"type,omitempty"`
	Value     *uint32        `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Timestamp *uint32        `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

// Default values for MiniGameChanlegeRecord fields.
const (
	Default_MiniGameChanlegeRecord_Type = EMiniGameType_EMINIGAMETYPE_NONE
)

func (x *MiniGameChanlegeRecord) Reset() {
	*x = MiniGameChanlegeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameChanlegeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameChanlegeRecord) ProtoMessage() {}

func (x *MiniGameChanlegeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameChanlegeRecord.ProtoReflect.Descriptor instead.
func (*MiniGameChanlegeRecord) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{9}
}

func (x *MiniGameChanlegeRecord) GetType() EMiniGameType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_MiniGameChanlegeRecord_Type
}

func (x *MiniGameChanlegeRecord) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *MiniGameChanlegeRecord) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type MiniGameUnlockPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            *EMiniGameType          `protobuf:"varint,1,opt,name=type,enum=Cmd.EMiniGameType,def=0" json:"type,omitempty"`
	Difficulty      *uint32                 `protobuf:"varint,2,opt,name=difficulty" json:"difficulty,omitempty"`
	Lastreward      *uint32                 `protobuf:"varint,3,opt,name=lastreward,def=0" json:"lastreward,omitempty"`
	Dailyrest       *uint32                 `protobuf:"varint,4,opt,name=dailyrest" json:"dailyrest,omitempty"`
	Passall         *bool                   `protobuf:"varint,5,opt,name=passall" json:"passall,omitempty"`
	Challengerecord *MiniGameChanlegeRecord `protobuf:"bytes,6,opt,name=challengerecord" json:"challengerecord,omitempty"`
}

// Default values for MiniGameUnlockPair fields.
const (
	Default_MiniGameUnlockPair_Type       = EMiniGameType_EMINIGAMETYPE_NONE
	Default_MiniGameUnlockPair_Lastreward = uint32(0)
)

func (x *MiniGameUnlockPair) Reset() {
	*x = MiniGameUnlockPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameUnlockPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameUnlockPair) ProtoMessage() {}

func (x *MiniGameUnlockPair) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameUnlockPair.ProtoReflect.Descriptor instead.
func (*MiniGameUnlockPair) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{10}
}

func (x *MiniGameUnlockPair) GetType() EMiniGameType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_MiniGameUnlockPair_Type
}

func (x *MiniGameUnlockPair) GetDifficulty() uint32 {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return 0
}

func (x *MiniGameUnlockPair) GetLastreward() uint32 {
	if x != nil && x.Lastreward != nil {
		return *x.Lastreward
	}
	return Default_MiniGameUnlockPair_Lastreward
}

func (x *MiniGameUnlockPair) GetDailyrest() uint32 {
	if x != nil && x.Dailyrest != nil {
		return *x.Dailyrest
	}
	return 0
}

func (x *MiniGameUnlockPair) GetPassall() bool {
	if x != nil && x.Passall != nil {
		return *x.Passall
	}
	return false
}

func (x *MiniGameUnlockPair) GetChallengerecord() *MiniGameChanlegeRecord {
	if x != nil {
		return x.Challengerecord
	}
	return nil
}

type MiniGameWinPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *EMiniGameType `protobuf:"varint,1,opt,name=type,enum=Cmd.EMiniGameType,def=0" json:"type,omitempty"`
	Wintimes *uint32        `protobuf:"varint,2,opt,name=wintimes,def=0" json:"wintimes,omitempty"`
}

// Default values for MiniGameWinPair fields.
const (
	Default_MiniGameWinPair_Type     = EMiniGameType_EMINIGAMETYPE_NONE
	Default_MiniGameWinPair_Wintimes = uint32(0)
)

func (x *MiniGameWinPair) Reset() {
	*x = MiniGameWinPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameWinPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameWinPair) ProtoMessage() {}

func (x *MiniGameWinPair) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameWinPair.ProtoReflect.Descriptor instead.
func (*MiniGameWinPair) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{11}
}

func (x *MiniGameWinPair) GetType() EMiniGameType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_MiniGameWinPair_Type
}

func (x *MiniGameWinPair) GetWintimes() uint32 {
	if x != nil && x.Wintimes != nil {
		return *x.Wintimes
	}
	return Default_MiniGameWinPair_Wintimes
}

type MiniGameUnlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=223" json:"cmd,omitempty"`
	Param *EMiniGameCmdParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.EMiniGameCmdParam,def=11" json:"param,omitempty"`
	List  []*MiniGameUnlockPair `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
}

// Default values for MiniGameUnlockList fields.
const (
	Default_MiniGameUnlockList_Cmd   = Command_MINIGAME_PROTOCMD
	Default_MiniGameUnlockList_Param = EMiniGameCmdParam_MINIGAMEPARAM_GET_UNLOCKLIST
)

func (x *MiniGameUnlockList) Reset() {
	*x = MiniGameUnlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameUnlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameUnlockList) ProtoMessage() {}

func (x *MiniGameUnlockList) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameUnlockList.ProtoReflect.Descriptor instead.
func (*MiniGameUnlockList) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{12}
}

func (x *MiniGameUnlockList) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MiniGameUnlockList_Cmd
}

func (x *MiniGameUnlockList) GetParam() EMiniGameCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MiniGameUnlockList_Param
}

func (x *MiniGameUnlockList) GetList() []*MiniGameUnlockPair {
	if x != nil {
		return x.List
	}
	return nil
}

type MiniGameNtfGameOverCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=223" json:"cmd,omitempty"`
	Param  *EMiniGameCmdParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.EMiniGameCmdParam,def=15" json:"param,omitempty"`
	Type   *EMiniGameType       `protobuf:"varint,3,opt,name=type,enum=Cmd.EMiniGameType,def=0" json:"type,omitempty"`
	Result *EMiniGameOverResult `protobuf:"varint,4,opt,name=result,enum=Cmd.EMiniGameOverResult,def=1" json:"result,omitempty"`
}

// Default values for MiniGameNtfGameOverCmd fields.
const (
	Default_MiniGameNtfGameOverCmd_Cmd    = Command_MINIGAME_PROTOCMD
	Default_MiniGameNtfGameOverCmd_Param  = EMiniGameCmdParam_MINIGAMEPARAM_NTF_GAME_OVER
	Default_MiniGameNtfGameOverCmd_Type   = EMiniGameType_EMINIGAMETYPE_NONE
	Default_MiniGameNtfGameOverCmd_Result = EMiniGameOverResult_EMINIGAME_OVER_LOSE
)

func (x *MiniGameNtfGameOverCmd) Reset() {
	*x = MiniGameNtfGameOverCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameNtfGameOverCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameNtfGameOverCmd) ProtoMessage() {}

func (x *MiniGameNtfGameOverCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameNtfGameOverCmd.ProtoReflect.Descriptor instead.
func (*MiniGameNtfGameOverCmd) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{13}
}

func (x *MiniGameNtfGameOverCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MiniGameNtfGameOverCmd_Cmd
}

func (x *MiniGameNtfGameOverCmd) GetParam() EMiniGameCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MiniGameNtfGameOverCmd_Param
}

func (x *MiniGameNtfGameOverCmd) GetType() EMiniGameType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_MiniGameNtfGameOverCmd_Type
}

func (x *MiniGameNtfGameOverCmd) GetResult() EMiniGameOverResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_MiniGameNtfGameOverCmd_Result
}

type MiniGameReqOver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=223" json:"cmd,omitempty"`
	Param *EMiniGameCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EMiniGameCmdParam,def=16" json:"param,omitempty"`
	Type  *EMiniGameType     `protobuf:"varint,3,opt,name=type,enum=Cmd.EMiniGameType,def=0" json:"type,omitempty"`
}

// Default values for MiniGameReqOver fields.
const (
	Default_MiniGameReqOver_Cmd   = Command_MINIGAME_PROTOCMD
	Default_MiniGameReqOver_Param = EMiniGameCmdParam_MINIGAMEPARAM_OVERGAME
	Default_MiniGameReqOver_Type  = EMiniGameType_EMINIGAMETYPE_NONE
)

func (x *MiniGameReqOver) Reset() {
	*x = MiniGameReqOver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameReqOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameReqOver) ProtoMessage() {}

func (x *MiniGameReqOver) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameReqOver.ProtoReflect.Descriptor instead.
func (*MiniGameReqOver) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{14}
}

func (x *MiniGameReqOver) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MiniGameReqOver_Cmd
}

func (x *MiniGameReqOver) GetParam() EMiniGameCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MiniGameReqOver_Param
}

func (x *MiniGameReqOver) GetType() EMiniGameType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_MiniGameReqOver_Type
}

type MiniGameUseAssist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=223" json:"cmd,omitempty"`
	Param      *EMiniGameCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EMiniGameCmdParam,def=17" json:"param,omitempty"`
	Type       *EMiniGameType     `protobuf:"varint,3,opt,name=type,enum=Cmd.EMiniGameType,def=0" json:"type,omitempty"`
	Assisttype *EAssistType       `protobuf:"varint,4,opt,name=assisttype,enum=Cmd.EAssistType" json:"assisttype,omitempty"`
}

// Default values for MiniGameUseAssist fields.
const (
	Default_MiniGameUseAssist_Cmd   = Command_MINIGAME_PROTOCMD
	Default_MiniGameUseAssist_Param = EMiniGameCmdParam_MINIGAMEPARAM_USE_ASSIST
	Default_MiniGameUseAssist_Type  = EMiniGameType_EMINIGAMETYPE_NONE
)

func (x *MiniGameUseAssist) Reset() {
	*x = MiniGameUseAssist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameUseAssist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameUseAssist) ProtoMessage() {}

func (x *MiniGameUseAssist) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameUseAssist.ProtoReflect.Descriptor instead.
func (*MiniGameUseAssist) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{15}
}

func (x *MiniGameUseAssist) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MiniGameUseAssist_Cmd
}

func (x *MiniGameUseAssist) GetParam() EMiniGameCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MiniGameUseAssist_Param
}

func (x *MiniGameUseAssist) GetType() EMiniGameType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_MiniGameUseAssist_Type
}

func (x *MiniGameUseAssist) GetAssisttype() EAssistType {
	if x != nil && x.Assisttype != nil {
		return *x.Assisttype
	}
	return EAssistType_EASSISTTYPE_ADDTIME
}

type MiniGameNtfRoundOver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd             *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=223" json:"cmd,omitempty"`
	Param           *EMiniGameCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EMiniGameCmdParam,def=18" json:"param,omitempty"`
	Type            *EMiniGameType     `protobuf:"varint,3,opt,name=type,enum=Cmd.EMiniGameType,def=0" json:"type,omitempty"`
	Answer          *uint32            `protobuf:"varint,4,opt,name=answer" json:"answer,omitempty"`
	Lastreplystatus *ELastReplyStatus  `protobuf:"varint,5,opt,name=lastreplystatus,enum=Cmd.ELastReplyStatus,def=0" json:"lastreplystatus,omitempty"`
}

// Default values for MiniGameNtfRoundOver fields.
const (
	Default_MiniGameNtfRoundOver_Cmd             = Command_MINIGAME_PROTOCMD
	Default_MiniGameNtfRoundOver_Param           = EMiniGameCmdParam_MINIGAMEPARAM_ROUNDEND_NTF
	Default_MiniGameNtfRoundOver_Type            = EMiniGameType_EMINIGAMETYPE_NONE
	Default_MiniGameNtfRoundOver_Lastreplystatus = ELastReplyStatus_ELASTREPLYSTATUS_NONE
)

func (x *MiniGameNtfRoundOver) Reset() {
	*x = MiniGameNtfRoundOver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameNtfRoundOver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameNtfRoundOver) ProtoMessage() {}

func (x *MiniGameNtfRoundOver) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameNtfRoundOver.ProtoReflect.Descriptor instead.
func (*MiniGameNtfRoundOver) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{16}
}

func (x *MiniGameNtfRoundOver) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MiniGameNtfRoundOver_Cmd
}

func (x *MiniGameNtfRoundOver) GetParam() EMiniGameCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MiniGameNtfRoundOver_Param
}

func (x *MiniGameNtfRoundOver) GetType() EMiniGameType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_MiniGameNtfRoundOver_Type
}

func (x *MiniGameNtfRoundOver) GetAnswer() uint32 {
	if x != nil && x.Answer != nil {
		return *x.Answer
	}
	return 0
}

func (x *MiniGameNtfRoundOver) GetLastreplystatus() ELastReplyStatus {
	if x != nil && x.Lastreplystatus != nil {
		return *x.Lastreplystatus
	}
	return Default_MiniGameNtfRoundOver_Lastreplystatus
}

type MiniGameRankUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid     *uint64           `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Name       *string           `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Profession *EProfession      `protobuf:"varint,3,opt,name=profession,enum=Cmd.EProfession" json:"profession,omitempty"`
	Portrait   *UserPortraitData `protobuf:"bytes,4,opt,name=portrait" json:"portrait,omitempty"`
}

// Default values for MiniGameRankUser fields.
const (
	Default_MiniGameRankUser_Charid = uint64(0)
)

func (x *MiniGameRankUser) Reset() {
	*x = MiniGameRankUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameRankUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameRankUser) ProtoMessage() {}

func (x *MiniGameRankUser) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameRankUser.ProtoReflect.Descriptor instead.
func (*MiniGameRankUser) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{17}
}

func (x *MiniGameRankUser) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_MiniGameRankUser_Charid
}

func (x *MiniGameRankUser) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MiniGameRankUser) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return EProfession_EPROFESSION_MIN
}

func (x *MiniGameRankUser) GetPortrait() *UserPortraitData {
	if x != nil {
		return x.Portrait
	}
	return nil
}

type MiniGameRankBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *MiniGameChanlegeRecord `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
	User   *MiniGameRankUser       `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Myself *bool                   `protobuf:"varint,3,opt,name=myself,def=0" json:"myself,omitempty"`
}

// Default values for MiniGameRankBase fields.
const (
	Default_MiniGameRankBase_Myself = bool(false)
)

func (x *MiniGameRankBase) Reset() {
	*x = MiniGameRankBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameRankBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameRankBase) ProtoMessage() {}

func (x *MiniGameRankBase) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameRankBase.ProtoReflect.Descriptor instead.
func (*MiniGameRankBase) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{18}
}

func (x *MiniGameRankBase) GetRecord() *MiniGameChanlegeRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *MiniGameRankBase) GetUser() *MiniGameRankUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *MiniGameRankBase) GetMyself() bool {
	if x != nil && x.Myself != nil {
		return *x.Myself
	}
	return Default_MiniGameRankBase_Myself
}

type MiniGameQueryRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=223" json:"cmd,omitempty"`
	Param *EMiniGameCmdParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.EMiniGameCmdParam,def=19" json:"param,omitempty"`
	Type  *EMiniGameType      `protobuf:"varint,3,opt,name=type,enum=Cmd.EMiniGameType,def=0" json:"type,omitempty"`
	Ranks []*MiniGameRankBase `protobuf:"bytes,4,rep,name=ranks" json:"ranks,omitempty"`
}

// Default values for MiniGameQueryRank fields.
const (
	Default_MiniGameQueryRank_Cmd   = Command_MINIGAME_PROTOCMD
	Default_MiniGameQueryRank_Param = EMiniGameCmdParam_MINIGAMEPARAM_QUERYRANK
	Default_MiniGameQueryRank_Type  = EMiniGameType_EMINIGAMETYPE_NONE
)

func (x *MiniGameQueryRank) Reset() {
	*x = MiniGameQueryRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MiniGameCmd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniGameQueryRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameQueryRank) ProtoMessage() {}

func (x *MiniGameQueryRank) ProtoReflect() protoreflect.Message {
	mi := &file_MiniGameCmd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameQueryRank.ProtoReflect.Descriptor instead.
func (*MiniGameQueryRank) Descriptor() ([]byte, []int) {
	return file_MiniGameCmd_proto_rawDescGZIP(), []int{19}
}

func (x *MiniGameQueryRank) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MiniGameQueryRank_Cmd
}

func (x *MiniGameQueryRank) GetParam() EMiniGameCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MiniGameQueryRank_Param
}

func (x *MiniGameQueryRank) GetType() EMiniGameType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_MiniGameQueryRank_Type
}

func (x *MiniGameQueryRank) GetRanks() []*MiniGameRankBase {
	if x != nil {
		return x.Ranks
	}
	return nil
}

var File_MiniGameCmd_proto protoreflect.FileDescriptor

var file_MiniGameCmd_proto_rawDesc = []byte{
	0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x47,
	0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0xc0, 0x01,
	0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x4d, 0x0a, 0x07, 0x63, 0x6d, 0x70, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x3a, 0x19, 0x45, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x53, 0x48, 0x4f,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07,
	0x63, 0x6d, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1d, 0x0a, 0x08, 0x70, 0x6c, 0x75, 0x73, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x73, 0x6c, 0x65, 0x66, 0x74, 0x12,
	0x1f, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x73, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x70, 0x6c, 0x75, 0x73, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xff, 0x02, 0x0a, 0x16, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x74, 0x66,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4c,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6d, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x53, 0x48, 0x4f, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x37, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x0c, 0x6d, 0x69, 0x73, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x70, 0x6c, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x75, 0x73, 0x65, 0x70, 0x6c,
	0x75, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x19, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x4d, 0x49, 0x4e,
	0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x4f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x4d, 0x49, 0x4e, 0x49,
	0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54,
	0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x4f, 0x54, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x73, 0x75, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x73, 0x75, 0x63, 0x12, 0x45, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69,
	0x47, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x14, 0x45, 0x4d, 0x49,
	0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x52, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x6e, 0x77, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x1d, 0x45, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x41, 0x4e, 0x57, 0x53, 0x45,
	0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x54,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0xb2, 0x03, 0x0a, 0x18, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x4e,
	0x74, 0x66, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x4d, 0x49, 0x4e, 0x49,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x4d, 0x49, 0x4e, 0x49, 0x47,
	0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x4d, 0x4f, 0x4e,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x5d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x3a, 0x1e, 0x45, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52,
	0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x61, 0x72, 0x74, 0x73, 0x12,
	0x56, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a,
	0x15, 0x45, 0x4c, 0x41, 0x53, 0x54, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x1b, 0x4d, 0x69, 0x6e, 0x69,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x11, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x51, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x23, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a,
	0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0xd7, 0x04, 0x0a, 0x0e, 0x4d, 0x69, 0x6e,
	0x69, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x48,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6d, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3c, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69,
	0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x14, 0x45, 0x4d, 0x49, 0x4e,
	0x49, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x45, 0x4d,
	0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x07, 0x65, 0x72,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x3a, 0x14, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x27, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x63, 0x61, 0x72, 0x64, 0x70, 0x61, 0x69, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x65,
	0x6e, 0x64, 0x63, 0x61, 0x72, 0x64, 0x70, 0x61, 0x69, 0x72, 0x12, 0x21, 0x0a, 0x0a, 0x61, 0x64,
	0x64, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x25, 0x0a,
	0x0c, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x66, 0x61, 0x69, 0x6c, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x0d, 0x63, 0x61, 0x72, 0x64, 0x66, 0x61, 0x69, 0x6c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x6e, 0x64, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x6e, 0x64, 0x66, 0x6c,
	0x61, 0x67, 0x22, 0xd3, 0x02, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x4e,
	0x65, 0x78, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x11, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4c, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1e, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x42, 0x0a, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x12, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a,
	0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x75, 0x73, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x63, 0x61, 0x72,
	0x64, 0x75, 0x73, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x4d, 0x69, 0x6e,
	0x69, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x92, 0x02, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x69, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x45, 0x4d,
	0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x72, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x72, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x61,
	0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x61, 0x6c,
	0x6c, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6c, 0x65, 0x67,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x6c, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x69,
	0x47, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x45,
	0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x77, 0x69,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x69, 0x47,
	0x61, 0x6d, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x4a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x43,
	0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d,
	0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43,
	0x4b, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x99, 0x02, 0x0a, 0x16, 0x4d, 0x69,
	0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x74, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x11, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69,
	0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b,
	0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54,
	0x46, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x13, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x53, 0x45, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x16, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x47, 0x41, 0x4d, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfc,
	0x01, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x11, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69,
	0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18,
	0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53,
	0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x12, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbf, 0x02,
	0x0a, 0x14, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x74, 0x66, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x11, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x1a, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x45, 0x4e, 0x44, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x15, 0x45, 0x4c, 0x41, 0x53, 0x54, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xa6, 0x01, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50,
	0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x4d, 0x69, 0x6e,
	0x69, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6c, 0x65, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x06, 0x6d, 0x79, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x6d, 0x79, 0x73, 0x65, 0x6c, 0x66, 0x22, 0xf6, 0x01, 0x0a,
	0x11, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x4d,
	0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x4d, 0x49,
	0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x52, 0x41, 0x4e, 0x4b, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12,
	0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x69,
	0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x6b, 0x73, 0x2a, 0xfc, 0x03, 0x0a, 0x11, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x1e, 0x4d,
	0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46,
	0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x01, 0x12,
	0x25, 0x0a, 0x21, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x53, 0x48, 0x4f, 0x54, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41,
	0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x4d,
	0x49, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x4f, 0x54, 0x10,
	0x03, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41,
	0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x49, 0x4e, 0x49, 0x47,
	0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f,
	0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x0a,
	0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0x0b, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x4f,
	0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x49, 0x4e, 0x49,
	0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x49, 0x4e, 0x49,
	0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x45, 0x58, 0x54, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b,
	0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54,
	0x46, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x1a, 0x0a,
	0x16, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x49, 0x4e,
	0x49, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x41,
	0x53, 0x53, 0x49, 0x53, 0x54, 0x10, 0x11, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x49, 0x4e, 0x49, 0x47,
	0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x45, 0x4e,
	0x44, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x49, 0x4e, 0x49, 0x47,
	0x41, 0x4d, 0x45, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x41,
	0x4e, 0x4b, 0x10, 0x13, 0x2a, 0x9e, 0x01, 0x0a, 0x0d, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47,
	0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x93, 0x03, 0x0a, 0x10, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x47,
	0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4d,
	0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c,
	0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12,
	0x28, 0x0a, 0x24, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x49,
	0x4d, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45,
	0x4e, 0x49, 0x4d, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e,
	0x4f, 0x5f, 0x4d, 0x41, 0x50, 0x52, 0x41, 0x49, 0x44, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x45,
	0x4e, 0x49, 0x4d, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44,
	0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x5f, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41,
	0x4c, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x49, 0x4d, 0x49, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4c, 0x4c, 0x45,
	0x47, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x49, 0x4d, 0x49, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x4e, 0x4f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x49, 0x4d, 0x49, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4e, 0x49, 0x4d, 0x49,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x45,
	0x4e, 0x49, 0x4d, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x0a, 0x2a, 0x46, 0x0a, 0x13, 0x45,
	0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x5f, 0x57, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4d,
	0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x53,
	0x45, 0x10, 0x01, 0x2a, 0x8b, 0x01, 0x0a, 0x13, 0x45, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4d,
	0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x52, 0x45, 0x5f, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4d, 0x4f, 0x4e, 0x53,
	0x54, 0x45, 0x52, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f,
	0x45, 0x51, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52,
	0x53, 0x48, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x47, 0x54, 0x10,
	0x03, 0x2a, 0xd5, 0x01, 0x0a, 0x17, 0x45, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6e,
	0x77, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x1d, 0x45, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x41, 0x4e, 0x57, 0x53, 0x45, 0x52, 0x5f,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x24, 0x0a, 0x20, 0x45, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x41, 0x4e, 0x57, 0x53,
	0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4d, 0x4f, 0x4e, 0x53, 0x54,
	0x45, 0x52, 0x41, 0x4e, 0x57, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4d,
	0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x41, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x4e, 0x57, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x41, 0x43, 0x45, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4d, 0x4f, 0x4e, 0x53,
	0x54, 0x45, 0x52, 0x41, 0x4e, 0x57, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x83, 0x01, 0x0a, 0x18, 0x45, 0x4d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4d, 0x4f, 0x4e, 0x53, 0x54,
	0x45, 0x52, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4d,
	0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x45, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4f, 0x52, 0x10, 0x02, 0x2a,
	0x65, 0x0a, 0x10, 0x45, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4c, 0x41, 0x53, 0x54, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x4c, 0x41, 0x53, 0x54, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4c,
	0x41, 0x53, 0x54, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x2a, 0x5a, 0x0a, 0x0b, 0x45, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x45, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55,
	0x49, 0x43, 0x4b, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x50, 0x53,
	0x10, 0x03, 0x2a, 0x46, 0x0a, 0x0d, 0x45, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x02,
}

var (
	file_MiniGameCmd_proto_rawDescOnce sync.Once
	file_MiniGameCmd_proto_rawDescData = file_MiniGameCmd_proto_rawDesc
)

func file_MiniGameCmd_proto_rawDescGZIP() []byte {
	file_MiniGameCmd_proto_rawDescOnce.Do(func() {
		file_MiniGameCmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_MiniGameCmd_proto_rawDescData)
	})
	return file_MiniGameCmd_proto_rawDescData
}

var file_MiniGameCmd_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_MiniGameCmd_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_MiniGameCmd_proto_goTypes = []interface{}{
	(EMiniGameCmdParam)(0),              // 0: Cmd.EMiniGameCmdParam
	(EMiniGameType)(0),                  // 1: Cmd.EMiniGameType
	(EMiniGameErrcode)(0),               // 2: Cmd.EMiniGameErrcode
	(EMiniGameOverResult)(0),            // 3: Cmd.EMiniGameOverResult
	(EMonsterShotCompare)(0),            // 4: Cmd.EMonsterShotCompare
	(EMonsterAnwserQuestType)(0),        // 5: Cmd.EMonsterAnwserQuestType
	(EMonsterAnswerLinkSymbol)(0),       // 6: Cmd.EMonsterAnswerLinkSymbol
	(ELastReplyStatus)(0),               // 7: Cmd.ELastReplyStatus
	(EAssistType)(0),                    // 8: Cmd.EAssistType
	(EMinigameMode)(0),                  // 9: Cmd.EMinigameMode
	(*MiniGameAssist)(nil),              // 10: Cmd.MiniGameAssist
	(*MonsterShotRequirePair)(nil),      // 11: Cmd.MonsterShotRequirePair
	(*MiniGameNtfMonsterShot)(nil),      // 12: Cmd.MiniGameNtfMonsterShot
	(*MiniGameMonsterShotAction)(nil),   // 13: Cmd.MiniGameMonsterShotAction
	(*MonsterAnswerQuestPart)(nil),      // 14: Cmd.MonsterAnswerQuestPart
	(*MiniGameNtfMonsterAnswer)(nil),    // 15: Cmd.MiniGameNtfMonsterAnswer
	(*MiniGameSubmitMonsterAnswer)(nil), // 16: Cmd.MiniGameSubmitMonsterAnswer
	(*MiniGameAction)(nil),              // 17: Cmd.MiniGameAction
	(*MiniGameNextRound)(nil),           // 18: Cmd.MiniGameNextRound
	(*MiniGameChanlegeRecord)(nil),      // 19: Cmd.MiniGameChanlegeRecord
	(*MiniGameUnlockPair)(nil),          // 20: Cmd.MiniGameUnlockPair
	(*MiniGameWinPair)(nil),             // 21: Cmd.MiniGameWinPair
	(*MiniGameUnlockList)(nil),          // 22: Cmd.MiniGameUnlockList
	(*MiniGameNtfGameOverCmd)(nil),      // 23: Cmd.MiniGameNtfGameOverCmd
	(*MiniGameReqOver)(nil),             // 24: Cmd.MiniGameReqOver
	(*MiniGameUseAssist)(nil),           // 25: Cmd.MiniGameUseAssist
	(*MiniGameNtfRoundOver)(nil),        // 26: Cmd.MiniGameNtfRoundOver
	(*MiniGameRankUser)(nil),            // 27: Cmd.MiniGameRankUser
	(*MiniGameRankBase)(nil),            // 28: Cmd.MiniGameRankBase
	(*MiniGameQueryRank)(nil),           // 29: Cmd.MiniGameQueryRank
	(Command)(0),                        // 30: Cmd.Command
	(EProfession)(0),                    // 31: Cmd.EProfession
	(*UserPortraitData)(nil),            // 32: Cmd.UserPortraitData
}
var file_MiniGameCmd_proto_depIdxs = []int32{
	8,  // 0: Cmd.MiniGameAssist.type:type_name -> Cmd.EAssistType
	4,  // 1: Cmd.MonsterShotRequirePair.cmptype:type_name -> Cmd.EMonsterShotCompare
	30, // 2: Cmd.MiniGameNtfMonsterShot.cmd:type_name -> Cmd.Command
	0,  // 3: Cmd.MiniGameNtfMonsterShot.param:type_name -> Cmd.EMiniGameCmdParam
	11, // 4: Cmd.MiniGameNtfMonsterShot.requires:type_name -> Cmd.MonsterShotRequirePair
	30, // 5: Cmd.MiniGameMonsterShotAction.cmd:type_name -> Cmd.Command
	0,  // 6: Cmd.MiniGameMonsterShotAction.param:type_name -> Cmd.EMiniGameCmdParam
	2,  // 7: Cmd.MiniGameMonsterShotAction.errcode:type_name -> Cmd.EMiniGameErrcode
	5,  // 8: Cmd.MonsterAnswerQuestPart.type:type_name -> Cmd.EMonsterAnwserQuestType
	30, // 9: Cmd.MiniGameNtfMonsterAnswer.cmd:type_name -> Cmd.Command
	0,  // 10: Cmd.MiniGameNtfMonsterAnswer.param:type_name -> Cmd.EMiniGameCmdParam
	6,  // 11: Cmd.MiniGameNtfMonsterAnswer.linksymbol:type_name -> Cmd.EMonsterAnswerLinkSymbol
	14, // 12: Cmd.MiniGameNtfMonsterAnswer.questparts:type_name -> Cmd.MonsterAnswerQuestPart
	7,  // 13: Cmd.MiniGameNtfMonsterAnswer.lastreplystatus:type_name -> Cmd.ELastReplyStatus
	30, // 14: Cmd.MiniGameSubmitMonsterAnswer.cmd:type_name -> Cmd.Command
	0,  // 15: Cmd.MiniGameSubmitMonsterAnswer.param:type_name -> Cmd.EMiniGameCmdParam
	30, // 16: Cmd.MiniGameAction.cmd:type_name -> Cmd.Command
	0,  // 17: Cmd.MiniGameAction.param:type_name -> Cmd.EMiniGameCmdParam
	9,  // 18: Cmd.MiniGameAction.mode:type_name -> Cmd.EMinigameMode
	1,  // 19: Cmd.MiniGameAction.gametype:type_name -> Cmd.EMiniGameType
	2,  // 20: Cmd.MiniGameAction.errcode:type_name -> Cmd.EMiniGameErrcode
	30, // 21: Cmd.MiniGameNextRound.cmd:type_name -> Cmd.Command
	0,  // 22: Cmd.MiniGameNextRound.param:type_name -> Cmd.EMiniGameCmdParam
	1,  // 23: Cmd.MiniGameNextRound.gametype:type_name -> Cmd.EMiniGameType
	10, // 24: Cmd.MiniGameNextRound.assistlist:type_name -> Cmd.MiniGameAssist
	1,  // 25: Cmd.MiniGameChanlegeRecord.type:type_name -> Cmd.EMiniGameType
	1,  // 26: Cmd.MiniGameUnlockPair.type:type_name -> Cmd.EMiniGameType
	19, // 27: Cmd.MiniGameUnlockPair.challengerecord:type_name -> Cmd.MiniGameChanlegeRecord
	1,  // 28: Cmd.MiniGameWinPair.type:type_name -> Cmd.EMiniGameType
	30, // 29: Cmd.MiniGameUnlockList.cmd:type_name -> Cmd.Command
	0,  // 30: Cmd.MiniGameUnlockList.param:type_name -> Cmd.EMiniGameCmdParam
	20, // 31: Cmd.MiniGameUnlockList.list:type_name -> Cmd.MiniGameUnlockPair
	30, // 32: Cmd.MiniGameNtfGameOverCmd.cmd:type_name -> Cmd.Command
	0,  // 33: Cmd.MiniGameNtfGameOverCmd.param:type_name -> Cmd.EMiniGameCmdParam
	1,  // 34: Cmd.MiniGameNtfGameOverCmd.type:type_name -> Cmd.EMiniGameType
	3,  // 35: Cmd.MiniGameNtfGameOverCmd.result:type_name -> Cmd.EMiniGameOverResult
	30, // 36: Cmd.MiniGameReqOver.cmd:type_name -> Cmd.Command
	0,  // 37: Cmd.MiniGameReqOver.param:type_name -> Cmd.EMiniGameCmdParam
	1,  // 38: Cmd.MiniGameReqOver.type:type_name -> Cmd.EMiniGameType
	30, // 39: Cmd.MiniGameUseAssist.cmd:type_name -> Cmd.Command
	0,  // 40: Cmd.MiniGameUseAssist.param:type_name -> Cmd.EMiniGameCmdParam
	1,  // 41: Cmd.MiniGameUseAssist.type:type_name -> Cmd.EMiniGameType
	8,  // 42: Cmd.MiniGameUseAssist.assisttype:type_name -> Cmd.EAssistType
	30, // 43: Cmd.MiniGameNtfRoundOver.cmd:type_name -> Cmd.Command
	0,  // 44: Cmd.MiniGameNtfRoundOver.param:type_name -> Cmd.EMiniGameCmdParam
	1,  // 45: Cmd.MiniGameNtfRoundOver.type:type_name -> Cmd.EMiniGameType
	7,  // 46: Cmd.MiniGameNtfRoundOver.lastreplystatus:type_name -> Cmd.ELastReplyStatus
	31, // 47: Cmd.MiniGameRankUser.profession:type_name -> Cmd.EProfession
	32, // 48: Cmd.MiniGameRankUser.portrait:type_name -> Cmd.UserPortraitData
	19, // 49: Cmd.MiniGameRankBase.record:type_name -> Cmd.MiniGameChanlegeRecord
	27, // 50: Cmd.MiniGameRankBase.user:type_name -> Cmd.MiniGameRankUser
	30, // 51: Cmd.MiniGameQueryRank.cmd:type_name -> Cmd.Command
	0,  // 52: Cmd.MiniGameQueryRank.param:type_name -> Cmd.EMiniGameCmdParam
	1,  // 53: Cmd.MiniGameQueryRank.type:type_name -> Cmd.EMiniGameType
	28, // 54: Cmd.MiniGameQueryRank.ranks:type_name -> Cmd.MiniGameRankBase
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_MiniGameCmd_proto_init() }
func file_MiniGameCmd_proto_init() {
	if File_MiniGameCmd_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_MiniGameCmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameAssist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonsterShotRequirePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameNtfMonsterShot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameMonsterShotAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonsterAnswerQuestPart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameNtfMonsterAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameSubmitMonsterAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameNextRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameChanlegeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameUnlockPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameWinPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameUnlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameNtfGameOverCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameReqOver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameUseAssist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameNtfRoundOver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameRankUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameRankBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MiniGameCmd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniGameQueryRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MiniGameCmd_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_MiniGameCmd_proto_goTypes,
		DependencyIndexes: file_MiniGameCmd_proto_depIdxs,
		EnumInfos:         file_MiniGameCmd_proto_enumTypes,
		MessageInfos:      file_MiniGameCmd_proto_msgTypes,
	}.Build()
	File_MiniGameCmd_proto = out.File
	file_MiniGameCmd_proto_rawDesc = nil
	file_MiniGameCmd_proto_goTypes = nil
	file_MiniGameCmd_proto_depIdxs = nil
}
