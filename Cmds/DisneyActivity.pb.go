// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: DisneyActivity.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EDisneyActivityCmdParam int32

const (
	EDisneyActivityCmdParam_DISNEYACTIVITYPARAM_QUERY_DISNEY_GUIDE_INFO            EDisneyActivityCmdParam = 1
	EDisneyActivityCmdParam_DISNEYACTIVITYPARAM_RECEIVE_GUIDE_REWARD               EDisneyActivityCmdParam = 2
	EDisneyActivityCmdParam_DISNEYACTIVITYPARAM_RECEIVE_MICKEY_REWARD              EDisneyActivityCmdParam = 3
	EDisneyActivityCmdParam_DISNEYACTIVITYPARAM_CHALLENGE_TASK_RANK                EDisneyActivityCmdParam = 4
	EDisneyActivityCmdParam_DISNEYACTIVITYPARAM_CHALLENGE_TASK_TIP                 EDisneyActivityCmdParam = 5
	EDisneyActivityCmdParam_DISNEYACTIVITYPARAM_CHALLENGE_TASK_POINT               EDisneyActivityCmdParam = 6
	EDisneyActivityCmdParam_DISNEYACTIVITYPARAM_CHALLENGE_TASK_NOTIFY_FIRST_FINISH EDisneyActivityCmdParam = 7
)

// Enum value maps for EDisneyActivityCmdParam.
var (
	EDisneyActivityCmdParam_name = map[int32]string{
		1: "DISNEYACTIVITYPARAM_QUERY_DISNEY_GUIDE_INFO",
		2: "DISNEYACTIVITYPARAM_RECEIVE_GUIDE_REWARD",
		3: "DISNEYACTIVITYPARAM_RECEIVE_MICKEY_REWARD",
		4: "DISNEYACTIVITYPARAM_CHALLENGE_TASK_RANK",
		5: "DISNEYACTIVITYPARAM_CHALLENGE_TASK_TIP",
		6: "DISNEYACTIVITYPARAM_CHALLENGE_TASK_POINT",
		7: "DISNEYACTIVITYPARAM_CHALLENGE_TASK_NOTIFY_FIRST_FINISH",
	}
	EDisneyActivityCmdParam_value = map[string]int32{
		"DISNEYACTIVITYPARAM_QUERY_DISNEY_GUIDE_INFO":            1,
		"DISNEYACTIVITYPARAM_RECEIVE_GUIDE_REWARD":               2,
		"DISNEYACTIVITYPARAM_RECEIVE_MICKEY_REWARD":              3,
		"DISNEYACTIVITYPARAM_CHALLENGE_TASK_RANK":                4,
		"DISNEYACTIVITYPARAM_CHALLENGE_TASK_TIP":                 5,
		"DISNEYACTIVITYPARAM_CHALLENGE_TASK_POINT":               6,
		"DISNEYACTIVITYPARAM_CHALLENGE_TASK_NOTIFY_FIRST_FINISH": 7,
	}
)

func (x EDisneyActivityCmdParam) Enum() *EDisneyActivityCmdParam {
	p := new(EDisneyActivityCmdParam)
	*p = x
	return p
}

func (x EDisneyActivityCmdParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDisneyActivityCmdParam) Descriptor() protoreflect.EnumDescriptor {
	return file_DisneyActivity_proto_enumTypes[0].Descriptor()
}

func (EDisneyActivityCmdParam) Type() protoreflect.EnumType {
	return &file_DisneyActivity_proto_enumTypes[0]
}

func (x EDisneyActivityCmdParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDisneyActivityCmdParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDisneyActivityCmdParam(num)
	return nil
}

// Deprecated: Use EDisneyActivityCmdParam.Descriptor instead.
func (EDisneyActivityCmdParam) EnumDescriptor() ([]byte, []int) {
	return file_DisneyActivity_proto_rawDescGZIP(), []int{0}
}

type DisneyGuideItemGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid *uint32 `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	Count  *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *DisneyGuideItemGet) Reset() {
	*x = DisneyGuideItemGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DisneyActivity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisneyGuideItemGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisneyGuideItemGet) ProtoMessage() {}

func (x *DisneyGuideItemGet) ProtoReflect() protoreflect.Message {
	mi := &file_DisneyActivity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisneyGuideItemGet.ProtoReflect.Descriptor instead.
func (*DisneyGuideItemGet) Descriptor() ([]byte, []int) {
	return file_DisneyActivity_proto_rawDescGZIP(), []int{0}
}

func (x *DisneyGuideItemGet) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *DisneyGuideItemGet) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type QueryDisneyGuideInfoCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd              *Command                 `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=232" json:"cmd,omitempty"`
	Param            *EDisneyActivityCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EDisneyActivityCmdParam,def=1" json:"param,omitempty"`
	GlobalActivityId *uint32                  `protobuf:"varint,3,opt,name=global_activity_id,json=globalActivityId" json:"global_activity_id,omitempty"`
	Opened           *bool                    `protobuf:"varint,4,opt,name=opened" json:"opened,omitempty"`
	MickeyOnIds      []uint32                 `protobuf:"varint,5,rep,name=mickey_on_ids,json=mickeyOnIds" json:"mickey_on_ids,omitempty"`
	ReceivedRewards  []uint32                 `protobuf:"varint,6,rep,name=received_rewards,json=receivedRewards" json:"received_rewards,omitempty"`
	MickeyRewardIds  []uint32                 `protobuf:"varint,7,rep,name=mickey_reward_ids,json=mickeyRewardIds" json:"mickey_reward_ids,omitempty"`
	MickeyGotNum     *uint32                  `protobuf:"varint,8,opt,name=mickey_got_num,json=mickeyGotNum" json:"mickey_got_num,omitempty"`
	GetItems         []*DisneyGuideItemGet    `protobuf:"bytes,9,rep,name=get_items,json=getItems" json:"get_items,omitempty"`
}

// Default values for QueryDisneyGuideInfoCmd fields.
const (
	Default_QueryDisneyGuideInfoCmd_Cmd   = Command_DISNEY_ACTIVITY_PROTOCMD
	Default_QueryDisneyGuideInfoCmd_Param = EDisneyActivityCmdParam_DISNEYACTIVITYPARAM_QUERY_DISNEY_GUIDE_INFO
)

func (x *QueryDisneyGuideInfoCmd) Reset() {
	*x = QueryDisneyGuideInfoCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DisneyActivity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDisneyGuideInfoCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDisneyGuideInfoCmd) ProtoMessage() {}

func (x *QueryDisneyGuideInfoCmd) ProtoReflect() protoreflect.Message {
	mi := &file_DisneyActivity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDisneyGuideInfoCmd.ProtoReflect.Descriptor instead.
func (*QueryDisneyGuideInfoCmd) Descriptor() ([]byte, []int) {
	return file_DisneyActivity_proto_rawDescGZIP(), []int{1}
}

func (x *QueryDisneyGuideInfoCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryDisneyGuideInfoCmd_Cmd
}

func (x *QueryDisneyGuideInfoCmd) GetParam() EDisneyActivityCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryDisneyGuideInfoCmd_Param
}

func (x *QueryDisneyGuideInfoCmd) GetGlobalActivityId() uint32 {
	if x != nil && x.GlobalActivityId != nil {
		return *x.GlobalActivityId
	}
	return 0
}

func (x *QueryDisneyGuideInfoCmd) GetOpened() bool {
	if x != nil && x.Opened != nil {
		return *x.Opened
	}
	return false
}

func (x *QueryDisneyGuideInfoCmd) GetMickeyOnIds() []uint32 {
	if x != nil {
		return x.MickeyOnIds
	}
	return nil
}

func (x *QueryDisneyGuideInfoCmd) GetReceivedRewards() []uint32 {
	if x != nil {
		return x.ReceivedRewards
	}
	return nil
}

func (x *QueryDisneyGuideInfoCmd) GetMickeyRewardIds() []uint32 {
	if x != nil {
		return x.MickeyRewardIds
	}
	return nil
}

func (x *QueryDisneyGuideInfoCmd) GetMickeyGotNum() uint32 {
	if x != nil && x.MickeyGotNum != nil {
		return *x.MickeyGotNum
	}
	return 0
}

func (x *QueryDisneyGuideInfoCmd) GetGetItems() []*DisneyGuideItemGet {
	if x != nil {
		return x.GetItems
	}
	return nil
}

type ReceiveGuideRewardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd              *Command                 `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=232" json:"cmd,omitempty"`
	Param            *EDisneyActivityCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EDisneyActivityCmdParam,def=2" json:"param,omitempty"`
	GlobalActivityId *uint32                  `protobuf:"varint,3,opt,name=global_activity_id,json=globalActivityId" json:"global_activity_id,omitempty"`
	MickeyRewardId   *uint32                  `protobuf:"varint,4,opt,name=mickey_reward_id,json=mickeyRewardId" json:"mickey_reward_id,omitempty"`
}

// Default values for ReceiveGuideRewardCmd fields.
const (
	Default_ReceiveGuideRewardCmd_Cmd   = Command_DISNEY_ACTIVITY_PROTOCMD
	Default_ReceiveGuideRewardCmd_Param = EDisneyActivityCmdParam_DISNEYACTIVITYPARAM_RECEIVE_GUIDE_REWARD
)

func (x *ReceiveGuideRewardCmd) Reset() {
	*x = ReceiveGuideRewardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DisneyActivity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveGuideRewardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveGuideRewardCmd) ProtoMessage() {}

func (x *ReceiveGuideRewardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_DisneyActivity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveGuideRewardCmd.ProtoReflect.Descriptor instead.
func (*ReceiveGuideRewardCmd) Descriptor() ([]byte, []int) {
	return file_DisneyActivity_proto_rawDescGZIP(), []int{2}
}

func (x *ReceiveGuideRewardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReceiveGuideRewardCmd_Cmd
}

func (x *ReceiveGuideRewardCmd) GetParam() EDisneyActivityCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReceiveGuideRewardCmd_Param
}

func (x *ReceiveGuideRewardCmd) GetGlobalActivityId() uint32 {
	if x != nil && x.GlobalActivityId != nil {
		return *x.GlobalActivityId
	}
	return 0
}

func (x *ReceiveGuideRewardCmd) GetMickeyRewardId() uint32 {
	if x != nil && x.MickeyRewardId != nil {
		return *x.MickeyRewardId
	}
	return 0
}

type ReceiveMickeyRewardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd              *Command                 `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=232" json:"cmd,omitempty"`
	Param            *EDisneyActivityCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EDisneyActivityCmdParam,def=3" json:"param,omitempty"`
	GlobalActivityId *uint32                  `protobuf:"varint,3,opt,name=global_activity_id,json=globalActivityId" json:"global_activity_id,omitempty"`
	MickeyNum        *uint32                  `protobuf:"varint,4,opt,name=mickey_num,json=mickeyNum" json:"mickey_num,omitempty"`
}

// Default values for ReceiveMickeyRewardCmd fields.
const (
	Default_ReceiveMickeyRewardCmd_Cmd   = Command_DISNEY_ACTIVITY_PROTOCMD
	Default_ReceiveMickeyRewardCmd_Param = EDisneyActivityCmdParam_DISNEYACTIVITYPARAM_RECEIVE_MICKEY_REWARD
)

func (x *ReceiveMickeyRewardCmd) Reset() {
	*x = ReceiveMickeyRewardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DisneyActivity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveMickeyRewardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveMickeyRewardCmd) ProtoMessage() {}

func (x *ReceiveMickeyRewardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_DisneyActivity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveMickeyRewardCmd.ProtoReflect.Descriptor instead.
func (*ReceiveMickeyRewardCmd) Descriptor() ([]byte, []int) {
	return file_DisneyActivity_proto_rawDescGZIP(), []int{3}
}

func (x *ReceiveMickeyRewardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReceiveMickeyRewardCmd_Cmd
}

func (x *ReceiveMickeyRewardCmd) GetParam() EDisneyActivityCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReceiveMickeyRewardCmd_Param
}

func (x *ReceiveMickeyRewardCmd) GetGlobalActivityId() uint32 {
	if x != nil && x.GlobalActivityId != nil {
		return *x.GlobalActivityId
	}
	return 0
}

func (x *ReceiveMickeyRewardCmd) GetMickeyNum() uint32 {
	if x != nil && x.MickeyNum != nil {
		return *x.MickeyNum
	}
	return 0
}

type DisneyChallengeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid   *uint64            `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Point    *uint32            `protobuf:"varint,2,opt,name=point" json:"point,omitempty"`
	Showdata *UserModelShowData `protobuf:"bytes,3,opt,name=showdata" json:"showdata,omitempty"`
}

func (x *DisneyChallengeData) Reset() {
	*x = DisneyChallengeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DisneyActivity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisneyChallengeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisneyChallengeData) ProtoMessage() {}

func (x *DisneyChallengeData) ProtoReflect() protoreflect.Message {
	mi := &file_DisneyActivity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisneyChallengeData.ProtoReflect.Descriptor instead.
func (*DisneyChallengeData) Descriptor() ([]byte, []int) {
	return file_DisneyActivity_proto_rawDescGZIP(), []int{4}
}

func (x *DisneyChallengeData) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *DisneyChallengeData) GetPoint() uint32 {
	if x != nil && x.Point != nil {
		return *x.Point
	}
	return 0
}

func (x *DisneyChallengeData) GetShowdata() *UserModelShowData {
	if x != nil {
		return x.Showdata
	}
	return nil
}

type DisneyChallengeTaskRankCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd              *Command                 `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=232" json:"cmd,omitempty"`
	Param            *EDisneyActivityCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EDisneyActivityCmdParam,def=4" json:"param,omitempty"`
	GlobalActivityId *uint32                  `protobuf:"varint,3,opt,name=global_activity_id,json=globalActivityId" json:"global_activity_id,omitempty"`
	Datas            []*DisneyChallengeData   `protobuf:"bytes,4,rep,name=datas" json:"datas,omitempty"`
	UserPoint        *uint32                  `protobuf:"varint,5,opt,name=user_point,json=userPoint" json:"user_point,omitempty"`
}

// Default values for DisneyChallengeTaskRankCmd fields.
const (
	Default_DisneyChallengeTaskRankCmd_Cmd   = Command_DISNEY_ACTIVITY_PROTOCMD
	Default_DisneyChallengeTaskRankCmd_Param = EDisneyActivityCmdParam_DISNEYACTIVITYPARAM_CHALLENGE_TASK_RANK
)

func (x *DisneyChallengeTaskRankCmd) Reset() {
	*x = DisneyChallengeTaskRankCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DisneyActivity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisneyChallengeTaskRankCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisneyChallengeTaskRankCmd) ProtoMessage() {}

func (x *DisneyChallengeTaskRankCmd) ProtoReflect() protoreflect.Message {
	mi := &file_DisneyActivity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisneyChallengeTaskRankCmd.ProtoReflect.Descriptor instead.
func (*DisneyChallengeTaskRankCmd) Descriptor() ([]byte, []int) {
	return file_DisneyActivity_proto_rawDescGZIP(), []int{5}
}

func (x *DisneyChallengeTaskRankCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DisneyChallengeTaskRankCmd_Cmd
}

func (x *DisneyChallengeTaskRankCmd) GetParam() EDisneyActivityCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DisneyChallengeTaskRankCmd_Param
}

func (x *DisneyChallengeTaskRankCmd) GetGlobalActivityId() uint32 {
	if x != nil && x.GlobalActivityId != nil {
		return *x.GlobalActivityId
	}
	return 0
}

func (x *DisneyChallengeTaskRankCmd) GetDatas() []*DisneyChallengeData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *DisneyChallengeTaskRankCmd) GetUserPoint() uint32 {
	if x != nil && x.UserPoint != nil {
		return *x.UserPoint
	}
	return 0
}

type DisneyChallengeTaskTipData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId  *uint32 `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	UserName *string `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
}

func (x *DisneyChallengeTaskTipData) Reset() {
	*x = DisneyChallengeTaskTipData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DisneyActivity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisneyChallengeTaskTipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisneyChallengeTaskTipData) ProtoMessage() {}

func (x *DisneyChallengeTaskTipData) ProtoReflect() protoreflect.Message {
	mi := &file_DisneyActivity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisneyChallengeTaskTipData.ProtoReflect.Descriptor instead.
func (*DisneyChallengeTaskTipData) Descriptor() ([]byte, []int) {
	return file_DisneyActivity_proto_rawDescGZIP(), []int{6}
}

func (x *DisneyChallengeTaskTipData) GetQuestId() uint32 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *DisneyChallengeTaskTipData) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

type DisneyChallengeTaskTipCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd              *Command                      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=232" json:"cmd,omitempty"`
	Param            *EDisneyActivityCmdParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.EDisneyActivityCmdParam,def=5" json:"param,omitempty"`
	GlobalActivityId *uint32                       `protobuf:"varint,3,opt,name=global_activity_id,json=globalActivityId" json:"global_activity_id,omitempty"`
	Datas            []*DisneyChallengeTaskTipData `protobuf:"bytes,4,rep,name=datas" json:"datas,omitempty"`
}

// Default values for DisneyChallengeTaskTipCmd fields.
const (
	Default_DisneyChallengeTaskTipCmd_Cmd   = Command_DISNEY_ACTIVITY_PROTOCMD
	Default_DisneyChallengeTaskTipCmd_Param = EDisneyActivityCmdParam_DISNEYACTIVITYPARAM_CHALLENGE_TASK_TIP
)

func (x *DisneyChallengeTaskTipCmd) Reset() {
	*x = DisneyChallengeTaskTipCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DisneyActivity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisneyChallengeTaskTipCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisneyChallengeTaskTipCmd) ProtoMessage() {}

func (x *DisneyChallengeTaskTipCmd) ProtoReflect() protoreflect.Message {
	mi := &file_DisneyActivity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisneyChallengeTaskTipCmd.ProtoReflect.Descriptor instead.
func (*DisneyChallengeTaskTipCmd) Descriptor() ([]byte, []int) {
	return file_DisneyActivity_proto_rawDescGZIP(), []int{7}
}

func (x *DisneyChallengeTaskTipCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DisneyChallengeTaskTipCmd_Cmd
}

func (x *DisneyChallengeTaskTipCmd) GetParam() EDisneyActivityCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DisneyChallengeTaskTipCmd_Param
}

func (x *DisneyChallengeTaskTipCmd) GetGlobalActivityId() uint32 {
	if x != nil && x.GlobalActivityId != nil {
		return *x.GlobalActivityId
	}
	return 0
}

func (x *DisneyChallengeTaskTipCmd) GetDatas() []*DisneyChallengeTaskTipData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type DisneyChallengeTaskPointData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestId *uint32 `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	Point   *uint32 `protobuf:"varint,2,opt,name=point" json:"point,omitempty"`
}

func (x *DisneyChallengeTaskPointData) Reset() {
	*x = DisneyChallengeTaskPointData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DisneyActivity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisneyChallengeTaskPointData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisneyChallengeTaskPointData) ProtoMessage() {}

func (x *DisneyChallengeTaskPointData) ProtoReflect() protoreflect.Message {
	mi := &file_DisneyActivity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisneyChallengeTaskPointData.ProtoReflect.Descriptor instead.
func (*DisneyChallengeTaskPointData) Descriptor() ([]byte, []int) {
	return file_DisneyActivity_proto_rawDescGZIP(), []int{8}
}

func (x *DisneyChallengeTaskPointData) GetQuestId() uint32 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *DisneyChallengeTaskPointData) GetPoint() uint32 {
	if x != nil && x.Point != nil {
		return *x.Point
	}
	return 0
}

type DisneyChallengeTaskPointCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd              *Command                        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=232" json:"cmd,omitempty"`
	Param            *EDisneyActivityCmdParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.EDisneyActivityCmdParam,def=6" json:"param,omitempty"`
	GlobalActivityId *uint32                         `protobuf:"varint,3,opt,name=global_activity_id,json=globalActivityId" json:"global_activity_id,omitempty"`
	Datas            []*DisneyChallengeTaskPointData `protobuf:"bytes,4,rep,name=datas" json:"datas,omitempty"`
}

// Default values for DisneyChallengeTaskPointCmd fields.
const (
	Default_DisneyChallengeTaskPointCmd_Cmd   = Command_DISNEY_ACTIVITY_PROTOCMD
	Default_DisneyChallengeTaskPointCmd_Param = EDisneyActivityCmdParam_DISNEYACTIVITYPARAM_CHALLENGE_TASK_POINT
)

func (x *DisneyChallengeTaskPointCmd) Reset() {
	*x = DisneyChallengeTaskPointCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DisneyActivity_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisneyChallengeTaskPointCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisneyChallengeTaskPointCmd) ProtoMessage() {}

func (x *DisneyChallengeTaskPointCmd) ProtoReflect() protoreflect.Message {
	mi := &file_DisneyActivity_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisneyChallengeTaskPointCmd.ProtoReflect.Descriptor instead.
func (*DisneyChallengeTaskPointCmd) Descriptor() ([]byte, []int) {
	return file_DisneyActivity_proto_rawDescGZIP(), []int{9}
}

func (x *DisneyChallengeTaskPointCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DisneyChallengeTaskPointCmd_Cmd
}

func (x *DisneyChallengeTaskPointCmd) GetParam() EDisneyActivityCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DisneyChallengeTaskPointCmd_Param
}

func (x *DisneyChallengeTaskPointCmd) GetGlobalActivityId() uint32 {
	if x != nil && x.GlobalActivityId != nil {
		return *x.GlobalActivityId
	}
	return 0
}

func (x *DisneyChallengeTaskPointCmd) GetDatas() []*DisneyChallengeTaskPointData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type DisneyChallengeTaskNotifyFirstFinishCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd              *Command                 `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=232" json:"cmd,omitempty"`
	Param            *EDisneyActivityCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.EDisneyActivityCmdParam,def=7" json:"param,omitempty"`
	GlobalActivityId *uint32                  `protobuf:"varint,3,opt,name=global_activity_id,json=globalActivityId" json:"global_activity_id,omitempty"`
	QuestId          *uint32                  `protobuf:"varint,4,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	Firstusername    *string                  `protobuf:"bytes,5,opt,name=firstusername" json:"firstusername,omitempty"`
}

// Default values for DisneyChallengeTaskNotifyFirstFinishCmd fields.
const (
	Default_DisneyChallengeTaskNotifyFirstFinishCmd_Cmd   = Command_DISNEY_ACTIVITY_PROTOCMD
	Default_DisneyChallengeTaskNotifyFirstFinishCmd_Param = EDisneyActivityCmdParam_DISNEYACTIVITYPARAM_CHALLENGE_TASK_NOTIFY_FIRST_FINISH
)

func (x *DisneyChallengeTaskNotifyFirstFinishCmd) Reset() {
	*x = DisneyChallengeTaskNotifyFirstFinishCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DisneyActivity_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisneyChallengeTaskNotifyFirstFinishCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisneyChallengeTaskNotifyFirstFinishCmd) ProtoMessage() {}

func (x *DisneyChallengeTaskNotifyFirstFinishCmd) ProtoReflect() protoreflect.Message {
	mi := &file_DisneyActivity_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisneyChallengeTaskNotifyFirstFinishCmd.ProtoReflect.Descriptor instead.
func (*DisneyChallengeTaskNotifyFirstFinishCmd) Descriptor() ([]byte, []int) {
	return file_DisneyActivity_proto_rawDescGZIP(), []int{10}
}

func (x *DisneyChallengeTaskNotifyFirstFinishCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DisneyChallengeTaskNotifyFirstFinishCmd_Cmd
}

func (x *DisneyChallengeTaskNotifyFirstFinishCmd) GetParam() EDisneyActivityCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DisneyChallengeTaskNotifyFirstFinishCmd_Param
}

func (x *DisneyChallengeTaskNotifyFirstFinishCmd) GetGlobalActivityId() uint32 {
	if x != nil && x.GlobalActivityId != nil {
		return *x.GlobalActivityId
	}
	return 0
}

func (x *DisneyChallengeTaskNotifyFirstFinishCmd) GetQuestId() uint32 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *DisneyChallengeTaskNotifyFirstFinishCmd) GetFirstusername() string {
	if x != nil && x.Firstusername != nil {
		return *x.Firstusername
	}
	return ""
}

var File_DisneyActivity_proto protoreflect.FileDescriptor

var file_DisneyActivity_proto_rawDesc = []byte{
	0x0a, 0x14, 0x44, 0x69, 0x73, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x12, 0x44, 0x69,
	0x73, 0x6e, 0x65, 0x79, 0x47, 0x75, 0x69, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd1,
	0x03, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6e, 0x65, 0x79, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x5f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x44, 0x69, 0x73, 0x6e, 0x65,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x2b, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x4e, 0x45, 0x59, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x69, 0x63, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x4f, 0x6e, 0x49, 0x64, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69,
	0x63, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x63, 0x6b, 0x65, 0x79,
	0x5f, 0x67, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x6d, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x47, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x09,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x6e, 0x65, 0x79, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x52, 0x08, 0x67, 0x65, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x87, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x5c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x44, 0x69, 0x73,
	0x6e, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6d, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x28, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45,
	0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x69,
	0x63, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a,
	0x16, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x18, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x5d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x44, 0x69, 0x73, 0x6e, 0x65, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x29,
	0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x49, 0x43, 0x4b,
	0x45, 0x59, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x2c, 0x0a, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6d, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x4e, 0x75, 0x6d, 0x22, 0x77, 0x0a,
	0x13, 0x44, 0x69, 0x73, 0x6e, 0x65, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x77, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb0, 0x02, 0x0a, 0x1a, 0x44, 0x69, 0x73, 0x6e, 0x65,
	0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x61,
	0x6e, 0x6b, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x18, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x5b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x44, 0x69, 0x73, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x27, 0x44, 0x49,
	0x53, 0x4e, 0x45, 0x59, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x12,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x44, 0x69, 0x73, 0x6e, 0x65, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x1a, 0x44, 0x69, 0x73,
	0x6e, 0x65, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x96, 0x02, 0x0a, 0x19, 0x44, 0x69, 0x73, 0x6e, 0x65, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x70, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x5a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x44, 0x69,
	0x73, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6d, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x26, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45,
	0x4e, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x49, 0x50, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x6e, 0x65, 0x79, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x4f, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x6e,
	0x65, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x1b, 0x44, 0x69,
	0x73, 0x6e, 0x65, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x5c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x44, 0x69, 0x73, 0x6e, 0x65, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x28, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x6e, 0x65, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xbe, 0x02, 0x0a, 0x27, 0x44, 0x69, 0x73,
	0x6e, 0x65, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x43, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x18, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x6a,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x44, 0x69, 0x73, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x36, 0x44, 0x49, 0x53,
	0x4e, 0x45, 0x59, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4e,
	0x49, 0x53, 0x48, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0xea, 0x02, 0x0a, 0x17, 0x45, 0x44,
	0x69, 0x73, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6d, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x5f, 0x4d, 0x49, 0x43, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x04,
	0x12, 0x2a, 0x0a, 0x26, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x49, 0x50, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28,
	0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x3a, 0x0a, 0x36, 0x44, 0x49,
	0x53, 0x4e, 0x45, 0x59, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x10, 0x07,
}

var (
	file_DisneyActivity_proto_rawDescOnce sync.Once
	file_DisneyActivity_proto_rawDescData = file_DisneyActivity_proto_rawDesc
)

func file_DisneyActivity_proto_rawDescGZIP() []byte {
	file_DisneyActivity_proto_rawDescOnce.Do(func() {
		file_DisneyActivity_proto_rawDescData = protoimpl.X.CompressGZIP(file_DisneyActivity_proto_rawDescData)
	})
	return file_DisneyActivity_proto_rawDescData
}

var file_DisneyActivity_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_DisneyActivity_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_DisneyActivity_proto_goTypes = []interface{}{
	(EDisneyActivityCmdParam)(0),                    // 0: Cmd.EDisneyActivityCmdParam
	(*DisneyGuideItemGet)(nil),                      // 1: Cmd.DisneyGuideItemGet
	(*QueryDisneyGuideInfoCmd)(nil),                 // 2: Cmd.QueryDisneyGuideInfoCmd
	(*ReceiveGuideRewardCmd)(nil),                   // 3: Cmd.ReceiveGuideRewardCmd
	(*ReceiveMickeyRewardCmd)(nil),                  // 4: Cmd.ReceiveMickeyRewardCmd
	(*DisneyChallengeData)(nil),                     // 5: Cmd.DisneyChallengeData
	(*DisneyChallengeTaskRankCmd)(nil),              // 6: Cmd.DisneyChallengeTaskRankCmd
	(*DisneyChallengeTaskTipData)(nil),              // 7: Cmd.DisneyChallengeTaskTipData
	(*DisneyChallengeTaskTipCmd)(nil),               // 8: Cmd.DisneyChallengeTaskTipCmd
	(*DisneyChallengeTaskPointData)(nil),            // 9: Cmd.DisneyChallengeTaskPointData
	(*DisneyChallengeTaskPointCmd)(nil),             // 10: Cmd.DisneyChallengeTaskPointCmd
	(*DisneyChallengeTaskNotifyFirstFinishCmd)(nil), // 11: Cmd.DisneyChallengeTaskNotifyFirstFinishCmd
	(Command)(0),              // 12: Cmd.Command
	(*UserModelShowData)(nil), // 13: Cmd.UserModelShowData
}
var file_DisneyActivity_proto_depIdxs = []int32{
	12, // 0: Cmd.QueryDisneyGuideInfoCmd.cmd:type_name -> Cmd.Command
	0,  // 1: Cmd.QueryDisneyGuideInfoCmd.param:type_name -> Cmd.EDisneyActivityCmdParam
	1,  // 2: Cmd.QueryDisneyGuideInfoCmd.get_items:type_name -> Cmd.DisneyGuideItemGet
	12, // 3: Cmd.ReceiveGuideRewardCmd.cmd:type_name -> Cmd.Command
	0,  // 4: Cmd.ReceiveGuideRewardCmd.param:type_name -> Cmd.EDisneyActivityCmdParam
	12, // 5: Cmd.ReceiveMickeyRewardCmd.cmd:type_name -> Cmd.Command
	0,  // 6: Cmd.ReceiveMickeyRewardCmd.param:type_name -> Cmd.EDisneyActivityCmdParam
	13, // 7: Cmd.DisneyChallengeData.showdata:type_name -> Cmd.UserModelShowData
	12, // 8: Cmd.DisneyChallengeTaskRankCmd.cmd:type_name -> Cmd.Command
	0,  // 9: Cmd.DisneyChallengeTaskRankCmd.param:type_name -> Cmd.EDisneyActivityCmdParam
	5,  // 10: Cmd.DisneyChallengeTaskRankCmd.datas:type_name -> Cmd.DisneyChallengeData
	12, // 11: Cmd.DisneyChallengeTaskTipCmd.cmd:type_name -> Cmd.Command
	0,  // 12: Cmd.DisneyChallengeTaskTipCmd.param:type_name -> Cmd.EDisneyActivityCmdParam
	7,  // 13: Cmd.DisneyChallengeTaskTipCmd.datas:type_name -> Cmd.DisneyChallengeTaskTipData
	12, // 14: Cmd.DisneyChallengeTaskPointCmd.cmd:type_name -> Cmd.Command
	0,  // 15: Cmd.DisneyChallengeTaskPointCmd.param:type_name -> Cmd.EDisneyActivityCmdParam
	9,  // 16: Cmd.DisneyChallengeTaskPointCmd.datas:type_name -> Cmd.DisneyChallengeTaskPointData
	12, // 17: Cmd.DisneyChallengeTaskNotifyFirstFinishCmd.cmd:type_name -> Cmd.Command
	0,  // 18: Cmd.DisneyChallengeTaskNotifyFirstFinishCmd.param:type_name -> Cmd.EDisneyActivityCmdParam
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_DisneyActivity_proto_init() }
func file_DisneyActivity_proto_init() {
	if File_DisneyActivity_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_DisneyActivity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisneyGuideItemGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DisneyActivity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDisneyGuideInfoCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DisneyActivity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveGuideRewardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DisneyActivity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveMickeyRewardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DisneyActivity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisneyChallengeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DisneyActivity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisneyChallengeTaskRankCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DisneyActivity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisneyChallengeTaskTipData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DisneyActivity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisneyChallengeTaskTipCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DisneyActivity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisneyChallengeTaskPointData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DisneyActivity_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisneyChallengeTaskPointCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DisneyActivity_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisneyChallengeTaskNotifyFirstFinishCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_DisneyActivity_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_DisneyActivity_proto_goTypes,
		DependencyIndexes: file_DisneyActivity_proto_depIdxs,
		EnumInfos:         file_DisneyActivity_proto_enumTypes,
		MessageInfos:      file_DisneyActivity_proto_msgTypes,
	}.Build()
	File_DisneyActivity_proto = out.File
	file_DisneyActivity_proto_rawDesc = nil
	file_DisneyActivity_proto_goTypes = nil
	file_DisneyActivity_proto_depIdxs = nil
}
