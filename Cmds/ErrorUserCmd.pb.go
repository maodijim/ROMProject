// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: ErrorUserCmd.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ErrCmdParam int32

const (
	ErrCmdParam_REG_ERR_USER_CMD  ErrCmdParam = 1
	ErrCmdParam_REG_KICK_USER_CMD ErrCmdParam = 2
	ErrCmdParam_MAINTAIN_USER_CMD ErrCmdParam = 3
)

// Enum value maps for ErrCmdParam.
var (
	ErrCmdParam_name = map[int32]string{
		1: "REG_ERR_USER_CMD",
		2: "REG_KICK_USER_CMD",
		3: "MAINTAIN_USER_CMD",
	}
	ErrCmdParam_value = map[string]int32{
		"REG_ERR_USER_CMD":  1,
		"REG_KICK_USER_CMD": 2,
		"MAINTAIN_USER_CMD": 3,
	}
)

func (x ErrCmdParam) Enum() *ErrCmdParam {
	p := new(ErrCmdParam)
	*p = x
	return p
}

func (x ErrCmdParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrCmdParam) Descriptor() protoreflect.EnumDescriptor {
	return file_ErrorUserCmd_proto_enumTypes[0].Descriptor()
}

func (ErrCmdParam) Type() protoreflect.EnumType {
	return &file_ErrorUserCmd_proto_enumTypes[0]
}

func (x ErrCmdParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ErrCmdParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ErrCmdParam(num)
	return nil
}

// Deprecated: Use ErrCmdParam.Descriptor instead.
func (ErrCmdParam) EnumDescriptor() ([]byte, []int) {
	return file_ErrorUserCmd_proto_rawDescGZIP(), []int{0}
}

type RegErrRet int32

const (
	RegErrRet_REG_ERR_SUCC                 RegErrRet = 0
	RegErrRet_REG_ERR_SERVER_STOP          RegErrRet = 1
	RegErrRet_REG_ERR_SERVER_STOP_LOGIN    RegErrRet = 2
	RegErrRet_REG_ERR_DUPLICATE_LOGIN      RegErrRet = 3
	RegErrRet_REG_ERR_RELOGIN_OVERTIME     RegErrRet = 4
	RegErrRet_REG_ERR_NEW_VERSION          RegErrRet = 5
	RegErrRet_REG_ERR_PROFESSION_NOOPEN    RegErrRet = 6
	RegErrRet_REG_ERR_NAME_INVALID         RegErrRet = 7
	RegErrRet_REG_ERR_NAME_EMPTY           RegErrRet = 8
	RegErrRet_REG_ERR_NAME_OVERMAXLEN      RegErrRet = 9
	RegErrRet_REG_ERR_NAME_DUPLICATE       RegErrRet = 10
	RegErrRet_REG_ERR_SEQUENCE             RegErrRet = 16
	RegErrRet_REG_ERR_DELETE_ERROR         RegErrRet = 17
	RegErrRet_REG_ERR_DELETE_ERROR_LOCKED  RegErrRet = 18
	RegErrRet_REG_ERR_PASSWD_INVALID       RegErrRet = 20
	RegErrRet_REG_ERR_OVERTIME             RegErrRet = 21
	RegErrRet_REG_ERR_ACC_FORBID           RegErrRet = 22
	RegErrRet_REG_ERR_SERVER_UNOPENED      RegErrRet = 51
	RegErrRet_REG_ERR_RELOGIN_SCENE        RegErrRet = 100
	RegErrRet_REG_ERR_SESSION_CREATE_FAILD RegErrRet = 101
	RegErrRet_REG_ERR_NOTIFY_SCENE         RegErrRet = 102
	RegErrRet_REG_ERR_SCENE_CREATE_FAILD   RegErrRet = 103
	RegErrRet_REG_ERR_FIND_GATE            RegErrRet = 104
	RegErrRet_REG_ERR_REQ_DATA_FROM_RECORD RegErrRet = 105
	RegErrRet_REG_ERR_SET_USER_DATA_SCENE  RegErrRet = 106
	RegErrRet_REG_ERR_FORBID_REG           RegErrRet = 107
	RegErrRet_REG_ERR_ENTER_SCENE          RegErrRet = 108
	RegErrRet_REG_ERR_GET_USER_DATA        RegErrRet = 109
	RegErrRet_REG_ERR_SERVER_NOT_MATCH     RegErrRet = 110
)

// Enum value maps for RegErrRet.
var (
	RegErrRet_name = map[int32]string{
		0:   "REG_ERR_SUCC",
		1:   "REG_ERR_SERVER_STOP",
		2:   "REG_ERR_SERVER_STOP_LOGIN",
		3:   "REG_ERR_DUPLICATE_LOGIN",
		4:   "REG_ERR_RELOGIN_OVERTIME",
		5:   "REG_ERR_NEW_VERSION",
		6:   "REG_ERR_PROFESSION_NOOPEN",
		7:   "REG_ERR_NAME_INVALID",
		8:   "REG_ERR_NAME_EMPTY",
		9:   "REG_ERR_NAME_OVERMAXLEN",
		10:  "REG_ERR_NAME_DUPLICATE",
		16:  "REG_ERR_SEQUENCE",
		17:  "REG_ERR_DELETE_ERROR",
		18:  "REG_ERR_DELETE_ERROR_LOCKED",
		20:  "REG_ERR_PASSWD_INVALID",
		21:  "REG_ERR_OVERTIME",
		22:  "REG_ERR_ACC_FORBID",
		51:  "REG_ERR_SERVER_UNOPENED",
		100: "REG_ERR_RELOGIN_SCENE",
		101: "REG_ERR_SESSION_CREATE_FAILD",
		102: "REG_ERR_NOTIFY_SCENE",
		103: "REG_ERR_SCENE_CREATE_FAILD",
		104: "REG_ERR_FIND_GATE",
		105: "REG_ERR_REQ_DATA_FROM_RECORD",
		106: "REG_ERR_SET_USER_DATA_SCENE",
		107: "REG_ERR_FORBID_REG",
		108: "REG_ERR_ENTER_SCENE",
		109: "REG_ERR_GET_USER_DATA",
		110: "REG_ERR_SERVER_NOT_MATCH",
	}
	RegErrRet_value = map[string]int32{
		"REG_ERR_SUCC":                 0,
		"REG_ERR_SERVER_STOP":          1,
		"REG_ERR_SERVER_STOP_LOGIN":    2,
		"REG_ERR_DUPLICATE_LOGIN":      3,
		"REG_ERR_RELOGIN_OVERTIME":     4,
		"REG_ERR_NEW_VERSION":          5,
		"REG_ERR_PROFESSION_NOOPEN":    6,
		"REG_ERR_NAME_INVALID":         7,
		"REG_ERR_NAME_EMPTY":           8,
		"REG_ERR_NAME_OVERMAXLEN":      9,
		"REG_ERR_NAME_DUPLICATE":       10,
		"REG_ERR_SEQUENCE":             16,
		"REG_ERR_DELETE_ERROR":         17,
		"REG_ERR_DELETE_ERROR_LOCKED":  18,
		"REG_ERR_PASSWD_INVALID":       20,
		"REG_ERR_OVERTIME":             21,
		"REG_ERR_ACC_FORBID":           22,
		"REG_ERR_SERVER_UNOPENED":      51,
		"REG_ERR_RELOGIN_SCENE":        100,
		"REG_ERR_SESSION_CREATE_FAILD": 101,
		"REG_ERR_NOTIFY_SCENE":         102,
		"REG_ERR_SCENE_CREATE_FAILD":   103,
		"REG_ERR_FIND_GATE":            104,
		"REG_ERR_REQ_DATA_FROM_RECORD": 105,
		"REG_ERR_SET_USER_DATA_SCENE":  106,
		"REG_ERR_FORBID_REG":           107,
		"REG_ERR_ENTER_SCENE":          108,
		"REG_ERR_GET_USER_DATA":        109,
		"REG_ERR_SERVER_NOT_MATCH":     110,
	}
)

func (x RegErrRet) Enum() *RegErrRet {
	p := new(RegErrRet)
	*p = x
	return p
}

func (x RegErrRet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegErrRet) Descriptor() protoreflect.EnumDescriptor {
	return file_ErrorUserCmd_proto_enumTypes[1].Descriptor()
}

func (RegErrRet) Type() protoreflect.EnumType {
	return &file_ErrorUserCmd_proto_enumTypes[1]
}

func (x RegErrRet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RegErrRet) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RegErrRet(num)
	return nil
}

// Deprecated: Use RegErrRet.Descriptor instead.
func (RegErrRet) EnumDescriptor() ([]byte, []int) {
	return file_ErrorUserCmd_proto_rawDescGZIP(), []int{1}
}

type RegErrUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=2" json:"cmd,omitempty"`
	Param      *ErrCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ErrCmdParam,def=1" json:"param,omitempty"`
	Ret        *RegErrRet   `protobuf:"varint,3,req,name=ret,enum=Cmd.RegErrRet,def=0" json:"ret,omitempty"`
	Accid      *uint64      `protobuf:"varint,4,opt,name=accid,def=0" json:"accid,omitempty"`
	ZoneID     *uint32      `protobuf:"varint,5,opt,name=zoneID,def=0" json:"zoneID,omitempty"`
	Charid     *uint64      `protobuf:"varint,6,opt,name=charid,def=0" json:"charid,omitempty"`
	Args       []uint32     `protobuf:"varint,7,rep,name=args" json:"args,omitempty"`
	Lockreason *string      `protobuf:"bytes,8,opt,name=lockreason" json:"lockreason,omitempty"`
}

// Default values for RegErrUserCmd fields.
const (
	Default_RegErrUserCmd_Cmd    = Command_ERROR_USER_PROTOCMD
	Default_RegErrUserCmd_Param  = ErrCmdParam_REG_ERR_USER_CMD
	Default_RegErrUserCmd_Ret    = RegErrRet_REG_ERR_SUCC
	Default_RegErrUserCmd_Accid  = uint64(0)
	Default_RegErrUserCmd_ZoneID = uint32(0)
	Default_RegErrUserCmd_Charid = uint64(0)
)

func (x *RegErrUserCmd) Reset() {
	*x = RegErrUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ErrorUserCmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegErrUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegErrUserCmd) ProtoMessage() {}

func (x *RegErrUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ErrorUserCmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegErrUserCmd.ProtoReflect.Descriptor instead.
func (*RegErrUserCmd) Descriptor() ([]byte, []int) {
	return file_ErrorUserCmd_proto_rawDescGZIP(), []int{0}
}

func (x *RegErrUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RegErrUserCmd_Cmd
}

func (x *RegErrUserCmd) GetParam() ErrCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RegErrUserCmd_Param
}

func (x *RegErrUserCmd) GetRet() RegErrRet {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return Default_RegErrUserCmd_Ret
}

func (x *RegErrUserCmd) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return Default_RegErrUserCmd_Accid
}

func (x *RegErrUserCmd) GetZoneID() uint32 {
	if x != nil && x.ZoneID != nil {
		return *x.ZoneID
	}
	return Default_RegErrUserCmd_ZoneID
}

func (x *RegErrUserCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_RegErrUserCmd_Charid
}

func (x *RegErrUserCmd) GetArgs() []uint32 {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RegErrUserCmd) GetLockreason() string {
	if x != nil && x.Lockreason != nil {
		return *x.Lockreason
	}
	return ""
}

type KickUserErrorCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=2" json:"cmd,omitempty"`
	Param *ErrCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ErrCmdParam,def=2" json:"param,omitempty"`
	Accid *uint64      `protobuf:"varint,3,opt,name=accid,def=0" json:"accid,omitempty"`
}

// Default values for KickUserErrorCmd fields.
const (
	Default_KickUserErrorCmd_Cmd   = Command_ERROR_USER_PROTOCMD
	Default_KickUserErrorCmd_Param = ErrCmdParam_REG_KICK_USER_CMD
	Default_KickUserErrorCmd_Accid = uint64(0)
)

func (x *KickUserErrorCmd) Reset() {
	*x = KickUserErrorCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ErrorUserCmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickUserErrorCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickUserErrorCmd) ProtoMessage() {}

func (x *KickUserErrorCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ErrorUserCmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickUserErrorCmd.ProtoReflect.Descriptor instead.
func (*KickUserErrorCmd) Descriptor() ([]byte, []int) {
	return file_ErrorUserCmd_proto_rawDescGZIP(), []int{1}
}

func (x *KickUserErrorCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_KickUserErrorCmd_Cmd
}

func (x *KickUserErrorCmd) GetParam() ErrCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_KickUserErrorCmd_Param
}

func (x *KickUserErrorCmd) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return Default_KickUserErrorCmd_Accid
}

type MaintainUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=2" json:"cmd,omitempty"`
	Param   *ErrCmdParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ErrCmdParam,def=3" json:"param,omitempty"`
	Content *string      `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Tip     *string      `protobuf:"bytes,4,opt,name=tip" json:"tip,omitempty"`
	Picture *string      `protobuf:"bytes,5,opt,name=picture" json:"picture,omitempty"`
}

// Default values for MaintainUserCmd fields.
const (
	Default_MaintainUserCmd_Cmd   = Command_ERROR_USER_PROTOCMD
	Default_MaintainUserCmd_Param = ErrCmdParam_MAINTAIN_USER_CMD
)

func (x *MaintainUserCmd) Reset() {
	*x = MaintainUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ErrorUserCmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaintainUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaintainUserCmd) ProtoMessage() {}

func (x *MaintainUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ErrorUserCmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaintainUserCmd.ProtoReflect.Descriptor instead.
func (*MaintainUserCmd) Descriptor() ([]byte, []int) {
	return file_ErrorUserCmd_proto_rawDescGZIP(), []int{2}
}

func (x *MaintainUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MaintainUserCmd_Cmd
}

func (x *MaintainUserCmd) GetParam() ErrCmdParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MaintainUserCmd_Param
}

func (x *MaintainUserCmd) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *MaintainUserCmd) GetTip() string {
	if x != nil && x.Tip != nil {
		return *x.Tip
	}
	return ""
}

func (x *MaintainUserCmd) GetPicture() string {
	if x != nil && x.Picture != nil {
		return *x.Picture
	}
	return ""
}

var File_ErrorUserCmd_proto protoreflect.FileDescriptor

var file_ErrorUserCmd_proto_rawDesc = []byte{
	0x0a, 0x12, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x45, 0x72, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x10, 0x52,
	0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x67, 0x45, 0x72, 0x72,
	0x52, 0x65, 0x74, 0x3a, 0x0c, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x63,
	0x6b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x6f, 0x63, 0x6b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x4b, 0x69,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x33,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6d, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x52, 0x45, 0x47, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17,
	0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x11, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2a, 0x51, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x4d, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x47, 0x5f, 0x4b, 0x49,
	0x43, 0x4b, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43,
	0x4d, 0x44, 0x10, 0x03, 0x2a, 0xa6, 0x06, 0x0a, 0x09, 0x52, 0x65, 0x67, 0x45, 0x72, 0x72, 0x52,
	0x65, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x47,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x47, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x06, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x47,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10,
	0x08, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4d, 0x41, 0x58, 0x4c, 0x45, 0x4e, 0x10, 0x09, 0x12, 0x1a,
	0x0a, 0x16, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x44,
	0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45,
	0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x10,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45,
	0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x52,
	0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x44, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x47, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x15, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x46, 0x4f, 0x52,
	0x42, 0x49, 0x44, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x44,
	0x10, 0x33, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x45,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10, 0x64, 0x12, 0x20, 0x0a,
	0x1c, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x44, 0x10, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x59, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10, 0x66, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x47,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x44, 0x10, 0x67, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x47,
	0x5f, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x10, 0x68,
	0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x10, 0x69, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x10, 0x6a, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x46,
	0x4f, 0x52, 0x42, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x10, 0x6b, 0x12, 0x17, 0x0a, 0x13, 0x52,
	0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x10, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x6d, 0x12,
	0x1c, 0x0a, 0x18, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x6e,
}

var (
	file_ErrorUserCmd_proto_rawDescOnce sync.Once
	file_ErrorUserCmd_proto_rawDescData = file_ErrorUserCmd_proto_rawDesc
)

func file_ErrorUserCmd_proto_rawDescGZIP() []byte {
	file_ErrorUserCmd_proto_rawDescOnce.Do(func() {
		file_ErrorUserCmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_ErrorUserCmd_proto_rawDescData)
	})
	return file_ErrorUserCmd_proto_rawDescData
}

var file_ErrorUserCmd_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ErrorUserCmd_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ErrorUserCmd_proto_goTypes = []interface{}{
	(ErrCmdParam)(0),         // 0: Cmd.ErrCmdParam
	(RegErrRet)(0),           // 1: Cmd.RegErrRet
	(*RegErrUserCmd)(nil),    // 2: Cmd.RegErrUserCmd
	(*KickUserErrorCmd)(nil), // 3: Cmd.KickUserErrorCmd
	(*MaintainUserCmd)(nil),  // 4: Cmd.MaintainUserCmd
	(Command)(0),             // 5: Cmd.Command
}
var file_ErrorUserCmd_proto_depIdxs = []int32{
	5, // 0: Cmd.RegErrUserCmd.cmd:type_name -> Cmd.Command
	0, // 1: Cmd.RegErrUserCmd.param:type_name -> Cmd.ErrCmdParam
	1, // 2: Cmd.RegErrUserCmd.ret:type_name -> Cmd.RegErrRet
	5, // 3: Cmd.KickUserErrorCmd.cmd:type_name -> Cmd.Command
	0, // 4: Cmd.KickUserErrorCmd.param:type_name -> Cmd.ErrCmdParam
	5, // 5: Cmd.MaintainUserCmd.cmd:type_name -> Cmd.Command
	0, // 6: Cmd.MaintainUserCmd.param:type_name -> Cmd.ErrCmdParam
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_ErrorUserCmd_proto_init() }
func file_ErrorUserCmd_proto_init() {
	if File_ErrorUserCmd_proto != nil {
		return
	}
	file_xCmd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ErrorUserCmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegErrUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ErrorUserCmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickUserErrorCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ErrorUserCmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaintainUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ErrorUserCmd_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ErrorUserCmd_proto_goTypes,
		DependencyIndexes: file_ErrorUserCmd_proto_depIdxs,
		EnumInfos:         file_ErrorUserCmd_proto_enumTypes,
		MessageInfos:      file_ErrorUserCmd_proto_msgTypes,
	}.Build()
	File_ErrorUserCmd_proto = out.File
	file_ErrorUserCmd_proto_rawDesc = nil
	file_ErrorUserCmd_proto_goTypes = nil
	file_ErrorUserCmd_proto_depIdxs = nil
}
