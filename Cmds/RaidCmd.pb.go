// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: RaidCmd.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RaidParam int32

const (
	RaidParam_RAIDPARAM_PUZZLE_QUERY           RaidParam = 1
	RaidParam_RAIDPARAM_PUZZLE_ACTION          RaidParam = 2
	RaidParam_RAIDPARAM_PUZZLE_UPDATE          RaidParam = 3
	RaidParam_RAIDPARAM_PUZZLE_PUSHOBJ         RaidParam = 4
	RaidParam_RAIDPARAM_PUZZLE_ROTATEOBJ       RaidParam = 5
	RaidParam_RAIDPARAM_PUZZLE_OBJCHANGE_NTF   RaidParam = 6
	RaidParam_RAIDPARAM_PUZZLE_ELEVATOR        RaidParam = 7
	RaidParam_RAIDPARAM_PUZZLE_GOTO_TRUEPOS    RaidParam = 8
	RaidParam_RAIDPARAM_PUZZLE_ROOM_ICON       RaidParam = 9
	RaidParam_RAIDPARAM_CLIENT_SUMMON          RaidParam = 10
	RaidParam_RAIDPARAM_CLIENT_TREASURE_BOX    RaidParam = 11
	RaidParam_RAIDPARAM_CLIENT_SAVE            RaidParam = 12
	RaidParam_RAIDPARAM_CLIENT_SAVE_RESULT     RaidParam = 13
	RaidParam_RAIDPARAM_CLIENT_QUERY_RAID      RaidParam = 14
	RaidParam_RAIDPARAM_PERSONAL_RAID_ENTER    RaidParam = 15
	RaidParam_RAIDPARAM_CLIENT_RAID_ACH_REWARD RaidParam = 16
)

// Enum value maps for RaidParam.
var (
	RaidParam_name = map[int32]string{
		1:  "RAIDPARAM_PUZZLE_QUERY",
		2:  "RAIDPARAM_PUZZLE_ACTION",
		3:  "RAIDPARAM_PUZZLE_UPDATE",
		4:  "RAIDPARAM_PUZZLE_PUSHOBJ",
		5:  "RAIDPARAM_PUZZLE_ROTATEOBJ",
		6:  "RAIDPARAM_PUZZLE_OBJCHANGE_NTF",
		7:  "RAIDPARAM_PUZZLE_ELEVATOR",
		8:  "RAIDPARAM_PUZZLE_GOTO_TRUEPOS",
		9:  "RAIDPARAM_PUZZLE_ROOM_ICON",
		10: "RAIDPARAM_CLIENT_SUMMON",
		11: "RAIDPARAM_CLIENT_TREASURE_BOX",
		12: "RAIDPARAM_CLIENT_SAVE",
		13: "RAIDPARAM_CLIENT_SAVE_RESULT",
		14: "RAIDPARAM_CLIENT_QUERY_RAID",
		15: "RAIDPARAM_PERSONAL_RAID_ENTER",
		16: "RAIDPARAM_CLIENT_RAID_ACH_REWARD",
	}
	RaidParam_value = map[string]int32{
		"RAIDPARAM_PUZZLE_QUERY":           1,
		"RAIDPARAM_PUZZLE_ACTION":          2,
		"RAIDPARAM_PUZZLE_UPDATE":          3,
		"RAIDPARAM_PUZZLE_PUSHOBJ":         4,
		"RAIDPARAM_PUZZLE_ROTATEOBJ":       5,
		"RAIDPARAM_PUZZLE_OBJCHANGE_NTF":   6,
		"RAIDPARAM_PUZZLE_ELEVATOR":        7,
		"RAIDPARAM_PUZZLE_GOTO_TRUEPOS":    8,
		"RAIDPARAM_PUZZLE_ROOM_ICON":       9,
		"RAIDPARAM_CLIENT_SUMMON":          10,
		"RAIDPARAM_CLIENT_TREASURE_BOX":    11,
		"RAIDPARAM_CLIENT_SAVE":            12,
		"RAIDPARAM_CLIENT_SAVE_RESULT":     13,
		"RAIDPARAM_CLIENT_QUERY_RAID":      14,
		"RAIDPARAM_PERSONAL_RAID_ENTER":    15,
		"RAIDPARAM_CLIENT_RAID_ACH_REWARD": 16,
	}
)

func (x RaidParam) Enum() *RaidParam {
	p := new(RaidParam)
	*p = x
	return p
}

func (x RaidParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaidParam) Descriptor() protoreflect.EnumDescriptor {
	return file_RaidCmd_proto_enumTypes[0].Descriptor()
}

func (RaidParam) Type() protoreflect.EnumType {
	return &file_RaidCmd_proto_enumTypes[0]
}

func (x RaidParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RaidParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RaidParam(num)
	return nil
}

// Deprecated: Use RaidParam.Descriptor instead.
func (RaidParam) EnumDescriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{0}
}

type ERaidStatus int32

const (
	ERaidStatus_ERAIDSTATUS_MIN    ERaidStatus = 0
	ERaidStatus_ERAIDSTATUS_NORMAL ERaidStatus = 1
	ERaidStatus_ERAIDSTATUS_PASS   ERaidStatus = 2
	ERaidStatus_ERAIDSTATUS_MAX    ERaidStatus = 3
)

// Enum value maps for ERaidStatus.
var (
	ERaidStatus_name = map[int32]string{
		0: "ERAIDSTATUS_MIN",
		1: "ERAIDSTATUS_NORMAL",
		2: "ERAIDSTATUS_PASS",
		3: "ERAIDSTATUS_MAX",
	}
	ERaidStatus_value = map[string]int32{
		"ERAIDSTATUS_MIN":    0,
		"ERAIDSTATUS_NORMAL": 1,
		"ERAIDSTATUS_PASS":   2,
		"ERAIDSTATUS_MAX":    3,
	}
)

func (x ERaidStatus) Enum() *ERaidStatus {
	p := new(ERaidStatus)
	*p = x
	return p
}

func (x ERaidStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERaidStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_RaidCmd_proto_enumTypes[1].Descriptor()
}

func (ERaidStatus) Type() protoreflect.EnumType {
	return &file_RaidCmd_proto_enumTypes[1]
}

func (x ERaidStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERaidStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERaidStatus(num)
	return nil
}

// Deprecated: Use ERaidStatus.Descriptor instead.
func (ERaidStatus) EnumDescriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{1}
}

type ERaidPuzzle int32

const (
	ERaidPuzzle_ERAIDPUZZLE_MIN   ERaidPuzzle = 0
	ERaidPuzzle_ERAIDPUZZLE_ENTER ERaidPuzzle = 1
	ERaidPuzzle_ERAIDPUZZLE_RESET ERaidPuzzle = 2
	ERaidPuzzle_ERAIDPUZZLE_MAX   ERaidPuzzle = 3
)

// Enum value maps for ERaidPuzzle.
var (
	ERaidPuzzle_name = map[int32]string{
		0: "ERAIDPUZZLE_MIN",
		1: "ERAIDPUZZLE_ENTER",
		2: "ERAIDPUZZLE_RESET",
		3: "ERAIDPUZZLE_MAX",
	}
	ERaidPuzzle_value = map[string]int32{
		"ERAIDPUZZLE_MIN":   0,
		"ERAIDPUZZLE_ENTER": 1,
		"ERAIDPUZZLE_RESET": 2,
		"ERAIDPUZZLE_MAX":   3,
	}
)

func (x ERaidPuzzle) Enum() *ERaidPuzzle {
	p := new(ERaidPuzzle)
	*p = x
	return p
}

func (x ERaidPuzzle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERaidPuzzle) Descriptor() protoreflect.EnumDescriptor {
	return file_RaidCmd_proto_enumTypes[2].Descriptor()
}

func (ERaidPuzzle) Type() protoreflect.EnumType {
	return &file_RaidCmd_proto_enumTypes[2]
}

func (x ERaidPuzzle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERaidPuzzle) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERaidPuzzle(num)
	return nil
}

// Deprecated: Use ERaidPuzzle.Descriptor instead.
func (ERaidPuzzle) EnumDescriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{2}
}

type ERaidPuzzleData int32

const (
	ERaidPuzzleData_ERAIDPUZZLEDATA_MIN            ERaidPuzzleData = 0
	ERaidPuzzleData_ERAIDPUZZLEDATA_TARGET         ERaidPuzzleData = 1
	ERaidPuzzleData_ERAIDPUZZLEDATA_DESC           ERaidPuzzleData = 2
	ERaidPuzzleData_ERAIDPUZZLEDATA_BOX            ERaidPuzzleData = 3
	ERaidPuzzleData_ERAIDPUZZLEDATA_ROOM           ERaidPuzzleData = 4
	ERaidPuzzleData_ERAIDPUZZLEDATA_MINIMAP_UNLOCK ERaidPuzzleData = 5
	ERaidPuzzleData_ERAIDPUZZLEDATA_BUFF           ERaidPuzzleData = 6
	ERaidPuzzleData_ERAIDPUZZLEDATA_LIGHT          ERaidPuzzleData = 7
	ERaidPuzzleData_ERAIDPUZZLEDATA_MAX            ERaidPuzzleData = 8
)

// Enum value maps for ERaidPuzzleData.
var (
	ERaidPuzzleData_name = map[int32]string{
		0: "ERAIDPUZZLEDATA_MIN",
		1: "ERAIDPUZZLEDATA_TARGET",
		2: "ERAIDPUZZLEDATA_DESC",
		3: "ERAIDPUZZLEDATA_BOX",
		4: "ERAIDPUZZLEDATA_ROOM",
		5: "ERAIDPUZZLEDATA_MINIMAP_UNLOCK",
		6: "ERAIDPUZZLEDATA_BUFF",
		7: "ERAIDPUZZLEDATA_LIGHT",
		8: "ERAIDPUZZLEDATA_MAX",
	}
	ERaidPuzzleData_value = map[string]int32{
		"ERAIDPUZZLEDATA_MIN":            0,
		"ERAIDPUZZLEDATA_TARGET":         1,
		"ERAIDPUZZLEDATA_DESC":           2,
		"ERAIDPUZZLEDATA_BOX":            3,
		"ERAIDPUZZLEDATA_ROOM":           4,
		"ERAIDPUZZLEDATA_MINIMAP_UNLOCK": 5,
		"ERAIDPUZZLEDATA_BUFF":           6,
		"ERAIDPUZZLEDATA_LIGHT":          7,
		"ERAIDPUZZLEDATA_MAX":            8,
	}
)

func (x ERaidPuzzleData) Enum() *ERaidPuzzleData {
	p := new(ERaidPuzzleData)
	*p = x
	return p
}

func (x ERaidPuzzleData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERaidPuzzleData) Descriptor() protoreflect.EnumDescriptor {
	return file_RaidCmd_proto_enumTypes[3].Descriptor()
}

func (ERaidPuzzleData) Type() protoreflect.EnumType {
	return &file_RaidCmd_proto_enumTypes[3]
}

func (x ERaidPuzzleData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERaidPuzzleData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERaidPuzzleData(num)
	return nil
}

// Deprecated: Use ERaidPuzzleData.Descriptor instead.
func (ERaidPuzzleData) EnumDescriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{3}
}

type ETreasureBoxResult int32

const (
	ETreasureBoxResult_ERESULT_SUCCESS ETreasureBoxResult = 0
	ETreasureBoxResult_ERESULT_OPENED  ETreasureBoxResult = 1
	ETreasureBoxResult_ERESULT_ERROR   ETreasureBoxResult = 2
)

// Enum value maps for ETreasureBoxResult.
var (
	ETreasureBoxResult_name = map[int32]string{
		0: "ERESULT_SUCCESS",
		1: "ERESULT_OPENED",
		2: "ERESULT_ERROR",
	}
	ETreasureBoxResult_value = map[string]int32{
		"ERESULT_SUCCESS": 0,
		"ERESULT_OPENED":  1,
		"ERESULT_ERROR":   2,
	}
)

func (x ETreasureBoxResult) Enum() *ETreasureBoxResult {
	p := new(ETreasureBoxResult)
	*p = x
	return p
}

func (x ETreasureBoxResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETreasureBoxResult) Descriptor() protoreflect.EnumDescriptor {
	return file_RaidCmd_proto_enumTypes[4].Descriptor()
}

func (ETreasureBoxResult) Type() protoreflect.EnumType {
	return &file_RaidCmd_proto_enumTypes[4]
}

func (x ETreasureBoxResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETreasureBoxResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETreasureBoxResult(num)
	return nil
}

// Deprecated: Use ETreasureBoxResult.Descriptor instead.
func (ETreasureBoxResult) EnumDescriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{4}
}

type RaidData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raidid     *uint32      `protobuf:"varint,1,opt,name=raidid" json:"raidid,omitempty"`
	Rewardboxs []uint32     `protobuf:"varint,2,rep,name=rewardboxs" json:"rewardboxs,omitempty"`
	Status     *ERaidStatus `protobuf:"varint,3,opt,name=status,enum=Cmd.ERaidStatus" json:"status,omitempty"`
}

func (x *RaidData) Reset() {
	*x = RaidData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidData) ProtoMessage() {}

func (x *RaidData) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidData.ProtoReflect.Descriptor instead.
func (*RaidData) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{0}
}

func (x *RaidData) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return 0
}

func (x *RaidData) GetRewardboxs() []uint32 {
	if x != nil {
		return x.Rewardboxs
	}
	return nil
}

func (x *RaidData) GetStatus() ERaidStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ERaidStatus_ERAIDSTATUS_MIN
}

type QueryRaidPuzzleListRaidCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param  *RaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=1" json:"param,omitempty"`
	Raidid *uint32    `protobuf:"varint,3,opt,name=raidid" json:"raidid,omitempty"`
	Data   *RaidData  `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

// Default values for QueryRaidPuzzleListRaidCmd fields.
const (
	Default_QueryRaidPuzzleListRaidCmd_Cmd   = Command_RAID_PROTOCMD
	Default_QueryRaidPuzzleListRaidCmd_Param = RaidParam_RAIDPARAM_PUZZLE_QUERY
)

func (x *QueryRaidPuzzleListRaidCmd) Reset() {
	*x = QueryRaidPuzzleListRaidCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRaidPuzzleListRaidCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRaidPuzzleListRaidCmd) ProtoMessage() {}

func (x *QueryRaidPuzzleListRaidCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRaidPuzzleListRaidCmd.ProtoReflect.Descriptor instead.
func (*QueryRaidPuzzleListRaidCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{1}
}

func (x *QueryRaidPuzzleListRaidCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryRaidPuzzleListRaidCmd_Cmd
}

func (x *QueryRaidPuzzleListRaidCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryRaidPuzzleListRaidCmd_Param
}

func (x *QueryRaidPuzzleListRaidCmd) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return 0
}

func (x *QueryRaidPuzzleListRaidCmd) GetData() *RaidData {
	if x != nil {
		return x.Data
	}
	return nil
}

type RaidPuzzleActionRaidCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param  *RaidParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=2" json:"param,omitempty"`
	Action *ERaidPuzzle `protobuf:"varint,3,opt,name=action,enum=Cmd.ERaidPuzzle" json:"action,omitempty"`
	Raidid *uint32      `protobuf:"varint,4,opt,name=raidid" json:"raidid,omitempty"`
}

// Default values for RaidPuzzleActionRaidCmd fields.
const (
	Default_RaidPuzzleActionRaidCmd_Cmd   = Command_RAID_PROTOCMD
	Default_RaidPuzzleActionRaidCmd_Param = RaidParam_RAIDPARAM_PUZZLE_ACTION
)

func (x *RaidPuzzleActionRaidCmd) Reset() {
	*x = RaidPuzzleActionRaidCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidPuzzleActionRaidCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidPuzzleActionRaidCmd) ProtoMessage() {}

func (x *RaidPuzzleActionRaidCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidPuzzleActionRaidCmd.ProtoReflect.Descriptor instead.
func (*RaidPuzzleActionRaidCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{2}
}

func (x *RaidPuzzleActionRaidCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RaidPuzzleActionRaidCmd_Cmd
}

func (x *RaidPuzzleActionRaidCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RaidPuzzleActionRaidCmd_Param
}

func (x *RaidPuzzleActionRaidCmd) GetAction() ERaidPuzzle {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ERaidPuzzle_ERAIDPUZZLE_MIN
}

func (x *RaidPuzzleActionRaidCmd) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return 0
}

type RaidPuzzleRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roomid *uint32 `protobuf:"varint,1,opt,name=roomid" json:"roomid,omitempty"`
	Mask   *uint32 `protobuf:"varint,2,opt,name=mask" json:"mask,omitempty"`
	Passed *bool   `protobuf:"varint,3,opt,name=passed,def=0" json:"passed,omitempty"`
}

// Default values for RaidPuzzleRoom fields.
const (
	Default_RaidPuzzleRoom_Passed = bool(false)
)

func (x *RaidPuzzleRoom) Reset() {
	*x = RaidPuzzleRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidPuzzleRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidPuzzleRoom) ProtoMessage() {}

func (x *RaidPuzzleRoom) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidPuzzleRoom.ProtoReflect.Descriptor instead.
func (*RaidPuzzleRoom) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{3}
}

func (x *RaidPuzzleRoom) GetRoomid() uint32 {
	if x != nil && x.Roomid != nil {
		return *x.Roomid
	}
	return 0
}

func (x *RaidPuzzleRoom) GetMask() uint32 {
	if x != nil && x.Mask != nil {
		return *x.Mask
	}
	return 0
}

func (x *RaidPuzzleRoom) GetPassed() bool {
	if x != nil && x.Passed != nil {
		return *x.Passed
	}
	return Default_RaidPuzzleRoom_Passed
}

type RaidPuzzleIcon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Posx *float32 `protobuf:"fixed32,1,opt,name=posx" json:"posx,omitempty"`
	Posz *float32 `protobuf:"fixed32,2,opt,name=posz" json:"posz,omitempty"`
	Icon *string  `protobuf:"bytes,3,opt,name=icon" json:"icon,omitempty"`
}

func (x *RaidPuzzleIcon) Reset() {
	*x = RaidPuzzleIcon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidPuzzleIcon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidPuzzleIcon) ProtoMessage() {}

func (x *RaidPuzzleIcon) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidPuzzleIcon.ProtoReflect.Descriptor instead.
func (*RaidPuzzleIcon) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{4}
}

func (x *RaidPuzzleIcon) GetPosx() float32 {
	if x != nil && x.Posx != nil {
		return *x.Posx
	}
	return 0
}

func (x *RaidPuzzleIcon) GetPosz() float32 {
	if x != nil && x.Posz != nil {
		return *x.Posz
	}
	return 0
}

func (x *RaidPuzzleIcon) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

type RaidPuzzleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *ERaidPuzzleData  `protobuf:"varint,1,opt,name=type,enum=Cmd.ERaidPuzzleData" json:"type,omitempty"`
	Value  *uint64           `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Data   *string           `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Values []uint64          `protobuf:"varint,4,rep,name=values" json:"values,omitempty"`
	Datas  []string          `protobuf:"bytes,5,rep,name=datas" json:"datas,omitempty"`
	Rooms  []*RaidPuzzleRoom `protobuf:"bytes,6,rep,name=rooms" json:"rooms,omitempty"`
	Icons  []*RaidPuzzleIcon `protobuf:"bytes,7,rep,name=icons" json:"icons,omitempty"`
}

func (x *RaidPuzzleData) Reset() {
	*x = RaidPuzzleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidPuzzleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidPuzzleData) ProtoMessage() {}

func (x *RaidPuzzleData) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidPuzzleData.ProtoReflect.Descriptor instead.
func (*RaidPuzzleData) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{5}
}

func (x *RaidPuzzleData) GetType() ERaidPuzzleData {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ERaidPuzzleData_ERAIDPUZZLEDATA_MIN
}

func (x *RaidPuzzleData) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *RaidPuzzleData) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

func (x *RaidPuzzleData) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *RaidPuzzleData) GetDatas() []string {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *RaidPuzzleData) GetRooms() []*RaidPuzzleRoom {
	if x != nil {
		return x.Rooms
	}
	return nil
}

func (x *RaidPuzzleData) GetIcons() []*RaidPuzzleIcon {
	if x != nil {
		return x.Icons
	}
	return nil
}

type RaidPuzzleDataUpdateRaidCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param   *RaidParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=3" json:"param,omitempty"`
	Updates []*RaidPuzzleData `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
}

// Default values for RaidPuzzleDataUpdateRaidCmd fields.
const (
	Default_RaidPuzzleDataUpdateRaidCmd_Cmd   = Command_RAID_PROTOCMD
	Default_RaidPuzzleDataUpdateRaidCmd_Param = RaidParam_RAIDPARAM_PUZZLE_UPDATE
)

func (x *RaidPuzzleDataUpdateRaidCmd) Reset() {
	*x = RaidPuzzleDataUpdateRaidCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidPuzzleDataUpdateRaidCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidPuzzleDataUpdateRaidCmd) ProtoMessage() {}

func (x *RaidPuzzleDataUpdateRaidCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidPuzzleDataUpdateRaidCmd.ProtoReflect.Descriptor instead.
func (*RaidPuzzleDataUpdateRaidCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{6}
}

func (x *RaidPuzzleDataUpdateRaidCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RaidPuzzleDataUpdateRaidCmd_Cmd
}

func (x *RaidPuzzleDataUpdateRaidCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RaidPuzzleDataUpdateRaidCmd_Param
}

func (x *RaidPuzzleDataUpdateRaidCmd) GetUpdates() []*RaidPuzzleData {
	if x != nil {
		return x.Updates
	}
	return nil
}

type PushObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid *uint64  `protobuf:"varint,3,opt,name=guid" json:"guid,omitempty"`
	X    *float32 `protobuf:"fixed32,4,opt,name=x" json:"x,omitempty"`
	Y    *float32 `protobuf:"fixed32,5,opt,name=y" json:"y,omitempty"`
	Z    *float32 `protobuf:"fixed32,6,opt,name=z" json:"z,omitempty"`
}

func (x *PushObj) Reset() {
	*x = PushObj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushObj) ProtoMessage() {}

func (x *PushObj) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushObj.ProtoReflect.Descriptor instead.
func (*PushObj) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{7}
}

func (x *PushObj) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return 0
}

func (x *PushObj) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *PushObj) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *PushObj) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type RaidPuzzlePushObjRaidCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param *RaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=4" json:"param,omitempty"`
	Objs  []*PushObj `protobuf:"bytes,3,rep,name=objs" json:"objs,omitempty"`
}

// Default values for RaidPuzzlePushObjRaidCmd fields.
const (
	Default_RaidPuzzlePushObjRaidCmd_Cmd   = Command_RAID_PROTOCMD
	Default_RaidPuzzlePushObjRaidCmd_Param = RaidParam_RAIDPARAM_PUZZLE_PUSHOBJ
)

func (x *RaidPuzzlePushObjRaidCmd) Reset() {
	*x = RaidPuzzlePushObjRaidCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidPuzzlePushObjRaidCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidPuzzlePushObjRaidCmd) ProtoMessage() {}

func (x *RaidPuzzlePushObjRaidCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidPuzzlePushObjRaidCmd.ProtoReflect.Descriptor instead.
func (*RaidPuzzlePushObjRaidCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{8}
}

func (x *RaidPuzzlePushObjRaidCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RaidPuzzlePushObjRaidCmd_Cmd
}

func (x *RaidPuzzlePushObjRaidCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RaidPuzzlePushObjRaidCmd_Param
}

func (x *RaidPuzzlePushObjRaidCmd) GetObjs() []*PushObj {
	if x != nil {
		return x.Objs
	}
	return nil
}

type RaidPuzzleRotateObjRaidCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param *RaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=5" json:"param,omitempty"`
	Guid  *uint64    `protobuf:"varint,3,opt,name=guid" json:"guid,omitempty"`
	Dir   *uint32    `protobuf:"varint,4,opt,name=dir" json:"dir,omitempty"`
}

// Default values for RaidPuzzleRotateObjRaidCmd fields.
const (
	Default_RaidPuzzleRotateObjRaidCmd_Cmd   = Command_RAID_PROTOCMD
	Default_RaidPuzzleRotateObjRaidCmd_Param = RaidParam_RAIDPARAM_PUZZLE_ROTATEOBJ
)

func (x *RaidPuzzleRotateObjRaidCmd) Reset() {
	*x = RaidPuzzleRotateObjRaidCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidPuzzleRotateObjRaidCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidPuzzleRotateObjRaidCmd) ProtoMessage() {}

func (x *RaidPuzzleRotateObjRaidCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidPuzzleRotateObjRaidCmd.ProtoReflect.Descriptor instead.
func (*RaidPuzzleRotateObjRaidCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{9}
}

func (x *RaidPuzzleRotateObjRaidCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RaidPuzzleRotateObjRaidCmd_Cmd
}

func (x *RaidPuzzleRotateObjRaidCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RaidPuzzleRotateObjRaidCmd_Param
}

func (x *RaidPuzzleRotateObjRaidCmd) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return 0
}

func (x *RaidPuzzleRotateObjRaidCmd) GetDir() uint32 {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return 0
}

type RaidPuzzleObjChangeNtfRaidCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param *RaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=6" json:"param,omitempty"`
	Guids []uint64   `protobuf:"varint,3,rep,name=guids" json:"guids,omitempty"`
}

// Default values for RaidPuzzleObjChangeNtfRaidCmd fields.
const (
	Default_RaidPuzzleObjChangeNtfRaidCmd_Cmd   = Command_RAID_PROTOCMD
	Default_RaidPuzzleObjChangeNtfRaidCmd_Param = RaidParam_RAIDPARAM_PUZZLE_OBJCHANGE_NTF
)

func (x *RaidPuzzleObjChangeNtfRaidCmd) Reset() {
	*x = RaidPuzzleObjChangeNtfRaidCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidPuzzleObjChangeNtfRaidCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidPuzzleObjChangeNtfRaidCmd) ProtoMessage() {}

func (x *RaidPuzzleObjChangeNtfRaidCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidPuzzleObjChangeNtfRaidCmd.ProtoReflect.Descriptor instead.
func (*RaidPuzzleObjChangeNtfRaidCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{10}
}

func (x *RaidPuzzleObjChangeNtfRaidCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RaidPuzzleObjChangeNtfRaidCmd_Cmd
}

func (x *RaidPuzzleObjChangeNtfRaidCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RaidPuzzleObjChangeNtfRaidCmd_Param
}

func (x *RaidPuzzleObjChangeNtfRaidCmd) GetGuids() []uint64 {
	if x != nil {
		return x.Guids
	}
	return nil
}

type RaidPuzzleElevatorRaidCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param     *RaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=7" json:"param,omitempty"`
	Objid     *uint32    `protobuf:"varint,3,opt,name=objid" json:"objid,omitempty"`
	State     *string    `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	FromIndex *uint32    `protobuf:"varint,5,opt,name=from_index,json=fromIndex" json:"from_index,omitempty"`
	ToIndex   *uint32    `protobuf:"varint,6,opt,name=to_index,json=toIndex" json:"to_index,omitempty"`
	Posx      *float32   `protobuf:"fixed32,7,opt,name=posx" json:"posx,omitempty"`
	Posz      *float32   `protobuf:"fixed32,8,opt,name=posz" json:"posz,omitempty"`
}

// Default values for RaidPuzzleElevatorRaidCmd fields.
const (
	Default_RaidPuzzleElevatorRaidCmd_Cmd   = Command_RAID_PROTOCMD
	Default_RaidPuzzleElevatorRaidCmd_Param = RaidParam_RAIDPARAM_PUZZLE_ELEVATOR
)

func (x *RaidPuzzleElevatorRaidCmd) Reset() {
	*x = RaidPuzzleElevatorRaidCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidPuzzleElevatorRaidCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidPuzzleElevatorRaidCmd) ProtoMessage() {}

func (x *RaidPuzzleElevatorRaidCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidPuzzleElevatorRaidCmd.ProtoReflect.Descriptor instead.
func (*RaidPuzzleElevatorRaidCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{11}
}

func (x *RaidPuzzleElevatorRaidCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RaidPuzzleElevatorRaidCmd_Cmd
}

func (x *RaidPuzzleElevatorRaidCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RaidPuzzleElevatorRaidCmd_Param
}

func (x *RaidPuzzleElevatorRaidCmd) GetObjid() uint32 {
	if x != nil && x.Objid != nil {
		return *x.Objid
	}
	return 0
}

func (x *RaidPuzzleElevatorRaidCmd) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *RaidPuzzleElevatorRaidCmd) GetFromIndex() uint32 {
	if x != nil && x.FromIndex != nil {
		return *x.FromIndex
	}
	return 0
}

func (x *RaidPuzzleElevatorRaidCmd) GetToIndex() uint32 {
	if x != nil && x.ToIndex != nil {
		return *x.ToIndex
	}
	return 0
}

func (x *RaidPuzzleElevatorRaidCmd) GetPosx() float32 {
	if x != nil && x.Posx != nil {
		return *x.Posx
	}
	return 0
}

func (x *RaidPuzzleElevatorRaidCmd) GetPosz() float32 {
	if x != nil && x.Posz != nil {
		return *x.Posz
	}
	return 0
}

type RaidPuzzlePosRaidCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param *RaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=8" json:"param,omitempty"`
}

// Default values for RaidPuzzlePosRaidCmd fields.
const (
	Default_RaidPuzzlePosRaidCmd_Cmd   = Command_RAID_PROTOCMD
	Default_RaidPuzzlePosRaidCmd_Param = RaidParam_RAIDPARAM_PUZZLE_GOTO_TRUEPOS
)

func (x *RaidPuzzlePosRaidCmd) Reset() {
	*x = RaidPuzzlePosRaidCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidPuzzlePosRaidCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidPuzzlePosRaidCmd) ProtoMessage() {}

func (x *RaidPuzzlePosRaidCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidPuzzlePosRaidCmd.ProtoReflect.Descriptor instead.
func (*RaidPuzzlePosRaidCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{12}
}

func (x *RaidPuzzlePosRaidCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RaidPuzzlePosRaidCmd_Cmd
}

func (x *RaidPuzzlePosRaidCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RaidPuzzlePosRaidCmd_Param
}

type RaidPuzzleRoomIconRaidCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param *RaidParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=9" json:"param,omitempty"`
	Icons []*RaidPuzzleIcon `protobuf:"bytes,3,rep,name=icons" json:"icons,omitempty"`
}

// Default values for RaidPuzzleRoomIconRaidCmd fields.
const (
	Default_RaidPuzzleRoomIconRaidCmd_Cmd   = Command_RAID_PROTOCMD
	Default_RaidPuzzleRoomIconRaidCmd_Param = RaidParam_RAIDPARAM_PUZZLE_ROOM_ICON
)

func (x *RaidPuzzleRoomIconRaidCmd) Reset() {
	*x = RaidPuzzleRoomIconRaidCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidPuzzleRoomIconRaidCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidPuzzleRoomIconRaidCmd) ProtoMessage() {}

func (x *RaidPuzzleRoomIconRaidCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidPuzzleRoomIconRaidCmd.ProtoReflect.Descriptor instead.
func (*RaidPuzzleRoomIconRaidCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{13}
}

func (x *RaidPuzzleRoomIconRaidCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RaidPuzzleRoomIconRaidCmd_Cmd
}

func (x *RaidPuzzleRoomIconRaidCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RaidPuzzleRoomIconRaidCmd_Param
}

func (x *RaidPuzzleRoomIconRaidCmd) GetIcons() []*RaidPuzzleIcon {
	if x != nil {
		return x.Icons
	}
	return nil
}

type ClientSummonCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param     *RaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=10" json:"param,omitempty"`
	UniqueIds []uint32   `protobuf:"varint,3,rep,name=unique_ids,json=uniqueIds" json:"unique_ids,omitempty"`
}

// Default values for ClientSummonCmd fields.
const (
	Default_ClientSummonCmd_Cmd   = Command_RAID_PROTOCMD
	Default_ClientSummonCmd_Param = RaidParam_RAIDPARAM_CLIENT_SUMMON
)

func (x *ClientSummonCmd) Reset() {
	*x = ClientSummonCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSummonCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSummonCmd) ProtoMessage() {}

func (x *ClientSummonCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSummonCmd.ProtoReflect.Descriptor instead.
func (*ClientSummonCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{14}
}

func (x *ClientSummonCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClientSummonCmd_Cmd
}

func (x *ClientSummonCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClientSummonCmd_Param
}

func (x *ClientSummonCmd) GetUniqueIds() []uint32 {
	if x != nil {
		return x.UniqueIds
	}
	return nil
}

type ClientNpcDieCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param    *RaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=10" json:"param,omitempty"`
	UniqueId *uint32    `protobuf:"varint,3,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
}

// Default values for ClientNpcDieCmd fields.
const (
	Default_ClientNpcDieCmd_Cmd   = Command_RAID_PROTOCMD
	Default_ClientNpcDieCmd_Param = RaidParam_RAIDPARAM_CLIENT_SUMMON
)

func (x *ClientNpcDieCmd) Reset() {
	*x = ClientNpcDieCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientNpcDieCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientNpcDieCmd) ProtoMessage() {}

func (x *ClientNpcDieCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientNpcDieCmd.ProtoReflect.Descriptor instead.
func (*ClientNpcDieCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{15}
}

func (x *ClientNpcDieCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClientNpcDieCmd_Cmd
}

func (x *ClientNpcDieCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClientNpcDieCmd_Param
}

func (x *ClientNpcDieCmd) GetUniqueId() uint32 {
	if x != nil && x.UniqueId != nil {
		return *x.UniqueId
	}
	return 0
}

type ClientTreasureBoxCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param         *RaidParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=11" json:"param,omitempty"`
	Raidid        *uint32             `protobuf:"varint,3,opt,name=raidid" json:"raidid,omitempty"`
	TreasureBoxId *uint32             `protobuf:"varint,4,opt,name=treasure_box_id,json=treasureBoxId" json:"treasure_box_id,omitempty"`
	Result        *ETreasureBoxResult `protobuf:"varint,5,opt,name=result,enum=Cmd.ETreasureBoxResult" json:"result,omitempty"`
}

// Default values for ClientTreasureBoxCmd fields.
const (
	Default_ClientTreasureBoxCmd_Cmd   = Command_RAID_PROTOCMD
	Default_ClientTreasureBoxCmd_Param = RaidParam_RAIDPARAM_CLIENT_TREASURE_BOX
)

func (x *ClientTreasureBoxCmd) Reset() {
	*x = ClientTreasureBoxCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientTreasureBoxCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientTreasureBoxCmd) ProtoMessage() {}

func (x *ClientTreasureBoxCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientTreasureBoxCmd.ProtoReflect.Descriptor instead.
func (*ClientTreasureBoxCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{16}
}

func (x *ClientTreasureBoxCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClientTreasureBoxCmd_Cmd
}

func (x *ClientTreasureBoxCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClientTreasureBoxCmd_Param
}

func (x *ClientTreasureBoxCmd) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return 0
}

func (x *ClientTreasureBoxCmd) GetTreasureBoxId() uint32 {
	if x != nil && x.TreasureBoxId != nil {
		return *x.TreasureBoxId
	}
	return 0
}

func (x *ClientTreasureBoxCmd) GetResult() ETreasureBoxResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ETreasureBoxResult_ERESULT_SUCCESS
}

type ClientSaveCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd              *Command                 `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param            *RaidParam               `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=12" json:"param,omitempty"`
	Raidid           *uint32                  `protobuf:"varint,4,opt,name=raidid" json:"raidid,omitempty"`
	RecordTag        *uint32                  `protobuf:"varint,5,opt,name=record_tag,json=recordTag" json:"record_tag,omitempty"`
	Data             *string                  `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	AchievementDatas []*ClientRaidAchievement `protobuf:"bytes,7,rep,name=achievement_datas,json=achievementDatas" json:"achievement_datas,omitempty"`
}

// Default values for ClientSaveCmd fields.
const (
	Default_ClientSaveCmd_Cmd   = Command_RAID_PROTOCMD
	Default_ClientSaveCmd_Param = RaidParam_RAIDPARAM_CLIENT_SAVE
)

func (x *ClientSaveCmd) Reset() {
	*x = ClientSaveCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSaveCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSaveCmd) ProtoMessage() {}

func (x *ClientSaveCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSaveCmd.ProtoReflect.Descriptor instead.
func (*ClientSaveCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{17}
}

func (x *ClientSaveCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClientSaveCmd_Cmd
}

func (x *ClientSaveCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClientSaveCmd_Param
}

func (x *ClientSaveCmd) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return 0
}

func (x *ClientSaveCmd) GetRecordTag() uint32 {
	if x != nil && x.RecordTag != nil {
		return *x.RecordTag
	}
	return 0
}

func (x *ClientSaveCmd) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

func (x *ClientSaveCmd) GetAchievementDatas() []*ClientRaidAchievement {
	if x != nil {
		return x.AchievementDatas
	}
	return nil
}

type ClientSaveResultCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param     *RaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=13" json:"param,omitempty"`
	Raidid    *uint32    `protobuf:"varint,3,opt,name=raidid" json:"raidid,omitempty"`
	RecordTag *uint32    `protobuf:"varint,4,opt,name=record_tag,json=recordTag" json:"record_tag,omitempty"`
	Success   *uint32    `protobuf:"varint,5,opt,name=success" json:"success,omitempty"`
}

// Default values for ClientSaveResultCmd fields.
const (
	Default_ClientSaveResultCmd_Cmd   = Command_RAID_PROTOCMD
	Default_ClientSaveResultCmd_Param = RaidParam_RAIDPARAM_CLIENT_SAVE_RESULT
)

func (x *ClientSaveResultCmd) Reset() {
	*x = ClientSaveResultCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSaveResultCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSaveResultCmd) ProtoMessage() {}

func (x *ClientSaveResultCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSaveResultCmd.ProtoReflect.Descriptor instead.
func (*ClientSaveResultCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{18}
}

func (x *ClientSaveResultCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClientSaveResultCmd_Cmd
}

func (x *ClientSaveResultCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClientSaveResultCmd_Param
}

func (x *ClientSaveResultCmd) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return 0
}

func (x *ClientSaveResultCmd) GetRecordTag() uint32 {
	if x != nil && x.RecordTag != nil {
		return *x.RecordTag
	}
	return 0
}

func (x *ClientSaveResultCmd) GetSuccess() uint32 {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return 0
}

type ClientRaidAchievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId *uint32 `protobuf:"varint,1,opt,name=achievement_id,json=achievementId" json:"achievement_id,omitempty"`
	Process       *uint32 `protobuf:"varint,2,opt,name=process" json:"process,omitempty"`
	Finished      *bool   `protobuf:"varint,3,opt,name=finished" json:"finished,omitempty"`
}

func (x *ClientRaidAchievement) Reset() {
	*x = ClientRaidAchievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRaidAchievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRaidAchievement) ProtoMessage() {}

func (x *ClientRaidAchievement) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRaidAchievement.ProtoReflect.Descriptor instead.
func (*ClientRaidAchievement) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{19}
}

func (x *ClientRaidAchievement) GetAchievementId() uint32 {
	if x != nil && x.AchievementId != nil {
		return *x.AchievementId
	}
	return 0
}

func (x *ClientRaidAchievement) GetProcess() uint32 {
	if x != nil && x.Process != nil {
		return *x.Process
	}
	return 0
}

func (x *ClientRaidAchievement) GetFinished() bool {
	if x != nil && x.Finished != nil {
		return *x.Finished
	}
	return false
}

type ClientQueryRaidCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd              *Command                 `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param            *RaidParam               `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=14" json:"param,omitempty"`
	Raidid           *uint32                  `protobuf:"varint,3,opt,name=raidid" json:"raidid,omitempty"`
	CompleteInfo     *bool                    `protobuf:"varint,4,opt,name=complete_info,json=completeInfo" json:"complete_info,omitempty"`
	AchievementDatas []*ClientRaidAchievement `protobuf:"bytes,5,rep,name=achievement_datas,json=achievementDatas" json:"achievement_datas,omitempty"`
	TreasureBoxs     []uint32                 `protobuf:"varint,6,rep,name=treasure_boxs,json=treasureBoxs" json:"treasure_boxs,omitempty"`
	RewardedPoint    []uint32                 `protobuf:"varint,7,rep,name=rewarded_point,json=rewardedPoint" json:"rewarded_point,omitempty"`
	ProcessData      *string                  `protobuf:"bytes,8,opt,name=process_data,json=processData" json:"process_data,omitempty"`
}

// Default values for ClientQueryRaidCmd fields.
const (
	Default_ClientQueryRaidCmd_Cmd   = Command_RAID_PROTOCMD
	Default_ClientQueryRaidCmd_Param = RaidParam_RAIDPARAM_CLIENT_QUERY_RAID
)

func (x *ClientQueryRaidCmd) Reset() {
	*x = ClientQueryRaidCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientQueryRaidCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientQueryRaidCmd) ProtoMessage() {}

func (x *ClientQueryRaidCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientQueryRaidCmd.ProtoReflect.Descriptor instead.
func (*ClientQueryRaidCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{20}
}

func (x *ClientQueryRaidCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClientQueryRaidCmd_Cmd
}

func (x *ClientQueryRaidCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClientQueryRaidCmd_Param
}

func (x *ClientQueryRaidCmd) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return 0
}

func (x *ClientQueryRaidCmd) GetCompleteInfo() bool {
	if x != nil && x.CompleteInfo != nil {
		return *x.CompleteInfo
	}
	return false
}

func (x *ClientQueryRaidCmd) GetAchievementDatas() []*ClientRaidAchievement {
	if x != nil {
		return x.AchievementDatas
	}
	return nil
}

func (x *ClientQueryRaidCmd) GetTreasureBoxs() []uint32 {
	if x != nil {
		return x.TreasureBoxs
	}
	return nil
}

func (x *ClientQueryRaidCmd) GetRewardedPoint() []uint32 {
	if x != nil {
		return x.RewardedPoint
	}
	return nil
}

func (x *ClientQueryRaidCmd) GetProcessData() string {
	if x != nil && x.ProcessData != nil {
		return *x.ProcessData
	}
	return ""
}

type PersonalRaidEnterCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param  *RaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=15" json:"param,omitempty"`
	Raidid *uint32    `protobuf:"varint,3,opt,name=raidid" json:"raidid,omitempty"`
}

// Default values for PersonalRaidEnterCmd fields.
const (
	Default_PersonalRaidEnterCmd_Cmd   = Command_RAID_PROTOCMD
	Default_PersonalRaidEnterCmd_Param = RaidParam_RAIDPARAM_PERSONAL_RAID_ENTER
)

func (x *PersonalRaidEnterCmd) Reset() {
	*x = PersonalRaidEnterCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalRaidEnterCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalRaidEnterCmd) ProtoMessage() {}

func (x *PersonalRaidEnterCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalRaidEnterCmd.ProtoReflect.Descriptor instead.
func (*PersonalRaidEnterCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{21}
}

func (x *PersonalRaidEnterCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PersonalRaidEnterCmd_Cmd
}

func (x *PersonalRaidEnterCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PersonalRaidEnterCmd_Param
}

func (x *PersonalRaidEnterCmd) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return 0
}

type ClientRaidAchRewardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=76" json:"cmd,omitempty"`
	Param   *RaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.RaidParam,def=16" json:"param,omitempty"`
	Raidid  *uint32    `protobuf:"varint,3,opt,name=raidid" json:"raidid,omitempty"`
	Point   *uint32    `protobuf:"varint,4,opt,name=point" json:"point,omitempty"`
	Success *bool      `protobuf:"varint,5,opt,name=success" json:"success,omitempty"`
}

// Default values for ClientRaidAchRewardCmd fields.
const (
	Default_ClientRaidAchRewardCmd_Cmd   = Command_RAID_PROTOCMD
	Default_ClientRaidAchRewardCmd_Param = RaidParam_RAIDPARAM_CLIENT_RAID_ACH_REWARD
)

func (x *ClientRaidAchRewardCmd) Reset() {
	*x = ClientRaidAchRewardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RaidCmd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRaidAchRewardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRaidAchRewardCmd) ProtoMessage() {}

func (x *ClientRaidAchRewardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_RaidCmd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRaidAchRewardCmd.ProtoReflect.Descriptor instead.
func (*ClientRaidAchRewardCmd) Descriptor() ([]byte, []int) {
	return file_RaidCmd_proto_rawDescGZIP(), []int{22}
}

func (x *ClientRaidAchRewardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClientRaidAchRewardCmd_Cmd
}

func (x *ClientRaidAchRewardCmd) GetParam() RaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClientRaidAchRewardCmd_Param
}

func (x *ClientRaidAchRewardCmd) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return 0
}

func (x *ClientRaidAchRewardCmd) GetPoint() uint32 {
	if x != nil && x.Point != nil {
		return *x.Point
	}
	return 0
}

func (x *ClientRaidAchRewardCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

var File_RaidCmd_proto protoreflect.FileDescriptor

var file_RaidCmd_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x52, 0x61, 0x69, 0x64, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x6c, 0x0a, 0x08, 0x52, 0x61, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x69, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61,
	0x69, 0x64, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x62, 0x6f,
	0x78, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x62, 0x6f, 0x78, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x61, 0x69, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc4,
	0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x69, 0x64, 0x50, 0x75, 0x7a, 0x7a,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x69, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x52, 0x41, 0x49,
	0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x69, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x69, 0x64,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc9, 0x01, 0x0a, 0x17, 0x52, 0x61, 0x69, 0x64, 0x50, 0x75,
	0x7a, 0x7a, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x69, 0x64, 0x43, 0x6d,
	0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x52, 0x41,
	0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x17, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x28, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x61, 0x69, 0x64, 0x50, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x69,
	0x64, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x69, 0x64, 0x69,
	0x64, 0x22, 0x5b, 0x0a, 0x0e, 0x52, 0x61, 0x69, 0x64, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12,
	0x1d, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x22, 0x4c,
	0x0a, 0x0e, 0x52, 0x61, 0x69, 0x64, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x70, 0x6f, 0x73, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x7a, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x7a, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xe8, 0x01, 0x0a,
	0x0e, 0x52, 0x61, 0x69, 0x64, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x61, 0x69, 0x64, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x50, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x05,
	0x69, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x52, 0x05, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x1b, 0x52, 0x61, 0x69, 0x64,
	0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x69, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x0d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x69, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x69,
	0x64, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x07, 0x50, 0x75, 0x73, 0x68, 0x4f, 0x62, 0x6a, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67,
	0x75, 0x69, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0xab, 0x01,
	0x0a, 0x18, 0x52, 0x61, 0x69, 0x64, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x50, 0x75, 0x73, 0x68,
	0x4f, 0x62, 0x6a, 0x52, 0x61, 0x69, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52,
	0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x4f,
	0x42, 0x4a, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x04, 0x6f, 0x62, 0x6a,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x75,
	0x73, 0x68, 0x4f, 0x62, 0x6a, 0x52, 0x04, 0x6f, 0x62, 0x6a, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x1a,
	0x52, 0x61, 0x69, 0x64, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x4f, 0x62, 0x6a, 0x52, 0x61, 0x69, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52,
	0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54,
	0x45, 0x4f, 0x42, 0x4a, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x69,
	0x72, 0x22, 0xaa, 0x01, 0x0a, 0x1d, 0x52, 0x61, 0x69, 0x64, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65,
	0x4f, 0x62, 0x6a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x74, 0x66, 0x52, 0x61, 0x69, 0x64,
	0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d,
	0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1e, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x55, 0x5a,
	0x5a, 0x4c, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x54,
	0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x75, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x67, 0x75, 0x69, 0x64, 0x73, 0x22, 0x99,
	0x02, 0x0a, 0x19, 0x52, 0x61, 0x69, 0x64, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x45, 0x6c, 0x65,
	0x76, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x69, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x52, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x52, 0x41, 0x49, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x45, 0x4c, 0x45,
	0x56, 0x41, 0x54, 0x4f, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x62, 0x6a, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x62, 0x6a,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x6f, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x70, 0x6f, 0x73, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x7a, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x7a, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x52,
	0x61, 0x69, 0x64, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x61, 0x69, 0x64,
	0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d,
	0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x55, 0x5a,
	0x5a, 0x4c, 0x45, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x50, 0x4f, 0x53,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xb7, 0x01, 0x0a, 0x19, 0x52, 0x61, 0x69, 0x64,
	0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x61,
	0x69, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x0d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x69, 0x64,
	0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x63, 0x6f, 0x6e,
	0x73, 0x22, 0x9e, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x6f, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x0d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x17, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49,
	0x64, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x70, 0x63,
	0x44, 0x69, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x0d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49,
	0x64, 0x22, 0xfb, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x78, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52,
	0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53,
	0x55, 0x52, 0x45, 0x5f, 0x42, 0x4f, 0x58, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x69, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x61, 0x69, 0x64, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x42, 0x6f,
	0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x8f, 0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6d,
	0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x52, 0x41,
	0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x15, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x61, 0x69, 0x64, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72,
	0x61, 0x69, 0x64, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x61, 0x69, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x10, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x22, 0xd9, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61,
	0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x69, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61,
	0x69, 0x64, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x74, 0x0a,
	0x15, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x69, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x22, 0xfb, 0x02, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x61, 0x69, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52,
	0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x41, 0x49, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x69, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61,
	0x69, 0x64, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x61, 0x69, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x10, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x62,
	0x6f, 0x78, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x42, 0x6f, 0x78, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xa2, 0x01, 0x0a, 0x14, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61,
	0x69, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52,
	0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x41, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x69, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x61, 0x69, 0x64, 0x69, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x61, 0x69, 0x64, 0x41, 0x63, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6d,
	0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x52, 0x41,
	0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x20, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x69, 0x64,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x69, 0x64, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2a, 0x8c, 0x04, 0x0a, 0x09, 0x52, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a,
	0x0a, 0x16, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x55, 0x5a, 0x5a,
	0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x41,
	0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x41, 0x49, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x4f, 0x42, 0x4a,
	0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x45, 0x4f, 0x42, 0x4a,
	0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x4e, 0x54, 0x46, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x56, 0x41,
	0x54, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x5f, 0x54,
	0x52, 0x55, 0x45, 0x50, 0x4f, 0x53, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x41, 0x49, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x4f,
	0x4d, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x41, 0x49, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x4d,
	0x4d, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55,
	0x52, 0x45, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x41, 0x49, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x41, 0x56,
	0x45, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x52, 0x41, 0x49, 0x44, 0x10, 0x0e, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x41, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x41, 0x49,
	0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x41,
	0x49, 0x44, 0x5f, 0x41, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x10, 0x2a,
	0x65, 0x0a, 0x0b, 0x45, 0x52, 0x61, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x52, 0x41, 0x49, 0x44, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x41, 0x49, 0x44, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x52, 0x41, 0x49, 0x44, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x41, 0x49, 0x44, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x65, 0x0a, 0x0b, 0x45, 0x52, 0x61, 0x69, 0x64, 0x50,
	0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x41, 0x49, 0x44, 0x50, 0x55,
	0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52,
	0x41, 0x49, 0x44, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x41, 0x49, 0x44, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x41, 0x49,
	0x44, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x85, 0x02,
	0x0a, 0x0f, 0x45, 0x52, 0x61, 0x69, 0x64, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x41, 0x49, 0x44, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52,
	0x41, 0x49, 0x44, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x41, 0x49, 0x44, 0x50,
	0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x41, 0x49, 0x44, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x41,
	0x49, 0x44, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x4f, 0x4f,
	0x4d, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52, 0x41, 0x49, 0x44, 0x50, 0x55, 0x5a, 0x5a,
	0x4c, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x41, 0x50, 0x5f, 0x55,
	0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x41, 0x49, 0x44,
	0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10,
	0x06, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x41, 0x49, 0x44, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x52, 0x41, 0x49, 0x44, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x08, 0x2a, 0x50, 0x0a, 0x12, 0x45, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
}

var (
	file_RaidCmd_proto_rawDescOnce sync.Once
	file_RaidCmd_proto_rawDescData = file_RaidCmd_proto_rawDesc
)

func file_RaidCmd_proto_rawDescGZIP() []byte {
	file_RaidCmd_proto_rawDescOnce.Do(func() {
		file_RaidCmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_RaidCmd_proto_rawDescData)
	})
	return file_RaidCmd_proto_rawDescData
}

var file_RaidCmd_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_RaidCmd_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_RaidCmd_proto_goTypes = []interface{}{
	(RaidParam)(0),                        // 0: Cmd.RaidParam
	(ERaidStatus)(0),                      // 1: Cmd.ERaidStatus
	(ERaidPuzzle)(0),                      // 2: Cmd.ERaidPuzzle
	(ERaidPuzzleData)(0),                  // 3: Cmd.ERaidPuzzleData
	(ETreasureBoxResult)(0),               // 4: Cmd.ETreasureBoxResult
	(*RaidData)(nil),                      // 5: Cmd.RaidData
	(*QueryRaidPuzzleListRaidCmd)(nil),    // 6: Cmd.QueryRaidPuzzleListRaidCmd
	(*RaidPuzzleActionRaidCmd)(nil),       // 7: Cmd.RaidPuzzleActionRaidCmd
	(*RaidPuzzleRoom)(nil),                // 8: Cmd.RaidPuzzleRoom
	(*RaidPuzzleIcon)(nil),                // 9: Cmd.RaidPuzzleIcon
	(*RaidPuzzleData)(nil),                // 10: Cmd.RaidPuzzleData
	(*RaidPuzzleDataUpdateRaidCmd)(nil),   // 11: Cmd.RaidPuzzleDataUpdateRaidCmd
	(*PushObj)(nil),                       // 12: Cmd.PushObj
	(*RaidPuzzlePushObjRaidCmd)(nil),      // 13: Cmd.RaidPuzzlePushObjRaidCmd
	(*RaidPuzzleRotateObjRaidCmd)(nil),    // 14: Cmd.RaidPuzzleRotateObjRaidCmd
	(*RaidPuzzleObjChangeNtfRaidCmd)(nil), // 15: Cmd.RaidPuzzleObjChangeNtfRaidCmd
	(*RaidPuzzleElevatorRaidCmd)(nil),     // 16: Cmd.RaidPuzzleElevatorRaidCmd
	(*RaidPuzzlePosRaidCmd)(nil),          // 17: Cmd.RaidPuzzlePosRaidCmd
	(*RaidPuzzleRoomIconRaidCmd)(nil),     // 18: Cmd.RaidPuzzleRoomIconRaidCmd
	(*ClientSummonCmd)(nil),               // 19: Cmd.ClientSummonCmd
	(*ClientNpcDieCmd)(nil),               // 20: Cmd.ClientNpcDieCmd
	(*ClientTreasureBoxCmd)(nil),          // 21: Cmd.ClientTreasureBoxCmd
	(*ClientSaveCmd)(nil),                 // 22: Cmd.ClientSaveCmd
	(*ClientSaveResultCmd)(nil),           // 23: Cmd.ClientSaveResultCmd
	(*ClientRaidAchievement)(nil),         // 24: Cmd.ClientRaidAchievement
	(*ClientQueryRaidCmd)(nil),            // 25: Cmd.ClientQueryRaidCmd
	(*PersonalRaidEnterCmd)(nil),          // 26: Cmd.PersonalRaidEnterCmd
	(*ClientRaidAchRewardCmd)(nil),        // 27: Cmd.ClientRaidAchRewardCmd
	(Command)(0),                          // 28: Cmd.Command
}
var file_RaidCmd_proto_depIdxs = []int32{
	1,  // 0: Cmd.RaidData.status:type_name -> Cmd.ERaidStatus
	28, // 1: Cmd.QueryRaidPuzzleListRaidCmd.cmd:type_name -> Cmd.Command
	0,  // 2: Cmd.QueryRaidPuzzleListRaidCmd.param:type_name -> Cmd.RaidParam
	5,  // 3: Cmd.QueryRaidPuzzleListRaidCmd.data:type_name -> Cmd.RaidData
	28, // 4: Cmd.RaidPuzzleActionRaidCmd.cmd:type_name -> Cmd.Command
	0,  // 5: Cmd.RaidPuzzleActionRaidCmd.param:type_name -> Cmd.RaidParam
	2,  // 6: Cmd.RaidPuzzleActionRaidCmd.action:type_name -> Cmd.ERaidPuzzle
	3,  // 7: Cmd.RaidPuzzleData.type:type_name -> Cmd.ERaidPuzzleData
	8,  // 8: Cmd.RaidPuzzleData.rooms:type_name -> Cmd.RaidPuzzleRoom
	9,  // 9: Cmd.RaidPuzzleData.icons:type_name -> Cmd.RaidPuzzleIcon
	28, // 10: Cmd.RaidPuzzleDataUpdateRaidCmd.cmd:type_name -> Cmd.Command
	0,  // 11: Cmd.RaidPuzzleDataUpdateRaidCmd.param:type_name -> Cmd.RaidParam
	10, // 12: Cmd.RaidPuzzleDataUpdateRaidCmd.updates:type_name -> Cmd.RaidPuzzleData
	28, // 13: Cmd.RaidPuzzlePushObjRaidCmd.cmd:type_name -> Cmd.Command
	0,  // 14: Cmd.RaidPuzzlePushObjRaidCmd.param:type_name -> Cmd.RaidParam
	12, // 15: Cmd.RaidPuzzlePushObjRaidCmd.objs:type_name -> Cmd.PushObj
	28, // 16: Cmd.RaidPuzzleRotateObjRaidCmd.cmd:type_name -> Cmd.Command
	0,  // 17: Cmd.RaidPuzzleRotateObjRaidCmd.param:type_name -> Cmd.RaidParam
	28, // 18: Cmd.RaidPuzzleObjChangeNtfRaidCmd.cmd:type_name -> Cmd.Command
	0,  // 19: Cmd.RaidPuzzleObjChangeNtfRaidCmd.param:type_name -> Cmd.RaidParam
	28, // 20: Cmd.RaidPuzzleElevatorRaidCmd.cmd:type_name -> Cmd.Command
	0,  // 21: Cmd.RaidPuzzleElevatorRaidCmd.param:type_name -> Cmd.RaidParam
	28, // 22: Cmd.RaidPuzzlePosRaidCmd.cmd:type_name -> Cmd.Command
	0,  // 23: Cmd.RaidPuzzlePosRaidCmd.param:type_name -> Cmd.RaidParam
	28, // 24: Cmd.RaidPuzzleRoomIconRaidCmd.cmd:type_name -> Cmd.Command
	0,  // 25: Cmd.RaidPuzzleRoomIconRaidCmd.param:type_name -> Cmd.RaidParam
	9,  // 26: Cmd.RaidPuzzleRoomIconRaidCmd.icons:type_name -> Cmd.RaidPuzzleIcon
	28, // 27: Cmd.ClientSummonCmd.cmd:type_name -> Cmd.Command
	0,  // 28: Cmd.ClientSummonCmd.param:type_name -> Cmd.RaidParam
	28, // 29: Cmd.ClientNpcDieCmd.cmd:type_name -> Cmd.Command
	0,  // 30: Cmd.ClientNpcDieCmd.param:type_name -> Cmd.RaidParam
	28, // 31: Cmd.ClientTreasureBoxCmd.cmd:type_name -> Cmd.Command
	0,  // 32: Cmd.ClientTreasureBoxCmd.param:type_name -> Cmd.RaidParam
	4,  // 33: Cmd.ClientTreasureBoxCmd.result:type_name -> Cmd.ETreasureBoxResult
	28, // 34: Cmd.ClientSaveCmd.cmd:type_name -> Cmd.Command
	0,  // 35: Cmd.ClientSaveCmd.param:type_name -> Cmd.RaidParam
	24, // 36: Cmd.ClientSaveCmd.achievement_datas:type_name -> Cmd.ClientRaidAchievement
	28, // 37: Cmd.ClientSaveResultCmd.cmd:type_name -> Cmd.Command
	0,  // 38: Cmd.ClientSaveResultCmd.param:type_name -> Cmd.RaidParam
	28, // 39: Cmd.ClientQueryRaidCmd.cmd:type_name -> Cmd.Command
	0,  // 40: Cmd.ClientQueryRaidCmd.param:type_name -> Cmd.RaidParam
	24, // 41: Cmd.ClientQueryRaidCmd.achievement_datas:type_name -> Cmd.ClientRaidAchievement
	28, // 42: Cmd.PersonalRaidEnterCmd.cmd:type_name -> Cmd.Command
	0,  // 43: Cmd.PersonalRaidEnterCmd.param:type_name -> Cmd.RaidParam
	28, // 44: Cmd.ClientRaidAchRewardCmd.cmd:type_name -> Cmd.Command
	0,  // 45: Cmd.ClientRaidAchRewardCmd.param:type_name -> Cmd.RaidParam
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_RaidCmd_proto_init() }
func file_RaidCmd_proto_init() {
	if File_RaidCmd_proto != nil {
		return
	}
	file_xCmd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_RaidCmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRaidPuzzleListRaidCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidPuzzleActionRaidCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidPuzzleRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidPuzzleIcon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidPuzzleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidPuzzleDataUpdateRaidCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushObj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidPuzzlePushObjRaidCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidPuzzleRotateObjRaidCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidPuzzleObjChangeNtfRaidCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidPuzzleElevatorRaidCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidPuzzlePosRaidCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidPuzzleRoomIconRaidCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSummonCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientNpcDieCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientTreasureBoxCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSaveCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSaveResultCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRaidAchievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientQueryRaidCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalRaidEnterCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_RaidCmd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRaidAchRewardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RaidCmd_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_RaidCmd_proto_goTypes,
		DependencyIndexes: file_RaidCmd_proto_depIdxs,
		EnumInfos:         file_RaidCmd_proto_enumTypes,
		MessageInfos:      file_RaidCmd_proto_msgTypes,
	}.Build()
	File_RaidCmd_proto = out.File
	file_RaidCmd_proto_rawDesc = nil
	file_RaidCmd_proto_goTypes = nil
	file_RaidCmd_proto_depIdxs = nil
}
