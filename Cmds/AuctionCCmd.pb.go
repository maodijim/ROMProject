// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: AuctionCCmd.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AuctionCParam int32

const (
	AuctionCParam_AUCTIONCPARAM_NTF_AUCTION_STATE           AuctionCParam = 1
	AuctionCParam_AUCTIONCPARAM_OPEN_AUCTION_PANEL          AuctionCParam = 2
	AuctionCParam_AUCTIONCPARAM_NTF_SIGNUP_INFO             AuctionCParam = 3
	AuctionCParam_AUCTIONCPARAM_NTF_AUCTION_INFO            AuctionCParam = 4
	AuctionCParam_AUCTIONCPARAM_UPDATE_AUCTION_INFO         AuctionCParam = 5
	AuctionCParam_AUCTIONCPARAM_REQ_AUCTION_FLOWINGWATER    AuctionCParam = 6
	AuctionCParam_AUCTIONCPARAM_UPDATE_AUCTION_FLOWINGWATER AuctionCParam = 7
	AuctionCParam_AUCTIONCPARAM_REQ_LAST_AUCTION_INFO       AuctionCParam = 8
	AuctionCParam_AUCTIONCPARAM_OFFER_PRICE                 AuctionCParam = 9
	AuctionCParam_AUCTIONCPARAM_REQ_AUCTION_RECORD          AuctionCParam = 10
	AuctionCParam_AUCTIONCPARAM_TAKE_AUCTION_RECORD         AuctionCParam = 11
	AuctionCParam_AUCTIONCPARAM_SIGNUP_ITEM                 AuctionCParam = 12
	AuctionCParam_AUCTIONCPARAM_NTF_CANTAKE_CNT             AuctionCParam = 13
	AuctionCParam_AUCTIONCPARAM_NTF_MY_SIGNUP_INFO          AuctionCParam = 14
	AuctionCParam_AUCTIONCPARAM_NTF_MY_OFFERPRICE           AuctionCParam = 15
	AuctionCParam_AUCTIONCPARAM_NTF_NEXT_AUCTION_INFO       AuctionCParam = 16
	AuctionCParam_AUCTIONCPARAM_REQ_ACUTION_INFO            AuctionCParam = 17
	AuctionCParam_AUCTIONCPARAM_NTF_CUR_AUCTION_INFO        AuctionCParam = 18
	AuctionCParam_AUCTIONCPARAM_NTF_OVERTAKE_PRICE          AuctionCParam = 19
	AuctionCParam_AUCTIONCPARAM_REQ_MY_TRADED_PRICE         AuctionCParam = 20
	AuctionCParam_AUCTIONCPARAM_NTF_MASK_PRICE              AuctionCParam = 21
	AuctionCParam_AUTIONCPARAM_AUCTION_DIALOG               AuctionCParam = 22
)

// Enum value maps for AuctionCParam.
var (
	AuctionCParam_name = map[int32]string{
		1:  "AUCTIONCPARAM_NTF_AUCTION_STATE",
		2:  "AUCTIONCPARAM_OPEN_AUCTION_PANEL",
		3:  "AUCTIONCPARAM_NTF_SIGNUP_INFO",
		4:  "AUCTIONCPARAM_NTF_AUCTION_INFO",
		5:  "AUCTIONCPARAM_UPDATE_AUCTION_INFO",
		6:  "AUCTIONCPARAM_REQ_AUCTION_FLOWINGWATER",
		7:  "AUCTIONCPARAM_UPDATE_AUCTION_FLOWINGWATER",
		8:  "AUCTIONCPARAM_REQ_LAST_AUCTION_INFO",
		9:  "AUCTIONCPARAM_OFFER_PRICE",
		10: "AUCTIONCPARAM_REQ_AUCTION_RECORD",
		11: "AUCTIONCPARAM_TAKE_AUCTION_RECORD",
		12: "AUCTIONCPARAM_SIGNUP_ITEM",
		13: "AUCTIONCPARAM_NTF_CANTAKE_CNT",
		14: "AUCTIONCPARAM_NTF_MY_SIGNUP_INFO",
		15: "AUCTIONCPARAM_NTF_MY_OFFERPRICE",
		16: "AUCTIONCPARAM_NTF_NEXT_AUCTION_INFO",
		17: "AUCTIONCPARAM_REQ_ACUTION_INFO",
		18: "AUCTIONCPARAM_NTF_CUR_AUCTION_INFO",
		19: "AUCTIONCPARAM_NTF_OVERTAKE_PRICE",
		20: "AUCTIONCPARAM_REQ_MY_TRADED_PRICE",
		21: "AUCTIONCPARAM_NTF_MASK_PRICE",
		22: "AUTIONCPARAM_AUCTION_DIALOG",
	}
	AuctionCParam_value = map[string]int32{
		"AUCTIONCPARAM_NTF_AUCTION_STATE":           1,
		"AUCTIONCPARAM_OPEN_AUCTION_PANEL":          2,
		"AUCTIONCPARAM_NTF_SIGNUP_INFO":             3,
		"AUCTIONCPARAM_NTF_AUCTION_INFO":            4,
		"AUCTIONCPARAM_UPDATE_AUCTION_INFO":         5,
		"AUCTIONCPARAM_REQ_AUCTION_FLOWINGWATER":    6,
		"AUCTIONCPARAM_UPDATE_AUCTION_FLOWINGWATER": 7,
		"AUCTIONCPARAM_REQ_LAST_AUCTION_INFO":       8,
		"AUCTIONCPARAM_OFFER_PRICE":                 9,
		"AUCTIONCPARAM_REQ_AUCTION_RECORD":          10,
		"AUCTIONCPARAM_TAKE_AUCTION_RECORD":         11,
		"AUCTIONCPARAM_SIGNUP_ITEM":                 12,
		"AUCTIONCPARAM_NTF_CANTAKE_CNT":             13,
		"AUCTIONCPARAM_NTF_MY_SIGNUP_INFO":          14,
		"AUCTIONCPARAM_NTF_MY_OFFERPRICE":           15,
		"AUCTIONCPARAM_NTF_NEXT_AUCTION_INFO":       16,
		"AUCTIONCPARAM_REQ_ACUTION_INFO":            17,
		"AUCTIONCPARAM_NTF_CUR_AUCTION_INFO":        18,
		"AUCTIONCPARAM_NTF_OVERTAKE_PRICE":          19,
		"AUCTIONCPARAM_REQ_MY_TRADED_PRICE":         20,
		"AUCTIONCPARAM_NTF_MASK_PRICE":              21,
		"AUTIONCPARAM_AUCTION_DIALOG":               22,
	}
)

func (x AuctionCParam) Enum() *AuctionCParam {
	p := new(AuctionCParam)
	*p = x
	return p
}

func (x AuctionCParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuctionCParam) Descriptor() protoreflect.EnumDescriptor {
	return file_AuctionCCmd_proto_enumTypes[0].Descriptor()
}

func (AuctionCParam) Type() protoreflect.EnumType {
	return &file_AuctionCCmd_proto_enumTypes[0]
}

func (x AuctionCParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AuctionCParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AuctionCParam(num)
	return nil
}

// Deprecated: Use AuctionCParam.Descriptor instead.
func (AuctionCParam) EnumDescriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{0}
}

type EAuctionState int32

const (
	EAuctionState_EAuctionState_Close            EAuctionState = 1
	EAuctionState_EAuctionState_SignUp           EAuctionState = 2
	EAuctionState_EAuctionState_SignUpVerify     EAuctionState = 3
	EAuctionState_EAuctionState_AuctionPublicity EAuctionState = 6
	EAuctionState_EAuctionState_Auction          EAuctionState = 4
	EAuctionState_EAuctionState_AuctionEnd       EAuctionState = 5
)

// Enum value maps for EAuctionState.
var (
	EAuctionState_name = map[int32]string{
		1: "EAuctionState_Close",
		2: "EAuctionState_SignUp",
		3: "EAuctionState_SignUpVerify",
		6: "EAuctionState_AuctionPublicity",
		4: "EAuctionState_Auction",
		5: "EAuctionState_AuctionEnd",
	}
	EAuctionState_value = map[string]int32{
		"EAuctionState_Close":            1,
		"EAuctionState_SignUp":           2,
		"EAuctionState_SignUpVerify":     3,
		"EAuctionState_AuctionPublicity": 6,
		"EAuctionState_Auction":          4,
		"EAuctionState_AuctionEnd":       5,
	}
)

func (x EAuctionState) Enum() *EAuctionState {
	p := new(EAuctionState)
	*p = x
	return p
}

func (x EAuctionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAuctionState) Descriptor() protoreflect.EnumDescriptor {
	return file_AuctionCCmd_proto_enumTypes[1].Descriptor()
}

func (EAuctionState) Type() protoreflect.EnumType {
	return &file_AuctionCCmd_proto_enumTypes[1]
}

func (x EAuctionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAuctionState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAuctionState(num)
	return nil
}

// Deprecated: Use EAuctionState.Descriptor instead.
func (EAuctionState) EnumDescriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{1}
}

type EAuctionResult int32

const (
	EAuctionResult_EAuctionResult_None      EAuctionResult = 0
	EAuctionResult_EAuctionResult_Fail      EAuctionResult = 1
	EAuctionResult_EAuctionResult_Sucess    EAuctionResult = 2
	EAuctionResult_EAuctionResult_AtAuction EAuctionResult = 3
)

// Enum value maps for EAuctionResult.
var (
	EAuctionResult_name = map[int32]string{
		0: "EAuctionResult_None",
		1: "EAuctionResult_Fail",
		2: "EAuctionResult_Sucess",
		3: "EAuctionResult_AtAuction",
	}
	EAuctionResult_value = map[string]int32{
		"EAuctionResult_None":      0,
		"EAuctionResult_Fail":      1,
		"EAuctionResult_Sucess":    2,
		"EAuctionResult_AtAuction": 3,
	}
)

func (x EAuctionResult) Enum() *EAuctionResult {
	p := new(EAuctionResult)
	*p = x
	return p
}

func (x EAuctionResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAuctionResult) Descriptor() protoreflect.EnumDescriptor {
	return file_AuctionCCmd_proto_enumTypes[2].Descriptor()
}

func (EAuctionResult) Type() protoreflect.EnumType {
	return &file_AuctionCCmd_proto_enumTypes[2]
}

func (x EAuctionResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAuctionResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAuctionResult(num)
	return nil
}

// Deprecated: Use EAuctionResult.Descriptor instead.
func (EAuctionResult) EnumDescriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{2}
}

type AuctionEvent int32

const (
	AuctionEvent_AuctionEvent_None          AuctionEvent = 0
	AuctionEvent_AuctionEvent_Start         AuctionEvent = 1
	AuctionEvent_AuctionEvent_OfferPrice    AuctionEvent = 2
	AuctionEvent_AuctionEvent_Result1       AuctionEvent = 3
	AuctionEvent_AuctionEvent_Result2       AuctionEvent = 4
	AuctionEvent_AuctionEvent_Result3       AuctionEvent = 5
	AuctionEvent_AuctionEvent_ResultSuccess AuctionEvent = 6
	AuctionEvent_AuctionEvent_ResultFail    AuctionEvent = 7
)

// Enum value maps for AuctionEvent.
var (
	AuctionEvent_name = map[int32]string{
		0: "AuctionEvent_None",
		1: "AuctionEvent_Start",
		2: "AuctionEvent_OfferPrice",
		3: "AuctionEvent_Result1",
		4: "AuctionEvent_Result2",
		5: "AuctionEvent_Result3",
		6: "AuctionEvent_ResultSuccess",
		7: "AuctionEvent_ResultFail",
	}
	AuctionEvent_value = map[string]int32{
		"AuctionEvent_None":          0,
		"AuctionEvent_Start":         1,
		"AuctionEvent_OfferPrice":    2,
		"AuctionEvent_Result1":       3,
		"AuctionEvent_Result2":       4,
		"AuctionEvent_Result3":       5,
		"AuctionEvent_ResultSuccess": 6,
		"AuctionEvent_ResultFail":    7,
	}
)

func (x AuctionEvent) Enum() *AuctionEvent {
	p := new(AuctionEvent)
	*p = x
	return p
}

func (x AuctionEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuctionEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_AuctionCCmd_proto_enumTypes[3].Descriptor()
}

func (AuctionEvent) Type() protoreflect.EnumType {
	return &file_AuctionCCmd_proto_enumTypes[3]
}

func (x AuctionEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AuctionEvent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AuctionEvent(num)
	return nil
}

// Deprecated: Use AuctionEvent.Descriptor instead.
func (AuctionEvent) EnumDescriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{3}
}

type ERecordType int32

const (
	ERecordType_ERecordType_SignUp           ERecordType = 1
	ERecordType_ERecordType_SignUpSuccess    ERecordType = 2
	ERecordType_ERecordType_SignUpFail       ERecordType = 3
	ERecordType_ERecordType_SellSucess       ERecordType = 4
	ERecordType_ERecordType_SellFail         ERecordType = 5
	ERecordType_ERecordType_SellSucessPass   ERecordType = 6
	ERecordType_ERecordType_SellSucessNoPass ERecordType = 7
	ERecordType_ERecordType_MaxOfferPrice    ERecordType = 8
	ERecordType_ERecordType_OverTakePrice    ERecordType = 9
	ERecordType_ERecordType_BuySuccess       ERecordType = 10
	ERecordType_ERecordType_BuySuccessPass   ERecordType = 11
	ERecordType_ERecordType_BuySuccessNoPass ERecordType = 12
)

// Enum value maps for ERecordType.
var (
	ERecordType_name = map[int32]string{
		1:  "ERecordType_SignUp",
		2:  "ERecordType_SignUpSuccess",
		3:  "ERecordType_SignUpFail",
		4:  "ERecordType_SellSucess",
		5:  "ERecordType_SellFail",
		6:  "ERecordType_SellSucessPass",
		7:  "ERecordType_SellSucessNoPass",
		8:  "ERecordType_MaxOfferPrice",
		9:  "ERecordType_OverTakePrice",
		10: "ERecordType_BuySuccess",
		11: "ERecordType_BuySuccessPass",
		12: "ERecordType_BuySuccessNoPass",
	}
	ERecordType_value = map[string]int32{
		"ERecordType_SignUp":           1,
		"ERecordType_SignUpSuccess":    2,
		"ERecordType_SignUpFail":       3,
		"ERecordType_SellSucess":       4,
		"ERecordType_SellFail":         5,
		"ERecordType_SellSucessPass":   6,
		"ERecordType_SellSucessNoPass": 7,
		"ERecordType_MaxOfferPrice":    8,
		"ERecordType_OverTakePrice":    9,
		"ERecordType_BuySuccess":       10,
		"ERecordType_BuySuccessPass":   11,
		"ERecordType_BuySuccessNoPass": 12,
	}
)

func (x ERecordType) Enum() *ERecordType {
	p := new(ERecordType)
	*p = x
	return p
}

func (x ERecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_AuctionCCmd_proto_enumTypes[4].Descriptor()
}

func (ERecordType) Type() protoreflect.EnumType {
	return &file_AuctionCCmd_proto_enumTypes[4]
}

func (x ERecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERecordType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERecordType(num)
	return nil
}

// Deprecated: Use ERecordType.Descriptor instead.
func (ERecordType) EnumDescriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{4}
}

type EAuctionTakeStatus int32

const (
	EAuctionTakeStatus_EAuctionTakeStatus_None    EAuctionTakeStatus = 0
	EAuctionTakeStatus_EAuctionTakeStatus_CanTake EAuctionTakeStatus = 1
	EAuctionTakeStatus_EAuctionTakeStatus_Took    EAuctionTakeStatus = 2
)

// Enum value maps for EAuctionTakeStatus.
var (
	EAuctionTakeStatus_name = map[int32]string{
		0: "EAuctionTakeStatus_None",
		1: "EAuctionTakeStatus_CanTake",
		2: "EAuctionTakeStatus_Took",
	}
	EAuctionTakeStatus_value = map[string]int32{
		"EAuctionTakeStatus_None":    0,
		"EAuctionTakeStatus_CanTake": 1,
		"EAuctionTakeStatus_Took":    2,
	}
)

func (x EAuctionTakeStatus) Enum() *EAuctionTakeStatus {
	p := new(EAuctionTakeStatus)
	*p = x
	return p
}

func (x EAuctionTakeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAuctionTakeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_AuctionCCmd_proto_enumTypes[5].Descriptor()
}

func (EAuctionTakeStatus) Type() protoreflect.EnumType {
	return &file_AuctionCCmd_proto_enumTypes[5]
}

func (x EAuctionTakeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAuctionTakeStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAuctionTakeStatus(num)
	return nil
}

// Deprecated: Use EAuctionTakeStatus.Descriptor instead.
func (EAuctionTakeStatus) EnumDescriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{5}
}

type EDialogType int32

const (
	EDialogType_EDialogType_None            EDialogType = 0
	EDialogType_EDialogType_AuctionStart    EDialogType = 1
	EDialogType_EDialogType_AuctionSuccess  EDialogType = 2
	EDialogType_EDialogType_AuctionFail     EDialogType = 3
	EDialogType_EDialogType_AuctionPubicity EDialogType = 4
)

// Enum value maps for EDialogType.
var (
	EDialogType_name = map[int32]string{
		0: "EDialogType_None",
		1: "EDialogType_AuctionStart",
		2: "EDialogType_AuctionSuccess",
		3: "EDialogType_AuctionFail",
		4: "EDialogType_AuctionPubicity",
	}
	EDialogType_value = map[string]int32{
		"EDialogType_None":            0,
		"EDialogType_AuctionStart":    1,
		"EDialogType_AuctionSuccess":  2,
		"EDialogType_AuctionFail":     3,
		"EDialogType_AuctionPubicity": 4,
	}
)

func (x EDialogType) Enum() *EDialogType {
	p := new(EDialogType)
	*p = x
	return p
}

func (x EDialogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDialogType) Descriptor() protoreflect.EnumDescriptor {
	return file_AuctionCCmd_proto_enumTypes[6].Descriptor()
}

func (EDialogType) Type() protoreflect.EnumType {
	return &file_AuctionCCmd_proto_enumTypes[6]
}

func (x EDialogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDialogType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDialogType(num)
	return nil
}

// Deprecated: Use EDialogType.Descriptor instead.
func (EDialogType) EnumDescriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{6}
}

type NtfAuctionStateCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param       *AuctionCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=1" json:"param,omitempty"`
	State       *EAuctionState `protobuf:"varint,3,opt,name=state,enum=Cmd.EAuctionState" json:"state,omitempty"`
	Batchid     *uint64        `protobuf:"varint,4,opt,name=batchid" json:"batchid,omitempty"`
	Auctiontime *uint32        `protobuf:"varint,5,opt,name=auctiontime" json:"auctiontime,omitempty"`
	Delay       *bool          `protobuf:"varint,6,opt,name=delay" json:"delay,omitempty"`
}

// Default values for NtfAuctionStateCCmd fields.
const (
	Default_NtfAuctionStateCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_NtfAuctionStateCCmd_Param = AuctionCParam_AUCTIONCPARAM_NTF_AUCTION_STATE
)

func (x *NtfAuctionStateCCmd) Reset() {
	*x = NtfAuctionStateCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfAuctionStateCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfAuctionStateCCmd) ProtoMessage() {}

func (x *NtfAuctionStateCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfAuctionStateCCmd.ProtoReflect.Descriptor instead.
func (*NtfAuctionStateCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{0}
}

func (x *NtfAuctionStateCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfAuctionStateCCmd_Cmd
}

func (x *NtfAuctionStateCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfAuctionStateCCmd_Param
}

func (x *NtfAuctionStateCCmd) GetState() EAuctionState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return EAuctionState_EAuctionState_Close
}

func (x *NtfAuctionStateCCmd) GetBatchid() uint64 {
	if x != nil && x.Batchid != nil {
		return *x.Batchid
	}
	return 0
}

func (x *NtfAuctionStateCCmd) GetAuctiontime() uint32 {
	if x != nil && x.Auctiontime != nil {
		return *x.Auctiontime
	}
	return 0
}

func (x *NtfAuctionStateCCmd) GetDelay() bool {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return false
}

type OpenAuctionPanelCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param *AuctionCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=2" json:"param,omitempty"`
	Open  *bool          `protobuf:"varint,3,opt,name=open" json:"open,omitempty"`
}

// Default values for OpenAuctionPanelCCmd fields.
const (
	Default_OpenAuctionPanelCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_OpenAuctionPanelCCmd_Param = AuctionCParam_AUCTIONCPARAM_OPEN_AUCTION_PANEL
)

func (x *OpenAuctionPanelCCmd) Reset() {
	*x = OpenAuctionPanelCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenAuctionPanelCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAuctionPanelCCmd) ProtoMessage() {}

func (x *OpenAuctionPanelCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAuctionPanelCCmd.ProtoReflect.Descriptor instead.
func (*OpenAuctionPanelCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{1}
}

func (x *OpenAuctionPanelCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_OpenAuctionPanelCCmd_Cmd
}

func (x *OpenAuctionPanelCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_OpenAuctionPanelCCmd_Param
}

func (x *OpenAuctionPanelCCmd) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return false
}

type SignUpItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid  *uint32 `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	Price   *uint32 `protobuf:"varint,2,opt,name=price" json:"price,omitempty"`
	Auction *uint32 `protobuf:"varint,3,opt,name=auction,def=0" json:"auction,omitempty"`
}

// Default values for SignUpItemInfo fields.
const (
	Default_SignUpItemInfo_Auction = uint32(0)
)

func (x *SignUpItemInfo) Reset() {
	*x = SignUpItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUpItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUpItemInfo) ProtoMessage() {}

func (x *SignUpItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUpItemInfo.ProtoReflect.Descriptor instead.
func (*SignUpItemInfo) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{2}
}

func (x *SignUpItemInfo) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *SignUpItemInfo) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *SignUpItemInfo) GetAuction() uint32 {
	if x != nil && x.Auction != nil {
		return *x.Auction
	}
	return Default_SignUpItemInfo_Auction
}

type NtfSignUpInfoCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param     *AuctionCParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=3" json:"param,omitempty"`
	Iteminfos []*SignUpItemInfo `protobuf:"bytes,3,rep,name=iteminfos" json:"iteminfos,omitempty"`
}

// Default values for NtfSignUpInfoCCmd fields.
const (
	Default_NtfSignUpInfoCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_NtfSignUpInfoCCmd_Param = AuctionCParam_AUCTIONCPARAM_NTF_SIGNUP_INFO
)

func (x *NtfSignUpInfoCCmd) Reset() {
	*x = NtfSignUpInfoCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfSignUpInfoCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfSignUpInfoCCmd) ProtoMessage() {}

func (x *NtfSignUpInfoCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfSignUpInfoCCmd.ProtoReflect.Descriptor instead.
func (*NtfSignUpInfoCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{3}
}

func (x *NtfSignUpInfoCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfSignUpInfoCCmd_Cmd
}

func (x *NtfSignUpInfoCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfSignUpInfoCCmd_Param
}

func (x *NtfSignUpInfoCCmd) GetIteminfos() []*SignUpItemInfo {
	if x != nil {
		return x.Iteminfos
	}
	return nil
}

type NtfMySignUpInfoCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param    *AuctionCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=14" json:"param,omitempty"`
	Signuped []uint32       `protobuf:"varint,4,rep,name=signuped" json:"signuped,omitempty"`
}

// Default values for NtfMySignUpInfoCCmd fields.
const (
	Default_NtfMySignUpInfoCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_NtfMySignUpInfoCCmd_Param = AuctionCParam_AUCTIONCPARAM_NTF_MY_SIGNUP_INFO
)

func (x *NtfMySignUpInfoCCmd) Reset() {
	*x = NtfMySignUpInfoCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfMySignUpInfoCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfMySignUpInfoCCmd) ProtoMessage() {}

func (x *NtfMySignUpInfoCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfMySignUpInfoCCmd.ProtoReflect.Descriptor instead.
func (*NtfMySignUpInfoCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{4}
}

func (x *NtfMySignUpInfoCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfMySignUpInfoCCmd_Cmd
}

func (x *NtfMySignUpInfoCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfMySignUpInfoCCmd_Param
}

func (x *NtfMySignUpInfoCCmd) GetSignuped() []uint32 {
	if x != nil {
		return x.Signuped
	}
	return nil
}

type SignUpItemCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param    *AuctionCParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=12" json:"param,omitempty"`
	Iteminfo *SignUpItemInfo `protobuf:"bytes,3,opt,name=iteminfo" json:"iteminfo,omitempty"`
	Ret      *bool           `protobuf:"varint,4,opt,name=ret" json:"ret,omitempty"`
	Guid     *string         `protobuf:"bytes,5,opt,name=guid" json:"guid,omitempty"`
}

// Default values for SignUpItemCCmd fields.
const (
	Default_SignUpItemCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_SignUpItemCCmd_Param = AuctionCParam_AUCTIONCPARAM_SIGNUP_ITEM
)

func (x *SignUpItemCCmd) Reset() {
	*x = SignUpItemCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUpItemCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUpItemCCmd) ProtoMessage() {}

func (x *SignUpItemCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUpItemCCmd.ProtoReflect.Descriptor instead.
func (*SignUpItemCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{5}
}

func (x *SignUpItemCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SignUpItemCCmd_Cmd
}

func (x *SignUpItemCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SignUpItemCCmd_Param
}

func (x *SignUpItemCCmd) GetIteminfo() *SignUpItemInfo {
	if x != nil {
		return x.Iteminfo
	}
	return nil
}

func (x *SignUpItemCCmd) GetRet() bool {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return false
}

func (x *SignUpItemCCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

type AuctionItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid      *uint32         `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	Price       *uint32         `protobuf:"varint,2,opt,name=price" json:"price,omitempty"`
	Seller      *string         `protobuf:"bytes,3,opt,name=seller" json:"seller,omitempty"`
	Sellerid    *uint64         `protobuf:"varint,4,opt,name=sellerid" json:"sellerid,omitempty"`
	Result      *EAuctionResult `protobuf:"varint,5,opt,name=result,enum=Cmd.EAuctionResult" json:"result,omitempty"`
	PeopleCnt   *uint32         `protobuf:"varint,6,opt,name=people_cnt,json=peopleCnt" json:"people_cnt,omitempty"`
	TradePrice  *uint64         `protobuf:"varint,7,opt,name=trade_price,json=tradePrice" json:"trade_price,omitempty"`
	AuctionTime *uint32         `protobuf:"varint,8,opt,name=auction_time,json=auctionTime" json:"auction_time,omitempty"`
	CurPrice    *uint64         `protobuf:"varint,10,opt,name=cur_price,json=curPrice" json:"cur_price,omitempty"`
	MaskPrice   *uint32         `protobuf:"varint,11,opt,name=mask_price,json=maskPrice" json:"mask_price,omitempty"`
	SignupId    *uint64         `protobuf:"varint,12,opt,name=signup_id,json=signupId" json:"signup_id,omitempty"`
	Itemdata    *ItemData       `protobuf:"bytes,13,opt,name=itemdata" json:"itemdata,omitempty"`
}

func (x *AuctionItemInfo) Reset() {
	*x = AuctionItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionItemInfo) ProtoMessage() {}

func (x *AuctionItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionItemInfo.ProtoReflect.Descriptor instead.
func (*AuctionItemInfo) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{6}
}

func (x *AuctionItemInfo) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *AuctionItemInfo) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *AuctionItemInfo) GetSeller() string {
	if x != nil && x.Seller != nil {
		return *x.Seller
	}
	return ""
}

func (x *AuctionItemInfo) GetSellerid() uint64 {
	if x != nil && x.Sellerid != nil {
		return *x.Sellerid
	}
	return 0
}

func (x *AuctionItemInfo) GetResult() EAuctionResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return EAuctionResult_EAuctionResult_None
}

func (x *AuctionItemInfo) GetPeopleCnt() uint32 {
	if x != nil && x.PeopleCnt != nil {
		return *x.PeopleCnt
	}
	return 0
}

func (x *AuctionItemInfo) GetTradePrice() uint64 {
	if x != nil && x.TradePrice != nil {
		return *x.TradePrice
	}
	return 0
}

func (x *AuctionItemInfo) GetAuctionTime() uint32 {
	if x != nil && x.AuctionTime != nil {
		return *x.AuctionTime
	}
	return 0
}

func (x *AuctionItemInfo) GetCurPrice() uint64 {
	if x != nil && x.CurPrice != nil {
		return *x.CurPrice
	}
	return 0
}

func (x *AuctionItemInfo) GetMaskPrice() uint32 {
	if x != nil && x.MaskPrice != nil {
		return *x.MaskPrice
	}
	return 0
}

func (x *AuctionItemInfo) GetSignupId() uint64 {
	if x != nil && x.SignupId != nil {
		return *x.SignupId
	}
	return 0
}

func (x *AuctionItemInfo) GetItemdata() *ItemData {
	if x != nil {
		return x.Itemdata
	}
	return nil
}

type NtfAuctionInfoCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param     *AuctionCParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=4" json:"param,omitempty"`
	Iteminfos []*AuctionItemInfo `protobuf:"bytes,3,rep,name=iteminfos" json:"iteminfos,omitempty"`
	Batchid   *uint64            `protobuf:"varint,4,opt,name=batchid" json:"batchid,omitempty"`
	Serverid  *uint32            `protobuf:"varint,5,opt,name=serverid,def=0" json:"serverid,omitempty"`
}

// Default values for NtfAuctionInfoCCmd fields.
const (
	Default_NtfAuctionInfoCCmd_Cmd      = Command_AUCTIONC_PROTOCMD
	Default_NtfAuctionInfoCCmd_Param    = AuctionCParam_AUCTIONCPARAM_NTF_AUCTION_INFO
	Default_NtfAuctionInfoCCmd_Serverid = uint32(0)
)

func (x *NtfAuctionInfoCCmd) Reset() {
	*x = NtfAuctionInfoCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfAuctionInfoCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfAuctionInfoCCmd) ProtoMessage() {}

func (x *NtfAuctionInfoCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfAuctionInfoCCmd.ProtoReflect.Descriptor instead.
func (*NtfAuctionInfoCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{7}
}

func (x *NtfAuctionInfoCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfAuctionInfoCCmd_Cmd
}

func (x *NtfAuctionInfoCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfAuctionInfoCCmd_Param
}

func (x *NtfAuctionInfoCCmd) GetIteminfos() []*AuctionItemInfo {
	if x != nil {
		return x.Iteminfos
	}
	return nil
}

func (x *NtfAuctionInfoCCmd) GetBatchid() uint64 {
	if x != nil && x.Batchid != nil {
		return *x.Batchid
	}
	return 0
}

func (x *NtfAuctionInfoCCmd) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return Default_NtfAuctionInfoCCmd_Serverid
}

type UpdateAuctionInfoCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param    *AuctionCParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=5" json:"param,omitempty"`
	Iteminfo *AuctionItemInfo `protobuf:"bytes,3,opt,name=iteminfo" json:"iteminfo,omitempty"`
	Batchid  *uint64          `protobuf:"varint,4,opt,name=batchid" json:"batchid,omitempty"`
}

// Default values for UpdateAuctionInfoCCmd fields.
const (
	Default_UpdateAuctionInfoCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_UpdateAuctionInfoCCmd_Param = AuctionCParam_AUCTIONCPARAM_UPDATE_AUCTION_INFO
)

func (x *UpdateAuctionInfoCCmd) Reset() {
	*x = UpdateAuctionInfoCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAuctionInfoCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAuctionInfoCCmd) ProtoMessage() {}

func (x *UpdateAuctionInfoCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAuctionInfoCCmd.ProtoReflect.Descriptor instead.
func (*UpdateAuctionInfoCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateAuctionInfoCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateAuctionInfoCCmd_Cmd
}

func (x *UpdateAuctionInfoCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateAuctionInfoCCmd_Param
}

func (x *UpdateAuctionInfoCCmd) GetIteminfo() *AuctionItemInfo {
	if x != nil {
		return x.Iteminfo
	}
	return nil
}

func (x *UpdateAuctionInfoCCmd) GetBatchid() uint64 {
	if x != nil && x.Batchid != nil {
		return *x.Batchid
	}
	return 0
}

type FlowingWaterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       *uint64       `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Event      *AuctionEvent `protobuf:"varint,2,opt,name=event,enum=Cmd.AuctionEvent" json:"event,omitempty"`
	Price      *uint64       `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
	PlayerName *string       `protobuf:"bytes,4,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	Zoneid     *uint32       `protobuf:"varint,5,opt,name=zoneid" json:"zoneid,omitempty"`
	MaxPrice   *bool         `protobuf:"varint,6,opt,name=max_price,json=maxPrice" json:"max_price,omitempty"`
	PlayerId   *uint64       `protobuf:"varint,7,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (x *FlowingWaterInfo) Reset() {
	*x = FlowingWaterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowingWaterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowingWaterInfo) ProtoMessage() {}

func (x *FlowingWaterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowingWaterInfo.ProtoReflect.Descriptor instead.
func (*FlowingWaterInfo) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{9}
}

func (x *FlowingWaterInfo) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *FlowingWaterInfo) GetEvent() AuctionEvent {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return AuctionEvent_AuctionEvent_None
}

func (x *FlowingWaterInfo) GetPrice() uint64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *FlowingWaterInfo) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

func (x *FlowingWaterInfo) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return 0
}

func (x *FlowingWaterInfo) GetMaxPrice() bool {
	if x != nil && x.MaxPrice != nil {
		return *x.MaxPrice
	}
	return false
}

func (x *FlowingWaterInfo) GetPlayerId() uint64 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

type ReqAuctionFlowingWaterCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param        *AuctionCParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=6" json:"param,omitempty"`
	Batchid      *uint64             `protobuf:"varint,3,opt,name=batchid" json:"batchid,omitempty"`
	Itemid       *uint32             `protobuf:"varint,4,opt,name=itemid" json:"itemid,omitempty"`
	PageIndex    *uint32             `protobuf:"varint,5,opt,name=page_index,json=pageIndex" json:"page_index,omitempty"`
	Flowingwater []*FlowingWaterInfo `protobuf:"bytes,6,rep,name=flowingwater" json:"flowingwater,omitempty"`
	SignupId     *uint64             `protobuf:"varint,7,opt,name=signup_id,json=signupId" json:"signup_id,omitempty"`
}

// Default values for ReqAuctionFlowingWaterCCmd fields.
const (
	Default_ReqAuctionFlowingWaterCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_ReqAuctionFlowingWaterCCmd_Param = AuctionCParam_AUCTIONCPARAM_REQ_AUCTION_FLOWINGWATER
)

func (x *ReqAuctionFlowingWaterCCmd) Reset() {
	*x = ReqAuctionFlowingWaterCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqAuctionFlowingWaterCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqAuctionFlowingWaterCCmd) ProtoMessage() {}

func (x *ReqAuctionFlowingWaterCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqAuctionFlowingWaterCCmd.ProtoReflect.Descriptor instead.
func (*ReqAuctionFlowingWaterCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{10}
}

func (x *ReqAuctionFlowingWaterCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqAuctionFlowingWaterCCmd_Cmd
}

func (x *ReqAuctionFlowingWaterCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqAuctionFlowingWaterCCmd_Param
}

func (x *ReqAuctionFlowingWaterCCmd) GetBatchid() uint64 {
	if x != nil && x.Batchid != nil {
		return *x.Batchid
	}
	return 0
}

func (x *ReqAuctionFlowingWaterCCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *ReqAuctionFlowingWaterCCmd) GetPageIndex() uint32 {
	if x != nil && x.PageIndex != nil {
		return *x.PageIndex
	}
	return 0
}

func (x *ReqAuctionFlowingWaterCCmd) GetFlowingwater() []*FlowingWaterInfo {
	if x != nil {
		return x.Flowingwater
	}
	return nil
}

func (x *ReqAuctionFlowingWaterCCmd) GetSignupId() uint64 {
	if x != nil && x.SignupId != nil {
		return *x.SignupId
	}
	return 0
}

type UpdateAuctionFlowingWaterCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param        *AuctionCParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=7" json:"param,omitempty"`
	Batchid      *uint64           `protobuf:"varint,3,opt,name=batchid" json:"batchid,omitempty"`
	Itemid       *uint32           `protobuf:"varint,4,opt,name=itemid" json:"itemid,omitempty"`
	Flowingwater *FlowingWaterInfo `protobuf:"bytes,5,opt,name=flowingwater" json:"flowingwater,omitempty"`
	SignupId     *uint64           `protobuf:"varint,6,opt,name=signup_id,json=signupId" json:"signup_id,omitempty"`
}

// Default values for UpdateAuctionFlowingWaterCCmd fields.
const (
	Default_UpdateAuctionFlowingWaterCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_UpdateAuctionFlowingWaterCCmd_Param = AuctionCParam_AUCTIONCPARAM_UPDATE_AUCTION_FLOWINGWATER
)

func (x *UpdateAuctionFlowingWaterCCmd) Reset() {
	*x = UpdateAuctionFlowingWaterCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAuctionFlowingWaterCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAuctionFlowingWaterCCmd) ProtoMessage() {}

func (x *UpdateAuctionFlowingWaterCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAuctionFlowingWaterCCmd.ProtoReflect.Descriptor instead.
func (*UpdateAuctionFlowingWaterCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateAuctionFlowingWaterCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateAuctionFlowingWaterCCmd_Cmd
}

func (x *UpdateAuctionFlowingWaterCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateAuctionFlowingWaterCCmd_Param
}

func (x *UpdateAuctionFlowingWaterCCmd) GetBatchid() uint64 {
	if x != nil && x.Batchid != nil {
		return *x.Batchid
	}
	return 0
}

func (x *UpdateAuctionFlowingWaterCCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *UpdateAuctionFlowingWaterCCmd) GetFlowingwater() *FlowingWaterInfo {
	if x != nil {
		return x.Flowingwater
	}
	return nil
}

func (x *UpdateAuctionFlowingWaterCCmd) GetSignupId() uint64 {
	if x != nil && x.SignupId != nil {
		return *x.SignupId
	}
	return 0
}

type ReqLastAuctionInfoCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param *AuctionCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=8" json:"param,omitempty"`
}

// Default values for ReqLastAuctionInfoCCmd fields.
const (
	Default_ReqLastAuctionInfoCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_ReqLastAuctionInfoCCmd_Param = AuctionCParam_AUCTIONCPARAM_REQ_LAST_AUCTION_INFO
)

func (x *ReqLastAuctionInfoCCmd) Reset() {
	*x = ReqLastAuctionInfoCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLastAuctionInfoCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLastAuctionInfoCCmd) ProtoMessage() {}

func (x *ReqLastAuctionInfoCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLastAuctionInfoCCmd.ProtoReflect.Descriptor instead.
func (*ReqLastAuctionInfoCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{12}
}

func (x *ReqLastAuctionInfoCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqLastAuctionInfoCCmd_Cmd
}

func (x *ReqLastAuctionInfoCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqLastAuctionInfoCCmd_Param
}

type OfferPriceCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param    *AuctionCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=9" json:"param,omitempty"`
	Itemid   *uint32        `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	MaxPrice *uint64        `protobuf:"varint,4,opt,name=max_price,json=maxPrice" json:"max_price,omitempty"`
	AddPrice *uint64        `protobuf:"varint,5,opt,name=add_price,json=addPrice" json:"add_price,omitempty"`
	Level    *uint32        `protobuf:"varint,6,opt,name=level" json:"level,omitempty"`
	SignupId *uint64        `protobuf:"varint,7,opt,name=signup_id,json=signupId" json:"signup_id,omitempty"`
}

// Default values for OfferPriceCCmd fields.
const (
	Default_OfferPriceCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_OfferPriceCCmd_Param = AuctionCParam_AUCTIONCPARAM_OFFER_PRICE
)

func (x *OfferPriceCCmd) Reset() {
	*x = OfferPriceCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferPriceCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferPriceCCmd) ProtoMessage() {}

func (x *OfferPriceCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferPriceCCmd.ProtoReflect.Descriptor instead.
func (*OfferPriceCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{13}
}

func (x *OfferPriceCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_OfferPriceCCmd_Cmd
}

func (x *OfferPriceCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_OfferPriceCCmd_Param
}

func (x *OfferPriceCCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *OfferPriceCCmd) GetMaxPrice() uint64 {
	if x != nil && x.MaxPrice != nil {
		return *x.MaxPrice
	}
	return 0
}

func (x *OfferPriceCCmd) GetAddPrice() uint64 {
	if x != nil && x.AddPrice != nil {
		return *x.AddPrice
	}
	return 0
}

func (x *OfferPriceCCmd) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *OfferPriceCCmd) GetSignupId() uint64 {
	if x != nil && x.SignupId != nil {
		return *x.SignupId
	}
	return 0
}

type AuctionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *uint64             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type       *ERecordType        `protobuf:"varint,2,opt,name=type,enum=Cmd.ERecordType" json:"type,omitempty"`
	TakeStatus *EAuctionTakeStatus `protobuf:"varint,3,opt,name=take_status,json=takeStatus,enum=Cmd.EAuctionTakeStatus" json:"take_status,omitempty"`
	Itemid     *uint32             `protobuf:"varint,4,opt,name=itemid" json:"itemid,omitempty"`
	Price      *uint64             `protobuf:"varint,5,opt,name=price" json:"price,omitempty"`
	Seller     *string             `protobuf:"bytes,6,opt,name=seller" json:"seller,omitempty"`
	Buyer      *string             `protobuf:"bytes,7,opt,name=buyer" json:"buyer,omitempty"`
	Zoneid     *uint32             `protobuf:"varint,8,opt,name=zoneid" json:"zoneid,omitempty"`
	CostMoney  *uint64             `protobuf:"varint,9,opt,name=cost_money,json=costMoney" json:"cost_money,omitempty"`
	GetMoney   *uint64             `protobuf:"varint,10,opt,name=get_money,json=getMoney" json:"get_money,omitempty"`
	Tax        *uint64             `protobuf:"varint,11,opt,name=tax" json:"tax,omitempty"`
	Batchid    *uint64             `protobuf:"varint,12,opt,name=batchid" json:"batchid,omitempty"`
	Time       *uint32             `protobuf:"varint,13,opt,name=time" json:"time,omitempty"`
	SignupId   *uint64             `protobuf:"varint,14,opt,name=signup_id,json=signupId" json:"signup_id,omitempty"`
	Itemdata   *ItemData           `protobuf:"bytes,15,opt,name=itemdata" json:"itemdata,omitempty"`
}

func (x *AuctionRecord) Reset() {
	*x = AuctionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionRecord) ProtoMessage() {}

func (x *AuctionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionRecord.ProtoReflect.Descriptor instead.
func (*AuctionRecord) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{14}
}

func (x *AuctionRecord) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AuctionRecord) GetType() ERecordType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ERecordType_ERecordType_SignUp
}

func (x *AuctionRecord) GetTakeStatus() EAuctionTakeStatus {
	if x != nil && x.TakeStatus != nil {
		return *x.TakeStatus
	}
	return EAuctionTakeStatus_EAuctionTakeStatus_None
}

func (x *AuctionRecord) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *AuctionRecord) GetPrice() uint64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *AuctionRecord) GetSeller() string {
	if x != nil && x.Seller != nil {
		return *x.Seller
	}
	return ""
}

func (x *AuctionRecord) GetBuyer() string {
	if x != nil && x.Buyer != nil {
		return *x.Buyer
	}
	return ""
}

func (x *AuctionRecord) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return 0
}

func (x *AuctionRecord) GetCostMoney() uint64 {
	if x != nil && x.CostMoney != nil {
		return *x.CostMoney
	}
	return 0
}

func (x *AuctionRecord) GetGetMoney() uint64 {
	if x != nil && x.GetMoney != nil {
		return *x.GetMoney
	}
	return 0
}

func (x *AuctionRecord) GetTax() uint64 {
	if x != nil && x.Tax != nil {
		return *x.Tax
	}
	return 0
}

func (x *AuctionRecord) GetBatchid() uint64 {
	if x != nil && x.Batchid != nil {
		return *x.Batchid
	}
	return 0
}

func (x *AuctionRecord) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *AuctionRecord) GetSignupId() uint64 {
	if x != nil && x.SignupId != nil {
		return *x.SignupId
	}
	return 0
}

func (x *AuctionRecord) GetItemdata() *ItemData {
	if x != nil {
		return x.Itemdata
	}
	return nil
}

type ReqAuctionRecordCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param        *AuctionCParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=10" json:"param,omitempty"`
	Index        *uint32          `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	TotalPageCnt *uint64          `protobuf:"varint,4,opt,name=total_page_cnt,json=totalPageCnt" json:"total_page_cnt,omitempty"`
	Records      []*AuctionRecord `protobuf:"bytes,5,rep,name=records" json:"records,omitempty"`
}

// Default values for ReqAuctionRecordCCmd fields.
const (
	Default_ReqAuctionRecordCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_ReqAuctionRecordCCmd_Param = AuctionCParam_AUCTIONCPARAM_REQ_AUCTION_RECORD
)

func (x *ReqAuctionRecordCCmd) Reset() {
	*x = ReqAuctionRecordCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqAuctionRecordCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqAuctionRecordCCmd) ProtoMessage() {}

func (x *ReqAuctionRecordCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqAuctionRecordCCmd.ProtoReflect.Descriptor instead.
func (*ReqAuctionRecordCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{15}
}

func (x *ReqAuctionRecordCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqAuctionRecordCCmd_Cmd
}

func (x *ReqAuctionRecordCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqAuctionRecordCCmd_Param
}

func (x *ReqAuctionRecordCCmd) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *ReqAuctionRecordCCmd) GetTotalPageCnt() uint64 {
	if x != nil && x.TotalPageCnt != nil {
		return *x.TotalPageCnt
	}
	return 0
}

func (x *ReqAuctionRecordCCmd) GetRecords() []*AuctionRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type TakeAuctionRecordCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param *AuctionCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=11" json:"param,omitempty"`
	Id    *uint64        `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Type  *ERecordType   `protobuf:"varint,4,opt,name=type,enum=Cmd.ERecordType" json:"type,omitempty"`
	Ret   *bool          `protobuf:"varint,5,opt,name=ret" json:"ret,omitempty"`
}

// Default values for TakeAuctionRecordCCmd fields.
const (
	Default_TakeAuctionRecordCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_TakeAuctionRecordCCmd_Param = AuctionCParam_AUCTIONCPARAM_TAKE_AUCTION_RECORD
)

func (x *TakeAuctionRecordCCmd) Reset() {
	*x = TakeAuctionRecordCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeAuctionRecordCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeAuctionRecordCCmd) ProtoMessage() {}

func (x *TakeAuctionRecordCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeAuctionRecordCCmd.ProtoReflect.Descriptor instead.
func (*TakeAuctionRecordCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{16}
}

func (x *TakeAuctionRecordCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TakeAuctionRecordCCmd_Cmd
}

func (x *TakeAuctionRecordCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TakeAuctionRecordCCmd_Param
}

func (x *TakeAuctionRecordCCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TakeAuctionRecordCCmd) GetType() ERecordType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ERecordType_ERecordType_SignUp
}

func (x *TakeAuctionRecordCCmd) GetRet() bool {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return false
}

type NtfCanTakeCntCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param *AuctionCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=13" json:"param,omitempty"`
	Count *uint32        `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

// Default values for NtfCanTakeCntCCmd fields.
const (
	Default_NtfCanTakeCntCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_NtfCanTakeCntCCmd_Param = AuctionCParam_AUCTIONCPARAM_NTF_CANTAKE_CNT
)

func (x *NtfCanTakeCntCCmd) Reset() {
	*x = NtfCanTakeCntCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfCanTakeCntCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfCanTakeCntCCmd) ProtoMessage() {}

func (x *NtfCanTakeCntCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfCanTakeCntCCmd.ProtoReflect.Descriptor instead.
func (*NtfCanTakeCntCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{17}
}

func (x *NtfCanTakeCntCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfCanTakeCntCCmd_Cmd
}

func (x *NtfCanTakeCntCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfCanTakeCntCCmd_Param
}

func (x *NtfCanTakeCntCCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type NtfMyOfferPriceCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param    *AuctionCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=15" json:"param,omitempty"`
	Batchid  *uint64        `protobuf:"varint,3,opt,name=batchid" json:"batchid,omitempty"`
	Itemid   *uint32        `protobuf:"varint,4,opt,name=itemid" json:"itemid,omitempty"`
	MyPrice  *uint64        `protobuf:"varint,5,opt,name=my_price,json=myPrice" json:"my_price,omitempty"`
	SignupId *uint64        `protobuf:"varint,6,opt,name=signup_id,json=signupId" json:"signup_id,omitempty"`
}

// Default values for NtfMyOfferPriceCCmd fields.
const (
	Default_NtfMyOfferPriceCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_NtfMyOfferPriceCCmd_Param = AuctionCParam_AUCTIONCPARAM_NTF_MY_OFFERPRICE
)

func (x *NtfMyOfferPriceCCmd) Reset() {
	*x = NtfMyOfferPriceCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfMyOfferPriceCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfMyOfferPriceCCmd) ProtoMessage() {}

func (x *NtfMyOfferPriceCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfMyOfferPriceCCmd.ProtoReflect.Descriptor instead.
func (*NtfMyOfferPriceCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{18}
}

func (x *NtfMyOfferPriceCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfMyOfferPriceCCmd_Cmd
}

func (x *NtfMyOfferPriceCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfMyOfferPriceCCmd_Param
}

func (x *NtfMyOfferPriceCCmd) GetBatchid() uint64 {
	if x != nil && x.Batchid != nil {
		return *x.Batchid
	}
	return 0
}

func (x *NtfMyOfferPriceCCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *NtfMyOfferPriceCCmd) GetMyPrice() uint64 {
	if x != nil && x.MyPrice != nil {
		return *x.MyPrice
	}
	return 0
}

func (x *NtfMyOfferPriceCCmd) GetSignupId() uint64 {
	if x != nil && x.SignupId != nil {
		return *x.SignupId
	}
	return 0
}

type NtfNextAuctionInfoCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param        *AuctionCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=16" json:"param,omitempty"`
	Batchid      *uint64        `protobuf:"varint,3,opt,name=batchid" json:"batchid,omitempty"`
	Itemid       *uint32        `protobuf:"varint,4,opt,name=itemid" json:"itemid,omitempty"`
	LastItemid   *uint32        `protobuf:"varint,5,opt,name=last_itemid,json=lastItemid" json:"last_itemid,omitempty"`
	BasePrice    *uint64        `protobuf:"varint,6,opt,name=base_price,json=basePrice" json:"base_price,omitempty"`
	StartTime    *uint32        `protobuf:"varint,7,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	SignupId     *uint64        `protobuf:"varint,8,opt,name=signup_id,json=signupId" json:"signup_id,omitempty"`
	LastSignupId *uint64        `protobuf:"varint,9,opt,name=last_signup_id,json=lastSignupId" json:"last_signup_id,omitempty"`
}

// Default values for NtfNextAuctionInfoCCmd fields.
const (
	Default_NtfNextAuctionInfoCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_NtfNextAuctionInfoCCmd_Param = AuctionCParam_AUCTIONCPARAM_NTF_NEXT_AUCTION_INFO
)

func (x *NtfNextAuctionInfoCCmd) Reset() {
	*x = NtfNextAuctionInfoCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfNextAuctionInfoCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfNextAuctionInfoCCmd) ProtoMessage() {}

func (x *NtfNextAuctionInfoCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfNextAuctionInfoCCmd.ProtoReflect.Descriptor instead.
func (*NtfNextAuctionInfoCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{19}
}

func (x *NtfNextAuctionInfoCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfNextAuctionInfoCCmd_Cmd
}

func (x *NtfNextAuctionInfoCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfNextAuctionInfoCCmd_Param
}

func (x *NtfNextAuctionInfoCCmd) GetBatchid() uint64 {
	if x != nil && x.Batchid != nil {
		return *x.Batchid
	}
	return 0
}

func (x *NtfNextAuctionInfoCCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *NtfNextAuctionInfoCCmd) GetLastItemid() uint32 {
	if x != nil && x.LastItemid != nil {
		return *x.LastItemid
	}
	return 0
}

func (x *NtfNextAuctionInfoCCmd) GetBasePrice() uint64 {
	if x != nil && x.BasePrice != nil {
		return *x.BasePrice
	}
	return 0
}

func (x *NtfNextAuctionInfoCCmd) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *NtfNextAuctionInfoCCmd) GetSignupId() uint64 {
	if x != nil && x.SignupId != nil {
		return *x.SignupId
	}
	return 0
}

func (x *NtfNextAuctionInfoCCmd) GetLastSignupId() uint64 {
	if x != nil && x.LastSignupId != nil {
		return *x.LastSignupId
	}
	return 0
}

type ReqAuctionInfoCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param *AuctionCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=17" json:"param,omitempty"`
}

// Default values for ReqAuctionInfoCCmd fields.
const (
	Default_ReqAuctionInfoCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_ReqAuctionInfoCCmd_Param = AuctionCParam_AUCTIONCPARAM_REQ_ACUTION_INFO
)

func (x *ReqAuctionInfoCCmd) Reset() {
	*x = ReqAuctionInfoCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqAuctionInfoCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqAuctionInfoCCmd) ProtoMessage() {}

func (x *ReqAuctionInfoCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqAuctionInfoCCmd.ProtoReflect.Descriptor instead.
func (*ReqAuctionInfoCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{20}
}

func (x *ReqAuctionInfoCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqAuctionInfoCCmd_Cmd
}

func (x *ReqAuctionInfoCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqAuctionInfoCCmd_Param
}

type NtfCurAuctionInfoCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param  *AuctionCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=18" json:"param,omitempty"`
	Itemid *uint32        `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
}

// Default values for NtfCurAuctionInfoCCmd fields.
const (
	Default_NtfCurAuctionInfoCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_NtfCurAuctionInfoCCmd_Param = AuctionCParam_AUCTIONCPARAM_NTF_CUR_AUCTION_INFO
)

func (x *NtfCurAuctionInfoCCmd) Reset() {
	*x = NtfCurAuctionInfoCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfCurAuctionInfoCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfCurAuctionInfoCCmd) ProtoMessage() {}

func (x *NtfCurAuctionInfoCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfCurAuctionInfoCCmd.ProtoReflect.Descriptor instead.
func (*NtfCurAuctionInfoCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{21}
}

func (x *NtfCurAuctionInfoCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfCurAuctionInfoCCmd_Cmd
}

func (x *NtfCurAuctionInfoCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfCurAuctionInfoCCmd_Param
}

func (x *NtfCurAuctionInfoCCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

type NtfOverTakePriceCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param *AuctionCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=19" json:"param,omitempty"`
}

// Default values for NtfOverTakePriceCCmd fields.
const (
	Default_NtfOverTakePriceCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_NtfOverTakePriceCCmd_Param = AuctionCParam_AUCTIONCPARAM_NTF_OVERTAKE_PRICE
)

func (x *NtfOverTakePriceCCmd) Reset() {
	*x = NtfOverTakePriceCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfOverTakePriceCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfOverTakePriceCCmd) ProtoMessage() {}

func (x *NtfOverTakePriceCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfOverTakePriceCCmd.ProtoReflect.Descriptor instead.
func (*NtfOverTakePriceCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{22}
}

func (x *NtfOverTakePriceCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfOverTakePriceCCmd_Cmd
}

func (x *NtfOverTakePriceCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfOverTakePriceCCmd_Param
}

type ReqMyTradedPriceCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param    *AuctionCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=20" json:"param,omitempty"`
	Batchid  *uint64        `protobuf:"varint,3,opt,name=batchid" json:"batchid,omitempty"`
	Itemid   *uint32        `protobuf:"varint,4,opt,name=itemid" json:"itemid,omitempty"`
	MyPrice  *uint64        `protobuf:"varint,5,opt,name=my_price,json=myPrice" json:"my_price,omitempty"`
	SignupId *uint64        `protobuf:"varint,6,opt,name=signup_id,json=signupId" json:"signup_id,omitempty"`
}

// Default values for ReqMyTradedPriceCCmd fields.
const (
	Default_ReqMyTradedPriceCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_ReqMyTradedPriceCCmd_Param = AuctionCParam_AUCTIONCPARAM_REQ_MY_TRADED_PRICE
)

func (x *ReqMyTradedPriceCCmd) Reset() {
	*x = ReqMyTradedPriceCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMyTradedPriceCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMyTradedPriceCCmd) ProtoMessage() {}

func (x *ReqMyTradedPriceCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMyTradedPriceCCmd.ProtoReflect.Descriptor instead.
func (*ReqMyTradedPriceCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{23}
}

func (x *ReqMyTradedPriceCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqMyTradedPriceCCmd_Cmd
}

func (x *ReqMyTradedPriceCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqMyTradedPriceCCmd_Param
}

func (x *ReqMyTradedPriceCCmd) GetBatchid() uint64 {
	if x != nil && x.Batchid != nil {
		return *x.Batchid
	}
	return 0
}

func (x *ReqMyTradedPriceCCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *ReqMyTradedPriceCCmd) GetMyPrice() uint64 {
	if x != nil && x.MyPrice != nil {
		return *x.MyPrice
	}
	return 0
}

func (x *ReqMyTradedPriceCCmd) GetSignupId() uint64 {
	if x != nil && x.SignupId != nil {
		return *x.SignupId
	}
	return 0
}

type NtfMaskPriceCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param     *AuctionCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=21" json:"param,omitempty"`
	Batchid   *uint64        `protobuf:"varint,3,opt,name=batchid" json:"batchid,omitempty"`
	Itemid    *uint32        `protobuf:"varint,4,opt,name=itemid" json:"itemid,omitempty"`
	MaskPrice *uint32        `protobuf:"varint,5,opt,name=mask_price,json=maskPrice" json:"mask_price,omitempty"`
	SignupId  *uint64        `protobuf:"varint,6,opt,name=signup_id,json=signupId" json:"signup_id,omitempty"`
}

// Default values for NtfMaskPriceCCmd fields.
const (
	Default_NtfMaskPriceCCmd_Cmd   = Command_AUCTIONC_PROTOCMD
	Default_NtfMaskPriceCCmd_Param = AuctionCParam_AUCTIONCPARAM_NTF_MASK_PRICE
)

func (x *NtfMaskPriceCCmd) Reset() {
	*x = NtfMaskPriceCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfMaskPriceCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfMaskPriceCCmd) ProtoMessage() {}

func (x *NtfMaskPriceCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfMaskPriceCCmd.ProtoReflect.Descriptor instead.
func (*NtfMaskPriceCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{24}
}

func (x *NtfMaskPriceCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfMaskPriceCCmd_Cmd
}

func (x *NtfMaskPriceCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfMaskPriceCCmd_Param
}

func (x *NtfMaskPriceCCmd) GetBatchid() uint64 {
	if x != nil && x.Batchid != nil {
		return *x.Batchid
	}
	return 0
}

func (x *NtfMaskPriceCCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *NtfMaskPriceCCmd) GetMaskPrice() uint32 {
	if x != nil && x.MaskPrice != nil {
		return *x.MaskPrice
	}
	return 0
}

func (x *NtfMaskPriceCCmd) GetSignupId() uint64 {
	if x != nil && x.SignupId != nil {
		return *x.SignupId
	}
	return 0
}

type AuctionDialogCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=63" json:"cmd,omitempty"`
	Param    *AuctionCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.AuctionCParam,def=22" json:"param,omitempty"`
	Type     *EDialogType   `protobuf:"varint,3,opt,name=type,enum=Cmd.EDialogType,def=0" json:"type,omitempty"`
	MsgId    *uint64        `protobuf:"varint,4,opt,name=msg_id,json=msgId" json:"msg_id,omitempty"`
	Params   []string       `protobuf:"bytes,5,rep,name=params" json:"params,omitempty"`
	Serverid *uint32        `protobuf:"varint,6,opt,name=serverid,def=0" json:"serverid,omitempty"`
}

// Default values for AuctionDialogCCmd fields.
const (
	Default_AuctionDialogCCmd_Cmd      = Command_AUCTIONC_PROTOCMD
	Default_AuctionDialogCCmd_Param    = AuctionCParam_AUTIONCPARAM_AUCTION_DIALOG
	Default_AuctionDialogCCmd_Type     = EDialogType_EDialogType_None
	Default_AuctionDialogCCmd_Serverid = uint32(0)
)

func (x *AuctionDialogCCmd) Reset() {
	*x = AuctionDialogCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_AuctionCCmd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionDialogCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionDialogCCmd) ProtoMessage() {}

func (x *AuctionDialogCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_AuctionCCmd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionDialogCCmd.ProtoReflect.Descriptor instead.
func (*AuctionDialogCCmd) Descriptor() ([]byte, []int) {
	return file_AuctionCCmd_proto_rawDescGZIP(), []int{25}
}

func (x *AuctionDialogCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AuctionDialogCCmd_Cmd
}

func (x *AuctionDialogCCmd) GetParam() AuctionCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AuctionDialogCCmd_Param
}

func (x *AuctionDialogCCmd) GetType() EDialogType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_AuctionDialogCCmd_Type
}

func (x *AuctionDialogCCmd) GetMsgId() uint64 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *AuctionDialogCCmd) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *AuctionDialogCCmd) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return Default_AuctionDialogCCmd_Serverid
}

var File_AuctionCCmd_proto protoreflect.FileDescriptor

var file_AuctionCCmd_proto_rawDesc = []byte{
	0x0a, 0x11, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x02, 0x0a, 0x13, 0x4e, 0x74, 0x66, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0xa9, 0x01, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x6e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x43, 0x43, 0x6d, 0x64,
	0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x55, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x22, 0x5b, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xc2, 0x01, 0x0a, 0x11, 0x4e, 0x74, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x11, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x41, 0x55,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x55, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x4e, 0x74, 0x66, 0x4d, 0x79, 0x53,
	0x69, 0x67, 0x6e, 0x55, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x4a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x20, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x55, 0x50,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x65, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x67,
	0x6e, 0x55, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x19, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x55, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x55, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0x87, 0x03, 0x0a, 0x0f, 0x41,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x64,
	0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x75, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xfe, 0x01, 0x0a, 0x12, 0x4e, 0x74, 0x66, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x48,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1e, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x32, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x69, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x43, 0x6d, 0x64, 0x12,
	0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x30, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x10,
	0x46, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0xca, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x74, 0x65,
	0x72, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x11, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x50, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x26, 0x41, 0x55, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x49, 0x4e, 0x47, 0x57, 0x41,
	0x54, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x0c, 0x66,
	0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x77, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x75,
	0x70, 0x49, 0x64, 0x22, 0xb1, 0x02, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x74, 0x65,
	0x72, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x11, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x53, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x29, 0x41, 0x55, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x49, 0x4e,
	0x47, 0x57, 0x41, 0x54, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12,
	0x39, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x57, 0x61, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x66, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x77, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x4c,
	0x61, 0x73, 0x74, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x43,
	0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x23, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0x8d, 0x02, 0x0a, 0x0e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x11, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x46, 0x46,
	0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x64, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e,
	0x75, 0x70, 0x49, 0x64, 0x22, 0xb7, 0x03, 0x0a, 0x0d, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x65, 0x74,
	0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x65,
	0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x22, 0xff,
	0x01, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x11, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51,
	0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x43,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x22, 0xdf, 0x01, 0x0a, 0x15, 0x54, 0x61, 0x6b, 0x65, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x21, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x54, 0x41, 0x4b, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x4e, 0x74, 0x66, 0x43, 0x61, 0x6e, 0x54, 0x61, 0x6b,
	0x65, 0x43, 0x6e, 0x74, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d,
	0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54,
	0x46, 0x5f, 0x43, 0x41, 0x4e, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x43, 0x4e, 0x54, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x13, 0x4e,
	0x74, 0x66, 0x4d, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x43,
	0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x4d, 0x59, 0x5f, 0x4f,
	0x46, 0x46, 0x45, 0x52, 0x50, 0x52, 0x49, 0x43, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x49, 0x64, 0x22, 0xee, 0x02, 0x0a, 0x16, 0x4e,
	0x74, 0x66, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x11, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x23, 0x41, 0x55, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x4e,
	0x45, 0x58, 0x54, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x69, 0x67,
	0x6e, 0x75, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x12,
	0x52, 0x65, 0x71, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x43,
	0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x41, 0x43, 0x55, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22,
	0xb0, 0x01, 0x0a, 0x15, 0x4e, 0x74, 0x66, 0x43, 0x75, 0x72, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4c, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x22, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e,
	0x54, 0x46, 0x5f, 0x43, 0x55, 0x52, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x69, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x14, 0x4e, 0x74, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x61,
	0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4a,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x20, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x80, 0x02, 0x0a, 0x14, 0x52,
	0x65, 0x71, 0x4d, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43,
	0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11,
	0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x41, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4d, 0x59, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x49, 0x64, 0x22, 0xfb, 0x01,
	0x0a, 0x10, 0x4e, 0x74, 0x66, 0x4d, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x43,
	0x6d, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x4d, 0x41, 0x53, 0x4b,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x49, 0x64, 0x22, 0x93, 0x02, 0x0a, 0x11,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x43, 0x6d,
	0x64, 0x12, 0x31, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x11, 0x41, 0x55,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x41, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49,
	0x41, 0x4c, 0x4f, 0x47, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x36, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69,
	0x64, 0x2a, 0xca, 0x06, 0x0a, 0x0d, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x21,
	0x0a, 0x1d, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4e, 0x54, 0x46, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x03, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26,
	0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45,
	0x51, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x49, 0x4e,
	0x47, 0x57, 0x41, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x49, 0x4e, 0x47,
	0x57, 0x41, 0x54, 0x45, 0x52, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x08,
	0x12, 0x1d, 0x0a, 0x19, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x09, 0x12,
	0x24, 0x0a, 0x20, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x52, 0x45, 0x51, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x10, 0x0a, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19,
	0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x55, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46,
	0x5f, 0x43, 0x41, 0x4e, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x0d, 0x12, 0x24,
	0x0a, 0x20, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4e, 0x54, 0x46, 0x5f, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x55, 0x50, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x4d, 0x59, 0x5f, 0x4f, 0x46, 0x46,
	0x45, 0x52, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x0f, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x4e,
	0x45, 0x58, 0x54, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x41, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x11, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x43, 0x55, 0x52, 0x5f,
	0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x12, 0x12, 0x24,
	0x0a, 0x20, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4e, 0x54, 0x46, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x10, 0x13, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4d, 0x59, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x14, 0x12, 0x20, 0x0a, 0x1c, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46,
	0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x15, 0x12, 0x1f, 0x0a,
	0x1b, 0x41, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x55,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x10, 0x16, 0x2a, 0xbf,
	0x01, 0x0a, 0x0d, 0x45, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x10, 0x05,
	0x2a, 0x7b, 0x0a, 0x0e, 0x45, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x46, 0x61,
	0x69, 0x6c, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x41, 0x74, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x2a, 0xe5, 0x01,
	0x0a, 0x0c, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15,
	0x0a, 0x11, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x31, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x10, 0x04, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x33, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46,
	0x61, 0x69, 0x6c, 0x10, 0x07, 0x2a, 0xf4, 0x02, 0x0a, 0x0b, 0x45, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x69, 0x67,
	0x6e, 0x55, 0x70, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x69, 0x67, 0x6e,
	0x55, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x75, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x6c, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x05, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65,
	0x6c, 0x6c, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x73, 0x73, 0x10, 0x06, 0x12, 0x20,
	0x0a, 0x1c, 0x45, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65,
	0x6c, 0x6c, 0x53, 0x75, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x10, 0x07,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4d, 0x61, 0x78, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x08, 0x12,
	0x1d, 0x0a, 0x19, 0x45, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f,
	0x76, 0x65, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x09, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x75,
	0x79, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x75, 0x79, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x73, 0x73, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x75, 0x79, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x10, 0x0c, 0x2a, 0x6e, 0x0a, 0x12,
	0x45, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x61, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x6b, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x54, 0x6f, 0x6f, 0x6b, 0x10, 0x02, 0x2a, 0x9f, 0x01, 0x0a,
	0x0b, 0x45, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x03, 0x12, 0x1f, 0x0a,
	0x1b, 0x45, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x69, 0x63, 0x69, 0x74, 0x79, 0x10, 0x04,
}

var (
	file_AuctionCCmd_proto_rawDescOnce sync.Once
	file_AuctionCCmd_proto_rawDescData = file_AuctionCCmd_proto_rawDesc
)

func file_AuctionCCmd_proto_rawDescGZIP() []byte {
	file_AuctionCCmd_proto_rawDescOnce.Do(func() {
		file_AuctionCCmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_AuctionCCmd_proto_rawDescData)
	})
	return file_AuctionCCmd_proto_rawDescData
}

var file_AuctionCCmd_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_AuctionCCmd_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_AuctionCCmd_proto_goTypes = []interface{}{
	(AuctionCParam)(0),                    // 0: Cmd.AuctionCParam
	(EAuctionState)(0),                    // 1: Cmd.EAuctionState
	(EAuctionResult)(0),                   // 2: Cmd.EAuctionResult
	(AuctionEvent)(0),                     // 3: Cmd.AuctionEvent
	(ERecordType)(0),                      // 4: Cmd.ERecordType
	(EAuctionTakeStatus)(0),               // 5: Cmd.EAuctionTakeStatus
	(EDialogType)(0),                      // 6: Cmd.EDialogType
	(*NtfAuctionStateCCmd)(nil),           // 7: Cmd.NtfAuctionStateCCmd
	(*OpenAuctionPanelCCmd)(nil),          // 8: Cmd.OpenAuctionPanelCCmd
	(*SignUpItemInfo)(nil),                // 9: Cmd.SignUpItemInfo
	(*NtfSignUpInfoCCmd)(nil),             // 10: Cmd.NtfSignUpInfoCCmd
	(*NtfMySignUpInfoCCmd)(nil),           // 11: Cmd.NtfMySignUpInfoCCmd
	(*SignUpItemCCmd)(nil),                // 12: Cmd.SignUpItemCCmd
	(*AuctionItemInfo)(nil),               // 13: Cmd.AuctionItemInfo
	(*NtfAuctionInfoCCmd)(nil),            // 14: Cmd.NtfAuctionInfoCCmd
	(*UpdateAuctionInfoCCmd)(nil),         // 15: Cmd.UpdateAuctionInfoCCmd
	(*FlowingWaterInfo)(nil),              // 16: Cmd.FlowingWaterInfo
	(*ReqAuctionFlowingWaterCCmd)(nil),    // 17: Cmd.ReqAuctionFlowingWaterCCmd
	(*UpdateAuctionFlowingWaterCCmd)(nil), // 18: Cmd.UpdateAuctionFlowingWaterCCmd
	(*ReqLastAuctionInfoCCmd)(nil),        // 19: Cmd.ReqLastAuctionInfoCCmd
	(*OfferPriceCCmd)(nil),                // 20: Cmd.OfferPriceCCmd
	(*AuctionRecord)(nil),                 // 21: Cmd.AuctionRecord
	(*ReqAuctionRecordCCmd)(nil),          // 22: Cmd.ReqAuctionRecordCCmd
	(*TakeAuctionRecordCCmd)(nil),         // 23: Cmd.TakeAuctionRecordCCmd
	(*NtfCanTakeCntCCmd)(nil),             // 24: Cmd.NtfCanTakeCntCCmd
	(*NtfMyOfferPriceCCmd)(nil),           // 25: Cmd.NtfMyOfferPriceCCmd
	(*NtfNextAuctionInfoCCmd)(nil),        // 26: Cmd.NtfNextAuctionInfoCCmd
	(*ReqAuctionInfoCCmd)(nil),            // 27: Cmd.ReqAuctionInfoCCmd
	(*NtfCurAuctionInfoCCmd)(nil),         // 28: Cmd.NtfCurAuctionInfoCCmd
	(*NtfOverTakePriceCCmd)(nil),          // 29: Cmd.NtfOverTakePriceCCmd
	(*ReqMyTradedPriceCCmd)(nil),          // 30: Cmd.ReqMyTradedPriceCCmd
	(*NtfMaskPriceCCmd)(nil),              // 31: Cmd.NtfMaskPriceCCmd
	(*AuctionDialogCCmd)(nil),             // 32: Cmd.AuctionDialogCCmd
	(Command)(0),                          // 33: Cmd.Command
	(*ItemData)(nil),                      // 34: Cmd.ItemData
}
var file_AuctionCCmd_proto_depIdxs = []int32{
	33, // 0: Cmd.NtfAuctionStateCCmd.cmd:type_name -> Cmd.Command
	0,  // 1: Cmd.NtfAuctionStateCCmd.param:type_name -> Cmd.AuctionCParam
	1,  // 2: Cmd.NtfAuctionStateCCmd.state:type_name -> Cmd.EAuctionState
	33, // 3: Cmd.OpenAuctionPanelCCmd.cmd:type_name -> Cmd.Command
	0,  // 4: Cmd.OpenAuctionPanelCCmd.param:type_name -> Cmd.AuctionCParam
	33, // 5: Cmd.NtfSignUpInfoCCmd.cmd:type_name -> Cmd.Command
	0,  // 6: Cmd.NtfSignUpInfoCCmd.param:type_name -> Cmd.AuctionCParam
	9,  // 7: Cmd.NtfSignUpInfoCCmd.iteminfos:type_name -> Cmd.SignUpItemInfo
	33, // 8: Cmd.NtfMySignUpInfoCCmd.cmd:type_name -> Cmd.Command
	0,  // 9: Cmd.NtfMySignUpInfoCCmd.param:type_name -> Cmd.AuctionCParam
	33, // 10: Cmd.SignUpItemCCmd.cmd:type_name -> Cmd.Command
	0,  // 11: Cmd.SignUpItemCCmd.param:type_name -> Cmd.AuctionCParam
	9,  // 12: Cmd.SignUpItemCCmd.iteminfo:type_name -> Cmd.SignUpItemInfo
	2,  // 13: Cmd.AuctionItemInfo.result:type_name -> Cmd.EAuctionResult
	34, // 14: Cmd.AuctionItemInfo.itemdata:type_name -> Cmd.ItemData
	33, // 15: Cmd.NtfAuctionInfoCCmd.cmd:type_name -> Cmd.Command
	0,  // 16: Cmd.NtfAuctionInfoCCmd.param:type_name -> Cmd.AuctionCParam
	13, // 17: Cmd.NtfAuctionInfoCCmd.iteminfos:type_name -> Cmd.AuctionItemInfo
	33, // 18: Cmd.UpdateAuctionInfoCCmd.cmd:type_name -> Cmd.Command
	0,  // 19: Cmd.UpdateAuctionInfoCCmd.param:type_name -> Cmd.AuctionCParam
	13, // 20: Cmd.UpdateAuctionInfoCCmd.iteminfo:type_name -> Cmd.AuctionItemInfo
	3,  // 21: Cmd.FlowingWaterInfo.event:type_name -> Cmd.AuctionEvent
	33, // 22: Cmd.ReqAuctionFlowingWaterCCmd.cmd:type_name -> Cmd.Command
	0,  // 23: Cmd.ReqAuctionFlowingWaterCCmd.param:type_name -> Cmd.AuctionCParam
	16, // 24: Cmd.ReqAuctionFlowingWaterCCmd.flowingwater:type_name -> Cmd.FlowingWaterInfo
	33, // 25: Cmd.UpdateAuctionFlowingWaterCCmd.cmd:type_name -> Cmd.Command
	0,  // 26: Cmd.UpdateAuctionFlowingWaterCCmd.param:type_name -> Cmd.AuctionCParam
	16, // 27: Cmd.UpdateAuctionFlowingWaterCCmd.flowingwater:type_name -> Cmd.FlowingWaterInfo
	33, // 28: Cmd.ReqLastAuctionInfoCCmd.cmd:type_name -> Cmd.Command
	0,  // 29: Cmd.ReqLastAuctionInfoCCmd.param:type_name -> Cmd.AuctionCParam
	33, // 30: Cmd.OfferPriceCCmd.cmd:type_name -> Cmd.Command
	0,  // 31: Cmd.OfferPriceCCmd.param:type_name -> Cmd.AuctionCParam
	4,  // 32: Cmd.AuctionRecord.type:type_name -> Cmd.ERecordType
	5,  // 33: Cmd.AuctionRecord.take_status:type_name -> Cmd.EAuctionTakeStatus
	34, // 34: Cmd.AuctionRecord.itemdata:type_name -> Cmd.ItemData
	33, // 35: Cmd.ReqAuctionRecordCCmd.cmd:type_name -> Cmd.Command
	0,  // 36: Cmd.ReqAuctionRecordCCmd.param:type_name -> Cmd.AuctionCParam
	21, // 37: Cmd.ReqAuctionRecordCCmd.records:type_name -> Cmd.AuctionRecord
	33, // 38: Cmd.TakeAuctionRecordCCmd.cmd:type_name -> Cmd.Command
	0,  // 39: Cmd.TakeAuctionRecordCCmd.param:type_name -> Cmd.AuctionCParam
	4,  // 40: Cmd.TakeAuctionRecordCCmd.type:type_name -> Cmd.ERecordType
	33, // 41: Cmd.NtfCanTakeCntCCmd.cmd:type_name -> Cmd.Command
	0,  // 42: Cmd.NtfCanTakeCntCCmd.param:type_name -> Cmd.AuctionCParam
	33, // 43: Cmd.NtfMyOfferPriceCCmd.cmd:type_name -> Cmd.Command
	0,  // 44: Cmd.NtfMyOfferPriceCCmd.param:type_name -> Cmd.AuctionCParam
	33, // 45: Cmd.NtfNextAuctionInfoCCmd.cmd:type_name -> Cmd.Command
	0,  // 46: Cmd.NtfNextAuctionInfoCCmd.param:type_name -> Cmd.AuctionCParam
	33, // 47: Cmd.ReqAuctionInfoCCmd.cmd:type_name -> Cmd.Command
	0,  // 48: Cmd.ReqAuctionInfoCCmd.param:type_name -> Cmd.AuctionCParam
	33, // 49: Cmd.NtfCurAuctionInfoCCmd.cmd:type_name -> Cmd.Command
	0,  // 50: Cmd.NtfCurAuctionInfoCCmd.param:type_name -> Cmd.AuctionCParam
	33, // 51: Cmd.NtfOverTakePriceCCmd.cmd:type_name -> Cmd.Command
	0,  // 52: Cmd.NtfOverTakePriceCCmd.param:type_name -> Cmd.AuctionCParam
	33, // 53: Cmd.ReqMyTradedPriceCCmd.cmd:type_name -> Cmd.Command
	0,  // 54: Cmd.ReqMyTradedPriceCCmd.param:type_name -> Cmd.AuctionCParam
	33, // 55: Cmd.NtfMaskPriceCCmd.cmd:type_name -> Cmd.Command
	0,  // 56: Cmd.NtfMaskPriceCCmd.param:type_name -> Cmd.AuctionCParam
	33, // 57: Cmd.AuctionDialogCCmd.cmd:type_name -> Cmd.Command
	0,  // 58: Cmd.AuctionDialogCCmd.param:type_name -> Cmd.AuctionCParam
	6,  // 59: Cmd.AuctionDialogCCmd.type:type_name -> Cmd.EDialogType
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_AuctionCCmd_proto_init() }
func file_AuctionCCmd_proto_init() {
	if File_AuctionCCmd_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_SceneItem_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_AuctionCCmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfAuctionStateCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenAuctionPanelCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignUpItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfSignUpInfoCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfMySignUpInfoCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignUpItemCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfAuctionInfoCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAuctionInfoCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowingWaterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqAuctionFlowingWaterCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAuctionFlowingWaterCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLastAuctionInfoCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferPriceCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqAuctionRecordCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeAuctionRecordCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfCanTakeCntCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfMyOfferPriceCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfNextAuctionInfoCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqAuctionInfoCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfCurAuctionInfoCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfOverTakePriceCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMyTradedPriceCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfMaskPriceCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_AuctionCCmd_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionDialogCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_AuctionCCmd_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_AuctionCCmd_proto_goTypes,
		DependencyIndexes: file_AuctionCCmd_proto_depIdxs,
		EnumInfos:         file_AuctionCCmd_proto_enumTypes,
		MessageInfos:      file_AuctionCCmd_proto_msgTypes,
	}.Build()
	File_AuctionCCmd_proto = out.File
	file_AuctionCCmd_proto_rawDesc = nil
	file_AuctionCCmd_proto_goTypes = nil
	file_AuctionCCmd_proto_depIdxs = nil
}
