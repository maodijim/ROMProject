// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: SessionTeam.proto

package Cmd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TeamParam int32

const (
	TeamParam_TEAMPARAM_TEAMLIST               TeamParam = 1
	TeamParam_TEAMPARAM_DATAUPDATE             TeamParam = 2
	TeamParam_TEAMPARAM_MEMBERUPDATE           TeamParam = 3
	TeamParam_TEAMPARAM_APPLYUPDATE            TeamParam = 4
	TeamParam_TEAMPARAM_CREATETEAM             TeamParam = 5
	TeamParam_TEAMPARAM_INVITEMEMBER           TeamParam = 6
	TeamParam_TEAMPARAM_PROCESSINVITE          TeamParam = 7
	TeamParam_TEAMPARAM_MEMBERAPPLY            TeamParam = 8
	TeamParam_TEAMPARAM_PROCESSAPPLY           TeamParam = 9
	TeamParam_TEAMPARAM_KICKMEMBER             TeamParam = 10
	TeamParam_TEAMPARAM_EXCHANGELEADER         TeamParam = 11
	TeamParam_TEAMPARAM_EXITTEAM               TeamParam = 12
	TeamParam_TEAMPARAM_ENTERTEAM              TeamParam = 13
	TeamParam_TEAMPARAM_MEMBERPOSUPDATE        TeamParam = 14
	TeamParam_TEAMPARAM_MEMBERDATAUPDATE       TeamParam = 15
	TeamParam_TEAMPARAM_LOCKTARGET             TeamParam = 16
	TeamParam_TEAMPARAM_SUMMON                 TeamParam = 17
	TeamParam_TEAMPARAM_CLEARAPPLYLIST         TeamParam = 18
	TeamParam_TEAMPARAM_QUICKENTER             TeamParam = 19
	TeamParam_TEAMPARAM_SETOPTION              TeamParam = 20
	TeamParam_TEAMPARAM_QUERYUSERTEAMINFO      TeamParam = 21
	TeamParam_TEAMPARAM_SETMEMBEROPTION        TeamParam = 22
	TeamParam_TEAMPARAM_QUERYWANTEDQUEST       TeamParam = 23
	TeamParam_TEAMPARAM_UPDATEWANTEDQUEST      TeamParam = 24
	TeamParam_TEAMPARAM_ACCEPTHELPWANTED       TeamParam = 25
	TeamParam_TEAMPARAM_UPDATEHELPWANTED       TeamParam = 26
	TeamParam_TEAMPARAM_QUERYHELPWANTED        TeamParam = 27
	TeamParam_TEAMPARAM_QUERYMEMBERCAT         TeamParam = 28
	TeamParam_TEAMPARAM_MEMBERCAT_UPDATE       TeamParam = 29
	TeamParam_TEAMPARAM_CANCEL_APPLY           TeamParam = 31
	TeamParam_TEAMPARAM_QUERY_MEMBER           TeamParam = 32
	TeamParam_TEAMPARAM_USERAPPLYUPDATE        TeamParam = 33
	TeamParam_TEAMPARAM_INVITE_GROUP           TeamParam = 34
	TeamParam_TEAMPARAM_PROCESS_INVITE_GROUP   TeamParam = 35
	TeamParam_TEAMPARAM_DISSOLVE_GROUP         TeamParam = 36
	TeamParam_TEAMPARAM_CHANGE_GROUP_LEADER    TeamParam = 37
	TeamParam_TEAMPARAM_GROUP_UPDATE_NTF       TeamParam = 38
	TeamParam_TEAMPARAM_QUERY_GROUP_TEAM_APPLY TeamParam = 39
	TeamParam_TEAMPARAM_GROUP_APPLY_UPDATE     TeamParam = 40
	TeamParam_TEAMPARAM_GROUP_APPLY            TeamParam = 41
	TeamParam_TEAMPARAM_PROCESS_GROUP_APPLY    TeamParam = 42
	TeamParam_TEAMPARAM_GROUP_MYAPPLY_UPDATE   TeamParam = 43
	TeamParam_TEAMPARAM_LAUNCH_KICK            TeamParam = 44
	TeamParam_TEAMPARAM_REPLY_KICK             TeamParam = 45
)

// Enum value maps for TeamParam.
var (
	TeamParam_name = map[int32]string{
		1:  "TEAMPARAM_TEAMLIST",
		2:  "TEAMPARAM_DATAUPDATE",
		3:  "TEAMPARAM_MEMBERUPDATE",
		4:  "TEAMPARAM_APPLYUPDATE",
		5:  "TEAMPARAM_CREATETEAM",
		6:  "TEAMPARAM_INVITEMEMBER",
		7:  "TEAMPARAM_PROCESSINVITE",
		8:  "TEAMPARAM_MEMBERAPPLY",
		9:  "TEAMPARAM_PROCESSAPPLY",
		10: "TEAMPARAM_KICKMEMBER",
		11: "TEAMPARAM_EXCHANGELEADER",
		12: "TEAMPARAM_EXITTEAM",
		13: "TEAMPARAM_ENTERTEAM",
		14: "TEAMPARAM_MEMBERPOSUPDATE",
		15: "TEAMPARAM_MEMBERDATAUPDATE",
		16: "TEAMPARAM_LOCKTARGET",
		17: "TEAMPARAM_SUMMON",
		18: "TEAMPARAM_CLEARAPPLYLIST",
		19: "TEAMPARAM_QUICKENTER",
		20: "TEAMPARAM_SETOPTION",
		21: "TEAMPARAM_QUERYUSERTEAMINFO",
		22: "TEAMPARAM_SETMEMBEROPTION",
		23: "TEAMPARAM_QUERYWANTEDQUEST",
		24: "TEAMPARAM_UPDATEWANTEDQUEST",
		25: "TEAMPARAM_ACCEPTHELPWANTED",
		26: "TEAMPARAM_UPDATEHELPWANTED",
		27: "TEAMPARAM_QUERYHELPWANTED",
		28: "TEAMPARAM_QUERYMEMBERCAT",
		29: "TEAMPARAM_MEMBERCAT_UPDATE",
		31: "TEAMPARAM_CANCEL_APPLY",
		32: "TEAMPARAM_QUERY_MEMBER",
		33: "TEAMPARAM_USERAPPLYUPDATE",
		34: "TEAMPARAM_INVITE_GROUP",
		35: "TEAMPARAM_PROCESS_INVITE_GROUP",
		36: "TEAMPARAM_DISSOLVE_GROUP",
		37: "TEAMPARAM_CHANGE_GROUP_LEADER",
		38: "TEAMPARAM_GROUP_UPDATE_NTF",
		39: "TEAMPARAM_QUERY_GROUP_TEAM_APPLY",
		40: "TEAMPARAM_GROUP_APPLY_UPDATE",
		41: "TEAMPARAM_GROUP_APPLY",
		42: "TEAMPARAM_PROCESS_GROUP_APPLY",
		43: "TEAMPARAM_GROUP_MYAPPLY_UPDATE",
		44: "TEAMPARAM_LAUNCH_KICK",
		45: "TEAMPARAM_REPLY_KICK",
	}
	TeamParam_value = map[string]int32{
		"TEAMPARAM_TEAMLIST":               1,
		"TEAMPARAM_DATAUPDATE":             2,
		"TEAMPARAM_MEMBERUPDATE":           3,
		"TEAMPARAM_APPLYUPDATE":            4,
		"TEAMPARAM_CREATETEAM":             5,
		"TEAMPARAM_INVITEMEMBER":           6,
		"TEAMPARAM_PROCESSINVITE":          7,
		"TEAMPARAM_MEMBERAPPLY":            8,
		"TEAMPARAM_PROCESSAPPLY":           9,
		"TEAMPARAM_KICKMEMBER":             10,
		"TEAMPARAM_EXCHANGELEADER":         11,
		"TEAMPARAM_EXITTEAM":               12,
		"TEAMPARAM_ENTERTEAM":              13,
		"TEAMPARAM_MEMBERPOSUPDATE":        14,
		"TEAMPARAM_MEMBERDATAUPDATE":       15,
		"TEAMPARAM_LOCKTARGET":             16,
		"TEAMPARAM_SUMMON":                 17,
		"TEAMPARAM_CLEARAPPLYLIST":         18,
		"TEAMPARAM_QUICKENTER":             19,
		"TEAMPARAM_SETOPTION":              20,
		"TEAMPARAM_QUERYUSERTEAMINFO":      21,
		"TEAMPARAM_SETMEMBEROPTION":        22,
		"TEAMPARAM_QUERYWANTEDQUEST":       23,
		"TEAMPARAM_UPDATEWANTEDQUEST":      24,
		"TEAMPARAM_ACCEPTHELPWANTED":       25,
		"TEAMPARAM_UPDATEHELPWANTED":       26,
		"TEAMPARAM_QUERYHELPWANTED":        27,
		"TEAMPARAM_QUERYMEMBERCAT":         28,
		"TEAMPARAM_MEMBERCAT_UPDATE":       29,
		"TEAMPARAM_CANCEL_APPLY":           31,
		"TEAMPARAM_QUERY_MEMBER":           32,
		"TEAMPARAM_USERAPPLYUPDATE":        33,
		"TEAMPARAM_INVITE_GROUP":           34,
		"TEAMPARAM_PROCESS_INVITE_GROUP":   35,
		"TEAMPARAM_DISSOLVE_GROUP":         36,
		"TEAMPARAM_CHANGE_GROUP_LEADER":    37,
		"TEAMPARAM_GROUP_UPDATE_NTF":       38,
		"TEAMPARAM_QUERY_GROUP_TEAM_APPLY": 39,
		"TEAMPARAM_GROUP_APPLY_UPDATE":     40,
		"TEAMPARAM_GROUP_APPLY":            41,
		"TEAMPARAM_PROCESS_GROUP_APPLY":    42,
		"TEAMPARAM_GROUP_MYAPPLY_UPDATE":   43,
		"TEAMPARAM_LAUNCH_KICK":            44,
		"TEAMPARAM_REPLY_KICK":             45,
	}
)

func (x TeamParam) Enum() *TeamParam {
	p := new(TeamParam)
	*p = x
	return p
}

func (x TeamParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamParam) Descriptor() protoreflect.EnumDescriptor {
	return file_SessionTeam_proto_enumTypes[0].Descriptor()
}

func (TeamParam) Type() protoreflect.EnumType {
	return &file_SessionTeam_proto_enumTypes[0]
}

func (x TeamParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TeamParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TeamParam(num)
	return nil
}

// Deprecated: Use TeamParam.Descriptor instead.
func (TeamParam) EnumDescriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{0}
}

type ETeamGlobal int32

const (
	ETeamGlobal_ETEAMGLOBAL_LISTCOUNT_PERPAGE ETeamGlobal = 20
)

// Enum value maps for ETeamGlobal.
var (
	ETeamGlobal_name = map[int32]string{
		20: "ETEAMGLOBAL_LISTCOUNT_PERPAGE",
	}
	ETeamGlobal_value = map[string]int32{
		"ETEAMGLOBAL_LISTCOUNT_PERPAGE": 20,
	}
)

func (x ETeamGlobal) Enum() *ETeamGlobal {
	p := new(ETeamGlobal)
	*p = x
	return p
}

func (x ETeamGlobal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETeamGlobal) Descriptor() protoreflect.EnumDescriptor {
	return file_SessionTeam_proto_enumTypes[1].Descriptor()
}

func (ETeamGlobal) Type() protoreflect.EnumType {
	return &file_SessionTeam_proto_enumTypes[1]
}

func (x ETeamGlobal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETeamGlobal) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETeamGlobal(num)
	return nil
}

// Deprecated: Use ETeamGlobal.Descriptor instead.
func (ETeamGlobal) EnumDescriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{1}
}

type ETeamJob int32

const (
	ETeamJob_ETEAMJOB_MIN        ETeamJob = 0
	ETeamJob_ETEAMJOB_LEADER     ETeamJob = 1
	ETeamJob_ETEAMJOB_MEMBER     ETeamJob = 2
	ETeamJob_ETEAMJOB_APPLY      ETeamJob = 3
	ETeamJob_ETEAMJOB_TEMPLEADER ETeamJob = 4
	ETeamJob_ETEAMJOB_MAX        ETeamJob = 5
)

// Enum value maps for ETeamJob.
var (
	ETeamJob_name = map[int32]string{
		0: "ETEAMJOB_MIN",
		1: "ETEAMJOB_LEADER",
		2: "ETEAMJOB_MEMBER",
		3: "ETEAMJOB_APPLY",
		4: "ETEAMJOB_TEMPLEADER",
		5: "ETEAMJOB_MAX",
	}
	ETeamJob_value = map[string]int32{
		"ETEAMJOB_MIN":        0,
		"ETEAMJOB_LEADER":     1,
		"ETEAMJOB_MEMBER":     2,
		"ETEAMJOB_APPLY":      3,
		"ETEAMJOB_TEMPLEADER": 4,
		"ETEAMJOB_MAX":        5,
	}
)

func (x ETeamJob) Enum() *ETeamJob {
	p := new(ETeamJob)
	*p = x
	return p
}

func (x ETeamJob) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETeamJob) Descriptor() protoreflect.EnumDescriptor {
	return file_SessionTeam_proto_enumTypes[2].Descriptor()
}

func (ETeamJob) Type() protoreflect.EnumType {
	return &file_SessionTeam_proto_enumTypes[2]
}

func (x ETeamJob) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETeamJob) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETeamJob(num)
	return nil
}

// Deprecated: Use ETeamJob.Descriptor instead.
func (ETeamJob) EnumDescriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{2}
}

type EMemberData int32

const (
	EMemberData_EMEMBERDATA_MIN            EMemberData = 0
	EMemberData_EMEMBERDATA_BASELEVEL      EMemberData = 1
	EMemberData_EMEMBERDATA_PROFESSION     EMemberData = 2
	EMemberData_EMEMBERDATA_MAPID          EMemberData = 3
	EMemberData_EMEMBERDATA_PORTRAIT       EMemberData = 4
	EMemberData_EMEMBERDATA_FRAME          EMemberData = 5
	EMemberData_EMEMBERDATA_RAIDID         EMemberData = 6
	EMemberData_EMEMBERDATA_OFFLINE        EMemberData = 7
	EMemberData_EMEMBERDATA_HP             EMemberData = 8
	EMemberData_EMEMBERDATA_MAXHP          EMemberData = 9
	EMemberData_EMEMBERDATA_SP             EMemberData = 10
	EMemberData_EMEMBERDATA_MAXSP          EMemberData = 11
	EMemberData_EMEMBERDATA_JOB            EMemberData = 12
	EMemberData_EMEMBERDATA_TARGETID       EMemberData = 13
	EMemberData_EMEMBERDATA_JOINHANDID     EMemberData = 14
	EMemberData_EMEMBERDATA_BODY           EMemberData = 15
	EMemberData_EMEMBERDATA_HEAD           EMemberData = 16
	EMemberData_EMEMBERDATA_BACK           EMemberData = 17
	EMemberData_EMEMBERDATA_FACE           EMemberData = 18
	EMemberData_EMEMBERDATA_TAIL           EMemberData = 19
	EMemberData_EMEMBERDATA_HAIR           EMemberData = 20
	EMemberData_EMEMBERDATA_HAIRCOLOR      EMemberData = 21
	EMemberData_EMEMBERDATA_CLOTHCOLOR     EMemberData = 22
	EMemberData_EMEMBERDATA_LEFTHAND       EMemberData = 23
	EMemberData_EMEMBERDATA_RIGHTHAND      EMemberData = 24
	EMemberData_EMEMBERDATA_GUILDID        EMemberData = 25
	EMemberData_EMEMBERDATA_GUILDNAME      EMemberData = 26
	EMemberData_EMEMBERDATA_GENDER         EMemberData = 27
	EMemberData_EMEMBERDATA_BLINK          EMemberData = 28
	EMemberData_EMEMBERDATA_ZONEID         EMemberData = 29
	EMemberData_EMEMBERDATA_AUTOFOLLOW     EMemberData = 30
	EMemberData_EMEMBERDATA_EYE            EMemberData = 31
	EMemberData_EMEMBERDATA_NAME           EMemberData = 32
	EMemberData_EMEMBERDATA_MOUTH          EMemberData = 33
	EMemberData_EMEMBERDATA_CAT            EMemberData = 34
	EMemberData_EMEMBERDATA_RELIVETIME     EMemberData = 35
	EMemberData_EMEMBERDATA_EXPIRETIME     EMemberData = 36
	EMemberData_EMEMBERDATA_CAT_OWNER      EMemberData = 37
	EMemberData_EMEMBERDATA_ENTERTIME      EMemberData = 38
	EMemberData_EMEMBERDATA_GUILDRAIDINDEX EMemberData = 39
	EMemberData_EMEMBERDATA_ENSEMBLESKILL  EMemberData = 40
	EMemberData_EMEMBERDATA_QUERYTYPE      EMemberData = 42
	EMemberData_EMEMBERDATA_SCENEID        EMemberData = 43
	EMemberData_EMEMBERDATA_REAL_ZONEID    EMemberData = 44
	EMemberData_EMEMBERDATA_HOME_ROOMID    EMemberData = 45
	EMemberData_EMEMBERDATA_PORTRAIT_FRAME EMemberData = 46
	EMemberData_EMEMBERDATA_BACKGROUND     EMemberData = 47
	EMemberData_EMEMBERDATA_DEDUCT_CREDIT  EMemberData = 48
	EMemberData_EMEMBERDATA_PASS_COUNT     EMemberData = 49
	EMemberData_EMEMBERDATA_AFK            EMemberData = 50
	EMemberData_EMEMBERDATA_MAX            EMemberData = 51
)

// Enum value maps for EMemberData.
var (
	EMemberData_name = map[int32]string{
		0:  "EMEMBERDATA_MIN",
		1:  "EMEMBERDATA_BASELEVEL",
		2:  "EMEMBERDATA_PROFESSION",
		3:  "EMEMBERDATA_MAPID",
		4:  "EMEMBERDATA_PORTRAIT",
		5:  "EMEMBERDATA_FRAME",
		6:  "EMEMBERDATA_RAIDID",
		7:  "EMEMBERDATA_OFFLINE",
		8:  "EMEMBERDATA_HP",
		9:  "EMEMBERDATA_MAXHP",
		10: "EMEMBERDATA_SP",
		11: "EMEMBERDATA_MAXSP",
		12: "EMEMBERDATA_JOB",
		13: "EMEMBERDATA_TARGETID",
		14: "EMEMBERDATA_JOINHANDID",
		15: "EMEMBERDATA_BODY",
		16: "EMEMBERDATA_HEAD",
		17: "EMEMBERDATA_BACK",
		18: "EMEMBERDATA_FACE",
		19: "EMEMBERDATA_TAIL",
		20: "EMEMBERDATA_HAIR",
		21: "EMEMBERDATA_HAIRCOLOR",
		22: "EMEMBERDATA_CLOTHCOLOR",
		23: "EMEMBERDATA_LEFTHAND",
		24: "EMEMBERDATA_RIGHTHAND",
		25: "EMEMBERDATA_GUILDID",
		26: "EMEMBERDATA_GUILDNAME",
		27: "EMEMBERDATA_GENDER",
		28: "EMEMBERDATA_BLINK",
		29: "EMEMBERDATA_ZONEID",
		30: "EMEMBERDATA_AUTOFOLLOW",
		31: "EMEMBERDATA_EYE",
		32: "EMEMBERDATA_NAME",
		33: "EMEMBERDATA_MOUTH",
		34: "EMEMBERDATA_CAT",
		35: "EMEMBERDATA_RELIVETIME",
		36: "EMEMBERDATA_EXPIRETIME",
		37: "EMEMBERDATA_CAT_OWNER",
		38: "EMEMBERDATA_ENTERTIME",
		39: "EMEMBERDATA_GUILDRAIDINDEX",
		40: "EMEMBERDATA_ENSEMBLESKILL",
		42: "EMEMBERDATA_QUERYTYPE",
		43: "EMEMBERDATA_SCENEID",
		44: "EMEMBERDATA_REAL_ZONEID",
		45: "EMEMBERDATA_HOME_ROOMID",
		46: "EMEMBERDATA_PORTRAIT_FRAME",
		47: "EMEMBERDATA_BACKGROUND",
		48: "EMEMBERDATA_DEDUCT_CREDIT",
		49: "EMEMBERDATA_PASS_COUNT",
		50: "EMEMBERDATA_AFK",
		51: "EMEMBERDATA_MAX",
	}
	EMemberData_value = map[string]int32{
		"EMEMBERDATA_MIN":            0,
		"EMEMBERDATA_BASELEVEL":      1,
		"EMEMBERDATA_PROFESSION":     2,
		"EMEMBERDATA_MAPID":          3,
		"EMEMBERDATA_PORTRAIT":       4,
		"EMEMBERDATA_FRAME":          5,
		"EMEMBERDATA_RAIDID":         6,
		"EMEMBERDATA_OFFLINE":        7,
		"EMEMBERDATA_HP":             8,
		"EMEMBERDATA_MAXHP":          9,
		"EMEMBERDATA_SP":             10,
		"EMEMBERDATA_MAXSP":          11,
		"EMEMBERDATA_JOB":            12,
		"EMEMBERDATA_TARGETID":       13,
		"EMEMBERDATA_JOINHANDID":     14,
		"EMEMBERDATA_BODY":           15,
		"EMEMBERDATA_HEAD":           16,
		"EMEMBERDATA_BACK":           17,
		"EMEMBERDATA_FACE":           18,
		"EMEMBERDATA_TAIL":           19,
		"EMEMBERDATA_HAIR":           20,
		"EMEMBERDATA_HAIRCOLOR":      21,
		"EMEMBERDATA_CLOTHCOLOR":     22,
		"EMEMBERDATA_LEFTHAND":       23,
		"EMEMBERDATA_RIGHTHAND":      24,
		"EMEMBERDATA_GUILDID":        25,
		"EMEMBERDATA_GUILDNAME":      26,
		"EMEMBERDATA_GENDER":         27,
		"EMEMBERDATA_BLINK":          28,
		"EMEMBERDATA_ZONEID":         29,
		"EMEMBERDATA_AUTOFOLLOW":     30,
		"EMEMBERDATA_EYE":            31,
		"EMEMBERDATA_NAME":           32,
		"EMEMBERDATA_MOUTH":          33,
		"EMEMBERDATA_CAT":            34,
		"EMEMBERDATA_RELIVETIME":     35,
		"EMEMBERDATA_EXPIRETIME":     36,
		"EMEMBERDATA_CAT_OWNER":      37,
		"EMEMBERDATA_ENTERTIME":      38,
		"EMEMBERDATA_GUILDRAIDINDEX": 39,
		"EMEMBERDATA_ENSEMBLESKILL":  40,
		"EMEMBERDATA_QUERYTYPE":      42,
		"EMEMBERDATA_SCENEID":        43,
		"EMEMBERDATA_REAL_ZONEID":    44,
		"EMEMBERDATA_HOME_ROOMID":    45,
		"EMEMBERDATA_PORTRAIT_FRAME": 46,
		"EMEMBERDATA_BACKGROUND":     47,
		"EMEMBERDATA_DEDUCT_CREDIT":  48,
		"EMEMBERDATA_PASS_COUNT":     49,
		"EMEMBERDATA_AFK":            50,
		"EMEMBERDATA_MAX":            51,
	}
)

func (x EMemberData) Enum() *EMemberData {
	p := new(EMemberData)
	*p = x
	return p
}

func (x EMemberData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMemberData) Descriptor() protoreflect.EnumDescriptor {
	return file_SessionTeam_proto_enumTypes[3].Descriptor()
}

func (EMemberData) Type() protoreflect.EnumType {
	return &file_SessionTeam_proto_enumTypes[3]
}

func (x EMemberData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMemberData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMemberData(num)
	return nil
}

// Deprecated: Use EMemberData.Descriptor instead.
func (EMemberData) EnumDescriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{3}
}

type EAutoType int32

const (
	EAutoType_EAUTOTYPE_CLOSE       EAutoType = 0
	EAutoType_EAUTOTYPE_ALL         EAutoType = 1
	EAutoType_EAUTOTYPE_GUILDFRIEND EAutoType = 2
	EAutoType_EAUTOTYPE_MAX         EAutoType = 3
)

// Enum value maps for EAutoType.
var (
	EAutoType_name = map[int32]string{
		0: "EAUTOTYPE_CLOSE",
		1: "EAUTOTYPE_ALL",
		2: "EAUTOTYPE_GUILDFRIEND",
		3: "EAUTOTYPE_MAX",
	}
	EAutoType_value = map[string]int32{
		"EAUTOTYPE_CLOSE":       0,
		"EAUTOTYPE_ALL":         1,
		"EAUTOTYPE_GUILDFRIEND": 2,
		"EAUTOTYPE_MAX":         3,
	}
)

func (x EAutoType) Enum() *EAutoType {
	p := new(EAutoType)
	*p = x
	return p
}

func (x EAutoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAutoType) Descriptor() protoreflect.EnumDescriptor {
	return file_SessionTeam_proto_enumTypes[4].Descriptor()
}

func (EAutoType) Type() protoreflect.EnumType {
	return &file_SessionTeam_proto_enumTypes[4]
}

func (x EAutoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAutoType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAutoType(num)
	return nil
}

// Deprecated: Use EAutoType.Descriptor instead.
func (EAutoType) EnumDescriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{4}
}

type ETeamState int32

const (
	ETeamState_ETEAMSTATE_FREE          ETeamState = 0
	ETeamState_ETEAMSTATE_PUBLISH       ETeamState = 1
	ETeamState_ETEAMSTATE_MATCH         ETeamState = 2
	ETeamState_ETEAMSTATE_PUBLISH_GROUP ETeamState = 3
)

// Enum value maps for ETeamState.
var (
	ETeamState_name = map[int32]string{
		0: "ETEAMSTATE_FREE",
		1: "ETEAMSTATE_PUBLISH",
		2: "ETEAMSTATE_MATCH",
		3: "ETEAMSTATE_PUBLISH_GROUP",
	}
	ETeamState_value = map[string]int32{
		"ETEAMSTATE_FREE":          0,
		"ETEAMSTATE_PUBLISH":       1,
		"ETEAMSTATE_MATCH":         2,
		"ETEAMSTATE_PUBLISH_GROUP": 3,
	}
)

func (x ETeamState) Enum() *ETeamState {
	p := new(ETeamState)
	*p = x
	return p
}

func (x ETeamState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETeamState) Descriptor() protoreflect.EnumDescriptor {
	return file_SessionTeam_proto_enumTypes[5].Descriptor()
}

func (ETeamState) Type() protoreflect.EnumType {
	return &file_SessionTeam_proto_enumTypes[5]
}

func (x ETeamState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETeamState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETeamState(num)
	return nil
}

// Deprecated: Use ETeamState.Descriptor instead.
func (ETeamState) EnumDescriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{5}
}

type ETeamAllow int32

const (
	ETeamAllow_ETEAMGROUPTYPE_ALLOW  ETeamAllow = 0
	ETeamAllow_ETEAMGROUPTYPE_REFUSE ETeamAllow = 1
)

// Enum value maps for ETeamAllow.
var (
	ETeamAllow_name = map[int32]string{
		0: "ETEAMGROUPTYPE_ALLOW",
		1: "ETEAMGROUPTYPE_REFUSE",
	}
	ETeamAllow_value = map[string]int32{
		"ETEAMGROUPTYPE_ALLOW":  0,
		"ETEAMGROUPTYPE_REFUSE": 1,
	}
)

func (x ETeamAllow) Enum() *ETeamAllow {
	p := new(ETeamAllow)
	*p = x
	return p
}

func (x ETeamAllow) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETeamAllow) Descriptor() protoreflect.EnumDescriptor {
	return file_SessionTeam_proto_enumTypes[6].Descriptor()
}

func (ETeamAllow) Type() protoreflect.EnumType {
	return &file_SessionTeam_proto_enumTypes[6]
}

func (x ETeamAllow) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETeamAllow) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETeamAllow(num)
	return nil
}

// Deprecated: Use ETeamAllow.Descriptor instead.
func (ETeamAllow) EnumDescriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{6}
}

type ETeamData int32

const (
	ETeamData_ETEAMDATA_MIN              ETeamData = 0
	ETeamData_ETEAMDATA_TYPE             ETeamData = 1
	ETeamData_ETEAMDATA_MINLV            ETeamData = 2
	ETeamData_ETEAMDATA_MAXLV            ETeamData = 3
	ETeamData_ETEAMDATA_OVERTIME         ETeamData = 4
	ETeamData_ETEAMDATA_AUTOACCEPT       ETeamData = 5
	ETeamData_ETEAMDATA_MEMBERCOUNT      ETeamData = 6
	ETeamData_ETEAMDATA_PICKUP_MODE      ETeamData = 7
	ETeamData_ETEAMDATA_MEMBER           ETeamData = 8
	ETeamData_ETEAMDATA_HELPWANTED       ETeamData = 9
	ETeamData_ETEAMDATA_TEAMSVRID        ETeamData = 10
	ETeamData_ETEAMDATA_STATE            ETeamData = 11
	ETeamData_ETEAMDATA_DESC             ETeamData = 12
	ETeamData_ETEAMDATA_NAME             ETeamData = 13
	ETeamData_ETEAMDATA_SEAL             ETeamData = 14
	ETeamData_ETEAMDATA_GROUP_TEAMID     ETeamData = 15
	ETeamData_ETEAMDATA_GROUP_ID         ETeamData = 16
	ETeamData_ETEAMDATA_KICKOPEN         ETeamData = 17
	ETeamData_ETEAMDATA_ALLOW_JOIN_GROUP ETeamData = 18
	ETeamData_ETEAMDATA_MAX              ETeamData = 19
)

// Enum value maps for ETeamData.
var (
	ETeamData_name = map[int32]string{
		0:  "ETEAMDATA_MIN",
		1:  "ETEAMDATA_TYPE",
		2:  "ETEAMDATA_MINLV",
		3:  "ETEAMDATA_MAXLV",
		4:  "ETEAMDATA_OVERTIME",
		5:  "ETEAMDATA_AUTOACCEPT",
		6:  "ETEAMDATA_MEMBERCOUNT",
		7:  "ETEAMDATA_PICKUP_MODE",
		8:  "ETEAMDATA_MEMBER",
		9:  "ETEAMDATA_HELPWANTED",
		10: "ETEAMDATA_TEAMSVRID",
		11: "ETEAMDATA_STATE",
		12: "ETEAMDATA_DESC",
		13: "ETEAMDATA_NAME",
		14: "ETEAMDATA_SEAL",
		15: "ETEAMDATA_GROUP_TEAMID",
		16: "ETEAMDATA_GROUP_ID",
		17: "ETEAMDATA_KICKOPEN",
		18: "ETEAMDATA_ALLOW_JOIN_GROUP",
		19: "ETEAMDATA_MAX",
	}
	ETeamData_value = map[string]int32{
		"ETEAMDATA_MIN":              0,
		"ETEAMDATA_TYPE":             1,
		"ETEAMDATA_MINLV":            2,
		"ETEAMDATA_MAXLV":            3,
		"ETEAMDATA_OVERTIME":         4,
		"ETEAMDATA_AUTOACCEPT":       5,
		"ETEAMDATA_MEMBERCOUNT":      6,
		"ETEAMDATA_PICKUP_MODE":      7,
		"ETEAMDATA_MEMBER":           8,
		"ETEAMDATA_HELPWANTED":       9,
		"ETEAMDATA_TEAMSVRID":        10,
		"ETEAMDATA_STATE":            11,
		"ETEAMDATA_DESC":             12,
		"ETEAMDATA_NAME":             13,
		"ETEAMDATA_SEAL":             14,
		"ETEAMDATA_GROUP_TEAMID":     15,
		"ETEAMDATA_GROUP_ID":         16,
		"ETEAMDATA_KICKOPEN":         17,
		"ETEAMDATA_ALLOW_JOIN_GROUP": 18,
		"ETEAMDATA_MAX":              19,
	}
)

func (x ETeamData) Enum() *ETeamData {
	p := new(ETeamData)
	*p = x
	return p
}

func (x ETeamData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETeamData) Descriptor() protoreflect.EnumDescriptor {
	return file_SessionTeam_proto_enumTypes[7].Descriptor()
}

func (ETeamData) Type() protoreflect.EnumType {
	return &file_SessionTeam_proto_enumTypes[7]
}

func (x ETeamData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETeamData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETeamData(num)
	return nil
}

// Deprecated: Use ETeamData.Descriptor instead.
func (ETeamData) EnumDescriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{7}
}

type EQueryTeamType int32

const (
	EQueryTeamType_EQUERYTEAMTYPE_ALL       EQueryTeamType = 0
	EQueryTeamType_EQUERYTEAMTYPE_MYZONE    EQueryTeamType = 1
	EQueryTeamType_EQUERYTEAMTYPE_OTHERZONE EQueryTeamType = 2
)

// Enum value maps for EQueryTeamType.
var (
	EQueryTeamType_name = map[int32]string{
		0: "EQUERYTEAMTYPE_ALL",
		1: "EQUERYTEAMTYPE_MYZONE",
		2: "EQUERYTEAMTYPE_OTHERZONE",
	}
	EQueryTeamType_value = map[string]int32{
		"EQUERYTEAMTYPE_ALL":       0,
		"EQUERYTEAMTYPE_MYZONE":    1,
		"EQUERYTEAMTYPE_OTHERZONE": 2,
	}
)

func (x EQueryTeamType) Enum() *EQueryTeamType {
	p := new(EQueryTeamType)
	*p = x
	return p
}

func (x EQueryTeamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQueryTeamType) Descriptor() protoreflect.EnumDescriptor {
	return file_SessionTeam_proto_enumTypes[8].Descriptor()
}

func (EQueryTeamType) Type() protoreflect.EnumType {
	return &file_SessionTeam_proto_enumTypes[8]
}

func (x EQueryTeamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EQueryTeamType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EQueryTeamType(num)
	return nil
}

// Deprecated: Use EQueryTeamType.Descriptor instead.
func (EQueryTeamType) EnumDescriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{8}
}

type ETeamInviteType int32

const (
	ETeamInviteType_ETEAMINVITETYPE_MIN      ETeamInviteType = 0
	ETeamInviteType_ETEAMINVITETYPE_AGREE    ETeamInviteType = 1
	ETeamInviteType_ETEAMINVITETYPE_DISAGREE ETeamInviteType = 2
	ETeamInviteType_ETEAMINVITETYPE_MAX      ETeamInviteType = 3
)

// Enum value maps for ETeamInviteType.
var (
	ETeamInviteType_name = map[int32]string{
		0: "ETEAMINVITETYPE_MIN",
		1: "ETEAMINVITETYPE_AGREE",
		2: "ETEAMINVITETYPE_DISAGREE",
		3: "ETEAMINVITETYPE_MAX",
	}
	ETeamInviteType_value = map[string]int32{
		"ETEAMINVITETYPE_MIN":      0,
		"ETEAMINVITETYPE_AGREE":    1,
		"ETEAMINVITETYPE_DISAGREE": 2,
		"ETEAMINVITETYPE_MAX":      3,
	}
)

func (x ETeamInviteType) Enum() *ETeamInviteType {
	p := new(ETeamInviteType)
	*p = x
	return p
}

func (x ETeamInviteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETeamInviteType) Descriptor() protoreflect.EnumDescriptor {
	return file_SessionTeam_proto_enumTypes[9].Descriptor()
}

func (ETeamInviteType) Type() protoreflect.EnumType {
	return &file_SessionTeam_proto_enumTypes[9]
}

func (x ETeamInviteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETeamInviteType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETeamInviteType(num)
	return nil
}

// Deprecated: Use ETeamInviteType.Descriptor instead.
func (ETeamInviteType) EnumDescriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{9}
}

type ETeamApplyType int32

const (
	ETeamApplyType_ETEAMAPPLYTYPE_MIN      ETeamApplyType = 0
	ETeamApplyType_ETEAMAPPLYTYPE_AGREE    ETeamApplyType = 1
	ETeamApplyType_ETEAMAPPLYTYPE_DISAGREE ETeamApplyType = 2
	ETeamApplyType_ETEAMAPPLYTYPE_MAX      ETeamApplyType = 3
)

// Enum value maps for ETeamApplyType.
var (
	ETeamApplyType_name = map[int32]string{
		0: "ETEAMAPPLYTYPE_MIN",
		1: "ETEAMAPPLYTYPE_AGREE",
		2: "ETEAMAPPLYTYPE_DISAGREE",
		3: "ETEAMAPPLYTYPE_MAX",
	}
	ETeamApplyType_value = map[string]int32{
		"ETEAMAPPLYTYPE_MIN":      0,
		"ETEAMAPPLYTYPE_AGREE":    1,
		"ETEAMAPPLYTYPE_DISAGREE": 2,
		"ETEAMAPPLYTYPE_MAX":      3,
	}
)

func (x ETeamApplyType) Enum() *ETeamApplyType {
	p := new(ETeamApplyType)
	*p = x
	return p
}

func (x ETeamApplyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETeamApplyType) Descriptor() protoreflect.EnumDescriptor {
	return file_SessionTeam_proto_enumTypes[10].Descriptor()
}

func (ETeamApplyType) Type() protoreflect.EnumType {
	return &file_SessionTeam_proto_enumTypes[10]
}

func (x ETeamApplyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETeamApplyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETeamApplyType(num)
	return nil
}

// Deprecated: Use ETeamApplyType.Descriptor instead.
func (ETeamApplyType) EnumDescriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{10}
}

type MemberData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *EMemberData `protobuf:"varint,1,opt,name=type,enum=Cmd.EMemberData,def=0" json:"type,omitempty"`
	Value  *uint64      `protobuf:"varint,2,opt,name=value,def=0" json:"value,omitempty"`
	Data   *string      `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Values []uint64     `protobuf:"varint,4,rep,name=values" json:"values,omitempty"`
}

// Default values for MemberData fields.
const (
	Default_MemberData_Type  = EMemberData_EMEMBERDATA_MIN
	Default_MemberData_Value = uint64(0)
)

func (x *MemberData) Reset() {
	*x = MemberData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberData) ProtoMessage() {}

func (x *MemberData) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberData.ProtoReflect.Descriptor instead.
func (*MemberData) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{0}
}

func (x *MemberData) GetType() EMemberData {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_MemberData_Type
}

func (x *MemberData) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_MemberData_Value
}

func (x *MemberData) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

func (x *MemberData) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type TeamMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid     *uint64       `protobuf:"varint,1,opt,name=guid,def=0" json:"guid,omitempty"`
	Name     *string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Datas    []*MemberData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
	XAccid   *uint32       `protobuf:"varint,4,opt,name=_accid,json=Accid" json:"_accid,omitempty"`
	Zoneid   *uint32       `protobuf:"varint,5,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Accid    *uint64       `protobuf:"varint,6,opt,name=accid" json:"accid,omitempty"`
	Serverid *uint32       `protobuf:"varint,7,opt,name=serverid,def=1" json:"serverid,omitempty"`
}

// Default values for TeamMember fields.
const (
	Default_TeamMember_Guid     = uint64(0)
	Default_TeamMember_Zoneid   = uint32(0)
	Default_TeamMember_Serverid = uint32(1)
)

func (x *TeamMember) Reset() {
	*x = TeamMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMember) ProtoMessage() {}

func (x *TeamMember) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMember.ProtoReflect.Descriptor instead.
func (*TeamMember) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{1}
}

func (x *TeamMember) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_TeamMember_Guid
}

func (x *TeamMember) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TeamMember) GetDatas() []*MemberData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *TeamMember) GetXAccid() uint32 {
	if x != nil && x.XAccid != nil {
		return *x.XAccid
	}
	return 0
}

func (x *TeamMember) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_TeamMember_Zoneid
}

func (x *TeamMember) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return 0
}

func (x *TeamMember) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return Default_TeamMember_Serverid
}

type BlobTeamMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*TeamMember `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
}

func (x *BlobTeamMember) Reset() {
	*x = BlobTeamMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobTeamMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobTeamMember) ProtoMessage() {}

func (x *BlobTeamMember) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobTeamMember.ProtoReflect.Descriptor instead.
func (*BlobTeamMember) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{2}
}

func (x *BlobTeamMember) GetMembers() []*TeamMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type TeamMemberHelpQuest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid    *uint64  `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Helpquest []uint32 `protobuf:"varint,2,rep,name=helpquest" json:"helpquest,omitempty"`
}

// Default values for TeamMemberHelpQuest fields.
const (
	Default_TeamMemberHelpQuest_Charid = uint64(0)
)

func (x *TeamMemberHelpQuest) Reset() {
	*x = TeamMemberHelpQuest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamMemberHelpQuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMemberHelpQuest) ProtoMessage() {}

func (x *TeamMemberHelpQuest) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMemberHelpQuest.ProtoReflect.Descriptor instead.
func (*TeamMemberHelpQuest) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{3}
}

func (x *TeamMemberHelpQuest) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_TeamMemberHelpQuest_Charid
}

func (x *TeamMemberHelpQuest) GetHelpquest() []uint32 {
	if x != nil {
		return x.Helpquest
	}
	return nil
}

type TeamMemberWantedQuest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid      *uint64 `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Acceptquest *uint32 `protobuf:"varint,2,opt,name=acceptquest,def=0" json:"acceptquest,omitempty"`
	Acceptstep  *uint32 `protobuf:"varint,3,opt,name=acceptstep,def=0" json:"acceptstep,omitempty"`
}

// Default values for TeamMemberWantedQuest fields.
const (
	Default_TeamMemberWantedQuest_Charid      = uint64(0)
	Default_TeamMemberWantedQuest_Acceptquest = uint32(0)
	Default_TeamMemberWantedQuest_Acceptstep  = uint32(0)
)

func (x *TeamMemberWantedQuest) Reset() {
	*x = TeamMemberWantedQuest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamMemberWantedQuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMemberWantedQuest) ProtoMessage() {}

func (x *TeamMemberWantedQuest) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMemberWantedQuest.ProtoReflect.Descriptor instead.
func (*TeamMemberWantedQuest) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{4}
}

func (x *TeamMemberWantedQuest) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_TeamMemberWantedQuest_Charid
}

func (x *TeamMemberWantedQuest) GetAcceptquest() uint32 {
	if x != nil && x.Acceptquest != nil {
		return *x.Acceptquest
	}
	return Default_TeamMemberWantedQuest_Acceptquest
}

func (x *TeamMemberWantedQuest) GetAcceptstep() uint32 {
	if x != nil && x.Acceptstep != nil {
		return *x.Acceptstep
	}
	return Default_TeamMemberWantedQuest_Acceptstep
}

type BlobTeamWanted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memberquest []*TeamMemberWantedQuest `protobuf:"bytes,1,rep,name=memberquest" json:"memberquest,omitempty"`
	Memberhelp  []*TeamMemberHelpQuest   `protobuf:"bytes,2,rep,name=memberhelp" json:"memberhelp,omitempty"`
}

func (x *BlobTeamWanted) Reset() {
	*x = BlobTeamWanted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobTeamWanted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobTeamWanted) ProtoMessage() {}

func (x *BlobTeamWanted) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobTeamWanted.ProtoReflect.Descriptor instead.
func (*BlobTeamWanted) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{5}
}

func (x *BlobTeamWanted) GetMemberquest() []*TeamMemberWantedQuest {
	if x != nil {
		return x.Memberquest
	}
	return nil
}

func (x *BlobTeamWanted) GetMemberhelp() []*TeamMemberHelpQuest {
	if x != nil {
		return x.Memberhelp
	}
	return nil
}

type TeamApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid   *uint64       `protobuf:"varint,1,opt,name=guid,def=0" json:"guid,omitempty"`
	Zoneid *uint32       `protobuf:"varint,5,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Time   *uint32       `protobuf:"varint,2,opt,name=time,def=0" json:"time,omitempty"`
	Name   *string       `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Datas  []*MemberData `protobuf:"bytes,4,rep,name=datas" json:"datas,omitempty"`
	XAccid *uint32       `protobuf:"varint,6,opt,name=_accid,json=Accid" json:"_accid,omitempty"`
	Accid  *uint64       `protobuf:"varint,7,opt,name=accid" json:"accid,omitempty"`
}

// Default values for TeamApply fields.
const (
	Default_TeamApply_Guid   = uint64(0)
	Default_TeamApply_Zoneid = uint32(0)
	Default_TeamApply_Time   = uint32(0)
)

func (x *TeamApply) Reset() {
	*x = TeamApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamApply) ProtoMessage() {}

func (x *TeamApply) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamApply.ProtoReflect.Descriptor instead.
func (*TeamApply) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{6}
}

func (x *TeamApply) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_TeamApply_Guid
}

func (x *TeamApply) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_TeamApply_Zoneid
}

func (x *TeamApply) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_TeamApply_Time
}

func (x *TeamApply) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TeamApply) GetDatas() []*MemberData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *TeamApply) GetXAccid() uint32 {
	if x != nil && x.XAccid != nil {
		return *x.XAccid
	}
	return 0
}

func (x *TeamApply) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return 0
}

type BlobTeamApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Applys []*TeamApply `protobuf:"bytes,1,rep,name=applys" json:"applys,omitempty"`
}

func (x *BlobTeamApply) Reset() {
	*x = BlobTeamApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobTeamApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobTeamApply) ProtoMessage() {}

func (x *BlobTeamApply) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobTeamApply.ProtoReflect.Descriptor instead.
func (*BlobTeamApply) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{7}
}

func (x *BlobTeamApply) GetApplys() []*TeamApply {
	if x != nil {
		return x.Applys
	}
	return nil
}

type TeamSealData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seal           *uint32   `protobuf:"varint,1,opt,name=seal,def=0" json:"seal,omitempty"`
	Zoneid         *uint32   `protobuf:"varint,3,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Pos            *ScenePos `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`
	Teamid         *uint64   `protobuf:"varint,4,opt,name=teamid,def=0" json:"teamid,omitempty"`
	Lastonlinetime *uint32   `protobuf:"varint,5,opt,name=lastonlinetime,def=0" json:"lastonlinetime,omitempty"`
}

// Default values for TeamSealData fields.
const (
	Default_TeamSealData_Seal           = uint32(0)
	Default_TeamSealData_Zoneid         = uint32(0)
	Default_TeamSealData_Teamid         = uint64(0)
	Default_TeamSealData_Lastonlinetime = uint32(0)
)

func (x *TeamSealData) Reset() {
	*x = TeamSealData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSealData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSealData) ProtoMessage() {}

func (x *TeamSealData) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSealData.ProtoReflect.Descriptor instead.
func (*TeamSealData) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{8}
}

func (x *TeamSealData) GetSeal() uint32 {
	if x != nil && x.Seal != nil {
		return *x.Seal
	}
	return Default_TeamSealData_Seal
}

func (x *TeamSealData) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_TeamSealData_Zoneid
}

func (x *TeamSealData) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *TeamSealData) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return Default_TeamSealData_Teamid
}

func (x *TeamSealData) GetLastonlinetime() uint32 {
	if x != nil && x.Lastonlinetime != nil {
		return *x.Lastonlinetime
	}
	return Default_TeamSealData_Lastonlinetime
}

type TeamSummaryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *ETeamData `protobuf:"varint,1,opt,name=type,enum=Cmd.ETeamData,def=0" json:"type,omitempty"`
	Value    *uint64    `protobuf:"varint,2,opt,name=value,def=0" json:"value,omitempty"`
	Strvalue *string    `protobuf:"bytes,3,opt,name=strvalue" json:"strvalue,omitempty"`
}

// Default values for TeamSummaryItem fields.
const (
	Default_TeamSummaryItem_Type  = ETeamData_ETEAMDATA_MIN
	Default_TeamSummaryItem_Value = uint64(0)
)

func (x *TeamSummaryItem) Reset() {
	*x = TeamSummaryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSummaryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSummaryItem) ProtoMessage() {}

func (x *TeamSummaryItem) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSummaryItem.ProtoReflect.Descriptor instead.
func (*TeamSummaryItem) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{9}
}

func (x *TeamSummaryItem) GetType() ETeamData {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_TeamSummaryItem_Type
}

func (x *TeamSummaryItem) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_TeamSummaryItem_Value
}

func (x *TeamSummaryItem) GetStrvalue() string {
	if x != nil && x.Strvalue != nil {
		return *x.Strvalue
	}
	return ""
}

type TeamGroupApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teamid     *uint64 `protobuf:"varint,1,opt,name=teamid,def=0" json:"teamid,omitempty"`
	Name       *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Memnum     *uint32 `protobuf:"varint,3,opt,name=memnum,def=0" json:"memnum,omitempty"`
	Createtime *uint32 `protobuf:"varint,4,opt,name=createtime,def=0" json:"createtime,omitempty"`
	Minlv      *uint32 `protobuf:"varint,5,opt,name=minlv,def=0" json:"minlv,omitempty"`
	Maxlv      *uint32 `protobuf:"varint,6,opt,name=maxlv,def=0" json:"maxlv,omitempty"`
}

// Default values for TeamGroupApply fields.
const (
	Default_TeamGroupApply_Teamid     = uint64(0)
	Default_TeamGroupApply_Memnum     = uint32(0)
	Default_TeamGroupApply_Createtime = uint32(0)
	Default_TeamGroupApply_Minlv      = uint32(0)
	Default_TeamGroupApply_Maxlv      = uint32(0)
)

func (x *TeamGroupApply) Reset() {
	*x = TeamGroupApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamGroupApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamGroupApply) ProtoMessage() {}

func (x *TeamGroupApply) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamGroupApply.ProtoReflect.Descriptor instead.
func (*TeamGroupApply) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{10}
}

func (x *TeamGroupApply) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return Default_TeamGroupApply_Teamid
}

func (x *TeamGroupApply) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TeamGroupApply) GetMemnum() uint32 {
	if x != nil && x.Memnum != nil {
		return *x.Memnum
	}
	return Default_TeamGroupApply_Memnum
}

func (x *TeamGroupApply) GetCreatetime() uint32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return Default_TeamGroupApply_Createtime
}

func (x *TeamGroupApply) GetMinlv() uint32 {
	if x != nil && x.Minlv != nil {
		return *x.Minlv
	}
	return Default_TeamGroupApply_Minlv
}

func (x *TeamGroupApply) GetMaxlv() uint32 {
	if x != nil && x.Maxlv != nil {
		return *x.Maxlv
	}
	return Default_TeamGroupApply_Maxlv
}

type TeamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid        *uint64            `protobuf:"varint,1,opt,name=guid,def=0" json:"guid,omitempty"`
	Zoneid      *uint32            `protobuf:"varint,8,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Name        *string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Items       []*TeamSummaryItem `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	Members     []*TeamMember      `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	Applys      []*TeamApply       `protobuf:"bytes,5,rep,name=applys" json:"applys,omitempty"`
	Seal        *TeamSealData      `protobuf:"bytes,6,opt,name=seal" json:"seal,omitempty"`
	Groupapplys []*TeamGroupApply  `protobuf:"bytes,7,rep,name=groupapplys" json:"groupapplys,omitempty"`
}

// Default values for TeamData fields.
const (
	Default_TeamData_Guid   = uint64(0)
	Default_TeamData_Zoneid = uint32(0)
)

func (x *TeamData) Reset() {
	*x = TeamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamData) ProtoMessage() {}

func (x *TeamData) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamData.ProtoReflect.Descriptor instead.
func (*TeamData) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{11}
}

func (x *TeamData) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_TeamData_Guid
}

func (x *TeamData) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_TeamData_Zoneid
}

func (x *TeamData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TeamData) GetItems() []*TeamSummaryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *TeamData) GetMembers() []*TeamMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *TeamData) GetApplys() []*TeamApply {
	if x != nil {
		return x.Applys
	}
	return nil
}

func (x *TeamData) GetSeal() *TeamSealData {
	if x != nil {
		return x.Seal
	}
	return nil
}

func (x *TeamData) GetGroupapplys() []*TeamGroupApply {
	if x != nil {
		return x.Groupapplys
	}
	return nil
}

type TeamList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param     *TeamParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=1" json:"param,omitempty"`
	Type      *uint32         `protobuf:"varint,3,opt,name=type,def=0" json:"type,omitempty"`
	Page      *uint32         `protobuf:"varint,4,opt,name=page,def=0" json:"page,omitempty"`
	Lv        *uint32         `protobuf:"varint,5,opt,name=lv,def=0" json:"lv,omitempty"`
	Querytype *EQueryTeamType `protobuf:"varint,7,opt,name=querytype,enum=Cmd.EQueryTeamType,def=0" json:"querytype,omitempty"`
	List      []*TeamData     `protobuf:"bytes,6,rep,name=list" json:"list,omitempty"`
}

// Default values for TeamList fields.
const (
	Default_TeamList_Cmd       = Command_SESSION_USER_TEAM_PROTOCMD
	Default_TeamList_Param     = TeamParam_TEAMPARAM_TEAMLIST
	Default_TeamList_Type      = uint32(0)
	Default_TeamList_Page      = uint32(0)
	Default_TeamList_Lv        = uint32(0)
	Default_TeamList_Querytype = EQueryTeamType_EQUERYTEAMTYPE_ALL
)

func (x *TeamList) Reset() {
	*x = TeamList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamList) ProtoMessage() {}

func (x *TeamList) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamList.ProtoReflect.Descriptor instead.
func (*TeamList) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{12}
}

func (x *TeamList) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamList_Cmd
}

func (x *TeamList) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamList_Param
}

func (x *TeamList) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_TeamList_Type
}

func (x *TeamList) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return Default_TeamList_Page
}

func (x *TeamList) GetLv() uint32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return Default_TeamList_Lv
}

func (x *TeamList) GetQuerytype() EQueryTeamType {
	if x != nil && x.Querytype != nil {
		return *x.Querytype
	}
	return Default_TeamList_Querytype
}

func (x *TeamList) GetList() []*TeamData {
	if x != nil {
		return x.List
	}
	return nil
}

type TeamDataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param *TeamParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=2" json:"param,omitempty"`
	Name  *string            `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Datas []*TeamSummaryItem `protobuf:"bytes,4,rep,name=datas" json:"datas,omitempty"`
}

// Default values for TeamDataUpdate fields.
const (
	Default_TeamDataUpdate_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_TeamDataUpdate_Param = TeamParam_TEAMPARAM_DATAUPDATE
)

func (x *TeamDataUpdate) Reset() {
	*x = TeamDataUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamDataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamDataUpdate) ProtoMessage() {}

func (x *TeamDataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamDataUpdate.ProtoReflect.Descriptor instead.
func (*TeamDataUpdate) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{13}
}

func (x *TeamDataUpdate) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamDataUpdate_Cmd
}

func (x *TeamDataUpdate) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamDataUpdate_Param
}

func (x *TeamDataUpdate) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TeamDataUpdate) GetDatas() []*TeamSummaryItem {
	if x != nil {
		return x.Datas
	}
	return nil
}

type TeamMemberUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param   *TeamParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=3" json:"param,omitempty"`
	Updates []*TeamMember `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
	Deletes []uint64      `protobuf:"varint,4,rep,name=deletes" json:"deletes,omitempty"`
}

// Default values for TeamMemberUpdate fields.
const (
	Default_TeamMemberUpdate_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_TeamMemberUpdate_Param = TeamParam_TEAMPARAM_MEMBERUPDATE
)

func (x *TeamMemberUpdate) Reset() {
	*x = TeamMemberUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamMemberUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMemberUpdate) ProtoMessage() {}

func (x *TeamMemberUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMemberUpdate.ProtoReflect.Descriptor instead.
func (*TeamMemberUpdate) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{14}
}

func (x *TeamMemberUpdate) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamMemberUpdate_Cmd
}

func (x *TeamMemberUpdate) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamMemberUpdate_Param
}

func (x *TeamMemberUpdate) GetUpdates() []*TeamMember {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *TeamMemberUpdate) GetDeletes() []uint64 {
	if x != nil {
		return x.Deletes
	}
	return nil
}

type TeamApplyUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param   *TeamParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=4" json:"param,omitempty"`
	Updates []*TeamApply `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
	Deletes []uint64     `protobuf:"varint,4,rep,name=deletes" json:"deletes,omitempty"`
	Isgroup *bool        `protobuf:"varint,5,opt,name=isgroup,def=0" json:"isgroup,omitempty"`
}

// Default values for TeamApplyUpdate fields.
const (
	Default_TeamApplyUpdate_Cmd     = Command_SESSION_USER_TEAM_PROTOCMD
	Default_TeamApplyUpdate_Param   = TeamParam_TEAMPARAM_APPLYUPDATE
	Default_TeamApplyUpdate_Isgroup = bool(false)
)

func (x *TeamApplyUpdate) Reset() {
	*x = TeamApplyUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamApplyUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamApplyUpdate) ProtoMessage() {}

func (x *TeamApplyUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamApplyUpdate.ProtoReflect.Descriptor instead.
func (*TeamApplyUpdate) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{15}
}

func (x *TeamApplyUpdate) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamApplyUpdate_Cmd
}

func (x *TeamApplyUpdate) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamApplyUpdate_Param
}

func (x *TeamApplyUpdate) GetUpdates() []*TeamApply {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *TeamApplyUpdate) GetDeletes() []uint64 {
	if x != nil {
		return x.Deletes
	}
	return nil
}

func (x *TeamApplyUpdate) GetIsgroup() bool {
	if x != nil && x.Isgroup != nil {
		return *x.Isgroup
	}
	return Default_TeamApplyUpdate_Isgroup
}

type CreateTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param      *TeamParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=5" json:"param,omitempty"`
	Minlv      *uint32     `protobuf:"varint,3,opt,name=minlv,def=0" json:"minlv,omitempty"`
	Maxlv      *uint32     `protobuf:"varint,4,opt,name=maxlv,def=0" json:"maxlv,omitempty"`
	Type       *uint32     `protobuf:"varint,5,opt,name=type,def=0" json:"type,omitempty"`
	Autoaccept *EAutoType  `protobuf:"varint,6,opt,name=autoaccept,enum=Cmd.EAutoType,def=0" json:"autoaccept,omitempty"`
	Name       *string     `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	State      *ETeamState `protobuf:"varint,8,opt,name=state,enum=Cmd.ETeamState" json:"state,omitempty"`
	Desc       *string     `protobuf:"bytes,9,opt,name=desc" json:"desc,omitempty"`
}

// Default values for CreateTeam fields.
const (
	Default_CreateTeam_Cmd        = Command_SESSION_USER_TEAM_PROTOCMD
	Default_CreateTeam_Param      = TeamParam_TEAMPARAM_CREATETEAM
	Default_CreateTeam_Minlv      = uint32(0)
	Default_CreateTeam_Maxlv      = uint32(0)
	Default_CreateTeam_Type       = uint32(0)
	Default_CreateTeam_Autoaccept = EAutoType_EAUTOTYPE_CLOSE
)

func (x *CreateTeam) Reset() {
	*x = CreateTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeam) ProtoMessage() {}

func (x *CreateTeam) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeam.ProtoReflect.Descriptor instead.
func (*CreateTeam) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{16}
}

func (x *CreateTeam) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CreateTeam_Cmd
}

func (x *CreateTeam) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CreateTeam_Param
}

func (x *CreateTeam) GetMinlv() uint32 {
	if x != nil && x.Minlv != nil {
		return *x.Minlv
	}
	return Default_CreateTeam_Minlv
}

func (x *CreateTeam) GetMaxlv() uint32 {
	if x != nil && x.Maxlv != nil {
		return *x.Maxlv
	}
	return Default_CreateTeam_Maxlv
}

func (x *CreateTeam) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CreateTeam_Type
}

func (x *CreateTeam) GetAutoaccept() EAutoType {
	if x != nil && x.Autoaccept != nil {
		return *x.Autoaccept
	}
	return Default_CreateTeam_Autoaccept
}

func (x *CreateTeam) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateTeam) GetState() ETeamState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ETeamState_ETEAMSTATE_FREE
}

func (x *CreateTeam) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

type InviteMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param    *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=6" json:"param,omitempty"`
	Userguid *uint64    `protobuf:"varint,3,opt,name=userguid,def=0" json:"userguid,omitempty"`
	Catid    *uint32    `protobuf:"varint,4,opt,name=catid,def=0" json:"catid,omitempty"`
	Teamname *string    `protobuf:"bytes,5,opt,name=teamname" json:"teamname,omitempty"`
	Username *string    `protobuf:"bytes,6,opt,name=username" json:"username,omitempty"`
	Isgroup  *bool      `protobuf:"varint,7,opt,name=isgroup,def=0" json:"isgroup,omitempty"`
}

// Default values for InviteMember fields.
const (
	Default_InviteMember_Cmd      = Command_SESSION_USER_TEAM_PROTOCMD
	Default_InviteMember_Param    = TeamParam_TEAMPARAM_INVITEMEMBER
	Default_InviteMember_Userguid = uint64(0)
	Default_InviteMember_Catid    = uint32(0)
	Default_InviteMember_Isgroup  = bool(false)
)

func (x *InviteMember) Reset() {
	*x = InviteMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteMember) ProtoMessage() {}

func (x *InviteMember) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteMember.ProtoReflect.Descriptor instead.
func (*InviteMember) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{17}
}

func (x *InviteMember) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InviteMember_Cmd
}

func (x *InviteMember) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InviteMember_Param
}

func (x *InviteMember) GetUserguid() uint64 {
	if x != nil && x.Userguid != nil {
		return *x.Userguid
	}
	return Default_InviteMember_Userguid
}

func (x *InviteMember) GetCatid() uint32 {
	if x != nil && x.Catid != nil {
		return *x.Catid
	}
	return Default_InviteMember_Catid
}

func (x *InviteMember) GetTeamname() string {
	if x != nil && x.Teamname != nil {
		return *x.Teamname
	}
	return ""
}

func (x *InviteMember) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *InviteMember) GetIsgroup() bool {
	if x != nil && x.Isgroup != nil {
		return *x.Isgroup
	}
	return Default_InviteMember_Isgroup
}

type ProcessTeamInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param    *TeamParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=7" json:"param,omitempty"`
	Type     *ETeamInviteType `protobuf:"varint,3,opt,name=type,enum=Cmd.ETeamInviteType,def=0" json:"type,omitempty"`
	Userguid *uint64          `protobuf:"varint,4,opt,name=userguid,def=0" json:"userguid,omitempty"`
}

// Default values for ProcessTeamInvite fields.
const (
	Default_ProcessTeamInvite_Cmd      = Command_SESSION_USER_TEAM_PROTOCMD
	Default_ProcessTeamInvite_Param    = TeamParam_TEAMPARAM_PROCESSINVITE
	Default_ProcessTeamInvite_Type     = ETeamInviteType_ETEAMINVITETYPE_MIN
	Default_ProcessTeamInvite_Userguid = uint64(0)
)

func (x *ProcessTeamInvite) Reset() {
	*x = ProcessTeamInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTeamInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTeamInvite) ProtoMessage() {}

func (x *ProcessTeamInvite) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTeamInvite.ProtoReflect.Descriptor instead.
func (*ProcessTeamInvite) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{18}
}

func (x *ProcessTeamInvite) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ProcessTeamInvite_Cmd
}

func (x *ProcessTeamInvite) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ProcessTeamInvite_Param
}

func (x *ProcessTeamInvite) GetType() ETeamInviteType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ProcessTeamInvite_Type
}

func (x *ProcessTeamInvite) GetUserguid() uint64 {
	if x != nil && x.Userguid != nil {
		return *x.Userguid
	}
	return Default_ProcessTeamInvite_Userguid
}

type TeamMemberApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=8" json:"param,omitempty"`
	Guid  *uint64    `protobuf:"varint,3,opt,name=guid,def=0" json:"guid,omitempty"`
}

// Default values for TeamMemberApply fields.
const (
	Default_TeamMemberApply_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_TeamMemberApply_Param = TeamParam_TEAMPARAM_MEMBERAPPLY
	Default_TeamMemberApply_Guid  = uint64(0)
)

func (x *TeamMemberApply) Reset() {
	*x = TeamMemberApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamMemberApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMemberApply) ProtoMessage() {}

func (x *TeamMemberApply) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMemberApply.ProtoReflect.Descriptor instead.
func (*TeamMemberApply) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{19}
}

func (x *TeamMemberApply) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamMemberApply_Cmd
}

func (x *TeamMemberApply) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamMemberApply_Param
}

func (x *TeamMemberApply) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_TeamMemberApply_Guid
}

type ProcessTeamApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param       *TeamParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=9" json:"param,omitempty"`
	Type        *ETeamApplyType `protobuf:"varint,3,opt,name=type,enum=Cmd.ETeamApplyType,def=0" json:"type,omitempty"`
	Userguid    *uint64         `protobuf:"varint,4,opt,name=userguid,def=0" json:"userguid,omitempty"`
	Groupteamid *uint64         `protobuf:"varint,5,opt,name=groupteamid,def=0" json:"groupteamid,omitempty"`
}

// Default values for ProcessTeamApply fields.
const (
	Default_ProcessTeamApply_Cmd         = Command_SESSION_USER_TEAM_PROTOCMD
	Default_ProcessTeamApply_Param       = TeamParam_TEAMPARAM_PROCESSAPPLY
	Default_ProcessTeamApply_Type        = ETeamApplyType_ETEAMAPPLYTYPE_MIN
	Default_ProcessTeamApply_Userguid    = uint64(0)
	Default_ProcessTeamApply_Groupteamid = uint64(0)
)

func (x *ProcessTeamApply) Reset() {
	*x = ProcessTeamApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTeamApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTeamApply) ProtoMessage() {}

func (x *ProcessTeamApply) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTeamApply.ProtoReflect.Descriptor instead.
func (*ProcessTeamApply) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{20}
}

func (x *ProcessTeamApply) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ProcessTeamApply_Cmd
}

func (x *ProcessTeamApply) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ProcessTeamApply_Param
}

func (x *ProcessTeamApply) GetType() ETeamApplyType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ProcessTeamApply_Type
}

func (x *ProcessTeamApply) GetUserguid() uint64 {
	if x != nil && x.Userguid != nil {
		return *x.Userguid
	}
	return Default_ProcessTeamApply_Userguid
}

func (x *ProcessTeamApply) GetGroupteamid() uint64 {
	if x != nil && x.Groupteamid != nil {
		return *x.Groupteamid
	}
	return Default_ProcessTeamApply_Groupteamid
}

type KickMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param   *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=10" json:"param,omitempty"`
	Userid  *uint64    `protobuf:"varint,3,opt,name=userid,def=0" json:"userid,omitempty"`
	Catid   *uint64    `protobuf:"varint,4,opt,name=catid,def=0" json:"catid,omitempty"`
	Isgroup *bool      `protobuf:"varint,5,opt,name=isgroup,def=0" json:"isgroup,omitempty"`
}

// Default values for KickMember fields.
const (
	Default_KickMember_Cmd     = Command_SESSION_USER_TEAM_PROTOCMD
	Default_KickMember_Param   = TeamParam_TEAMPARAM_KICKMEMBER
	Default_KickMember_Userid  = uint64(0)
	Default_KickMember_Catid   = uint64(0)
	Default_KickMember_Isgroup = bool(false)
)

func (x *KickMember) Reset() {
	*x = KickMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickMember) ProtoMessage() {}

func (x *KickMember) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickMember.ProtoReflect.Descriptor instead.
func (*KickMember) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{21}
}

func (x *KickMember) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_KickMember_Cmd
}

func (x *KickMember) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_KickMember_Param
}

func (x *KickMember) GetUserid() uint64 {
	if x != nil && x.Userid != nil {
		return *x.Userid
	}
	return Default_KickMember_Userid
}

func (x *KickMember) GetCatid() uint64 {
	if x != nil && x.Catid != nil {
		return *x.Catid
	}
	return Default_KickMember_Catid
}

func (x *KickMember) GetIsgroup() bool {
	if x != nil && x.Isgroup != nil {
		return *x.Isgroup
	}
	return Default_KickMember_Isgroup
}

type ExchangeLeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param  *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=11" json:"param,omitempty"`
	Userid *uint64    `protobuf:"varint,4,opt,name=userid,def=0" json:"userid,omitempty"`
}

// Default values for ExchangeLeader fields.
const (
	Default_ExchangeLeader_Cmd    = Command_SESSION_USER_TEAM_PROTOCMD
	Default_ExchangeLeader_Param  = TeamParam_TEAMPARAM_EXCHANGELEADER
	Default_ExchangeLeader_Userid = uint64(0)
)

func (x *ExchangeLeader) Reset() {
	*x = ExchangeLeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeLeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeLeader) ProtoMessage() {}

func (x *ExchangeLeader) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeLeader.ProtoReflect.Descriptor instead.
func (*ExchangeLeader) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{22}
}

func (x *ExchangeLeader) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExchangeLeader_Cmd
}

func (x *ExchangeLeader) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExchangeLeader_Param
}

func (x *ExchangeLeader) GetUserid() uint64 {
	if x != nil && x.Userid != nil {
		return *x.Userid
	}
	return Default_ExchangeLeader_Userid
}

type ExitTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param  *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=12" json:"param,omitempty"`
	Teamid *uint64    `protobuf:"varint,3,opt,name=teamid,def=0" json:"teamid,omitempty"`
}

// Default values for ExitTeam fields.
const (
	Default_ExitTeam_Cmd    = Command_SESSION_USER_TEAM_PROTOCMD
	Default_ExitTeam_Param  = TeamParam_TEAMPARAM_EXITTEAM
	Default_ExitTeam_Teamid = uint64(0)
)

func (x *ExitTeam) Reset() {
	*x = ExitTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitTeam) ProtoMessage() {}

func (x *ExitTeam) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitTeam.ProtoReflect.Descriptor instead.
func (*ExitTeam) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{23}
}

func (x *ExitTeam) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExitTeam_Cmd
}

func (x *ExitTeam) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExitTeam_Param
}

func (x *ExitTeam) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return Default_ExitTeam_Teamid
}

type EnterTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=13" json:"param,omitempty"`
	Data  *TeamData  `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

// Default values for EnterTeam fields.
const (
	Default_EnterTeam_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_EnterTeam_Param = TeamParam_TEAMPARAM_ENTERTEAM
)

func (x *EnterTeam) Reset() {
	*x = EnterTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterTeam) ProtoMessage() {}

func (x *EnterTeam) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterTeam.ProtoReflect.Descriptor instead.
func (*EnterTeam) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{24}
}

func (x *EnterTeam) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnterTeam_Cmd
}

func (x *EnterTeam) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnterTeam_Param
}

func (x *EnterTeam) GetData() *TeamData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MemberPosUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=14" json:"param,omitempty"`
	Id    *uint64    `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Pos   *ScenePos  `protobuf:"bytes,4,opt,name=pos" json:"pos,omitempty"`
}

// Default values for MemberPosUpdate fields.
const (
	Default_MemberPosUpdate_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_MemberPosUpdate_Param = TeamParam_TEAMPARAM_MEMBERPOSUPDATE
	Default_MemberPosUpdate_Id    = uint64(0)
)

func (x *MemberPosUpdate) Reset() {
	*x = MemberPosUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberPosUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberPosUpdate) ProtoMessage() {}

func (x *MemberPosUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberPosUpdate.ProtoReflect.Descriptor instead.
func (*MemberPosUpdate) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{25}
}

func (x *MemberPosUpdate) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MemberPosUpdate_Cmd
}

func (x *MemberPosUpdate) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MemberPosUpdate_Param
}

func (x *MemberPosUpdate) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_MemberPosUpdate_Id
}

func (x *MemberPosUpdate) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

type MemberDataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param   *TeamParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=15" json:"param,omitempty"`
	Id      *uint64       `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Members []*MemberData `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
}

// Default values for MemberDataUpdate fields.
const (
	Default_MemberDataUpdate_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_MemberDataUpdate_Param = TeamParam_TEAMPARAM_MEMBERDATAUPDATE
	Default_MemberDataUpdate_Id    = uint64(0)
)

func (x *MemberDataUpdate) Reset() {
	*x = MemberDataUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberDataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberDataUpdate) ProtoMessage() {}

func (x *MemberDataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberDataUpdate.ProtoReflect.Descriptor instead.
func (*MemberDataUpdate) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{26}
}

func (x *MemberDataUpdate) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MemberDataUpdate_Cmd
}

func (x *MemberDataUpdate) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MemberDataUpdate_Param
}

func (x *MemberDataUpdate) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_MemberDataUpdate_Id
}

func (x *MemberDataUpdate) GetMembers() []*MemberData {
	if x != nil {
		return x.Members
	}
	return nil
}

type LockTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param    *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=16" json:"param,omitempty"`
	Targetid *uint64    `protobuf:"varint,3,opt,name=targetid,def=0" json:"targetid,omitempty"`
}

// Default values for LockTarget fields.
const (
	Default_LockTarget_Cmd      = Command_SESSION_USER_TEAM_PROTOCMD
	Default_LockTarget_Param    = TeamParam_TEAMPARAM_LOCKTARGET
	Default_LockTarget_Targetid = uint64(0)
)

func (x *LockTarget) Reset() {
	*x = LockTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockTarget) ProtoMessage() {}

func (x *LockTarget) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockTarget.ProtoReflect.Descriptor instead.
func (*LockTarget) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{27}
}

func (x *LockTarget) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LockTarget_Cmd
}

func (x *LockTarget) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LockTarget_Param
}

func (x *LockTarget) GetTargetid() uint64 {
	if x != nil && x.Targetid != nil {
		return *x.Targetid
	}
	return Default_LockTarget_Targetid
}

type TeamSummon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param  *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=17" json:"param,omitempty"`
	Raidid *uint32    `protobuf:"varint,3,opt,name=raidid,def=0" json:"raidid,omitempty"`
}

// Default values for TeamSummon fields.
const (
	Default_TeamSummon_Cmd    = Command_SESSION_USER_TEAM_PROTOCMD
	Default_TeamSummon_Param  = TeamParam_TEAMPARAM_SUMMON
	Default_TeamSummon_Raidid = uint32(0)
)

func (x *TeamSummon) Reset() {
	*x = TeamSummon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamSummon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamSummon) ProtoMessage() {}

func (x *TeamSummon) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamSummon.ProtoReflect.Descriptor instead.
func (*TeamSummon) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{28}
}

func (x *TeamSummon) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamSummon_Cmd
}

func (x *TeamSummon) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamSummon_Param
}

func (x *TeamSummon) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return Default_TeamSummon_Raidid
}

type ClearApplyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=18" json:"param,omitempty"`
}

// Default values for ClearApplyList fields.
const (
	Default_ClearApplyList_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_ClearApplyList_Param = TeamParam_TEAMPARAM_CLEARAPPLYLIST
)

func (x *ClearApplyList) Reset() {
	*x = ClearApplyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearApplyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearApplyList) ProtoMessage() {}

func (x *ClearApplyList) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearApplyList.ProtoReflect.Descriptor instead.
func (*ClearApplyList) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{29}
}

func (x *ClearApplyList) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClearApplyList_Cmd
}

func (x *ClearApplyList) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClearApplyList_Param
}

type QuickEnter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=19" json:"param,omitempty"`
	Type  *uint32    `protobuf:"varint,3,opt,name=type,def=0" json:"type,omitempty"`
	Time  *uint32    `protobuf:"varint,4,opt,name=time,def=0" json:"time,omitempty"`
	Set   *bool      `protobuf:"varint,5,opt,name=set,def=0" json:"set,omitempty"`
}

// Default values for QuickEnter fields.
const (
	Default_QuickEnter_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_QuickEnter_Param = TeamParam_TEAMPARAM_QUICKENTER
	Default_QuickEnter_Type  = uint32(0)
	Default_QuickEnter_Time  = uint32(0)
	Default_QuickEnter_Set   = bool(false)
)

func (x *QuickEnter) Reset() {
	*x = QuickEnter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickEnter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickEnter) ProtoMessage() {}

func (x *QuickEnter) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickEnter.ProtoReflect.Descriptor instead.
func (*QuickEnter) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{30}
}

func (x *QuickEnter) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuickEnter_Cmd
}

func (x *QuickEnter) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuickEnter_Param
}

func (x *QuickEnter) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_QuickEnter_Type
}

func (x *QuickEnter) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_QuickEnter_Time
}

func (x *QuickEnter) GetSet() bool {
	if x != nil && x.Set != nil {
		return *x.Set
	}
	return Default_QuickEnter_Set
}

type SetTeamOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param *TeamParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=20" json:"param,omitempty"`
	Name  *string            `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Items []*TeamSummaryItem `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

// Default values for SetTeamOption fields.
const (
	Default_SetTeamOption_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_SetTeamOption_Param = TeamParam_TEAMPARAM_SETOPTION
)

func (x *SetTeamOption) Reset() {
	*x = SetTeamOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTeamOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTeamOption) ProtoMessage() {}

func (x *SetTeamOption) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTeamOption.ProtoReflect.Descriptor instead.
func (*SetTeamOption) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{31}
}

func (x *SetTeamOption) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SetTeamOption_Cmd
}

func (x *SetTeamOption) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SetTeamOption_Param
}

func (x *SetTeamOption) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SetTeamOption) GetItems() []*TeamSummaryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type QueryUserTeamInfoTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param       *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=21" json:"param,omitempty"`
	Charid      *uint64    `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Teamid      *uint64    `protobuf:"varint,4,opt,name=teamid,def=0" json:"teamid,omitempty"`
	Groupteamid *uint64    `protobuf:"varint,5,opt,name=groupteamid,def=0" json:"groupteamid,omitempty"`
}

// Default values for QueryUserTeamInfoTeamCmd fields.
const (
	Default_QueryUserTeamInfoTeamCmd_Cmd         = Command_SESSION_USER_TEAM_PROTOCMD
	Default_QueryUserTeamInfoTeamCmd_Param       = TeamParam_TEAMPARAM_QUERYUSERTEAMINFO
	Default_QueryUserTeamInfoTeamCmd_Charid      = uint64(0)
	Default_QueryUserTeamInfoTeamCmd_Teamid      = uint64(0)
	Default_QueryUserTeamInfoTeamCmd_Groupteamid = uint64(0)
)

func (x *QueryUserTeamInfoTeamCmd) Reset() {
	*x = QueryUserTeamInfoTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserTeamInfoTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserTeamInfoTeamCmd) ProtoMessage() {}

func (x *QueryUserTeamInfoTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserTeamInfoTeamCmd.ProtoReflect.Descriptor instead.
func (*QueryUserTeamInfoTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{32}
}

func (x *QueryUserTeamInfoTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryUserTeamInfoTeamCmd_Cmd
}

func (x *QueryUserTeamInfoTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryUserTeamInfoTeamCmd_Param
}

func (x *QueryUserTeamInfoTeamCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_QueryUserTeamInfoTeamCmd_Charid
}

func (x *QueryUserTeamInfoTeamCmd) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return Default_QueryUserTeamInfoTeamCmd_Teamid
}

func (x *QueryUserTeamInfoTeamCmd) GetGroupteamid() uint64 {
	if x != nil && x.Groupteamid != nil {
		return *x.Groupteamid
	}
	return Default_QueryUserTeamInfoTeamCmd_Groupteamid
}

type SetMemberOptionTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param      *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=22" json:"param,omitempty"`
	Autofollow *bool      `protobuf:"varint,3,opt,name=autofollow,def=0" json:"autofollow,omitempty"`
}

// Default values for SetMemberOptionTeamCmd fields.
const (
	Default_SetMemberOptionTeamCmd_Cmd        = Command_SESSION_USER_TEAM_PROTOCMD
	Default_SetMemberOptionTeamCmd_Param      = TeamParam_TEAMPARAM_SETMEMBEROPTION
	Default_SetMemberOptionTeamCmd_Autofollow = bool(false)
)

func (x *SetMemberOptionTeamCmd) Reset() {
	*x = SetMemberOptionTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMemberOptionTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMemberOptionTeamCmd) ProtoMessage() {}

func (x *SetMemberOptionTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMemberOptionTeamCmd.ProtoReflect.Descriptor instead.
func (*SetMemberOptionTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{33}
}

func (x *SetMemberOptionTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SetMemberOptionTeamCmd_Cmd
}

func (x *SetMemberOptionTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SetMemberOptionTeamCmd_Param
}

func (x *SetMemberOptionTeamCmd) GetAutofollow() bool {
	if x != nil && x.Autofollow != nil {
		return *x.Autofollow
	}
	return Default_SetMemberOptionTeamCmd_Autofollow
}

type MemberWantedQuest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid    *uint64       `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Questid   *uint32       `protobuf:"varint,2,opt,name=questid,def=0" json:"questid,omitempty"`
	Action    *EQuestAction `protobuf:"varint,3,opt,name=action,enum=Cmd.EQuestAction,def=0" json:"action,omitempty"`
	Step      *uint32       `protobuf:"varint,4,opt,name=step,def=0" json:"step,omitempty"`
	Questdata *QuestStep    `protobuf:"bytes,5,opt,name=questdata" json:"questdata,omitempty"`
}

// Default values for MemberWantedQuest fields.
const (
	Default_MemberWantedQuest_Charid  = uint64(0)
	Default_MemberWantedQuest_Questid = uint32(0)
	Default_MemberWantedQuest_Action  = EQuestAction_EQUESTACTION_MIN
	Default_MemberWantedQuest_Step    = uint32(0)
)

func (x *MemberWantedQuest) Reset() {
	*x = MemberWantedQuest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberWantedQuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberWantedQuest) ProtoMessage() {}

func (x *MemberWantedQuest) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberWantedQuest.ProtoReflect.Descriptor instead.
func (*MemberWantedQuest) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{34}
}

func (x *MemberWantedQuest) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_MemberWantedQuest_Charid
}

func (x *MemberWantedQuest) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return Default_MemberWantedQuest_Questid
}

func (x *MemberWantedQuest) GetAction() EQuestAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_MemberWantedQuest_Action
}

func (x *MemberWantedQuest) GetStep() uint32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return Default_MemberWantedQuest_Step
}

func (x *MemberWantedQuest) GetQuestdata() *QuestStep {
	if x != nil {
		return x.Questdata
	}
	return nil
}

type QuestWantedQuestTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param  *TeamParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=23" json:"param,omitempty"`
	Quests []*MemberWantedQuest `protobuf:"bytes,3,rep,name=quests" json:"quests,omitempty"`
}

// Default values for QuestWantedQuestTeamCmd fields.
const (
	Default_QuestWantedQuestTeamCmd_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_QuestWantedQuestTeamCmd_Param = TeamParam_TEAMPARAM_QUERYWANTEDQUEST
)

func (x *QuestWantedQuestTeamCmd) Reset() {
	*x = QuestWantedQuestTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestWantedQuestTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestWantedQuestTeamCmd) ProtoMessage() {}

func (x *QuestWantedQuestTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestWantedQuestTeamCmd.ProtoReflect.Descriptor instead.
func (*QuestWantedQuestTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{35}
}

func (x *QuestWantedQuestTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuestWantedQuestTeamCmd_Cmd
}

func (x *QuestWantedQuestTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuestWantedQuestTeamCmd_Param
}

func (x *QuestWantedQuestTeamCmd) GetQuests() []*MemberWantedQuest {
	if x != nil {
		return x.Quests
	}
	return nil
}

type UpdateWantedQuestTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param *TeamParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=24" json:"param,omitempty"`
	Quest *MemberWantedQuest `protobuf:"bytes,3,opt,name=quest" json:"quest,omitempty"`
}

// Default values for UpdateWantedQuestTeamCmd fields.
const (
	Default_UpdateWantedQuestTeamCmd_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_UpdateWantedQuestTeamCmd_Param = TeamParam_TEAMPARAM_UPDATEWANTEDQUEST
)

func (x *UpdateWantedQuestTeamCmd) Reset() {
	*x = UpdateWantedQuestTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWantedQuestTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWantedQuestTeamCmd) ProtoMessage() {}

func (x *UpdateWantedQuestTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWantedQuestTeamCmd.ProtoReflect.Descriptor instead.
func (*UpdateWantedQuestTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateWantedQuestTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateWantedQuestTeamCmd_Cmd
}

func (x *UpdateWantedQuestTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateWantedQuestTeamCmd_Param
}

func (x *UpdateWantedQuestTeamCmd) GetQuest() *MemberWantedQuest {
	if x != nil {
		return x.Quest
	}
	return nil
}

type AcceptHelpWantedTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param     *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=25" json:"param,omitempty"`
	Questid   *uint32    `protobuf:"varint,3,opt,name=questid,def=0" json:"questid,omitempty"`
	Isabandon *bool      `protobuf:"varint,4,opt,name=isabandon,def=0" json:"isabandon,omitempty"`
}

// Default values for AcceptHelpWantedTeamCmd fields.
const (
	Default_AcceptHelpWantedTeamCmd_Cmd       = Command_SESSION_USER_TEAM_PROTOCMD
	Default_AcceptHelpWantedTeamCmd_Param     = TeamParam_TEAMPARAM_ACCEPTHELPWANTED
	Default_AcceptHelpWantedTeamCmd_Questid   = uint32(0)
	Default_AcceptHelpWantedTeamCmd_Isabandon = bool(false)
)

func (x *AcceptHelpWantedTeamCmd) Reset() {
	*x = AcceptHelpWantedTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptHelpWantedTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptHelpWantedTeamCmd) ProtoMessage() {}

func (x *AcceptHelpWantedTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptHelpWantedTeamCmd.ProtoReflect.Descriptor instead.
func (*AcceptHelpWantedTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{37}
}

func (x *AcceptHelpWantedTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AcceptHelpWantedTeamCmd_Cmd
}

func (x *AcceptHelpWantedTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AcceptHelpWantedTeamCmd_Param
}

func (x *AcceptHelpWantedTeamCmd) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return Default_AcceptHelpWantedTeamCmd_Questid
}

func (x *AcceptHelpWantedTeamCmd) GetIsabandon() bool {
	if x != nil && x.Isabandon != nil {
		return *x.Isabandon
	}
	return Default_AcceptHelpWantedTeamCmd_Isabandon
}

type UpdateHelpWantedTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param   *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=26" json:"param,omitempty"`
	Addlist []uint32   `protobuf:"varint,3,rep,name=addlist" json:"addlist,omitempty"`
	Dellist []uint32   `protobuf:"varint,4,rep,name=dellist" json:"dellist,omitempty"`
}

// Default values for UpdateHelpWantedTeamCmd fields.
const (
	Default_UpdateHelpWantedTeamCmd_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_UpdateHelpWantedTeamCmd_Param = TeamParam_TEAMPARAM_UPDATEHELPWANTED
)

func (x *UpdateHelpWantedTeamCmd) Reset() {
	*x = UpdateHelpWantedTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHelpWantedTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHelpWantedTeamCmd) ProtoMessage() {}

func (x *UpdateHelpWantedTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHelpWantedTeamCmd.ProtoReflect.Descriptor instead.
func (*UpdateHelpWantedTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateHelpWantedTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateHelpWantedTeamCmd_Cmd
}

func (x *UpdateHelpWantedTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateHelpWantedTeamCmd_Param
}

func (x *UpdateHelpWantedTeamCmd) GetAddlist() []uint32 {
	if x != nil {
		return x.Addlist
	}
	return nil
}

func (x *UpdateHelpWantedTeamCmd) GetDellist() []uint32 {
	if x != nil {
		return x.Dellist
	}
	return nil
}

type QueryHelpWantedTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param    *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=27" json:"param,omitempty"`
	Questids []uint32   `protobuf:"varint,3,rep,name=questids" json:"questids,omitempty"`
}

// Default values for QueryHelpWantedTeamCmd fields.
const (
	Default_QueryHelpWantedTeamCmd_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_QueryHelpWantedTeamCmd_Param = TeamParam_TEAMPARAM_QUERYHELPWANTED
)

func (x *QueryHelpWantedTeamCmd) Reset() {
	*x = QueryHelpWantedTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryHelpWantedTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryHelpWantedTeamCmd) ProtoMessage() {}

func (x *QueryHelpWantedTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryHelpWantedTeamCmd.ProtoReflect.Descriptor instead.
func (*QueryHelpWantedTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{39}
}

func (x *QueryHelpWantedTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryHelpWantedTeamCmd_Cmd
}

func (x *QueryHelpWantedTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryHelpWantedTeamCmd_Param
}

func (x *QueryHelpWantedTeamCmd) GetQuestids() []uint32 {
	if x != nil {
		return x.Questids
	}
	return nil
}

type MemberCat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ownerid    *uint64 `protobuf:"varint,1,opt,name=ownerid,def=0" json:"ownerid,omitempty"`
	Id         *uint64 `protobuf:"varint,2,opt,name=id,def=0" json:"id,omitempty"`
	Catid      *uint32 `protobuf:"varint,3,opt,name=catid,def=0" json:"catid,omitempty"`
	Relivetime *uint32 `protobuf:"varint,4,opt,name=relivetime,def=0" json:"relivetime,omitempty"`
	Lv         *uint32 `protobuf:"varint,5,opt,name=lv,def=0" json:"lv,omitempty"`
	Expiretime *uint32 `protobuf:"varint,6,opt,name=expiretime,def=0" json:"expiretime,omitempty"`
	Name       *string `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
}

// Default values for MemberCat fields.
const (
	Default_MemberCat_Ownerid    = uint64(0)
	Default_MemberCat_Id         = uint64(0)
	Default_MemberCat_Catid      = uint32(0)
	Default_MemberCat_Relivetime = uint32(0)
	Default_MemberCat_Lv         = uint32(0)
	Default_MemberCat_Expiretime = uint32(0)
)

func (x *MemberCat) Reset() {
	*x = MemberCat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberCat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberCat) ProtoMessage() {}

func (x *MemberCat) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberCat.ProtoReflect.Descriptor instead.
func (*MemberCat) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{40}
}

func (x *MemberCat) GetOwnerid() uint64 {
	if x != nil && x.Ownerid != nil {
		return *x.Ownerid
	}
	return Default_MemberCat_Ownerid
}

func (x *MemberCat) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_MemberCat_Id
}

func (x *MemberCat) GetCatid() uint32 {
	if x != nil && x.Catid != nil {
		return *x.Catid
	}
	return Default_MemberCat_Catid
}

func (x *MemberCat) GetRelivetime() uint32 {
	if x != nil && x.Relivetime != nil {
		return *x.Relivetime
	}
	return Default_MemberCat_Relivetime
}

func (x *MemberCat) GetLv() uint32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return Default_MemberCat_Lv
}

func (x *MemberCat) GetExpiretime() uint32 {
	if x != nil && x.Expiretime != nil {
		return *x.Expiretime
	}
	return Default_MemberCat_Expiretime
}

func (x *MemberCat) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type QueryMemberCatTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=28" json:"param,omitempty"`
}

// Default values for QueryMemberCatTeamCmd fields.
const (
	Default_QueryMemberCatTeamCmd_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_QueryMemberCatTeamCmd_Param = TeamParam_TEAMPARAM_QUERYMEMBERCAT
)

func (x *QueryMemberCatTeamCmd) Reset() {
	*x = QueryMemberCatTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMemberCatTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMemberCatTeamCmd) ProtoMessage() {}

func (x *QueryMemberCatTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMemberCatTeamCmd.ProtoReflect.Descriptor instead.
func (*QueryMemberCatTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{41}
}

func (x *QueryMemberCatTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryMemberCatTeamCmd_Cmd
}

func (x *QueryMemberCatTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryMemberCatTeamCmd_Param
}

type MemberCatUpdateTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param   *TeamParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=29" json:"param,omitempty"`
	Updates []*MemberCat `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
	Dels    []*MemberCat `protobuf:"bytes,4,rep,name=dels" json:"dels,omitempty"`
}

// Default values for MemberCatUpdateTeam fields.
const (
	Default_MemberCatUpdateTeam_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_MemberCatUpdateTeam_Param = TeamParam_TEAMPARAM_MEMBERCAT_UPDATE
)

func (x *MemberCatUpdateTeam) Reset() {
	*x = MemberCatUpdateTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberCatUpdateTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberCatUpdateTeam) ProtoMessage() {}

func (x *MemberCatUpdateTeam) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberCatUpdateTeam.ProtoReflect.Descriptor instead.
func (*MemberCatUpdateTeam) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{42}
}

func (x *MemberCatUpdateTeam) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MemberCatUpdateTeam_Cmd
}

func (x *MemberCatUpdateTeam) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MemberCatUpdateTeam_Param
}

func (x *MemberCatUpdateTeam) GetUpdates() []*MemberCat {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *MemberCatUpdateTeam) GetDels() []*MemberCat {
	if x != nil {
		return x.Dels
	}
	return nil
}

type CancelApplyTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param  *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=31" json:"param,omitempty"`
	Teamid *uint64    `protobuf:"varint,3,opt,name=teamid,def=0" json:"teamid,omitempty"`
}

// Default values for CancelApplyTeamCmd fields.
const (
	Default_CancelApplyTeamCmd_Cmd    = Command_SESSION_USER_TEAM_PROTOCMD
	Default_CancelApplyTeamCmd_Param  = TeamParam_TEAMPARAM_CANCEL_APPLY
	Default_CancelApplyTeamCmd_Teamid = uint64(0)
)

func (x *CancelApplyTeamCmd) Reset() {
	*x = CancelApplyTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelApplyTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelApplyTeamCmd) ProtoMessage() {}

func (x *CancelApplyTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelApplyTeamCmd.ProtoReflect.Descriptor instead.
func (*CancelApplyTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{43}
}

func (x *CancelApplyTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CancelApplyTeamCmd_Cmd
}

func (x *CancelApplyTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CancelApplyTeamCmd_Param
}

func (x *CancelApplyTeamCmd) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return Default_CancelApplyTeamCmd_Teamid
}

type QueryMemberTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param   *TeamParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=32" json:"param,omitempty"`
	Teamid  *uint64       `protobuf:"varint,3,opt,name=teamid,def=0" json:"teamid,omitempty"`
	Members []*TeamMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
}

// Default values for QueryMemberTeamCmd fields.
const (
	Default_QueryMemberTeamCmd_Cmd    = Command_SESSION_USER_TEAM_PROTOCMD
	Default_QueryMemberTeamCmd_Param  = TeamParam_TEAMPARAM_QUERY_MEMBER
	Default_QueryMemberTeamCmd_Teamid = uint64(0)
)

func (x *QueryMemberTeamCmd) Reset() {
	*x = QueryMemberTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMemberTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMemberTeamCmd) ProtoMessage() {}

func (x *QueryMemberTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMemberTeamCmd.ProtoReflect.Descriptor instead.
func (*QueryMemberTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{44}
}

func (x *QueryMemberTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryMemberTeamCmd_Cmd
}

func (x *QueryMemberTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryMemberTeamCmd_Param
}

func (x *QueryMemberTeamCmd) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return Default_QueryMemberTeamCmd_Teamid
}

func (x *QueryMemberTeamCmd) GetMembers() []*TeamMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type UserApplyTeamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teamid     *uint64 `protobuf:"varint,1,opt,name=teamid,def=0" json:"teamid,omitempty"`
	Createtime *uint32 `protobuf:"varint,2,opt,name=createtime,def=0" json:"createtime,omitempty"`
}

// Default values for UserApplyTeamData fields.
const (
	Default_UserApplyTeamData_Teamid     = uint64(0)
	Default_UserApplyTeamData_Createtime = uint32(0)
)

func (x *UserApplyTeamData) Reset() {
	*x = UserApplyTeamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserApplyTeamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserApplyTeamData) ProtoMessage() {}

func (x *UserApplyTeamData) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserApplyTeamData.ProtoReflect.Descriptor instead.
func (*UserApplyTeamData) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{45}
}

func (x *UserApplyTeamData) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return Default_UserApplyTeamData_Teamid
}

func (x *UserApplyTeamData) GetCreatetime() uint32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return Default_UserApplyTeamData_Createtime
}

type UserApplyUpdateTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param   *TeamParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=33" json:"param,omitempty"`
	Updates []*UserApplyTeamData `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
	Deletes []uint64             `protobuf:"varint,4,rep,name=deletes" json:"deletes,omitempty"`
}

// Default values for UserApplyUpdateTeamCmd fields.
const (
	Default_UserApplyUpdateTeamCmd_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_UserApplyUpdateTeamCmd_Param = TeamParam_TEAMPARAM_USERAPPLYUPDATE
)

func (x *UserApplyUpdateTeamCmd) Reset() {
	*x = UserApplyUpdateTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserApplyUpdateTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserApplyUpdateTeamCmd) ProtoMessage() {}

func (x *UserApplyUpdateTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserApplyUpdateTeamCmd.ProtoReflect.Descriptor instead.
func (*UserApplyUpdateTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{46}
}

func (x *UserApplyUpdateTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserApplyUpdateTeamCmd_Cmd
}

func (x *UserApplyUpdateTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserApplyUpdateTeamCmd_Param
}

func (x *UserApplyUpdateTeamCmd) GetUpdates() []*UserApplyTeamData {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *UserApplyUpdateTeamCmd) GetDeletes() []uint64 {
	if x != nil {
		return x.Deletes
	}
	return nil
}

type InviteGroupTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param      *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=34" json:"param,omitempty"`
	Charid     *uint64    `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Leadername *string    `protobuf:"bytes,4,opt,name=leadername" json:"leadername,omitempty"`
	Mycharid   *uint64    `protobuf:"varint,5,opt,name=mycharid,def=0" json:"mycharid,omitempty"`
}

// Default values for InviteGroupTeamCmd fields.
const (
	Default_InviteGroupTeamCmd_Cmd      = Command_SESSION_USER_TEAM_PROTOCMD
	Default_InviteGroupTeamCmd_Param    = TeamParam_TEAMPARAM_INVITE_GROUP
	Default_InviteGroupTeamCmd_Charid   = uint64(0)
	Default_InviteGroupTeamCmd_Mycharid = uint64(0)
)

func (x *InviteGroupTeamCmd) Reset() {
	*x = InviteGroupTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteGroupTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteGroupTeamCmd) ProtoMessage() {}

func (x *InviteGroupTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteGroupTeamCmd.ProtoReflect.Descriptor instead.
func (*InviteGroupTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{47}
}

func (x *InviteGroupTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InviteGroupTeamCmd_Cmd
}

func (x *InviteGroupTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InviteGroupTeamCmd_Param
}

func (x *InviteGroupTeamCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_InviteGroupTeamCmd_Charid
}

func (x *InviteGroupTeamCmd) GetLeadername() string {
	if x != nil && x.Leadername != nil {
		return *x.Leadername
	}
	return ""
}

func (x *InviteGroupTeamCmd) GetMycharid() uint64 {
	if x != nil && x.Mycharid != nil {
		return *x.Mycharid
	}
	return Default_InviteGroupTeamCmd_Mycharid
}

type ProcessInviteGroupTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param    *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=35" json:"param,omitempty"`
	Agree    *bool      `protobuf:"varint,3,opt,name=agree,def=0" json:"agree,omitempty"`
	Charid   *uint64    `protobuf:"varint,4,opt,name=charid,def=0" json:"charid,omitempty"`
	Mycharid *uint64    `protobuf:"varint,5,opt,name=mycharid,def=0" json:"mycharid,omitempty"`
	Fighting *bool      `protobuf:"varint,6,opt,name=fighting,def=0" json:"fighting,omitempty"`
}

// Default values for ProcessInviteGroupTeamCmd fields.
const (
	Default_ProcessInviteGroupTeamCmd_Cmd      = Command_SESSION_USER_TEAM_PROTOCMD
	Default_ProcessInviteGroupTeamCmd_Param    = TeamParam_TEAMPARAM_PROCESS_INVITE_GROUP
	Default_ProcessInviteGroupTeamCmd_Agree    = bool(false)
	Default_ProcessInviteGroupTeamCmd_Charid   = uint64(0)
	Default_ProcessInviteGroupTeamCmd_Mycharid = uint64(0)
	Default_ProcessInviteGroupTeamCmd_Fighting = bool(false)
)

func (x *ProcessInviteGroupTeamCmd) Reset() {
	*x = ProcessInviteGroupTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInviteGroupTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInviteGroupTeamCmd) ProtoMessage() {}

func (x *ProcessInviteGroupTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInviteGroupTeamCmd.ProtoReflect.Descriptor instead.
func (*ProcessInviteGroupTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{48}
}

func (x *ProcessInviteGroupTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ProcessInviteGroupTeamCmd_Cmd
}

func (x *ProcessInviteGroupTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ProcessInviteGroupTeamCmd_Param
}

func (x *ProcessInviteGroupTeamCmd) GetAgree() bool {
	if x != nil && x.Agree != nil {
		return *x.Agree
	}
	return Default_ProcessInviteGroupTeamCmd_Agree
}

func (x *ProcessInviteGroupTeamCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_ProcessInviteGroupTeamCmd_Charid
}

func (x *ProcessInviteGroupTeamCmd) GetMycharid() uint64 {
	if x != nil && x.Mycharid != nil {
		return *x.Mycharid
	}
	return Default_ProcessInviteGroupTeamCmd_Mycharid
}

func (x *ProcessInviteGroupTeamCmd) GetFighting() bool {
	if x != nil && x.Fighting != nil {
		return *x.Fighting
	}
	return Default_ProcessInviteGroupTeamCmd_Fighting
}

type DissolveGroupTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=36" json:"param,omitempty"`
}

// Default values for DissolveGroupTeamCmd fields.
const (
	Default_DissolveGroupTeamCmd_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_DissolveGroupTeamCmd_Param = TeamParam_TEAMPARAM_DISSOLVE_GROUP
)

func (x *DissolveGroupTeamCmd) Reset() {
	*x = DissolveGroupTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DissolveGroupTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DissolveGroupTeamCmd) ProtoMessage() {}

func (x *DissolveGroupTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DissolveGroupTeamCmd.ProtoReflect.Descriptor instead.
func (*DissolveGroupTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{49}
}

func (x *DissolveGroupTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DissolveGroupTeamCmd_Cmd
}

func (x *DissolveGroupTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DissolveGroupTeamCmd_Param
}

type ChangeGroupLeaderTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param  *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=37" json:"param,omitempty"`
	Charid *uint64    `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
}

// Default values for ChangeGroupLeaderTeamCmd fields.
const (
	Default_ChangeGroupLeaderTeamCmd_Cmd    = Command_SESSION_USER_TEAM_PROTOCMD
	Default_ChangeGroupLeaderTeamCmd_Param  = TeamParam_TEAMPARAM_CHANGE_GROUP_LEADER
	Default_ChangeGroupLeaderTeamCmd_Charid = uint64(0)
)

func (x *ChangeGroupLeaderTeamCmd) Reset() {
	*x = ChangeGroupLeaderTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeGroupLeaderTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeGroupLeaderTeamCmd) ProtoMessage() {}

func (x *ChangeGroupLeaderTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeGroupLeaderTeamCmd.ProtoReflect.Descriptor instead.
func (*ChangeGroupLeaderTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{50}
}

func (x *ChangeGroupLeaderTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChangeGroupLeaderTeamCmd_Cmd
}

func (x *ChangeGroupLeaderTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChangeGroupLeaderTeamCmd_Param
}

func (x *ChangeGroupLeaderTeamCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_ChangeGroupLeaderTeamCmd_Charid
}

type GroupUpdateNtfTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=38" json:"param,omitempty"`
}

// Default values for GroupUpdateNtfTeamCmd fields.
const (
	Default_GroupUpdateNtfTeamCmd_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_GroupUpdateNtfTeamCmd_Param = TeamParam_TEAMPARAM_GROUP_UPDATE_NTF
)

func (x *GroupUpdateNtfTeamCmd) Reset() {
	*x = GroupUpdateNtfTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupUpdateNtfTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupUpdateNtfTeamCmd) ProtoMessage() {}

func (x *GroupUpdateNtfTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupUpdateNtfTeamCmd.ProtoReflect.Descriptor instead.
func (*GroupUpdateNtfTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{51}
}

func (x *GroupUpdateNtfTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GroupUpdateNtfTeamCmd_Cmd
}

func (x *GroupUpdateNtfTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GroupUpdateNtfTeamCmd_Param
}

type QueryGroupTeamApplyListTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param  *TeamParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=39" json:"param,omitempty"`
	Teamid *uint64      `protobuf:"varint,3,opt,name=teamid" json:"teamid,omitempty"`
	Applys []*TeamApply `protobuf:"bytes,4,rep,name=applys" json:"applys,omitempty"`
}

// Default values for QueryGroupTeamApplyListTeamCmd fields.
const (
	Default_QueryGroupTeamApplyListTeamCmd_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_QueryGroupTeamApplyListTeamCmd_Param = TeamParam_TEAMPARAM_QUERY_GROUP_TEAM_APPLY
)

func (x *QueryGroupTeamApplyListTeamCmd) Reset() {
	*x = QueryGroupTeamApplyListTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGroupTeamApplyListTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGroupTeamApplyListTeamCmd) ProtoMessage() {}

func (x *QueryGroupTeamApplyListTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGroupTeamApplyListTeamCmd.ProtoReflect.Descriptor instead.
func (*QueryGroupTeamApplyListTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{52}
}

func (x *QueryGroupTeamApplyListTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryGroupTeamApplyListTeamCmd_Cmd
}

func (x *QueryGroupTeamApplyListTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryGroupTeamApplyListTeamCmd_Param
}

func (x *QueryGroupTeamApplyListTeamCmd) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return 0
}

func (x *QueryGroupTeamApplyListTeamCmd) GetApplys() []*TeamApply {
	if x != nil {
		return x.Applys
	}
	return nil
}

type TeamGroupApplyUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param   *TeamParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=40" json:"param,omitempty"`
	Updates []*TeamGroupApply `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
	Deletes []uint64          `protobuf:"varint,4,rep,name=deletes" json:"deletes,omitempty"`
}

// Default values for TeamGroupApplyUpdate fields.
const (
	Default_TeamGroupApplyUpdate_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_TeamGroupApplyUpdate_Param = TeamParam_TEAMPARAM_GROUP_APPLY_UPDATE
)

func (x *TeamGroupApplyUpdate) Reset() {
	*x = TeamGroupApplyUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamGroupApplyUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamGroupApplyUpdate) ProtoMessage() {}

func (x *TeamGroupApplyUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamGroupApplyUpdate.ProtoReflect.Descriptor instead.
func (*TeamGroupApplyUpdate) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{53}
}

func (x *TeamGroupApplyUpdate) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamGroupApplyUpdate_Cmd
}

func (x *TeamGroupApplyUpdate) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamGroupApplyUpdate_Param
}

func (x *TeamGroupApplyUpdate) GetUpdates() []*TeamGroupApply {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *TeamGroupApplyUpdate) GetDeletes() []uint64 {
	if x != nil {
		return x.Deletes
	}
	return nil
}

type TeamGroupApplyTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param       *TeamParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=41" json:"param,omitempty"`
	Applyteamid *uint64         `protobuf:"varint,3,opt,name=applyteamid,def=0" json:"applyteamid,omitempty"`
	Applyinfo   *TeamGroupApply `protobuf:"bytes,4,opt,name=applyinfo" json:"applyinfo,omitempty"`
	Cancel      *bool           `protobuf:"varint,5,opt,name=cancel,def=0" json:"cancel,omitempty"`
}

// Default values for TeamGroupApplyTeamCmd fields.
const (
	Default_TeamGroupApplyTeamCmd_Cmd         = Command_SESSION_USER_TEAM_PROTOCMD
	Default_TeamGroupApplyTeamCmd_Param       = TeamParam_TEAMPARAM_GROUP_APPLY
	Default_TeamGroupApplyTeamCmd_Applyteamid = uint64(0)
	Default_TeamGroupApplyTeamCmd_Cancel      = bool(false)
)

func (x *TeamGroupApplyTeamCmd) Reset() {
	*x = TeamGroupApplyTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamGroupApplyTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamGroupApplyTeamCmd) ProtoMessage() {}

func (x *TeamGroupApplyTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamGroupApplyTeamCmd.ProtoReflect.Descriptor instead.
func (*TeamGroupApplyTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{54}
}

func (x *TeamGroupApplyTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamGroupApplyTeamCmd_Cmd
}

func (x *TeamGroupApplyTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamGroupApplyTeamCmd_Param
}

func (x *TeamGroupApplyTeamCmd) GetApplyteamid() uint64 {
	if x != nil && x.Applyteamid != nil {
		return *x.Applyteamid
	}
	return Default_TeamGroupApplyTeamCmd_Applyteamid
}

func (x *TeamGroupApplyTeamCmd) GetApplyinfo() *TeamGroupApply {
	if x != nil {
		return x.Applyinfo
	}
	return nil
}

func (x *TeamGroupApplyTeamCmd) GetCancel() bool {
	if x != nil && x.Cancel != nil {
		return *x.Cancel
	}
	return Default_TeamGroupApplyTeamCmd_Cancel
}

type ProcessGroupApplyTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param  *TeamParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=42" json:"param,omitempty"`
	Etype  *ETeamApplyType `protobuf:"varint,3,opt,name=etype,enum=Cmd.ETeamApplyType,def=0" json:"etype,omitempty"`
	Teamid *uint64         `protobuf:"varint,4,opt,name=teamid,def=0" json:"teamid,omitempty"`
}

// Default values for ProcessGroupApplyTeamCmd fields.
const (
	Default_ProcessGroupApplyTeamCmd_Cmd    = Command_SESSION_USER_TEAM_PROTOCMD
	Default_ProcessGroupApplyTeamCmd_Param  = TeamParam_TEAMPARAM_PROCESS_GROUP_APPLY
	Default_ProcessGroupApplyTeamCmd_Etype  = ETeamApplyType_ETEAMAPPLYTYPE_MIN
	Default_ProcessGroupApplyTeamCmd_Teamid = uint64(0)
)

func (x *ProcessGroupApplyTeamCmd) Reset() {
	*x = ProcessGroupApplyTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessGroupApplyTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessGroupApplyTeamCmd) ProtoMessage() {}

func (x *ProcessGroupApplyTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessGroupApplyTeamCmd.ProtoReflect.Descriptor instead.
func (*ProcessGroupApplyTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{55}
}

func (x *ProcessGroupApplyTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ProcessGroupApplyTeamCmd_Cmd
}

func (x *ProcessGroupApplyTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ProcessGroupApplyTeamCmd_Param
}

func (x *ProcessGroupApplyTeamCmd) GetEtype() ETeamApplyType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_ProcessGroupApplyTeamCmd_Etype
}

func (x *ProcessGroupApplyTeamCmd) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return Default_ProcessGroupApplyTeamCmd_Teamid
}

type MyGroupApplyTeamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teamid     *uint64 `protobuf:"varint,1,opt,name=teamid,def=0" json:"teamid,omitempty"`
	Createtime *uint32 `protobuf:"varint,2,opt,name=createtime,def=0" json:"createtime,omitempty"`
}

// Default values for MyGroupApplyTeamData fields.
const (
	Default_MyGroupApplyTeamData_Teamid     = uint64(0)
	Default_MyGroupApplyTeamData_Createtime = uint32(0)
)

func (x *MyGroupApplyTeamData) Reset() {
	*x = MyGroupApplyTeamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyGroupApplyTeamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyGroupApplyTeamData) ProtoMessage() {}

func (x *MyGroupApplyTeamData) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyGroupApplyTeamData.ProtoReflect.Descriptor instead.
func (*MyGroupApplyTeamData) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{56}
}

func (x *MyGroupApplyTeamData) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return Default_MyGroupApplyTeamData_Teamid
}

func (x *MyGroupApplyTeamData) GetCreatetime() uint32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return Default_MyGroupApplyTeamData_Createtime
}

type MyGroupApplyUpdateTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command                `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param   *TeamParam              `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=43" json:"param,omitempty"`
	Updates []*MyGroupApplyTeamData `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
	Deletes []uint64                `protobuf:"varint,4,rep,name=deletes" json:"deletes,omitempty"`
}

// Default values for MyGroupApplyUpdateTeamCmd fields.
const (
	Default_MyGroupApplyUpdateTeamCmd_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_MyGroupApplyUpdateTeamCmd_Param = TeamParam_TEAMPARAM_GROUP_MYAPPLY_UPDATE
)

func (x *MyGroupApplyUpdateTeamCmd) Reset() {
	*x = MyGroupApplyUpdateTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyGroupApplyUpdateTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyGroupApplyUpdateTeamCmd) ProtoMessage() {}

func (x *MyGroupApplyUpdateTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyGroupApplyUpdateTeamCmd.ProtoReflect.Descriptor instead.
func (*MyGroupApplyUpdateTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{57}
}

func (x *MyGroupApplyUpdateTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MyGroupApplyUpdateTeamCmd_Cmd
}

func (x *MyGroupApplyUpdateTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MyGroupApplyUpdateTeamCmd_Param
}

func (x *MyGroupApplyUpdateTeamCmd) GetUpdates() []*MyGroupApplyTeamData {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *MyGroupApplyUpdateTeamCmd) GetDeletes() []uint64 {
	if x != nil {
		return x.Deletes
	}
	return nil
}

type LaunckKickTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param   *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=44" json:"param,omitempty"`
	Sponsor *uint64    `protobuf:"varint,3,opt,name=sponsor,def=0" json:"sponsor,omitempty"`
	Kickid  *uint64    `protobuf:"varint,4,opt,name=kickid,def=0" json:"kickid,omitempty"`
	Cancel  *bool      `protobuf:"varint,5,opt,name=cancel,def=0" json:"cancel,omitempty"`
}

// Default values for LaunckKickTeamCmd fields.
const (
	Default_LaunckKickTeamCmd_Cmd     = Command_SESSION_USER_TEAM_PROTOCMD
	Default_LaunckKickTeamCmd_Param   = TeamParam_TEAMPARAM_LAUNCH_KICK
	Default_LaunckKickTeamCmd_Sponsor = uint64(0)
	Default_LaunckKickTeamCmd_Kickid  = uint64(0)
	Default_LaunckKickTeamCmd_Cancel  = bool(false)
)

func (x *LaunckKickTeamCmd) Reset() {
	*x = LaunckKickTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunckKickTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunckKickTeamCmd) ProtoMessage() {}

func (x *LaunckKickTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunckKickTeamCmd.ProtoReflect.Descriptor instead.
func (*LaunckKickTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{58}
}

func (x *LaunckKickTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LaunckKickTeamCmd_Cmd
}

func (x *LaunckKickTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LaunckKickTeamCmd_Param
}

func (x *LaunckKickTeamCmd) GetSponsor() uint64 {
	if x != nil && x.Sponsor != nil {
		return *x.Sponsor
	}
	return Default_LaunckKickTeamCmd_Sponsor
}

func (x *LaunckKickTeamCmd) GetKickid() uint64 {
	if x != nil && x.Kickid != nil {
		return *x.Kickid
	}
	return Default_LaunckKickTeamCmd_Kickid
}

func (x *LaunckKickTeamCmd) GetCancel() bool {
	if x != nil && x.Cancel != nil {
		return *x.Cancel
	}
	return Default_LaunckKickTeamCmd_Cancel
}

type ReplyKickTeamCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=51" json:"cmd,omitempty"`
	Param *TeamParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamParam,def=45" json:"param,omitempty"`
	Agree *bool      `protobuf:"varint,3,opt,name=agree,def=0" json:"agree,omitempty"`
}

// Default values for ReplyKickTeamCmd fields.
const (
	Default_ReplyKickTeamCmd_Cmd   = Command_SESSION_USER_TEAM_PROTOCMD
	Default_ReplyKickTeamCmd_Param = TeamParam_TEAMPARAM_REPLY_KICK
	Default_ReplyKickTeamCmd_Agree = bool(false)
)

func (x *ReplyKickTeamCmd) Reset() {
	*x = ReplyKickTeamCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SessionTeam_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyKickTeamCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyKickTeamCmd) ProtoMessage() {}

func (x *ReplyKickTeamCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SessionTeam_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyKickTeamCmd.ProtoReflect.Descriptor instead.
func (*ReplyKickTeamCmd) Descriptor() ([]byte, []int) {
	return file_SessionTeam_proto_rawDescGZIP(), []int{59}
}

func (x *ReplyKickTeamCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReplyKickTeamCmd_Cmd
}

func (x *ReplyKickTeamCmd) GetParam() TeamParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReplyKickTeamCmd_Param
}

func (x *ReplyKickTeamCmd) GetAgree() bool {
	if x != nil && x.Agree != nil {
		return *x.Agree
	}
	return Default_ReplyKickTeamCmd_Agree
}

var File_SessionTeam_proto protoreflect.FileDescriptor

var file_SessionTeam_proto_rawDesc = []byte{
	0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x0a, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x0f, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x41, 0x63, 0x63, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06,
	0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x31, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x0e,
	0x42, 0x6c, 0x6f, 0x62, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x4e, 0x0a, 0x13, 0x54, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x65, 0x6c, 0x70, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09,
	0x68, 0x65, 0x6c, 0x70, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7a, 0x0a, 0x15, 0x54, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x74, 0x65, 0x70, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x65,
	0x61, 0x6d, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x68, 0x65, 0x6c, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x68, 0x65, 0x6c, 0x70,
	0x22, 0xbc, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x15,
	0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64,
	0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x5f, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x41, 0x63, 0x63, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x63,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x22,
	0x37, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x12, 0x26, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x52, 0x06, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x04, 0x73, 0x65, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x73, 0x65, 0x61, 0x6c,
	0x12, 0x19, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x79, 0x0a, 0x0f, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x3a, 0x0d, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d,
	0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xaf, 0x01,
	0x0a, 0x0e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x12, 0x19, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x05, 0x6d, 0x69, 0x6e, 0x6c, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x6d, 0x69, 0x6e, 0x6c, 0x76, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x6c, 0x76, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x6c, 0x76, 0x22,
	0xad, 0x02, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x67,
	0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x29,
	0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x06, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x73, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x73, 0x65, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x22,
	0xab, 0x02, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x11, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x02, 0x6c, 0x76, 0x12, 0x45, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x45, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x54, 0x45, 0x41, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc8, 0x01,
	0x0a, 0x0e, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x54, 0x45, 0x41,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x22, 0xef, 0x01, 0x0a,
	0x0f, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x54, 0x45, 0x41,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x07, 0x69, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x69, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xdd,
	0x02, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x3a, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6c, 0x76, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6c, 0x76, 0x12, 0x17,
	0x0a, 0x05, 0x6d, 0x61, 0x78, 0x6c, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x05, 0x6d, 0x61, 0x78, 0x6c, 0x76, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x0f, 0x45, 0x41, 0x55, 0x54, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x99,
	0x02, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x54, 0x45, 0x41, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x67, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x61, 0x74, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x61, 0x74, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x69, 0x73, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x07, 0x69, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xec, 0x01, 0x0a, 0x11, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x54, 0x45, 0x41,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x13, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x67, 0x75, 0x69, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x54, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0x8d, 0x02,
	0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x54,
	0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x12, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x67, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0xd9, 0x01,
	0x0a, 0x0a, 0x4b, 0x69, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x05, 0x63, 0x61, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x05, 0x63, 0x61, 0x74, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x69, 0x73, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x07, 0x69, 0x73, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xa7, 0x01, 0x0a, 0x0e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x4c, 0x45, 0x41, 0x44, 0x45,
	0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x54, 0x45, 0x41,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x54, 0x45, 0x41, 0x4d, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x22, 0xa5, 0x01, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x54, 0x45, 0x41, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x45, 0x41, 0x4d, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc2, 0x01, 0x0a, 0x0f, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x50, 0x4f, 0x53, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xce,
	0x01, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a,
	0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22,
	0xa3, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3a,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x54, 0x45, 0x41, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x69, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75,
	0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x10, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x4f,
	0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x72, 0x61, 0x69, 0x64,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x72, 0x61, 0x69,
	0x64, 0x69, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x45,
	0x41, 0x52, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0xcb, 0x01, 0x0a, 0x0a, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x54, 0x45,
	0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x03, 0x73, 0x65, 0x74,
	0x22, 0xc6, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x54,
	0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x18, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x54,
	0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1b, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x55, 0x53, 0x45, 0x52, 0x54, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x22, 0xbc, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x53, 0x45, 0x54, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x22,
	0xcd, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12, 0x3b, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x51, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x49, 0x4e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x12, 0x2c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x65, 0x70, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xc7, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x73, 0x74, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x06, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1b, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x51, 0x55, 0x45, 0x53, 0x54, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x48, 0x65,
	0x6c, 0x70, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12,
	0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x54, 0x45, 0x41, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x48, 0x45, 0x4c, 0x50,
	0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a,
	0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x09, 0x69, 0x73,
	0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x22,
	0xcb, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x57, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x48, 0x45, 0x4c, 0x50, 0x57, 0x41, 0x4e, 0x54,
	0x45, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x64, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb1, 0x01,
	0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x57, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x19, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x48, 0x45, 0x4c, 0x50, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64,
	0x73, 0x22, 0xc1, 0x01, 0x0a, 0x09, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x74, 0x12,
	0x1b, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x12, 0x11, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x05, 0x63, 0x61, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x05, 0x63, 0x61, 0x74, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x0a, 0x72, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x6c,
	0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x6c, 0x76, 0x12, 0x21,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12,
	0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x54, 0x45, 0x41, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x43, 0x41, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xe1, 0x01, 0x0a, 0x13,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a,
	0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x43, 0x41, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x28, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x61, 0x74, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x64,
	0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x74, 0x52, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x22,
	0xa9, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x16, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x19, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x12,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x43,
	0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x54,
	0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x22, 0x51, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64,
	0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x54, 0x45, 0x41,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x41, 0x50, 0x50, 0x4c, 0x59,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x30, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x12, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64,
	0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x54, 0x45, 0x41,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x6d, 0x79, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x79, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x22, 0x97, 0x02, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x65, 0x61, 0x6d, 0x43,
	0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x54,
	0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x61, 0x67, 0x72, 0x65,
	0x65, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08,
	0x6d, 0x79, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x08, 0x6d, 0x79, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x08, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x66, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x92,
	0x01, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x49,
	0x53, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0xb6, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64,
	0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x54, 0x45, 0x41,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0x95, 0x01, 0x0a,
	0x15, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x74, 0x66, 0x54,
	0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1a, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0xe4, 0x01, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x20, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x06, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x14,
	0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x1c, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x22, 0x87, 0x02,
	0x0a, 0x15, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x15, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x23, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x22, 0xf5, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x1d, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x65, 0x61, 0x6d,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x45, 0x54, 0x45, 0x41, 0x4d,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22,
	0x54, 0x0a, 0x14, 0x4d, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x19, 0x4d, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e,
	0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4d, 0x59, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x11, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x6b, 0x4b,
	0x69, 0x63, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72,
	0x12, 0x19, 0x0a, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x06, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x22, 0xa7, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x4b, 0x69, 0x63, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x12,
	0x3a, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1a, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x54, 0x45, 0x41, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4b, 0x49, 0x43, 0x4b,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x61,
	0x67, 0x72, 0x65, 0x65, 0x2a, 0x9c, 0x0a, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45,
	0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x19, 0x0a, 0x15, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x59, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x54,
	0x45, 0x41, 0x4d, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x06, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x07, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x41,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x41, 0x50,
	0x50, 0x4c, 0x59, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0a, 0x12,
	0x1c, 0x0a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x16, 0x0a,
	0x12, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x54,
	0x45, 0x41, 0x4d, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x0d, 0x12, 0x1d,
	0x0a, 0x19, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x50, 0x4f, 0x53, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0e, 0x12, 0x1e, 0x0a,
	0x1a, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0f, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x41, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x11, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x1f,
	0x0a, 0x1b, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x55, 0x53, 0x45, 0x52, 0x54, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x15, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x54,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x16, 0x12, 0x1e,
	0x0a, 0x1a, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x17, 0x12, 0x1f,
	0x0a, 0x1b, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x18, 0x12,
	0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x50, 0x54, 0x48, 0x45, 0x4c, 0x50, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x19, 0x12,
	0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x48, 0x45, 0x4c, 0x50, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x1a, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x48, 0x45, 0x4c, 0x50, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x1b, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x43, 0x41, 0x54, 0x10, 0x1c, 0x12, 0x1e, 0x0a, 0x1a,
	0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x43, 0x41, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x1d, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x1f, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x41, 0x4d,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x20, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x21, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x22, 0x12,
	0x22, 0x0a, 0x1e, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x10, 0x23, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x44, 0x49, 0x53, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x24, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x45, 0x41, 0x44,
	0x45, 0x52, 0x10, 0x25, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e,
	0x54, 0x46, 0x10, 0x26, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x27, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x45,
	0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x28, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x29, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x45, 0x41, 0x4d, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x2a, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x45,
	0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x59,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x2b, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x41, 0x55, 0x4e,
	0x43, 0x48, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x10, 0x2c, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x41,
	0x4d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4b, 0x49, 0x43,
	0x4b, 0x10, 0x2d, 0x2a, 0x30, 0x0a, 0x0b, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x4c, 0x4f, 0x42, 0x41,
	0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x50,
	0x41, 0x47, 0x45, 0x10, 0x14, 0x2a, 0x85, 0x01, 0x0a, 0x08, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x4a,
	0x6f, 0x62, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x4a, 0x4f, 0x42, 0x5f, 0x4d,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x4a, 0x4f, 0x42,
	0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x45,
	0x41, 0x4d, 0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x4a, 0x4f, 0x42, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59,
	0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x4a, 0x4f, 0x42, 0x5f, 0x54,
	0x45, 0x4d, 0x50, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x45,
	0x54, 0x45, 0x41, 0x4d, 0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0x8d, 0x0a,
	0x0a, 0x0b, 0x45, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x50, 0x49, 0x44, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10,
	0x05, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x52, 0x41, 0x49, 0x44, 0x49, 0x44, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x48, 0x50, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x58, 0x48, 0x50, 0x10, 0x09, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x50, 0x10,
	0x0a, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x4d, 0x41, 0x58, 0x53, 0x50, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4a, 0x4f, 0x42, 0x10, 0x0c, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x49, 0x44, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x48, 0x41, 0x4e, 0x44, 0x49,
	0x44, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x10, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x10,
	0x13, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x48, 0x41, 0x49, 0x52, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x10, 0x15, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x16, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x45,
	0x46, 0x54, 0x48, 0x41, 0x4e, 0x44, 0x10, 0x17, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x48, 0x41, 0x4e,
	0x44, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x44, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x1b, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x42,
	0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x49, 0x44, 0x10, 0x1d, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x1e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x59, 0x45, 0x10, 0x1f, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x20, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x10, 0x21, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x41, 0x54, 0x10,
	0x22, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x23, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x24, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x41, 0x54, 0x5f, 0x4f, 0x57, 0x4e,
	0x45, 0x52, 0x10, 0x25, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x26, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x52, 0x41, 0x49, 0x44, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x27, 0x12,
	0x1d, 0x0a, 0x19, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45,
	0x4e, 0x53, 0x45, 0x4d, 0x42, 0x4c, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x28, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x10, 0x2a, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x49, 0x44,
	0x10, 0x2b, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x49, 0x44, 0x10, 0x2c, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x48,
	0x4f, 0x4d, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x49, 0x44, 0x10, 0x2d, 0x12, 0x1e, 0x0a, 0x1a,
	0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x52, 0x41, 0x49, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x2e, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x42, 0x41, 0x43, 0x4b,
	0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x2f, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x43,
	0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x30, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x31, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x41, 0x46, 0x4b, 0x10, 0x32, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x33, 0x2a, 0x61, 0x0a,
	0x09, 0x45, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x41,
	0x55, 0x54, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x41, 0x55, 0x54, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x41, 0x55, 0x54, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x41, 0x55, 0x54, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03,
	0x2a, 0x6d, 0x0a, 0x0a, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x45,
	0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x54, 0x45, 0x41, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x2a,
	0x41, 0x0a, 0x0a, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x54, 0x45, 0x41, 0x4d,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45,
	0x10, 0x01, 0x2a, 0xdd, 0x03, 0x0a, 0x09, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x45, 0x41, 0x4d,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x4c, 0x56, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x54, 0x45, 0x41, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x58, 0x4c, 0x56, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x54, 0x45,
	0x41, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x41, 0x43, 0x43, 0x45, 0x50,
	0x54, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x49, 0x43, 0x4b,
	0x55, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x54, 0x45,
	0x41, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x08, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x48, 0x45, 0x4c,
	0x50, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x45,
	0x41, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x56, 0x52, 0x49, 0x44,
	0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x54, 0x45, 0x41, 0x4d,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x54, 0x45, 0x41, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0d, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x41,
	0x4c, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x49, 0x44, 0x10, 0x0f, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x45, 0x41, 0x4d,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x11, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x12, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x58,
	0x10, 0x13, 0x2a, 0x61, 0x0a, 0x0e, 0x45, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x55, 0x45, 0x52, 0x59, 0x54, 0x45,
	0x41, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x51, 0x55, 0x45, 0x52, 0x59, 0x54, 0x45, 0x41, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x59, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x54, 0x45, 0x41, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5a,
	0x4f, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0x7c, 0x0a, 0x0f, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x45, 0x41,
	0x4d, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x54, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x47, 0x52, 0x45, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54,
	0x45, 0x41, 0x4d, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x58, 0x10, 0x03, 0x2a, 0x77, 0x0a, 0x0e, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x41, 0x50,
	0x50, 0x4c, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x47, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x54, 0x45, 0x41, 0x4d,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x47, 0x52,
	0x45, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x41, 0x50, 0x50,
	0x4c, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03,
}

var (
	file_SessionTeam_proto_rawDescOnce sync.Once
	file_SessionTeam_proto_rawDescData = file_SessionTeam_proto_rawDesc
)

func file_SessionTeam_proto_rawDescGZIP() []byte {
	file_SessionTeam_proto_rawDescOnce.Do(func() {
		file_SessionTeam_proto_rawDescData = protoimpl.X.CompressGZIP(file_SessionTeam_proto_rawDescData)
	})
	return file_SessionTeam_proto_rawDescData
}

var file_SessionTeam_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_SessionTeam_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_SessionTeam_proto_goTypes = []interface{}{
	(TeamParam)(0),                         // 0: Cmd.TeamParam
	(ETeamGlobal)(0),                       // 1: Cmd.ETeamGlobal
	(ETeamJob)(0),                          // 2: Cmd.ETeamJob
	(EMemberData)(0),                       // 3: Cmd.EMemberData
	(EAutoType)(0),                         // 4: Cmd.EAutoType
	(ETeamState)(0),                        // 5: Cmd.ETeamState
	(ETeamAllow)(0),                        // 6: Cmd.ETeamAllow
	(ETeamData)(0),                         // 7: Cmd.ETeamData
	(EQueryTeamType)(0),                    // 8: Cmd.EQueryTeamType
	(ETeamInviteType)(0),                   // 9: Cmd.ETeamInviteType
	(ETeamApplyType)(0),                    // 10: Cmd.ETeamApplyType
	(*MemberData)(nil),                     // 11: Cmd.MemberData
	(*TeamMember)(nil),                     // 12: Cmd.TeamMember
	(*BlobTeamMember)(nil),                 // 13: Cmd.BlobTeamMember
	(*TeamMemberHelpQuest)(nil),            // 14: Cmd.TeamMemberHelpQuest
	(*TeamMemberWantedQuest)(nil),          // 15: Cmd.TeamMemberWantedQuest
	(*BlobTeamWanted)(nil),                 // 16: Cmd.BlobTeamWanted
	(*TeamApply)(nil),                      // 17: Cmd.TeamApply
	(*BlobTeamApply)(nil),                  // 18: Cmd.BlobTeamApply
	(*TeamSealData)(nil),                   // 19: Cmd.TeamSealData
	(*TeamSummaryItem)(nil),                // 20: Cmd.TeamSummaryItem
	(*TeamGroupApply)(nil),                 // 21: Cmd.TeamGroupApply
	(*TeamData)(nil),                       // 22: Cmd.TeamData
	(*TeamList)(nil),                       // 23: Cmd.TeamList
	(*TeamDataUpdate)(nil),                 // 24: Cmd.TeamDataUpdate
	(*TeamMemberUpdate)(nil),               // 25: Cmd.TeamMemberUpdate
	(*TeamApplyUpdate)(nil),                // 26: Cmd.TeamApplyUpdate
	(*CreateTeam)(nil),                     // 27: Cmd.CreateTeam
	(*InviteMember)(nil),                   // 28: Cmd.InviteMember
	(*ProcessTeamInvite)(nil),              // 29: Cmd.ProcessTeamInvite
	(*TeamMemberApply)(nil),                // 30: Cmd.TeamMemberApply
	(*ProcessTeamApply)(nil),               // 31: Cmd.ProcessTeamApply
	(*KickMember)(nil),                     // 32: Cmd.KickMember
	(*ExchangeLeader)(nil),                 // 33: Cmd.ExchangeLeader
	(*ExitTeam)(nil),                       // 34: Cmd.ExitTeam
	(*EnterTeam)(nil),                      // 35: Cmd.EnterTeam
	(*MemberPosUpdate)(nil),                // 36: Cmd.MemberPosUpdate
	(*MemberDataUpdate)(nil),               // 37: Cmd.MemberDataUpdate
	(*LockTarget)(nil),                     // 38: Cmd.LockTarget
	(*TeamSummon)(nil),                     // 39: Cmd.TeamSummon
	(*ClearApplyList)(nil),                 // 40: Cmd.ClearApplyList
	(*QuickEnter)(nil),                     // 41: Cmd.QuickEnter
	(*SetTeamOption)(nil),                  // 42: Cmd.SetTeamOption
	(*QueryUserTeamInfoTeamCmd)(nil),       // 43: Cmd.QueryUserTeamInfoTeamCmd
	(*SetMemberOptionTeamCmd)(nil),         // 44: Cmd.SetMemberOptionTeamCmd
	(*MemberWantedQuest)(nil),              // 45: Cmd.MemberWantedQuest
	(*QuestWantedQuestTeamCmd)(nil),        // 46: Cmd.QuestWantedQuestTeamCmd
	(*UpdateWantedQuestTeamCmd)(nil),       // 47: Cmd.UpdateWantedQuestTeamCmd
	(*AcceptHelpWantedTeamCmd)(nil),        // 48: Cmd.AcceptHelpWantedTeamCmd
	(*UpdateHelpWantedTeamCmd)(nil),        // 49: Cmd.UpdateHelpWantedTeamCmd
	(*QueryHelpWantedTeamCmd)(nil),         // 50: Cmd.QueryHelpWantedTeamCmd
	(*MemberCat)(nil),                      // 51: Cmd.MemberCat
	(*QueryMemberCatTeamCmd)(nil),          // 52: Cmd.QueryMemberCatTeamCmd
	(*MemberCatUpdateTeam)(nil),            // 53: Cmd.MemberCatUpdateTeam
	(*CancelApplyTeamCmd)(nil),             // 54: Cmd.CancelApplyTeamCmd
	(*QueryMemberTeamCmd)(nil),             // 55: Cmd.QueryMemberTeamCmd
	(*UserApplyTeamData)(nil),              // 56: Cmd.UserApplyTeamData
	(*UserApplyUpdateTeamCmd)(nil),         // 57: Cmd.UserApplyUpdateTeamCmd
	(*InviteGroupTeamCmd)(nil),             // 58: Cmd.InviteGroupTeamCmd
	(*ProcessInviteGroupTeamCmd)(nil),      // 59: Cmd.ProcessInviteGroupTeamCmd
	(*DissolveGroupTeamCmd)(nil),           // 60: Cmd.DissolveGroupTeamCmd
	(*ChangeGroupLeaderTeamCmd)(nil),       // 61: Cmd.ChangeGroupLeaderTeamCmd
	(*GroupUpdateNtfTeamCmd)(nil),          // 62: Cmd.GroupUpdateNtfTeamCmd
	(*QueryGroupTeamApplyListTeamCmd)(nil), // 63: Cmd.QueryGroupTeamApplyListTeamCmd
	(*TeamGroupApplyUpdate)(nil),           // 64: Cmd.TeamGroupApplyUpdate
	(*TeamGroupApplyTeamCmd)(nil),          // 65: Cmd.TeamGroupApplyTeamCmd
	(*ProcessGroupApplyTeamCmd)(nil),       // 66: Cmd.ProcessGroupApplyTeamCmd
	(*MyGroupApplyTeamData)(nil),           // 67: Cmd.MyGroupApplyTeamData
	(*MyGroupApplyUpdateTeamCmd)(nil),      // 68: Cmd.MyGroupApplyUpdateTeamCmd
	(*LaunckKickTeamCmd)(nil),              // 69: Cmd.LaunckKickTeamCmd
	(*ReplyKickTeamCmd)(nil),               // 70: Cmd.ReplyKickTeamCmd
	(*ScenePos)(nil),                       // 71: Cmd.ScenePos
	(Command)(0),                           // 72: Cmd.Command
	(EQuestAction)(0),                      // 73: Cmd.EQuestAction
	(*QuestStep)(nil),                      // 74: Cmd.QuestStep
}
var file_SessionTeam_proto_depIdxs = []int32{
	3,   // 0: Cmd.MemberData.type:type_name -> Cmd.EMemberData
	11,  // 1: Cmd.TeamMember.datas:type_name -> Cmd.MemberData
	12,  // 2: Cmd.BlobTeamMember.members:type_name -> Cmd.TeamMember
	15,  // 3: Cmd.BlobTeamWanted.memberquest:type_name -> Cmd.TeamMemberWantedQuest
	14,  // 4: Cmd.BlobTeamWanted.memberhelp:type_name -> Cmd.TeamMemberHelpQuest
	11,  // 5: Cmd.TeamApply.datas:type_name -> Cmd.MemberData
	17,  // 6: Cmd.BlobTeamApply.applys:type_name -> Cmd.TeamApply
	71,  // 7: Cmd.TeamSealData.pos:type_name -> Cmd.ScenePos
	7,   // 8: Cmd.TeamSummaryItem.type:type_name -> Cmd.ETeamData
	20,  // 9: Cmd.TeamData.items:type_name -> Cmd.TeamSummaryItem
	12,  // 10: Cmd.TeamData.members:type_name -> Cmd.TeamMember
	17,  // 11: Cmd.TeamData.applys:type_name -> Cmd.TeamApply
	19,  // 12: Cmd.TeamData.seal:type_name -> Cmd.TeamSealData
	21,  // 13: Cmd.TeamData.groupapplys:type_name -> Cmd.TeamGroupApply
	72,  // 14: Cmd.TeamList.cmd:type_name -> Cmd.Command
	0,   // 15: Cmd.TeamList.param:type_name -> Cmd.TeamParam
	8,   // 16: Cmd.TeamList.querytype:type_name -> Cmd.EQueryTeamType
	22,  // 17: Cmd.TeamList.list:type_name -> Cmd.TeamData
	72,  // 18: Cmd.TeamDataUpdate.cmd:type_name -> Cmd.Command
	0,   // 19: Cmd.TeamDataUpdate.param:type_name -> Cmd.TeamParam
	20,  // 20: Cmd.TeamDataUpdate.datas:type_name -> Cmd.TeamSummaryItem
	72,  // 21: Cmd.TeamMemberUpdate.cmd:type_name -> Cmd.Command
	0,   // 22: Cmd.TeamMemberUpdate.param:type_name -> Cmd.TeamParam
	12,  // 23: Cmd.TeamMemberUpdate.updates:type_name -> Cmd.TeamMember
	72,  // 24: Cmd.TeamApplyUpdate.cmd:type_name -> Cmd.Command
	0,   // 25: Cmd.TeamApplyUpdate.param:type_name -> Cmd.TeamParam
	17,  // 26: Cmd.TeamApplyUpdate.updates:type_name -> Cmd.TeamApply
	72,  // 27: Cmd.CreateTeam.cmd:type_name -> Cmd.Command
	0,   // 28: Cmd.CreateTeam.param:type_name -> Cmd.TeamParam
	4,   // 29: Cmd.CreateTeam.autoaccept:type_name -> Cmd.EAutoType
	5,   // 30: Cmd.CreateTeam.state:type_name -> Cmd.ETeamState
	72,  // 31: Cmd.InviteMember.cmd:type_name -> Cmd.Command
	0,   // 32: Cmd.InviteMember.param:type_name -> Cmd.TeamParam
	72,  // 33: Cmd.ProcessTeamInvite.cmd:type_name -> Cmd.Command
	0,   // 34: Cmd.ProcessTeamInvite.param:type_name -> Cmd.TeamParam
	9,   // 35: Cmd.ProcessTeamInvite.type:type_name -> Cmd.ETeamInviteType
	72,  // 36: Cmd.TeamMemberApply.cmd:type_name -> Cmd.Command
	0,   // 37: Cmd.TeamMemberApply.param:type_name -> Cmd.TeamParam
	72,  // 38: Cmd.ProcessTeamApply.cmd:type_name -> Cmd.Command
	0,   // 39: Cmd.ProcessTeamApply.param:type_name -> Cmd.TeamParam
	10,  // 40: Cmd.ProcessTeamApply.type:type_name -> Cmd.ETeamApplyType
	72,  // 41: Cmd.KickMember.cmd:type_name -> Cmd.Command
	0,   // 42: Cmd.KickMember.param:type_name -> Cmd.TeamParam
	72,  // 43: Cmd.ExchangeLeader.cmd:type_name -> Cmd.Command
	0,   // 44: Cmd.ExchangeLeader.param:type_name -> Cmd.TeamParam
	72,  // 45: Cmd.ExitTeam.cmd:type_name -> Cmd.Command
	0,   // 46: Cmd.ExitTeam.param:type_name -> Cmd.TeamParam
	72,  // 47: Cmd.EnterTeam.cmd:type_name -> Cmd.Command
	0,   // 48: Cmd.EnterTeam.param:type_name -> Cmd.TeamParam
	22,  // 49: Cmd.EnterTeam.data:type_name -> Cmd.TeamData
	72,  // 50: Cmd.MemberPosUpdate.cmd:type_name -> Cmd.Command
	0,   // 51: Cmd.MemberPosUpdate.param:type_name -> Cmd.TeamParam
	71,  // 52: Cmd.MemberPosUpdate.pos:type_name -> Cmd.ScenePos
	72,  // 53: Cmd.MemberDataUpdate.cmd:type_name -> Cmd.Command
	0,   // 54: Cmd.MemberDataUpdate.param:type_name -> Cmd.TeamParam
	11,  // 55: Cmd.MemberDataUpdate.members:type_name -> Cmd.MemberData
	72,  // 56: Cmd.LockTarget.cmd:type_name -> Cmd.Command
	0,   // 57: Cmd.LockTarget.param:type_name -> Cmd.TeamParam
	72,  // 58: Cmd.TeamSummon.cmd:type_name -> Cmd.Command
	0,   // 59: Cmd.TeamSummon.param:type_name -> Cmd.TeamParam
	72,  // 60: Cmd.ClearApplyList.cmd:type_name -> Cmd.Command
	0,   // 61: Cmd.ClearApplyList.param:type_name -> Cmd.TeamParam
	72,  // 62: Cmd.QuickEnter.cmd:type_name -> Cmd.Command
	0,   // 63: Cmd.QuickEnter.param:type_name -> Cmd.TeamParam
	72,  // 64: Cmd.SetTeamOption.cmd:type_name -> Cmd.Command
	0,   // 65: Cmd.SetTeamOption.param:type_name -> Cmd.TeamParam
	20,  // 66: Cmd.SetTeamOption.items:type_name -> Cmd.TeamSummaryItem
	72,  // 67: Cmd.QueryUserTeamInfoTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 68: Cmd.QueryUserTeamInfoTeamCmd.param:type_name -> Cmd.TeamParam
	72,  // 69: Cmd.SetMemberOptionTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 70: Cmd.SetMemberOptionTeamCmd.param:type_name -> Cmd.TeamParam
	73,  // 71: Cmd.MemberWantedQuest.action:type_name -> Cmd.EQuestAction
	74,  // 72: Cmd.MemberWantedQuest.questdata:type_name -> Cmd.QuestStep
	72,  // 73: Cmd.QuestWantedQuestTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 74: Cmd.QuestWantedQuestTeamCmd.param:type_name -> Cmd.TeamParam
	45,  // 75: Cmd.QuestWantedQuestTeamCmd.quests:type_name -> Cmd.MemberWantedQuest
	72,  // 76: Cmd.UpdateWantedQuestTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 77: Cmd.UpdateWantedQuestTeamCmd.param:type_name -> Cmd.TeamParam
	45,  // 78: Cmd.UpdateWantedQuestTeamCmd.quest:type_name -> Cmd.MemberWantedQuest
	72,  // 79: Cmd.AcceptHelpWantedTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 80: Cmd.AcceptHelpWantedTeamCmd.param:type_name -> Cmd.TeamParam
	72,  // 81: Cmd.UpdateHelpWantedTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 82: Cmd.UpdateHelpWantedTeamCmd.param:type_name -> Cmd.TeamParam
	72,  // 83: Cmd.QueryHelpWantedTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 84: Cmd.QueryHelpWantedTeamCmd.param:type_name -> Cmd.TeamParam
	72,  // 85: Cmd.QueryMemberCatTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 86: Cmd.QueryMemberCatTeamCmd.param:type_name -> Cmd.TeamParam
	72,  // 87: Cmd.MemberCatUpdateTeam.cmd:type_name -> Cmd.Command
	0,   // 88: Cmd.MemberCatUpdateTeam.param:type_name -> Cmd.TeamParam
	51,  // 89: Cmd.MemberCatUpdateTeam.updates:type_name -> Cmd.MemberCat
	51,  // 90: Cmd.MemberCatUpdateTeam.dels:type_name -> Cmd.MemberCat
	72,  // 91: Cmd.CancelApplyTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 92: Cmd.CancelApplyTeamCmd.param:type_name -> Cmd.TeamParam
	72,  // 93: Cmd.QueryMemberTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 94: Cmd.QueryMemberTeamCmd.param:type_name -> Cmd.TeamParam
	12,  // 95: Cmd.QueryMemberTeamCmd.members:type_name -> Cmd.TeamMember
	72,  // 96: Cmd.UserApplyUpdateTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 97: Cmd.UserApplyUpdateTeamCmd.param:type_name -> Cmd.TeamParam
	56,  // 98: Cmd.UserApplyUpdateTeamCmd.updates:type_name -> Cmd.UserApplyTeamData
	72,  // 99: Cmd.InviteGroupTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 100: Cmd.InviteGroupTeamCmd.param:type_name -> Cmd.TeamParam
	72,  // 101: Cmd.ProcessInviteGroupTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 102: Cmd.ProcessInviteGroupTeamCmd.param:type_name -> Cmd.TeamParam
	72,  // 103: Cmd.DissolveGroupTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 104: Cmd.DissolveGroupTeamCmd.param:type_name -> Cmd.TeamParam
	72,  // 105: Cmd.ChangeGroupLeaderTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 106: Cmd.ChangeGroupLeaderTeamCmd.param:type_name -> Cmd.TeamParam
	72,  // 107: Cmd.GroupUpdateNtfTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 108: Cmd.GroupUpdateNtfTeamCmd.param:type_name -> Cmd.TeamParam
	72,  // 109: Cmd.QueryGroupTeamApplyListTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 110: Cmd.QueryGroupTeamApplyListTeamCmd.param:type_name -> Cmd.TeamParam
	17,  // 111: Cmd.QueryGroupTeamApplyListTeamCmd.applys:type_name -> Cmd.TeamApply
	72,  // 112: Cmd.TeamGroupApplyUpdate.cmd:type_name -> Cmd.Command
	0,   // 113: Cmd.TeamGroupApplyUpdate.param:type_name -> Cmd.TeamParam
	21,  // 114: Cmd.TeamGroupApplyUpdate.updates:type_name -> Cmd.TeamGroupApply
	72,  // 115: Cmd.TeamGroupApplyTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 116: Cmd.TeamGroupApplyTeamCmd.param:type_name -> Cmd.TeamParam
	21,  // 117: Cmd.TeamGroupApplyTeamCmd.applyinfo:type_name -> Cmd.TeamGroupApply
	72,  // 118: Cmd.ProcessGroupApplyTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 119: Cmd.ProcessGroupApplyTeamCmd.param:type_name -> Cmd.TeamParam
	10,  // 120: Cmd.ProcessGroupApplyTeamCmd.etype:type_name -> Cmd.ETeamApplyType
	72,  // 121: Cmd.MyGroupApplyUpdateTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 122: Cmd.MyGroupApplyUpdateTeamCmd.param:type_name -> Cmd.TeamParam
	67,  // 123: Cmd.MyGroupApplyUpdateTeamCmd.updates:type_name -> Cmd.MyGroupApplyTeamData
	72,  // 124: Cmd.LaunckKickTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 125: Cmd.LaunckKickTeamCmd.param:type_name -> Cmd.TeamParam
	72,  // 126: Cmd.ReplyKickTeamCmd.cmd:type_name -> Cmd.Command
	0,   // 127: Cmd.ReplyKickTeamCmd.param:type_name -> Cmd.TeamParam
	128, // [128:128] is the sub-list for method output_type
	128, // [128:128] is the sub-list for method input_type
	128, // [128:128] is the sub-list for extension type_name
	128, // [128:128] is the sub-list for extension extendee
	0,   // [0:128] is the sub-list for field type_name
}

func init() { file_SessionTeam_proto_init() }
func file_SessionTeam_proto_init() {
	if File_SessionTeam_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	file_SceneQuest_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SessionTeam_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobTeamMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamMemberHelpQuest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamMemberWantedQuest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobTeamWanted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobTeamApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSealData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSummaryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamGroupApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamDataUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamMemberUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamApplyUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTeamInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamMemberApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTeamApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeLeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberPosUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberDataUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamSummon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearApplyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickEnter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTeamOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserTeamInfoTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMemberOptionTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberWantedQuest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestWantedQuestTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWantedQuestTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptHelpWantedTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHelpWantedTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryHelpWantedTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberCat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMemberCatTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberCatUpdateTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelApplyTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMemberTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserApplyTeamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserApplyUpdateTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteGroupTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInviteGroupTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DissolveGroupTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeGroupLeaderTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupUpdateNtfTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGroupTeamApplyListTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamGroupApplyUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamGroupApplyTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessGroupApplyTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyGroupApplyTeamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyGroupApplyUpdateTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunckKickTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SessionTeam_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyKickTeamCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SessionTeam_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SessionTeam_proto_goTypes,
		DependencyIndexes: file_SessionTeam_proto_depIdxs,
		EnumInfos:         file_SessionTeam_proto_enumTypes,
		MessageInfos:      file_SessionTeam_proto_msgTypes,
	}.Build()
	File_SessionTeam_proto = out.File
	file_SessionTeam_proto_rawDesc = nil
	file_SessionTeam_proto_goTypes = nil
	file_SessionTeam_proto_depIdxs = nil
}
