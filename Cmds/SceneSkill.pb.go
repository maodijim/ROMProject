// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: SceneSkill.proto

package Cmd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SkillParam int32

const (
	SkillParam_SKILLPARAM_SKILLITEM            SkillParam = 1
	SkillParam_SKILLPARAM_SKILLUPDATE          SkillParam = 2
	SkillParam_SKILLPARAM_LEVELUPSKILL         SkillParam = 3
	SkillParam_SKILLPARAM_EQUIPSKILL           SkillParam = 4
	SkillParam_SKILLPARAM_RESETSKILL           SkillParam = 5
	SkillParam_SKILLPARAM_SKILLVALIDPOS        SkillParam = 6
	SkillParam_SKILLPARAM_CHANGE_SKILL         SkillParam = 7
	SkillParam_SKILLPARAM_SPEC_SKILL_INFO      SkillParam = 8
	SkillParam_SKILLPARAM_SELECT_RUNE          SkillParam = 9
	SkillParam_SKILLPARAM_MARK_SKILLNPC        SkillParam = 10
	SkillParam_SKILLPARAM_TRGGER_SKILLNPC      SkillParam = 11
	SkillParam_SKILLPARAM_SKILLOPTIONS         SkillParam = 12
	SkillParam_SKILLPARAM_DYNAMIC_SKILL_INFO   SkillParam = 13
	SkillParam_SKILLPARAM_DYNAMIC_SKILL_UPDATE SkillParam = 14
	SkillParam_SKILLPARAM_SYNC_DEST_POS        SkillParam = 15
	SkillParam_SKILLPARAM_RESET_TALENT_SKILL   SkillParam = 16
	SkillParam_SKILLPARAM_SELECT_MULTIOPT      SkillParam = 17
	SkillParam_SKILLPARAM_SYNC_MULTIOPT        SkillParam = 18
	SkillParam_SKILLPARAM_MASKSKILL_RANDOM     SkillParam = 19
	SkillParam_SKILLPARAM_SKILL_EFFECT         SkillParam = 20
	SkillParam_SKILLPARAM_SYNC_SKILL_EFFECT    SkillParam = 21
	SkillParam_SKILLPARAM_STOP_BOSS_SKILL      SkillParam = 22
	SkillParam_SKILLPARAM_CHANGE_AUTO_SHORTCUT SkillParam = 23
	SkillParam_SKILLPARAM_CLEAR_ALL_OPTION     SkillParam = 24
)

// Enum value maps for SkillParam.
var (
	SkillParam_name = map[int32]string{
		1:  "SKILLPARAM_SKILLITEM",
		2:  "SKILLPARAM_SKILLUPDATE",
		3:  "SKILLPARAM_LEVELUPSKILL",
		4:  "SKILLPARAM_EQUIPSKILL",
		5:  "SKILLPARAM_RESETSKILL",
		6:  "SKILLPARAM_SKILLVALIDPOS",
		7:  "SKILLPARAM_CHANGE_SKILL",
		8:  "SKILLPARAM_SPEC_SKILL_INFO",
		9:  "SKILLPARAM_SELECT_RUNE",
		10: "SKILLPARAM_MARK_SKILLNPC",
		11: "SKILLPARAM_TRGGER_SKILLNPC",
		12: "SKILLPARAM_SKILLOPTIONS",
		13: "SKILLPARAM_DYNAMIC_SKILL_INFO",
		14: "SKILLPARAM_DYNAMIC_SKILL_UPDATE",
		15: "SKILLPARAM_SYNC_DEST_POS",
		16: "SKILLPARAM_RESET_TALENT_SKILL",
		17: "SKILLPARAM_SELECT_MULTIOPT",
		18: "SKILLPARAM_SYNC_MULTIOPT",
		19: "SKILLPARAM_MASKSKILL_RANDOM",
		20: "SKILLPARAM_SKILL_EFFECT",
		21: "SKILLPARAM_SYNC_SKILL_EFFECT",
		22: "SKILLPARAM_STOP_BOSS_SKILL",
		23: "SKILLPARAM_CHANGE_AUTO_SHORTCUT",
		24: "SKILLPARAM_CLEAR_ALL_OPTION",
	}
	SkillParam_value = map[string]int32{
		"SKILLPARAM_SKILLITEM":            1,
		"SKILLPARAM_SKILLUPDATE":          2,
		"SKILLPARAM_LEVELUPSKILL":         3,
		"SKILLPARAM_EQUIPSKILL":           4,
		"SKILLPARAM_RESETSKILL":           5,
		"SKILLPARAM_SKILLVALIDPOS":        6,
		"SKILLPARAM_CHANGE_SKILL":         7,
		"SKILLPARAM_SPEC_SKILL_INFO":      8,
		"SKILLPARAM_SELECT_RUNE":          9,
		"SKILLPARAM_MARK_SKILLNPC":        10,
		"SKILLPARAM_TRGGER_SKILLNPC":      11,
		"SKILLPARAM_SKILLOPTIONS":         12,
		"SKILLPARAM_DYNAMIC_SKILL_INFO":   13,
		"SKILLPARAM_DYNAMIC_SKILL_UPDATE": 14,
		"SKILLPARAM_SYNC_DEST_POS":        15,
		"SKILLPARAM_RESET_TALENT_SKILL":   16,
		"SKILLPARAM_SELECT_MULTIOPT":      17,
		"SKILLPARAM_SYNC_MULTIOPT":        18,
		"SKILLPARAM_MASKSKILL_RANDOM":     19,
		"SKILLPARAM_SKILL_EFFECT":         20,
		"SKILLPARAM_SYNC_SKILL_EFFECT":    21,
		"SKILLPARAM_STOP_BOSS_SKILL":      22,
		"SKILLPARAM_CHANGE_AUTO_SHORTCUT": 23,
		"SKILLPARAM_CLEAR_ALL_OPTION":     24,
	}
)

func (x SkillParam) Enum() *SkillParam {
	p := new(SkillParam)
	*p = x
	return p
}

func (x SkillParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkillParam) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneSkill_proto_enumTypes[0].Descriptor()
}

func (SkillParam) Type() protoreflect.EnumType {
	return &file_SceneSkill_proto_enumTypes[0]
}

func (x SkillParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SkillParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SkillParam(num)
	return nil
}

// Deprecated: Use SkillParam.Descriptor instead.
func (SkillParam) EnumDescriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{0}
}

type ESpecialSkillCostType int32

const (
	ESpecialSkillCostType_ESPSCOSTTYPE_HEADWEARSCENE ESpecialSkillCostType = 1
	ESpecialSkillCostType_ESPSCOSTTYPE_ROGUEITEM     ESpecialSkillCostType = 2
	ESpecialSkillCostType_ESPSCOSTTYPE_TWELVEPVP     ESpecialSkillCostType = 3
)

// Enum value maps for ESpecialSkillCostType.
var (
	ESpecialSkillCostType_name = map[int32]string{
		1: "ESPSCOSTTYPE_HEADWEARSCENE",
		2: "ESPSCOSTTYPE_ROGUEITEM",
		3: "ESPSCOSTTYPE_TWELVEPVP",
	}
	ESpecialSkillCostType_value = map[string]int32{
		"ESPSCOSTTYPE_HEADWEARSCENE": 1,
		"ESPSCOSTTYPE_ROGUEITEM":     2,
		"ESPSCOSTTYPE_TWELVEPVP":     3,
	}
)

func (x ESpecialSkillCostType) Enum() *ESpecialSkillCostType {
	p := new(ESpecialSkillCostType)
	*p = x
	return p
}

func (x ESpecialSkillCostType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESpecialSkillCostType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneSkill_proto_enumTypes[1].Descriptor()
}

func (ESpecialSkillCostType) Type() protoreflect.EnumType {
	return &file_SceneSkill_proto_enumTypes[1]
}

func (x ESpecialSkillCostType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESpecialSkillCostType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESpecialSkillCostType(num)
	return nil
}

// Deprecated: Use ESpecialSkillCostType.Descriptor instead.
func (ESpecialSkillCostType) EnumDescriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{1}
}

type ESkillShortcut int32

const (
	ESkillShortcut_ESKILLSHORTCUT_MIN       ESkillShortcut = 0
	ESkillShortcut_ESKILLSHORTCUT_NORMAL    ESkillShortcut = 1
	ESkillShortcut_ESKILLSHORTCUT_AUTO      ESkillShortcut = 2
	ESkillShortcut_ESKILLSHORTCUT_EXTEND    ESkillShortcut = 3
	ESkillShortcut_ESKILLSHORTCUT_BEINGAUTO ESkillShortcut = 4
	ESkillShortcut_ESKILLSHORTCUT_EXTEND_2  ESkillShortcut = 5
	ESkillShortcut_ESKILLSHORTCUT_EXTEND_3  ESkillShortcut = 6
	ESkillShortcut_ESKILLSHORTCUT_AUTO_2    ESkillShortcut = 7
	ESkillShortcut_ESKILLSHORTCUT_MAX       ESkillShortcut = 8
)

// Enum value maps for ESkillShortcut.
var (
	ESkillShortcut_name = map[int32]string{
		0: "ESKILLSHORTCUT_MIN",
		1: "ESKILLSHORTCUT_NORMAL",
		2: "ESKILLSHORTCUT_AUTO",
		3: "ESKILLSHORTCUT_EXTEND",
		4: "ESKILLSHORTCUT_BEINGAUTO",
		5: "ESKILLSHORTCUT_EXTEND_2",
		6: "ESKILLSHORTCUT_EXTEND_3",
		7: "ESKILLSHORTCUT_AUTO_2",
		8: "ESKILLSHORTCUT_MAX",
	}
	ESkillShortcut_value = map[string]int32{
		"ESKILLSHORTCUT_MIN":       0,
		"ESKILLSHORTCUT_NORMAL":    1,
		"ESKILLSHORTCUT_AUTO":      2,
		"ESKILLSHORTCUT_EXTEND":    3,
		"ESKILLSHORTCUT_BEINGAUTO": 4,
		"ESKILLSHORTCUT_EXTEND_2":  5,
		"ESKILLSHORTCUT_EXTEND_3":  6,
		"ESKILLSHORTCUT_AUTO_2":    7,
		"ESKILLSHORTCUT_MAX":       8,
	}
)

func (x ESkillShortcut) Enum() *ESkillShortcut {
	p := new(ESkillShortcut)
	*p = x
	return p
}

func (x ESkillShortcut) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESkillShortcut) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneSkill_proto_enumTypes[2].Descriptor()
}

func (ESkillShortcut) Type() protoreflect.EnumType {
	return &file_SceneSkill_proto_enumTypes[2]
}

func (x ESkillShortcut) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESkillShortcut) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESkillShortcut(num)
	return nil
}

// Deprecated: Use ESkillShortcut.Descriptor instead.
func (ESkillShortcut) EnumDescriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{2}
}

type ELevelupType int32

const (
	ELevelupType_ELEVELUPTYPE_MIN         ELevelupType = 0
	ELevelupType_ELEVELUPTYPE_MT          ELevelupType = 1
	ELevelupType_ELEVELUPTYPE_AT          ELevelupType = 2
	ELevelupType_ELEVELUPTYPE_TALENT      ELevelupType = 3
	ELevelupType_ELEVELUPTYPE_FOURTH      ELevelupType = 4
	ELevelupType_ELEVELUPTYPE_BREAK_LIMIT ELevelupType = 5
	ELevelupType_ELEVELUPTYPE_MAX         ELevelupType = 6
)

// Enum value maps for ELevelupType.
var (
	ELevelupType_name = map[int32]string{
		0: "ELEVELUPTYPE_MIN",
		1: "ELEVELUPTYPE_MT",
		2: "ELEVELUPTYPE_AT",
		3: "ELEVELUPTYPE_TALENT",
		4: "ELEVELUPTYPE_FOURTH",
		5: "ELEVELUPTYPE_BREAK_LIMIT",
		6: "ELEVELUPTYPE_MAX",
	}
	ELevelupType_value = map[string]int32{
		"ELEVELUPTYPE_MIN":         0,
		"ELEVELUPTYPE_MT":          1,
		"ELEVELUPTYPE_AT":          2,
		"ELEVELUPTYPE_TALENT":      3,
		"ELEVELUPTYPE_FOURTH":      4,
		"ELEVELUPTYPE_BREAK_LIMIT": 5,
		"ELEVELUPTYPE_MAX":         6,
	}
)

func (x ELevelupType) Enum() *ELevelupType {
	p := new(ELevelupType)
	*p = x
	return p
}

func (x ELevelupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELevelupType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneSkill_proto_enumTypes[3].Descriptor()
}

func (ELevelupType) Type() protoreflect.EnumType {
	return &file_SceneSkill_proto_enumTypes[3]
}

func (x ELevelupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELevelupType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELevelupType(num)
	return nil
}

// Deprecated: Use ELevelupType.Descriptor instead.
func (ELevelupType) EnumDescriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{3}
}

type ETrigSkillType int32

const (
	ETrigSkillType_ETRIGTSKILL_MIN    ETrigSkillType = 0
	ETrigSkillType_ETRIGTSKILL_BTRANS ETrigSkillType = 1
)

// Enum value maps for ETrigSkillType.
var (
	ETrigSkillType_name = map[int32]string{
		0: "ETRIGTSKILL_MIN",
		1: "ETRIGTSKILL_BTRANS",
	}
	ETrigSkillType_value = map[string]int32{
		"ETRIGTSKILL_MIN":    0,
		"ETRIGTSKILL_BTRANS": 1,
	}
)

func (x ETrigSkillType) Enum() *ETrigSkillType {
	p := new(ETrigSkillType)
	*p = x
	return p
}

func (x ETrigSkillType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETrigSkillType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneSkill_proto_enumTypes[4].Descriptor()
}

func (ETrigSkillType) Type() protoreflect.EnumType {
	return &file_SceneSkill_proto_enumTypes[4]
}

func (x ETrigSkillType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETrigSkillType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETrigSkillType(num)
	return nil
}

// Deprecated: Use ETrigSkillType.Descriptor instead.
func (ETrigSkillType) EnumDescriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{4}
}

type ESkillOption int32

const (
	ESkillOption_ESKILLOPTION_MIN               ESkillOption = 0
	ESkillOption_ESKILLOPTION_AUTOQUEUE         ESkillOption = 1
	ESkillOption_ESKILLOPTION_SUMMONBEING       ESkillOption = 2
	ESkillOption_ESKILLOPTION_AUTO_ARCHERY      ESkillOption = 3
	ESkillOption_ESKILLOPTION_FISTS_MAGIC       ESkillOption = 4
	ESkillOption_ESKILLOPTION_SUMMON_ELEMENT    ESkillOption = 5
	ESkillOption_ESKILLOPTION_BUFF_SKILLLIST    ESkillOption = 6
	ESkillOption_ESKILLOPTION_SELECT_BUFFS      ESkillOption = 7
	ESkillOption_ESKILLOPTION_SELECT_MOUNT      ESkillOption = 8
	ESkillOption_ESKILLOPTION_QUICK_RIDE        ESkillOption = 9
	ESkillOption_ESKILLOPTION_FAKE_DEAD         ESkillOption = 10
	ESkillOption_ESKILLOPTION_PIONEER_SKILLLIST ESkillOption = 11
	ESkillOption_ESKILLOPTION_AUTOLOCK_MVP      ESkillOption = 12
	ESkillOption_ESKILLOPTION_AUTOLOCK_MINI     ESkillOption = 13
	ESkillOption_ESKILLOPTION_REPLACE_SKILLLIST ESkillOption = 14
	ESkillOption_ESKILLOPTION_AUTOLOCK_DEADBOSS ESkillOption = 15
	ESkillOption_ESKILLOPTION_MAX               ESkillOption = 16
)

// Enum value maps for ESkillOption.
var (
	ESkillOption_name = map[int32]string{
		0:  "ESKILLOPTION_MIN",
		1:  "ESKILLOPTION_AUTOQUEUE",
		2:  "ESKILLOPTION_SUMMONBEING",
		3:  "ESKILLOPTION_AUTO_ARCHERY",
		4:  "ESKILLOPTION_FISTS_MAGIC",
		5:  "ESKILLOPTION_SUMMON_ELEMENT",
		6:  "ESKILLOPTION_BUFF_SKILLLIST",
		7:  "ESKILLOPTION_SELECT_BUFFS",
		8:  "ESKILLOPTION_SELECT_MOUNT",
		9:  "ESKILLOPTION_QUICK_RIDE",
		10: "ESKILLOPTION_FAKE_DEAD",
		11: "ESKILLOPTION_PIONEER_SKILLLIST",
		12: "ESKILLOPTION_AUTOLOCK_MVP",
		13: "ESKILLOPTION_AUTOLOCK_MINI",
		14: "ESKILLOPTION_REPLACE_SKILLLIST",
		15: "ESKILLOPTION_AUTOLOCK_DEADBOSS",
		16: "ESKILLOPTION_MAX",
	}
	ESkillOption_value = map[string]int32{
		"ESKILLOPTION_MIN":               0,
		"ESKILLOPTION_AUTOQUEUE":         1,
		"ESKILLOPTION_SUMMONBEING":       2,
		"ESKILLOPTION_AUTO_ARCHERY":      3,
		"ESKILLOPTION_FISTS_MAGIC":       4,
		"ESKILLOPTION_SUMMON_ELEMENT":    5,
		"ESKILLOPTION_BUFF_SKILLLIST":    6,
		"ESKILLOPTION_SELECT_BUFFS":      7,
		"ESKILLOPTION_SELECT_MOUNT":      8,
		"ESKILLOPTION_QUICK_RIDE":        9,
		"ESKILLOPTION_FAKE_DEAD":         10,
		"ESKILLOPTION_PIONEER_SKILLLIST": 11,
		"ESKILLOPTION_AUTOLOCK_MVP":      12,
		"ESKILLOPTION_AUTOLOCK_MINI":     13,
		"ESKILLOPTION_REPLACE_SKILLLIST": 14,
		"ESKILLOPTION_AUTOLOCK_DEADBOSS": 15,
		"ESKILLOPTION_MAX":               16,
	}
)

func (x ESkillOption) Enum() *ESkillOption {
	p := new(ESkillOption)
	*p = x
	return p
}

func (x ESkillOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESkillOption) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneSkill_proto_enumTypes[5].Descriptor()
}

func (ESkillOption) Type() protoreflect.EnumType {
	return &file_SceneSkill_proto_enumTypes[5]
}

func (x ESkillOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESkillOption) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESkillOption(num)
	return nil
}

// Deprecated: Use ESkillOption.Descriptor instead.
func (ESkillOption) EnumDescriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{5}
}

type SkillConsume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Curvalue *uint32 `protobuf:"varint,1,opt,name=curvalue,def=0" json:"curvalue,omitempty"`
	Maxvalue *uint32 `protobuf:"varint,2,opt,name=maxvalue,def=0" json:"maxvalue,omitempty"`
	Nexttime *uint32 `protobuf:"varint,3,opt,name=nexttime,def=0" json:"nexttime,omitempty"`
}

// Default values for SkillConsume fields.
const (
	Default_SkillConsume_Curvalue = uint32(0)
	Default_SkillConsume_Maxvalue = uint32(0)
	Default_SkillConsume_Nexttime = uint32(0)
)

func (x *SkillConsume) Reset() {
	*x = SkillConsume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillConsume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillConsume) ProtoMessage() {}

func (x *SkillConsume) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillConsume.ProtoReflect.Descriptor instead.
func (*SkillConsume) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{0}
}

func (x *SkillConsume) GetCurvalue() uint32 {
	if x != nil && x.Curvalue != nil {
		return *x.Curvalue
	}
	return Default_SkillConsume_Curvalue
}

func (x *SkillConsume) GetMaxvalue() uint32 {
	if x != nil && x.Maxvalue != nil {
		return *x.Maxvalue
	}
	return Default_SkillConsume_Maxvalue
}

func (x *SkillConsume) GetNexttime() uint32 {
	if x != nil && x.Nexttime != nil {
		return *x.Nexttime
	}
	return Default_SkillConsume_Nexttime
}

type SkillShortcut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *ESkillShortcut `protobuf:"varint,1,opt,name=type,enum=Cmd.ESkillShortcut,def=0" json:"type,omitempty"`
	Pos  *uint32         `protobuf:"varint,2,opt,name=pos,def=0" json:"pos,omitempty"`
}

// Default values for SkillShortcut fields.
const (
	Default_SkillShortcut_Type = ESkillShortcut_ESKILLSHORTCUT_MIN
	Default_SkillShortcut_Pos  = uint32(0)
)

func (x *SkillShortcut) Reset() {
	*x = SkillShortcut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillShortcut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillShortcut) ProtoMessage() {}

func (x *SkillShortcut) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillShortcut.ProtoReflect.Descriptor instead.
func (*SkillShortcut) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{1}
}

func (x *SkillShortcut) GetType() ESkillShortcut {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_SkillShortcut_Type
}

func (x *SkillShortcut) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_SkillShortcut_Pos
}

type SkillItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *uint32          `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Pos          *uint32          `protobuf:"varint,2,opt,name=pos,def=0" json:"pos,omitempty"`
	Cd           *uint32          `protobuf:"varint,3,opt,name=cd,def=0" json:"cd,omitempty"`
	Active       *bool            `protobuf:"varint,4,opt,name=active,def=0" json:"active,omitempty"`
	Learn        *bool            `protobuf:"varint,5,opt,name=learn,def=0" json:"learn,omitempty"`
	Source       *ESource         `protobuf:"varint,6,opt,name=source,enum=Cmd.ESource,def=0" json:"source,omitempty"`
	Profession   *EProfession     `protobuf:"varint,7,opt,name=profession,enum=Cmd.EProfession,def=0" json:"profession,omitempty"`
	Consume      *SkillConsume    `protobuf:"bytes,8,opt,name=consume" json:"consume,omitempty"`
	Sourceid     *uint32          `protobuf:"varint,9,opt,name=sourceid,def=0" json:"sourceid,omitempty"`
	Shadow       *bool            `protobuf:"varint,10,opt,name=shadow,def=0" json:"shadow,omitempty"`
	Autopos      *uint32          `protobuf:"varint,11,opt,name=autopos,def=0" json:"autopos,omitempty"`
	Extendpos    *uint32          `protobuf:"varint,12,opt,name=extendpos,def=0" json:"extendpos,omitempty"`
	Runespecid   *uint32          `protobuf:"varint,13,opt,name=runespecid,def=0" json:"runespecid,omitempty"`
	Replaceid    *uint32          `protobuf:"varint,14,opt,name=replaceid,def=0" json:"replaceid,omitempty"`
	Selectswitch *bool            `protobuf:"varint,15,opt,name=selectswitch,def=1" json:"selectswitch,omitempty"`
	Extralv      *uint32          `protobuf:"varint,16,opt,name=extralv,def=0" json:"extralv,omitempty"`
	Ownerid      *uint64          `protobuf:"varint,17,opt,name=ownerid,def=0" json:"ownerid,omitempty"`
	Notreset     *bool            `protobuf:"varint,18,opt,name=notreset,def=0" json:"notreset,omitempty"`
	Shortcuts    []*SkillShortcut `protobuf:"bytes,19,rep,name=shortcuts" json:"shortcuts,omitempty"`
	Extramaxlv   *uint32          `protobuf:"varint,20,opt,name=extramaxlv,def=0" json:"extramaxlv,omitempty"`
	Expiretime   *uint32          `protobuf:"varint,21,opt,name=expiretime,def=0" json:"expiretime,omitempty"`
	Usedcount    *uint32          `protobuf:"varint,22,opt,name=usedcount,def=0" json:"usedcount,omitempty"`
	Allcount     *uint32          `protobuf:"varint,23,opt,name=allcount,def=0" json:"allcount,omitempty"`
}

// Default values for SkillItem fields.
const (
	Default_SkillItem_Id           = uint32(0)
	Default_SkillItem_Pos          = uint32(0)
	Default_SkillItem_Cd           = uint32(0)
	Default_SkillItem_Active       = bool(false)
	Default_SkillItem_Learn        = bool(false)
	Default_SkillItem_Source       = ESource_ESOURCE_MIN
	Default_SkillItem_Profession   = EProfession_EPROFESSION_MIN
	Default_SkillItem_Sourceid     = uint32(0)
	Default_SkillItem_Shadow       = bool(false)
	Default_SkillItem_Autopos      = uint32(0)
	Default_SkillItem_Extendpos    = uint32(0)
	Default_SkillItem_Runespecid   = uint32(0)
	Default_SkillItem_Replaceid    = uint32(0)
	Default_SkillItem_Selectswitch = bool(true)
	Default_SkillItem_Extralv      = uint32(0)
	Default_SkillItem_Ownerid      = uint64(0)
	Default_SkillItem_Notreset     = bool(false)
	Default_SkillItem_Extramaxlv   = uint32(0)
	Default_SkillItem_Expiretime   = uint32(0)
	Default_SkillItem_Usedcount    = uint32(0)
	Default_SkillItem_Allcount     = uint32(0)
)

func (x *SkillItem) Reset() {
	*x = SkillItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillItem) ProtoMessage() {}

func (x *SkillItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillItem.ProtoReflect.Descriptor instead.
func (*SkillItem) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{2}
}

func (x *SkillItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_SkillItem_Id
}

func (x *SkillItem) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_SkillItem_Pos
}

func (x *SkillItem) GetCd() uint32 {
	if x != nil && x.Cd != nil {
		return *x.Cd
	}
	return Default_SkillItem_Cd
}

func (x *SkillItem) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return Default_SkillItem_Active
}

func (x *SkillItem) GetLearn() bool {
	if x != nil && x.Learn != nil {
		return *x.Learn
	}
	return Default_SkillItem_Learn
}

func (x *SkillItem) GetSource() ESource {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return Default_SkillItem_Source
}

func (x *SkillItem) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return Default_SkillItem_Profession
}

func (x *SkillItem) GetConsume() *SkillConsume {
	if x != nil {
		return x.Consume
	}
	return nil
}

func (x *SkillItem) GetSourceid() uint32 {
	if x != nil && x.Sourceid != nil {
		return *x.Sourceid
	}
	return Default_SkillItem_Sourceid
}

func (x *SkillItem) GetShadow() bool {
	if x != nil && x.Shadow != nil {
		return *x.Shadow
	}
	return Default_SkillItem_Shadow
}

func (x *SkillItem) GetAutopos() uint32 {
	if x != nil && x.Autopos != nil {
		return *x.Autopos
	}
	return Default_SkillItem_Autopos
}

func (x *SkillItem) GetExtendpos() uint32 {
	if x != nil && x.Extendpos != nil {
		return *x.Extendpos
	}
	return Default_SkillItem_Extendpos
}

func (x *SkillItem) GetRunespecid() uint32 {
	if x != nil && x.Runespecid != nil {
		return *x.Runespecid
	}
	return Default_SkillItem_Runespecid
}

func (x *SkillItem) GetReplaceid() uint32 {
	if x != nil && x.Replaceid != nil {
		return *x.Replaceid
	}
	return Default_SkillItem_Replaceid
}

func (x *SkillItem) GetSelectswitch() bool {
	if x != nil && x.Selectswitch != nil {
		return *x.Selectswitch
	}
	return Default_SkillItem_Selectswitch
}

func (x *SkillItem) GetExtralv() uint32 {
	if x != nil && x.Extralv != nil {
		return *x.Extralv
	}
	return Default_SkillItem_Extralv
}

func (x *SkillItem) GetOwnerid() uint64 {
	if x != nil && x.Ownerid != nil {
		return *x.Ownerid
	}
	return Default_SkillItem_Ownerid
}

func (x *SkillItem) GetNotreset() bool {
	if x != nil && x.Notreset != nil {
		return *x.Notreset
	}
	return Default_SkillItem_Notreset
}

func (x *SkillItem) GetShortcuts() []*SkillShortcut {
	if x != nil {
		return x.Shortcuts
	}
	return nil
}

func (x *SkillItem) GetExtramaxlv() uint32 {
	if x != nil && x.Extramaxlv != nil {
		return *x.Extramaxlv
	}
	return Default_SkillItem_Extramaxlv
}

func (x *SkillItem) GetExpiretime() uint32 {
	if x != nil && x.Expiretime != nil {
		return *x.Expiretime
	}
	return Default_SkillItem_Expiretime
}

func (x *SkillItem) GetUsedcount() uint32 {
	if x != nil && x.Usedcount != nil {
		return *x.Usedcount
	}
	return Default_SkillItem_Usedcount
}

func (x *SkillItem) GetAllcount() uint32 {
	if x != nil && x.Allcount != nil {
		return *x.Allcount
	}
	return Default_SkillItem_Allcount
}

type SkillData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usedpoint    *uint32      `protobuf:"varint,1,opt,name=usedpoint,def=0" json:"usedpoint,omitempty"`
	Profession   *EProfession `protobuf:"varint,2,opt,name=profession,enum=Cmd.EProfession,def=0" json:"profession,omitempty"`
	Items        []*SkillItem `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	Primarypoint *uint32      `protobuf:"varint,4,opt,name=primarypoint,def=0" json:"primarypoint,omitempty"`
}

// Default values for SkillData fields.
const (
	Default_SkillData_Usedpoint    = uint32(0)
	Default_SkillData_Profession   = EProfession_EPROFESSION_MIN
	Default_SkillData_Primarypoint = uint32(0)
)

func (x *SkillData) Reset() {
	*x = SkillData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillData) ProtoMessage() {}

func (x *SkillData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillData.ProtoReflect.Descriptor instead.
func (*SkillData) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{3}
}

func (x *SkillData) GetUsedpoint() uint32 {
	if x != nil && x.Usedpoint != nil {
		return *x.Usedpoint
	}
	return Default_SkillData_Usedpoint
}

func (x *SkillData) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return Default_SkillData_Profession
}

func (x *SkillData) GetItems() []*SkillItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SkillData) GetPrimarypoint() uint32 {
	if x != nil && x.Primarypoint != nil {
		return *x.Primarypoint
	}
	return Default_SkillData_Primarypoint
}

type SkillPos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Pos      *uint32 `protobuf:"varint,2,opt,name=pos,def=0" json:"pos,omitempty"`
	Sourceid *uint32 `protobuf:"varint,3,opt,name=sourceid,def=0" json:"sourceid,omitempty"`
}

// Default values for SkillPos fields.
const (
	Default_SkillPos_Id       = uint32(0)
	Default_SkillPos_Pos      = uint32(0)
	Default_SkillPos_Sourceid = uint32(0)
)

func (x *SkillPos) Reset() {
	*x = SkillPos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillPos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillPos) ProtoMessage() {}

func (x *SkillPos) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillPos.ProtoReflect.Descriptor instead.
func (*SkillPos) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{4}
}

func (x *SkillPos) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_SkillPos_Id
}

func (x *SkillPos) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_SkillPos_Pos
}

func (x *SkillPos) GetSourceid() uint32 {
	if x != nil && x.Sourceid != nil {
		return *x.Sourceid
	}
	return Default_SkillPos_Sourceid
}

type TalentSkillData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usedpoint *uint32      `protobuf:"varint,1,opt,name=usedpoint" json:"usedpoint,omitempty"`
	Items     []*SkillItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *TalentSkillData) Reset() {
	*x = TalentSkillData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalentSkillData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalentSkillData) ProtoMessage() {}

func (x *TalentSkillData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalentSkillData.ProtoReflect.Descriptor instead.
func (*TalentSkillData) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{5}
}

func (x *TalentSkillData) GetUsedpoint() uint32 {
	if x != nil && x.Usedpoint != nil {
		return *x.Usedpoint
	}
	return 0
}

func (x *TalentSkillData) GetItems() []*SkillItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ReqSkillData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd              *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param            *SkillParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=1" json:"param,omitempty"`
	Data             []*SkillData       `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	Talentdata       []*TalentSkillData `protobuf:"bytes,4,rep,name=talentdata" json:"talentdata,omitempty"`
	ForthSkillFulled *bool              `protobuf:"varint,5,opt,name=forth_skill_fulled,json=forthSkillFulled,def=0" json:"forth_skill_fulled,omitempty"`
	AutoShortcut     *ESkillShortcut    `protobuf:"varint,6,opt,name=auto_shortcut,json=autoShortcut,enum=Cmd.ESkillShortcut" json:"auto_shortcut,omitempty"`
}

// Default values for ReqSkillData fields.
const (
	Default_ReqSkillData_Cmd              = Command_SCENE_USER_SKILL_PROTOCMD
	Default_ReqSkillData_Param            = SkillParam_SKILLPARAM_SKILLITEM
	Default_ReqSkillData_ForthSkillFulled = bool(false)
)

func (x *ReqSkillData) Reset() {
	*x = ReqSkillData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSkillData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSkillData) ProtoMessage() {}

func (x *ReqSkillData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSkillData.ProtoReflect.Descriptor instead.
func (*ReqSkillData) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{6}
}

func (x *ReqSkillData) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqSkillData_Cmd
}

func (x *ReqSkillData) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqSkillData_Param
}

func (x *ReqSkillData) GetData() []*SkillData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReqSkillData) GetTalentdata() []*TalentSkillData {
	if x != nil {
		return x.Talentdata
	}
	return nil
}

func (x *ReqSkillData) GetForthSkillFulled() bool {
	if x != nil && x.ForthSkillFulled != nil {
		return *x.ForthSkillFulled
	}
	return Default_ReqSkillData_ForthSkillFulled
}

func (x *ReqSkillData) GetAutoShortcut() ESkillShortcut {
	if x != nil && x.AutoShortcut != nil {
		return *x.AutoShortcut
	}
	return ESkillShortcut_ESKILLSHORTCUT_MIN
}

type SkillUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd                    *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param                  *SkillParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=2" json:"param,omitempty"`
	Update                 []*SkillData       `protobuf:"bytes,3,rep,name=update" json:"update,omitempty"`
	Del                    []*SkillData       `protobuf:"bytes,4,rep,name=del" json:"del,omitempty"`
	TalentUpdate           []*TalentSkillData `protobuf:"bytes,5,rep,name=talent_update,json=talentUpdate" json:"talent_update,omitempty"`
	TalentDel              []*TalentSkillData `protobuf:"bytes,6,rep,name=talent_del,json=talentDel" json:"talent_del,omitempty"`
	ForthSkillFulledChange *bool              `protobuf:"varint,7,opt,name=forth_skill_fulled_change,json=forthSkillFulledChange,def=0" json:"forth_skill_fulled_change,omitempty"`
}

// Default values for SkillUpdate fields.
const (
	Default_SkillUpdate_Cmd                    = Command_SCENE_USER_SKILL_PROTOCMD
	Default_SkillUpdate_Param                  = SkillParam_SKILLPARAM_SKILLUPDATE
	Default_SkillUpdate_ForthSkillFulledChange = bool(false)
)

func (x *SkillUpdate) Reset() {
	*x = SkillUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillUpdate) ProtoMessage() {}

func (x *SkillUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillUpdate.ProtoReflect.Descriptor instead.
func (*SkillUpdate) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{7}
}

func (x *SkillUpdate) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SkillUpdate_Cmd
}

func (x *SkillUpdate) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SkillUpdate_Param
}

func (x *SkillUpdate) GetUpdate() []*SkillData {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *SkillUpdate) GetDel() []*SkillData {
	if x != nil {
		return x.Del
	}
	return nil
}

func (x *SkillUpdate) GetTalentUpdate() []*TalentSkillData {
	if x != nil {
		return x.TalentUpdate
	}
	return nil
}

func (x *SkillUpdate) GetTalentDel() []*TalentSkillData {
	if x != nil {
		return x.TalentDel
	}
	return nil
}

func (x *SkillUpdate) GetForthSkillFulledChange() bool {
	if x != nil && x.ForthSkillFulledChange != nil {
		return *x.ForthSkillFulledChange
	}
	return Default_SkillUpdate_ForthSkillFulledChange
}

type LevelupSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param    *SkillParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=3" json:"param,omitempty"`
	Type     *ELevelupType `protobuf:"varint,3,opt,name=type,enum=Cmd.ELevelupType,def=0" json:"type,omitempty"`
	Skillids []uint32      `protobuf:"varint,4,rep,name=skillids" json:"skillids,omitempty"`
}

// Default values for LevelupSkill fields.
const (
	Default_LevelupSkill_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_LevelupSkill_Param = SkillParam_SKILLPARAM_LEVELUPSKILL
	Default_LevelupSkill_Type  = ELevelupType_ELEVELUPTYPE_MIN
)

func (x *LevelupSkill) Reset() {
	*x = LevelupSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelupSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelupSkill) ProtoMessage() {}

func (x *LevelupSkill) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelupSkill.ProtoReflect.Descriptor instead.
func (*LevelupSkill) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{8}
}

func (x *LevelupSkill) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LevelupSkill_Cmd
}

func (x *LevelupSkill) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LevelupSkill_Param
}

func (x *LevelupSkill) GetType() ELevelupType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_LevelupSkill_Type
}

func (x *LevelupSkill) GetSkillids() []uint32 {
	if x != nil {
		return x.Skillids
	}
	return nil
}

type EquipSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param    *SkillParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=4" json:"param,omitempty"`
	Skillid  *uint32         `protobuf:"varint,3,opt,name=skillid,def=0" json:"skillid,omitempty"`
	Pos      *uint32         `protobuf:"varint,4,opt,name=pos,def=0" json:"pos,omitempty"`
	Sourceid *uint32         `protobuf:"varint,5,opt,name=sourceid,def=0" json:"sourceid,omitempty"`
	Efrom    *ESkillShortcut `protobuf:"varint,6,opt,name=efrom,enum=Cmd.ESkillShortcut,def=0" json:"efrom,omitempty"`
	Eto      *ESkillShortcut `protobuf:"varint,7,opt,name=eto,enum=Cmd.ESkillShortcut,def=0" json:"eto,omitempty"`
	Beingid  *uint32         `protobuf:"varint,8,opt,name=beingid,def=0" json:"beingid,omitempty"`
}

// Default values for EquipSkill fields.
const (
	Default_EquipSkill_Cmd      = Command_SCENE_USER_SKILL_PROTOCMD
	Default_EquipSkill_Param    = SkillParam_SKILLPARAM_EQUIPSKILL
	Default_EquipSkill_Skillid  = uint32(0)
	Default_EquipSkill_Pos      = uint32(0)
	Default_EquipSkill_Sourceid = uint32(0)
	Default_EquipSkill_Efrom    = ESkillShortcut_ESKILLSHORTCUT_MIN
	Default_EquipSkill_Eto      = ESkillShortcut_ESKILLSHORTCUT_MIN
	Default_EquipSkill_Beingid  = uint32(0)
)

func (x *EquipSkill) Reset() {
	*x = EquipSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipSkill) ProtoMessage() {}

func (x *EquipSkill) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipSkill.ProtoReflect.Descriptor instead.
func (*EquipSkill) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{9}
}

func (x *EquipSkill) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EquipSkill_Cmd
}

func (x *EquipSkill) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EquipSkill_Param
}

func (x *EquipSkill) GetSkillid() uint32 {
	if x != nil && x.Skillid != nil {
		return *x.Skillid
	}
	return Default_EquipSkill_Skillid
}

func (x *EquipSkill) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_EquipSkill_Pos
}

func (x *EquipSkill) GetSourceid() uint32 {
	if x != nil && x.Sourceid != nil {
		return *x.Sourceid
	}
	return Default_EquipSkill_Sourceid
}

func (x *EquipSkill) GetEfrom() ESkillShortcut {
	if x != nil && x.Efrom != nil {
		return *x.Efrom
	}
	return Default_EquipSkill_Efrom
}

func (x *EquipSkill) GetEto() ESkillShortcut {
	if x != nil && x.Eto != nil {
		return *x.Eto
	}
	return Default_EquipSkill_Eto
}

func (x *EquipSkill) GetBeingid() uint32 {
	if x != nil && x.Beingid != nil {
		return *x.Beingid
	}
	return Default_EquipSkill_Beingid
}

type ResetSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param *SkillParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=5" json:"param,omitempty"`
	Type  *ELevelupType `protobuf:"varint,3,opt,name=type,enum=Cmd.ELevelupType,def=0" json:"type,omitempty"`
}

// Default values for ResetSkill fields.
const (
	Default_ResetSkill_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_ResetSkill_Param = SkillParam_SKILLPARAM_RESETSKILL
	Default_ResetSkill_Type  = ELevelupType_ELEVELUPTYPE_MIN
)

func (x *ResetSkill) Reset() {
	*x = ResetSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSkill) ProtoMessage() {}

func (x *ResetSkill) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSkill.ProtoReflect.Descriptor instead.
func (*ResetSkill) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{10}
}

func (x *ResetSkill) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ResetSkill_Cmd
}

func (x *ResetSkill) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ResetSkill_Param
}

func (x *ResetSkill) GetType() ELevelupType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ResetSkill_Type
}

type SkillValidShortcut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *ESkillShortcut `protobuf:"varint,1,opt,name=type,enum=Cmd.ESkillShortcut,def=0" json:"type,omitempty"`
	Pos  []uint32        `protobuf:"varint,2,rep,name=pos" json:"pos,omitempty"`
}

// Default values for SkillValidShortcut fields.
const (
	Default_SkillValidShortcut_Type = ESkillShortcut_ESKILLSHORTCUT_MIN
)

func (x *SkillValidShortcut) Reset() {
	*x = SkillValidShortcut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillValidShortcut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillValidShortcut) ProtoMessage() {}

func (x *SkillValidShortcut) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillValidShortcut.ProtoReflect.Descriptor instead.
func (*SkillValidShortcut) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{11}
}

func (x *SkillValidShortcut) GetType() ESkillShortcut {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_SkillValidShortcut_Type
}

func (x *SkillValidShortcut) GetPos() []uint32 {
	if x != nil {
		return x.Pos
	}
	return nil
}

type SkillValidPos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param     *SkillParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=6" json:"param,omitempty"`
	Shortcuts []*SkillValidShortcut `protobuf:"bytes,3,rep,name=shortcuts" json:"shortcuts,omitempty"`
}

// Default values for SkillValidPos fields.
const (
	Default_SkillValidPos_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_SkillValidPos_Param = SkillParam_SKILLPARAM_SKILLVALIDPOS
)

func (x *SkillValidPos) Reset() {
	*x = SkillValidPos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillValidPos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillValidPos) ProtoMessage() {}

func (x *SkillValidPos) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillValidPos.ProtoReflect.Descriptor instead.
func (*SkillValidPos) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{12}
}

func (x *SkillValidPos) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SkillValidPos_Cmd
}

func (x *SkillValidPos) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SkillValidPos_Param
}

func (x *SkillValidPos) GetShortcuts() []*SkillValidShortcut {
	if x != nil {
		return x.Shortcuts
	}
	return nil
}

type ChangeSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param   *SkillParam `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=7" json:"param,omitempty"`
	Skillid *uint32     `protobuf:"varint,3,opt,name=skillid" json:"skillid,omitempty"`
	Type    *string     `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Isadd   *uint32     `protobuf:"varint,5,opt,name=isadd" json:"isadd,omitempty"`
	Key     *uint32     `protobuf:"varint,6,opt,name=key" json:"key,omitempty"`
}

// Default values for ChangeSkillCmd fields.
const (
	Default_ChangeSkillCmd_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_ChangeSkillCmd_Param = SkillParam_SKILLPARAM_CHANGE_SKILL
)

func (x *ChangeSkillCmd) Reset() {
	*x = ChangeSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeSkillCmd) ProtoMessage() {}

func (x *ChangeSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeSkillCmd.ProtoReflect.Descriptor instead.
func (*ChangeSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{13}
}

func (x *ChangeSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChangeSkillCmd_Cmd
}

func (x *ChangeSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChangeSkillCmd_Param
}

func (x *ChangeSkillCmd) GetSkillid() uint32 {
	if x != nil && x.Skillid != nil {
		return *x.Skillid
	}
	return 0
}

func (x *ChangeSkillCmd) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ChangeSkillCmd) GetIsadd() uint32 {
	if x != nil && x.Isadd != nil {
		return *x.Isadd
	}
	return 0
}

func (x *ChangeSkillCmd) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

type SkillCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid    *uint32 `protobuf:"varint,1,req,name=itemid" json:"itemid,omitempty"`
	Changenum *int32  `protobuf:"varint,2,opt,name=changenum,def=0" json:"changenum,omitempty"`
	Changeper *int32  `protobuf:"varint,3,opt,name=changeper,def=0" json:"changeper,omitempty"`
}

// Default values for SkillCost fields.
const (
	Default_SkillCost_Changenum = int32(0)
	Default_SkillCost_Changeper = int32(0)
)

func (x *SkillCost) Reset() {
	*x = SkillCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillCost) ProtoMessage() {}

func (x *SkillCost) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillCost.ProtoReflect.Descriptor instead.
func (*SkillCost) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{14}
}

func (x *SkillCost) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *SkillCost) GetChangenum() int32 {
	if x != nil && x.Changenum != nil {
		return *x.Changenum
	}
	return Default_SkillCost_Changenum
}

func (x *SkillCost) GetChangeper() int32 {
	if x != nil && x.Changeper != nil {
		return *x.Changeper
	}
	return Default_SkillCost_Changeper
}

type SpecSkillInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint32      `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Attrs       []*UserAttr  `protobuf:"bytes,2,rep,name=attrs" json:"attrs,omitempty"`
	Cost        []*SkillCost `protobuf:"bytes,3,rep,name=cost" json:"cost,omitempty"`
	Changerange *int32       `protobuf:"varint,4,opt,name=changerange,def=0" json:"changerange,omitempty"`
	Changenum   *int32       `protobuf:"varint,5,opt,name=changenum,def=0" json:"changenum,omitempty"`
	Changeready *int32       `protobuf:"varint,6,opt,name=changeready,def=0" json:"changeready,omitempty"`
	Neednoitem  *bool        `protobuf:"varint,7,opt,name=neednoitem,def=0" json:"neednoitem,omitempty"`
	Spotter     *int32       `protobuf:"varint,8,opt,name=spotter,def=0" json:"spotter,omitempty"`
	Maxspper    *int32       `protobuf:"varint,9,opt,name=maxspper,def=0" json:"maxspper,omitempty"`
	Neednocheck *bool        `protobuf:"varint,10,opt,name=neednocheck" json:"neednocheck,omitempty"`
	Neednobuff  *bool        `protobuf:"varint,11,opt,name=neednobuff" json:"neednobuff,omitempty"`
}

// Default values for SpecSkillInfo fields.
const (
	Default_SpecSkillInfo_Changerange = int32(0)
	Default_SpecSkillInfo_Changenum   = int32(0)
	Default_SpecSkillInfo_Changeready = int32(0)
	Default_SpecSkillInfo_Neednoitem  = bool(false)
	Default_SpecSkillInfo_Spotter     = int32(0)
	Default_SpecSkillInfo_Maxspper    = int32(0)
)

func (x *SpecSkillInfo) Reset() {
	*x = SpecSkillInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSkillInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSkillInfo) ProtoMessage() {}

func (x *SpecSkillInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSkillInfo.ProtoReflect.Descriptor instead.
func (*SpecSkillInfo) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{15}
}

func (x *SpecSkillInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SpecSkillInfo) GetAttrs() []*UserAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *SpecSkillInfo) GetCost() []*SkillCost {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *SpecSkillInfo) GetChangerange() int32 {
	if x != nil && x.Changerange != nil {
		return *x.Changerange
	}
	return Default_SpecSkillInfo_Changerange
}

func (x *SpecSkillInfo) GetChangenum() int32 {
	if x != nil && x.Changenum != nil {
		return *x.Changenum
	}
	return Default_SpecSkillInfo_Changenum
}

func (x *SpecSkillInfo) GetChangeready() int32 {
	if x != nil && x.Changeready != nil {
		return *x.Changeready
	}
	return Default_SpecSkillInfo_Changeready
}

func (x *SpecSkillInfo) GetNeednoitem() bool {
	if x != nil && x.Neednoitem != nil {
		return *x.Neednoitem
	}
	return Default_SpecSkillInfo_Neednoitem
}

func (x *SpecSkillInfo) GetSpotter() int32 {
	if x != nil && x.Spotter != nil {
		return *x.Spotter
	}
	return Default_SpecSkillInfo_Spotter
}

func (x *SpecSkillInfo) GetMaxspper() int32 {
	if x != nil && x.Maxspper != nil {
		return *x.Maxspper
	}
	return Default_SpecSkillInfo_Maxspper
}

func (x *SpecSkillInfo) GetNeednocheck() bool {
	if x != nil && x.Neednocheck != nil {
		return *x.Neednocheck
	}
	return false
}

func (x *SpecSkillInfo) GetNeednobuff() bool {
	if x != nil && x.Neednobuff != nil {
		return *x.Neednobuff
	}
	return false
}

type UpSkillInfoSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param        *SkillParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=8" json:"param,omitempty"`
	Specinfo     []*SpecSkillInfo `protobuf:"bytes,3,rep,name=specinfo" json:"specinfo,omitempty"`
	AllskillInfo *SpecSkillInfo   `protobuf:"bytes,4,opt,name=allskillInfo" json:"allskillInfo,omitempty"`
	All          *bool            `protobuf:"varint,5,opt,name=all" json:"all,omitempty"`
}

// Default values for UpSkillInfoSkillCmd fields.
const (
	Default_UpSkillInfoSkillCmd_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_UpSkillInfoSkillCmd_Param = SkillParam_SKILLPARAM_SPEC_SKILL_INFO
)

func (x *UpSkillInfoSkillCmd) Reset() {
	*x = UpSkillInfoSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpSkillInfoSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpSkillInfoSkillCmd) ProtoMessage() {}

func (x *UpSkillInfoSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpSkillInfoSkillCmd.ProtoReflect.Descriptor instead.
func (*UpSkillInfoSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{16}
}

func (x *UpSkillInfoSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpSkillInfoSkillCmd_Cmd
}

func (x *UpSkillInfoSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpSkillInfoSkillCmd_Param
}

func (x *UpSkillInfoSkillCmd) GetSpecinfo() []*SpecSkillInfo {
	if x != nil {
		return x.Specinfo
	}
	return nil
}

func (x *UpSkillInfoSkillCmd) GetAllskillInfo() *SpecSkillInfo {
	if x != nil {
		return x.AllskillInfo
	}
	return nil
}

func (x *UpSkillInfoSkillCmd) GetAll() bool {
	if x != nil && x.All != nil {
		return *x.All
	}
	return false
}

type SelectRuneSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param        *SkillParam `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=9" json:"param,omitempty"`
	Skillid      *uint32     `protobuf:"varint,3,req,name=skillid" json:"skillid,omitempty"`
	Runespecid   *uint32     `protobuf:"varint,4,opt,name=runespecid,def=0" json:"runespecid,omitempty"`
	Selectswitch *bool       `protobuf:"varint,5,opt,name=selectswitch,def=1" json:"selectswitch,omitempty"`
	Beingid      *uint32     `protobuf:"varint,6,opt,name=beingid,def=0" json:"beingid,omitempty"`
}

// Default values for SelectRuneSkillCmd fields.
const (
	Default_SelectRuneSkillCmd_Cmd          = Command_SCENE_USER_SKILL_PROTOCMD
	Default_SelectRuneSkillCmd_Param        = SkillParam_SKILLPARAM_SELECT_RUNE
	Default_SelectRuneSkillCmd_Runespecid   = uint32(0)
	Default_SelectRuneSkillCmd_Selectswitch = bool(true)
	Default_SelectRuneSkillCmd_Beingid      = uint32(0)
)

func (x *SelectRuneSkillCmd) Reset() {
	*x = SelectRuneSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectRuneSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectRuneSkillCmd) ProtoMessage() {}

func (x *SelectRuneSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectRuneSkillCmd.ProtoReflect.Descriptor instead.
func (*SelectRuneSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{17}
}

func (x *SelectRuneSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SelectRuneSkillCmd_Cmd
}

func (x *SelectRuneSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SelectRuneSkillCmd_Param
}

func (x *SelectRuneSkillCmd) GetSkillid() uint32 {
	if x != nil && x.Skillid != nil {
		return *x.Skillid
	}
	return 0
}

func (x *SelectRuneSkillCmd) GetRunespecid() uint32 {
	if x != nil && x.Runespecid != nil {
		return *x.Runespecid
	}
	return Default_SelectRuneSkillCmd_Runespecid
}

func (x *SelectRuneSkillCmd) GetSelectswitch() bool {
	if x != nil && x.Selectswitch != nil {
		return *x.Selectswitch
	}
	return Default_SelectRuneSkillCmd_Selectswitch
}

func (x *SelectRuneSkillCmd) GetBeingid() uint32 {
	if x != nil && x.Beingid != nil {
		return *x.Beingid
	}
	return Default_SelectRuneSkillCmd_Beingid
}

type MarkSkillNpcSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param   *SkillParam `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=10" json:"param,omitempty"`
	Npcguid *uint64     `protobuf:"varint,3,req,name=npcguid" json:"npcguid,omitempty"`
	Skillid *uint32     `protobuf:"varint,4,req,name=skillid" json:"skillid,omitempty"`
}

// Default values for MarkSkillNpcSkillCmd fields.
const (
	Default_MarkSkillNpcSkillCmd_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_MarkSkillNpcSkillCmd_Param = SkillParam_SKILLPARAM_MARK_SKILLNPC
)

func (x *MarkSkillNpcSkillCmd) Reset() {
	*x = MarkSkillNpcSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkSkillNpcSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkSkillNpcSkillCmd) ProtoMessage() {}

func (x *MarkSkillNpcSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkSkillNpcSkillCmd.ProtoReflect.Descriptor instead.
func (*MarkSkillNpcSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{18}
}

func (x *MarkSkillNpcSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MarkSkillNpcSkillCmd_Cmd
}

func (x *MarkSkillNpcSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MarkSkillNpcSkillCmd_Param
}

func (x *MarkSkillNpcSkillCmd) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return 0
}

func (x *MarkSkillNpcSkillCmd) GetSkillid() uint32 {
	if x != nil && x.Skillid != nil {
		return *x.Skillid
	}
	return 0
}

type TriggerSkillNpcSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param   *SkillParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=11" json:"param,omitempty"`
	Npcguid *uint64         `protobuf:"varint,3,req,name=npcguid" json:"npcguid,omitempty"`
	Etype   *ETrigSkillType `protobuf:"varint,4,opt,name=etype,enum=Cmd.ETrigSkillType,def=0" json:"etype,omitempty"`
}

// Default values for TriggerSkillNpcSkillCmd fields.
const (
	Default_TriggerSkillNpcSkillCmd_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_TriggerSkillNpcSkillCmd_Param = SkillParam_SKILLPARAM_TRGGER_SKILLNPC
	Default_TriggerSkillNpcSkillCmd_Etype = ETrigSkillType_ETRIGTSKILL_MIN
)

func (x *TriggerSkillNpcSkillCmd) Reset() {
	*x = TriggerSkillNpcSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerSkillNpcSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerSkillNpcSkillCmd) ProtoMessage() {}

func (x *TriggerSkillNpcSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerSkillNpcSkillCmd.ProtoReflect.Descriptor instead.
func (*TriggerSkillNpcSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{19}
}

func (x *TriggerSkillNpcSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TriggerSkillNpcSkillCmd_Cmd
}

func (x *TriggerSkillNpcSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TriggerSkillNpcSkillCmd_Param
}

func (x *TriggerSkillNpcSkillCmd) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return 0
}

func (x *TriggerSkillNpcSkillCmd) GetEtype() ETrigSkillType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_TriggerSkillNpcSkillCmd_Etype
}

type SkillOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt   *ESkillOption `protobuf:"varint,1,req,name=opt,enum=Cmd.ESkillOption" json:"opt,omitempty"`
	Value *uint32       `protobuf:"varint,2,opt,name=value,def=0" json:"value,omitempty"`
}

// Default values for SkillOption fields.
const (
	Default_SkillOption_Value = uint32(0)
)

func (x *SkillOption) Reset() {
	*x = SkillOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillOption) ProtoMessage() {}

func (x *SkillOption) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillOption.ProtoReflect.Descriptor instead.
func (*SkillOption) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{20}
}

func (x *SkillOption) GetOpt() ESkillOption {
	if x != nil && x.Opt != nil {
		return *x.Opt
	}
	return ESkillOption_ESKILLOPTION_MIN
}

func (x *SkillOption) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_SkillOption_Value
}

type SkillOptionSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param   *SkillParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=12" json:"param,omitempty"`
	SetOpt  *SkillOption   `protobuf:"bytes,3,opt,name=set_opt,json=setOpt" json:"set_opt,omitempty"`
	AllOpts []*SkillOption `protobuf:"bytes,4,rep,name=all_opts,json=allOpts" json:"all_opts,omitempty"`
}

// Default values for SkillOptionSkillCmd fields.
const (
	Default_SkillOptionSkillCmd_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_SkillOptionSkillCmd_Param = SkillParam_SKILLPARAM_SKILLOPTIONS
)

func (x *SkillOptionSkillCmd) Reset() {
	*x = SkillOptionSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillOptionSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillOptionSkillCmd) ProtoMessage() {}

func (x *SkillOptionSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillOptionSkillCmd.ProtoReflect.Descriptor instead.
func (*SkillOptionSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{21}
}

func (x *SkillOptionSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SkillOptionSkillCmd_Cmd
}

func (x *SkillOptionSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SkillOptionSkillCmd_Param
}

func (x *SkillOptionSkillCmd) GetSetOpt() *SkillOption {
	if x != nil {
		return x.SetOpt
	}
	return nil
}

func (x *SkillOptionSkillCmd) GetAllOpts() []*SkillOption {
	if x != nil {
		return x.AllOpts
	}
	return nil
}

type DynamicSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param  *SkillParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=13" json:"param,omitempty"`
	Skills []*SkillItem `protobuf:"bytes,3,rep,name=skills" json:"skills,omitempty"`
}

// Default values for DynamicSkillCmd fields.
const (
	Default_DynamicSkillCmd_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_DynamicSkillCmd_Param = SkillParam_SKILLPARAM_DYNAMIC_SKILL_INFO
)

func (x *DynamicSkillCmd) Reset() {
	*x = DynamicSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicSkillCmd) ProtoMessage() {}

func (x *DynamicSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicSkillCmd.ProtoReflect.Descriptor instead.
func (*DynamicSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{22}
}

func (x *DynamicSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DynamicSkillCmd_Cmd
}

func (x *DynamicSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DynamicSkillCmd_Param
}

func (x *DynamicSkillCmd) GetSkills() []*SkillItem {
	if x != nil {
		return x.Skills
	}
	return nil
}

type UpdateDynamicSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param  *SkillParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=14" json:"param,omitempty"`
	Update []*SkillItem `protobuf:"bytes,3,rep,name=update" json:"update,omitempty"`
	Del    []*SkillItem `protobuf:"bytes,4,rep,name=del" json:"del,omitempty"`
}

// Default values for UpdateDynamicSkillCmd fields.
const (
	Default_UpdateDynamicSkillCmd_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_UpdateDynamicSkillCmd_Param = SkillParam_SKILLPARAM_DYNAMIC_SKILL_UPDATE
)

func (x *UpdateDynamicSkillCmd) Reset() {
	*x = UpdateDynamicSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDynamicSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDynamicSkillCmd) ProtoMessage() {}

func (x *UpdateDynamicSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDynamicSkillCmd.ProtoReflect.Descriptor instead.
func (*UpdateDynamicSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateDynamicSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateDynamicSkillCmd_Cmd
}

func (x *UpdateDynamicSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateDynamicSkillCmd_Param
}

func (x *UpdateDynamicSkillCmd) GetUpdate() []*SkillItem {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *UpdateDynamicSkillCmd) GetDel() []*SkillItem {
	if x != nil {
		return x.Del
	}
	return nil
}

type SyncDestPosSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param   *SkillParam `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=15" json:"param,omitempty"`
	Skillid *uint32     `protobuf:"varint,3,opt,name=skillid,def=0" json:"skillid,omitempty"`
	Pos     *ScenePos   `protobuf:"bytes,4,opt,name=pos" json:"pos,omitempty"`
}

// Default values for SyncDestPosSkillCmd fields.
const (
	Default_SyncDestPosSkillCmd_Cmd     = Command_SCENE_USER_SKILL_PROTOCMD
	Default_SyncDestPosSkillCmd_Param   = SkillParam_SKILLPARAM_SYNC_DEST_POS
	Default_SyncDestPosSkillCmd_Skillid = uint32(0)
)

func (x *SyncDestPosSkillCmd) Reset() {
	*x = SyncDestPosSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDestPosSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDestPosSkillCmd) ProtoMessage() {}

func (x *SyncDestPosSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDestPosSkillCmd.ProtoReflect.Descriptor instead.
func (*SyncDestPosSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{24}
}

func (x *SyncDestPosSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SyncDestPosSkillCmd_Cmd
}

func (x *SyncDestPosSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SyncDestPosSkillCmd_Param
}

func (x *SyncDestPosSkillCmd) GetSkillid() uint32 {
	if x != nil && x.Skillid != nil {
		return *x.Skillid
	}
	return Default_SyncDestPosSkillCmd_Skillid
}

func (x *SyncDestPosSkillCmd) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

type ResetTalentSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param *SkillParam `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=16" json:"param,omitempty"`
}

// Default values for ResetTalentSkillCmd fields.
const (
	Default_ResetTalentSkillCmd_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_ResetTalentSkillCmd_Param = SkillParam_SKILLPARAM_RESET_TALENT_SKILL
)

func (x *ResetTalentSkillCmd) Reset() {
	*x = ResetTalentSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetTalentSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetTalentSkillCmd) ProtoMessage() {}

func (x *ResetTalentSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetTalentSkillCmd.ProtoReflect.Descriptor instead.
func (*ResetTalentSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{25}
}

func (x *ResetTalentSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ResetTalentSkillCmd_Cmd
}

func (x *ResetTalentSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ResetTalentSkillCmd_Param
}

type MultiSkillOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt       *ESkillOption `protobuf:"varint,1,opt,name=opt,enum=Cmd.ESkillOption" json:"opt,omitempty"`
	Value     *uint32       `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Values    []uint32      `protobuf:"varint,3,rep,name=values" json:"values,omitempty"`
	Guid      *string       `protobuf:"bytes,4,opt,name=guid" json:"guid,omitempty"`
	Subvalues []uint32      `protobuf:"varint,5,rep,name=subvalues" json:"subvalues,omitempty"`
}

func (x *MultiSkillOption) Reset() {
	*x = MultiSkillOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSkillOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSkillOption) ProtoMessage() {}

func (x *MultiSkillOption) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSkillOption.ProtoReflect.Descriptor instead.
func (*MultiSkillOption) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{26}
}

func (x *MultiSkillOption) GetOpt() ESkillOption {
	if x != nil && x.Opt != nil {
		return *x.Opt
	}
	return ESkillOption_ESKILLOPTION_MIN
}

func (x *MultiSkillOption) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *MultiSkillOption) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *MultiSkillOption) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *MultiSkillOption) GetSubvalues() []uint32 {
	if x != nil {
		return x.Subvalues
	}
	return nil
}

type MultiSkillOptionUpdateSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param *SkillParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=17" json:"param,omitempty"`
	Opt   *MultiSkillOption `protobuf:"bytes,3,opt,name=opt" json:"opt,omitempty"`
}

// Default values for MultiSkillOptionUpdateSkillCmd fields.
const (
	Default_MultiSkillOptionUpdateSkillCmd_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_MultiSkillOptionUpdateSkillCmd_Param = SkillParam_SKILLPARAM_SELECT_MULTIOPT
)

func (x *MultiSkillOptionUpdateSkillCmd) Reset() {
	*x = MultiSkillOptionUpdateSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSkillOptionUpdateSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSkillOptionUpdateSkillCmd) ProtoMessage() {}

func (x *MultiSkillOptionUpdateSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSkillOptionUpdateSkillCmd.ProtoReflect.Descriptor instead.
func (*MultiSkillOptionUpdateSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{27}
}

func (x *MultiSkillOptionUpdateSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MultiSkillOptionUpdateSkillCmd_Cmd
}

func (x *MultiSkillOptionUpdateSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MultiSkillOptionUpdateSkillCmd_Param
}

func (x *MultiSkillOptionUpdateSkillCmd) GetOpt() *MultiSkillOption {
	if x != nil {
		return x.Opt
	}
	return nil
}

type MultiSkillOptionSyncSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param *SkillParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=18" json:"param,omitempty"`
	Opts  []*MultiSkillOption `protobuf:"bytes,3,rep,name=opts" json:"opts,omitempty"`
}

// Default values for MultiSkillOptionSyncSkillCmd fields.
const (
	Default_MultiSkillOptionSyncSkillCmd_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_MultiSkillOptionSyncSkillCmd_Param = SkillParam_SKILLPARAM_SYNC_MULTIOPT
)

func (x *MultiSkillOptionSyncSkillCmd) Reset() {
	*x = MultiSkillOptionSyncSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSkillOptionSyncSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSkillOptionSyncSkillCmd) ProtoMessage() {}

func (x *MultiSkillOptionSyncSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSkillOptionSyncSkillCmd.ProtoReflect.Descriptor instead.
func (*MultiSkillOptionSyncSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{28}
}

func (x *MultiSkillOptionSyncSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MultiSkillOptionSyncSkillCmd_Cmd
}

func (x *MultiSkillOptionSyncSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MultiSkillOptionSyncSkillCmd_Param
}

func (x *MultiSkillOptionSyncSkillCmd) GetOpts() []*MultiSkillOption {
	if x != nil {
		return x.Opts
	}
	return nil
}

type SkillEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Effect *uint32 `protobuf:"varint,2,opt,name=effect" json:"effect,omitempty"`
}

func (x *SkillEffect) Reset() {
	*x = SkillEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillEffect) ProtoMessage() {}

func (x *SkillEffect) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillEffect.ProtoReflect.Descriptor instead.
func (*SkillEffect) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{29}
}

func (x *SkillEffect) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SkillEffect) GetEffect() uint32 {
	if x != nil && x.Effect != nil {
		return *x.Effect
	}
	return 0
}

type ProSkillEffect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eprofession *EProfession   `protobuf:"varint,1,opt,name=eprofession,enum=Cmd.EProfession" json:"eprofession,omitempty"`
	Seffect     []*SkillEffect `protobuf:"bytes,2,rep,name=seffect" json:"seffect,omitempty"`
}

func (x *ProSkillEffect) Reset() {
	*x = ProSkillEffect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProSkillEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProSkillEffect) ProtoMessage() {}

func (x *ProSkillEffect) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProSkillEffect.ProtoReflect.Descriptor instead.
func (*ProSkillEffect) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{30}
}

func (x *ProSkillEffect) GetEprofession() EProfession {
	if x != nil && x.Eprofession != nil {
		return *x.Eprofession
	}
	return EProfession_EPROFESSION_MIN
}

func (x *ProSkillEffect) GetSeffect() []*SkillEffect {
	if x != nil {
		return x.Seffect
	}
	return nil
}

type SkillEffectSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param   *SkillParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=20" json:"param,omitempty"`
	Charid  *uint64        `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Effects []*SkillEffect `protobuf:"bytes,4,rep,name=effects" json:"effects,omitempty"`
}

// Default values for SkillEffectSkillCmd fields.
const (
	Default_SkillEffectSkillCmd_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_SkillEffectSkillCmd_Param = SkillParam_SKILLPARAM_SKILL_EFFECT
)

func (x *SkillEffectSkillCmd) Reset() {
	*x = SkillEffectSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillEffectSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillEffectSkillCmd) ProtoMessage() {}

func (x *SkillEffectSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillEffectSkillCmd.ProtoReflect.Descriptor instead.
func (*SkillEffectSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{31}
}

func (x *SkillEffectSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SkillEffectSkillCmd_Cmd
}

func (x *SkillEffectSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SkillEffectSkillCmd_Param
}

func (x *SkillEffectSkillCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *SkillEffectSkillCmd) GetEffects() []*SkillEffect {
	if x != nil {
		return x.Effects
	}
	return nil
}

type SyncSkillEffectSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param      *SkillParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=21" json:"param,omitempty"`
	Proeffects []*ProSkillEffect `protobuf:"bytes,3,rep,name=proeffects" json:"proeffects,omitempty"`
}

// Default values for SyncSkillEffectSkillCmd fields.
const (
	Default_SyncSkillEffectSkillCmd_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_SyncSkillEffectSkillCmd_Param = SkillParam_SKILLPARAM_SYNC_SKILL_EFFECT
)

func (x *SyncSkillEffectSkillCmd) Reset() {
	*x = SyncSkillEffectSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncSkillEffectSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncSkillEffectSkillCmd) ProtoMessage() {}

func (x *SyncSkillEffectSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncSkillEffectSkillCmd.ProtoReflect.Descriptor instead.
func (*SyncSkillEffectSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{32}
}

func (x *SyncSkillEffectSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SyncSkillEffectSkillCmd_Cmd
}

func (x *SyncSkillEffectSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SyncSkillEffectSkillCmd_Param
}

func (x *SyncSkillEffectSkillCmd) GetProeffects() []*ProSkillEffect {
	if x != nil {
		return x.Proeffects
	}
	return nil
}

type MaskSkillRandomOneSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param         *SkillParam `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=19" json:"param,omitempty"`
	Randomskillid *uint32     `protobuf:"varint,3,opt,name=randomskillid" json:"randomskillid,omitempty"`
}

// Default values for MaskSkillRandomOneSkillCmd fields.
const (
	Default_MaskSkillRandomOneSkillCmd_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_MaskSkillRandomOneSkillCmd_Param = SkillParam_SKILLPARAM_MASKSKILL_RANDOM
)

func (x *MaskSkillRandomOneSkillCmd) Reset() {
	*x = MaskSkillRandomOneSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaskSkillRandomOneSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskSkillRandomOneSkillCmd) ProtoMessage() {}

func (x *MaskSkillRandomOneSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskSkillRandomOneSkillCmd.ProtoReflect.Descriptor instead.
func (*MaskSkillRandomOneSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{33}
}

func (x *MaskSkillRandomOneSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MaskSkillRandomOneSkillCmd_Cmd
}

func (x *MaskSkillRandomOneSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MaskSkillRandomOneSkillCmd_Param
}

func (x *MaskSkillRandomOneSkillCmd) GetRandomskillid() uint32 {
	if x != nil && x.Randomskillid != nil {
		return *x.Randomskillid
	}
	return 0
}

type StopBossSkillUsageSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param   *SkillParam `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=22" json:"param,omitempty"`
	Bossid  *uint64     `protobuf:"varint,3,opt,name=bossid" json:"bossid,omitempty"`
	Skillid *uint32     `protobuf:"varint,4,opt,name=skillid" json:"skillid,omitempty"`
}

// Default values for StopBossSkillUsageSkillCmd fields.
const (
	Default_StopBossSkillUsageSkillCmd_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_StopBossSkillUsageSkillCmd_Param = SkillParam_SKILLPARAM_STOP_BOSS_SKILL
)

func (x *StopBossSkillUsageSkillCmd) Reset() {
	*x = StopBossSkillUsageSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopBossSkillUsageSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopBossSkillUsageSkillCmd) ProtoMessage() {}

func (x *StopBossSkillUsageSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopBossSkillUsageSkillCmd.ProtoReflect.Descriptor instead.
func (*StopBossSkillUsageSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{34}
}

func (x *StopBossSkillUsageSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StopBossSkillUsageSkillCmd_Cmd
}

func (x *StopBossSkillUsageSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StopBossSkillUsageSkillCmd_Param
}

func (x *StopBossSkillUsageSkillCmd) GetBossid() uint64 {
	if x != nil && x.Bossid != nil {
		return *x.Bossid
	}
	return 0
}

func (x *StopBossSkillUsageSkillCmd) GetSkillid() uint32 {
	if x != nil && x.Skillid != nil {
		return *x.Skillid
	}
	return 0
}

type ChangeAutoShortCutCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param    *SkillParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=23" json:"param,omitempty"`
	Shortcut *ESkillShortcut `protobuf:"varint,3,opt,name=shortcut,enum=Cmd.ESkillShortcut" json:"shortcut,omitempty"`
}

// Default values for ChangeAutoShortCutCmd fields.
const (
	Default_ChangeAutoShortCutCmd_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_ChangeAutoShortCutCmd_Param = SkillParam_SKILLPARAM_CHANGE_AUTO_SHORTCUT
)

func (x *ChangeAutoShortCutCmd) Reset() {
	*x = ChangeAutoShortCutCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAutoShortCutCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAutoShortCutCmd) ProtoMessage() {}

func (x *ChangeAutoShortCutCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAutoShortCutCmd.ProtoReflect.Descriptor instead.
func (*ChangeAutoShortCutCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{35}
}

func (x *ChangeAutoShortCutCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChangeAutoShortCutCmd_Cmd
}

func (x *ChangeAutoShortCutCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChangeAutoShortCutCmd_Param
}

func (x *ChangeAutoShortCutCmd) GetShortcut() ESkillShortcut {
	if x != nil && x.Shortcut != nil {
		return *x.Shortcut
	}
	return ESkillShortcut_ESKILLSHORTCUT_MIN
}

type ClearOptionSkillCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=7" json:"cmd,omitempty"`
	Param *SkillParam `protobuf:"varint,2,opt,name=param,enum=Cmd.SkillParam,def=24" json:"param,omitempty"`
}

// Default values for ClearOptionSkillCmd fields.
const (
	Default_ClearOptionSkillCmd_Cmd   = Command_SCENE_USER_SKILL_PROTOCMD
	Default_ClearOptionSkillCmd_Param = SkillParam_SKILLPARAM_CLEAR_ALL_OPTION
)

func (x *ClearOptionSkillCmd) Reset() {
	*x = ClearOptionSkillCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSkill_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearOptionSkillCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearOptionSkillCmd) ProtoMessage() {}

func (x *ClearOptionSkillCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSkill_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearOptionSkillCmd.ProtoReflect.Descriptor instead.
func (*ClearOptionSkillCmd) Descriptor() ([]byte, []int) {
	return file_SceneSkill_proto_rawDescGZIP(), []int{36}
}

func (x *ClearOptionSkillCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClearOptionSkillCmd_Cmd
}

func (x *ClearOptionSkillCmd) GetParam() SkillParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClearOptionSkillCmd_Param
}

var File_SceneSkill_proto protoreflect.FileDescriptor

var file_SceneSkill_proto_rawDesc = []byte{
	0x0a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x0c, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x3a, 0x12, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xa4, 0x06, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x11, 0x0a,
	0x02, 0x63, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x63, 0x64,
	0x12, 0x1d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1b, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x0b, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x41, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x0f, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x06, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x1b, 0x0a,
	0x07, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x6f, 0x73, 0x12, 0x1f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x72,
	0x75, 0x6e, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x6c, 0x76, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x6c, 0x76, 0x12, 0x1b, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x6e, 0x6f,
	0x74, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63,
	0x75, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x52, 0x09, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x6d, 0x61, 0x78, 0x6c, 0x76, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6d, 0x61, 0x78, 0x6c, 0x76, 0x12, 0x21, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbc,
	0x01, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x0f, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x51, 0x0a,
	0x08, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64,
	0x22, 0x55, 0x0a, 0x0f, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xcf, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x14, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54,
	0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x12, 0x66, 0x6f,
	0x72, 0x74, 0x68, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x66,
	0x6f, 0x72, 0x74, 0x68, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x22, 0x83, 0x03, 0x0a, 0x0b, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x64,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x64, 0x65, 0x6c, 0x12, 0x39, 0x0a,
	0x0d, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x74, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x09, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x12, 0x40, 0x0a,
	0x19, 0x66, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x16, 0x66, 0x6f, 0x72, 0x74, 0x68, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0xde, 0x01, 0x0a, 0x0c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x73,
	0x22, 0xed, 0x02, 0x0a, 0x0a, 0x45, 0x71, 0x75, 0x69, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12,
	0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x3a, 0x12, 0x45,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x5f, 0x4d, 0x49,
	0x4e, 0x52, 0x05, 0x65, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x39, 0x0a, 0x03, 0x65, 0x74, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x3a, 0x12, 0x45, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x03,
	0x65, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x07, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x69, 0x64,
	0x22, 0xbe, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12,
	0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x55, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x63, 0x0a, 0x12, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x3a, 0x12, 0x45, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x18, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x50, 0x4f, 0x53, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x0e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x39,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x61, 0x64, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x73, 0x61, 0x64, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x65, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x70, 0x65, 0x72, 0x22, 0xf8, 0x02, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x22, 0x0a,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x25, 0x0a, 0x0a,
	0x6e, 0x65, 0x65, 0x64, 0x6e, 0x6f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x6e, 0x6f, 0x69,
	0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x73, 0x70, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x73, 0x70, 0x70, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x73, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x6e, 0x6f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x6e, 0x6f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x6e, 0x6f, 0x62, 0x75, 0x66, 0x66, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x6e, 0x6f, 0x62, 0x75, 0x66,
	0x66, 0x22, 0x8d, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c,
	0x6c, 0x22, 0x92, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6e, 0x65,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x16, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0a,
	0x72, 0x75, 0x6e, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x07, 0x62, 0x65, 0x69,
	0x6e, 0x67, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x62,
	0x65, 0x69, 0x6e, 0x67, 0x69, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x72, 0x6b, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4e, 0x70, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6d, 0x64, 0x12,
	0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x4e, 0x50, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x70,
	0x63, 0x67, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x22,
	0xed, 0x01, 0x0a, 0x17, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4e, 0x70, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x52, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4e,
	0x50, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x70, 0x63,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x67,
	0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72, 0x69, 0x67, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0f, 0x45, 0x54, 0x52, 0x49, 0x47, 0x54, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x4b, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x6f, 0x70, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe8, 0x01, 0x0a,
	0x13, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x17, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x29, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x61, 0x6c,
	0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x0f, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x06,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x39,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x26, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x64, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x03, 0x64, 0x65, 0x6c, 0x22, 0xcf, 0x01, 0x0a, 0x13,
	0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x44, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1b, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x96, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x1d, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x97, 0x01, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x03, 0x6f,
	0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6f, 0x70, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x75, 0x62, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0xc7, 0x01, 0x0a, 0x1e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43,
	0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4f, 0x50, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x27, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x1c, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4f, 0x50, 0x54,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6f, 0x70,
	0x74, 0x73, 0x22, 0x35, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0x70, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x65,
	0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x07, 0x73, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x52, 0x07, 0x73, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x13,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x17, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x39,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x33,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x1a, 0x4d, 0x61, 0x73, 0x6b, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4f, 0x6e, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43,
	0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x70,
	0x42, 0x6f, 0x73, 0x73, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1a, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x6f, 0x73, 0x73, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x74, 0x43, 0x6d, 0x64,
	0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41,
	0x55, 0x54, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x63, 0x75, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x2a, 0xf4, 0x05, 0x0a, 0x0a,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x49, 0x54,
	0x45, 0x4d, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x51, 0x55, 0x49,
	0x50, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x50, 0x4f, 0x53, 0x10,
	0x06, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x07, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x08, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x4e, 0x50, 0x43, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x4e, 0x50, 0x43, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x0d, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0e, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43,
	0x5f, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x10, 0x0f, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f,
	0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x10, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4f, 0x50, 0x54, 0x10, 0x11, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4f, 0x50, 0x54, 0x10, 0x12, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x13, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x14, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x15, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f,
	0x42, 0x4f, 0x53, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x16, 0x12, 0x23, 0x0a, 0x1f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x10,
	0x17, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x18, 0x2a, 0x6f, 0x0a, 0x15, 0x45, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x45,
	0x53, 0x50, 0x53, 0x43, 0x4f, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44,
	0x57, 0x45, 0x41, 0x52, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x53, 0x50, 0x53, 0x43, 0x4f, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x47, 0x55,
	0x45, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x53, 0x50, 0x53, 0x43,
	0x4f, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56,
	0x50, 0x10, 0x03, 0x2a, 0x82, 0x02, 0x0a, 0x0e, 0x45, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x48, 0x4f, 0x52,
	0x54, 0x43, 0x55, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x5f,
	0x42, 0x45, 0x49, 0x4e, 0x47, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x44, 0x5f, 0x32, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x44, 0x5f, 0x33, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53,
	0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x32, 0x10, 0x07,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43,
	0x55, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x08, 0x2a, 0xb4, 0x01, 0x0a, 0x0c, 0x45, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x55, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x55, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54,
	0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x54, 0x48, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x45, 0x41,
	0x4b, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x55, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x06, 0x2a,
	0x3d, 0x0a, 0x0e, 0x45, 0x54, 0x72, 0x69, 0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x52, 0x49, 0x47, 0x54, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x52, 0x49, 0x47, 0x54,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x42, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x10, 0x01, 0x2a, 0x95,
	0x04, 0x0a, 0x0c, 0x45, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x42, 0x45, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x45, 0x52, 0x59, 0x10, 0x03, 0x12, 0x1c,
	0x0a, 0x18, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x49, 0x53, 0x54, 0x53, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b,
	0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x4d,
	0x4d, 0x4f, 0x4e, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x1f, 0x0a,
	0x1b, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x46, 0x46, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x53, 0x10, 0x07, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45,
	0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x49,
	0x43, 0x4b, 0x5f, 0x52, 0x49, 0x44, 0x45, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x4b, 0x45, 0x5f, 0x44,
	0x45, 0x41, 0x44, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x49, 0x4f, 0x4e, 0x45, 0x45, 0x52, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x4d, 0x56, 0x50, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x10, 0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0e, 0x12, 0x22, 0x0a, 0x1e,
	0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54,
	0x4f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x42, 0x4f, 0x53, 0x53, 0x10, 0x0f,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0x10,
}

var (
	file_SceneSkill_proto_rawDescOnce sync.Once
	file_SceneSkill_proto_rawDescData = file_SceneSkill_proto_rawDesc
)

func file_SceneSkill_proto_rawDescGZIP() []byte {
	file_SceneSkill_proto_rawDescOnce.Do(func() {
		file_SceneSkill_proto_rawDescData = protoimpl.X.CompressGZIP(file_SceneSkill_proto_rawDescData)
	})
	return file_SceneSkill_proto_rawDescData
}

var file_SceneSkill_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_SceneSkill_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_SceneSkill_proto_goTypes = []interface{}{
	(SkillParam)(0),                        // 0: Cmd.SkillParam
	(ESpecialSkillCostType)(0),             // 1: Cmd.ESpecialSkillCostType
	(ESkillShortcut)(0),                    // 2: Cmd.ESkillShortcut
	(ELevelupType)(0),                      // 3: Cmd.ELevelupType
	(ETrigSkillType)(0),                    // 4: Cmd.ETrigSkillType
	(ESkillOption)(0),                      // 5: Cmd.ESkillOption
	(*SkillConsume)(nil),                   // 6: Cmd.SkillConsume
	(*SkillShortcut)(nil),                  // 7: Cmd.SkillShortcut
	(*SkillItem)(nil),                      // 8: Cmd.SkillItem
	(*SkillData)(nil),                      // 9: Cmd.SkillData
	(*SkillPos)(nil),                       // 10: Cmd.SkillPos
	(*TalentSkillData)(nil),                // 11: Cmd.TalentSkillData
	(*ReqSkillData)(nil),                   // 12: Cmd.ReqSkillData
	(*SkillUpdate)(nil),                    // 13: Cmd.SkillUpdate
	(*LevelupSkill)(nil),                   // 14: Cmd.LevelupSkill
	(*EquipSkill)(nil),                     // 15: Cmd.EquipSkill
	(*ResetSkill)(nil),                     // 16: Cmd.ResetSkill
	(*SkillValidShortcut)(nil),             // 17: Cmd.SkillValidShortcut
	(*SkillValidPos)(nil),                  // 18: Cmd.SkillValidPos
	(*ChangeSkillCmd)(nil),                 // 19: Cmd.ChangeSkillCmd
	(*SkillCost)(nil),                      // 20: Cmd.SkillCost
	(*SpecSkillInfo)(nil),                  // 21: Cmd.SpecSkillInfo
	(*UpSkillInfoSkillCmd)(nil),            // 22: Cmd.UpSkillInfoSkillCmd
	(*SelectRuneSkillCmd)(nil),             // 23: Cmd.SelectRuneSkillCmd
	(*MarkSkillNpcSkillCmd)(nil),           // 24: Cmd.MarkSkillNpcSkillCmd
	(*TriggerSkillNpcSkillCmd)(nil),        // 25: Cmd.TriggerSkillNpcSkillCmd
	(*SkillOption)(nil),                    // 26: Cmd.SkillOption
	(*SkillOptionSkillCmd)(nil),            // 27: Cmd.SkillOptionSkillCmd
	(*DynamicSkillCmd)(nil),                // 28: Cmd.DynamicSkillCmd
	(*UpdateDynamicSkillCmd)(nil),          // 29: Cmd.UpdateDynamicSkillCmd
	(*SyncDestPosSkillCmd)(nil),            // 30: Cmd.SyncDestPosSkillCmd
	(*ResetTalentSkillCmd)(nil),            // 31: Cmd.ResetTalentSkillCmd
	(*MultiSkillOption)(nil),               // 32: Cmd.MultiSkillOption
	(*MultiSkillOptionUpdateSkillCmd)(nil), // 33: Cmd.MultiSkillOptionUpdateSkillCmd
	(*MultiSkillOptionSyncSkillCmd)(nil),   // 34: Cmd.MultiSkillOptionSyncSkillCmd
	(*SkillEffect)(nil),                    // 35: Cmd.SkillEffect
	(*ProSkillEffect)(nil),                 // 36: Cmd.ProSkillEffect
	(*SkillEffectSkillCmd)(nil),            // 37: Cmd.SkillEffectSkillCmd
	(*SyncSkillEffectSkillCmd)(nil),        // 38: Cmd.SyncSkillEffectSkillCmd
	(*MaskSkillRandomOneSkillCmd)(nil),     // 39: Cmd.MaskSkillRandomOneSkillCmd
	(*StopBossSkillUsageSkillCmd)(nil),     // 40: Cmd.StopBossSkillUsageSkillCmd
	(*ChangeAutoShortCutCmd)(nil),          // 41: Cmd.ChangeAutoShortCutCmd
	(*ClearOptionSkillCmd)(nil),            // 42: Cmd.ClearOptionSkillCmd
	(ESource)(0),                           // 43: Cmd.ESource
	(EProfession)(0),                       // 44: Cmd.EProfession
	(Command)(0),                           // 45: Cmd.Command
	(*UserAttr)(nil),                       // 46: Cmd.UserAttr
	(*ScenePos)(nil),                       // 47: Cmd.ScenePos
}
var file_SceneSkill_proto_depIdxs = []int32{
	2,  // 0: Cmd.SkillShortcut.type:type_name -> Cmd.ESkillShortcut
	43, // 1: Cmd.SkillItem.source:type_name -> Cmd.ESource
	44, // 2: Cmd.SkillItem.profession:type_name -> Cmd.EProfession
	6,  // 3: Cmd.SkillItem.consume:type_name -> Cmd.SkillConsume
	7,  // 4: Cmd.SkillItem.shortcuts:type_name -> Cmd.SkillShortcut
	44, // 5: Cmd.SkillData.profession:type_name -> Cmd.EProfession
	8,  // 6: Cmd.SkillData.items:type_name -> Cmd.SkillItem
	8,  // 7: Cmd.TalentSkillData.items:type_name -> Cmd.SkillItem
	45, // 8: Cmd.ReqSkillData.cmd:type_name -> Cmd.Command
	0,  // 9: Cmd.ReqSkillData.param:type_name -> Cmd.SkillParam
	9,  // 10: Cmd.ReqSkillData.data:type_name -> Cmd.SkillData
	11, // 11: Cmd.ReqSkillData.talentdata:type_name -> Cmd.TalentSkillData
	2,  // 12: Cmd.ReqSkillData.auto_shortcut:type_name -> Cmd.ESkillShortcut
	45, // 13: Cmd.SkillUpdate.cmd:type_name -> Cmd.Command
	0,  // 14: Cmd.SkillUpdate.param:type_name -> Cmd.SkillParam
	9,  // 15: Cmd.SkillUpdate.update:type_name -> Cmd.SkillData
	9,  // 16: Cmd.SkillUpdate.del:type_name -> Cmd.SkillData
	11, // 17: Cmd.SkillUpdate.talent_update:type_name -> Cmd.TalentSkillData
	11, // 18: Cmd.SkillUpdate.talent_del:type_name -> Cmd.TalentSkillData
	45, // 19: Cmd.LevelupSkill.cmd:type_name -> Cmd.Command
	0,  // 20: Cmd.LevelupSkill.param:type_name -> Cmd.SkillParam
	3,  // 21: Cmd.LevelupSkill.type:type_name -> Cmd.ELevelupType
	45, // 22: Cmd.EquipSkill.cmd:type_name -> Cmd.Command
	0,  // 23: Cmd.EquipSkill.param:type_name -> Cmd.SkillParam
	2,  // 24: Cmd.EquipSkill.efrom:type_name -> Cmd.ESkillShortcut
	2,  // 25: Cmd.EquipSkill.eto:type_name -> Cmd.ESkillShortcut
	45, // 26: Cmd.ResetSkill.cmd:type_name -> Cmd.Command
	0,  // 27: Cmd.ResetSkill.param:type_name -> Cmd.SkillParam
	3,  // 28: Cmd.ResetSkill.type:type_name -> Cmd.ELevelupType
	2,  // 29: Cmd.SkillValidShortcut.type:type_name -> Cmd.ESkillShortcut
	45, // 30: Cmd.SkillValidPos.cmd:type_name -> Cmd.Command
	0,  // 31: Cmd.SkillValidPos.param:type_name -> Cmd.SkillParam
	17, // 32: Cmd.SkillValidPos.shortcuts:type_name -> Cmd.SkillValidShortcut
	45, // 33: Cmd.ChangeSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 34: Cmd.ChangeSkillCmd.param:type_name -> Cmd.SkillParam
	46, // 35: Cmd.SpecSkillInfo.attrs:type_name -> Cmd.UserAttr
	20, // 36: Cmd.SpecSkillInfo.cost:type_name -> Cmd.SkillCost
	45, // 37: Cmd.UpSkillInfoSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 38: Cmd.UpSkillInfoSkillCmd.param:type_name -> Cmd.SkillParam
	21, // 39: Cmd.UpSkillInfoSkillCmd.specinfo:type_name -> Cmd.SpecSkillInfo
	21, // 40: Cmd.UpSkillInfoSkillCmd.allskillInfo:type_name -> Cmd.SpecSkillInfo
	45, // 41: Cmd.SelectRuneSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 42: Cmd.SelectRuneSkillCmd.param:type_name -> Cmd.SkillParam
	45, // 43: Cmd.MarkSkillNpcSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 44: Cmd.MarkSkillNpcSkillCmd.param:type_name -> Cmd.SkillParam
	45, // 45: Cmd.TriggerSkillNpcSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 46: Cmd.TriggerSkillNpcSkillCmd.param:type_name -> Cmd.SkillParam
	4,  // 47: Cmd.TriggerSkillNpcSkillCmd.etype:type_name -> Cmd.ETrigSkillType
	5,  // 48: Cmd.SkillOption.opt:type_name -> Cmd.ESkillOption
	45, // 49: Cmd.SkillOptionSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 50: Cmd.SkillOptionSkillCmd.param:type_name -> Cmd.SkillParam
	26, // 51: Cmd.SkillOptionSkillCmd.set_opt:type_name -> Cmd.SkillOption
	26, // 52: Cmd.SkillOptionSkillCmd.all_opts:type_name -> Cmd.SkillOption
	45, // 53: Cmd.DynamicSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 54: Cmd.DynamicSkillCmd.param:type_name -> Cmd.SkillParam
	8,  // 55: Cmd.DynamicSkillCmd.skills:type_name -> Cmd.SkillItem
	45, // 56: Cmd.UpdateDynamicSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 57: Cmd.UpdateDynamicSkillCmd.param:type_name -> Cmd.SkillParam
	8,  // 58: Cmd.UpdateDynamicSkillCmd.update:type_name -> Cmd.SkillItem
	8,  // 59: Cmd.UpdateDynamicSkillCmd.del:type_name -> Cmd.SkillItem
	45, // 60: Cmd.SyncDestPosSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 61: Cmd.SyncDestPosSkillCmd.param:type_name -> Cmd.SkillParam
	47, // 62: Cmd.SyncDestPosSkillCmd.pos:type_name -> Cmd.ScenePos
	45, // 63: Cmd.ResetTalentSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 64: Cmd.ResetTalentSkillCmd.param:type_name -> Cmd.SkillParam
	5,  // 65: Cmd.MultiSkillOption.opt:type_name -> Cmd.ESkillOption
	45, // 66: Cmd.MultiSkillOptionUpdateSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 67: Cmd.MultiSkillOptionUpdateSkillCmd.param:type_name -> Cmd.SkillParam
	32, // 68: Cmd.MultiSkillOptionUpdateSkillCmd.opt:type_name -> Cmd.MultiSkillOption
	45, // 69: Cmd.MultiSkillOptionSyncSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 70: Cmd.MultiSkillOptionSyncSkillCmd.param:type_name -> Cmd.SkillParam
	32, // 71: Cmd.MultiSkillOptionSyncSkillCmd.opts:type_name -> Cmd.MultiSkillOption
	44, // 72: Cmd.ProSkillEffect.eprofession:type_name -> Cmd.EProfession
	35, // 73: Cmd.ProSkillEffect.seffect:type_name -> Cmd.SkillEffect
	45, // 74: Cmd.SkillEffectSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 75: Cmd.SkillEffectSkillCmd.param:type_name -> Cmd.SkillParam
	35, // 76: Cmd.SkillEffectSkillCmd.effects:type_name -> Cmd.SkillEffect
	45, // 77: Cmd.SyncSkillEffectSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 78: Cmd.SyncSkillEffectSkillCmd.param:type_name -> Cmd.SkillParam
	36, // 79: Cmd.SyncSkillEffectSkillCmd.proeffects:type_name -> Cmd.ProSkillEffect
	45, // 80: Cmd.MaskSkillRandomOneSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 81: Cmd.MaskSkillRandomOneSkillCmd.param:type_name -> Cmd.SkillParam
	45, // 82: Cmd.StopBossSkillUsageSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 83: Cmd.StopBossSkillUsageSkillCmd.param:type_name -> Cmd.SkillParam
	45, // 84: Cmd.ChangeAutoShortCutCmd.cmd:type_name -> Cmd.Command
	0,  // 85: Cmd.ChangeAutoShortCutCmd.param:type_name -> Cmd.SkillParam
	2,  // 86: Cmd.ChangeAutoShortCutCmd.shortcut:type_name -> Cmd.ESkillShortcut
	45, // 87: Cmd.ClearOptionSkillCmd.cmd:type_name -> Cmd.Command
	0,  // 88: Cmd.ClearOptionSkillCmd.param:type_name -> Cmd.SkillParam
	89, // [89:89] is the sub-list for method output_type
	89, // [89:89] is the sub-list for method input_type
	89, // [89:89] is the sub-list for extension type_name
	89, // [89:89] is the sub-list for extension extendee
	0,  // [0:89] is the sub-list for field type_name
}

func init() { file_SceneSkill_proto_init() }
func file_SceneSkill_proto_init() {
	if File_SceneSkill_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	file_SceneUser_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SceneSkill_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillConsume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillShortcut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillPos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalentSkillData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSkillData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelupSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillValidShortcut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillValidPos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSkillInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpSkillInfoSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectRuneSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkSkillNpcSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerSkillNpcSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillOptionSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDynamicSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDestPosSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetTalentSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiSkillOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiSkillOptionUpdateSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiSkillOptionSyncSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProSkillEffect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillEffectSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncSkillEffectSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaskSkillRandomOneSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopBossSkillUsageSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeAutoShortCutCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSkill_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearOptionSkillCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SceneSkill_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SceneSkill_proto_goTypes,
		DependencyIndexes: file_SceneSkill_proto_depIdxs,
		EnumInfos:         file_SceneSkill_proto_enumTypes,
		MessageInfos:      file_SceneSkill_proto_msgTypes,
	}.Build()
	File_SceneSkill_proto = out.File
	file_SceneSkill_proto_rawDesc = nil
	file_SceneSkill_proto_goTypes = nil
	file_SceneSkill_proto_depIdxs = nil
}
