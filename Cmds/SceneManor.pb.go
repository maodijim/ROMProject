// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: SceneManor.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ManorParam int32

const (
	ManorParam_MANORPARAM_BUILD_DATA_NTF      ManorParam = 1
	ManorParam_MANORPARAM_BUILD_QUERY         ManorParam = 2
	ManorParam_MANORPARAM_BUILD_LEVELUP       ManorParam = 3
	ManorParam_MANORPARAM_BUILD_DISPATCH      ManorParam = 4
	ManorParam_MANORPARAM_BUILD_LOTTERY       ManorParam = 5
	ManorParam_MANORPARAM_BUILD_COLLECT       ManorParam = 6
	ManorParam_MANORPARAM_ENTER_RAID          ManorParam = 7
	ManorParam_MANORPARAM_PARTNER_INFO        ManorParam = 8
	ManorParam_MANORPARAM_PARTNER_STORY       ManorParam = 9
	ManorParam_MANORPARAM_PARTNER_IDLE_LIST   ManorParam = 10
	ManorParam_MANORPARAM_PARTNER_IDLE_UPDATE ManorParam = 11
	ManorParam_MANORPARAM_PARTNER_GIVE        ManorParam = 12
	ManorParam_MANORPARAM_BUILD_FORGE         ManorParam = 13
)

// Enum value maps for ManorParam.
var (
	ManorParam_name = map[int32]string{
		1:  "MANORPARAM_BUILD_DATA_NTF",
		2:  "MANORPARAM_BUILD_QUERY",
		3:  "MANORPARAM_BUILD_LEVELUP",
		4:  "MANORPARAM_BUILD_DISPATCH",
		5:  "MANORPARAM_BUILD_LOTTERY",
		6:  "MANORPARAM_BUILD_COLLECT",
		7:  "MANORPARAM_ENTER_RAID",
		8:  "MANORPARAM_PARTNER_INFO",
		9:  "MANORPARAM_PARTNER_STORY",
		10: "MANORPARAM_PARTNER_IDLE_LIST",
		11: "MANORPARAM_PARTNER_IDLE_UPDATE",
		12: "MANORPARAM_PARTNER_GIVE",
		13: "MANORPARAM_BUILD_FORGE",
	}
	ManorParam_value = map[string]int32{
		"MANORPARAM_BUILD_DATA_NTF":      1,
		"MANORPARAM_BUILD_QUERY":         2,
		"MANORPARAM_BUILD_LEVELUP":       3,
		"MANORPARAM_BUILD_DISPATCH":      4,
		"MANORPARAM_BUILD_LOTTERY":       5,
		"MANORPARAM_BUILD_COLLECT":       6,
		"MANORPARAM_ENTER_RAID":          7,
		"MANORPARAM_PARTNER_INFO":        8,
		"MANORPARAM_PARTNER_STORY":       9,
		"MANORPARAM_PARTNER_IDLE_LIST":   10,
		"MANORPARAM_PARTNER_IDLE_UPDATE": 11,
		"MANORPARAM_PARTNER_GIVE":        12,
		"MANORPARAM_BUILD_FORGE":         13,
	}
)

func (x ManorParam) Enum() *ManorParam {
	p := new(ManorParam)
	*p = x
	return p
}

func (x ManorParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManorParam) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneManor_proto_enumTypes[0].Descriptor()
}

func (ManorParam) Type() protoreflect.EnumType {
	return &file_SceneManor_proto_enumTypes[0]
}

func (x ManorParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ManorParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ManorParam(num)
	return nil
}

// Deprecated: Use ManorParam.Descriptor instead.
func (ManorParam) EnumDescriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{0}
}

type EManorFuncType int32

const (
	EManorFuncType_EMANORFUNCTYPE_MIN                   EManorFuncType = 0
	EManorFuncType_EMANORFUNCTYPE_PET_COUNT             EManorFuncType = 1
	EManorFuncType_EMANORFUNCTYPE_PET_EQUIP             EManorFuncType = 2
	EManorFuncType_EMANORFUNCTYPE_MAP_ATTR              EManorFuncType = 3
	EManorFuncType_EMANORFUNCTYPE_OPEN_AREA             EManorFuncType = 4
	EManorFuncType_EMANORFUNCTYPE_ADVENTURE_TIMES       EManorFuncType = 5
	EManorFuncType_EMANORFUNCTYPE_MAP_DROP              EManorFuncType = 6
	EManorFuncType_EMANORFUNCTYPE_ADVENTURE_INCOME      EManorFuncType = 7
	EManorFuncType_EMANORFUNCTYPE_OPEN_GOODS            EManorFuncType = 8
	EManorFuncType_EMANORFUNCTYPE_ADD_GOODS             EManorFuncType = 9
	EManorFuncType_EMANORFUNCTYPE_STONE_CAPACITY        EManorFuncType = 10
	EManorFuncType_EMANORFUNCTYPE_STONE_PRODUCE         EManorFuncType = 11
	EManorFuncType_EMANORFUNCTYPE_WOOD_CAPACITY         EManorFuncType = 12
	EManorFuncType_EMANORFUNCTYPE_WOOD_PRODUCE          EManorFuncType = 13
	EManorFuncType_EMANORFUNCTYPE_REDUCE_FORGE_INTERVAL EManorFuncType = 14
	EManorFuncType_EMANORFUNCTYPE_OPEN_FORGE_PART       EManorFuncType = 15
	EManorFuncType_EMANORFUNCTYPE_FORGE_PRODUCE         EManorFuncType = 16
)

// Enum value maps for EManorFuncType.
var (
	EManorFuncType_name = map[int32]string{
		0:  "EMANORFUNCTYPE_MIN",
		1:  "EMANORFUNCTYPE_PET_COUNT",
		2:  "EMANORFUNCTYPE_PET_EQUIP",
		3:  "EMANORFUNCTYPE_MAP_ATTR",
		4:  "EMANORFUNCTYPE_OPEN_AREA",
		5:  "EMANORFUNCTYPE_ADVENTURE_TIMES",
		6:  "EMANORFUNCTYPE_MAP_DROP",
		7:  "EMANORFUNCTYPE_ADVENTURE_INCOME",
		8:  "EMANORFUNCTYPE_OPEN_GOODS",
		9:  "EMANORFUNCTYPE_ADD_GOODS",
		10: "EMANORFUNCTYPE_STONE_CAPACITY",
		11: "EMANORFUNCTYPE_STONE_PRODUCE",
		12: "EMANORFUNCTYPE_WOOD_CAPACITY",
		13: "EMANORFUNCTYPE_WOOD_PRODUCE",
		14: "EMANORFUNCTYPE_REDUCE_FORGE_INTERVAL",
		15: "EMANORFUNCTYPE_OPEN_FORGE_PART",
		16: "EMANORFUNCTYPE_FORGE_PRODUCE",
	}
	EManorFuncType_value = map[string]int32{
		"EMANORFUNCTYPE_MIN":                   0,
		"EMANORFUNCTYPE_PET_COUNT":             1,
		"EMANORFUNCTYPE_PET_EQUIP":             2,
		"EMANORFUNCTYPE_MAP_ATTR":              3,
		"EMANORFUNCTYPE_OPEN_AREA":             4,
		"EMANORFUNCTYPE_ADVENTURE_TIMES":       5,
		"EMANORFUNCTYPE_MAP_DROP":              6,
		"EMANORFUNCTYPE_ADVENTURE_INCOME":      7,
		"EMANORFUNCTYPE_OPEN_GOODS":            8,
		"EMANORFUNCTYPE_ADD_GOODS":             9,
		"EMANORFUNCTYPE_STONE_CAPACITY":        10,
		"EMANORFUNCTYPE_STONE_PRODUCE":         11,
		"EMANORFUNCTYPE_WOOD_CAPACITY":         12,
		"EMANORFUNCTYPE_WOOD_PRODUCE":          13,
		"EMANORFUNCTYPE_REDUCE_FORGE_INTERVAL": 14,
		"EMANORFUNCTYPE_OPEN_FORGE_PART":       15,
		"EMANORFUNCTYPE_FORGE_PRODUCE":         16,
	}
)

func (x EManorFuncType) Enum() *EManorFuncType {
	p := new(EManorFuncType)
	*p = x
	return p
}

func (x EManorFuncType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EManorFuncType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneManor_proto_enumTypes[1].Descriptor()
}

func (EManorFuncType) Type() protoreflect.EnumType {
	return &file_SceneManor_proto_enumTypes[1]
}

func (x EManorFuncType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EManorFuncType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EManorFuncType(num)
	return nil
}

// Deprecated: Use EManorFuncType.Descriptor instead.
func (EManorFuncType) EnumDescriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{1}
}

type ManorBuildFuncData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FuncType  *EManorFuncType `protobuf:"varint,1,opt,name=func_type,json=funcType,enum=Cmd.EManorFuncType" json:"func_type,omitempty"`
	FuncLevel *uint32         `protobuf:"varint,2,opt,name=func_level,json=funcLevel" json:"func_level,omitempty"`
}

func (x *ManorBuildFuncData) Reset() {
	*x = ManorBuildFuncData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManorBuildFuncData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManorBuildFuncData) ProtoMessage() {}

func (x *ManorBuildFuncData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManorBuildFuncData.ProtoReflect.Descriptor instead.
func (*ManorBuildFuncData) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{0}
}

func (x *ManorBuildFuncData) GetFuncType() EManorFuncType {
	if x != nil && x.FuncType != nil {
		return *x.FuncType
	}
	return EManorFuncType_EMANORFUNCTYPE_MIN
}

func (x *ManorBuildFuncData) GetFuncLevel() uint32 {
	if x != nil && x.FuncLevel != nil {
		return *x.FuncLevel
	}
	return 0
}

type ManorDispatchGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaId    *uint32 `protobuf:"varint,1,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	PetId     *uint32 `protobuf:"varint,2,opt,name=pet_id,json=petId" json:"pet_id,omitempty"`
	EquipId   *uint32 `protobuf:"varint,3,opt,name=equip_id,json=equipId" json:"equip_id,omitempty"`
	BeginTime *uint32 `protobuf:"varint,4,opt,name=begin_time,json=beginTime" json:"begin_time,omitempty"`
}

func (x *ManorDispatchGroup) Reset() {
	*x = ManorDispatchGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManorDispatchGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManorDispatchGroup) ProtoMessage() {}

func (x *ManorDispatchGroup) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManorDispatchGroup.ProtoReflect.Descriptor instead.
func (*ManorDispatchGroup) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{1}
}

func (x *ManorDispatchGroup) GetAreaId() uint32 {
	if x != nil && x.AreaId != nil {
		return *x.AreaId
	}
	return 0
}

func (x *ManorDispatchGroup) GetPetId() uint32 {
	if x != nil && x.PetId != nil {
		return *x.PetId
	}
	return 0
}

func (x *ManorDispatchGroup) GetEquipId() uint32 {
	if x != nil && x.EquipId != nil {
		return *x.EquipId
	}
	return 0
}

func (x *ManorDispatchGroup) GetBeginTime() uint32 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

type ManorDispatchReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardId      *uint32 `protobuf:"varint,1,opt,name=reward_id,json=rewardId" json:"reward_id,omitempty"`
	RewardCount   *uint32 `protobuf:"varint,2,opt,name=reward_count,json=rewardCount" json:"reward_count,omitempty"`
	DispatchCount *uint32 `protobuf:"varint,3,opt,name=dispatch_count,json=dispatchCount" json:"dispatch_count,omitempty"`
}

func (x *ManorDispatchReward) Reset() {
	*x = ManorDispatchReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManorDispatchReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManorDispatchReward) ProtoMessage() {}

func (x *ManorDispatchReward) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManorDispatchReward.ProtoReflect.Descriptor instead.
func (*ManorDispatchReward) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{2}
}

func (x *ManorDispatchReward) GetRewardId() uint32 {
	if x != nil && x.RewardId != nil {
		return *x.RewardId
	}
	return 0
}

func (x *ManorDispatchReward) GetRewardCount() uint32 {
	if x != nil && x.RewardCount != nil {
		return *x.RewardCount
	}
	return 0
}

func (x *ManorDispatchReward) GetDispatchCount() uint32 {
	if x != nil && x.DispatchCount != nil {
		return *x.DispatchCount
	}
	return 0
}

type ManorDispatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups  []*ManorDispatchGroup  `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
	Rewards []*ManorDispatchReward `protobuf:"bytes,2,rep,name=rewards" json:"rewards,omitempty"`
}

func (x *ManorDispatchData) Reset() {
	*x = ManorDispatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManorDispatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManorDispatchData) ProtoMessage() {}

func (x *ManorDispatchData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManorDispatchData.ProtoReflect.Descriptor instead.
func (*ManorDispatchData) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{3}
}

func (x *ManorDispatchData) GetGroups() []*ManorDispatchGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ManorDispatchData) GetRewards() []*ManorDispatchReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type ManorLotteryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint32 `protobuf:"varint,1,rep,name=ids" json:"ids,omitempty"`
}

func (x *ManorLotteryData) Reset() {
	*x = ManorLotteryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManorLotteryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManorLotteryData) ProtoMessage() {}

func (x *ManorLotteryData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManorLotteryData.ProtoReflect.Descriptor instead.
func (*ManorLotteryData) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{4}
}

func (x *ManorLotteryData) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ManorResourseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserve   *uint32 `protobuf:"varint,1,opt,name=reserve" json:"reserve,omitempty"`
	BeginTime *uint32 `protobuf:"varint,2,opt,name=begin_time,json=beginTime" json:"begin_time,omitempty"`
}

func (x *ManorResourseData) Reset() {
	*x = ManorResourseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManorResourseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManorResourseData) ProtoMessage() {}

func (x *ManorResourseData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManorResourseData.ProtoReflect.Descriptor instead.
func (*ManorResourseData) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{5}
}

func (x *ManorResourseData) GetReserve() uint32 {
	if x != nil && x.Reserve != nil {
		return *x.Reserve
	}
	return 0
}

func (x *ManorResourseData) GetBeginTime() uint32 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

type ManorForgeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Part      *uint32 `protobuf:"varint,1,opt,name=part" json:"part,omitempty"`
	BeginTime *uint32 `protobuf:"varint,2,opt,name=begin_time,json=beginTime" json:"begin_time,omitempty"`
	Notice    *bool   `protobuf:"varint,3,opt,name=notice" json:"notice,omitempty"`
}

func (x *ManorForgeData) Reset() {
	*x = ManorForgeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManorForgeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManorForgeData) ProtoMessage() {}

func (x *ManorForgeData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManorForgeData.ProtoReflect.Descriptor instead.
func (*ManorForgeData) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{6}
}

func (x *ManorForgeData) GetPart() uint32 {
	if x != nil && x.Part != nil {
		return *x.Part
	}
	return 0
}

func (x *ManorForgeData) GetBeginTime() uint32 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

func (x *ManorForgeData) GetNotice() bool {
	if x != nil && x.Notice != nil {
		return *x.Notice
	}
	return false
}

type ManorBuildData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildId     *uint32               `protobuf:"varint,1,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
	OpenTime    *uint32               `protobuf:"varint,2,opt,name=open_time,json=openTime" json:"open_time,omitempty"`
	Funcs       []*ManorBuildFuncData `protobuf:"bytes,3,rep,name=funcs" json:"funcs,omitempty"`
	Dispatch    *ManorDispatchData    `protobuf:"bytes,4,opt,name=dispatch" json:"dispatch,omitempty"`
	Lottery     *ManorLotteryData     `protobuf:"bytes,5,opt,name=lottery" json:"lottery,omitempty"`
	Resource    *ManorResourseData    `protobuf:"bytes,6,opt,name=resource" json:"resource,omitempty"`
	Isforbid    *bool                 `protobuf:"varint,7,opt,name=isforbid" json:"isforbid,omitempty"`
	Forges      []*ManorForgeData     `protobuf:"bytes,8,rep,name=forges" json:"forges,omitempty"`
	AchieveHour *uint32               `protobuf:"varint,9,opt,name=achieve_hour,json=achieveHour" json:"achieve_hour,omitempty"`
}

func (x *ManorBuildData) Reset() {
	*x = ManorBuildData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManorBuildData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManorBuildData) ProtoMessage() {}

func (x *ManorBuildData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManorBuildData.ProtoReflect.Descriptor instead.
func (*ManorBuildData) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{7}
}

func (x *ManorBuildData) GetBuildId() uint32 {
	if x != nil && x.BuildId != nil {
		return *x.BuildId
	}
	return 0
}

func (x *ManorBuildData) GetOpenTime() uint32 {
	if x != nil && x.OpenTime != nil {
		return *x.OpenTime
	}
	return 0
}

func (x *ManorBuildData) GetFuncs() []*ManorBuildFuncData {
	if x != nil {
		return x.Funcs
	}
	return nil
}

func (x *ManorBuildData) GetDispatch() *ManorDispatchData {
	if x != nil {
		return x.Dispatch
	}
	return nil
}

func (x *ManorBuildData) GetLottery() *ManorLotteryData {
	if x != nil {
		return x.Lottery
	}
	return nil
}

func (x *ManorBuildData) GetResource() *ManorResourseData {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ManorBuildData) GetIsforbid() bool {
	if x != nil && x.Isforbid != nil {
		return *x.Isforbid
	}
	return false
}

func (x *ManorBuildData) GetForges() []*ManorForgeData {
	if x != nil {
		return x.Forges
	}
	return nil
}

func (x *ManorBuildData) GetAchieveHour() uint32 {
	if x != nil && x.AchieveHour != nil {
		return *x.AchieveHour
	}
	return 0
}

type BuildDataNtfManorCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=233" json:"cmd,omitempty"`
	Param  *ManorParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.ManorParam,def=1" json:"param,omitempty"`
	Builds []*ManorBuildData `protobuf:"bytes,3,rep,name=builds" json:"builds,omitempty"`
}

// Default values for BuildDataNtfManorCmd fields.
const (
	Default_BuildDataNtfManorCmd_Cmd   = Command_SCENE_USER_MANOR_PROTOCMD
	Default_BuildDataNtfManorCmd_Param = ManorParam_MANORPARAM_BUILD_DATA_NTF
)

func (x *BuildDataNtfManorCmd) Reset() {
	*x = BuildDataNtfManorCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildDataNtfManorCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildDataNtfManorCmd) ProtoMessage() {}

func (x *BuildDataNtfManorCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildDataNtfManorCmd.ProtoReflect.Descriptor instead.
func (*BuildDataNtfManorCmd) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{8}
}

func (x *BuildDataNtfManorCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuildDataNtfManorCmd_Cmd
}

func (x *BuildDataNtfManorCmd) GetParam() ManorParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuildDataNtfManorCmd_Param
}

func (x *BuildDataNtfManorCmd) GetBuilds() []*ManorBuildData {
	if x != nil {
		return x.Builds
	}
	return nil
}

type ManorStoryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Read *bool   `protobuf:"varint,2,opt,name=read" json:"read,omitempty"`
}

func (x *ManorStoryData) Reset() {
	*x = ManorStoryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManorStoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManorStoryData) ProtoMessage() {}

func (x *ManorStoryData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManorStoryData.ProtoReflect.Descriptor instead.
func (*ManorStoryData) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{9}
}

func (x *ManorStoryData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ManorStoryData) GetRead() bool {
	if x != nil && x.Read != nil {
		return *x.Read
	}
	return false
}

type ManorPartnerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Favor    *uint32           `protobuf:"varint,2,opt,name=favor" json:"favor,omitempty"`
	Maxfavor *uint32           `protobuf:"varint,3,opt,name=maxfavor" json:"maxfavor,omitempty"`
	Composes []uint32          `protobuf:"varint,4,rep,name=composes" json:"composes,omitempty"`
	Stories  []*ManorStoryData `protobuf:"bytes,5,rep,name=stories" json:"stories,omitempty"`
	Hide     *bool             `protobuf:"varint,6,opt,name=hide" json:"hide,omitempty"`
	Addtime  *uint32           `protobuf:"varint,7,opt,name=addtime" json:"addtime,omitempty"`
}

func (x *ManorPartnerData) Reset() {
	*x = ManorPartnerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManorPartnerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManorPartnerData) ProtoMessage() {}

func (x *ManorPartnerData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManorPartnerData.ProtoReflect.Descriptor instead.
func (*ManorPartnerData) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{10}
}

func (x *ManorPartnerData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ManorPartnerData) GetFavor() uint32 {
	if x != nil && x.Favor != nil {
		return *x.Favor
	}
	return 0
}

func (x *ManorPartnerData) GetMaxfavor() uint32 {
	if x != nil && x.Maxfavor != nil {
		return *x.Maxfavor
	}
	return 0
}

func (x *ManorPartnerData) GetComposes() []uint32 {
	if x != nil {
		return x.Composes
	}
	return nil
}

func (x *ManorPartnerData) GetStories() []*ManorStoryData {
	if x != nil {
		return x.Stories
	}
	return nil
}

func (x *ManorPartnerData) GetHide() bool {
	if x != nil && x.Hide != nil {
		return *x.Hide
	}
	return false
}

func (x *ManorPartnerData) GetAddtime() uint32 {
	if x != nil && x.Addtime != nil {
		return *x.Addtime
	}
	return 0
}

type BuildQueryManorCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=233" json:"cmd,omitempty"`
	Param *ManorParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ManorParam,def=2" json:"param,omitempty"`
	Build *ManorBuildData `protobuf:"bytes,3,opt,name=build" json:"build,omitempty"`
}

// Default values for BuildQueryManorCmd fields.
const (
	Default_BuildQueryManorCmd_Cmd   = Command_SCENE_USER_MANOR_PROTOCMD
	Default_BuildQueryManorCmd_Param = ManorParam_MANORPARAM_BUILD_QUERY
)

func (x *BuildQueryManorCmd) Reset() {
	*x = BuildQueryManorCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildQueryManorCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildQueryManorCmd) ProtoMessage() {}

func (x *BuildQueryManorCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildQueryManorCmd.ProtoReflect.Descriptor instead.
func (*BuildQueryManorCmd) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{11}
}

func (x *BuildQueryManorCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuildQueryManorCmd_Cmd
}

func (x *BuildQueryManorCmd) GetParam() ManorParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuildQueryManorCmd_Param
}

func (x *BuildQueryManorCmd) GetBuild() *ManorBuildData {
	if x != nil {
		return x.Build
	}
	return nil
}

type BuildLevelUpManorCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=233" json:"cmd,omitempty"`
	Param *ManorParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ManorParam,def=3" json:"param,omitempty"`
	Type  *EManorFuncType `protobuf:"varint,3,opt,name=type,enum=Cmd.EManorFuncType" json:"type,omitempty"`
	Build *ManorBuildData `protobuf:"bytes,4,opt,name=build" json:"build,omitempty"`
}

// Default values for BuildLevelUpManorCmd fields.
const (
	Default_BuildLevelUpManorCmd_Cmd   = Command_SCENE_USER_MANOR_PROTOCMD
	Default_BuildLevelUpManorCmd_Param = ManorParam_MANORPARAM_BUILD_LEVELUP
)

func (x *BuildLevelUpManorCmd) Reset() {
	*x = BuildLevelUpManorCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildLevelUpManorCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildLevelUpManorCmd) ProtoMessage() {}

func (x *BuildLevelUpManorCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildLevelUpManorCmd.ProtoReflect.Descriptor instead.
func (*BuildLevelUpManorCmd) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{12}
}

func (x *BuildLevelUpManorCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuildLevelUpManorCmd_Cmd
}

func (x *BuildLevelUpManorCmd) GetParam() ManorParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuildLevelUpManorCmd_Param
}

func (x *BuildLevelUpManorCmd) GetType() EManorFuncType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EManorFuncType_EMANORFUNCTYPE_MIN
}

func (x *BuildLevelUpManorCmd) GetBuild() *ManorBuildData {
	if x != nil {
		return x.Build
	}
	return nil
}

type BuildDispatchManorCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=233" json:"cmd,omitempty"`
	Param    *ManorParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ManorParam,def=4" json:"param,omitempty"`
	PetId    *uint32         `protobuf:"varint,3,opt,name=pet_id,json=petId" json:"pet_id,omitempty"`
	AreaId   *uint32         `protobuf:"varint,4,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	EquipId  *uint32         `protobuf:"varint,5,opt,name=equip_id,json=equipId" json:"equip_id,omitempty"`
	Isreward *bool           `protobuf:"varint,6,opt,name=isreward" json:"isreward,omitempty"`
	Build    *ManorBuildData `protobuf:"bytes,7,opt,name=build" json:"build,omitempty"`
}

// Default values for BuildDispatchManorCmd fields.
const (
	Default_BuildDispatchManorCmd_Cmd   = Command_SCENE_USER_MANOR_PROTOCMD
	Default_BuildDispatchManorCmd_Param = ManorParam_MANORPARAM_BUILD_DISPATCH
)

func (x *BuildDispatchManorCmd) Reset() {
	*x = BuildDispatchManorCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildDispatchManorCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildDispatchManorCmd) ProtoMessage() {}

func (x *BuildDispatchManorCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildDispatchManorCmd.ProtoReflect.Descriptor instead.
func (*BuildDispatchManorCmd) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{13}
}

func (x *BuildDispatchManorCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuildDispatchManorCmd_Cmd
}

func (x *BuildDispatchManorCmd) GetParam() ManorParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuildDispatchManorCmd_Param
}

func (x *BuildDispatchManorCmd) GetPetId() uint32 {
	if x != nil && x.PetId != nil {
		return *x.PetId
	}
	return 0
}

func (x *BuildDispatchManorCmd) GetAreaId() uint32 {
	if x != nil && x.AreaId != nil {
		return *x.AreaId
	}
	return 0
}

func (x *BuildDispatchManorCmd) GetEquipId() uint32 {
	if x != nil && x.EquipId != nil {
		return *x.EquipId
	}
	return 0
}

func (x *BuildDispatchManorCmd) GetIsreward() bool {
	if x != nil && x.Isreward != nil {
		return *x.Isreward
	}
	return false
}

func (x *BuildDispatchManorCmd) GetBuild() *ManorBuildData {
	if x != nil {
		return x.Build
	}
	return nil
}

type BuildLotteryManorCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=233" json:"cmd,omitempty"`
	Param *ManorParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ManorParam,def=5" json:"param,omitempty"`
	Build *ManorBuildData `protobuf:"bytes,3,opt,name=build" json:"build,omitempty"`
}

// Default values for BuildLotteryManorCmd fields.
const (
	Default_BuildLotteryManorCmd_Cmd   = Command_SCENE_USER_MANOR_PROTOCMD
	Default_BuildLotteryManorCmd_Param = ManorParam_MANORPARAM_BUILD_LOTTERY
)

func (x *BuildLotteryManorCmd) Reset() {
	*x = BuildLotteryManorCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildLotteryManorCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildLotteryManorCmd) ProtoMessage() {}

func (x *BuildLotteryManorCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildLotteryManorCmd.ProtoReflect.Descriptor instead.
func (*BuildLotteryManorCmd) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{14}
}

func (x *BuildLotteryManorCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuildLotteryManorCmd_Cmd
}

func (x *BuildLotteryManorCmd) GetParam() ManorParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuildLotteryManorCmd_Param
}

func (x *BuildLotteryManorCmd) GetBuild() *ManorBuildData {
	if x != nil {
		return x.Build
	}
	return nil
}

type BuildCollectManorCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=233" json:"cmd,omitempty"`
	Param *ManorParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ManorParam,def=6" json:"param,omitempty"`
	Build *ManorBuildData `protobuf:"bytes,3,opt,name=build" json:"build,omitempty"`
}

// Default values for BuildCollectManorCmd fields.
const (
	Default_BuildCollectManorCmd_Cmd   = Command_SCENE_USER_MANOR_PROTOCMD
	Default_BuildCollectManorCmd_Param = ManorParam_MANORPARAM_BUILD_COLLECT
)

func (x *BuildCollectManorCmd) Reset() {
	*x = BuildCollectManorCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildCollectManorCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildCollectManorCmd) ProtoMessage() {}

func (x *BuildCollectManorCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildCollectManorCmd.ProtoReflect.Descriptor instead.
func (*BuildCollectManorCmd) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{15}
}

func (x *BuildCollectManorCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuildCollectManorCmd_Cmd
}

func (x *BuildCollectManorCmd) GetParam() ManorParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuildCollectManorCmd_Param
}

func (x *BuildCollectManorCmd) GetBuild() *ManorBuildData {
	if x != nil {
		return x.Build
	}
	return nil
}

type ReqEnterRaidManorCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=233" json:"cmd,omitempty"`
	Param   *ManorParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ManorParam,def=7" json:"param,omitempty"`
	Npcguid *uint64     `protobuf:"varint,3,opt,name=npcguid" json:"npcguid,omitempty"`
}

// Default values for ReqEnterRaidManorCmd fields.
const (
	Default_ReqEnterRaidManorCmd_Cmd   = Command_SCENE_USER_MANOR_PROTOCMD
	Default_ReqEnterRaidManorCmd_Param = ManorParam_MANORPARAM_ENTER_RAID
)

func (x *ReqEnterRaidManorCmd) Reset() {
	*x = ReqEnterRaidManorCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqEnterRaidManorCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqEnterRaidManorCmd) ProtoMessage() {}

func (x *ReqEnterRaidManorCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqEnterRaidManorCmd.ProtoReflect.Descriptor instead.
func (*ReqEnterRaidManorCmd) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{16}
}

func (x *ReqEnterRaidManorCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqEnterRaidManorCmd_Cmd
}

func (x *ReqEnterRaidManorCmd) GetParam() ManorParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqEnterRaidManorCmd_Param
}

func (x *ReqEnterRaidManorCmd) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return 0
}

type PartnerInfoManorCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=233" json:"cmd,omitempty"`
	Param        *ManorParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.ManorParam,def=8" json:"param,omitempty"`
	Partnerinfos []*ManorPartnerData `protobuf:"bytes,3,rep,name=partnerinfos" json:"partnerinfos,omitempty"`
}

// Default values for PartnerInfoManorCmd fields.
const (
	Default_PartnerInfoManorCmd_Cmd   = Command_SCENE_USER_MANOR_PROTOCMD
	Default_PartnerInfoManorCmd_Param = ManorParam_MANORPARAM_PARTNER_INFO
)

func (x *PartnerInfoManorCmd) Reset() {
	*x = PartnerInfoManorCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerInfoManorCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerInfoManorCmd) ProtoMessage() {}

func (x *PartnerInfoManorCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerInfoManorCmd.ProtoReflect.Descriptor instead.
func (*PartnerInfoManorCmd) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{17}
}

func (x *PartnerInfoManorCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PartnerInfoManorCmd_Cmd
}

func (x *PartnerInfoManorCmd) GetParam() ManorParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PartnerInfoManorCmd_Param
}

func (x *PartnerInfoManorCmd) GetPartnerinfos() []*ManorPartnerData {
	if x != nil {
		return x.Partnerinfos
	}
	return nil
}

type PartnerStroyManorCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=233" json:"cmd,omitempty"`
	Param     *ManorParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ManorParam,def=9" json:"param,omitempty"`
	Partnerid *uint32     `protobuf:"varint,3,opt,name=partnerid" json:"partnerid,omitempty"`
	Storyid   *uint32     `protobuf:"varint,4,opt,name=storyid" json:"storyid,omitempty"`
}

// Default values for PartnerStroyManorCmd fields.
const (
	Default_PartnerStroyManorCmd_Cmd   = Command_SCENE_USER_MANOR_PROTOCMD
	Default_PartnerStroyManorCmd_Param = ManorParam_MANORPARAM_PARTNER_STORY
)

func (x *PartnerStroyManorCmd) Reset() {
	*x = PartnerStroyManorCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerStroyManorCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerStroyManorCmd) ProtoMessage() {}

func (x *PartnerStroyManorCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerStroyManorCmd.ProtoReflect.Descriptor instead.
func (*PartnerStroyManorCmd) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{18}
}

func (x *PartnerStroyManorCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PartnerStroyManorCmd_Cmd
}

func (x *PartnerStroyManorCmd) GetParam() ManorParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PartnerStroyManorCmd_Param
}

func (x *PartnerStroyManorCmd) GetPartnerid() uint32 {
	if x != nil && x.Partnerid != nil {
		return *x.Partnerid
	}
	return 0
}

func (x *PartnerStroyManorCmd) GetStoryid() uint32 {
	if x != nil && x.Storyid != nil {
		return *x.Storyid
	}
	return 0
}

type PartnerQuestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questid   *uint32  `protobuf:"varint,1,opt,name=questid" json:"questid,omitempty"`
	Partners  []uint32 `protobuf:"varint,2,rep,name=partners" json:"partners,omitempty"`
	Inprocess *bool    `protobuf:"varint,3,opt,name=inprocess" json:"inprocess,omitempty"`
	Ignorenum *bool    `protobuf:"varint,4,opt,name=ignorenum" json:"ignorenum,omitempty"`
}

func (x *PartnerQuestData) Reset() {
	*x = PartnerQuestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerQuestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerQuestData) ProtoMessage() {}

func (x *PartnerQuestData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerQuestData.ProtoReflect.Descriptor instead.
func (*PartnerQuestData) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{19}
}

func (x *PartnerQuestData) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return 0
}

func (x *PartnerQuestData) GetPartners() []uint32 {
	if x != nil {
		return x.Partners
	}
	return nil
}

func (x *PartnerQuestData) GetInprocess() bool {
	if x != nil && x.Inprocess != nil {
		return *x.Inprocess
	}
	return false
}

func (x *PartnerQuestData) GetIgnorenum() bool {
	if x != nil && x.Ignorenum != nil {
		return *x.Ignorenum
	}
	return false
}

type AddPartnerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partnerid *uint32   `protobuf:"varint,1,opt,name=partnerid" json:"partnerid,omitempty"`
	Pos       *ScenePos `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`
}

func (x *AddPartnerData) Reset() {
	*x = AddPartnerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPartnerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPartnerData) ProtoMessage() {}

func (x *AddPartnerData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPartnerData.ProtoReflect.Descriptor instead.
func (*AddPartnerData) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{20}
}

func (x *AddPartnerData) GetPartnerid() uint32 {
	if x != nil && x.Partnerid != nil {
		return *x.Partnerid
	}
	return 0
}

func (x *AddPartnerData) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

type PartnerIdleListManorCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=233" json:"cmd,omitempty"`
	Param    *ManorParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ManorParam,def=10" json:"param,omitempty"`
	Partners []uint32    `protobuf:"varint,3,rep,name=partners" json:"partners,omitempty"`
}

// Default values for PartnerIdleListManorCmd fields.
const (
	Default_PartnerIdleListManorCmd_Cmd   = Command_SCENE_USER_MANOR_PROTOCMD
	Default_PartnerIdleListManorCmd_Param = ManorParam_MANORPARAM_PARTNER_IDLE_LIST
)

func (x *PartnerIdleListManorCmd) Reset() {
	*x = PartnerIdleListManorCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerIdleListManorCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerIdleListManorCmd) ProtoMessage() {}

func (x *PartnerIdleListManorCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerIdleListManorCmd.ProtoReflect.Descriptor instead.
func (*PartnerIdleListManorCmd) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{21}
}

func (x *PartnerIdleListManorCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PartnerIdleListManorCmd_Cmd
}

func (x *PartnerIdleListManorCmd) GetParam() ManorParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PartnerIdleListManorCmd_Param
}

func (x *PartnerIdleListManorCmd) GetPartners() []uint32 {
	if x != nil {
		return x.Partners
	}
	return nil
}

type PartnerIdleUpdateManorCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=233" json:"cmd,omitempty"`
	Param *ManorParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.ManorParam,def=11" json:"param,omitempty"`
	Adds  []*AddPartnerData `protobuf:"bytes,3,rep,name=adds" json:"adds,omitempty"`
	Delid []uint32          `protobuf:"varint,4,rep,name=delid" json:"delid,omitempty"`
}

// Default values for PartnerIdleUpdateManorCmd fields.
const (
	Default_PartnerIdleUpdateManorCmd_Cmd   = Command_SCENE_USER_MANOR_PROTOCMD
	Default_PartnerIdleUpdateManorCmd_Param = ManorParam_MANORPARAM_PARTNER_IDLE_UPDATE
)

func (x *PartnerIdleUpdateManorCmd) Reset() {
	*x = PartnerIdleUpdateManorCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerIdleUpdateManorCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerIdleUpdateManorCmd) ProtoMessage() {}

func (x *PartnerIdleUpdateManorCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerIdleUpdateManorCmd.ProtoReflect.Descriptor instead.
func (*PartnerIdleUpdateManorCmd) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{22}
}

func (x *PartnerIdleUpdateManorCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PartnerIdleUpdateManorCmd_Cmd
}

func (x *PartnerIdleUpdateManorCmd) GetParam() ManorParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PartnerIdleUpdateManorCmd_Param
}

func (x *PartnerIdleUpdateManorCmd) GetAdds() []*AddPartnerData {
	if x != nil {
		return x.Adds
	}
	return nil
}

func (x *PartnerIdleUpdateManorCmd) GetDelid() []uint32 {
	if x != nil {
		return x.Delid
	}
	return nil
}

type PartnerGiveManorCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=233" json:"cmd,omitempty"`
	Param     *ManorParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ManorParam,def=12" json:"param,omitempty"`
	Partnerid *uint32     `protobuf:"varint,3,opt,name=partnerid" json:"partnerid,omitempty"`
	Itemid    *uint32     `protobuf:"varint,4,opt,name=itemid" json:"itemid,omitempty"`
	Itemnum   *uint32     `protobuf:"varint,5,opt,name=itemnum" json:"itemnum,omitempty"`
}

// Default values for PartnerGiveManorCmd fields.
const (
	Default_PartnerGiveManorCmd_Cmd   = Command_SCENE_USER_MANOR_PROTOCMD
	Default_PartnerGiveManorCmd_Param = ManorParam_MANORPARAM_PARTNER_GIVE
)

func (x *PartnerGiveManorCmd) Reset() {
	*x = PartnerGiveManorCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerGiveManorCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerGiveManorCmd) ProtoMessage() {}

func (x *PartnerGiveManorCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerGiveManorCmd.ProtoReflect.Descriptor instead.
func (*PartnerGiveManorCmd) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{23}
}

func (x *PartnerGiveManorCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PartnerGiveManorCmd_Cmd
}

func (x *PartnerGiveManorCmd) GetParam() ManorParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PartnerGiveManorCmd_Param
}

func (x *PartnerGiveManorCmd) GetPartnerid() uint32 {
	if x != nil && x.Partnerid != nil {
		return *x.Partnerid
	}
	return 0
}

func (x *PartnerGiveManorCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *PartnerGiveManorCmd) GetItemnum() uint32 {
	if x != nil && x.Itemnum != nil {
		return *x.Itemnum
	}
	return 0
}

type BuildForgeManorCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=233" json:"cmd,omitempty"`
	Param    *ManorParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ManorParam,def=13" json:"param,omitempty"`
	Part     *uint32         `protobuf:"varint,3,opt,name=part" json:"part,omitempty"`
	Isreward *bool           `protobuf:"varint,4,opt,name=isreward" json:"isreward,omitempty"`
	Build    *ManorBuildData `protobuf:"bytes,5,opt,name=build" json:"build,omitempty"`
}

// Default values for BuildForgeManorCmd fields.
const (
	Default_BuildForgeManorCmd_Cmd   = Command_SCENE_USER_MANOR_PROTOCMD
	Default_BuildForgeManorCmd_Param = ManorParam_MANORPARAM_BUILD_FORGE
)

func (x *BuildForgeManorCmd) Reset() {
	*x = BuildForgeManorCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneManor_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildForgeManorCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildForgeManorCmd) ProtoMessage() {}

func (x *BuildForgeManorCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneManor_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildForgeManorCmd.ProtoReflect.Descriptor instead.
func (*BuildForgeManorCmd) Descriptor() ([]byte, []int) {
	return file_SceneManor_proto_rawDescGZIP(), []int{24}
}

func (x *BuildForgeManorCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuildForgeManorCmd_Cmd
}

func (x *BuildForgeManorCmd) GetParam() ManorParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuildForgeManorCmd_Param
}

func (x *BuildForgeManorCmd) GetPart() uint32 {
	if x != nil && x.Part != nil {
		return *x.Part
	}
	return 0
}

func (x *BuildForgeManorCmd) GetIsreward() bool {
	if x != nil && x.Isreward != nil {
		return *x.Isreward
	}
	return false
}

func (x *BuildForgeManorCmd) GetBuild() *ManorBuildData {
	if x != nil {
		return x.Build
	}
	return nil
}

var File_SceneManor_proto protoreflect.FileDescriptor

var file_SceneManor_proto_rawDesc = []byte{
	0x0a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x65, 0x0a, 0x12, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x09,
	0x66, 0x75, 0x6e, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x7e, 0x0a,
	0x12, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x70, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x71, 0x75, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7c, 0x0a,
	0x13, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x78, 0x0a, 0x11, 0x4d,
	0x61, 0x6e, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2f, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x24, 0x0a, 0x10, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x4c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x4c, 0x0a, 0x11, 0x4d,
	0x61, 0x6e, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x0e, 0x4d, 0x61, 0x6e,
	0x6f, 0x72, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x22, 0xfc, 0x02, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x6f, 0x72,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x05, 0x66, 0x75, 0x6e, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x46, 0x75, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x66, 0x75, 0x6e, 0x63, 0x73,
	0x12, 0x32, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x64, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x2f, 0x0a, 0x07, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f,
	0x72, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6c, 0x6f,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61,
	0x6e, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x66,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x66,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f,
	0x72, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x67,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x48, 0x6f, 0x75, 0x72, 0x22, 0xc0, 0x01, 0x0a, 0x14, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x4e, 0x74, 0x66, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x39,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d,
	0x61, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x4d, 0x41, 0x4e, 0x4f, 0x52,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x06, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x06, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x6f,
	0x72, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x22, 0xcd,
	0x01, 0x0a, 0x10, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x68, 0x69, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb9,
	0x01, 0x0a, 0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x6e,
	0x6f, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e,
	0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x16, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x29, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x14, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x4d, 0x61, 0x6e, 0x6f, 0x72,
	0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x4f, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18,
	0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61,
	0x6e, 0x6f, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x22, 0xa6, 0x02, 0x0a, 0x15, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61,
	0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x41,
	0x54, 0x43, 0x48, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x71,
	0x75, 0x69, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x22, 0xbd, 0x01, 0x0a,
	0x14, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x6e,
	0x6f, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e,
	0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x18, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x22, 0xbd, 0x01, 0x0a,
	0x14, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x6e,
	0x6f, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e,
	0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x18, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x22, 0xa9, 0x01, 0x0a,
	0x14, 0x52, 0x65, 0x71, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x61, 0x69, 0x64, 0x4d, 0x61, 0x6e,
	0x6f, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e,
	0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x15, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x43, 0x6d, 0x64,
	0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x4d, 0x41, 0x4e,
	0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x39, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x79, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x43, 0x6d, 0x64, 0x12,
	0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x4d, 0x41, 0x4e, 0x4f,
	0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x69, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x6e, 0x75, 0x6d, 0x22, 0x4f, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x17,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x6e, 0x6f, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x4e, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1c, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x43, 0x6d,
	0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x4d, 0x41,
	0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x61, 0x64, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x6c,
	0x69, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x47, 0x69,
	0x76, 0x65, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x6e, 0x75, 0x6d, 0x22, 0xe9, 0x01, 0x0a, 0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x46,
	0x6f, 0x72, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e,
	0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x47, 0x45, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x6f,
	0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x2a, 0x95, 0x03, 0x0a, 0x0a, 0x4d, 0x61, 0x6e, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4d,
	0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x4e,
	0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x4e, 0x4f,
	0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4c, 0x4f, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x10, 0x07, 0x12,
	0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18,
	0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41,
	0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e,
	0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0b,
	0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x10, 0x0c, 0x12, 0x1a, 0x0a,
	0x16, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x46, 0x4f, 0x52, 0x47, 0x45, 0x10, 0x0d, 0x2a, 0xba, 0x04, 0x0a, 0x0e, 0x45, 0x4d,
	0x61, 0x6e, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x45,
	0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44,
	0x56, 0x45, 0x4e, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x10, 0x05, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f,
	0x45, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x44, 0x56, 0x45, 0x4e, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x45, 0x10,
	0x07, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x53, 0x10, 0x08,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x53, 0x10, 0x09, 0x12, 0x21,
	0x0a, 0x1d, 0x45, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x10,
	0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x45, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x43,
	0x49, 0x54, 0x59, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x45, 0x10, 0x0d, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4d, 0x41, 0x4e, 0x4f, 0x52,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x5f,
	0x46, 0x4f, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0x0e,
	0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x47, 0x45, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x10, 0x0f, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x45, 0x10, 0x10,
}

var (
	file_SceneManor_proto_rawDescOnce sync.Once
	file_SceneManor_proto_rawDescData = file_SceneManor_proto_rawDesc
)

func file_SceneManor_proto_rawDescGZIP() []byte {
	file_SceneManor_proto_rawDescOnce.Do(func() {
		file_SceneManor_proto_rawDescData = protoimpl.X.CompressGZIP(file_SceneManor_proto_rawDescData)
	})
	return file_SceneManor_proto_rawDescData
}

var file_SceneManor_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_SceneManor_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_SceneManor_proto_goTypes = []interface{}{
	(ManorParam)(0),                   // 0: Cmd.ManorParam
	(EManorFuncType)(0),               // 1: Cmd.EManorFuncType
	(*ManorBuildFuncData)(nil),        // 2: Cmd.ManorBuildFuncData
	(*ManorDispatchGroup)(nil),        // 3: Cmd.ManorDispatchGroup
	(*ManorDispatchReward)(nil),       // 4: Cmd.ManorDispatchReward
	(*ManorDispatchData)(nil),         // 5: Cmd.ManorDispatchData
	(*ManorLotteryData)(nil),          // 6: Cmd.ManorLotteryData
	(*ManorResourseData)(nil),         // 7: Cmd.ManorResourseData
	(*ManorForgeData)(nil),            // 8: Cmd.ManorForgeData
	(*ManorBuildData)(nil),            // 9: Cmd.ManorBuildData
	(*BuildDataNtfManorCmd)(nil),      // 10: Cmd.BuildDataNtfManorCmd
	(*ManorStoryData)(nil),            // 11: Cmd.ManorStoryData
	(*ManorPartnerData)(nil),          // 12: Cmd.ManorPartnerData
	(*BuildQueryManorCmd)(nil),        // 13: Cmd.BuildQueryManorCmd
	(*BuildLevelUpManorCmd)(nil),      // 14: Cmd.BuildLevelUpManorCmd
	(*BuildDispatchManorCmd)(nil),     // 15: Cmd.BuildDispatchManorCmd
	(*BuildLotteryManorCmd)(nil),      // 16: Cmd.BuildLotteryManorCmd
	(*BuildCollectManorCmd)(nil),      // 17: Cmd.BuildCollectManorCmd
	(*ReqEnterRaidManorCmd)(nil),      // 18: Cmd.ReqEnterRaidManorCmd
	(*PartnerInfoManorCmd)(nil),       // 19: Cmd.PartnerInfoManorCmd
	(*PartnerStroyManorCmd)(nil),      // 20: Cmd.PartnerStroyManorCmd
	(*PartnerQuestData)(nil),          // 21: Cmd.PartnerQuestData
	(*AddPartnerData)(nil),            // 22: Cmd.AddPartnerData
	(*PartnerIdleListManorCmd)(nil),   // 23: Cmd.PartnerIdleListManorCmd
	(*PartnerIdleUpdateManorCmd)(nil), // 24: Cmd.PartnerIdleUpdateManorCmd
	(*PartnerGiveManorCmd)(nil),       // 25: Cmd.PartnerGiveManorCmd
	(*BuildForgeManorCmd)(nil),        // 26: Cmd.BuildForgeManorCmd
	(Command)(0),                      // 27: Cmd.Command
	(*ScenePos)(nil),                  // 28: Cmd.ScenePos
}
var file_SceneManor_proto_depIdxs = []int32{
	1,  // 0: Cmd.ManorBuildFuncData.func_type:type_name -> Cmd.EManorFuncType
	3,  // 1: Cmd.ManorDispatchData.groups:type_name -> Cmd.ManorDispatchGroup
	4,  // 2: Cmd.ManorDispatchData.rewards:type_name -> Cmd.ManorDispatchReward
	2,  // 3: Cmd.ManorBuildData.funcs:type_name -> Cmd.ManorBuildFuncData
	5,  // 4: Cmd.ManorBuildData.dispatch:type_name -> Cmd.ManorDispatchData
	6,  // 5: Cmd.ManorBuildData.lottery:type_name -> Cmd.ManorLotteryData
	7,  // 6: Cmd.ManorBuildData.resource:type_name -> Cmd.ManorResourseData
	8,  // 7: Cmd.ManorBuildData.forges:type_name -> Cmd.ManorForgeData
	27, // 8: Cmd.BuildDataNtfManorCmd.cmd:type_name -> Cmd.Command
	0,  // 9: Cmd.BuildDataNtfManorCmd.param:type_name -> Cmd.ManorParam
	9,  // 10: Cmd.BuildDataNtfManorCmd.builds:type_name -> Cmd.ManorBuildData
	11, // 11: Cmd.ManorPartnerData.stories:type_name -> Cmd.ManorStoryData
	27, // 12: Cmd.BuildQueryManorCmd.cmd:type_name -> Cmd.Command
	0,  // 13: Cmd.BuildQueryManorCmd.param:type_name -> Cmd.ManorParam
	9,  // 14: Cmd.BuildQueryManorCmd.build:type_name -> Cmd.ManorBuildData
	27, // 15: Cmd.BuildLevelUpManorCmd.cmd:type_name -> Cmd.Command
	0,  // 16: Cmd.BuildLevelUpManorCmd.param:type_name -> Cmd.ManorParam
	1,  // 17: Cmd.BuildLevelUpManorCmd.type:type_name -> Cmd.EManorFuncType
	9,  // 18: Cmd.BuildLevelUpManorCmd.build:type_name -> Cmd.ManorBuildData
	27, // 19: Cmd.BuildDispatchManorCmd.cmd:type_name -> Cmd.Command
	0,  // 20: Cmd.BuildDispatchManorCmd.param:type_name -> Cmd.ManorParam
	9,  // 21: Cmd.BuildDispatchManorCmd.build:type_name -> Cmd.ManorBuildData
	27, // 22: Cmd.BuildLotteryManorCmd.cmd:type_name -> Cmd.Command
	0,  // 23: Cmd.BuildLotteryManorCmd.param:type_name -> Cmd.ManorParam
	9,  // 24: Cmd.BuildLotteryManorCmd.build:type_name -> Cmd.ManorBuildData
	27, // 25: Cmd.BuildCollectManorCmd.cmd:type_name -> Cmd.Command
	0,  // 26: Cmd.BuildCollectManorCmd.param:type_name -> Cmd.ManorParam
	9,  // 27: Cmd.BuildCollectManorCmd.build:type_name -> Cmd.ManorBuildData
	27, // 28: Cmd.ReqEnterRaidManorCmd.cmd:type_name -> Cmd.Command
	0,  // 29: Cmd.ReqEnterRaidManorCmd.param:type_name -> Cmd.ManorParam
	27, // 30: Cmd.PartnerInfoManorCmd.cmd:type_name -> Cmd.Command
	0,  // 31: Cmd.PartnerInfoManorCmd.param:type_name -> Cmd.ManorParam
	12, // 32: Cmd.PartnerInfoManorCmd.partnerinfos:type_name -> Cmd.ManorPartnerData
	27, // 33: Cmd.PartnerStroyManorCmd.cmd:type_name -> Cmd.Command
	0,  // 34: Cmd.PartnerStroyManorCmd.param:type_name -> Cmd.ManorParam
	28, // 35: Cmd.AddPartnerData.pos:type_name -> Cmd.ScenePos
	27, // 36: Cmd.PartnerIdleListManorCmd.cmd:type_name -> Cmd.Command
	0,  // 37: Cmd.PartnerIdleListManorCmd.param:type_name -> Cmd.ManorParam
	27, // 38: Cmd.PartnerIdleUpdateManorCmd.cmd:type_name -> Cmd.Command
	0,  // 39: Cmd.PartnerIdleUpdateManorCmd.param:type_name -> Cmd.ManorParam
	22, // 40: Cmd.PartnerIdleUpdateManorCmd.adds:type_name -> Cmd.AddPartnerData
	27, // 41: Cmd.PartnerGiveManorCmd.cmd:type_name -> Cmd.Command
	0,  // 42: Cmd.PartnerGiveManorCmd.param:type_name -> Cmd.ManorParam
	27, // 43: Cmd.BuildForgeManorCmd.cmd:type_name -> Cmd.Command
	0,  // 44: Cmd.BuildForgeManorCmd.param:type_name -> Cmd.ManorParam
	9,  // 45: Cmd.BuildForgeManorCmd.build:type_name -> Cmd.ManorBuildData
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_SceneManor_proto_init() }
func file_SceneManor_proto_init() {
	if File_SceneManor_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SceneManor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManorBuildFuncData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManorDispatchGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManorDispatchReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManorDispatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManorLotteryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManorResourseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManorForgeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManorBuildData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildDataNtfManorCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManorStoryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManorPartnerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildQueryManorCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildLevelUpManorCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildDispatchManorCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildLotteryManorCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildCollectManorCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqEnterRaidManorCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerInfoManorCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerStroyManorCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerQuestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPartnerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerIdleListManorCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerIdleUpdateManorCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerGiveManorCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneManor_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildForgeManorCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SceneManor_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SceneManor_proto_goTypes,
		DependencyIndexes: file_SceneManor_proto_depIdxs,
		EnumInfos:         file_SceneManor_proto_enumTypes,
		MessageInfos:      file_SceneManor_proto_msgTypes,
	}.Build()
	File_SceneManor_proto = out.File
	file_SceneManor_proto_rawDesc = nil
	file_SceneManor_proto_goTypes = nil
	file_SceneManor_proto_depIdxs = nil
}
