// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: ProtoCommon.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EPublishVersion int32

const (
	EPublishVersion_EPUBLISHVERSION EPublishVersion = 20160216
)

// Enum value maps for EPublishVersion.
var (
	EPublishVersion_name = map[int32]string{
		20160216: "EPUBLISHVERSION",
	}
	EPublishVersion_value = map[string]int32{
		"EPUBLISHVERSION": 20160216,
	}
)

func (x EPublishVersion) Enum() *EPublishVersion {
	p := new(EPublishVersion)
	*p = x
	return p
}

func (x EPublishVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[0].Descriptor()
}

func (EPublishVersion) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[0]
}

func (x EPublishVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishVersion) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishVersion(num)
	return nil
}

// Deprecated: Use EPublishVersion.Descriptor instead.
func (EPublishVersion) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{0}
}

type EOptionalBool int32

const (
	EOptionalBool_EOPTIONALBOOL_NONE  EOptionalBool = 0
	EOptionalBool_EOPTIONALBOOL_TRUE  EOptionalBool = 1
	EOptionalBool_EOPTIONALBOOL_FALSE EOptionalBool = 2
)

// Enum value maps for EOptionalBool.
var (
	EOptionalBool_name = map[int32]string{
		0: "EOPTIONALBOOL_NONE",
		1: "EOPTIONALBOOL_TRUE",
		2: "EOPTIONALBOOL_FALSE",
	}
	EOptionalBool_value = map[string]int32{
		"EOPTIONALBOOL_NONE":  0,
		"EOPTIONALBOOL_TRUE":  1,
		"EOPTIONALBOOL_FALSE": 2,
	}
)

func (x EOptionalBool) Enum() *EOptionalBool {
	p := new(EOptionalBool)
	*p = x
	return p
}

func (x EOptionalBool) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOptionalBool) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[1].Descriptor()
}

func (EOptionalBool) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[1]
}

func (x EOptionalBool) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EOptionalBool) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EOptionalBool(num)
	return nil
}

// Deprecated: Use EOptionalBool.Descriptor instead.
func (EOptionalBool) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{1}
}

type EUserDataType int32

const (
	EUserDataType_EUSERDATATYPE_MIN                      EUserDataType = 0
	EUserDataType_EUSERDATATYPE_MAPID                    EUserDataType = 1
	EUserDataType_EUSERDATATYPE_SEX                      EUserDataType = 2
	EUserDataType_EUSERDATATYPE_PROFESSION               EUserDataType = 3
	EUserDataType_EUSERDATATYPE_DESTPROFESSION           EUserDataType = 4
	EUserDataType_EUSERDATATYPE_JOBLEVEL                 EUserDataType = 5
	EUserDataType_EUSERDATATYPE_ROLELEVEL                EUserDataType = 6
	EUserDataType_EUSERDATATYPE_JOBEXP                   EUserDataType = 7
	EUserDataType_EUSERDATATYPE_ROLEEXP                  EUserDataType = 8
	EUserDataType_EUSERDATATYPE_CHARGE                   EUserDataType = 9
	EUserDataType_EUSERDATATYPE_DIAMOND                  EUserDataType = 10
	EUserDataType_EUSERDATATYPE_SILVER                   EUserDataType = 11
	EUserDataType_EUSERDATATYPE_GOLD                     EUserDataType = 12
	EUserDataType_EUSERDATATYPE_PURIFY                   EUserDataType = 13
	EUserDataType_EUSERDATATYPE_GARDEN                   EUserDataType = 14
	EUserDataType_EUSERDATATYPE_ONLINETIME               EUserDataType = 15
	EUserDataType_EUSERDATATYPE_OFFLINETIME              EUserDataType = 16
	EUserDataType_EUSERDATATYPE_ADDICT                   EUserDataType = 17
	EUserDataType_EUSERDATATYPE_HAIR                     EUserDataType = 18
	EUserDataType_EUSERDATATYPE_HAIRCOLOR                EUserDataType = 19
	EUserDataType_EUSERDATATYPE_CLOTHCOLOR               EUserDataType = 20
	EUserDataType_EUSERDATATYPE_LEFTHAND                 EUserDataType = 21
	EUserDataType_EUSERDATATYPE_RIGHTHAND                EUserDataType = 22
	EUserDataType_EUSERDATATYPE_BODY                     EUserDataType = 23
	EUserDataType_EUSERDATATYPE_BODYSCALE                EUserDataType = 24
	EUserDataType_EUSERDATATYPE_HEAD                     EUserDataType = 25
	EUserDataType_EUSERDATATYPE_BACK                     EUserDataType = 26
	EUserDataType_EUSERDATATYPE_FACE                     EUserDataType = 27
	EUserDataType_EUSERDATATYPE_TAIL                     EUserDataType = 28
	EUserDataType_EUSERDATATYPE_MOUNT                    EUserDataType = 29
	EUserDataType_EUSERDATATYPE_MOUTH                    EUserDataType = 83
	EUserDataType_EUSERDATATYPE_STRPOINT                 EUserDataType = 30
	EUserDataType_EUSERDATATYPE_INTPOINT                 EUserDataType = 31
	EUserDataType_EUSERDATATYPE_AGIPOINT                 EUserDataType = 32
	EUserDataType_EUSERDATATYPE_DEXPOINT                 EUserDataType = 33
	EUserDataType_EUSERDATATYPE_VITPOINT                 EUserDataType = 34
	EUserDataType_EUSERDATATYPE_LUKPOINT                 EUserDataType = 35
	EUserDataType_EUSERDATATYPE_TOTALPOINT               EUserDataType = 36
	EUserDataType_EUSERDATATYPE_USEDPOINT                EUserDataType = 37
	EUserDataType_EUSERDATATYPE_NORMAL_SKILL             EUserDataType = 38
	EUserDataType_EUSERDATATYPE_COLLECT_SKILL            EUserDataType = 39
	EUserDataType_EUSERDATATYPE_TRANS_SKILL              EUserDataType = 40
	EUserDataType_EUSERDATATYPE_SKILL_POINT              EUserDataType = 41
	EUserDataType_EUSERDATATYPE_STATUS                   EUserDataType = 42
	EUserDataType_EUSERDATATYPE_EQUIPMASTER              EUserDataType = 43
	EUserDataType_EUSERDATATYPE_REFINEMASTER             EUserDataType = 44
	EUserDataType_EUSERDATATYPE_PORTRAIT                 EUserDataType = 45
	EUserDataType_EUSERDATATYPE_FRAME                    EUserDataType = 46
	EUserDataType_EUSERDATATYPE_BATTLEPOINT              EUserDataType = 47
	EUserDataType_EUSERDATATYPE_RAIDID                   EUserDataType = 48
	EUserDataType_EUSERDATATYPE_PET_PARTNER              EUserDataType = 49
	EUserDataType_EUSERDATATYPE_PET_SELF                 EUserDataType = 50
	EUserDataType_EUSERDATATYPE_CREATETIME               EUserDataType = 51
	EUserDataType_EUSERDATATYPE_SAVEMAP                  EUserDataType = 52
	EUserDataType_EUSERDATATYPE_FOLLOWID                 EUserDataType = 53
	EUserDataType_EUSERDATATYPE_HANDID                   EUserDataType = 54
	EUserDataType_EUSERDATATYPE_CARRIER                  EUserDataType = 55
	EUserDataType_EUSERDATATYPE_FRIENDSHIP               EUserDataType = 56
	EUserDataType_EUSERDATATYPE_MUSIC_CURID              EUserDataType = 57
	EUserDataType_EUSERDATATYPE_MUSIC_START              EUserDataType = 58
	EUserDataType_EUSERDATATYPE_MUSIC_DEMAND             EUserDataType = 59
	EUserDataType_EUSERDATATYPE_DIR                      EUserDataType = 60
	EUserDataType_EUSERDATATYPE_GAGTIME                  EUserDataType = 61
	EUserDataType_EUSERDATATYPE_NOLOGINTIME              EUserDataType = 62
	EUserDataType_EUSERDATATYPE_EYE                      EUserDataType = 63
	EUserDataType_EUSERDATATYPE_NAME                     EUserDataType = 64
	EUserDataType_EUSERDATATYPE_GIFTPOINT                EUserDataType = 65
	EUserDataType_EUSERDATATYPE_MANUAL_LV                EUserDataType = 66
	EUserDataType_EUSERDATATYPE_MANUAL_EXP               EUserDataType = 67
	EUserDataType_EUSERDATATYPE_CUR_TITLE                EUserDataType = 68
	EUserDataType_EUSERDATATYPE_KILLERNAME               EUserDataType = 69
	EUserDataType_EUSERDATATYPE_DROPBASEEXP              EUserDataType = 70
	EUserDataType_EUSERDATATYPE_SHADERCOLOR              EUserDataType = 71
	EUserDataType_EUSERDATATYPE_BATTLETIME               EUserDataType = 72
	EUserDataType_EUSERDATATYPE_ADDICTTIPSTIME           EUserDataType = 73
	EUserDataType_EUSERDATATYPE_QUERYTYPE                EUserDataType = 74
	EUserDataType_EUSERDATATYPE_REBATTLETIME             EUserDataType = 75
	EUserDataType_EUSERDATATYPE_USEDBATTLETIME           EUserDataType = 76
	EUserDataType_EUSERDATATYPE_BLINK                    EUserDataType = 77
	EUserDataType_EUSERDATATYPE_ZONEID                   EUserDataType = 78
	EUserDataType_EUSERDATATYPE_TREESTATUS               EUserDataType = 79
	EUserDataType_EUSERDATATYPE_DEST_ZONEID              EUserDataType = 80
	EUserDataType_EUSERDATATYPE_ORIGINAL_ZONEID          EUserDataType = 81
	EUserDataType_EUSERDATATYPE_ALPHA                    EUserDataType = 84
	EUserDataType_EUSERDATATYPE_QUOTA                    EUserDataType = 85
	EUserDataType_EUSERDATATYPE_ZENY_DEBT                EUserDataType = 86
	EUserDataType_EUSERDATATYPE_PVP_COLOR                EUserDataType = 87
	EUserDataType_EUSERDATATYPE_GUILDRAIDINDEX           EUserDataType = 88
	EUserDataType_EUSERDATATYPE_CONTRIBUTE               EUserDataType = 89
	EUserDataType_EUSERDATATYPE_PVPCOIN                  EUserDataType = 90
	EUserDataType_EUSERDATATYPE_DATA                     EUserDataType = 100
	EUserDataType_EUSERDATATYPE_NORMALSKILL_OPTION       EUserDataType = 101
	EUserDataType_EUSERDATATYPE_HASCHARGE                EUserDataType = 102
	EUserDataType_EUSERDATATYPE_FASHIONHIDE              EUserDataType = 103
	EUserDataType_EUSERDATATYPE_MONTHCARD                EUserDataType = 104
	EUserDataType_EUSERDATATYPE_COOKER_EXP               EUserDataType = 105
	EUserDataType_EUSERDATATYPE_COOKER_LV                EUserDataType = 106
	EUserDataType_EUSERDATATYPE_TASTER_EXP               EUserDataType = 107
	EUserDataType_EUSERDATATYPE_TASTER_LV                EUserDataType = 108
	EUserDataType_EUSERDATATYPE_SATIETY                  EUserDataType = 109
	EUserDataType_EUSERDATATYPE_OPTION                   EUserDataType = 110
	EUserDataType_EUSERDATATYPE_LOTTERY                  EUserDataType = 111
	EUserDataType_EUSERDATATYPE_TUTOR_PROFIC             EUserDataType = 112
	EUserDataType_EUSERDATATYPE_TUTOR_ENABLE             EUserDataType = 113
	EUserDataType_EUSERDATATYPE_GUILDHONOR               EUserDataType = 114
	EUserDataType_EUSERDATATYPE_PEAK_EFFECT              EUserDataType = 115
	EUserDataType_EUSERDATATYPE_JOY                      EUserDataType = 117
	EUserDataType_EUSERDATATYPE_MUSIC_LOOP               EUserDataType = 118
	EUserDataType_EUSERDATATYPE_CUR_MAXJOB               EUserDataType = 119
	EUserDataType_EUSERDATATYPE_MARITAL                  EUserDataType = 120
	EUserDataType_EUSERDATATYPE_QUERYWEDDINGTYPE         EUserDataType = 121
	EUserDataType_EUSERDATATYPE_DIVORCE_ROLLERCOASTER    EUserDataType = 122
	EUserDataType_EUSERDATATYPE_TWINS_ACTIONID           EUserDataType = 123
	EUserDataType_EUSERDATATYPE_FAVORABILITY             EUserDataType = 124
	EUserDataType_EUSERDATATYPE_EQUIPED_WEAPON           EUserDataType = 125
	EUserDataType_EUSERDATATYPE_SERVANTID                EUserDataType = 126
	EUserDataType_EUSERDATATYPE_BOOTH_SCORE              EUserDataType = 127
	EUserDataType_EUSERDATATYPE_QUOTA_LOCK               EUserDataType = 128
	EUserDataType_EUSERDATATYPE_DRESSUP                  EUserDataType = 129
	EUserDataType_EUSERDATATYPE_TUTORBATTLETIME          EUserDataType = 130
	EUserDataType_EUSERDATATYPE_USEDTUTORBATTLETIME      EUserDataType = 131
	EUserDataType_EUSERDATATYPE_ENSEMBLESKILL            EUserDataType = 133
	EUserDataType_EUSERDATATYPE_DEADCOIN                 EUserDataType = 134
	EUserDataType_EUSERDATATYPE_DEADLV                   EUserDataType = 135
	EUserDataType_EUSERDATATYPE_DEADEXP                  EUserDataType = 136
	EUserDataType_EUSERDATATYPE_TALENT_SKILLPOINT        EUserDataType = 137
	EUserDataType_EUSERDATATYPE_ACCCREATETIME            EUserDataType = 138
	EUserDataType_EUSERDATATYPE_TOTAL_MEDALCOUNT         EUserDataType = 139
	EUserDataType_EUSERDATATYPE_CHAIR                    EUserDataType = 140
	EUserDataType_EUSERDATATYPE_TRAIN                    EUserDataType = 141
	EUserDataType_EUSERDATATYPE_EXPRAID_SCORE            EUserDataType = 142
	EUserDataType_EUSERDATATYPE_EXPRAID_SCORE_RAID       EUserDataType = 143
	EUserDataType_EUSERDATATYPE_COURAGE                  EUserDataType = 144
	EUserDataType_EUSERDATATYPE_REAL_ZONEID              EUserDataType = 145
	EUserDataType_EUSERDATATYPE_SCENEID                  EUserDataType = 146
	EUserDataType_EUSERDATATYPE_BEING_COUNT              EUserDataType = 147
	EUserDataType_EUSERDATATYPE_FREE_LOTTERY             EUserDataType = 148
	EUserDataType_EUSERDATATYPE_TEAMPVP_COIN             EUserDataType = 150
	EUserDataType_EUSERDATATYPE_HOME_ROOMID              EUserDataType = 151
	EUserDataType_EUSERDATATYPE_REFINE_HEAD              EUserDataType = 152
	EUserDataType_EUSERDATATYPE_REFINE_FACE              EUserDataType = 153
	EUserDataType_EUSERDATATYPE_REFINE_MOUTH             EUserDataType = 154
	EUserDataType_EUSERDATATYPE_REFINE_BACK              EUserDataType = 155
	EUserDataType_EUSERDATATYPE_REFINE_TAIL              EUserDataType = 156
	EUserDataType_EUSERDATATYPE_HEAD_TEXT                EUserDataType = 157
	EUserDataType_EUSERDATATYPE_PORTRAIT_FRAME           EUserDataType = 158
	EUserDataType_EUSERDATATYPE_BACKGROUND               EUserDataType = 159
	EUserDataType_EUSERDATATYPE_BATTLEPASS_LV            EUserDataType = 160
	EUserDataType_EUSERDATATYPE_BATTLEPASS_EXP           EUserDataType = 161
	EUserDataType_EUSERDATATYPE_RACE                     EUserDataType = 162
	EUserDataType_EUSERDATATYPE_SHAPE                    EUserDataType = 163
	EUserDataType_EUSERDATATYPE_DEDUCT_CREDIT            EUserDataType = 164
	EUserDataType_EUSERDATATYPE_PASS_COUNT               EUserDataType = 165
	EUserDataType_EUSERDATATYPE_BATTLEPASS_COIN          EUserDataType = 166
	EUserDataType_EUSERDATATYPE_PROFESSION_MAXJOB        EUserDataType = 167
	EUserDataType_EUSERDATATYPE_MULTIMOUNT_OPT           EUserDataType = 168
	EUserDataType_EUSERDATATYPE_RIDING_CHARID            EUserDataType = 169
	EUserDataType_EUSERDATATYPE_RIDING_POS               EUserDataType = 170
	EUserDataType_EUSERDATATYPE_BATTLEPASS_MAXEXP        EUserDataType = 172
	EUserDataType_EUSERDATATYPE_SAND                     EUserDataType = 173
	EUserDataType_EUSERDATATYPE_WEAPONPET_EXP            EUserDataType = 174
	EUserDataType_EUSERDATATYPE_LUCKY_DICE               EUserDataType = 175
	EUserDataType_EUSERDATATYPE_BUILD_STATUS             EUserDataType = 176
	EUserDataType_EUSERDATATYPE_MONSTER_PORTRAIT         EUserDataType = 177
	EUserDataType_EUSERDATATYPE_ROLELEVEL_MAX            EUserDataType = 179
	EUserDataType_EUSERDATATYPE_NIGHTMARE                EUserDataType = 180
	EUserDataType_EUSERDATATYPE_NPC_DIALOG               EUserDataType = 181
	EUserDataType_EUSERDATATYPE_TWELVEPVP_COIN           EUserDataType = 182
	EUserDataType_EUSERDATATYPE_BIND_CONTRIBUTE          EUserDataType = 183
	EUserDataType_EUSERDATATYPE_TWELVEPVP_CAMP           EUserDataType = 184
	EUserDataType_EUSERDATATYPE_GUILD_SCORE              EUserDataType = 185
	EUserDataType_EUSERDATATYPE_AFK                      EUserDataType = 186
	EUserDataType_EUSERDATATYPE_AFK_FUNCTIME             EUserDataType = 187
	EUserDataType_EUSERDATATYPE_MYSELF_FASHION_HIDE      EUserDataType = 188
	EUserDataType_EUSERDATATYPE_NOVICE_TARGET_POINT      EUserDataType = 189
	EUserDataType_EUSERDATATYPE_PARTNER_STATE            EUserDataType = 190
	EUserDataType_EUSERDATATYPE_NPC_BEHAVIOUR            EUserDataType = 192
	EUserDataType_EUSERDATATYPE_MAX_BULLETS              EUserDataType = 197
	EUserDataType_EUSERDATATYPE_CUR_BULLETS              EUserDataType = 198
	EUserDataType_EUSERDATATYPE_CHAIN_ACTIVE             EUserDataType = 199
	EUserDataType_EUSERDATATYPE_BOX_PUSHLIMIT            EUserDataType = 201
	EUserDataType_EUSERDATATYPE_BOX_FEATURE              EUserDataType = 202
	EUserDataType_EUSERDATATYPE_ISVEER                   EUserDataType = 203
	EUserDataType_EUSERDATATYPE_SHOWNAME                 EUserDataType = 204
	EUserDataType_EUSERDATATYPE_XDIR                     EUserDataType = 205
	EUserDataType_EUSERDATATYPE_HIDEOTHER                EUserDataType = 206
	EUserDataType_EUSERDATATYPE_PERCEPT_ABILITY          EUserDataType = 207
	EUserDataType_EUSERDATATYPE_RETURNUSER_ENDTIME       EUserDataType = 208
	EUserDataType_EUSERDATATYPE_BOSSTYPE                 EUserDataType = 209
	EUserDataType_EUSERDATATYPE_NOVICE_BP_EXP            EUserDataType = 210
	EUserDataType_EUSERDATATYPE_CHAT_FRAME               EUserDataType = 211
	EUserDataType_EUSERDATATYPE_GUILDASSEMBLE_FLAG       EUserDataType = 212
	EUserDataType_EUSERDATATYPE_SERVANT_CHALLENGE_EXP    EUserDataType = 213
	EUserDataType_EUSERDATATYPE_ACCOFFLINE_TIME          EUserDataType = 214
	EUserDataType_EUSERDATATYPE_NEWPARTNER               EUserDataType = 215
	EUserDataType_EUSERDATATYPE_PVECARDCONFIGID          EUserDataType = 216
	EUserDataType_EUSERDATATYPE_RETURN_BP_EXP            EUserDataType = 217
	EUserDataType_EUSERDATATYPE_CHEAT_MARK               EUserDataType = 218
	EUserDataType_EUSERDATATYPE_AUTOSELL                 EUserDataType = 219
	EUserDataType_EUSERDATATYPE_RIDE_REFORM              EUserDataType = 220
	EUserDataType_EUSERDATATYPE_NEW_TOPIC_SCORE          EUserDataType = 221
	EUserDataType_EUSERDATATYPE_NEW_TOPIC_REWARDED_LEVEL EUserDataType = 222
	EUserDataType_EUSERDATATYPE_MONSTER_LEVEL            EUserDataType = 223
	EUserDataType_EUSERDATATYPE_MAX                      EUserDataType = 224
)

// Enum value maps for EUserDataType.
var (
	EUserDataType_name = map[int32]string{
		0:   "EUSERDATATYPE_MIN",
		1:   "EUSERDATATYPE_MAPID",
		2:   "EUSERDATATYPE_SEX",
		3:   "EUSERDATATYPE_PROFESSION",
		4:   "EUSERDATATYPE_DESTPROFESSION",
		5:   "EUSERDATATYPE_JOBLEVEL",
		6:   "EUSERDATATYPE_ROLELEVEL",
		7:   "EUSERDATATYPE_JOBEXP",
		8:   "EUSERDATATYPE_ROLEEXP",
		9:   "EUSERDATATYPE_CHARGE",
		10:  "EUSERDATATYPE_DIAMOND",
		11:  "EUSERDATATYPE_SILVER",
		12:  "EUSERDATATYPE_GOLD",
		13:  "EUSERDATATYPE_PURIFY",
		14:  "EUSERDATATYPE_GARDEN",
		15:  "EUSERDATATYPE_ONLINETIME",
		16:  "EUSERDATATYPE_OFFLINETIME",
		17:  "EUSERDATATYPE_ADDICT",
		18:  "EUSERDATATYPE_HAIR",
		19:  "EUSERDATATYPE_HAIRCOLOR",
		20:  "EUSERDATATYPE_CLOTHCOLOR",
		21:  "EUSERDATATYPE_LEFTHAND",
		22:  "EUSERDATATYPE_RIGHTHAND",
		23:  "EUSERDATATYPE_BODY",
		24:  "EUSERDATATYPE_BODYSCALE",
		25:  "EUSERDATATYPE_HEAD",
		26:  "EUSERDATATYPE_BACK",
		27:  "EUSERDATATYPE_FACE",
		28:  "EUSERDATATYPE_TAIL",
		29:  "EUSERDATATYPE_MOUNT",
		83:  "EUSERDATATYPE_MOUTH",
		30:  "EUSERDATATYPE_STRPOINT",
		31:  "EUSERDATATYPE_INTPOINT",
		32:  "EUSERDATATYPE_AGIPOINT",
		33:  "EUSERDATATYPE_DEXPOINT",
		34:  "EUSERDATATYPE_VITPOINT",
		35:  "EUSERDATATYPE_LUKPOINT",
		36:  "EUSERDATATYPE_TOTALPOINT",
		37:  "EUSERDATATYPE_USEDPOINT",
		38:  "EUSERDATATYPE_NORMAL_SKILL",
		39:  "EUSERDATATYPE_COLLECT_SKILL",
		40:  "EUSERDATATYPE_TRANS_SKILL",
		41:  "EUSERDATATYPE_SKILL_POINT",
		42:  "EUSERDATATYPE_STATUS",
		43:  "EUSERDATATYPE_EQUIPMASTER",
		44:  "EUSERDATATYPE_REFINEMASTER",
		45:  "EUSERDATATYPE_PORTRAIT",
		46:  "EUSERDATATYPE_FRAME",
		47:  "EUSERDATATYPE_BATTLEPOINT",
		48:  "EUSERDATATYPE_RAIDID",
		49:  "EUSERDATATYPE_PET_PARTNER",
		50:  "EUSERDATATYPE_PET_SELF",
		51:  "EUSERDATATYPE_CREATETIME",
		52:  "EUSERDATATYPE_SAVEMAP",
		53:  "EUSERDATATYPE_FOLLOWID",
		54:  "EUSERDATATYPE_HANDID",
		55:  "EUSERDATATYPE_CARRIER",
		56:  "EUSERDATATYPE_FRIENDSHIP",
		57:  "EUSERDATATYPE_MUSIC_CURID",
		58:  "EUSERDATATYPE_MUSIC_START",
		59:  "EUSERDATATYPE_MUSIC_DEMAND",
		60:  "EUSERDATATYPE_DIR",
		61:  "EUSERDATATYPE_GAGTIME",
		62:  "EUSERDATATYPE_NOLOGINTIME",
		63:  "EUSERDATATYPE_EYE",
		64:  "EUSERDATATYPE_NAME",
		65:  "EUSERDATATYPE_GIFTPOINT",
		66:  "EUSERDATATYPE_MANUAL_LV",
		67:  "EUSERDATATYPE_MANUAL_EXP",
		68:  "EUSERDATATYPE_CUR_TITLE",
		69:  "EUSERDATATYPE_KILLERNAME",
		70:  "EUSERDATATYPE_DROPBASEEXP",
		71:  "EUSERDATATYPE_SHADERCOLOR",
		72:  "EUSERDATATYPE_BATTLETIME",
		73:  "EUSERDATATYPE_ADDICTTIPSTIME",
		74:  "EUSERDATATYPE_QUERYTYPE",
		75:  "EUSERDATATYPE_REBATTLETIME",
		76:  "EUSERDATATYPE_USEDBATTLETIME",
		77:  "EUSERDATATYPE_BLINK",
		78:  "EUSERDATATYPE_ZONEID",
		79:  "EUSERDATATYPE_TREESTATUS",
		80:  "EUSERDATATYPE_DEST_ZONEID",
		81:  "EUSERDATATYPE_ORIGINAL_ZONEID",
		84:  "EUSERDATATYPE_ALPHA",
		85:  "EUSERDATATYPE_QUOTA",
		86:  "EUSERDATATYPE_ZENY_DEBT",
		87:  "EUSERDATATYPE_PVP_COLOR",
		88:  "EUSERDATATYPE_GUILDRAIDINDEX",
		89:  "EUSERDATATYPE_CONTRIBUTE",
		90:  "EUSERDATATYPE_PVPCOIN",
		100: "EUSERDATATYPE_DATA",
		101: "EUSERDATATYPE_NORMALSKILL_OPTION",
		102: "EUSERDATATYPE_HASCHARGE",
		103: "EUSERDATATYPE_FASHIONHIDE",
		104: "EUSERDATATYPE_MONTHCARD",
		105: "EUSERDATATYPE_COOKER_EXP",
		106: "EUSERDATATYPE_COOKER_LV",
		107: "EUSERDATATYPE_TASTER_EXP",
		108: "EUSERDATATYPE_TASTER_LV",
		109: "EUSERDATATYPE_SATIETY",
		110: "EUSERDATATYPE_OPTION",
		111: "EUSERDATATYPE_LOTTERY",
		112: "EUSERDATATYPE_TUTOR_PROFIC",
		113: "EUSERDATATYPE_TUTOR_ENABLE",
		114: "EUSERDATATYPE_GUILDHONOR",
		115: "EUSERDATATYPE_PEAK_EFFECT",
		117: "EUSERDATATYPE_JOY",
		118: "EUSERDATATYPE_MUSIC_LOOP",
		119: "EUSERDATATYPE_CUR_MAXJOB",
		120: "EUSERDATATYPE_MARITAL",
		121: "EUSERDATATYPE_QUERYWEDDINGTYPE",
		122: "EUSERDATATYPE_DIVORCE_ROLLERCOASTER",
		123: "EUSERDATATYPE_TWINS_ACTIONID",
		124: "EUSERDATATYPE_FAVORABILITY",
		125: "EUSERDATATYPE_EQUIPED_WEAPON",
		126: "EUSERDATATYPE_SERVANTID",
		127: "EUSERDATATYPE_BOOTH_SCORE",
		128: "EUSERDATATYPE_QUOTA_LOCK",
		129: "EUSERDATATYPE_DRESSUP",
		130: "EUSERDATATYPE_TUTORBATTLETIME",
		131: "EUSERDATATYPE_USEDTUTORBATTLETIME",
		133: "EUSERDATATYPE_ENSEMBLESKILL",
		134: "EUSERDATATYPE_DEADCOIN",
		135: "EUSERDATATYPE_DEADLV",
		136: "EUSERDATATYPE_DEADEXP",
		137: "EUSERDATATYPE_TALENT_SKILLPOINT",
		138: "EUSERDATATYPE_ACCCREATETIME",
		139: "EUSERDATATYPE_TOTAL_MEDALCOUNT",
		140: "EUSERDATATYPE_CHAIR",
		141: "EUSERDATATYPE_TRAIN",
		142: "EUSERDATATYPE_EXPRAID_SCORE",
		143: "EUSERDATATYPE_EXPRAID_SCORE_RAID",
		144: "EUSERDATATYPE_COURAGE",
		145: "EUSERDATATYPE_REAL_ZONEID",
		146: "EUSERDATATYPE_SCENEID",
		147: "EUSERDATATYPE_BEING_COUNT",
		148: "EUSERDATATYPE_FREE_LOTTERY",
		150: "EUSERDATATYPE_TEAMPVP_COIN",
		151: "EUSERDATATYPE_HOME_ROOMID",
		152: "EUSERDATATYPE_REFINE_HEAD",
		153: "EUSERDATATYPE_REFINE_FACE",
		154: "EUSERDATATYPE_REFINE_MOUTH",
		155: "EUSERDATATYPE_REFINE_BACK",
		156: "EUSERDATATYPE_REFINE_TAIL",
		157: "EUSERDATATYPE_HEAD_TEXT",
		158: "EUSERDATATYPE_PORTRAIT_FRAME",
		159: "EUSERDATATYPE_BACKGROUND",
		160: "EUSERDATATYPE_BATTLEPASS_LV",
		161: "EUSERDATATYPE_BATTLEPASS_EXP",
		162: "EUSERDATATYPE_RACE",
		163: "EUSERDATATYPE_SHAPE",
		164: "EUSERDATATYPE_DEDUCT_CREDIT",
		165: "EUSERDATATYPE_PASS_COUNT",
		166: "EUSERDATATYPE_BATTLEPASS_COIN",
		167: "EUSERDATATYPE_PROFESSION_MAXJOB",
		168: "EUSERDATATYPE_MULTIMOUNT_OPT",
		169: "EUSERDATATYPE_RIDING_CHARID",
		170: "EUSERDATATYPE_RIDING_POS",
		172: "EUSERDATATYPE_BATTLEPASS_MAXEXP",
		173: "EUSERDATATYPE_SAND",
		174: "EUSERDATATYPE_WEAPONPET_EXP",
		175: "EUSERDATATYPE_LUCKY_DICE",
		176: "EUSERDATATYPE_BUILD_STATUS",
		177: "EUSERDATATYPE_MONSTER_PORTRAIT",
		179: "EUSERDATATYPE_ROLELEVEL_MAX",
		180: "EUSERDATATYPE_NIGHTMARE",
		181: "EUSERDATATYPE_NPC_DIALOG",
		182: "EUSERDATATYPE_TWELVEPVP_COIN",
		183: "EUSERDATATYPE_BIND_CONTRIBUTE",
		184: "EUSERDATATYPE_TWELVEPVP_CAMP",
		185: "EUSERDATATYPE_GUILD_SCORE",
		186: "EUSERDATATYPE_AFK",
		187: "EUSERDATATYPE_AFK_FUNCTIME",
		188: "EUSERDATATYPE_MYSELF_FASHION_HIDE",
		189: "EUSERDATATYPE_NOVICE_TARGET_POINT",
		190: "EUSERDATATYPE_PARTNER_STATE",
		192: "EUSERDATATYPE_NPC_BEHAVIOUR",
		197: "EUSERDATATYPE_MAX_BULLETS",
		198: "EUSERDATATYPE_CUR_BULLETS",
		199: "EUSERDATATYPE_CHAIN_ACTIVE",
		201: "EUSERDATATYPE_BOX_PUSHLIMIT",
		202: "EUSERDATATYPE_BOX_FEATURE",
		203: "EUSERDATATYPE_ISVEER",
		204: "EUSERDATATYPE_SHOWNAME",
		205: "EUSERDATATYPE_XDIR",
		206: "EUSERDATATYPE_HIDEOTHER",
		207: "EUSERDATATYPE_PERCEPT_ABILITY",
		208: "EUSERDATATYPE_RETURNUSER_ENDTIME",
		209: "EUSERDATATYPE_BOSSTYPE",
		210: "EUSERDATATYPE_NOVICE_BP_EXP",
		211: "EUSERDATATYPE_CHAT_FRAME",
		212: "EUSERDATATYPE_GUILDASSEMBLE_FLAG",
		213: "EUSERDATATYPE_SERVANT_CHALLENGE_EXP",
		214: "EUSERDATATYPE_ACCOFFLINE_TIME",
		215: "EUSERDATATYPE_NEWPARTNER",
		216: "EUSERDATATYPE_PVECARDCONFIGID",
		217: "EUSERDATATYPE_RETURN_BP_EXP",
		218: "EUSERDATATYPE_CHEAT_MARK",
		219: "EUSERDATATYPE_AUTOSELL",
		220: "EUSERDATATYPE_RIDE_REFORM",
		221: "EUSERDATATYPE_NEW_TOPIC_SCORE",
		222: "EUSERDATATYPE_NEW_TOPIC_REWARDED_LEVEL",
		223: "EUSERDATATYPE_MONSTER_LEVEL",
		224: "EUSERDATATYPE_MAX",
	}
	EUserDataType_value = map[string]int32{
		"EUSERDATATYPE_MIN":                      0,
		"EUSERDATATYPE_MAPID":                    1,
		"EUSERDATATYPE_SEX":                      2,
		"EUSERDATATYPE_PROFESSION":               3,
		"EUSERDATATYPE_DESTPROFESSION":           4,
		"EUSERDATATYPE_JOBLEVEL":                 5,
		"EUSERDATATYPE_ROLELEVEL":                6,
		"EUSERDATATYPE_JOBEXP":                   7,
		"EUSERDATATYPE_ROLEEXP":                  8,
		"EUSERDATATYPE_CHARGE":                   9,
		"EUSERDATATYPE_DIAMOND":                  10,
		"EUSERDATATYPE_SILVER":                   11,
		"EUSERDATATYPE_GOLD":                     12,
		"EUSERDATATYPE_PURIFY":                   13,
		"EUSERDATATYPE_GARDEN":                   14,
		"EUSERDATATYPE_ONLINETIME":               15,
		"EUSERDATATYPE_OFFLINETIME":              16,
		"EUSERDATATYPE_ADDICT":                   17,
		"EUSERDATATYPE_HAIR":                     18,
		"EUSERDATATYPE_HAIRCOLOR":                19,
		"EUSERDATATYPE_CLOTHCOLOR":               20,
		"EUSERDATATYPE_LEFTHAND":                 21,
		"EUSERDATATYPE_RIGHTHAND":                22,
		"EUSERDATATYPE_BODY":                     23,
		"EUSERDATATYPE_BODYSCALE":                24,
		"EUSERDATATYPE_HEAD":                     25,
		"EUSERDATATYPE_BACK":                     26,
		"EUSERDATATYPE_FACE":                     27,
		"EUSERDATATYPE_TAIL":                     28,
		"EUSERDATATYPE_MOUNT":                    29,
		"EUSERDATATYPE_MOUTH":                    83,
		"EUSERDATATYPE_STRPOINT":                 30,
		"EUSERDATATYPE_INTPOINT":                 31,
		"EUSERDATATYPE_AGIPOINT":                 32,
		"EUSERDATATYPE_DEXPOINT":                 33,
		"EUSERDATATYPE_VITPOINT":                 34,
		"EUSERDATATYPE_LUKPOINT":                 35,
		"EUSERDATATYPE_TOTALPOINT":               36,
		"EUSERDATATYPE_USEDPOINT":                37,
		"EUSERDATATYPE_NORMAL_SKILL":             38,
		"EUSERDATATYPE_COLLECT_SKILL":            39,
		"EUSERDATATYPE_TRANS_SKILL":              40,
		"EUSERDATATYPE_SKILL_POINT":              41,
		"EUSERDATATYPE_STATUS":                   42,
		"EUSERDATATYPE_EQUIPMASTER":              43,
		"EUSERDATATYPE_REFINEMASTER":             44,
		"EUSERDATATYPE_PORTRAIT":                 45,
		"EUSERDATATYPE_FRAME":                    46,
		"EUSERDATATYPE_BATTLEPOINT":              47,
		"EUSERDATATYPE_RAIDID":                   48,
		"EUSERDATATYPE_PET_PARTNER":              49,
		"EUSERDATATYPE_PET_SELF":                 50,
		"EUSERDATATYPE_CREATETIME":               51,
		"EUSERDATATYPE_SAVEMAP":                  52,
		"EUSERDATATYPE_FOLLOWID":                 53,
		"EUSERDATATYPE_HANDID":                   54,
		"EUSERDATATYPE_CARRIER":                  55,
		"EUSERDATATYPE_FRIENDSHIP":               56,
		"EUSERDATATYPE_MUSIC_CURID":              57,
		"EUSERDATATYPE_MUSIC_START":              58,
		"EUSERDATATYPE_MUSIC_DEMAND":             59,
		"EUSERDATATYPE_DIR":                      60,
		"EUSERDATATYPE_GAGTIME":                  61,
		"EUSERDATATYPE_NOLOGINTIME":              62,
		"EUSERDATATYPE_EYE":                      63,
		"EUSERDATATYPE_NAME":                     64,
		"EUSERDATATYPE_GIFTPOINT":                65,
		"EUSERDATATYPE_MANUAL_LV":                66,
		"EUSERDATATYPE_MANUAL_EXP":               67,
		"EUSERDATATYPE_CUR_TITLE":                68,
		"EUSERDATATYPE_KILLERNAME":               69,
		"EUSERDATATYPE_DROPBASEEXP":              70,
		"EUSERDATATYPE_SHADERCOLOR":              71,
		"EUSERDATATYPE_BATTLETIME":               72,
		"EUSERDATATYPE_ADDICTTIPSTIME":           73,
		"EUSERDATATYPE_QUERYTYPE":                74,
		"EUSERDATATYPE_REBATTLETIME":             75,
		"EUSERDATATYPE_USEDBATTLETIME":           76,
		"EUSERDATATYPE_BLINK":                    77,
		"EUSERDATATYPE_ZONEID":                   78,
		"EUSERDATATYPE_TREESTATUS":               79,
		"EUSERDATATYPE_DEST_ZONEID":              80,
		"EUSERDATATYPE_ORIGINAL_ZONEID":          81,
		"EUSERDATATYPE_ALPHA":                    84,
		"EUSERDATATYPE_QUOTA":                    85,
		"EUSERDATATYPE_ZENY_DEBT":                86,
		"EUSERDATATYPE_PVP_COLOR":                87,
		"EUSERDATATYPE_GUILDRAIDINDEX":           88,
		"EUSERDATATYPE_CONTRIBUTE":               89,
		"EUSERDATATYPE_PVPCOIN":                  90,
		"EUSERDATATYPE_DATA":                     100,
		"EUSERDATATYPE_NORMALSKILL_OPTION":       101,
		"EUSERDATATYPE_HASCHARGE":                102,
		"EUSERDATATYPE_FASHIONHIDE":              103,
		"EUSERDATATYPE_MONTHCARD":                104,
		"EUSERDATATYPE_COOKER_EXP":               105,
		"EUSERDATATYPE_COOKER_LV":                106,
		"EUSERDATATYPE_TASTER_EXP":               107,
		"EUSERDATATYPE_TASTER_LV":                108,
		"EUSERDATATYPE_SATIETY":                  109,
		"EUSERDATATYPE_OPTION":                   110,
		"EUSERDATATYPE_LOTTERY":                  111,
		"EUSERDATATYPE_TUTOR_PROFIC":             112,
		"EUSERDATATYPE_TUTOR_ENABLE":             113,
		"EUSERDATATYPE_GUILDHONOR":               114,
		"EUSERDATATYPE_PEAK_EFFECT":              115,
		"EUSERDATATYPE_JOY":                      117,
		"EUSERDATATYPE_MUSIC_LOOP":               118,
		"EUSERDATATYPE_CUR_MAXJOB":               119,
		"EUSERDATATYPE_MARITAL":                  120,
		"EUSERDATATYPE_QUERYWEDDINGTYPE":         121,
		"EUSERDATATYPE_DIVORCE_ROLLERCOASTER":    122,
		"EUSERDATATYPE_TWINS_ACTIONID":           123,
		"EUSERDATATYPE_FAVORABILITY":             124,
		"EUSERDATATYPE_EQUIPED_WEAPON":           125,
		"EUSERDATATYPE_SERVANTID":                126,
		"EUSERDATATYPE_BOOTH_SCORE":              127,
		"EUSERDATATYPE_QUOTA_LOCK":               128,
		"EUSERDATATYPE_DRESSUP":                  129,
		"EUSERDATATYPE_TUTORBATTLETIME":          130,
		"EUSERDATATYPE_USEDTUTORBATTLETIME":      131,
		"EUSERDATATYPE_ENSEMBLESKILL":            133,
		"EUSERDATATYPE_DEADCOIN":                 134,
		"EUSERDATATYPE_DEADLV":                   135,
		"EUSERDATATYPE_DEADEXP":                  136,
		"EUSERDATATYPE_TALENT_SKILLPOINT":        137,
		"EUSERDATATYPE_ACCCREATETIME":            138,
		"EUSERDATATYPE_TOTAL_MEDALCOUNT":         139,
		"EUSERDATATYPE_CHAIR":                    140,
		"EUSERDATATYPE_TRAIN":                    141,
		"EUSERDATATYPE_EXPRAID_SCORE":            142,
		"EUSERDATATYPE_EXPRAID_SCORE_RAID":       143,
		"EUSERDATATYPE_COURAGE":                  144,
		"EUSERDATATYPE_REAL_ZONEID":              145,
		"EUSERDATATYPE_SCENEID":                  146,
		"EUSERDATATYPE_BEING_COUNT":              147,
		"EUSERDATATYPE_FREE_LOTTERY":             148,
		"EUSERDATATYPE_TEAMPVP_COIN":             150,
		"EUSERDATATYPE_HOME_ROOMID":              151,
		"EUSERDATATYPE_REFINE_HEAD":              152,
		"EUSERDATATYPE_REFINE_FACE":              153,
		"EUSERDATATYPE_REFINE_MOUTH":             154,
		"EUSERDATATYPE_REFINE_BACK":              155,
		"EUSERDATATYPE_REFINE_TAIL":              156,
		"EUSERDATATYPE_HEAD_TEXT":                157,
		"EUSERDATATYPE_PORTRAIT_FRAME":           158,
		"EUSERDATATYPE_BACKGROUND":               159,
		"EUSERDATATYPE_BATTLEPASS_LV":            160,
		"EUSERDATATYPE_BATTLEPASS_EXP":           161,
		"EUSERDATATYPE_RACE":                     162,
		"EUSERDATATYPE_SHAPE":                    163,
		"EUSERDATATYPE_DEDUCT_CREDIT":            164,
		"EUSERDATATYPE_PASS_COUNT":               165,
		"EUSERDATATYPE_BATTLEPASS_COIN":          166,
		"EUSERDATATYPE_PROFESSION_MAXJOB":        167,
		"EUSERDATATYPE_MULTIMOUNT_OPT":           168,
		"EUSERDATATYPE_RIDING_CHARID":            169,
		"EUSERDATATYPE_RIDING_POS":               170,
		"EUSERDATATYPE_BATTLEPASS_MAXEXP":        172,
		"EUSERDATATYPE_SAND":                     173,
		"EUSERDATATYPE_WEAPONPET_EXP":            174,
		"EUSERDATATYPE_LUCKY_DICE":               175,
		"EUSERDATATYPE_BUILD_STATUS":             176,
		"EUSERDATATYPE_MONSTER_PORTRAIT":         177,
		"EUSERDATATYPE_ROLELEVEL_MAX":            179,
		"EUSERDATATYPE_NIGHTMARE":                180,
		"EUSERDATATYPE_NPC_DIALOG":               181,
		"EUSERDATATYPE_TWELVEPVP_COIN":           182,
		"EUSERDATATYPE_BIND_CONTRIBUTE":          183,
		"EUSERDATATYPE_TWELVEPVP_CAMP":           184,
		"EUSERDATATYPE_GUILD_SCORE":              185,
		"EUSERDATATYPE_AFK":                      186,
		"EUSERDATATYPE_AFK_FUNCTIME":             187,
		"EUSERDATATYPE_MYSELF_FASHION_HIDE":      188,
		"EUSERDATATYPE_NOVICE_TARGET_POINT":      189,
		"EUSERDATATYPE_PARTNER_STATE":            190,
		"EUSERDATATYPE_NPC_BEHAVIOUR":            192,
		"EUSERDATATYPE_MAX_BULLETS":              197,
		"EUSERDATATYPE_CUR_BULLETS":              198,
		"EUSERDATATYPE_CHAIN_ACTIVE":             199,
		"EUSERDATATYPE_BOX_PUSHLIMIT":            201,
		"EUSERDATATYPE_BOX_FEATURE":              202,
		"EUSERDATATYPE_ISVEER":                   203,
		"EUSERDATATYPE_SHOWNAME":                 204,
		"EUSERDATATYPE_XDIR":                     205,
		"EUSERDATATYPE_HIDEOTHER":                206,
		"EUSERDATATYPE_PERCEPT_ABILITY":          207,
		"EUSERDATATYPE_RETURNUSER_ENDTIME":       208,
		"EUSERDATATYPE_BOSSTYPE":                 209,
		"EUSERDATATYPE_NOVICE_BP_EXP":            210,
		"EUSERDATATYPE_CHAT_FRAME":               211,
		"EUSERDATATYPE_GUILDASSEMBLE_FLAG":       212,
		"EUSERDATATYPE_SERVANT_CHALLENGE_EXP":    213,
		"EUSERDATATYPE_ACCOFFLINE_TIME":          214,
		"EUSERDATATYPE_NEWPARTNER":               215,
		"EUSERDATATYPE_PVECARDCONFIGID":          216,
		"EUSERDATATYPE_RETURN_BP_EXP":            217,
		"EUSERDATATYPE_CHEAT_MARK":               218,
		"EUSERDATATYPE_AUTOSELL":                 219,
		"EUSERDATATYPE_RIDE_REFORM":              220,
		"EUSERDATATYPE_NEW_TOPIC_SCORE":          221,
		"EUSERDATATYPE_NEW_TOPIC_REWARDED_LEVEL": 222,
		"EUSERDATATYPE_MONSTER_LEVEL":            223,
		"EUSERDATATYPE_MAX":                      224,
	}
)

func (x EUserDataType) Enum() *EUserDataType {
	p := new(EUserDataType)
	*p = x
	return p
}

func (x EUserDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUserDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[2].Descriptor()
}

func (EUserDataType) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[2]
}

func (x EUserDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUserDataType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUserDataType(num)
	return nil
}

// Deprecated: Use EUserDataType.Descriptor instead.
func (EUserDataType) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{2}
}

type EMARITAL int32

const (
	EMARITAL_EMARITAL_SINGLE         EMARITAL = 0
	EMARITAL_EMARITAL_RESERVED       EMARITAL = 1
	EMARITAL_EMARITAL_MARRIED        EMARITAL = 2
	EMARITAL_EMARITAL_DIVORCE_PUNISH EMARITAL = 3
)

// Enum value maps for EMARITAL.
var (
	EMARITAL_name = map[int32]string{
		0: "EMARITAL_SINGLE",
		1: "EMARITAL_RESERVED",
		2: "EMARITAL_MARRIED",
		3: "EMARITAL_DIVORCE_PUNISH",
	}
	EMARITAL_value = map[string]int32{
		"EMARITAL_SINGLE":         0,
		"EMARITAL_RESERVED":       1,
		"EMARITAL_MARRIED":        2,
		"EMARITAL_DIVORCE_PUNISH": 3,
	}
)

func (x EMARITAL) Enum() *EMARITAL {
	p := new(EMARITAL)
	*p = x
	return p
}

func (x EMARITAL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMARITAL) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[3].Descriptor()
}

func (EMARITAL) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[3]
}

func (x EMARITAL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMARITAL) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMARITAL(num)
	return nil
}

// Deprecated: Use EMARITAL.Descriptor instead.
func (EMARITAL) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{3}
}

type EAttrType int32

const (
	EAttrType_EATTRTYPE_MIN               EAttrType = 0
	EAttrType_EATTRTYPE_STR               EAttrType = 100
	EAttrType_EATTRTYPE_INT               EAttrType = 101
	EAttrType_EATTRTYPE_AGI               EAttrType = 102
	EAttrType_EATTRTYPE_DEX               EAttrType = 103
	EAttrType_EATTRTYPE_VIT               EAttrType = 104
	EAttrType_EATTRTYPE_LUK               EAttrType = 105
	EAttrType_EATTRTYPE_ATK               EAttrType = 200
	EAttrType_EATTRTYPE_ATKPER            EAttrType = 201
	EAttrType_EATTRTYPE_DEF               EAttrType = 202
	EAttrType_EATTRTYPE_DEFPER            EAttrType = 203
	EAttrType_EATTRTYPE_MATK              EAttrType = 204
	EAttrType_EATTRTYPE_MATKPER           EAttrType = 205
	EAttrType_EATTRTYPE_MDEF              EAttrType = 206
	EAttrType_EATTRTYPE_MDEFPER           EAttrType = 207
	EAttrType_EATTRTYPE_MAXHP             EAttrType = 208
	EAttrType_EATTRTYPE_MAXHPPER          EAttrType = 209
	EAttrType_EATTRTYPE_MAXSP             EAttrType = 210
	EAttrType_EATTRTYPE_MAXSPPER          EAttrType = 211
	EAttrType_EATTRTYPE_HP                EAttrType = 212
	EAttrType_EATTRTYPE_SP                EAttrType = 213
	EAttrType_EATTRTYPE_HIT               EAttrType = 214
	EAttrType_EATTRTYPE_FLEE              EAttrType = 215
	EAttrType_EATTRTYPE_CRI               EAttrType = 216
	EAttrType_EATTRTYPE_CRIRES            EAttrType = 217
	EAttrType_EATTRTYPE_CRIDAMPER         EAttrType = 218
	EAttrType_EATTRTYPE_CRIDEFPER         EAttrType = 219
	EAttrType_EATTRTYPE_ATKSPD            EAttrType = 220
	EAttrType_EATTRTYPE_MOVESPD           EAttrType = 221
	EAttrType_EATTRTYPE_CASTSPD           EAttrType = 222
	EAttrType_EATTRTYPE_RESTORESPD        EAttrType = 223
	EAttrType_EATTRTYPE_SPRESTORESPD      EAttrType = 224
	EAttrType_EATTRTYPE_ITEMRESTORESPD    EAttrType = 225
	EAttrType_EATTRTYPE_ITEMSPRESTORESPD  EAttrType = 226
	EAttrType_EATTRTYPE_RESTORESPDPER     EAttrType = 227
	EAttrType_EATTRTYPE_SPRESTORESPDPER   EAttrType = 228
	EAttrType_EATTRTYPE_CRIPER            EAttrType = 229
	EAttrType_EATTRTYPE_MONMAXHPPER       EAttrType = 230
	EAttrType_EATTRTYPE_MONCRIRES         EAttrType = 231
	EAttrType_EATTRTYPE_BASEHP            EAttrType = 232
	EAttrType_EATTRTYPE_REFINE            EAttrType = 300
	EAttrType_EATTRTYPE_MREFINE           EAttrType = 301
	EAttrType_EATTRTYPE_MOVESPDPER        EAttrType = 302
	EAttrType_EATTRTYPE_EQUIPASPD         EAttrType = 303
	EAttrType_EATTRTYPE_SKILLASPD         EAttrType = 304
	EAttrType_EATTRTYPE_HITPER            EAttrType = 305
	EAttrType_EATTRTYPE_FLEEPER           EAttrType = 306
	EAttrType_EATTRTYPE_STRPER            EAttrType = 307
	EAttrType_EATTRTYPE_INTPER            EAttrType = 308
	EAttrType_EATTRTYPE_AGIPER            EAttrType = 309
	EAttrType_EATTRTYPE_DEXPER            EAttrType = 310
	EAttrType_EATTRTYPE_VITPER            EAttrType = 311
	EAttrType_EATTRTYPE_LUKPER            EAttrType = 312
	EAttrType_EATTRTYPE_LIMITASPD         EAttrType = 313
	EAttrType_EATTRTYPE_SHOWATK           EAttrType = 400
	EAttrType_EATTRTYPE_SHOWDEF           EAttrType = 401
	EAttrType_EATTRTYPE_SHOWMATK          EAttrType = 402
	EAttrType_EATTRTYPE_SHOWMDEF          EAttrType = 403
	EAttrType_EATTRTYPE_SHOWMAXHP         EAttrType = 404
	EAttrType_EATTRTYPE_SHOWMAXSP         EAttrType = 405
	EAttrType_EATTRTYPE_SHOWHIT           EAttrType = 406
	EAttrType_EATTRTYPE_SHOWFLEE          EAttrType = 407
	EAttrType_EATTRTYPE_SHOWCRI           EAttrType = 408
	EAttrType_EATTRTYPE_SHOWCRIRES        EAttrType = 409
	EAttrType_EATTRTYPE_SHOWATKSPD        EAttrType = 410
	EAttrType_EATTRTYPE_SHOWMOVESPD       EAttrType = 411
	EAttrType_EATTRTYPE_SHOWCASTSPD       EAttrType = 412
	EAttrType_EATTRTYPE_SHOWRESTORESPD    EAttrType = 413
	EAttrType_EATTRTYPE_DAMREDUC          EAttrType = 414
	EAttrType_EATTRTYPE_MDAMREDUC         EAttrType = 415
	EAttrType_EATTRTYPE_IGNOREDEF         EAttrType = 416
	EAttrType_EATTRTYPE_IGNOREMDEF        EAttrType = 417
	EAttrType_EATTRTYPE_DAMREBOUND        EAttrType = 418
	EAttrType_EATTRTYPE_MDAMREBOUND       EAttrType = 419
	EAttrType_EATTRTYPE_DAMINCREASE       EAttrType = 420
	EAttrType_EATTRTYPE_MDAMINCREASE      EAttrType = 421
	EAttrType_EATTRTYPE_VAMPIRIC          EAttrType = 422
	EAttrType_EATTRTYPE_BEVAMPIRIC        EAttrType = 423
	EAttrType_EATTRTYPE_HARMIMMUNE        EAttrType = 424
	EAttrType_EATTRTYPE_REALDAMAGE        EAttrType = 425
	EAttrType_EATTRTYPE_RANGEDAM          EAttrType = 426
	EAttrType_EATTRTYPE_SHOTDAMREDUC      EAttrType = 427
	EAttrType_EATTRTYPE_LONGDAMREDUC      EAttrType = 428
	EAttrType_EATTRTYPE_LONGMDAMREDUC     EAttrType = 429
	EAttrType_EATTRTYPE_IGNOREEQUIPDEF    EAttrType = 430
	EAttrType_EATTRTYPE_SHAPEATKPER       EAttrType = 431
	EAttrType_EATTRTYPE_DAMSPIKE          EAttrType = 432
	EAttrType_EATTRTYPE_MDAMSPIKE         EAttrType = 433
	EAttrType_EATTRTYPE_REFINEDAMREDUC    EAttrType = 434
	EAttrType_EATTRTYPE_REFINEMDAMREDUC   EAttrType = 435
	EAttrType_EATTRTYPE_ENERGYDAMREDUC    EAttrType = 436
	EAttrType_EATTRTYPE_STEELDAMREDUC     EAttrType = 437
	EAttrType_EATTRTYPE_STEELMDAMREDUC    EAttrType = 438
	EAttrType_EATTRTYPE_PROTECTDAMREDUC   EAttrType = 439
	EAttrType_EATTRTYPE_PROTECTMDAMREDUC  EAttrType = 440
	EAttrType_EATTRTYPE_DRAGONDAMREDUC    EAttrType = 443
	EAttrType_EATTRTYPE_DRAGONMDAMREDUC   EAttrType = 444
	EAttrType_EATTRTYPE_NORMALREALDAM     EAttrType = 445
	EAttrType_EATTRTYPE_NORMALMREALDAM    EAttrType = 446
	EAttrType_EATTRTYPE_SKILLREALDAM      EAttrType = 447
	EAttrType_EATTRTYPE_SKILLMREALDAM     EAttrType = 448
	EAttrType_EATTRTYPE_HIDEDAMREDUC      EAttrType = 441
	EAttrType_EATTRTYPE_HIDEMDAMREDUC     EAttrType = 442
	EAttrType_EATTRTYPE_NORMALATK         EAttrType = 449
	EAttrType_EATTRTYPE_NORMALATKDAM      EAttrType = 450
	EAttrType_EATTRTYPE_NORMALATKRES      EAttrType = 451
	EAttrType_EATTRTYPE_SKILLDAM          EAttrType = 452
	EAttrType_EATTRTYPE_SKILLRES          EAttrType = 453
	EAttrType_EATTRTYPE_WINDMDAMREDUC     EAttrType = 454
	EAttrType_EATTRTYPE_DEADDAMREDUC      EAttrType = 455
	EAttrType_EATTRTYPE_DEADMDAMREDUC     EAttrType = 456
	EAttrType_EATTRTYPE_RESULTDAMINC      EAttrType = 457
	EAttrType_EATTRTYPE_RESULTDAMRES      EAttrType = 458
	EAttrType_EATTRTYPE_MAGICFLEERATE     EAttrType = 459
	EAttrType_EATTRTYPE_AUBOBLOCKRATE     EAttrType = 460
	EAttrType_EATTRTYPE_WEAPONBLOCKRATE   EAttrType = 461
	EAttrType_EATTRTYPE_JINGANGRATE       EAttrType = 462
	EAttrType_EATTRTYPE_LONGFLEERATE      EAttrType = 463
	EAttrType_EATTRTYPE_BAWANGRATE        EAttrType = 464
	EAttrType_EATTRTYPE_MUSTMISSRATE      EAttrType = 465
	EAttrType_EATTRTYPE_TWL_PLAYER_REDUC  EAttrType = 466
	EAttrType_EATTRTYPE_TWL_MONSTER_REDUC EAttrType = 467
	EAttrType_EATTRTYPE_TWL_MONSTER_DAM   EAttrType = 468
	EAttrType_EATTRTYPE_CAR_REAL_DAM      EAttrType = 469
	EAttrType_EATTRTYPE_CAR_REAL_DAM_PER  EAttrType = 470
	EAttrType_EATTRTYPE_SEA_JUDGE_PER     EAttrType = 471
	EAttrType_EATTRTYPE_SEA_REDUC_PER     EAttrType = 472
	EAttrType_EATTRTYPE_BOSS_REAL_REDUC   EAttrType = 473
	EAttrType_EATTRTYPE_BOSS_REAL_DAM     EAttrType = 474
	EAttrType_EATTRTYPE_MOON_REDUC        EAttrType = 475
	EAttrType_EATTRTYPE_DRAGON_REDUC      EAttrType = 476
	EAttrType_EATTRTYPE_TREE_REDUC        EAttrType = 477
	EAttrType_EATTRTYPE_NO_HURT_RATIO     EAttrType = 478
	EAttrType_EATTRTYPE_RESULTDAMREDUC    EAttrType = 479
	EAttrType_EATTRTYPE_CTCHANGE          EAttrType = 509
	EAttrType_EATTRTYPE_CTCHANGEPER       EAttrType = 510
	EAttrType_EATTRTYPE_CDCHANGE          EAttrType = 511
	EAttrType_EATTRTYPE_CDCHANGEPER       EAttrType = 512
	EAttrType_EATTRTYPE_SPCOST            EAttrType = 515
	EAttrType_EATTRTYPE_SPCOSTPER         EAttrType = 516
	EAttrType_EATTRTYPE_ATKDISTANCE       EAttrType = 517
	EAttrType_EATTRTYPE_ATKDISTANCEPER    EAttrType = 518
	EAttrType_EATTRTYPE_CTFIXED           EAttrType = 519
	EAttrType_EATTRTYPE_CTFIXEDPER        EAttrType = 520
	EAttrType_EATTRTYPE_SELLDISCOUNT      EAttrType = 521
	EAttrType_EATTRTYPE_BUYDISCOUNT       EAttrType = 522
	EAttrType_EATTRTYPE_HPCOST            EAttrType = 523
	EAttrType_EATTRTYPE_HPCOSTPER         EAttrType = 524
	EAttrType_EATTRTYPE_DELAYCDCHANGE     EAttrType = 534
	EAttrType_EATTRTYPE_DELAYCDCHANGEPER  EAttrType = 535
	EAttrType_EATTRTYPE_DCHANGE           EAttrType = 536
	EAttrType_EATTRTYPE_DCHANGEPER        EAttrType = 537
	EAttrType_EATTRTYPE_ORIGIN_CTCHANGE   EAttrType = 538
	EAttrType_EATTRTYPE_NOSKILL           EAttrType = 600
	EAttrType_EATTRTYPE_NOACT             EAttrType = 601
	EAttrType_EATTRTYPE_NOMOVE            EAttrType = 602
	EAttrType_EATTRTYPE_NOSTIFF           EAttrType = 603
	EAttrType_EATTRTYPE_NOATTACK          EAttrType = 604
	EAttrType_EATTRTYPE_FEARRUN           EAttrType = 605
	EAttrType_EATTRTYPE_HIDE              EAttrType = 606
	EAttrType_EATTRTYPE_TAUNT             EAttrType = 607
	EAttrType_EATTRTYPE_FREEZE            EAttrType = 608
	EAttrType_EATTRTYPE_NOEFFECTMOVE      EAttrType = 609
	EAttrType_EATTRTYPE_STATEEFFECT       EAttrType = 610
	EAttrType_EATTRTYPE_ATTREFFECT        EAttrType = 611
	EAttrType_EATTRTYPE_NOATTACKED        EAttrType = 612
	EAttrType_EATTRTYPE_ATTRFUNCTION      EAttrType = 613
	EAttrType_EATTRTYPE_ATTREFFECT2       EAttrType = 614
	EAttrType_EATTRTYPE_FUNCLIMIT         EAttrType = 615
	EAttrType_EATTRTYPE_NOMAGICSKILL      EAttrType = 616
	EAttrType_EATTRTYPE_MOVECHANT         EAttrType = 617
	EAttrType_EATTRTYPE_SOLO              EAttrType = 618
	EAttrType_EATTRTYPE_ENSEMBLE          EAttrType = 619
	EAttrType_EATTRTYPE_NO_NORMAL_ATTACK  EAttrType = 620
	EAttrType_EATTRTYPE_NO_PHY_SKILL      EAttrType = 621
	EAttrType_EATTRTYPE_ATTREFFECT3       EAttrType = 622
	EAttrType_EATTRTYPE_ATKATTR           EAttrType = 700
	EAttrType_EATTRTYPE_DEFATTR           EAttrType = 701
	EAttrType_EATTRTYPE_WINDDAMPER        EAttrType = 702
	EAttrType_EATTRTYPE_EARTHDAMPER       EAttrType = 703
	EAttrType_EATTRTYPE_WATERDAMPER       EAttrType = 704
	EAttrType_EATTRTYPE_FIREDAMPER        EAttrType = 705
	EAttrType_EATTRTYPE_NEUTRALDAMPER     EAttrType = 706
	EAttrType_EATTRTYPE_HOLYDAMPER        EAttrType = 707
	EAttrType_EATTRTYPE_SHADOWDAMPER      EAttrType = 708
	EAttrType_EATTRTYPE_GHOSTDAMPER       EAttrType = 709
	EAttrType_EATTRTYPE_UNDEADDAMPER      EAttrType = 710
	EAttrType_EATTRTYPE_POSIONDAMPER      EAttrType = 711
	EAttrType_EATTRTYPE_BEWINDDAMPER      EAttrType = 712
	EAttrType_EATTRTYPE_BEEARTHDAMPER     EAttrType = 713
	EAttrType_EATTRTYPE_BEWATERDAMPER     EAttrType = 714
	EAttrType_EATTRTYPE_BEFIREDAMPER      EAttrType = 715
	EAttrType_EATTRTYPE_BENEUTRALDAMPER   EAttrType = 716
	EAttrType_EATTRTYPE_BEHOLYDAMPER      EAttrType = 717
	EAttrType_EATTRTYPE_BESHADOWDAMPER    EAttrType = 718
	EAttrType_EATTRTYPE_BEGHOSTDAMPER     EAttrType = 719
	EAttrType_EATTRTYPE_BEUNDEADDAMPER    EAttrType = 720
	EAttrType_EATTRTYPE_BEPOSIONDAMPER    EAttrType = 721
	EAttrType_EATTRTYPE_WINDATK           EAttrType = 722
	EAttrType_EATTRTYPE_EARTHATK          EAttrType = 723
	EAttrType_EATTRTYPE_FIREATK           EAttrType = 724
	EAttrType_EATTRTYPE_WATERATK          EAttrType = 725
	EAttrType_EATTRTYPE_NEUTRALATK        EAttrType = 726
	EAttrType_EATTRTYPE_HOLYATK           EAttrType = 727
	EAttrType_EATTRTYPE_DARKATK           EAttrType = 728
	EAttrType_EATTRTYPE_WINDDEF           EAttrType = 729
	EAttrType_EATTRTYPE_EARTHDEF          EAttrType = 730
	EAttrType_EATTRTYPE_FIREDEF           EAttrType = 731
	EAttrType_EATTRTYPE_WATERDEF          EAttrType = 732
	EAttrType_EATTRTYPE_NEUTRALDEF        EAttrType = 733
	EAttrType_EATTRTYPE_HOLYDEF           EAttrType = 734
	EAttrType_EATTRTYPE_DARKDEF           EAttrType = 735
	EAttrType_EATTRTYPE_GHOSTATK          EAttrType = 736
	EAttrType_EATTRTYPE_UNDEADATK         EAttrType = 737
	EAttrType_EATTRTYPE_POISONINGATK      EAttrType = 738
	EAttrType_EATTRTYPE_BRUTEDAMPER       EAttrType = 800
	EAttrType_EATTRTYPE_DEMIHUMANDAMPER   EAttrType = 801
	EAttrType_EATTRTYPE_DEMONDAMPER       EAttrType = 802
	EAttrType_EATTRTYPE_PLANTDAMPER       EAttrType = 803
	EAttrType_EATTRTYPE_DEADLESSDAMPER    EAttrType = 804
	EAttrType_EATTRTYPE_FORMLESSDAMPER    EAttrType = 805
	EAttrType_EATTRTYPE_FISHDAMPER        EAttrType = 806
	EAttrType_EATTRTYPE_ANGLEDAMPER       EAttrType = 807
	EAttrType_EATTRTYPE_INSECTDAMPER      EAttrType = 808
	EAttrType_EATTRTYPE_DRAGONDAMPER      EAttrType = 809
	EAttrType_EATTRTYPE_BRUTERESPER       EAttrType = 810
	EAttrType_EATTRTYPE_DEMIHUMANRESPER   EAttrType = 811
	EAttrType_EATTRTYPE_DEMONRESPER       EAttrType = 812
	EAttrType_EATTRTYPE_PLANTRESPER       EAttrType = 813
	EAttrType_EATTRTYPE_DEADLESSRESPER    EAttrType = 814
	EAttrType_EATTRTYPE_FORMLESSRESPER    EAttrType = 815
	EAttrType_EATTRTYPE_FISHRESPER        EAttrType = 816
	EAttrType_EATTRTYPE_ANGLERESPER       EAttrType = 817
	EAttrType_EATTRTYPE_INSECTRESPER      EAttrType = 818
	EAttrType_EATTRTYPE_DRAGONRESPER      EAttrType = 819
	EAttrType_EATTRTYPE_SMALLDAMPER       EAttrType = 900
	EAttrType_EATTRTYPE_SMALLRESPER       EAttrType = 901
	EAttrType_EATTRTYPE_MIDDAMPER         EAttrType = 902
	EAttrType_EATTRTYPE_MIDRESPER         EAttrType = 903
	EAttrType_EATTRTYPE_BIGDAMPER         EAttrType = 904
	EAttrType_EATTRTYPE_BIGRESPER         EAttrType = 905
	EAttrType_EATTRTYPE_BOSSDAMPER        EAttrType = 906
	EAttrType_EATTRTYPE_BOSSRESPER        EAttrType = 907
	EAttrType_EATTRTYPE_MONSTERDAMPER     EAttrType = 908
	EAttrType_EATTRTYPE_MONSTERRESPER     EAttrType = 909
	EAttrType_EATTRTYPE_NPCDAMPER         EAttrType = 910
	EAttrType_EATTRTYPE_NPCRESPER         EAttrType = 911
	EAttrType_EATTRTYPE_SILENCEATK        EAttrType = 1000
	EAttrType_EATTRTYPE_SILENCEDEF        EAttrType = 1001
	EAttrType_EATTRTYPE_FREEZEATK         EAttrType = 1002
	EAttrType_EATTRTYPE_FREEZEDEF         EAttrType = 1003
	EAttrType_EATTRTYPE_STONEATK          EAttrType = 1004
	EAttrType_EATTRTYPE_STONEDEF          EAttrType = 1005
	EAttrType_EATTRTYPE_STUNATK           EAttrType = 1006
	EAttrType_EATTRTYPE_STUNDEF           EAttrType = 1007
	EAttrType_EATTRTYPE_BLINDATK          EAttrType = 1008
	EAttrType_EATTRTYPE_BLINDDEF          EAttrType = 1009
	EAttrType_EATTRTYPE_POSIONATK         EAttrType = 1010
	EAttrType_EATTRTYPE_POSIONDEF         EAttrType = 1011
	EAttrType_EATTRTYPE_SLOWATK           EAttrType = 1012
	EAttrType_EATTRTYPE_SLOWDEF           EAttrType = 1013
	EAttrType_EATTRTYPE_CHAOSATK          EAttrType = 1014
	EAttrType_EATTRTYPE_CHAOSDEF          EAttrType = 1015
	EAttrType_EATTRTYPE_CURSEATK          EAttrType = 1016
	EAttrType_EATTRTYPE_CURSEDEF          EAttrType = 1017
	EAttrType_EATTRTYPE_STATEATK          EAttrType = 1018
	EAttrType_EATTRTYPE_STATEDEF          EAttrType = 1019
	EAttrType_EATTRTYPE_TRANSFORMID       EAttrType = 1024
	EAttrType_EATTRTYPE_SLEEPATK          EAttrType = 1025
	EAttrType_EATTRTYPE_SLEEPDEF          EAttrType = 1026
	EAttrType_EATTRTYPE_STATETIMEATK      EAttrType = 1027
	EAttrType_EATTRTYPE_STATETIMEDEF      EAttrType = 1028
	EAttrType_EATTRTYPE_BLEEDATK          EAttrType = 1029
	EAttrType_EATTRTYPE_BLEEDDEF          EAttrType = 1030
	EAttrType_EATTRTYPE_DARKSTATEATK      EAttrType = 1031
	EAttrType_EATTRTYPE_DARKSTATEDEF      EAttrType = 1032
	EAttrType_EATTRTYPE_FORCESTATEDEF     EAttrType = 1033
	EAttrType_EATTRTYPE_BEHEALENCPER      EAttrType = 1110
	EAttrType_EATTRTYPE_HEALENCPER        EAttrType = 1111
	EAttrType_EATTRTYPE_DEADSOON          EAttrType = 1208
	EAttrType_EATTRTYPE_SAVE_HP           EAttrType = 1209
	EAttrType_EATTRTYPE_SAVE_SP           EAttrType = 1210
	EAttrType_EATTRTYPE_SLIM_HEIGHT       EAttrType = 1211
	EAttrType_EATTRTYPE_SLIM_WEIGHT       EAttrType = 1212
	EAttrType_EATTRTYPE_BASEEXPPER        EAttrType = 1213
	EAttrType_EATTRTYPE_JOBEXPPER         EAttrType = 1214
	EAttrType_EATTRTYPE_ZENYDROPPER       EAttrType = 1215
	EAttrType_EATTRTYPE_SOUL_LINKER       EAttrType = 1216
	EAttrType_EATTRTYPE_MAX               EAttrType = 1217
)

// Enum value maps for EAttrType.
var (
	EAttrType_name = map[int32]string{
		0:    "EATTRTYPE_MIN",
		100:  "EATTRTYPE_STR",
		101:  "EATTRTYPE_INT",
		102:  "EATTRTYPE_AGI",
		103:  "EATTRTYPE_DEX",
		104:  "EATTRTYPE_VIT",
		105:  "EATTRTYPE_LUK",
		200:  "EATTRTYPE_ATK",
		201:  "EATTRTYPE_ATKPER",
		202:  "EATTRTYPE_DEF",
		203:  "EATTRTYPE_DEFPER",
		204:  "EATTRTYPE_MATK",
		205:  "EATTRTYPE_MATKPER",
		206:  "EATTRTYPE_MDEF",
		207:  "EATTRTYPE_MDEFPER",
		208:  "EATTRTYPE_MAXHP",
		209:  "EATTRTYPE_MAXHPPER",
		210:  "EATTRTYPE_MAXSP",
		211:  "EATTRTYPE_MAXSPPER",
		212:  "EATTRTYPE_HP",
		213:  "EATTRTYPE_SP",
		214:  "EATTRTYPE_HIT",
		215:  "EATTRTYPE_FLEE",
		216:  "EATTRTYPE_CRI",
		217:  "EATTRTYPE_CRIRES",
		218:  "EATTRTYPE_CRIDAMPER",
		219:  "EATTRTYPE_CRIDEFPER",
		220:  "EATTRTYPE_ATKSPD",
		221:  "EATTRTYPE_MOVESPD",
		222:  "EATTRTYPE_CASTSPD",
		223:  "EATTRTYPE_RESTORESPD",
		224:  "EATTRTYPE_SPRESTORESPD",
		225:  "EATTRTYPE_ITEMRESTORESPD",
		226:  "EATTRTYPE_ITEMSPRESTORESPD",
		227:  "EATTRTYPE_RESTORESPDPER",
		228:  "EATTRTYPE_SPRESTORESPDPER",
		229:  "EATTRTYPE_CRIPER",
		230:  "EATTRTYPE_MONMAXHPPER",
		231:  "EATTRTYPE_MONCRIRES",
		232:  "EATTRTYPE_BASEHP",
		300:  "EATTRTYPE_REFINE",
		301:  "EATTRTYPE_MREFINE",
		302:  "EATTRTYPE_MOVESPDPER",
		303:  "EATTRTYPE_EQUIPASPD",
		304:  "EATTRTYPE_SKILLASPD",
		305:  "EATTRTYPE_HITPER",
		306:  "EATTRTYPE_FLEEPER",
		307:  "EATTRTYPE_STRPER",
		308:  "EATTRTYPE_INTPER",
		309:  "EATTRTYPE_AGIPER",
		310:  "EATTRTYPE_DEXPER",
		311:  "EATTRTYPE_VITPER",
		312:  "EATTRTYPE_LUKPER",
		313:  "EATTRTYPE_LIMITASPD",
		400:  "EATTRTYPE_SHOWATK",
		401:  "EATTRTYPE_SHOWDEF",
		402:  "EATTRTYPE_SHOWMATK",
		403:  "EATTRTYPE_SHOWMDEF",
		404:  "EATTRTYPE_SHOWMAXHP",
		405:  "EATTRTYPE_SHOWMAXSP",
		406:  "EATTRTYPE_SHOWHIT",
		407:  "EATTRTYPE_SHOWFLEE",
		408:  "EATTRTYPE_SHOWCRI",
		409:  "EATTRTYPE_SHOWCRIRES",
		410:  "EATTRTYPE_SHOWATKSPD",
		411:  "EATTRTYPE_SHOWMOVESPD",
		412:  "EATTRTYPE_SHOWCASTSPD",
		413:  "EATTRTYPE_SHOWRESTORESPD",
		414:  "EATTRTYPE_DAMREDUC",
		415:  "EATTRTYPE_MDAMREDUC",
		416:  "EATTRTYPE_IGNOREDEF",
		417:  "EATTRTYPE_IGNOREMDEF",
		418:  "EATTRTYPE_DAMREBOUND",
		419:  "EATTRTYPE_MDAMREBOUND",
		420:  "EATTRTYPE_DAMINCREASE",
		421:  "EATTRTYPE_MDAMINCREASE",
		422:  "EATTRTYPE_VAMPIRIC",
		423:  "EATTRTYPE_BEVAMPIRIC",
		424:  "EATTRTYPE_HARMIMMUNE",
		425:  "EATTRTYPE_REALDAMAGE",
		426:  "EATTRTYPE_RANGEDAM",
		427:  "EATTRTYPE_SHOTDAMREDUC",
		428:  "EATTRTYPE_LONGDAMREDUC",
		429:  "EATTRTYPE_LONGMDAMREDUC",
		430:  "EATTRTYPE_IGNOREEQUIPDEF",
		431:  "EATTRTYPE_SHAPEATKPER",
		432:  "EATTRTYPE_DAMSPIKE",
		433:  "EATTRTYPE_MDAMSPIKE",
		434:  "EATTRTYPE_REFINEDAMREDUC",
		435:  "EATTRTYPE_REFINEMDAMREDUC",
		436:  "EATTRTYPE_ENERGYDAMREDUC",
		437:  "EATTRTYPE_STEELDAMREDUC",
		438:  "EATTRTYPE_STEELMDAMREDUC",
		439:  "EATTRTYPE_PROTECTDAMREDUC",
		440:  "EATTRTYPE_PROTECTMDAMREDUC",
		443:  "EATTRTYPE_DRAGONDAMREDUC",
		444:  "EATTRTYPE_DRAGONMDAMREDUC",
		445:  "EATTRTYPE_NORMALREALDAM",
		446:  "EATTRTYPE_NORMALMREALDAM",
		447:  "EATTRTYPE_SKILLREALDAM",
		448:  "EATTRTYPE_SKILLMREALDAM",
		441:  "EATTRTYPE_HIDEDAMREDUC",
		442:  "EATTRTYPE_HIDEMDAMREDUC",
		449:  "EATTRTYPE_NORMALATK",
		450:  "EATTRTYPE_NORMALATKDAM",
		451:  "EATTRTYPE_NORMALATKRES",
		452:  "EATTRTYPE_SKILLDAM",
		453:  "EATTRTYPE_SKILLRES",
		454:  "EATTRTYPE_WINDMDAMREDUC",
		455:  "EATTRTYPE_DEADDAMREDUC",
		456:  "EATTRTYPE_DEADMDAMREDUC",
		457:  "EATTRTYPE_RESULTDAMINC",
		458:  "EATTRTYPE_RESULTDAMRES",
		459:  "EATTRTYPE_MAGICFLEERATE",
		460:  "EATTRTYPE_AUBOBLOCKRATE",
		461:  "EATTRTYPE_WEAPONBLOCKRATE",
		462:  "EATTRTYPE_JINGANGRATE",
		463:  "EATTRTYPE_LONGFLEERATE",
		464:  "EATTRTYPE_BAWANGRATE",
		465:  "EATTRTYPE_MUSTMISSRATE",
		466:  "EATTRTYPE_TWL_PLAYER_REDUC",
		467:  "EATTRTYPE_TWL_MONSTER_REDUC",
		468:  "EATTRTYPE_TWL_MONSTER_DAM",
		469:  "EATTRTYPE_CAR_REAL_DAM",
		470:  "EATTRTYPE_CAR_REAL_DAM_PER",
		471:  "EATTRTYPE_SEA_JUDGE_PER",
		472:  "EATTRTYPE_SEA_REDUC_PER",
		473:  "EATTRTYPE_BOSS_REAL_REDUC",
		474:  "EATTRTYPE_BOSS_REAL_DAM",
		475:  "EATTRTYPE_MOON_REDUC",
		476:  "EATTRTYPE_DRAGON_REDUC",
		477:  "EATTRTYPE_TREE_REDUC",
		478:  "EATTRTYPE_NO_HURT_RATIO",
		479:  "EATTRTYPE_RESULTDAMREDUC",
		509:  "EATTRTYPE_CTCHANGE",
		510:  "EATTRTYPE_CTCHANGEPER",
		511:  "EATTRTYPE_CDCHANGE",
		512:  "EATTRTYPE_CDCHANGEPER",
		515:  "EATTRTYPE_SPCOST",
		516:  "EATTRTYPE_SPCOSTPER",
		517:  "EATTRTYPE_ATKDISTANCE",
		518:  "EATTRTYPE_ATKDISTANCEPER",
		519:  "EATTRTYPE_CTFIXED",
		520:  "EATTRTYPE_CTFIXEDPER",
		521:  "EATTRTYPE_SELLDISCOUNT",
		522:  "EATTRTYPE_BUYDISCOUNT",
		523:  "EATTRTYPE_HPCOST",
		524:  "EATTRTYPE_HPCOSTPER",
		534:  "EATTRTYPE_DELAYCDCHANGE",
		535:  "EATTRTYPE_DELAYCDCHANGEPER",
		536:  "EATTRTYPE_DCHANGE",
		537:  "EATTRTYPE_DCHANGEPER",
		538:  "EATTRTYPE_ORIGIN_CTCHANGE",
		600:  "EATTRTYPE_NOSKILL",
		601:  "EATTRTYPE_NOACT",
		602:  "EATTRTYPE_NOMOVE",
		603:  "EATTRTYPE_NOSTIFF",
		604:  "EATTRTYPE_NOATTACK",
		605:  "EATTRTYPE_FEARRUN",
		606:  "EATTRTYPE_HIDE",
		607:  "EATTRTYPE_TAUNT",
		608:  "EATTRTYPE_FREEZE",
		609:  "EATTRTYPE_NOEFFECTMOVE",
		610:  "EATTRTYPE_STATEEFFECT",
		611:  "EATTRTYPE_ATTREFFECT",
		612:  "EATTRTYPE_NOATTACKED",
		613:  "EATTRTYPE_ATTRFUNCTION",
		614:  "EATTRTYPE_ATTREFFECT2",
		615:  "EATTRTYPE_FUNCLIMIT",
		616:  "EATTRTYPE_NOMAGICSKILL",
		617:  "EATTRTYPE_MOVECHANT",
		618:  "EATTRTYPE_SOLO",
		619:  "EATTRTYPE_ENSEMBLE",
		620:  "EATTRTYPE_NO_NORMAL_ATTACK",
		621:  "EATTRTYPE_NO_PHY_SKILL",
		622:  "EATTRTYPE_ATTREFFECT3",
		700:  "EATTRTYPE_ATKATTR",
		701:  "EATTRTYPE_DEFATTR",
		702:  "EATTRTYPE_WINDDAMPER",
		703:  "EATTRTYPE_EARTHDAMPER",
		704:  "EATTRTYPE_WATERDAMPER",
		705:  "EATTRTYPE_FIREDAMPER",
		706:  "EATTRTYPE_NEUTRALDAMPER",
		707:  "EATTRTYPE_HOLYDAMPER",
		708:  "EATTRTYPE_SHADOWDAMPER",
		709:  "EATTRTYPE_GHOSTDAMPER",
		710:  "EATTRTYPE_UNDEADDAMPER",
		711:  "EATTRTYPE_POSIONDAMPER",
		712:  "EATTRTYPE_BEWINDDAMPER",
		713:  "EATTRTYPE_BEEARTHDAMPER",
		714:  "EATTRTYPE_BEWATERDAMPER",
		715:  "EATTRTYPE_BEFIREDAMPER",
		716:  "EATTRTYPE_BENEUTRALDAMPER",
		717:  "EATTRTYPE_BEHOLYDAMPER",
		718:  "EATTRTYPE_BESHADOWDAMPER",
		719:  "EATTRTYPE_BEGHOSTDAMPER",
		720:  "EATTRTYPE_BEUNDEADDAMPER",
		721:  "EATTRTYPE_BEPOSIONDAMPER",
		722:  "EATTRTYPE_WINDATK",
		723:  "EATTRTYPE_EARTHATK",
		724:  "EATTRTYPE_FIREATK",
		725:  "EATTRTYPE_WATERATK",
		726:  "EATTRTYPE_NEUTRALATK",
		727:  "EATTRTYPE_HOLYATK",
		728:  "EATTRTYPE_DARKATK",
		729:  "EATTRTYPE_WINDDEF",
		730:  "EATTRTYPE_EARTHDEF",
		731:  "EATTRTYPE_FIREDEF",
		732:  "EATTRTYPE_WATERDEF",
		733:  "EATTRTYPE_NEUTRALDEF",
		734:  "EATTRTYPE_HOLYDEF",
		735:  "EATTRTYPE_DARKDEF",
		736:  "EATTRTYPE_GHOSTATK",
		737:  "EATTRTYPE_UNDEADATK",
		738:  "EATTRTYPE_POISONINGATK",
		800:  "EATTRTYPE_BRUTEDAMPER",
		801:  "EATTRTYPE_DEMIHUMANDAMPER",
		802:  "EATTRTYPE_DEMONDAMPER",
		803:  "EATTRTYPE_PLANTDAMPER",
		804:  "EATTRTYPE_DEADLESSDAMPER",
		805:  "EATTRTYPE_FORMLESSDAMPER",
		806:  "EATTRTYPE_FISHDAMPER",
		807:  "EATTRTYPE_ANGLEDAMPER",
		808:  "EATTRTYPE_INSECTDAMPER",
		809:  "EATTRTYPE_DRAGONDAMPER",
		810:  "EATTRTYPE_BRUTERESPER",
		811:  "EATTRTYPE_DEMIHUMANRESPER",
		812:  "EATTRTYPE_DEMONRESPER",
		813:  "EATTRTYPE_PLANTRESPER",
		814:  "EATTRTYPE_DEADLESSRESPER",
		815:  "EATTRTYPE_FORMLESSRESPER",
		816:  "EATTRTYPE_FISHRESPER",
		817:  "EATTRTYPE_ANGLERESPER",
		818:  "EATTRTYPE_INSECTRESPER",
		819:  "EATTRTYPE_DRAGONRESPER",
		900:  "EATTRTYPE_SMALLDAMPER",
		901:  "EATTRTYPE_SMALLRESPER",
		902:  "EATTRTYPE_MIDDAMPER",
		903:  "EATTRTYPE_MIDRESPER",
		904:  "EATTRTYPE_BIGDAMPER",
		905:  "EATTRTYPE_BIGRESPER",
		906:  "EATTRTYPE_BOSSDAMPER",
		907:  "EATTRTYPE_BOSSRESPER",
		908:  "EATTRTYPE_MONSTERDAMPER",
		909:  "EATTRTYPE_MONSTERRESPER",
		910:  "EATTRTYPE_NPCDAMPER",
		911:  "EATTRTYPE_NPCRESPER",
		1000: "EATTRTYPE_SILENCEATK",
		1001: "EATTRTYPE_SILENCEDEF",
		1002: "EATTRTYPE_FREEZEATK",
		1003: "EATTRTYPE_FREEZEDEF",
		1004: "EATTRTYPE_STONEATK",
		1005: "EATTRTYPE_STONEDEF",
		1006: "EATTRTYPE_STUNATK",
		1007: "EATTRTYPE_STUNDEF",
		1008: "EATTRTYPE_BLINDATK",
		1009: "EATTRTYPE_BLINDDEF",
		1010: "EATTRTYPE_POSIONATK",
		1011: "EATTRTYPE_POSIONDEF",
		1012: "EATTRTYPE_SLOWATK",
		1013: "EATTRTYPE_SLOWDEF",
		1014: "EATTRTYPE_CHAOSATK",
		1015: "EATTRTYPE_CHAOSDEF",
		1016: "EATTRTYPE_CURSEATK",
		1017: "EATTRTYPE_CURSEDEF",
		1018: "EATTRTYPE_STATEATK",
		1019: "EATTRTYPE_STATEDEF",
		1024: "EATTRTYPE_TRANSFORMID",
		1025: "EATTRTYPE_SLEEPATK",
		1026: "EATTRTYPE_SLEEPDEF",
		1027: "EATTRTYPE_STATETIMEATK",
		1028: "EATTRTYPE_STATETIMEDEF",
		1029: "EATTRTYPE_BLEEDATK",
		1030: "EATTRTYPE_BLEEDDEF",
		1031: "EATTRTYPE_DARKSTATEATK",
		1032: "EATTRTYPE_DARKSTATEDEF",
		1033: "EATTRTYPE_FORCESTATEDEF",
		1110: "EATTRTYPE_BEHEALENCPER",
		1111: "EATTRTYPE_HEALENCPER",
		1208: "EATTRTYPE_DEADSOON",
		1209: "EATTRTYPE_SAVE_HP",
		1210: "EATTRTYPE_SAVE_SP",
		1211: "EATTRTYPE_SLIM_HEIGHT",
		1212: "EATTRTYPE_SLIM_WEIGHT",
		1213: "EATTRTYPE_BASEEXPPER",
		1214: "EATTRTYPE_JOBEXPPER",
		1215: "EATTRTYPE_ZENYDROPPER",
		1216: "EATTRTYPE_SOUL_LINKER",
		1217: "EATTRTYPE_MAX",
	}
	EAttrType_value = map[string]int32{
		"EATTRTYPE_MIN":               0,
		"EATTRTYPE_STR":               100,
		"EATTRTYPE_INT":               101,
		"EATTRTYPE_AGI":               102,
		"EATTRTYPE_DEX":               103,
		"EATTRTYPE_VIT":               104,
		"EATTRTYPE_LUK":               105,
		"EATTRTYPE_ATK":               200,
		"EATTRTYPE_ATKPER":            201,
		"EATTRTYPE_DEF":               202,
		"EATTRTYPE_DEFPER":            203,
		"EATTRTYPE_MATK":              204,
		"EATTRTYPE_MATKPER":           205,
		"EATTRTYPE_MDEF":              206,
		"EATTRTYPE_MDEFPER":           207,
		"EATTRTYPE_MAXHP":             208,
		"EATTRTYPE_MAXHPPER":          209,
		"EATTRTYPE_MAXSP":             210,
		"EATTRTYPE_MAXSPPER":          211,
		"EATTRTYPE_HP":                212,
		"EATTRTYPE_SP":                213,
		"EATTRTYPE_HIT":               214,
		"EATTRTYPE_FLEE":              215,
		"EATTRTYPE_CRI":               216,
		"EATTRTYPE_CRIRES":            217,
		"EATTRTYPE_CRIDAMPER":         218,
		"EATTRTYPE_CRIDEFPER":         219,
		"EATTRTYPE_ATKSPD":            220,
		"EATTRTYPE_MOVESPD":           221,
		"EATTRTYPE_CASTSPD":           222,
		"EATTRTYPE_RESTORESPD":        223,
		"EATTRTYPE_SPRESTORESPD":      224,
		"EATTRTYPE_ITEMRESTORESPD":    225,
		"EATTRTYPE_ITEMSPRESTORESPD":  226,
		"EATTRTYPE_RESTORESPDPER":     227,
		"EATTRTYPE_SPRESTORESPDPER":   228,
		"EATTRTYPE_CRIPER":            229,
		"EATTRTYPE_MONMAXHPPER":       230,
		"EATTRTYPE_MONCRIRES":         231,
		"EATTRTYPE_BASEHP":            232,
		"EATTRTYPE_REFINE":            300,
		"EATTRTYPE_MREFINE":           301,
		"EATTRTYPE_MOVESPDPER":        302,
		"EATTRTYPE_EQUIPASPD":         303,
		"EATTRTYPE_SKILLASPD":         304,
		"EATTRTYPE_HITPER":            305,
		"EATTRTYPE_FLEEPER":           306,
		"EATTRTYPE_STRPER":            307,
		"EATTRTYPE_INTPER":            308,
		"EATTRTYPE_AGIPER":            309,
		"EATTRTYPE_DEXPER":            310,
		"EATTRTYPE_VITPER":            311,
		"EATTRTYPE_LUKPER":            312,
		"EATTRTYPE_LIMITASPD":         313,
		"EATTRTYPE_SHOWATK":           400,
		"EATTRTYPE_SHOWDEF":           401,
		"EATTRTYPE_SHOWMATK":          402,
		"EATTRTYPE_SHOWMDEF":          403,
		"EATTRTYPE_SHOWMAXHP":         404,
		"EATTRTYPE_SHOWMAXSP":         405,
		"EATTRTYPE_SHOWHIT":           406,
		"EATTRTYPE_SHOWFLEE":          407,
		"EATTRTYPE_SHOWCRI":           408,
		"EATTRTYPE_SHOWCRIRES":        409,
		"EATTRTYPE_SHOWATKSPD":        410,
		"EATTRTYPE_SHOWMOVESPD":       411,
		"EATTRTYPE_SHOWCASTSPD":       412,
		"EATTRTYPE_SHOWRESTORESPD":    413,
		"EATTRTYPE_DAMREDUC":          414,
		"EATTRTYPE_MDAMREDUC":         415,
		"EATTRTYPE_IGNOREDEF":         416,
		"EATTRTYPE_IGNOREMDEF":        417,
		"EATTRTYPE_DAMREBOUND":        418,
		"EATTRTYPE_MDAMREBOUND":       419,
		"EATTRTYPE_DAMINCREASE":       420,
		"EATTRTYPE_MDAMINCREASE":      421,
		"EATTRTYPE_VAMPIRIC":          422,
		"EATTRTYPE_BEVAMPIRIC":        423,
		"EATTRTYPE_HARMIMMUNE":        424,
		"EATTRTYPE_REALDAMAGE":        425,
		"EATTRTYPE_RANGEDAM":          426,
		"EATTRTYPE_SHOTDAMREDUC":      427,
		"EATTRTYPE_LONGDAMREDUC":      428,
		"EATTRTYPE_LONGMDAMREDUC":     429,
		"EATTRTYPE_IGNOREEQUIPDEF":    430,
		"EATTRTYPE_SHAPEATKPER":       431,
		"EATTRTYPE_DAMSPIKE":          432,
		"EATTRTYPE_MDAMSPIKE":         433,
		"EATTRTYPE_REFINEDAMREDUC":    434,
		"EATTRTYPE_REFINEMDAMREDUC":   435,
		"EATTRTYPE_ENERGYDAMREDUC":    436,
		"EATTRTYPE_STEELDAMREDUC":     437,
		"EATTRTYPE_STEELMDAMREDUC":    438,
		"EATTRTYPE_PROTECTDAMREDUC":   439,
		"EATTRTYPE_PROTECTMDAMREDUC":  440,
		"EATTRTYPE_DRAGONDAMREDUC":    443,
		"EATTRTYPE_DRAGONMDAMREDUC":   444,
		"EATTRTYPE_NORMALREALDAM":     445,
		"EATTRTYPE_NORMALMREALDAM":    446,
		"EATTRTYPE_SKILLREALDAM":      447,
		"EATTRTYPE_SKILLMREALDAM":     448,
		"EATTRTYPE_HIDEDAMREDUC":      441,
		"EATTRTYPE_HIDEMDAMREDUC":     442,
		"EATTRTYPE_NORMALATK":         449,
		"EATTRTYPE_NORMALATKDAM":      450,
		"EATTRTYPE_NORMALATKRES":      451,
		"EATTRTYPE_SKILLDAM":          452,
		"EATTRTYPE_SKILLRES":          453,
		"EATTRTYPE_WINDMDAMREDUC":     454,
		"EATTRTYPE_DEADDAMREDUC":      455,
		"EATTRTYPE_DEADMDAMREDUC":     456,
		"EATTRTYPE_RESULTDAMINC":      457,
		"EATTRTYPE_RESULTDAMRES":      458,
		"EATTRTYPE_MAGICFLEERATE":     459,
		"EATTRTYPE_AUBOBLOCKRATE":     460,
		"EATTRTYPE_WEAPONBLOCKRATE":   461,
		"EATTRTYPE_JINGANGRATE":       462,
		"EATTRTYPE_LONGFLEERATE":      463,
		"EATTRTYPE_BAWANGRATE":        464,
		"EATTRTYPE_MUSTMISSRATE":      465,
		"EATTRTYPE_TWL_PLAYER_REDUC":  466,
		"EATTRTYPE_TWL_MONSTER_REDUC": 467,
		"EATTRTYPE_TWL_MONSTER_DAM":   468,
		"EATTRTYPE_CAR_REAL_DAM":      469,
		"EATTRTYPE_CAR_REAL_DAM_PER":  470,
		"EATTRTYPE_SEA_JUDGE_PER":     471,
		"EATTRTYPE_SEA_REDUC_PER":     472,
		"EATTRTYPE_BOSS_REAL_REDUC":   473,
		"EATTRTYPE_BOSS_REAL_DAM":     474,
		"EATTRTYPE_MOON_REDUC":        475,
		"EATTRTYPE_DRAGON_REDUC":      476,
		"EATTRTYPE_TREE_REDUC":        477,
		"EATTRTYPE_NO_HURT_RATIO":     478,
		"EATTRTYPE_RESULTDAMREDUC":    479,
		"EATTRTYPE_CTCHANGE":          509,
		"EATTRTYPE_CTCHANGEPER":       510,
		"EATTRTYPE_CDCHANGE":          511,
		"EATTRTYPE_CDCHANGEPER":       512,
		"EATTRTYPE_SPCOST":            515,
		"EATTRTYPE_SPCOSTPER":         516,
		"EATTRTYPE_ATKDISTANCE":       517,
		"EATTRTYPE_ATKDISTANCEPER":    518,
		"EATTRTYPE_CTFIXED":           519,
		"EATTRTYPE_CTFIXEDPER":        520,
		"EATTRTYPE_SELLDISCOUNT":      521,
		"EATTRTYPE_BUYDISCOUNT":       522,
		"EATTRTYPE_HPCOST":            523,
		"EATTRTYPE_HPCOSTPER":         524,
		"EATTRTYPE_DELAYCDCHANGE":     534,
		"EATTRTYPE_DELAYCDCHANGEPER":  535,
		"EATTRTYPE_DCHANGE":           536,
		"EATTRTYPE_DCHANGEPER":        537,
		"EATTRTYPE_ORIGIN_CTCHANGE":   538,
		"EATTRTYPE_NOSKILL":           600,
		"EATTRTYPE_NOACT":             601,
		"EATTRTYPE_NOMOVE":            602,
		"EATTRTYPE_NOSTIFF":           603,
		"EATTRTYPE_NOATTACK":          604,
		"EATTRTYPE_FEARRUN":           605,
		"EATTRTYPE_HIDE":              606,
		"EATTRTYPE_TAUNT":             607,
		"EATTRTYPE_FREEZE":            608,
		"EATTRTYPE_NOEFFECTMOVE":      609,
		"EATTRTYPE_STATEEFFECT":       610,
		"EATTRTYPE_ATTREFFECT":        611,
		"EATTRTYPE_NOATTACKED":        612,
		"EATTRTYPE_ATTRFUNCTION":      613,
		"EATTRTYPE_ATTREFFECT2":       614,
		"EATTRTYPE_FUNCLIMIT":         615,
		"EATTRTYPE_NOMAGICSKILL":      616,
		"EATTRTYPE_MOVECHANT":         617,
		"EATTRTYPE_SOLO":              618,
		"EATTRTYPE_ENSEMBLE":          619,
		"EATTRTYPE_NO_NORMAL_ATTACK":  620,
		"EATTRTYPE_NO_PHY_SKILL":      621,
		"EATTRTYPE_ATTREFFECT3":       622,
		"EATTRTYPE_ATKATTR":           700,
		"EATTRTYPE_DEFATTR":           701,
		"EATTRTYPE_WINDDAMPER":        702,
		"EATTRTYPE_EARTHDAMPER":       703,
		"EATTRTYPE_WATERDAMPER":       704,
		"EATTRTYPE_FIREDAMPER":        705,
		"EATTRTYPE_NEUTRALDAMPER":     706,
		"EATTRTYPE_HOLYDAMPER":        707,
		"EATTRTYPE_SHADOWDAMPER":      708,
		"EATTRTYPE_GHOSTDAMPER":       709,
		"EATTRTYPE_UNDEADDAMPER":      710,
		"EATTRTYPE_POSIONDAMPER":      711,
		"EATTRTYPE_BEWINDDAMPER":      712,
		"EATTRTYPE_BEEARTHDAMPER":     713,
		"EATTRTYPE_BEWATERDAMPER":     714,
		"EATTRTYPE_BEFIREDAMPER":      715,
		"EATTRTYPE_BENEUTRALDAMPER":   716,
		"EATTRTYPE_BEHOLYDAMPER":      717,
		"EATTRTYPE_BESHADOWDAMPER":    718,
		"EATTRTYPE_BEGHOSTDAMPER":     719,
		"EATTRTYPE_BEUNDEADDAMPER":    720,
		"EATTRTYPE_BEPOSIONDAMPER":    721,
		"EATTRTYPE_WINDATK":           722,
		"EATTRTYPE_EARTHATK":          723,
		"EATTRTYPE_FIREATK":           724,
		"EATTRTYPE_WATERATK":          725,
		"EATTRTYPE_NEUTRALATK":        726,
		"EATTRTYPE_HOLYATK":           727,
		"EATTRTYPE_DARKATK":           728,
		"EATTRTYPE_WINDDEF":           729,
		"EATTRTYPE_EARTHDEF":          730,
		"EATTRTYPE_FIREDEF":           731,
		"EATTRTYPE_WATERDEF":          732,
		"EATTRTYPE_NEUTRALDEF":        733,
		"EATTRTYPE_HOLYDEF":           734,
		"EATTRTYPE_DARKDEF":           735,
		"EATTRTYPE_GHOSTATK":          736,
		"EATTRTYPE_UNDEADATK":         737,
		"EATTRTYPE_POISONINGATK":      738,
		"EATTRTYPE_BRUTEDAMPER":       800,
		"EATTRTYPE_DEMIHUMANDAMPER":   801,
		"EATTRTYPE_DEMONDAMPER":       802,
		"EATTRTYPE_PLANTDAMPER":       803,
		"EATTRTYPE_DEADLESSDAMPER":    804,
		"EATTRTYPE_FORMLESSDAMPER":    805,
		"EATTRTYPE_FISHDAMPER":        806,
		"EATTRTYPE_ANGLEDAMPER":       807,
		"EATTRTYPE_INSECTDAMPER":      808,
		"EATTRTYPE_DRAGONDAMPER":      809,
		"EATTRTYPE_BRUTERESPER":       810,
		"EATTRTYPE_DEMIHUMANRESPER":   811,
		"EATTRTYPE_DEMONRESPER":       812,
		"EATTRTYPE_PLANTRESPER":       813,
		"EATTRTYPE_DEADLESSRESPER":    814,
		"EATTRTYPE_FORMLESSRESPER":    815,
		"EATTRTYPE_FISHRESPER":        816,
		"EATTRTYPE_ANGLERESPER":       817,
		"EATTRTYPE_INSECTRESPER":      818,
		"EATTRTYPE_DRAGONRESPER":      819,
		"EATTRTYPE_SMALLDAMPER":       900,
		"EATTRTYPE_SMALLRESPER":       901,
		"EATTRTYPE_MIDDAMPER":         902,
		"EATTRTYPE_MIDRESPER":         903,
		"EATTRTYPE_BIGDAMPER":         904,
		"EATTRTYPE_BIGRESPER":         905,
		"EATTRTYPE_BOSSDAMPER":        906,
		"EATTRTYPE_BOSSRESPER":        907,
		"EATTRTYPE_MONSTERDAMPER":     908,
		"EATTRTYPE_MONSTERRESPER":     909,
		"EATTRTYPE_NPCDAMPER":         910,
		"EATTRTYPE_NPCRESPER":         911,
		"EATTRTYPE_SILENCEATK":        1000,
		"EATTRTYPE_SILENCEDEF":        1001,
		"EATTRTYPE_FREEZEATK":         1002,
		"EATTRTYPE_FREEZEDEF":         1003,
		"EATTRTYPE_STONEATK":          1004,
		"EATTRTYPE_STONEDEF":          1005,
		"EATTRTYPE_STUNATK":           1006,
		"EATTRTYPE_STUNDEF":           1007,
		"EATTRTYPE_BLINDATK":          1008,
		"EATTRTYPE_BLINDDEF":          1009,
		"EATTRTYPE_POSIONATK":         1010,
		"EATTRTYPE_POSIONDEF":         1011,
		"EATTRTYPE_SLOWATK":           1012,
		"EATTRTYPE_SLOWDEF":           1013,
		"EATTRTYPE_CHAOSATK":          1014,
		"EATTRTYPE_CHAOSDEF":          1015,
		"EATTRTYPE_CURSEATK":          1016,
		"EATTRTYPE_CURSEDEF":          1017,
		"EATTRTYPE_STATEATK":          1018,
		"EATTRTYPE_STATEDEF":          1019,
		"EATTRTYPE_TRANSFORMID":       1024,
		"EATTRTYPE_SLEEPATK":          1025,
		"EATTRTYPE_SLEEPDEF":          1026,
		"EATTRTYPE_STATETIMEATK":      1027,
		"EATTRTYPE_STATETIMEDEF":      1028,
		"EATTRTYPE_BLEEDATK":          1029,
		"EATTRTYPE_BLEEDDEF":          1030,
		"EATTRTYPE_DARKSTATEATK":      1031,
		"EATTRTYPE_DARKSTATEDEF":      1032,
		"EATTRTYPE_FORCESTATEDEF":     1033,
		"EATTRTYPE_BEHEALENCPER":      1110,
		"EATTRTYPE_HEALENCPER":        1111,
		"EATTRTYPE_DEADSOON":          1208,
		"EATTRTYPE_SAVE_HP":           1209,
		"EATTRTYPE_SAVE_SP":           1210,
		"EATTRTYPE_SLIM_HEIGHT":       1211,
		"EATTRTYPE_SLIM_WEIGHT":       1212,
		"EATTRTYPE_BASEEXPPER":        1213,
		"EATTRTYPE_JOBEXPPER":         1214,
		"EATTRTYPE_ZENYDROPPER":       1215,
		"EATTRTYPE_SOUL_LINKER":       1216,
		"EATTRTYPE_MAX":               1217,
	}
)

func (x EAttrType) Enum() *EAttrType {
	p := new(EAttrType)
	*p = x
	return p
}

func (x EAttrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAttrType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[4].Descriptor()
}

func (EAttrType) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[4]
}

func (x EAttrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAttrType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAttrType(num)
	return nil
}

// Deprecated: Use EAttrType.Descriptor instead.
func (EAttrType) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{4}
}

type EGender int32

const (
	EGender_EGENDER_MIN    EGender = 0
	EGender_EGENDER_MALE   EGender = 1
	EGender_EGENDER_FEMALE EGender = 2
	EGender_EGENDER_MAX    EGender = 3
)

// Enum value maps for EGender.
var (
	EGender_name = map[int32]string{
		0: "EGENDER_MIN",
		1: "EGENDER_MALE",
		2: "EGENDER_FEMALE",
		3: "EGENDER_MAX",
	}
	EGender_value = map[string]int32{
		"EGENDER_MIN":    0,
		"EGENDER_MALE":   1,
		"EGENDER_FEMALE": 2,
		"EGENDER_MAX":    3,
	}
)

func (x EGender) Enum() *EGender {
	p := new(EGender)
	*p = x
	return p
}

func (x EGender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGender) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[5].Descriptor()
}

func (EGender) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[5]
}

func (x EGender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGender) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGender(num)
	return nil
}

// Deprecated: Use EGender.Descriptor instead.
func (EGender) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{5}
}

type ECharRace int32

const (
	ECharRace_ECHARRACE_MIN   ECharRace = 0
	ECharRace_ECHARRACE_HUMAN ECharRace = 1
	ECharRace_ECHARRACE_CAT   ECharRace = 2
	ECharRace_ECHARRACE_MAX   ECharRace = 3
)

// Enum value maps for ECharRace.
var (
	ECharRace_name = map[int32]string{
		0: "ECHARRACE_MIN",
		1: "ECHARRACE_HUMAN",
		2: "ECHARRACE_CAT",
		3: "ECHARRACE_MAX",
	}
	ECharRace_value = map[string]int32{
		"ECHARRACE_MIN":   0,
		"ECHARRACE_HUMAN": 1,
		"ECHARRACE_CAT":   2,
		"ECHARRACE_MAX":   3,
	}
)

func (x ECharRace) Enum() *ECharRace {
	p := new(ECharRace)
	*p = x
	return p
}

func (x ECharRace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECharRace) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[6].Descriptor()
}

func (ECharRace) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[6]
}

func (x ECharRace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECharRace) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECharRace(num)
	return nil
}

// Deprecated: Use ECharRace.Descriptor instead.
func (ECharRace) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{6}
}

type EProfession int32

const (
	EProfession_EPROFESSION_MIN             EProfession = 0
	EProfession_EPROFESSION_NOVICE          EProfession = 1
	EProfession_EPROFESSION_WARRIOR         EProfession = 11
	EProfession_EPROFESSION_KNIGHT          EProfession = 12
	EProfession_EPROFESSION_LORDKNIGHT      EProfession = 13
	EProfession_EPROFESSION_RUNEKNIGHT      EProfession = 14
	EProfession_EPROFESSION_RUNEMASTER      EProfession = 15
	EProfession_EPROFESSION_CRUSADER        EProfession = 72
	EProfession_EPROFESSION_PALADIN         EProfession = 73
	EProfession_EPROFESSION_ROYALGUARD      EProfession = 74
	EProfession_EPROFESSION_DIVINEAVENGER   EProfession = 75
	EProfession_EPROFESSION_MAGICIAN        EProfession = 21
	EProfession_EPROFESSION_WIZARD          EProfession = 22
	EProfession_EPROFESSION_HIGHWIZARD      EProfession = 23
	EProfession_EPROFESSION_WARLOCK         EProfession = 24
	EProfession_EPROFESSION_ARCANEMASTER    EProfession = 25
	EProfession_EPROFESSION_SAGE            EProfession = 82
	EProfession_EPROFESSION_PROFESSOR       EProfession = 83
	EProfession_EPROFESSION_SORCERER        EProfession = 84
	EProfession_EPROFESSION_CHRONOMANCER    EProfession = 85
	EProfession_EPROFESSION_THIEF           EProfession = 31
	EProfession_EPROFESSION_ASSASSIN        EProfession = 32
	EProfession_EPROFESSION_ASSASSINCROSS   EProfession = 33
	EProfession_EPROFESSION_GUILLOTINECROSS EProfession = 34
	EProfession_EPROFESSION_SOULBLADECROSS  EProfession = 35
	EProfession_EPROFESSION_ROGUE           EProfession = 92
	EProfession_EPROFESSION_STALKER         EProfession = 93
	EProfession_EPROFESSION_SHADOWCHASER    EProfession = 94
	EProfession_EPROFESSION_PHANTOMDANCER   EProfession = 95
	EProfession_EPROFESSION_ARCHER          EProfession = 41
	EProfession_EPROFESSION_HUNTER          EProfession = 42
	EProfession_EPROFESSION_SNIPER          EProfession = 43
	EProfession_EPROFESSION_RANGER          EProfession = 44
	EProfession_EPROFESSION_STELLARHUNTER   EProfession = 45
	EProfession_EPROFESSION_BARD            EProfession = 102
	EProfession_EPROFESSION_CLOWN           EProfession = 103
	EProfession_EPROFESSION_MINSTREL        EProfession = 104
	EProfession_EPROFESSION_SOLARTROUVERE   EProfession = 105
	EProfession_EPROFESSION_DANCER          EProfession = 112
	EProfession_EPROFESSION_GYPSY           EProfession = 113
	EProfession_EPROFESSION_WANDERER        EProfession = 114
	EProfession_EPROFESSION_LUNADANSEUSE    EProfession = 115
	EProfession_EPROFESSION_ACOLYTE         EProfession = 51
	EProfession_EPROFESSION_PRIEST          EProfession = 52
	EProfession_EPROFESSION_HIGHPRIEST      EProfession = 53
	EProfession_EPROFESSION_ARCHBISHOP      EProfession = 54
	EProfession_EPROFESSION_SAINT           EProfession = 55
	EProfession_EPROFESSION_MONK            EProfession = 122
	EProfession_EPROFESSION_CHAMPION        EProfession = 123
	EProfession_EPROFESSION_SHURA           EProfession = 124
	EProfession_EPROFESSION_DRAGONFIST      EProfession = 125
	EProfession_EPROFESSION_MERCHANT        EProfession = 61
	EProfession_EPROFESSION_BLACKSMITH      EProfession = 62
	EProfession_EPROFESSION_WHITESMITH      EProfession = 63
	EProfession_EPROFESSION_MECHANIC        EProfession = 64
	EProfession_EPROFESSION_LIGHTBRINGER    EProfession = 65
	EProfession_EPROFESSION_ALCHEMIST       EProfession = 132
	EProfession_EPROFESSION_CREATOR         EProfession = 133
	EProfession_EPROFESSION_GENETIC         EProfession = 134
	EProfession_EPROFESSION_BEGETTER        EProfession = 135
	EProfession_EPROFESSION_SUPERNOVICE     EProfession = 143
	EProfession_EPROFESSION_ULTIMANOVICE    EProfession = 144
	EProfession_EPROFESSION_NOVICEGUARDIAN  EProfession = 145
	EProfession_EPROFESSION_NOVICECAT       EProfession = 150
	EProfession_EPROFESSION_WARLOCKCAT      EProfession = 151
	EProfession_EPROFESSION_NECROMANCER     EProfession = 152
	EProfession_EPROFESSION_SUMMONER        EProfession = 153
	EProfession_EPROFESSION_MESMER          EProfession = 154
	EProfession_EPROFESSION_SPIRITWHISPERER EProfession = 155
	EProfession_EPROFESSION_NINJA           EProfession = 163
	EProfession_EPROFESSION_SHADOWWOLF      EProfession = 164
	EProfession_EPROFESSION_YAMATA          EProfession = 165
	EProfession_EPROFESSION_MARKSMAN        EProfession = 173
	EProfession_EPROFESSION_REBEL           EProfession = 174
	EProfession_EPROFESSION_TYRANT          EProfession = 175
	EProfession_EPROFESSION_SOULLINKER      EProfession = 183
	EProfession_EPROFESSION_SOULREAPER      EProfession = 184
	EProfession_EPROFESSION_TWINDEMON       EProfession = 185
	EProfession_EPROFESSION_TAWKWON         EProfession = 193
	EProfession_EPROFESSION_STARGLADIATOR   EProfession = 194
	EProfession_EPROFESSION_APOCALYPSE      EProfession = 195
	EProfession_EPROFESSION_FIRE            EProfession = 203
	EProfession_EPROFESSION_WIDEFIRE        EProfession = 204
	EProfession_EPROFESSION_INFERNO         EProfession = 205
	EProfession_EPROFESSION_SAVIOR          EProfession = 213
	EProfession_EPROFESSION_DRAGONGOD       EProfession = 214
	EProfession_EPROFESSION_DRAGONKING      EProfession = 215
	EProfession_EPROFESSION_MAGICSPEAKER    EProfession = 223
	EProfession_EPROFESSION_CHAOS           EProfession = 224
	EProfession_EPROFESSION_SLAYERS         EProfession = 225
	EProfession_EPROFESSION_HERO_DARNATOSE  EProfession = 605
	EProfession_EPROFESSION_HERO_NIDHOGG    EProfession = 615
	EProfession_EPROFESSION_HERO_SAITAMA    EProfession = 625
	EProfession_EPROFESSION_HERO_GENOS      EProfession = 635
	EProfession_EPROFESSION_HERO_MAX        EProfession = 900
	EProfession_EPROFESSION_MANUAL          EProfession = 500
	EProfession_EPROFESSION_PET             EProfession = 999
	EProfession_EPROFESSION_MAX             EProfession = 1000
)

// Enum value maps for EProfession.
var (
	EProfession_name = map[int32]string{
		0:    "EPROFESSION_MIN",
		1:    "EPROFESSION_NOVICE",
		11:   "EPROFESSION_WARRIOR",
		12:   "EPROFESSION_KNIGHT",
		13:   "EPROFESSION_LORDKNIGHT",
		14:   "EPROFESSION_RUNEKNIGHT",
		15:   "EPROFESSION_RUNEMASTER",
		72:   "EPROFESSION_CRUSADER",
		73:   "EPROFESSION_PALADIN",
		74:   "EPROFESSION_ROYALGUARD",
		75:   "EPROFESSION_DIVINEAVENGER",
		21:   "EPROFESSION_MAGICIAN",
		22:   "EPROFESSION_WIZARD",
		23:   "EPROFESSION_HIGHWIZARD",
		24:   "EPROFESSION_WARLOCK",
		25:   "EPROFESSION_ARCANEMASTER",
		82:   "EPROFESSION_SAGE",
		83:   "EPROFESSION_PROFESSOR",
		84:   "EPROFESSION_SORCERER",
		85:   "EPROFESSION_CHRONOMANCER",
		31:   "EPROFESSION_THIEF",
		32:   "EPROFESSION_ASSASSIN",
		33:   "EPROFESSION_ASSASSINCROSS",
		34:   "EPROFESSION_GUILLOTINECROSS",
		35:   "EPROFESSION_SOULBLADECROSS",
		92:   "EPROFESSION_ROGUE",
		93:   "EPROFESSION_STALKER",
		94:   "EPROFESSION_SHADOWCHASER",
		95:   "EPROFESSION_PHANTOMDANCER",
		41:   "EPROFESSION_ARCHER",
		42:   "EPROFESSION_HUNTER",
		43:   "EPROFESSION_SNIPER",
		44:   "EPROFESSION_RANGER",
		45:   "EPROFESSION_STELLARHUNTER",
		102:  "EPROFESSION_BARD",
		103:  "EPROFESSION_CLOWN",
		104:  "EPROFESSION_MINSTREL",
		105:  "EPROFESSION_SOLARTROUVERE",
		112:  "EPROFESSION_DANCER",
		113:  "EPROFESSION_GYPSY",
		114:  "EPROFESSION_WANDERER",
		115:  "EPROFESSION_LUNADANSEUSE",
		51:   "EPROFESSION_ACOLYTE",
		52:   "EPROFESSION_PRIEST",
		53:   "EPROFESSION_HIGHPRIEST",
		54:   "EPROFESSION_ARCHBISHOP",
		55:   "EPROFESSION_SAINT",
		122:  "EPROFESSION_MONK",
		123:  "EPROFESSION_CHAMPION",
		124:  "EPROFESSION_SHURA",
		125:  "EPROFESSION_DRAGONFIST",
		61:   "EPROFESSION_MERCHANT",
		62:   "EPROFESSION_BLACKSMITH",
		63:   "EPROFESSION_WHITESMITH",
		64:   "EPROFESSION_MECHANIC",
		65:   "EPROFESSION_LIGHTBRINGER",
		132:  "EPROFESSION_ALCHEMIST",
		133:  "EPROFESSION_CREATOR",
		134:  "EPROFESSION_GENETIC",
		135:  "EPROFESSION_BEGETTER",
		143:  "EPROFESSION_SUPERNOVICE",
		144:  "EPROFESSION_ULTIMANOVICE",
		145:  "EPROFESSION_NOVICEGUARDIAN",
		150:  "EPROFESSION_NOVICECAT",
		151:  "EPROFESSION_WARLOCKCAT",
		152:  "EPROFESSION_NECROMANCER",
		153:  "EPROFESSION_SUMMONER",
		154:  "EPROFESSION_MESMER",
		155:  "EPROFESSION_SPIRITWHISPERER",
		163:  "EPROFESSION_NINJA",
		164:  "EPROFESSION_SHADOWWOLF",
		165:  "EPROFESSION_YAMATA",
		173:  "EPROFESSION_MARKSMAN",
		174:  "EPROFESSION_REBEL",
		175:  "EPROFESSION_TYRANT",
		183:  "EPROFESSION_SOULLINKER",
		184:  "EPROFESSION_SOULREAPER",
		185:  "EPROFESSION_TWINDEMON",
		193:  "EPROFESSION_TAWKWON",
		194:  "EPROFESSION_STARGLADIATOR",
		195:  "EPROFESSION_APOCALYPSE",
		203:  "EPROFESSION_FIRE",
		204:  "EPROFESSION_WIDEFIRE",
		205:  "EPROFESSION_INFERNO",
		213:  "EPROFESSION_SAVIOR",
		214:  "EPROFESSION_DRAGONGOD",
		215:  "EPROFESSION_DRAGONKING",
		223:  "EPROFESSION_MAGICSPEAKER",
		224:  "EPROFESSION_CHAOS",
		225:  "EPROFESSION_SLAYERS",
		605:  "EPROFESSION_HERO_DARNATOSE",
		615:  "EPROFESSION_HERO_NIDHOGG",
		625:  "EPROFESSION_HERO_SAITAMA",
		635:  "EPROFESSION_HERO_GENOS",
		900:  "EPROFESSION_HERO_MAX",
		500:  "EPROFESSION_MANUAL",
		999:  "EPROFESSION_PET",
		1000: "EPROFESSION_MAX",
	}
	EProfession_value = map[string]int32{
		"EPROFESSION_MIN":             0,
		"EPROFESSION_NOVICE":          1,
		"EPROFESSION_WARRIOR":         11,
		"EPROFESSION_KNIGHT":          12,
		"EPROFESSION_LORDKNIGHT":      13,
		"EPROFESSION_RUNEKNIGHT":      14,
		"EPROFESSION_RUNEMASTER":      15,
		"EPROFESSION_CRUSADER":        72,
		"EPROFESSION_PALADIN":         73,
		"EPROFESSION_ROYALGUARD":      74,
		"EPROFESSION_DIVINEAVENGER":   75,
		"EPROFESSION_MAGICIAN":        21,
		"EPROFESSION_WIZARD":          22,
		"EPROFESSION_HIGHWIZARD":      23,
		"EPROFESSION_WARLOCK":         24,
		"EPROFESSION_ARCANEMASTER":    25,
		"EPROFESSION_SAGE":            82,
		"EPROFESSION_PROFESSOR":       83,
		"EPROFESSION_SORCERER":        84,
		"EPROFESSION_CHRONOMANCER":    85,
		"EPROFESSION_THIEF":           31,
		"EPROFESSION_ASSASSIN":        32,
		"EPROFESSION_ASSASSINCROSS":   33,
		"EPROFESSION_GUILLOTINECROSS": 34,
		"EPROFESSION_SOULBLADECROSS":  35,
		"EPROFESSION_ROGUE":           92,
		"EPROFESSION_STALKER":         93,
		"EPROFESSION_SHADOWCHASER":    94,
		"EPROFESSION_PHANTOMDANCER":   95,
		"EPROFESSION_ARCHER":          41,
		"EPROFESSION_HUNTER":          42,
		"EPROFESSION_SNIPER":          43,
		"EPROFESSION_RANGER":          44,
		"EPROFESSION_STELLARHUNTER":   45,
		"EPROFESSION_BARD":            102,
		"EPROFESSION_CLOWN":           103,
		"EPROFESSION_MINSTREL":        104,
		"EPROFESSION_SOLARTROUVERE":   105,
		"EPROFESSION_DANCER":          112,
		"EPROFESSION_GYPSY":           113,
		"EPROFESSION_WANDERER":        114,
		"EPROFESSION_LUNADANSEUSE":    115,
		"EPROFESSION_ACOLYTE":         51,
		"EPROFESSION_PRIEST":          52,
		"EPROFESSION_HIGHPRIEST":      53,
		"EPROFESSION_ARCHBISHOP":      54,
		"EPROFESSION_SAINT":           55,
		"EPROFESSION_MONK":            122,
		"EPROFESSION_CHAMPION":        123,
		"EPROFESSION_SHURA":           124,
		"EPROFESSION_DRAGONFIST":      125,
		"EPROFESSION_MERCHANT":        61,
		"EPROFESSION_BLACKSMITH":      62,
		"EPROFESSION_WHITESMITH":      63,
		"EPROFESSION_MECHANIC":        64,
		"EPROFESSION_LIGHTBRINGER":    65,
		"EPROFESSION_ALCHEMIST":       132,
		"EPROFESSION_CREATOR":         133,
		"EPROFESSION_GENETIC":         134,
		"EPROFESSION_BEGETTER":        135,
		"EPROFESSION_SUPERNOVICE":     143,
		"EPROFESSION_ULTIMANOVICE":    144,
		"EPROFESSION_NOVICEGUARDIAN":  145,
		"EPROFESSION_NOVICECAT":       150,
		"EPROFESSION_WARLOCKCAT":      151,
		"EPROFESSION_NECROMANCER":     152,
		"EPROFESSION_SUMMONER":        153,
		"EPROFESSION_MESMER":          154,
		"EPROFESSION_SPIRITWHISPERER": 155,
		"EPROFESSION_NINJA":           163,
		"EPROFESSION_SHADOWWOLF":      164,
		"EPROFESSION_YAMATA":          165,
		"EPROFESSION_MARKSMAN":        173,
		"EPROFESSION_REBEL":           174,
		"EPROFESSION_TYRANT":          175,
		"EPROFESSION_SOULLINKER":      183,
		"EPROFESSION_SOULREAPER":      184,
		"EPROFESSION_TWINDEMON":       185,
		"EPROFESSION_TAWKWON":         193,
		"EPROFESSION_STARGLADIATOR":   194,
		"EPROFESSION_APOCALYPSE":      195,
		"EPROFESSION_FIRE":            203,
		"EPROFESSION_WIDEFIRE":        204,
		"EPROFESSION_INFERNO":         205,
		"EPROFESSION_SAVIOR":          213,
		"EPROFESSION_DRAGONGOD":       214,
		"EPROFESSION_DRAGONKING":      215,
		"EPROFESSION_MAGICSPEAKER":    223,
		"EPROFESSION_CHAOS":           224,
		"EPROFESSION_SLAYERS":         225,
		"EPROFESSION_HERO_DARNATOSE":  605,
		"EPROFESSION_HERO_NIDHOGG":    615,
		"EPROFESSION_HERO_SAITAMA":    625,
		"EPROFESSION_HERO_GENOS":      635,
		"EPROFESSION_HERO_MAX":        900,
		"EPROFESSION_MANUAL":          500,
		"EPROFESSION_PET":             999,
		"EPROFESSION_MAX":             1000,
	}
)

func (x EProfession) Enum() *EProfession {
	p := new(EProfession)
	*p = x
	return p
}

func (x EProfession) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProfession) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[7].Descriptor()
}

func (EProfession) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[7]
}

func (x EProfession) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EProfession) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EProfession(num)
	return nil
}

// Deprecated: Use EProfession.Descriptor instead.
func (EProfession) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{7}
}

type EProfessionGrade int32

const (
	EProfessionGrade_EPROFESSIONGRADE_MIN   EProfessionGrade = 0
	EProfessionGrade_EPROFESSIONGRADE_ONE   EProfessionGrade = 1
	EProfessionGrade_EPROFESSIONGRADE_TWO   EProfessionGrade = 2
	EProfessionGrade_EPROFESSIONGRADE_THREE EProfessionGrade = 3
	EProfessionGrade_EPROFESSIONGRADE_FOUR  EProfessionGrade = 4
	EProfessionGrade_EPROFESSIONGRADE_FIVE  EProfessionGrade = 5
	EProfessionGrade_EPROFESSIONGRADE_MAX   EProfessionGrade = 6
)

// Enum value maps for EProfessionGrade.
var (
	EProfessionGrade_name = map[int32]string{
		0: "EPROFESSIONGRADE_MIN",
		1: "EPROFESSIONGRADE_ONE",
		2: "EPROFESSIONGRADE_TWO",
		3: "EPROFESSIONGRADE_THREE",
		4: "EPROFESSIONGRADE_FOUR",
		5: "EPROFESSIONGRADE_FIVE",
		6: "EPROFESSIONGRADE_MAX",
	}
	EProfessionGrade_value = map[string]int32{
		"EPROFESSIONGRADE_MIN":   0,
		"EPROFESSIONGRADE_ONE":   1,
		"EPROFESSIONGRADE_TWO":   2,
		"EPROFESSIONGRADE_THREE": 3,
		"EPROFESSIONGRADE_FOUR":  4,
		"EPROFESSIONGRADE_FIVE":  5,
		"EPROFESSIONGRADE_MAX":   6,
	}
)

func (x EProfessionGrade) Enum() *EProfessionGrade {
	p := new(EProfessionGrade)
	*p = x
	return p
}

func (x EProfessionGrade) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProfessionGrade) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[8].Descriptor()
}

func (EProfessionGrade) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[8]
}

func (x EProfessionGrade) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EProfessionGrade) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EProfessionGrade(num)
	return nil
}

// Deprecated: Use EProfessionGrade.Descriptor instead.
func (EProfessionGrade) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{8}
}

type EQualityType int32

const (
	EQualityType_EQUALITYTYPE_MIN      EQualityType = 0
	EQualityType_EQUALITYTYPE_WHITE    EQualityType = 1
	EQualityType_EQUALITYTYPE_GREEN    EQualityType = 2
	EQualityType_EQUALITYTYPE_BLUE     EQualityType = 3
	EQualityType_EQUALITYTYPE_PURPLE   EQualityType = 4
	EQualityType_EQUALITYTYPE_ORANGE   EQualityType = 5
	EQualityType_EQUALITYTYPE_GOLD     EQualityType = 6
	EQualityType_EQUALITYTYPE_DARKGOLD EQualityType = 7
	EQualityType_EQUALITYTYPE_MAX      EQualityType = 8
)

// Enum value maps for EQualityType.
var (
	EQualityType_name = map[int32]string{
		0: "EQUALITYTYPE_MIN",
		1: "EQUALITYTYPE_WHITE",
		2: "EQUALITYTYPE_GREEN",
		3: "EQUALITYTYPE_BLUE",
		4: "EQUALITYTYPE_PURPLE",
		5: "EQUALITYTYPE_ORANGE",
		6: "EQUALITYTYPE_GOLD",
		7: "EQUALITYTYPE_DARKGOLD",
		8: "EQUALITYTYPE_MAX",
	}
	EQualityType_value = map[string]int32{
		"EQUALITYTYPE_MIN":      0,
		"EQUALITYTYPE_WHITE":    1,
		"EQUALITYTYPE_GREEN":    2,
		"EQUALITYTYPE_BLUE":     3,
		"EQUALITYTYPE_PURPLE":   4,
		"EQUALITYTYPE_ORANGE":   5,
		"EQUALITYTYPE_GOLD":     6,
		"EQUALITYTYPE_DARKGOLD": 7,
		"EQUALITYTYPE_MAX":      8,
	}
)

func (x EQualityType) Enum() *EQualityType {
	p := new(EQualityType)
	*p = x
	return p
}

func (x EQualityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQualityType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[9].Descriptor()
}

func (EQualityType) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[9]
}

func (x EQualityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EQualityType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EQualityType(num)
	return nil
}

// Deprecated: Use EQualityType.Descriptor instead.
func (EQualityType) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{9}
}

type EMoneyType int32

const (
	EMoneyType_EMONEYTYPE_MIN                 EMoneyType = 0
	EMoneyType_EMONEYTYPE_PERCEPT_ABILITY     EMoneyType = 79
	EMoneyType_EMONEYTYPE_NOVICE_TARGET_POINT EMoneyType = 123
	EMoneyType_EMONEYTYPE_DIAMOND             EMoneyType = 132
	EMoneyType_EMONEYTYPE_SILVER              EMoneyType = 131
	EMoneyType_EMONEYTYPE_GOLD                EMoneyType = 130
	EMoneyType_EMONEYTYPE_BATTLEPASS          EMoneyType = 133
	EMoneyType_EMONEYTYPE_GARDEN              EMoneyType = 140
	EMoneyType_EMONEYTYPE_MANUALSKILL         EMoneyType = 143
	EMoneyType_EMONEYTYPE_CONTRIBUTE          EMoneyType = 145
	EMoneyType_EMONEYTYPE_GUILDASSET          EMoneyType = 146
	EMoneyType_EMONEYTYPE_FRIENDSHIP          EMoneyType = 147
	EMoneyType_EMONEYTYPE_PVPCOIN             EMoneyType = 141
	EMoneyType_EMONEYTYPE_LOTTERY             EMoneyType = 154
	EMoneyType_EMONEYTYPE_GUILDHONOR          EMoneyType = 156
	EMoneyType_EMONEYTYPE_FREE_LOTTERY        EMoneyType = 157
	EMoneyType_EMONEYTYPE_DEADCOIN            EMoneyType = 169
	EMoneyType_EMONEYTYPE_SAND                EMoneyType = 129
	EMoneyType_EMONEYTYPE_NIGHTMARE           EMoneyType = 134
	EMoneyType_EMONEYTYPE_BIND_CONTRIBUTE     EMoneyType = 161
	EMoneyType_EMONEYTYPE_BOKI_EXP            EMoneyType = 552
	EMoneyType_EMONEYTYPE_LUCKY_DICE          EMoneyType = 4204
	EMoneyType_EMONEYTYPE_HAPPYVALUE          EMoneyType = 4206
	EMoneyType_EMONEYTYPE_MAX                 EMoneyType = 4205
)

// Enum value maps for EMoneyType.
var (
	EMoneyType_name = map[int32]string{
		0:    "EMONEYTYPE_MIN",
		79:   "EMONEYTYPE_PERCEPT_ABILITY",
		123:  "EMONEYTYPE_NOVICE_TARGET_POINT",
		132:  "EMONEYTYPE_DIAMOND",
		131:  "EMONEYTYPE_SILVER",
		130:  "EMONEYTYPE_GOLD",
		133:  "EMONEYTYPE_BATTLEPASS",
		140:  "EMONEYTYPE_GARDEN",
		143:  "EMONEYTYPE_MANUALSKILL",
		145:  "EMONEYTYPE_CONTRIBUTE",
		146:  "EMONEYTYPE_GUILDASSET",
		147:  "EMONEYTYPE_FRIENDSHIP",
		141:  "EMONEYTYPE_PVPCOIN",
		154:  "EMONEYTYPE_LOTTERY",
		156:  "EMONEYTYPE_GUILDHONOR",
		157:  "EMONEYTYPE_FREE_LOTTERY",
		169:  "EMONEYTYPE_DEADCOIN",
		129:  "EMONEYTYPE_SAND",
		134:  "EMONEYTYPE_NIGHTMARE",
		161:  "EMONEYTYPE_BIND_CONTRIBUTE",
		552:  "EMONEYTYPE_BOKI_EXP",
		4204: "EMONEYTYPE_LUCKY_DICE",
		4206: "EMONEYTYPE_HAPPYVALUE",
		4205: "EMONEYTYPE_MAX",
	}
	EMoneyType_value = map[string]int32{
		"EMONEYTYPE_MIN":                 0,
		"EMONEYTYPE_PERCEPT_ABILITY":     79,
		"EMONEYTYPE_NOVICE_TARGET_POINT": 123,
		"EMONEYTYPE_DIAMOND":             132,
		"EMONEYTYPE_SILVER":              131,
		"EMONEYTYPE_GOLD":                130,
		"EMONEYTYPE_BATTLEPASS":          133,
		"EMONEYTYPE_GARDEN":              140,
		"EMONEYTYPE_MANUALSKILL":         143,
		"EMONEYTYPE_CONTRIBUTE":          145,
		"EMONEYTYPE_GUILDASSET":          146,
		"EMONEYTYPE_FRIENDSHIP":          147,
		"EMONEYTYPE_PVPCOIN":             141,
		"EMONEYTYPE_LOTTERY":             154,
		"EMONEYTYPE_GUILDHONOR":          156,
		"EMONEYTYPE_FREE_LOTTERY":        157,
		"EMONEYTYPE_DEADCOIN":            169,
		"EMONEYTYPE_SAND":                129,
		"EMONEYTYPE_NIGHTMARE":           134,
		"EMONEYTYPE_BIND_CONTRIBUTE":     161,
		"EMONEYTYPE_BOKI_EXP":            552,
		"EMONEYTYPE_LUCKY_DICE":          4204,
		"EMONEYTYPE_HAPPYVALUE":          4206,
		"EMONEYTYPE_MAX":                 4205,
	}
)

func (x EMoneyType) Enum() *EMoneyType {
	p := new(EMoneyType)
	*p = x
	return p
}

func (x EMoneyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMoneyType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[10].Descriptor()
}

func (EMoneyType) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[10]
}

func (x EMoneyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMoneyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMoneyType(num)
	return nil
}

// Deprecated: Use EMoneyType.Descriptor instead.
func (EMoneyType) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{10}
}

type ECreatureStatus int32

const (
	ECreatureStatus_ECREATURESTATUS_MIN        ECreatureStatus = 0
	ECreatureStatus_ECREATURESTATUS_LIVE       ECreatureStatus = 1
	ECreatureStatus_ECREATURESTATUS_SIT        ECreatureStatus = 2
	ECreatureStatus_ECREATURESTATUS_DEAD       ECreatureStatus = 3
	ECreatureStatus_ECREATURESTATUS_PHOTO      ECreatureStatus = 4
	ECreatureStatus_ECREATURESTATUS_FAKEDEAD   ECreatureStatus = 5
	ECreatureStatus_ECREATURESTATUS_REMOVE     ECreatureStatus = 6
	ECreatureStatus_ECREATURESTATUS_SELF_PHOTO ECreatureStatus = 7
	ECreatureStatus_ECREATURESTATUS_IDLE       ECreatureStatus = 8
	ECreatureStatus_ECREATURESTATUS_CLEAR      ECreatureStatus = 9
	ECreatureStatus_ECREATURESTATUS_RELIVE     ECreatureStatus = 10
	ECreatureStatus_ECREATURESTATUS_LEAVE      ECreatureStatus = 11
	ECreatureStatus_ECREATURESTATUS_EVO        ECreatureStatus = 12
	ECreatureStatus_ECREATURESTATUS_SUICIDE    ECreatureStatus = 13
	ECreatureStatus_ECREATURESTATUS_INRELIVE   ECreatureStatus = 14
	ECreatureStatus_ECREATURESTATUS_REFRESH    ECreatureStatus = 15
	ECreatureStatus_ECREATURESTATUS_MAX        ECreatureStatus = 16
)

// Enum value maps for ECreatureStatus.
var (
	ECreatureStatus_name = map[int32]string{
		0:  "ECREATURESTATUS_MIN",
		1:  "ECREATURESTATUS_LIVE",
		2:  "ECREATURESTATUS_SIT",
		3:  "ECREATURESTATUS_DEAD",
		4:  "ECREATURESTATUS_PHOTO",
		5:  "ECREATURESTATUS_FAKEDEAD",
		6:  "ECREATURESTATUS_REMOVE",
		7:  "ECREATURESTATUS_SELF_PHOTO",
		8:  "ECREATURESTATUS_IDLE",
		9:  "ECREATURESTATUS_CLEAR",
		10: "ECREATURESTATUS_RELIVE",
		11: "ECREATURESTATUS_LEAVE",
		12: "ECREATURESTATUS_EVO",
		13: "ECREATURESTATUS_SUICIDE",
		14: "ECREATURESTATUS_INRELIVE",
		15: "ECREATURESTATUS_REFRESH",
		16: "ECREATURESTATUS_MAX",
	}
	ECreatureStatus_value = map[string]int32{
		"ECREATURESTATUS_MIN":        0,
		"ECREATURESTATUS_LIVE":       1,
		"ECREATURESTATUS_SIT":        2,
		"ECREATURESTATUS_DEAD":       3,
		"ECREATURESTATUS_PHOTO":      4,
		"ECREATURESTATUS_FAKEDEAD":   5,
		"ECREATURESTATUS_REMOVE":     6,
		"ECREATURESTATUS_SELF_PHOTO": 7,
		"ECREATURESTATUS_IDLE":       8,
		"ECREATURESTATUS_CLEAR":      9,
		"ECREATURESTATUS_RELIVE":     10,
		"ECREATURESTATUS_LEAVE":      11,
		"ECREATURESTATUS_EVO":        12,
		"ECREATURESTATUS_SUICIDE":    13,
		"ECREATURESTATUS_INRELIVE":   14,
		"ECREATURESTATUS_REFRESH":    15,
		"ECREATURESTATUS_MAX":        16,
	}
)

func (x ECreatureStatus) Enum() *ECreatureStatus {
	p := new(ECreatureStatus)
	*p = x
	return p
}

func (x ECreatureStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECreatureStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[11].Descriptor()
}

func (ECreatureStatus) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[11]
}

func (x ECreatureStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECreatureStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECreatureStatus(num)
	return nil
}

// Deprecated: Use ECreatureStatus.Descriptor instead.
func (ECreatureStatus) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{11}
}

type ESource int32

const (
	ESource_ESOURCE_MIN                       ESource = 0
	ESource_ESOURCE_NORMAL                    ESource = 1
	ESource_ESOURCE_PACKAGE                   ESource = 2
	ESource_ESOURCE_QUEST                     ESource = 3
	ESource_ESOURCE_EQUIP                     ESource = 4
	ESource_ESOURCE_CARD                      ESource = 5
	ESource_ESOURCE_ACTSKILL                  ESource = 6
	ESource_ESOURCE_COMPOSE                   ESource = 9
	ESource_ESOURCE_REWARD                    ESource = 10
	ESource_ESOURCE_MONSTERKILL               ESource = 11
	ESource_ESOURCE_GM                        ESource = 12
	ESource_ESOURCE_FUBEN                     ESource = 13
	ESource_ESOURCE_CHARGE                    ESource = 14
	ESource_ESOURCE_LABORATORY                ESource = 15
	ESource_ESOURCE_MAPTRANS                  ESource = 16
	ESource_ESOURCE_HAIR                      ESource = 17
	ESource_ESOURCE_STRENGTH                  ESource = 18
	ESource_ESOURCE_SHOP                      ESource = 19
	ESource_ESOURCE_SELL                      ESource = 21
	ESource_ESOURCE_PICKUP                    ESource = 22
	ESource_ESOURCE_OFFLINE                   ESource = 23
	ESource_ESOURCE_LVUP                      ESource = 24
	ESource_ESOURCE_TRADE                     ESource = 25
	ESource_ESOURCE_TRANSFER                  ESource = 26
	ESource_ESOURCE_SEAL                      ESource = 27
	ESource_ESOURCE_GUILDPRAY                 ESource = 28
	ESource_ESOURCE_ENCHANT                   ESource = 29
	ESource_ESOURCE_GUILDCREATE               ESource = 30
	ESource_ESOURCE_GUILDLEVELUP              ESource = 31
	ESource_ESOURCE_RELIVE                    ESource = 32
	ESource_ESOURCE_REPAIR                    ESource = 33
	ESource_ESOURCE_STORE                     ESource = 34
	ESource_ESOURCE_MUSICBOX                  ESource = 35
	ESource_ESOURCE_TOWER                     ESource = 36
	ESource_ESOURCE_DOJOFIRST                 ESource = 37
	ESource_ESOURCE_DOJOHELP                  ESource = 38
	ESource_ESOURCE_MANUAL                    ESource = 39
	ESource_ESOURCE_ROB                       ESource = 41
	ESource_ESOURCE_WANTEDQUEST               ESource = 42
	ESource_ESOURCE_DONATE                    ESource = 43
	ESource_ESOURCE_MONSTERAI                 ESource = 44
	ESource_ESOURCE_TREASURE                  ESource = 45
	ESource_ESOURCE_FERRISWHEEL               ESource = 46
	ESource_ESOURCE_CRAZYGHOST                ESource = 47
	ESource_ESOURCE_JUMPZONE                  ESource = 48
	ESource_ESOURCE_OPERATE                   ESource = 49
	ESource_ESOURCE_DOG                       ESource = 50
	ESource_ESOURCE_GIFT                      ESource = 51
	ESource_ESOURCE_QA                        ESource = 52
	ESource_ESOURCE_DECOMPOSE                 ESource = 53
	ESource_ESOURCE_HELP                      ESource = 54
	ESource_ESOURCE_OPENSTORE                 ESource = 55
	ESource_ESOURCE_PUTSTORE                  ESource = 56
	ESource_ESOURCE_OFFSTORE                  ESource = 57
	ESource_ESOURCE_EXCHANGE                  ESource = 58
	ESource_ESOURCE_UNSTRENGTH                ESource = 59
	ESource_ESOURCE_DAILYQUEST                ESource = 60
	ESource_ESOURCE_USEITEM                   ESource = 61
	ESource_ESOURCE_RESTORE                   ESource = 62
	ESource_ESOURCE_TEMPPACK                  ESource = 63
	ESource_ESOURCE_TRADE_PUBLICITY           ESource = 64
	ESource_ESOURCE_TRADE_PUBLICITY_FAILRET   ESource = 65
	ESource_ESOURCE_KAPULA                    ESource = 66
	ESource_ESOURCE_MONEYCAT                  ESource = 67
	ESource_ESOURCE_VALENTINE                 ESource = 68
	ESource_ESOURCE_PERSON_PUTSTORE           ESource = 69
	ESource_ESOURCE_PERSON_OFFSTORE           ESource = 70
	ESource_ESOURCE_PUBLIC_PUTSTORE           ESource = 71
	ESource_ESOURCE_PUBLIC_OFFSTORE           ESource = 72
	ESource_ESOURCE_PUT_TEMPPACK              ESource = 73
	ESource_ESOURCE_OFF_TEMPPACK              ESource = 74
	ESource_ESOURCE_CAT                       ESource = 75
	ESource_ESOURCE_GIVE                      ESource = 76
	ESource_ESOURCE_UPGRADE                   ESource = 77
	ESource_ESOURCE_PUT_BARROW                ESource = 78
	ESource_ESOURCE_OFF_BARROW                ESource = 79
	ESource_ESOURCE_OPEN_GUILD_GATE           ESource = 80
	ESource_ESOURCE_UNLOCK_GUILD_GATE         ESource = 81
	ESource_ESOURCE_GUILDRAID                 ESource = 82
	ESource_ESOURCE_MONTHCARD                 ESource = 83
	ESource_ESOURCE_ASTROLABE_ACTIVATE        ESource = 84
	ESource_ESOURCE_ASTROLABE_RESET           ESource = 85
	ESource_ESOURCE_EXCHANGECARD              ESource = 86
	ESource_ESOURCE_COOK_FOOD                 ESource = 87
	ESource_ESOURCE_EAT_FOOD                  ESource = 88
	ESource_ESOURCE_PHOTO_SCENERY             ESource = 89
	ESource_ESOURCE_PHOTO_SELF                ESource = 90
	ESource_ESOURCE_LOTTERY                   ESource = 91
	ESource_ESOURCE_LOTTERY_RECOVERY          ESource = 92
	ESource_ESOURCE_PET                       ESource = 93
	ESource_ESOURCE_PET_ADVENTURE             ESource = 94
	ESource_ESOURCE_MAIL                      ESource = 95
	ESource_ESOURCE_BUFF                      ESource = 96
	ESource_ESOURCE_PVP                       ESource = 97
	ESource_ESOURCE_AUCTION_SIGNUP            ESource = 98
	ESource_ESOURCE_AUCTION_OFFERPRICE        ESource = 99
	ESource_ESOURCE_AUCTION                   ESource = 100
	ESource_ESOURCE_GANEN_FUDAI               ESource = 102
	ESource_ESOURCE_TUTOR_TASK                ESource = 103
	ESource_ESOURCE_TUTOR_GROW                ESource = 104
	ESource_ESOURCE_TUTOR_GRADUATION          ESource = 105
	ESource_ESOURCE_USER_RENAME               ESource = 106
	ESource_ESOURCE_GUILD_RENAME              ESource = 107
	ESource_ESOURCE_MAT_COMPOSE               ESource = 108
	ESource_ESOURCE_HIGH_REFINE               ESource = 109
	ESource_ESOURCE_LOTTERY_HEAD              ESource = 111
	ESource_ESOURCE_LOTTERY_EQUIP             ESource = 112
	ESource_ESOURCE_LOTTERY_CARD              ESource = 113
	ESource_ESOURCE_LOTTERY_HEAD_OLD          ESource = 114
	ESource_ESOURCE_PVP_POLLY                 ESource = 115
	ESource_ESOURCE_ACTIVITY_EVENT            ESource = 116
	ESource_ESOURCE_GUILD_SUBMIT_MATERIAL     ESource = 117
	ESource_ESOURCE_GUILD_BUILDING_WELFARE    ESource = 118
	ESource_ESOURCE_GUILD_CHALLENGE           ESource = 119
	ESource_ESOURCE_LOTTERY_CATLITTERBOX      ESource = 121
	ESource_ESOURCE_PHOTO_GUILD               ESource = 122
	ESource_ESOURCE_LOTTERY_MAGIC             ESource = 123
	ESource_ESOURCE_RECALL                    ESource = 124
	ESource_ESOURCE_ARTIFACT_PRODUCE          ESource = 125
	ESource_ESOURCE_ARTIFACT_DISTRIBUTE       ESource = 126
	ESource_ESOURCE_LOTTERY_GIVE              ESource = 127
	ESource_ESOURCE_RESERVE_WEDDING           ESource = 128
	ESource_ESOURCE_WEDDING_BUY_PACKAGE       ESource = 129
	ESource_ESOURCE_WEDDING_BUY_RING          ESource = 130
	ESource_ESOURCE_WEDDINGDRESS_GIVE         ESource = 131
	ESource_ESOURCE_WEDDING_PHOTO             ESource = 132
	ESource_ESOURCE_GUILD_TREASURE            ESource = 133
	ESource_ESOURCE_GVG                       ESource = 134
	ESource_ESOURCE_WEDDING                   ESource = 135
	ESource_ESOURCE_CARD_DECOMPOSE            ESource = 136
	ESource_ESOURCE_PET_WORK                  ESource = 137
	ESource_ESOURCE_SERVANT                   ESource = 138
	ESource_ESOURCE_KFC_ACTIVITY              ESource = 139
	ESource_ESOURCE_PROFESSION_BUY            ESource = 140
	ESource_ESOURCE_USER_RECORD               ESource = 141
	ESource_ESOURCE_PROFESSION_CHANGE         ESource = 142
	ESource_ESOURCE_FASHION_GEDNER            ESource = 143
	ESource_ESOURCE_QUICKSTORE                ESource = 144
	ESource_ESOURCE_ENCHANT_TRANS             ESource = 145
	ESource_ESOURCE_PUZZLE                    ESource = 146
	ESource_ESOURCE_EXCHANGE_SHOP             ESource = 147
	ESource_ESOURCE_DRESSUP_STAGE             ESource = 148
	ESource_ESOURCE_DEAD                      ESource = 149
	ESource_ESOURCE_QUICKSTORE_RETURN         ESource = 150
	ESource_ESOURCE_EQUIP_COMPOSE             ESource = 151
	ESource_ESOURCE_CHAT                      ESource = 152
	ESource_ESOURCE_GUILD_LEVEL_UP            ESource = 153
	ESource_ESOURCE_GUILD_CHANGE_ZONE         ESource = 154
	ESource_ESOURCE_GUILD_OPEN_BUILDING       ESource = 155
	ESource_ESOURCE_GUILD_SHOP                ESource = 156
	ESource_ESOURCE_GUILD_MAINTENANCE         ESource = 157
	ESource_ESOURCE_LOTTERY_MAGIC_2           ESource = 158
	ESource_ESOURCE_EXCHANGE_EXTRA            ESource = 159
	ESource_ESOURCE_ACTIVEPUZZLE              ESource = 160
	ESource_ESOURCE_EXPRAID                   ESource = 161
	ESource_ESOURCE_CHARGERET                 ESource = 162
	ESource_ESOURCE_PRESTIGE_GIVE             ESource = 163
	ESource_ESOURCE_LOTTERY_EXTRA_BONUS       ESource = 164
	ESource_ESOURCE_RIDE_LOTTERY              ESource = 165
	ESource_ESOURCE_HOME                      ESource = 166
	ESource_ESOURCE_GEM_SKILL_APPRAISAL       ESource = 167
	ESource_ESOURCE_GEM_SKILL_COMPOSE_SAME    ESource = 168
	ESource_ESOURCE_GEM_SKILL_COMPOSE_QUALITY ESource = 169
	ESource_ESOURCE_GEM_ATTR_COMPOSE          ESource = 170
	ESource_ESOURCE_GEM_ATTR_UPGRADE          ESource = 171
	ESource_ESOURCE_GEM_ATTR_MOUNT            ESource = 172
	ESource_ESOURCE_GEM_ATTR_UNMOUNT          ESource = 173
	ESource_ESOURCE_RAIDDEADBOSS              ESource = 174
	ESource_ESOURCE_GEM_SKILL_CARVE           ESource = 175
	ESource_ESOURCE_LOTTERY_MAGIC_3           ESource = 176
	ESource_ESOURCE_GEM_SKILL_SMELT           ESource = 177
	ESource_ESOURCE_MOROCC_SUBMIT_MATERIAL    ESource = 178
	ESource_ESOURCE_MVP_BATTLE                ESource = 179
	ESource_ESOURCE_HEADWEARRAID              ESource = 180
	ESource_ESOURCE_BATTLEPASS                ESource = 181
	ESource_ESOURCE_FOURTH_SKILL_LEVELUP      ESource = 182
	ESource_ESOURCE_FOURTH_SKILL_RESET        ESource = 183
	ESource_ESOURCE_ROGUELIKE                 ESource = 184
	ESource_ESOURCE_FAST_TRANS                ESource = 185
	ESource_ESOURCE_FOURTH_SKILL_POINT        ESource = 186
	ESource_ESOURCE_TECHTREE                  ESource = 187
	ESource_ESOURCE_BUILD_CONTRIBUTE          ESource = 188
	ESource_ESOURCE_BUILD_TOY                 ESource = 189
	ESource_ESOURCE_MAP_SECRET_GET            ESource = 190
	ESource_ESOURCE_EATBEING                  ESource = 191
	ESource_ESOURCE_EXTRACTION                ESource = 192
	ESource_ESOURCE_EXTRACTION_GRID_BUY       ESource = 193
	ESource_ESOURCE_EQUIP_OFF                 ESource = 194
	ESource_ESOURCE_FUNCITEM                  ESource = 195
	ESource_ESOURCE_BUILD_OPERATE             ESource = 196
	ESource_ESOURCE_NIGHTMARE_ATTR            ESource = 197
	ESource_ESOURCE_ITEMCLEAR                 ESource = 198
	ESource_ESOURCE_ACTHITPOLLY               ESource = 199
	ESource_ESOURCE_TRANSFERFIGHT             ESource = 200
	ESource_ESOURCE_MANUAL_SKILL              ESource = 201
	ESource_ESOURCE_PAYSIGN                   ESource = 204
	ESource_ESOURCE_TWELVE_PVP                ESource = 205
	ESource_ESOURCE_ROLLCOIN                  ESource = 207
	ESource_ESOURCE_BIFROST_CONTRIBUTE        ESource = 208
	ESource_ESOURCE_RAID_EINHERJAR            ESource = 209
	ESource_ESOURCE_ACTMINIRO                 ESource = 211
	ESource_ESOURCE_GROUPON                   ESource = 212
	ESource_ESOURCE_LOTTERY_DOLL              ESource = 213
	ESource_ESOURCE_ENDLESSPRIVATE            ESource = 214
	ESource_ESOURCE_NOVICE_TARGET             ESource = 215
	ESource_ESOURCE_GOAL                      ESource = 216
	ESource_ESOURCE_BOKI                      ESource = 221
	ESource_ESOURCE_RAIDPUZZLE                ESource = 222
	ESource_ESOURCE_ACTTIMELIMIT_SHOP         ESource = 223
	ESource_ESOURCE_NOVICE_NOTEBOOK           ESource = 224
	ESource_ESOURCE_ARTIFACT_EXCHANGE         ESource = 217
	ESource_ESOURCE_ARTIFACT_DECOMPOSE        ESource = 218
	ESource_ESOURCE_ARTIFACT_COMPOSE          ESource = 219
	ESource_ESOURCE_ARTIFACT_REMOULD          ESource = 220
	ESource_ESOURCE_ARTIFACT_APPRAISAL        ESource = 225
	ESource_ESOURCE_LOTTERY_MIX1              ESource = 226
	ESource_ESOURCE_LOTTERY_MIX2              ESource = 227
	ESource_ESOURCE_LOTTERY_MIX3              ESource = 228
	ESource_ESOURCE_EQUIP_POWER               ESource = 229
	ESource_ESOURCE_ENCHANT_TRANSFER          ESource = 230
	ESource_ESOURCE_REFINE_TRANSFER           ESource = 231
	ESource_ESOURCE_SPECIAL_ADDSKILL          ESource = 233
	ESource_ESOURCE_ASTROLABE_TICKET          ESource = 232
	ESource_ESOURCE_RAND_SELECT               ESource = 234
	ESource_ESOURCE_ACTIVITY_DONATE           ESource = 235
	ESource_ESOURCE_EYE                       ESource = 236
	ESource_ESOURCE_QUEST_COMPLETE            ESource = 237
	ESource_ESOURCE_MANOR_BUILD_LVUP          ESource = 238
	ESource_ESOURCE_DISNEY_MICKEY_ON          ESource = 239
	ESource_ESOURCE_DISNEY_MICKEY_REWARD      ESource = 240
	ESource_ESOURCE_MANOR_DISPATCH            ESource = 241
	ESource_ESOURCE_MANOR_LOTTERY             ESource = 242
	ESource_ESOURCE_THANATOS                  ESource = 243
	ESource_ESOURCE_PVECARD                   ESource = 244
	ESource_ESOURCE_INTERACT_NPC              ESource = 245
	ESource_ESOURCE_SUPERGVG                  ESource = 246
	ESource_ESOURCE_FAVORITE_GIVE             ESource = 247
	ESource_ESOURCE_FAVORITE_REWARD           ESource = 248
	ESource_ESOURCE_CAPRA                     ESource = 249
	ESource_ESOURCE_NPC_HEADWEARE_EXCHANGE    ESource = 250
	ESource_ESOURCE_FRIENDREWARD              ESource = 251
	ESource_ESOURCE_MANOR_FORGE               ESource = 252
	ESource_ESOURCE_OFF_HOMEWAREHOUSE         ESource = 253
	ESource_ESOURCE_GIFT_BUY                  ESource = 254
	ESource_ESOURCE_CAPRA_COMPOSE             ESource = 255
	ESource_ESOURCE_GLOBALDONATIONACTIVITY    ESource = 256
	ESource_ESOURCE_EQUIP_RECOVERY            ESource = 257
	ESource_ESOURCE_COMODO_TEAM_RAID          ESource = 258
	ESource_ESOURCE_USE_HEADWEARLOTTERY_ITEM  ESource = 260
	ESource_ESOURCE_USE_CARDLOTTERY_ITEM      ESource = 261
	ESource_ESOURCE_USE_MIXLOTTERY_ITEM       ESource = 262
	ESource_ESOURCE_USE_RANDOMSHOP_ITEM       ESource = 263
	ESource_ESOURCE_USE_RANDOMPET_ITEM        ESource = 264
	ESource_ESOURCE_FAMILY                    ESource = 265
	ESource_ESOURCE_DISNEY_MUSIC_REWARD       ESource = 266
	ESource_ESOURCE_SEVEN_ROYAL_TEAM_RAID     ESource = 267
	ESource_ESOURCE_SHOP_FURNITURE            ESource = 268
	ESource_ESOURCE_USERINVITE_INVITE         ESource = 269
	ESource_ESOURCE_USERINVITE_BIND           ESource = 270
	ESource_ESOURCE_USERINVITE_SHARE          ESource = 271
	ESource_ESOURCE_USERINVITE_INVITELOGIN    ESource = 272
	ESource_ESOURCE_USERINVITE_RECALLLOGIN    ESource = 273
	ESource_ESOURCE_SKILLPERCEPTABILITY       ESource = 275
	ESource_ESOURCE_USER_RETURN_QUEST_AWARD   ESource = 276
	ESource_ESOURCE_USER_RETURN_LOGIN_AWARD   ESource = 277
	ESource_ESOURCE_USER_RETURN               ESource = 278
	ESource_ESOURCE_USERRETURN_RAID_AWARD     ESource = 279
	ESource_ESOURCE_SPECIFY_BUFF              ESource = 280
	ESource_ESOURCE_DAYSIGNIN_AWARD           ESource = 281
	ESource_ESOURCE_STRENGTH_RESET            ESource = 284
	ESource_ESOURCE_RED_PACKET                ESource = 285
	ESource_ESOURCE_HEADWEARACTIVITYRAID      ESource = 286
	ESource_ESOURCE_RESET_SKILL               ESource = 287
	ESource_ESOURCE_WISH_ACTIVITY             ESource = 288
	ESource_ESOURCE_NOVICE_BP                 ESource = 289
	ESource_ESOURCE_TECHTREE_GIVEBACK         ESource = 290
	ESource_ESOURCE_TECHTREE_LEVELAWARD       ESource = 291
	ESource_ESOURCE_TECHTREE_PRODUCE          ESource = 292
	ESource_ESOURCE_CRACK                     ESource = 293
	ESource_ESOURCE_PVERAID_ACHIEVEMENT       ESource = 294
	ESource_ESOURCE_CRACK_REFINE              ESource = 295
	ESource_ESOURCE_LOTTERY_MIX4              ESource = 296
	ESource_ESOURCE_GUILD_ASSEMBLY            ESource = 297
	ESource_ESOURCE_USERRETURN_BIND           ESource = 298
	ESource_ESOURCE_RETURNINVITE_SHARE        ESource = 299
	ESource_ESOURCE_RETURNINVITE_INVITE       ESource = 300
	ESource_ESOURCE_LOTTERY_CARD_NEW          ESource = 301
	ESource_ESOURCE_LOTTERY_CARD_ACTIVITY     ESource = 302
	ESource_ESOURCE_FIRST_DEPOSIT             ESource = 303
	ESource_ESOURCE_BATTLE_FUND               ESource = 304
	ESource_ESOURCE_SHARE                     ESource = 305
	ESource_ESOURCE_BATTLE_TIME_DROP          ESource = 306
	ESource_ESOURCE_STORM_RARE_ELITE          ESource = 307
	ESource_ESOURCE_RETURN_BP                 ESource = 308
	ESource_ESOURCE_PVECARD_FIRSTPASS         ESource = 309
	ESource_ESOURCE_PACK_SORT                 ESource = 310
	ESource_ESOURCE_ACHIEVE                   ESource = 311
	ESource_ESOURCE_USER                      ESource = 312
	ESource_ESOURCE_HAPPLYVALUE               ESource = 313
	ESource_ESOURCE_QUESTIONNAIRE             ESource = 314
	ESource_ESOURCE_DONATEACTIVITY            ESource = 315
	ESource_ESOURCE_MINIGAME                  ESource = 316
	ESource_ESOURCE_SIGN_IN                   ESource = 317
	ESource_ESOURCE_QUOTA                     ESource = 318
	ESource_ESOURCE_DAILY_DEPOSIT             ESource = 319
	ESource_ESOURCE_HAND                      ESource = 320
	ESource_ESOURCE_HERO_GROWTH_QUEST         ESource = 321
	ESource_ESOURCE_FEATURE_SKILL             ESource = 322
	ESource_ESOURCE_AUTOSELL                  ESource = 323
	ESource_ESOURCE_LOTTERY_DAILY_REWARD      ESource = 324
	ESource_ESOURCE_ACCUM_DEPOSIT             ESource = 325
	ESource_ESOURCE_BOLI_GOLD                 ESource = 326
	ESource_ESOURCE_AFRICANPORING             ESource = 327
	ESource_ESOURCE_PHOTO_BOARD_AWARD         ESource = 328
	ESource_ESOURCE_PHOTO_BOARD_LIKE          ESource = 329
	ESource_ESOURCE_EXTRACT_LEVELUP           ESource = 330
	ESource_ESOURCE_REFRESH_EQUIP_ATTR        ESource = 331
	ESource_ESOURCE_BOSS_SCENE_REWARD         ESource = 332
	ESource_ESOURCE_NOVICE_CHARGE             ESource = 333
	ESource_ESOURCE_MAX                       ESource = 334
)

// Enum value maps for ESource.
var (
	ESource_name = map[int32]string{
		0:   "ESOURCE_MIN",
		1:   "ESOURCE_NORMAL",
		2:   "ESOURCE_PACKAGE",
		3:   "ESOURCE_QUEST",
		4:   "ESOURCE_EQUIP",
		5:   "ESOURCE_CARD",
		6:   "ESOURCE_ACTSKILL",
		9:   "ESOURCE_COMPOSE",
		10:  "ESOURCE_REWARD",
		11:  "ESOURCE_MONSTERKILL",
		12:  "ESOURCE_GM",
		13:  "ESOURCE_FUBEN",
		14:  "ESOURCE_CHARGE",
		15:  "ESOURCE_LABORATORY",
		16:  "ESOURCE_MAPTRANS",
		17:  "ESOURCE_HAIR",
		18:  "ESOURCE_STRENGTH",
		19:  "ESOURCE_SHOP",
		21:  "ESOURCE_SELL",
		22:  "ESOURCE_PICKUP",
		23:  "ESOURCE_OFFLINE",
		24:  "ESOURCE_LVUP",
		25:  "ESOURCE_TRADE",
		26:  "ESOURCE_TRANSFER",
		27:  "ESOURCE_SEAL",
		28:  "ESOURCE_GUILDPRAY",
		29:  "ESOURCE_ENCHANT",
		30:  "ESOURCE_GUILDCREATE",
		31:  "ESOURCE_GUILDLEVELUP",
		32:  "ESOURCE_RELIVE",
		33:  "ESOURCE_REPAIR",
		34:  "ESOURCE_STORE",
		35:  "ESOURCE_MUSICBOX",
		36:  "ESOURCE_TOWER",
		37:  "ESOURCE_DOJOFIRST",
		38:  "ESOURCE_DOJOHELP",
		39:  "ESOURCE_MANUAL",
		41:  "ESOURCE_ROB",
		42:  "ESOURCE_WANTEDQUEST",
		43:  "ESOURCE_DONATE",
		44:  "ESOURCE_MONSTERAI",
		45:  "ESOURCE_TREASURE",
		46:  "ESOURCE_FERRISWHEEL",
		47:  "ESOURCE_CRAZYGHOST",
		48:  "ESOURCE_JUMPZONE",
		49:  "ESOURCE_OPERATE",
		50:  "ESOURCE_DOG",
		51:  "ESOURCE_GIFT",
		52:  "ESOURCE_QA",
		53:  "ESOURCE_DECOMPOSE",
		54:  "ESOURCE_HELP",
		55:  "ESOURCE_OPENSTORE",
		56:  "ESOURCE_PUTSTORE",
		57:  "ESOURCE_OFFSTORE",
		58:  "ESOURCE_EXCHANGE",
		59:  "ESOURCE_UNSTRENGTH",
		60:  "ESOURCE_DAILYQUEST",
		61:  "ESOURCE_USEITEM",
		62:  "ESOURCE_RESTORE",
		63:  "ESOURCE_TEMPPACK",
		64:  "ESOURCE_TRADE_PUBLICITY",
		65:  "ESOURCE_TRADE_PUBLICITY_FAILRET",
		66:  "ESOURCE_KAPULA",
		67:  "ESOURCE_MONEYCAT",
		68:  "ESOURCE_VALENTINE",
		69:  "ESOURCE_PERSON_PUTSTORE",
		70:  "ESOURCE_PERSON_OFFSTORE",
		71:  "ESOURCE_PUBLIC_PUTSTORE",
		72:  "ESOURCE_PUBLIC_OFFSTORE",
		73:  "ESOURCE_PUT_TEMPPACK",
		74:  "ESOURCE_OFF_TEMPPACK",
		75:  "ESOURCE_CAT",
		76:  "ESOURCE_GIVE",
		77:  "ESOURCE_UPGRADE",
		78:  "ESOURCE_PUT_BARROW",
		79:  "ESOURCE_OFF_BARROW",
		80:  "ESOURCE_OPEN_GUILD_GATE",
		81:  "ESOURCE_UNLOCK_GUILD_GATE",
		82:  "ESOURCE_GUILDRAID",
		83:  "ESOURCE_MONTHCARD",
		84:  "ESOURCE_ASTROLABE_ACTIVATE",
		85:  "ESOURCE_ASTROLABE_RESET",
		86:  "ESOURCE_EXCHANGECARD",
		87:  "ESOURCE_COOK_FOOD",
		88:  "ESOURCE_EAT_FOOD",
		89:  "ESOURCE_PHOTO_SCENERY",
		90:  "ESOURCE_PHOTO_SELF",
		91:  "ESOURCE_LOTTERY",
		92:  "ESOURCE_LOTTERY_RECOVERY",
		93:  "ESOURCE_PET",
		94:  "ESOURCE_PET_ADVENTURE",
		95:  "ESOURCE_MAIL",
		96:  "ESOURCE_BUFF",
		97:  "ESOURCE_PVP",
		98:  "ESOURCE_AUCTION_SIGNUP",
		99:  "ESOURCE_AUCTION_OFFERPRICE",
		100: "ESOURCE_AUCTION",
		102: "ESOURCE_GANEN_FUDAI",
		103: "ESOURCE_TUTOR_TASK",
		104: "ESOURCE_TUTOR_GROW",
		105: "ESOURCE_TUTOR_GRADUATION",
		106: "ESOURCE_USER_RENAME",
		107: "ESOURCE_GUILD_RENAME",
		108: "ESOURCE_MAT_COMPOSE",
		109: "ESOURCE_HIGH_REFINE",
		111: "ESOURCE_LOTTERY_HEAD",
		112: "ESOURCE_LOTTERY_EQUIP",
		113: "ESOURCE_LOTTERY_CARD",
		114: "ESOURCE_LOTTERY_HEAD_OLD",
		115: "ESOURCE_PVP_POLLY",
		116: "ESOURCE_ACTIVITY_EVENT",
		117: "ESOURCE_GUILD_SUBMIT_MATERIAL",
		118: "ESOURCE_GUILD_BUILDING_WELFARE",
		119: "ESOURCE_GUILD_CHALLENGE",
		121: "ESOURCE_LOTTERY_CATLITTERBOX",
		122: "ESOURCE_PHOTO_GUILD",
		123: "ESOURCE_LOTTERY_MAGIC",
		124: "ESOURCE_RECALL",
		125: "ESOURCE_ARTIFACT_PRODUCE",
		126: "ESOURCE_ARTIFACT_DISTRIBUTE",
		127: "ESOURCE_LOTTERY_GIVE",
		128: "ESOURCE_RESERVE_WEDDING",
		129: "ESOURCE_WEDDING_BUY_PACKAGE",
		130: "ESOURCE_WEDDING_BUY_RING",
		131: "ESOURCE_WEDDINGDRESS_GIVE",
		132: "ESOURCE_WEDDING_PHOTO",
		133: "ESOURCE_GUILD_TREASURE",
		134: "ESOURCE_GVG",
		135: "ESOURCE_WEDDING",
		136: "ESOURCE_CARD_DECOMPOSE",
		137: "ESOURCE_PET_WORK",
		138: "ESOURCE_SERVANT",
		139: "ESOURCE_KFC_ACTIVITY",
		140: "ESOURCE_PROFESSION_BUY",
		141: "ESOURCE_USER_RECORD",
		142: "ESOURCE_PROFESSION_CHANGE",
		143: "ESOURCE_FASHION_GEDNER",
		144: "ESOURCE_QUICKSTORE",
		145: "ESOURCE_ENCHANT_TRANS",
		146: "ESOURCE_PUZZLE",
		147: "ESOURCE_EXCHANGE_SHOP",
		148: "ESOURCE_DRESSUP_STAGE",
		149: "ESOURCE_DEAD",
		150: "ESOURCE_QUICKSTORE_RETURN",
		151: "ESOURCE_EQUIP_COMPOSE",
		152: "ESOURCE_CHAT",
		153: "ESOURCE_GUILD_LEVEL_UP",
		154: "ESOURCE_GUILD_CHANGE_ZONE",
		155: "ESOURCE_GUILD_OPEN_BUILDING",
		156: "ESOURCE_GUILD_SHOP",
		157: "ESOURCE_GUILD_MAINTENANCE",
		158: "ESOURCE_LOTTERY_MAGIC_2",
		159: "ESOURCE_EXCHANGE_EXTRA",
		160: "ESOURCE_ACTIVEPUZZLE",
		161: "ESOURCE_EXPRAID",
		162: "ESOURCE_CHARGERET",
		163: "ESOURCE_PRESTIGE_GIVE",
		164: "ESOURCE_LOTTERY_EXTRA_BONUS",
		165: "ESOURCE_RIDE_LOTTERY",
		166: "ESOURCE_HOME",
		167: "ESOURCE_GEM_SKILL_APPRAISAL",
		168: "ESOURCE_GEM_SKILL_COMPOSE_SAME",
		169: "ESOURCE_GEM_SKILL_COMPOSE_QUALITY",
		170: "ESOURCE_GEM_ATTR_COMPOSE",
		171: "ESOURCE_GEM_ATTR_UPGRADE",
		172: "ESOURCE_GEM_ATTR_MOUNT",
		173: "ESOURCE_GEM_ATTR_UNMOUNT",
		174: "ESOURCE_RAIDDEADBOSS",
		175: "ESOURCE_GEM_SKILL_CARVE",
		176: "ESOURCE_LOTTERY_MAGIC_3",
		177: "ESOURCE_GEM_SKILL_SMELT",
		178: "ESOURCE_MOROCC_SUBMIT_MATERIAL",
		179: "ESOURCE_MVP_BATTLE",
		180: "ESOURCE_HEADWEARRAID",
		181: "ESOURCE_BATTLEPASS",
		182: "ESOURCE_FOURTH_SKILL_LEVELUP",
		183: "ESOURCE_FOURTH_SKILL_RESET",
		184: "ESOURCE_ROGUELIKE",
		185: "ESOURCE_FAST_TRANS",
		186: "ESOURCE_FOURTH_SKILL_POINT",
		187: "ESOURCE_TECHTREE",
		188: "ESOURCE_BUILD_CONTRIBUTE",
		189: "ESOURCE_BUILD_TOY",
		190: "ESOURCE_MAP_SECRET_GET",
		191: "ESOURCE_EATBEING",
		192: "ESOURCE_EXTRACTION",
		193: "ESOURCE_EXTRACTION_GRID_BUY",
		194: "ESOURCE_EQUIP_OFF",
		195: "ESOURCE_FUNCITEM",
		196: "ESOURCE_BUILD_OPERATE",
		197: "ESOURCE_NIGHTMARE_ATTR",
		198: "ESOURCE_ITEMCLEAR",
		199: "ESOURCE_ACTHITPOLLY",
		200: "ESOURCE_TRANSFERFIGHT",
		201: "ESOURCE_MANUAL_SKILL",
		204: "ESOURCE_PAYSIGN",
		205: "ESOURCE_TWELVE_PVP",
		207: "ESOURCE_ROLLCOIN",
		208: "ESOURCE_BIFROST_CONTRIBUTE",
		209: "ESOURCE_RAID_EINHERJAR",
		211: "ESOURCE_ACTMINIRO",
		212: "ESOURCE_GROUPON",
		213: "ESOURCE_LOTTERY_DOLL",
		214: "ESOURCE_ENDLESSPRIVATE",
		215: "ESOURCE_NOVICE_TARGET",
		216: "ESOURCE_GOAL",
		221: "ESOURCE_BOKI",
		222: "ESOURCE_RAIDPUZZLE",
		223: "ESOURCE_ACTTIMELIMIT_SHOP",
		224: "ESOURCE_NOVICE_NOTEBOOK",
		217: "ESOURCE_ARTIFACT_EXCHANGE",
		218: "ESOURCE_ARTIFACT_DECOMPOSE",
		219: "ESOURCE_ARTIFACT_COMPOSE",
		220: "ESOURCE_ARTIFACT_REMOULD",
		225: "ESOURCE_ARTIFACT_APPRAISAL",
		226: "ESOURCE_LOTTERY_MIX1",
		227: "ESOURCE_LOTTERY_MIX2",
		228: "ESOURCE_LOTTERY_MIX3",
		229: "ESOURCE_EQUIP_POWER",
		230: "ESOURCE_ENCHANT_TRANSFER",
		231: "ESOURCE_REFINE_TRANSFER",
		233: "ESOURCE_SPECIAL_ADDSKILL",
		232: "ESOURCE_ASTROLABE_TICKET",
		234: "ESOURCE_RAND_SELECT",
		235: "ESOURCE_ACTIVITY_DONATE",
		236: "ESOURCE_EYE",
		237: "ESOURCE_QUEST_COMPLETE",
		238: "ESOURCE_MANOR_BUILD_LVUP",
		239: "ESOURCE_DISNEY_MICKEY_ON",
		240: "ESOURCE_DISNEY_MICKEY_REWARD",
		241: "ESOURCE_MANOR_DISPATCH",
		242: "ESOURCE_MANOR_LOTTERY",
		243: "ESOURCE_THANATOS",
		244: "ESOURCE_PVECARD",
		245: "ESOURCE_INTERACT_NPC",
		246: "ESOURCE_SUPERGVG",
		247: "ESOURCE_FAVORITE_GIVE",
		248: "ESOURCE_FAVORITE_REWARD",
		249: "ESOURCE_CAPRA",
		250: "ESOURCE_NPC_HEADWEARE_EXCHANGE",
		251: "ESOURCE_FRIENDREWARD",
		252: "ESOURCE_MANOR_FORGE",
		253: "ESOURCE_OFF_HOMEWAREHOUSE",
		254: "ESOURCE_GIFT_BUY",
		255: "ESOURCE_CAPRA_COMPOSE",
		256: "ESOURCE_GLOBALDONATIONACTIVITY",
		257: "ESOURCE_EQUIP_RECOVERY",
		258: "ESOURCE_COMODO_TEAM_RAID",
		260: "ESOURCE_USE_HEADWEARLOTTERY_ITEM",
		261: "ESOURCE_USE_CARDLOTTERY_ITEM",
		262: "ESOURCE_USE_MIXLOTTERY_ITEM",
		263: "ESOURCE_USE_RANDOMSHOP_ITEM",
		264: "ESOURCE_USE_RANDOMPET_ITEM",
		265: "ESOURCE_FAMILY",
		266: "ESOURCE_DISNEY_MUSIC_REWARD",
		267: "ESOURCE_SEVEN_ROYAL_TEAM_RAID",
		268: "ESOURCE_SHOP_FURNITURE",
		269: "ESOURCE_USERINVITE_INVITE",
		270: "ESOURCE_USERINVITE_BIND",
		271: "ESOURCE_USERINVITE_SHARE",
		272: "ESOURCE_USERINVITE_INVITELOGIN",
		273: "ESOURCE_USERINVITE_RECALLLOGIN",
		275: "ESOURCE_SKILLPERCEPTABILITY",
		276: "ESOURCE_USER_RETURN_QUEST_AWARD",
		277: "ESOURCE_USER_RETURN_LOGIN_AWARD",
		278: "ESOURCE_USER_RETURN",
		279: "ESOURCE_USERRETURN_RAID_AWARD",
		280: "ESOURCE_SPECIFY_BUFF",
		281: "ESOURCE_DAYSIGNIN_AWARD",
		284: "ESOURCE_STRENGTH_RESET",
		285: "ESOURCE_RED_PACKET",
		286: "ESOURCE_HEADWEARACTIVITYRAID",
		287: "ESOURCE_RESET_SKILL",
		288: "ESOURCE_WISH_ACTIVITY",
		289: "ESOURCE_NOVICE_BP",
		290: "ESOURCE_TECHTREE_GIVEBACK",
		291: "ESOURCE_TECHTREE_LEVELAWARD",
		292: "ESOURCE_TECHTREE_PRODUCE",
		293: "ESOURCE_CRACK",
		294: "ESOURCE_PVERAID_ACHIEVEMENT",
		295: "ESOURCE_CRACK_REFINE",
		296: "ESOURCE_LOTTERY_MIX4",
		297: "ESOURCE_GUILD_ASSEMBLY",
		298: "ESOURCE_USERRETURN_BIND",
		299: "ESOURCE_RETURNINVITE_SHARE",
		300: "ESOURCE_RETURNINVITE_INVITE",
		301: "ESOURCE_LOTTERY_CARD_NEW",
		302: "ESOURCE_LOTTERY_CARD_ACTIVITY",
		303: "ESOURCE_FIRST_DEPOSIT",
		304: "ESOURCE_BATTLE_FUND",
		305: "ESOURCE_SHARE",
		306: "ESOURCE_BATTLE_TIME_DROP",
		307: "ESOURCE_STORM_RARE_ELITE",
		308: "ESOURCE_RETURN_BP",
		309: "ESOURCE_PVECARD_FIRSTPASS",
		310: "ESOURCE_PACK_SORT",
		311: "ESOURCE_ACHIEVE",
		312: "ESOURCE_USER",
		313: "ESOURCE_HAPPLYVALUE",
		314: "ESOURCE_QUESTIONNAIRE",
		315: "ESOURCE_DONATEACTIVITY",
		316: "ESOURCE_MINIGAME",
		317: "ESOURCE_SIGN_IN",
		318: "ESOURCE_QUOTA",
		319: "ESOURCE_DAILY_DEPOSIT",
		320: "ESOURCE_HAND",
		321: "ESOURCE_HERO_GROWTH_QUEST",
		322: "ESOURCE_FEATURE_SKILL",
		323: "ESOURCE_AUTOSELL",
		324: "ESOURCE_LOTTERY_DAILY_REWARD",
		325: "ESOURCE_ACCUM_DEPOSIT",
		326: "ESOURCE_BOLI_GOLD",
		327: "ESOURCE_AFRICANPORING",
		328: "ESOURCE_PHOTO_BOARD_AWARD",
		329: "ESOURCE_PHOTO_BOARD_LIKE",
		330: "ESOURCE_EXTRACT_LEVELUP",
		331: "ESOURCE_REFRESH_EQUIP_ATTR",
		332: "ESOURCE_BOSS_SCENE_REWARD",
		333: "ESOURCE_NOVICE_CHARGE",
		334: "ESOURCE_MAX",
	}
	ESource_value = map[string]int32{
		"ESOURCE_MIN":                       0,
		"ESOURCE_NORMAL":                    1,
		"ESOURCE_PACKAGE":                   2,
		"ESOURCE_QUEST":                     3,
		"ESOURCE_EQUIP":                     4,
		"ESOURCE_CARD":                      5,
		"ESOURCE_ACTSKILL":                  6,
		"ESOURCE_COMPOSE":                   9,
		"ESOURCE_REWARD":                    10,
		"ESOURCE_MONSTERKILL":               11,
		"ESOURCE_GM":                        12,
		"ESOURCE_FUBEN":                     13,
		"ESOURCE_CHARGE":                    14,
		"ESOURCE_LABORATORY":                15,
		"ESOURCE_MAPTRANS":                  16,
		"ESOURCE_HAIR":                      17,
		"ESOURCE_STRENGTH":                  18,
		"ESOURCE_SHOP":                      19,
		"ESOURCE_SELL":                      21,
		"ESOURCE_PICKUP":                    22,
		"ESOURCE_OFFLINE":                   23,
		"ESOURCE_LVUP":                      24,
		"ESOURCE_TRADE":                     25,
		"ESOURCE_TRANSFER":                  26,
		"ESOURCE_SEAL":                      27,
		"ESOURCE_GUILDPRAY":                 28,
		"ESOURCE_ENCHANT":                   29,
		"ESOURCE_GUILDCREATE":               30,
		"ESOURCE_GUILDLEVELUP":              31,
		"ESOURCE_RELIVE":                    32,
		"ESOURCE_REPAIR":                    33,
		"ESOURCE_STORE":                     34,
		"ESOURCE_MUSICBOX":                  35,
		"ESOURCE_TOWER":                     36,
		"ESOURCE_DOJOFIRST":                 37,
		"ESOURCE_DOJOHELP":                  38,
		"ESOURCE_MANUAL":                    39,
		"ESOURCE_ROB":                       41,
		"ESOURCE_WANTEDQUEST":               42,
		"ESOURCE_DONATE":                    43,
		"ESOURCE_MONSTERAI":                 44,
		"ESOURCE_TREASURE":                  45,
		"ESOURCE_FERRISWHEEL":               46,
		"ESOURCE_CRAZYGHOST":                47,
		"ESOURCE_JUMPZONE":                  48,
		"ESOURCE_OPERATE":                   49,
		"ESOURCE_DOG":                       50,
		"ESOURCE_GIFT":                      51,
		"ESOURCE_QA":                        52,
		"ESOURCE_DECOMPOSE":                 53,
		"ESOURCE_HELP":                      54,
		"ESOURCE_OPENSTORE":                 55,
		"ESOURCE_PUTSTORE":                  56,
		"ESOURCE_OFFSTORE":                  57,
		"ESOURCE_EXCHANGE":                  58,
		"ESOURCE_UNSTRENGTH":                59,
		"ESOURCE_DAILYQUEST":                60,
		"ESOURCE_USEITEM":                   61,
		"ESOURCE_RESTORE":                   62,
		"ESOURCE_TEMPPACK":                  63,
		"ESOURCE_TRADE_PUBLICITY":           64,
		"ESOURCE_TRADE_PUBLICITY_FAILRET":   65,
		"ESOURCE_KAPULA":                    66,
		"ESOURCE_MONEYCAT":                  67,
		"ESOURCE_VALENTINE":                 68,
		"ESOURCE_PERSON_PUTSTORE":           69,
		"ESOURCE_PERSON_OFFSTORE":           70,
		"ESOURCE_PUBLIC_PUTSTORE":           71,
		"ESOURCE_PUBLIC_OFFSTORE":           72,
		"ESOURCE_PUT_TEMPPACK":              73,
		"ESOURCE_OFF_TEMPPACK":              74,
		"ESOURCE_CAT":                       75,
		"ESOURCE_GIVE":                      76,
		"ESOURCE_UPGRADE":                   77,
		"ESOURCE_PUT_BARROW":                78,
		"ESOURCE_OFF_BARROW":                79,
		"ESOURCE_OPEN_GUILD_GATE":           80,
		"ESOURCE_UNLOCK_GUILD_GATE":         81,
		"ESOURCE_GUILDRAID":                 82,
		"ESOURCE_MONTHCARD":                 83,
		"ESOURCE_ASTROLABE_ACTIVATE":        84,
		"ESOURCE_ASTROLABE_RESET":           85,
		"ESOURCE_EXCHANGECARD":              86,
		"ESOURCE_COOK_FOOD":                 87,
		"ESOURCE_EAT_FOOD":                  88,
		"ESOURCE_PHOTO_SCENERY":             89,
		"ESOURCE_PHOTO_SELF":                90,
		"ESOURCE_LOTTERY":                   91,
		"ESOURCE_LOTTERY_RECOVERY":          92,
		"ESOURCE_PET":                       93,
		"ESOURCE_PET_ADVENTURE":             94,
		"ESOURCE_MAIL":                      95,
		"ESOURCE_BUFF":                      96,
		"ESOURCE_PVP":                       97,
		"ESOURCE_AUCTION_SIGNUP":            98,
		"ESOURCE_AUCTION_OFFERPRICE":        99,
		"ESOURCE_AUCTION":                   100,
		"ESOURCE_GANEN_FUDAI":               102,
		"ESOURCE_TUTOR_TASK":                103,
		"ESOURCE_TUTOR_GROW":                104,
		"ESOURCE_TUTOR_GRADUATION":          105,
		"ESOURCE_USER_RENAME":               106,
		"ESOURCE_GUILD_RENAME":              107,
		"ESOURCE_MAT_COMPOSE":               108,
		"ESOURCE_HIGH_REFINE":               109,
		"ESOURCE_LOTTERY_HEAD":              111,
		"ESOURCE_LOTTERY_EQUIP":             112,
		"ESOURCE_LOTTERY_CARD":              113,
		"ESOURCE_LOTTERY_HEAD_OLD":          114,
		"ESOURCE_PVP_POLLY":                 115,
		"ESOURCE_ACTIVITY_EVENT":            116,
		"ESOURCE_GUILD_SUBMIT_MATERIAL":     117,
		"ESOURCE_GUILD_BUILDING_WELFARE":    118,
		"ESOURCE_GUILD_CHALLENGE":           119,
		"ESOURCE_LOTTERY_CATLITTERBOX":      121,
		"ESOURCE_PHOTO_GUILD":               122,
		"ESOURCE_LOTTERY_MAGIC":             123,
		"ESOURCE_RECALL":                    124,
		"ESOURCE_ARTIFACT_PRODUCE":          125,
		"ESOURCE_ARTIFACT_DISTRIBUTE":       126,
		"ESOURCE_LOTTERY_GIVE":              127,
		"ESOURCE_RESERVE_WEDDING":           128,
		"ESOURCE_WEDDING_BUY_PACKAGE":       129,
		"ESOURCE_WEDDING_BUY_RING":          130,
		"ESOURCE_WEDDINGDRESS_GIVE":         131,
		"ESOURCE_WEDDING_PHOTO":             132,
		"ESOURCE_GUILD_TREASURE":            133,
		"ESOURCE_GVG":                       134,
		"ESOURCE_WEDDING":                   135,
		"ESOURCE_CARD_DECOMPOSE":            136,
		"ESOURCE_PET_WORK":                  137,
		"ESOURCE_SERVANT":                   138,
		"ESOURCE_KFC_ACTIVITY":              139,
		"ESOURCE_PROFESSION_BUY":            140,
		"ESOURCE_USER_RECORD":               141,
		"ESOURCE_PROFESSION_CHANGE":         142,
		"ESOURCE_FASHION_GEDNER":            143,
		"ESOURCE_QUICKSTORE":                144,
		"ESOURCE_ENCHANT_TRANS":             145,
		"ESOURCE_PUZZLE":                    146,
		"ESOURCE_EXCHANGE_SHOP":             147,
		"ESOURCE_DRESSUP_STAGE":             148,
		"ESOURCE_DEAD":                      149,
		"ESOURCE_QUICKSTORE_RETURN":         150,
		"ESOURCE_EQUIP_COMPOSE":             151,
		"ESOURCE_CHAT":                      152,
		"ESOURCE_GUILD_LEVEL_UP":            153,
		"ESOURCE_GUILD_CHANGE_ZONE":         154,
		"ESOURCE_GUILD_OPEN_BUILDING":       155,
		"ESOURCE_GUILD_SHOP":                156,
		"ESOURCE_GUILD_MAINTENANCE":         157,
		"ESOURCE_LOTTERY_MAGIC_2":           158,
		"ESOURCE_EXCHANGE_EXTRA":            159,
		"ESOURCE_ACTIVEPUZZLE":              160,
		"ESOURCE_EXPRAID":                   161,
		"ESOURCE_CHARGERET":                 162,
		"ESOURCE_PRESTIGE_GIVE":             163,
		"ESOURCE_LOTTERY_EXTRA_BONUS":       164,
		"ESOURCE_RIDE_LOTTERY":              165,
		"ESOURCE_HOME":                      166,
		"ESOURCE_GEM_SKILL_APPRAISAL":       167,
		"ESOURCE_GEM_SKILL_COMPOSE_SAME":    168,
		"ESOURCE_GEM_SKILL_COMPOSE_QUALITY": 169,
		"ESOURCE_GEM_ATTR_COMPOSE":          170,
		"ESOURCE_GEM_ATTR_UPGRADE":          171,
		"ESOURCE_GEM_ATTR_MOUNT":            172,
		"ESOURCE_GEM_ATTR_UNMOUNT":          173,
		"ESOURCE_RAIDDEADBOSS":              174,
		"ESOURCE_GEM_SKILL_CARVE":           175,
		"ESOURCE_LOTTERY_MAGIC_3":           176,
		"ESOURCE_GEM_SKILL_SMELT":           177,
		"ESOURCE_MOROCC_SUBMIT_MATERIAL":    178,
		"ESOURCE_MVP_BATTLE":                179,
		"ESOURCE_HEADWEARRAID":              180,
		"ESOURCE_BATTLEPASS":                181,
		"ESOURCE_FOURTH_SKILL_LEVELUP":      182,
		"ESOURCE_FOURTH_SKILL_RESET":        183,
		"ESOURCE_ROGUELIKE":                 184,
		"ESOURCE_FAST_TRANS":                185,
		"ESOURCE_FOURTH_SKILL_POINT":        186,
		"ESOURCE_TECHTREE":                  187,
		"ESOURCE_BUILD_CONTRIBUTE":          188,
		"ESOURCE_BUILD_TOY":                 189,
		"ESOURCE_MAP_SECRET_GET":            190,
		"ESOURCE_EATBEING":                  191,
		"ESOURCE_EXTRACTION":                192,
		"ESOURCE_EXTRACTION_GRID_BUY":       193,
		"ESOURCE_EQUIP_OFF":                 194,
		"ESOURCE_FUNCITEM":                  195,
		"ESOURCE_BUILD_OPERATE":             196,
		"ESOURCE_NIGHTMARE_ATTR":            197,
		"ESOURCE_ITEMCLEAR":                 198,
		"ESOURCE_ACTHITPOLLY":               199,
		"ESOURCE_TRANSFERFIGHT":             200,
		"ESOURCE_MANUAL_SKILL":              201,
		"ESOURCE_PAYSIGN":                   204,
		"ESOURCE_TWELVE_PVP":                205,
		"ESOURCE_ROLLCOIN":                  207,
		"ESOURCE_BIFROST_CONTRIBUTE":        208,
		"ESOURCE_RAID_EINHERJAR":            209,
		"ESOURCE_ACTMINIRO":                 211,
		"ESOURCE_GROUPON":                   212,
		"ESOURCE_LOTTERY_DOLL":              213,
		"ESOURCE_ENDLESSPRIVATE":            214,
		"ESOURCE_NOVICE_TARGET":             215,
		"ESOURCE_GOAL":                      216,
		"ESOURCE_BOKI":                      221,
		"ESOURCE_RAIDPUZZLE":                222,
		"ESOURCE_ACTTIMELIMIT_SHOP":         223,
		"ESOURCE_NOVICE_NOTEBOOK":           224,
		"ESOURCE_ARTIFACT_EXCHANGE":         217,
		"ESOURCE_ARTIFACT_DECOMPOSE":        218,
		"ESOURCE_ARTIFACT_COMPOSE":          219,
		"ESOURCE_ARTIFACT_REMOULD":          220,
		"ESOURCE_ARTIFACT_APPRAISAL":        225,
		"ESOURCE_LOTTERY_MIX1":              226,
		"ESOURCE_LOTTERY_MIX2":              227,
		"ESOURCE_LOTTERY_MIX3":              228,
		"ESOURCE_EQUIP_POWER":               229,
		"ESOURCE_ENCHANT_TRANSFER":          230,
		"ESOURCE_REFINE_TRANSFER":           231,
		"ESOURCE_SPECIAL_ADDSKILL":          233,
		"ESOURCE_ASTROLABE_TICKET":          232,
		"ESOURCE_RAND_SELECT":               234,
		"ESOURCE_ACTIVITY_DONATE":           235,
		"ESOURCE_EYE":                       236,
		"ESOURCE_QUEST_COMPLETE":            237,
		"ESOURCE_MANOR_BUILD_LVUP":          238,
		"ESOURCE_DISNEY_MICKEY_ON":          239,
		"ESOURCE_DISNEY_MICKEY_REWARD":      240,
		"ESOURCE_MANOR_DISPATCH":            241,
		"ESOURCE_MANOR_LOTTERY":             242,
		"ESOURCE_THANATOS":                  243,
		"ESOURCE_PVECARD":                   244,
		"ESOURCE_INTERACT_NPC":              245,
		"ESOURCE_SUPERGVG":                  246,
		"ESOURCE_FAVORITE_GIVE":             247,
		"ESOURCE_FAVORITE_REWARD":           248,
		"ESOURCE_CAPRA":                     249,
		"ESOURCE_NPC_HEADWEARE_EXCHANGE":    250,
		"ESOURCE_FRIENDREWARD":              251,
		"ESOURCE_MANOR_FORGE":               252,
		"ESOURCE_OFF_HOMEWAREHOUSE":         253,
		"ESOURCE_GIFT_BUY":                  254,
		"ESOURCE_CAPRA_COMPOSE":             255,
		"ESOURCE_GLOBALDONATIONACTIVITY":    256,
		"ESOURCE_EQUIP_RECOVERY":            257,
		"ESOURCE_COMODO_TEAM_RAID":          258,
		"ESOURCE_USE_HEADWEARLOTTERY_ITEM":  260,
		"ESOURCE_USE_CARDLOTTERY_ITEM":      261,
		"ESOURCE_USE_MIXLOTTERY_ITEM":       262,
		"ESOURCE_USE_RANDOMSHOP_ITEM":       263,
		"ESOURCE_USE_RANDOMPET_ITEM":        264,
		"ESOURCE_FAMILY":                    265,
		"ESOURCE_DISNEY_MUSIC_REWARD":       266,
		"ESOURCE_SEVEN_ROYAL_TEAM_RAID":     267,
		"ESOURCE_SHOP_FURNITURE":            268,
		"ESOURCE_USERINVITE_INVITE":         269,
		"ESOURCE_USERINVITE_BIND":           270,
		"ESOURCE_USERINVITE_SHARE":          271,
		"ESOURCE_USERINVITE_INVITELOGIN":    272,
		"ESOURCE_USERINVITE_RECALLLOGIN":    273,
		"ESOURCE_SKILLPERCEPTABILITY":       275,
		"ESOURCE_USER_RETURN_QUEST_AWARD":   276,
		"ESOURCE_USER_RETURN_LOGIN_AWARD":   277,
		"ESOURCE_USER_RETURN":               278,
		"ESOURCE_USERRETURN_RAID_AWARD":     279,
		"ESOURCE_SPECIFY_BUFF":              280,
		"ESOURCE_DAYSIGNIN_AWARD":           281,
		"ESOURCE_STRENGTH_RESET":            284,
		"ESOURCE_RED_PACKET":                285,
		"ESOURCE_HEADWEARACTIVITYRAID":      286,
		"ESOURCE_RESET_SKILL":               287,
		"ESOURCE_WISH_ACTIVITY":             288,
		"ESOURCE_NOVICE_BP":                 289,
		"ESOURCE_TECHTREE_GIVEBACK":         290,
		"ESOURCE_TECHTREE_LEVELAWARD":       291,
		"ESOURCE_TECHTREE_PRODUCE":          292,
		"ESOURCE_CRACK":                     293,
		"ESOURCE_PVERAID_ACHIEVEMENT":       294,
		"ESOURCE_CRACK_REFINE":              295,
		"ESOURCE_LOTTERY_MIX4":              296,
		"ESOURCE_GUILD_ASSEMBLY":            297,
		"ESOURCE_USERRETURN_BIND":           298,
		"ESOURCE_RETURNINVITE_SHARE":        299,
		"ESOURCE_RETURNINVITE_INVITE":       300,
		"ESOURCE_LOTTERY_CARD_NEW":          301,
		"ESOURCE_LOTTERY_CARD_ACTIVITY":     302,
		"ESOURCE_FIRST_DEPOSIT":             303,
		"ESOURCE_BATTLE_FUND":               304,
		"ESOURCE_SHARE":                     305,
		"ESOURCE_BATTLE_TIME_DROP":          306,
		"ESOURCE_STORM_RARE_ELITE":          307,
		"ESOURCE_RETURN_BP":                 308,
		"ESOURCE_PVECARD_FIRSTPASS":         309,
		"ESOURCE_PACK_SORT":                 310,
		"ESOURCE_ACHIEVE":                   311,
		"ESOURCE_USER":                      312,
		"ESOURCE_HAPPLYVALUE":               313,
		"ESOURCE_QUESTIONNAIRE":             314,
		"ESOURCE_DONATEACTIVITY":            315,
		"ESOURCE_MINIGAME":                  316,
		"ESOURCE_SIGN_IN":                   317,
		"ESOURCE_QUOTA":                     318,
		"ESOURCE_DAILY_DEPOSIT":             319,
		"ESOURCE_HAND":                      320,
		"ESOURCE_HERO_GROWTH_QUEST":         321,
		"ESOURCE_FEATURE_SKILL":             322,
		"ESOURCE_AUTOSELL":                  323,
		"ESOURCE_LOTTERY_DAILY_REWARD":      324,
		"ESOURCE_ACCUM_DEPOSIT":             325,
		"ESOURCE_BOLI_GOLD":                 326,
		"ESOURCE_AFRICANPORING":             327,
		"ESOURCE_PHOTO_BOARD_AWARD":         328,
		"ESOURCE_PHOTO_BOARD_LIKE":          329,
		"ESOURCE_EXTRACT_LEVELUP":           330,
		"ESOURCE_REFRESH_EQUIP_ATTR":        331,
		"ESOURCE_BOSS_SCENE_REWARD":         332,
		"ESOURCE_NOVICE_CHARGE":             333,
		"ESOURCE_MAX":                       334,
	}
)

func (x ESource) Enum() *ESource {
	p := new(ESource)
	*p = x
	return p
}

func (x ESource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESource) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[12].Descriptor()
}

func (ESource) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[12]
}

func (x ESource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESource(num)
	return nil
}

// Deprecated: Use ESource.Descriptor instead.
func (ESource) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{12}
}

type ERepatchID int32

const (
	ERepatchID_EREPATCH_ID_MIN           ERepatchID = 0
	ERepatchID_EREPATCH_ID_MANUAL_PATCH5 ERepatchID = 1
	ERepatchID_EREPATCH_ID_MAX           ERepatchID = 2
)

// Enum value maps for ERepatchID.
var (
	ERepatchID_name = map[int32]string{
		0: "EREPATCH_ID_MIN",
		1: "EREPATCH_ID_MANUAL_PATCH5",
		2: "EREPATCH_ID_MAX",
	}
	ERepatchID_value = map[string]int32{
		"EREPATCH_ID_MIN":           0,
		"EREPATCH_ID_MANUAL_PATCH5": 1,
		"EREPATCH_ID_MAX":           2,
	}
)

func (x ERepatchID) Enum() *ERepatchID {
	p := new(ERepatchID)
	*p = x
	return p
}

func (x ERepatchID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERepatchID) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[13].Descriptor()
}

func (ERepatchID) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[13]
}

func (x ERepatchID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERepatchID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERepatchID(num)
	return nil
}

// Deprecated: Use ERepatchID.Descriptor instead.
func (ERepatchID) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{13}
}

type ESubSource int32

const (
	ESubSource_ESUBSOURCE_MIN                ESubSource = 0
	ESubSource_ESUBSOURCE_LOTTERY_COIN       ESubSource = 1
	ESubSource_ESUBSOURCE_LOTTERY_TICKET     ESubSource = 2
	ESubSource_ESUBSOURCE_LOTTERY_TEN_COMBOS ESubSource = 3
	ESubSource_ESUBSOURCE_MAX                ESubSource = 4
)

// Enum value maps for ESubSource.
var (
	ESubSource_name = map[int32]string{
		0: "ESUBSOURCE_MIN",
		1: "ESUBSOURCE_LOTTERY_COIN",
		2: "ESUBSOURCE_LOTTERY_TICKET",
		3: "ESUBSOURCE_LOTTERY_TEN_COMBOS",
		4: "ESUBSOURCE_MAX",
	}
	ESubSource_value = map[string]int32{
		"ESUBSOURCE_MIN":                0,
		"ESUBSOURCE_LOTTERY_COIN":       1,
		"ESUBSOURCE_LOTTERY_TICKET":     2,
		"ESUBSOURCE_LOTTERY_TEN_COMBOS": 3,
		"ESUBSOURCE_MAX":                4,
	}
)

func (x ESubSource) Enum() *ESubSource {
	p := new(ESubSource)
	*p = x
	return p
}

func (x ESubSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESubSource) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[14].Descriptor()
}

func (ESubSource) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[14]
}

func (x ESubSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESubSource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESubSource(num)
	return nil
}

// Deprecated: Use ESubSource.Descriptor instead.
func (ESubSource) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{14}
}

type EDoubleSource int32

const (
	EDoubleSource_EDOUBLESOURCE_MIN          EDoubleSource = 0
	EDoubleSource_EDOUBLESOURCE_GUILD_TASK   EDoubleSource = 1
	EDoubleSource_EDOUBLESOURCE_GUILD_DONATE EDoubleSource = 2
	EDoubleSource_EDOUBLESOURCE_GUILD_QUEST  EDoubleSource = 3
	EDoubleSource_EDOUBLESOURCE_MAX          EDoubleSource = 4
)

// Enum value maps for EDoubleSource.
var (
	EDoubleSource_name = map[int32]string{
		0: "EDOUBLESOURCE_MIN",
		1: "EDOUBLESOURCE_GUILD_TASK",
		2: "EDOUBLESOURCE_GUILD_DONATE",
		3: "EDOUBLESOURCE_GUILD_QUEST",
		4: "EDOUBLESOURCE_MAX",
	}
	EDoubleSource_value = map[string]int32{
		"EDOUBLESOURCE_MIN":          0,
		"EDOUBLESOURCE_GUILD_TASK":   1,
		"EDOUBLESOURCE_GUILD_DONATE": 2,
		"EDOUBLESOURCE_GUILD_QUEST":  3,
		"EDOUBLESOURCE_MAX":          4,
	}
)

func (x EDoubleSource) Enum() *EDoubleSource {
	p := new(EDoubleSource)
	*p = x
	return p
}

func (x EDoubleSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDoubleSource) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[15].Descriptor()
}

func (EDoubleSource) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[15]
}

func (x EDoubleSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDoubleSource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDoubleSource(num)
	return nil
}

// Deprecated: Use EDoubleSource.Descriptor instead.
func (EDoubleSource) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{15}
}

type EDeleteCharMark int32

const (
	EDeleteCharMark_EDELETECHARMARK_PACKAGE EDeleteCharMark = 1
)

// Enum value maps for EDeleteCharMark.
var (
	EDeleteCharMark_name = map[int32]string{
		1: "EDELETECHARMARK_PACKAGE",
	}
	EDeleteCharMark_value = map[string]int32{
		"EDELETECHARMARK_PACKAGE": 1,
	}
)

func (x EDeleteCharMark) Enum() *EDeleteCharMark {
	p := new(EDeleteCharMark)
	*p = x
	return p
}

func (x EDeleteCharMark) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDeleteCharMark) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[16].Descriptor()
}

func (EDeleteCharMark) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[16]
}

func (x EDeleteCharMark) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDeleteCharMark) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDeleteCharMark(num)
	return nil
}

// Deprecated: Use EDeleteCharMark.Descriptor instead.
func (EDeleteCharMark) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{16}
}

type ESummonType int32

const (
	ESummonType_ESUMMONTYPE_MIN    ESummonType = 0
	ESummonType_ESUMMONTYPE_BRANCH ESummonType = 1
	ESummonType_ESUMMONTYPE_MAX    ESummonType = 2
)

// Enum value maps for ESummonType.
var (
	ESummonType_name = map[int32]string{
		0: "ESUMMONTYPE_MIN",
		1: "ESUMMONTYPE_BRANCH",
		2: "ESUMMONTYPE_MAX",
	}
	ESummonType_value = map[string]int32{
		"ESUMMONTYPE_MIN":    0,
		"ESUMMONTYPE_BRANCH": 1,
		"ESUMMONTYPE_MAX":    2,
	}
)

func (x ESummonType) Enum() *ESummonType {
	p := new(ESummonType)
	*p = x
	return p
}

func (x ESummonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESummonType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[17].Descriptor()
}

func (ESummonType) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[17]
}

func (x ESummonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESummonType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESummonType(num)
	return nil
}

// Deprecated: Use ESummonType.Descriptor instead.
func (ESummonType) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{17}
}

type ETRADE_RET_CODE int32

const (
	ETRADE_RET_CODE_ETRADE_RET_CODE_SUCCESS                    ETRADE_RET_CODE = 0
	ETRADE_RET_CODE_ETRADE_RET_CODE_FAIL                       ETRADE_RET_CODE = 1
	ETRADE_RET_CODE_ETRADE_RET_CODE_INVALID_PRICE              ETRADE_RET_CODE = 100
	ETRADE_RET_CODE_ETRADE_RET_CODE_INVALID_COUNT              ETRADE_RET_CODE = 101
	ETRADE_RET_CODE_ETRADE_RET_CODE_NOT_ONLINE                 ETRADE_RET_CODE = 102
	ETRADE_RET_CODE_ETRADE_RET_CODE_CANNOT_SELL                ETRADE_RET_CODE = 103
	ETRADE_RET_CODE_ETRADE_RET_CODE_DB_ERROR                   ETRADE_RET_CODE = 104
	ETRADE_RET_CODE_ETRADE_RET_CODE_SYS_ERROR                  ETRADE_RET_CODE = 105
	ETRADE_RET_CODE_ETRADE_RET_CODE_CANNOT_FIND_USER_IN_SCENE  ETRADE_RET_CODE = 106
	ETRADE_RET_CODE_ETRADE_RET_CODE_CANNOT_MONEY_IS_NOT_ENOUGH ETRADE_RET_CODE = 107
	ETRADE_RET_CODE_ETRADE_RET_CODE_CANNOT_ITEM_IS_FROSTED     ETRADE_RET_CODE = 108
	ETRADE_RET_CODE_ETRADE_RET_CODE_CANNOT_PENDING_IS_FULL     ETRADE_RET_CODE = 109
	ETRADE_RET_CODE_ETRADE_RET_CODE_CANNOT_CANNOT_SELL         ETRADE_RET_CODE = 110
	ETRADE_RET_CODE_ETRADE_RET_CODE_PENDING_IS_SELLED          ETRADE_RET_CODE = 111
	ETRADE_RET_CODE_ETRADE_RET_CODE_PENDING_IS_LOCKED          ETRADE_RET_CODE = 112
	ETRADE_RET_CODE_ETRADE_RET_CODE_INVALID_PARAMS             ETRADE_RET_CODE = 113
	ETRADE_RET_CODE_ETRADE_RET_CODE_CFG_ERR                    ETRADE_RET_CODE = 114
	ETRADE_RET_CODE_ETRADE_RET_CODE_CANNOT_QUOTA_IS_NOT_ENOUGH ETRADE_RET_CODE = 115
)

// Enum value maps for ETRADE_RET_CODE.
var (
	ETRADE_RET_CODE_name = map[int32]string{
		0:   "ETRADE_RET_CODE_SUCCESS",
		1:   "ETRADE_RET_CODE_FAIL",
		100: "ETRADE_RET_CODE_INVALID_PRICE",
		101: "ETRADE_RET_CODE_INVALID_COUNT",
		102: "ETRADE_RET_CODE_NOT_ONLINE",
		103: "ETRADE_RET_CODE_CANNOT_SELL",
		104: "ETRADE_RET_CODE_DB_ERROR",
		105: "ETRADE_RET_CODE_SYS_ERROR",
		106: "ETRADE_RET_CODE_CANNOT_FIND_USER_IN_SCENE",
		107: "ETRADE_RET_CODE_CANNOT_MONEY_IS_NOT_ENOUGH",
		108: "ETRADE_RET_CODE_CANNOT_ITEM_IS_FROSTED",
		109: "ETRADE_RET_CODE_CANNOT_PENDING_IS_FULL",
		110: "ETRADE_RET_CODE_CANNOT_CANNOT_SELL",
		111: "ETRADE_RET_CODE_PENDING_IS_SELLED",
		112: "ETRADE_RET_CODE_PENDING_IS_LOCKED",
		113: "ETRADE_RET_CODE_INVALID_PARAMS",
		114: "ETRADE_RET_CODE_CFG_ERR",
		115: "ETRADE_RET_CODE_CANNOT_QUOTA_IS_NOT_ENOUGH",
	}
	ETRADE_RET_CODE_value = map[string]int32{
		"ETRADE_RET_CODE_SUCCESS":                    0,
		"ETRADE_RET_CODE_FAIL":                       1,
		"ETRADE_RET_CODE_INVALID_PRICE":              100,
		"ETRADE_RET_CODE_INVALID_COUNT":              101,
		"ETRADE_RET_CODE_NOT_ONLINE":                 102,
		"ETRADE_RET_CODE_CANNOT_SELL":                103,
		"ETRADE_RET_CODE_DB_ERROR":                   104,
		"ETRADE_RET_CODE_SYS_ERROR":                  105,
		"ETRADE_RET_CODE_CANNOT_FIND_USER_IN_SCENE":  106,
		"ETRADE_RET_CODE_CANNOT_MONEY_IS_NOT_ENOUGH": 107,
		"ETRADE_RET_CODE_CANNOT_ITEM_IS_FROSTED":     108,
		"ETRADE_RET_CODE_CANNOT_PENDING_IS_FULL":     109,
		"ETRADE_RET_CODE_CANNOT_CANNOT_SELL":         110,
		"ETRADE_RET_CODE_PENDING_IS_SELLED":          111,
		"ETRADE_RET_CODE_PENDING_IS_LOCKED":          112,
		"ETRADE_RET_CODE_INVALID_PARAMS":             113,
		"ETRADE_RET_CODE_CFG_ERR":                    114,
		"ETRADE_RET_CODE_CANNOT_QUOTA_IS_NOT_ENOUGH": 115,
	}
)

func (x ETRADE_RET_CODE) Enum() *ETRADE_RET_CODE {
	p := new(ETRADE_RET_CODE)
	*p = x
	return p
}

func (x ETRADE_RET_CODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETRADE_RET_CODE) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[18].Descriptor()
}

func (ETRADE_RET_CODE) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[18]
}

func (x ETRADE_RET_CODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETRADE_RET_CODE) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETRADE_RET_CODE(num)
	return nil
}

// Deprecated: Use ETRADE_RET_CODE.Descriptor instead.
func (ETRADE_RET_CODE) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{18}
}

type EAccountStatus int32

const (
	EAccountStatus_EACCOUNTSTATUS_MIN  EAccountStatus = 0
	EAccountStatus_EACCOUNTSTATUS_GAP  EAccountStatus = 1
	EAccountStatus_EACCOUNTSTATUS_LOCK EAccountStatus = 2
	EAccountStatus_EACCOUNTSTATUS_MAX  EAccountStatus = 4
)

// Enum value maps for EAccountStatus.
var (
	EAccountStatus_name = map[int32]string{
		0: "EACCOUNTSTATUS_MIN",
		1: "EACCOUNTSTATUS_GAP",
		2: "EACCOUNTSTATUS_LOCK",
		4: "EACCOUNTSTATUS_MAX",
	}
	EAccountStatus_value = map[string]int32{
		"EACCOUNTSTATUS_MIN":  0,
		"EACCOUNTSTATUS_GAP":  1,
		"EACCOUNTSTATUS_LOCK": 2,
		"EACCOUNTSTATUS_MAX":  4,
	}
)

func (x EAccountStatus) Enum() *EAccountStatus {
	p := new(EAccountStatus)
	*p = x
	return p
}

func (x EAccountStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAccountStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[19].Descriptor()
}

func (EAccountStatus) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[19]
}

func (x EAccountStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAccountStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAccountStatus(num)
	return nil
}

// Deprecated: Use EAccountStatus.Descriptor instead.
func (EAccountStatus) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{19}
}

type EBgmType int32

const (
	EBgmType_EBGM_TYPE_QUEST    EBgmType = 0
	EBgmType_EBGM_TYPE_ACTIVITY EBgmType = 1
	EBgmType_EBGM_TYPE_MUSICBOX EBgmType = 2
	EBgmType_EBGM_TYPE_REPLACE  EBgmType = 3
)

// Enum value maps for EBgmType.
var (
	EBgmType_name = map[int32]string{
		0: "EBGM_TYPE_QUEST",
		1: "EBGM_TYPE_ACTIVITY",
		2: "EBGM_TYPE_MUSICBOX",
		3: "EBGM_TYPE_REPLACE",
	}
	EBgmType_value = map[string]int32{
		"EBGM_TYPE_QUEST":    0,
		"EBGM_TYPE_ACTIVITY": 1,
		"EBGM_TYPE_MUSICBOX": 2,
		"EBGM_TYPE_REPLACE":  3,
	}
)

func (x EBgmType) Enum() *EBgmType {
	p := new(EBgmType)
	*p = x
	return p
}

func (x EBgmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBgmType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[20].Descriptor()
}

func (EBgmType) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[20]
}

func (x EBgmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBgmType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBgmType(num)
	return nil
}

// Deprecated: Use EBgmType.Descriptor instead.
func (EBgmType) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{20}
}

type EDepositCardType int32

const (
	EDepositCardType_ETITLE_TYPE_MONEY       EDepositCardType = 1
	EDepositCardType_ETITLE_TYPE_MONTH       EDepositCardType = 2
	EDepositCardType_ETITLE_TYPE_LOTTERY     EDepositCardType = 3
	EDepositCardType_ETITLE_TYPE_FUDAI       EDepositCardType = 4
	EDepositCardType_ETITLE_TYPE_VERSIONCARD EDepositCardType = 5
)

// Enum value maps for EDepositCardType.
var (
	EDepositCardType_name = map[int32]string{
		1: "ETITLE_TYPE_MONEY",
		2: "ETITLE_TYPE_MONTH",
		3: "ETITLE_TYPE_LOTTERY",
		4: "ETITLE_TYPE_FUDAI",
		5: "ETITLE_TYPE_VERSIONCARD",
	}
	EDepositCardType_value = map[string]int32{
		"ETITLE_TYPE_MONEY":       1,
		"ETITLE_TYPE_MONTH":       2,
		"ETITLE_TYPE_LOTTERY":     3,
		"ETITLE_TYPE_FUDAI":       4,
		"ETITLE_TYPE_VERSIONCARD": 5,
	}
)

func (x EDepositCardType) Enum() *EDepositCardType {
	p := new(EDepositCardType)
	*p = x
	return p
}

func (x EDepositCardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDepositCardType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[21].Descriptor()
}

func (EDepositCardType) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[21]
}

func (x EDepositCardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDepositCardType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDepositCardType(num)
	return nil
}

// Deprecated: Use EDepositCardType.Descriptor instead.
func (EDepositCardType) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{21}
}

type EBattleTimeEventType int32

const (
	EBattleTimeEventType_EBATTLETIMEEVENT_MIN                    EBattleTimeEventType = 0
	EBattleTimeEventType_EBATTLETIMEEVENT_DAY_ADD                EBattleTimeEventType = 1
	EBattleTimeEventType_EBATTLETIMEEVENT_CARD_ADD               EBattleTimeEventType = 2
	EBattleTimeEventType_EBATTLETIMEEVENT_MUSIC_ADD              EBattleTimeEventType = 3
	EBattleTimeEventType_EBATTLETIMEEVENT_MUSICSKILL_ADD         EBattleTimeEventType = 4
	EBattleTimeEventType_EBATTLETIMEEVENT_MUSIC_GM_ADD           EBattleTimeEventType = 5
	EBattleTimeEventType_EBATTLETIMEEVENT_TUTORPOTION_ADD        EBattleTimeEventType = 6
	EBattleTimeEventType_EBATTLETIMEEVENT_TUTOR_WITH_STUDENT_ADD EBattleTimeEventType = 7
	EBattleTimeEventType_EBATTLETIMEEVENT_PET_USE                EBattleTimeEventType = 8
	EBattleTimeEventType_EBATTLETIMEEVENT_HEADWEAR_USE           EBattleTimeEventType = 9
	EBattleTimeEventType_EBATTLETIMEEVENT_EXP_USE                EBattleTimeEventType = 10
	EBattleTimeEventType_EBATTLETIMEEVENT_GM_USE                 EBattleTimeEventType = 11
	EBattleTimeEventType_EBATTLETIMEEVENT_GREEN_USE              EBattleTimeEventType = 12
	EBattleTimeEventType_EBATTLETIMEEVENT_YELLOW_USE             EBattleTimeEventType = 13
	EBattleTimeEventType_EBATTLETIMEEVENT_RED_USE                EBattleTimeEventType = 14
	EBattleTimeEventType_EBATTLETIMEEVENT_CHAIN_USE              EBattleTimeEventType = 15
	EBattleTimeEventType_EBATTLETIMEEVENT_METEORITE_USE          EBattleTimeEventType = 16
	EBattleTimeEventType_EBATTLETIMEEVENT_UNKNOWN_USE            EBattleTimeEventType = 17
	EBattleTimeEventType_EBATTLETIMEEVENT_POWERPOTION_ADD        EBattleTimeEventType = 18
	EBattleTimeEventType_EBATTLETIMEEVENT_CRACK_USE              EBattleTimeEventType = 19
	EBattleTimeEventType_EBATTLETIMEEVENT_PVECARD_USE            EBattleTimeEventType = 20
	EBattleTimeEventType_EBATTLETIMEEVENT_STORM_BOSS             EBattleTimeEventType = 21
	EBattleTimeEventType_EBATTLETIMEEVENT_PLAYPOTION_ADD         EBattleTimeEventType = 22
	EBattleTimeEventType_EBATTLETIMEEVENT_PLAYTIME_REST          EBattleTimeEventType = 23
	EBattleTimeEventType_EBATTLETIMEEVENT_PLAYTIME_WEEK_ADD      EBattleTimeEventType = 24
	EBattleTimeEventType_EBATTLETIMEEVENT_BOSS_SCENE_USE         EBattleTimeEventType = 25
)

// Enum value maps for EBattleTimeEventType.
var (
	EBattleTimeEventType_name = map[int32]string{
		0:  "EBATTLETIMEEVENT_MIN",
		1:  "EBATTLETIMEEVENT_DAY_ADD",
		2:  "EBATTLETIMEEVENT_CARD_ADD",
		3:  "EBATTLETIMEEVENT_MUSIC_ADD",
		4:  "EBATTLETIMEEVENT_MUSICSKILL_ADD",
		5:  "EBATTLETIMEEVENT_MUSIC_GM_ADD",
		6:  "EBATTLETIMEEVENT_TUTORPOTION_ADD",
		7:  "EBATTLETIMEEVENT_TUTOR_WITH_STUDENT_ADD",
		8:  "EBATTLETIMEEVENT_PET_USE",
		9:  "EBATTLETIMEEVENT_HEADWEAR_USE",
		10: "EBATTLETIMEEVENT_EXP_USE",
		11: "EBATTLETIMEEVENT_GM_USE",
		12: "EBATTLETIMEEVENT_GREEN_USE",
		13: "EBATTLETIMEEVENT_YELLOW_USE",
		14: "EBATTLETIMEEVENT_RED_USE",
		15: "EBATTLETIMEEVENT_CHAIN_USE",
		16: "EBATTLETIMEEVENT_METEORITE_USE",
		17: "EBATTLETIMEEVENT_UNKNOWN_USE",
		18: "EBATTLETIMEEVENT_POWERPOTION_ADD",
		19: "EBATTLETIMEEVENT_CRACK_USE",
		20: "EBATTLETIMEEVENT_PVECARD_USE",
		21: "EBATTLETIMEEVENT_STORM_BOSS",
		22: "EBATTLETIMEEVENT_PLAYPOTION_ADD",
		23: "EBATTLETIMEEVENT_PLAYTIME_REST",
		24: "EBATTLETIMEEVENT_PLAYTIME_WEEK_ADD",
		25: "EBATTLETIMEEVENT_BOSS_SCENE_USE",
	}
	EBattleTimeEventType_value = map[string]int32{
		"EBATTLETIMEEVENT_MIN":                    0,
		"EBATTLETIMEEVENT_DAY_ADD":                1,
		"EBATTLETIMEEVENT_CARD_ADD":               2,
		"EBATTLETIMEEVENT_MUSIC_ADD":              3,
		"EBATTLETIMEEVENT_MUSICSKILL_ADD":         4,
		"EBATTLETIMEEVENT_MUSIC_GM_ADD":           5,
		"EBATTLETIMEEVENT_TUTORPOTION_ADD":        6,
		"EBATTLETIMEEVENT_TUTOR_WITH_STUDENT_ADD": 7,
		"EBATTLETIMEEVENT_PET_USE":                8,
		"EBATTLETIMEEVENT_HEADWEAR_USE":           9,
		"EBATTLETIMEEVENT_EXP_USE":                10,
		"EBATTLETIMEEVENT_GM_USE":                 11,
		"EBATTLETIMEEVENT_GREEN_USE":              12,
		"EBATTLETIMEEVENT_YELLOW_USE":             13,
		"EBATTLETIMEEVENT_RED_USE":                14,
		"EBATTLETIMEEVENT_CHAIN_USE":              15,
		"EBATTLETIMEEVENT_METEORITE_USE":          16,
		"EBATTLETIMEEVENT_UNKNOWN_USE":            17,
		"EBATTLETIMEEVENT_POWERPOTION_ADD":        18,
		"EBATTLETIMEEVENT_CRACK_USE":              19,
		"EBATTLETIMEEVENT_PVECARD_USE":            20,
		"EBATTLETIMEEVENT_STORM_BOSS":             21,
		"EBATTLETIMEEVENT_PLAYPOTION_ADD":         22,
		"EBATTLETIMEEVENT_PLAYTIME_REST":          23,
		"EBATTLETIMEEVENT_PLAYTIME_WEEK_ADD":      24,
		"EBATTLETIMEEVENT_BOSS_SCENE_USE":         25,
	}
)

func (x EBattleTimeEventType) Enum() *EBattleTimeEventType {
	p := new(EBattleTimeEventType)
	*p = x
	return p
}

func (x EBattleTimeEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBattleTimeEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[22].Descriptor()
}

func (EBattleTimeEventType) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[22]
}

func (x EBattleTimeEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBattleTimeEventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBattleTimeEventType(num)
	return nil
}

// Deprecated: Use EBattleTimeEventType.Descriptor instead.
func (EBattleTimeEventType) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{22}
}

type EBattleTimeCostType int32

const (
	EBattleTimeCostType_EBATTLETIMECOST_MIN    EBattleTimeCostType = 0
	EBattleTimeCostType_EBATTLETIMECOST_SYSTEM EBattleTimeCostType = 1
	EBattleTimeCostType_EBATTLETIMECOST_MUSIC  EBattleTimeCostType = 2
	EBattleTimeCostType_EBATTLETIMECOST_TUTOR  EBattleTimeCostType = 3
	EBattleTimeCostType_EBATTLETIMECOST_POWER  EBattleTimeCostType = 4
)

// Enum value maps for EBattleTimeCostType.
var (
	EBattleTimeCostType_name = map[int32]string{
		0: "EBATTLETIMECOST_MIN",
		1: "EBATTLETIMECOST_SYSTEM",
		2: "EBATTLETIMECOST_MUSIC",
		3: "EBATTLETIMECOST_TUTOR",
		4: "EBATTLETIMECOST_POWER",
	}
	EBattleTimeCostType_value = map[string]int32{
		"EBATTLETIMECOST_MIN":    0,
		"EBATTLETIMECOST_SYSTEM": 1,
		"EBATTLETIMECOST_MUSIC":  2,
		"EBATTLETIMECOST_TUTOR":  3,
		"EBATTLETIMECOST_POWER":  4,
	}
)

func (x EBattleTimeCostType) Enum() *EBattleTimeCostType {
	p := new(EBattleTimeCostType)
	*p = x
	return p
}

func (x EBattleTimeCostType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBattleTimeCostType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[23].Descriptor()
}

func (EBattleTimeCostType) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[23]
}

func (x EBattleTimeCostType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBattleTimeCostType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBattleTimeCostType(num)
	return nil
}

// Deprecated: Use EBattleTimeCostType.Descriptor instead.
func (EBattleTimeCostType) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{23}
}

type EPhonePlat int32

const (
	EPhonePlat_PHONE_PLAT_ANDROID EPhonePlat = 1
	EPhonePlat_PHONE_PLAT_IOS     EPhonePlat = 2
)

// Enum value maps for EPhonePlat.
var (
	EPhonePlat_name = map[int32]string{
		1: "PHONE_PLAT_ANDROID",
		2: "PHONE_PLAT_IOS",
	}
	EPhonePlat_value = map[string]int32{
		"PHONE_PLAT_ANDROID": 1,
		"PHONE_PLAT_IOS":     2,
	}
)

func (x EPhonePlat) Enum() *EPhonePlat {
	p := new(EPhonePlat)
	*p = x
	return p
}

func (x EPhonePlat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPhonePlat) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[24].Descriptor()
}

func (EPhonePlat) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[24]
}

func (x EPhonePlat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPhonePlat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPhonePlat(num)
	return nil
}

// Deprecated: Use EPhonePlat.Descriptor instead.
func (EPhonePlat) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{24}
}

type EFucnParam_Rename int32

const (
	EFucnParam_Rename_EFUNCPARAM_RENAME_USER          EFucnParam_Rename = 1
	EFucnParam_Rename_EFUNCPARAM_RENAME_PET           EFucnParam_Rename = 2
	EFucnParam_Rename_EFUNCPARAM_RENAME_GUILD         EFucnParam_Rename = 3
	EFucnParam_Rename_EFUNCPARAM_RENAME_GUILD_JOBNAME EFucnParam_Rename = 4
	EFucnParam_Rename_EFUNCPARAM_RENAME_GUILD_RECRUIT EFucnParam_Rename = 5
	EFucnParam_Rename_EFUNCPARAM_RENAME_GUILD_BOARD   EFucnParam_Rename = 6
	EFucnParam_Rename_EFUNCPARAM_RENAME_HOME          EFucnParam_Rename = 7
)

// Enum value maps for EFucnParam_Rename.
var (
	EFucnParam_Rename_name = map[int32]string{
		1: "EFUNCPARAM_RENAME_USER",
		2: "EFUNCPARAM_RENAME_PET",
		3: "EFUNCPARAM_RENAME_GUILD",
		4: "EFUNCPARAM_RENAME_GUILD_JOBNAME",
		5: "EFUNCPARAM_RENAME_GUILD_RECRUIT",
		6: "EFUNCPARAM_RENAME_GUILD_BOARD",
		7: "EFUNCPARAM_RENAME_HOME",
	}
	EFucnParam_Rename_value = map[string]int32{
		"EFUNCPARAM_RENAME_USER":          1,
		"EFUNCPARAM_RENAME_PET":           2,
		"EFUNCPARAM_RENAME_GUILD":         3,
		"EFUNCPARAM_RENAME_GUILD_JOBNAME": 4,
		"EFUNCPARAM_RENAME_GUILD_RECRUIT": 5,
		"EFUNCPARAM_RENAME_GUILD_BOARD":   6,
		"EFUNCPARAM_RENAME_HOME":          7,
	}
)

func (x EFucnParam_Rename) Enum() *EFucnParam_Rename {
	p := new(EFucnParam_Rename)
	*p = x
	return p
}

func (x EFucnParam_Rename) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFucnParam_Rename) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[25].Descriptor()
}

func (EFucnParam_Rename) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[25]
}

func (x EFucnParam_Rename) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFucnParam_Rename) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFucnParam_Rename(num)
	return nil
}

// Deprecated: Use EFucnParam_Rename.Descriptor instead.
func (EFucnParam_Rename) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{25}
}

type EExitPointType int32

const (
	EExitPointType_EEXITPOINTTYPE_MIN       EExitPointType = 0
	EExitPointType_EEXITPOINTTYPE_GVG_DEF   EExitPointType = 1
	EExitPointType_EEXITPOINTTYPE_GUILD_GVG EExitPointType = 2
)

// Enum value maps for EExitPointType.
var (
	EExitPointType_name = map[int32]string{
		0: "EEXITPOINTTYPE_MIN",
		1: "EEXITPOINTTYPE_GVG_DEF",
		2: "EEXITPOINTTYPE_GUILD_GVG",
	}
	EExitPointType_value = map[string]int32{
		"EEXITPOINTTYPE_MIN":       0,
		"EEXITPOINTTYPE_GVG_DEF":   1,
		"EEXITPOINTTYPE_GUILD_GVG": 2,
	}
)

func (x EExitPointType) Enum() *EExitPointType {
	p := new(EExitPointType)
	*p = x
	return p
}

func (x EExitPointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EExitPointType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProtoCommon_proto_enumTypes[26].Descriptor()
}

func (EExitPointType) Type() protoreflect.EnumType {
	return &file_ProtoCommon_proto_enumTypes[26]
}

func (x EExitPointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EExitPointType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EExitPointType(num)
	return nil
}

// Deprecated: Use EExitPointType.Descriptor instead.
func (EExitPointType) EnumDescriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{26}
}

type ScenePos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y *int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Z *int32 `protobuf:"varint,3,opt,name=z" json:"z,omitempty"`
}

func (x *ScenePos) Reset() {
	*x = ScenePos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScenePos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePos) ProtoMessage() {}

func (x *ScenePos) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePos.ProtoReflect.Descriptor instead.
func (*ScenePos) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{0}
}

func (x *ScenePos) GetX() int32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *ScenePos) GetY() int32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *ScenePos) GetZ() int32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type SnapShotDataPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Baselv      *uint32      `protobuf:"varint,2,opt,name=baselv,def=0" json:"baselv,omitempty"`
	Hair        *uint32      `protobuf:"varint,3,opt,name=hair,def=0" json:"hair,omitempty"`
	Haircolor   *uint32      `protobuf:"varint,4,opt,name=haircolor,def=0" json:"haircolor,omitempty"`
	Lefthand    *uint32      `protobuf:"varint,5,opt,name=lefthand,def=0" json:"lefthand,omitempty"`
	Righthand   *uint32      `protobuf:"varint,6,opt,name=righthand,def=0" json:"righthand,omitempty"`
	Body        *uint32      `protobuf:"varint,7,opt,name=body,def=0" json:"body,omitempty"`
	Head        *uint32      `protobuf:"varint,8,opt,name=head,def=0" json:"head,omitempty"`
	Back        *uint32      `protobuf:"varint,9,opt,name=back,def=0" json:"back,omitempty"`
	Face        *uint32      `protobuf:"varint,10,opt,name=face,def=0" json:"face,omitempty"`
	Tail        *uint32      `protobuf:"varint,11,opt,name=tail,def=0" json:"tail,omitempty"`
	Mount       *uint32      `protobuf:"varint,12,opt,name=mount,def=0" json:"mount,omitempty"`
	Eye         *uint32      `protobuf:"varint,19,opt,name=eye,def=0" json:"eye,omitempty"`
	Partnerid   *uint32      `protobuf:"varint,20,opt,name=partnerid,def=0" json:"partnerid,omitempty"`
	Portrait    *uint32      `protobuf:"varint,21,opt,name=portrait,def=0" json:"portrait,omitempty"`
	Mouth       *uint32      `protobuf:"varint,22,opt,name=mouth,def=0" json:"mouth,omitempty"`
	Clothcolor  *uint32      `protobuf:"varint,23,opt,name=clothcolor,def=0" json:"clothcolor,omitempty"`
	Gender      *EGender     `protobuf:"varint,13,opt,name=gender,enum=Cmd.EGender,def=0" json:"gender,omitempty"`
	Profession  *EProfession `protobuf:"varint,14,opt,name=profession,enum=Cmd.EProfession,def=0" json:"profession,omitempty"`
	Name        *string      `protobuf:"bytes,15,opt,name=name" json:"name,omitempty"`
	Sequence    *uint32      `protobuf:"varint,16,opt,name=sequence,def=0" json:"sequence,omitempty"`
	Isopen      *uint32      `protobuf:"varint,17,opt,name=isopen,def=0" json:"isopen,omitempty"`
	Deletetime  *uint32      `protobuf:"varint,18,opt,name=deletetime,def=0" json:"deletetime,omitempty"`
	Isban       *bool        `protobuf:"varint,24,opt,name=isban,def=0" json:"isban,omitempty"`
	NameInvalid *bool        `protobuf:"varint,25,opt,name=name_invalid,json=nameInvalid,def=0" json:"name_invalid,omitempty"`
	DeleteMarks *uint32      `protobuf:"varint,26,opt,name=delete_marks,json=deleteMarks" json:"delete_marks,omitempty"`
}

// Default values for SnapShotDataPB fields.
const (
	Default_SnapShotDataPB_Baselv      = uint32(0)
	Default_SnapShotDataPB_Hair        = uint32(0)
	Default_SnapShotDataPB_Haircolor   = uint32(0)
	Default_SnapShotDataPB_Lefthand    = uint32(0)
	Default_SnapShotDataPB_Righthand   = uint32(0)
	Default_SnapShotDataPB_Body        = uint32(0)
	Default_SnapShotDataPB_Head        = uint32(0)
	Default_SnapShotDataPB_Back        = uint32(0)
	Default_SnapShotDataPB_Face        = uint32(0)
	Default_SnapShotDataPB_Tail        = uint32(0)
	Default_SnapShotDataPB_Mount       = uint32(0)
	Default_SnapShotDataPB_Eye         = uint32(0)
	Default_SnapShotDataPB_Partnerid   = uint32(0)
	Default_SnapShotDataPB_Portrait    = uint32(0)
	Default_SnapShotDataPB_Mouth       = uint32(0)
	Default_SnapShotDataPB_Clothcolor  = uint32(0)
	Default_SnapShotDataPB_Gender      = EGender_EGENDER_MIN
	Default_SnapShotDataPB_Profession  = EProfession_EPROFESSION_MIN
	Default_SnapShotDataPB_Sequence    = uint32(0)
	Default_SnapShotDataPB_Isopen      = uint32(0)
	Default_SnapShotDataPB_Deletetime  = uint32(0)
	Default_SnapShotDataPB_Isban       = bool(false)
	Default_SnapShotDataPB_NameInvalid = bool(false)
)

func (x *SnapShotDataPB) Reset() {
	*x = SnapShotDataPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapShotDataPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapShotDataPB) ProtoMessage() {}

func (x *SnapShotDataPB) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapShotDataPB.ProtoReflect.Descriptor instead.
func (*SnapShotDataPB) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{1}
}

func (x *SnapShotDataPB) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SnapShotDataPB) GetBaselv() uint32 {
	if x != nil && x.Baselv != nil {
		return *x.Baselv
	}
	return Default_SnapShotDataPB_Baselv
}

func (x *SnapShotDataPB) GetHair() uint32 {
	if x != nil && x.Hair != nil {
		return *x.Hair
	}
	return Default_SnapShotDataPB_Hair
}

func (x *SnapShotDataPB) GetHaircolor() uint32 {
	if x != nil && x.Haircolor != nil {
		return *x.Haircolor
	}
	return Default_SnapShotDataPB_Haircolor
}

func (x *SnapShotDataPB) GetLefthand() uint32 {
	if x != nil && x.Lefthand != nil {
		return *x.Lefthand
	}
	return Default_SnapShotDataPB_Lefthand
}

func (x *SnapShotDataPB) GetRighthand() uint32 {
	if x != nil && x.Righthand != nil {
		return *x.Righthand
	}
	return Default_SnapShotDataPB_Righthand
}

func (x *SnapShotDataPB) GetBody() uint32 {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return Default_SnapShotDataPB_Body
}

func (x *SnapShotDataPB) GetHead() uint32 {
	if x != nil && x.Head != nil {
		return *x.Head
	}
	return Default_SnapShotDataPB_Head
}

func (x *SnapShotDataPB) GetBack() uint32 {
	if x != nil && x.Back != nil {
		return *x.Back
	}
	return Default_SnapShotDataPB_Back
}

func (x *SnapShotDataPB) GetFace() uint32 {
	if x != nil && x.Face != nil {
		return *x.Face
	}
	return Default_SnapShotDataPB_Face
}

func (x *SnapShotDataPB) GetTail() uint32 {
	if x != nil && x.Tail != nil {
		return *x.Tail
	}
	return Default_SnapShotDataPB_Tail
}

func (x *SnapShotDataPB) GetMount() uint32 {
	if x != nil && x.Mount != nil {
		return *x.Mount
	}
	return Default_SnapShotDataPB_Mount
}

func (x *SnapShotDataPB) GetEye() uint32 {
	if x != nil && x.Eye != nil {
		return *x.Eye
	}
	return Default_SnapShotDataPB_Eye
}

func (x *SnapShotDataPB) GetPartnerid() uint32 {
	if x != nil && x.Partnerid != nil {
		return *x.Partnerid
	}
	return Default_SnapShotDataPB_Partnerid
}

func (x *SnapShotDataPB) GetPortrait() uint32 {
	if x != nil && x.Portrait != nil {
		return *x.Portrait
	}
	return Default_SnapShotDataPB_Portrait
}

func (x *SnapShotDataPB) GetMouth() uint32 {
	if x != nil && x.Mouth != nil {
		return *x.Mouth
	}
	return Default_SnapShotDataPB_Mouth
}

func (x *SnapShotDataPB) GetClothcolor() uint32 {
	if x != nil && x.Clothcolor != nil {
		return *x.Clothcolor
	}
	return Default_SnapShotDataPB_Clothcolor
}

func (x *SnapShotDataPB) GetGender() EGender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Default_SnapShotDataPB_Gender
}

func (x *SnapShotDataPB) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return Default_SnapShotDataPB_Profession
}

func (x *SnapShotDataPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SnapShotDataPB) GetSequence() uint32 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return Default_SnapShotDataPB_Sequence
}

func (x *SnapShotDataPB) GetIsopen() uint32 {
	if x != nil && x.Isopen != nil {
		return *x.Isopen
	}
	return Default_SnapShotDataPB_Isopen
}

func (x *SnapShotDataPB) GetDeletetime() uint32 {
	if x != nil && x.Deletetime != nil {
		return *x.Deletetime
	}
	return Default_SnapShotDataPB_Deletetime
}

func (x *SnapShotDataPB) GetIsban() bool {
	if x != nil && x.Isban != nil {
		return *x.Isban
	}
	return Default_SnapShotDataPB_Isban
}

func (x *SnapShotDataPB) GetNameInvalid() bool {
	if x != nil && x.NameInvalid != nil {
		return *x.NameInvalid
	}
	return Default_SnapShotDataPB_NameInvalid
}

func (x *SnapShotDataPB) GetDeleteMarks() uint32 {
	if x != nil && x.DeleteMarks != nil {
		return *x.DeleteMarks
	}
	return 0
}

type Pos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x,def=0" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y,def=0" json:"y,omitempty"`
	Z *float32 `protobuf:"fixed32,3,opt,name=z,def=0" json:"z,omitempty"`
}

// Default values for Pos fields.
const (
	Default_Pos_X = float32(0)
	Default_Pos_Y = float32(0)
	Default_Pos_Z = float32(0)
)

func (x *Pos) Reset() {
	*x = Pos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pos) ProtoMessage() {}

func (x *Pos) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pos.ProtoReflect.Descriptor instead.
func (*Pos) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{2}
}

func (x *Pos) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return Default_Pos_X
}

func (x *Pos) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return Default_Pos_Y
}

func (x *Pos) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return Default_Pos_Z
}

type NpcDefineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *int32       `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Name           *string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Pos            *Pos         `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
	Range          *int32       `protobuf:"varint,4,opt,name=range,def=0" json:"range,omitempty"`
	Dir            *int32       `protobuf:"varint,5,opt,name=dir,def=0" json:"dir,omitempty"`
	Reborn         *int32       `protobuf:"varint,6,opt,name=reborn,def=0" json:"reborn,omitempty"`
	Territory      *int32       `protobuf:"varint,7,opt,name=territory,def=0" json:"territory,omitempty"`
	Scalemin       *float32     `protobuf:"fixed32,8,opt,name=scalemin,def=0" json:"scalemin,omitempty"`
	Scalemax       *float32     `protobuf:"fixed32,9,opt,name=scalemax,def=0" json:"scalemax,omitempty"`
	Life           *int32       `protobuf:"varint,10,opt,name=life,def=0" json:"life,omitempty"`
	Behaviours     *int32       `protobuf:"varint,11,opt,name=behaviours,def=0" json:"behaviours,omitempty"`
	Search         *int32       `protobuf:"varint,13,opt,name=search,def=0" json:"search,omitempty"`
	Uniqueid       *int32       `protobuf:"varint,14,opt,name=uniqueid,def=0" json:"uniqueid,omitempty"`
	Gearorgstate   *int32       `protobuf:"varint,15,opt,name=gearorgstate,def=0" json:"gearorgstate,omitempty"`
	Purify         *int32       `protobuf:"varint,16,opt,name=purify,def=0" json:"purify,omitempty"`
	Attsafelv      *int32       `protobuf:"varint,17,opt,name=attsafelv,def=0" json:"attsafelv,omitempty"`
	Disptime       *int32       `protobuf:"varint,18,opt,name=disptime,def=0" json:"disptime,omitempty"`
	Gearprivate    *int32       `protobuf:"varint,19,opt,name=gearprivate,def=0" json:"gearprivate,omitempty"`
	Level          *int32       `protobuf:"varint,20,opt,name=level,def=0" json:"level,omitempty"`
	Waitaction     *string      `protobuf:"bytes,21,opt,name=waitaction" json:"waitaction,omitempty"`
	Stype          *ESummonType `protobuf:"varint,22,opt,name=stype,enum=Cmd.ESummonType,def=0" json:"stype,omitempty"`
	Superai        []int32      `protobuf:"varint,23,rep,name=superai" json:"superai,omitempty"`
	Pursue         *int32       `protobuf:"varint,24,opt,name=pursue,def=0" json:"pursue,omitempty"`
	Pursuetime     *int32       `protobuf:"varint,25,opt,name=pursuetime,def=0" json:"pursuetime,omitempty"`
	Weaponpetid    *int32       `protobuf:"varint,26,opt,name=weaponpetid,def=0" json:"weaponpetid,omitempty"`
	Deadlv         *int32       `protobuf:"varint,27,opt,name=deadlv,def=0" json:"deadlv,omitempty"`
	Deadrewardids  []int32      `protobuf:"varint,28,rep,name=deadrewardids" json:"deadrewardids,omitempty"`
	Blockpos       *int32       `protobuf:"varint,29,opt,name=blockpos,def=0" json:"blockpos,omitempty"`
	AttackMonsters []uint32     `protobuf:"varint,30,rep,name=attack_monsters,json=attackMonsters" json:"attack_monsters,omitempty"`
	Walkid         *uint32      `protobuf:"varint,31,opt,name=walkid,def=0" json:"walkid,omitempty"`
	SearchBuffids  []uint32     `protobuf:"varint,32,rep,name=search_buffids,json=searchBuffids" json:"search_buffids,omitempty"`
	Motionactionid *uint32      `protobuf:"varint,33,opt,name=motionactionid" json:"motionactionid,omitempty"`
	Boxid          *uint32      `protobuf:"varint,34,opt,name=boxid" json:"boxid,omitempty"`
	Boxfeature     *uint32      `protobuf:"varint,35,opt,name=boxfeature" json:"boxfeature,omitempty"`
	Affix          []uint32     `protobuf:"varint,36,rep,name=affix" json:"affix,omitempty"`
	Direction      *uint32      `protobuf:"varint,37,opt,name=direction" json:"direction,omitempty"`
	Puzzlemotionid *uint32      `protobuf:"varint,39,opt,name=puzzlemotionid" json:"puzzlemotionid,omitempty"`
	Objnpc         *bool        `protobuf:"varint,38,opt,name=objnpc" json:"objnpc,omitempty"`
	PushLimit      *uint32      `protobuf:"varint,40,opt,name=push_limit,json=pushLimit" json:"push_limit,omitempty"`
	Isveer         *bool        `protobuf:"varint,41,opt,name=isveer" json:"isveer,omitempty"`
	Showname       *uint32      `protobuf:"varint,42,opt,name=showname" json:"showname,omitempty"`
}

// Default values for NpcDefineData fields.
const (
	Default_NpcDefineData_Id           = int32(0)
	Default_NpcDefineData_Range        = int32(0)
	Default_NpcDefineData_Dir          = int32(0)
	Default_NpcDefineData_Reborn       = int32(0)
	Default_NpcDefineData_Territory    = int32(0)
	Default_NpcDefineData_Scalemin     = float32(0)
	Default_NpcDefineData_Scalemax     = float32(0)
	Default_NpcDefineData_Life         = int32(0)
	Default_NpcDefineData_Behaviours   = int32(0)
	Default_NpcDefineData_Search       = int32(0)
	Default_NpcDefineData_Uniqueid     = int32(0)
	Default_NpcDefineData_Gearorgstate = int32(0)
	Default_NpcDefineData_Purify       = int32(0)
	Default_NpcDefineData_Attsafelv    = int32(0)
	Default_NpcDefineData_Disptime     = int32(0)
	Default_NpcDefineData_Gearprivate  = int32(0)
	Default_NpcDefineData_Level        = int32(0)
	Default_NpcDefineData_Stype        = ESummonType_ESUMMONTYPE_MIN
	Default_NpcDefineData_Pursue       = int32(0)
	Default_NpcDefineData_Pursuetime   = int32(0)
	Default_NpcDefineData_Weaponpetid  = int32(0)
	Default_NpcDefineData_Deadlv       = int32(0)
	Default_NpcDefineData_Blockpos     = int32(0)
	Default_NpcDefineData_Walkid       = uint32(0)
)

func (x *NpcDefineData) Reset() {
	*x = NpcDefineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpcDefineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpcDefineData) ProtoMessage() {}

func (x *NpcDefineData) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpcDefineData.ProtoReflect.Descriptor instead.
func (*NpcDefineData) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{3}
}

func (x *NpcDefineData) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_NpcDefineData_Id
}

func (x *NpcDefineData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NpcDefineData) GetPos() *Pos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *NpcDefineData) GetRange() int32 {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return Default_NpcDefineData_Range
}

func (x *NpcDefineData) GetDir() int32 {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return Default_NpcDefineData_Dir
}

func (x *NpcDefineData) GetReborn() int32 {
	if x != nil && x.Reborn != nil {
		return *x.Reborn
	}
	return Default_NpcDefineData_Reborn
}

func (x *NpcDefineData) GetTerritory() int32 {
	if x != nil && x.Territory != nil {
		return *x.Territory
	}
	return Default_NpcDefineData_Territory
}

func (x *NpcDefineData) GetScalemin() float32 {
	if x != nil && x.Scalemin != nil {
		return *x.Scalemin
	}
	return Default_NpcDefineData_Scalemin
}

func (x *NpcDefineData) GetScalemax() float32 {
	if x != nil && x.Scalemax != nil {
		return *x.Scalemax
	}
	return Default_NpcDefineData_Scalemax
}

func (x *NpcDefineData) GetLife() int32 {
	if x != nil && x.Life != nil {
		return *x.Life
	}
	return Default_NpcDefineData_Life
}

func (x *NpcDefineData) GetBehaviours() int32 {
	if x != nil && x.Behaviours != nil {
		return *x.Behaviours
	}
	return Default_NpcDefineData_Behaviours
}

func (x *NpcDefineData) GetSearch() int32 {
	if x != nil && x.Search != nil {
		return *x.Search
	}
	return Default_NpcDefineData_Search
}

func (x *NpcDefineData) GetUniqueid() int32 {
	if x != nil && x.Uniqueid != nil {
		return *x.Uniqueid
	}
	return Default_NpcDefineData_Uniqueid
}

func (x *NpcDefineData) GetGearorgstate() int32 {
	if x != nil && x.Gearorgstate != nil {
		return *x.Gearorgstate
	}
	return Default_NpcDefineData_Gearorgstate
}

func (x *NpcDefineData) GetPurify() int32 {
	if x != nil && x.Purify != nil {
		return *x.Purify
	}
	return Default_NpcDefineData_Purify
}

func (x *NpcDefineData) GetAttsafelv() int32 {
	if x != nil && x.Attsafelv != nil {
		return *x.Attsafelv
	}
	return Default_NpcDefineData_Attsafelv
}

func (x *NpcDefineData) GetDisptime() int32 {
	if x != nil && x.Disptime != nil {
		return *x.Disptime
	}
	return Default_NpcDefineData_Disptime
}

func (x *NpcDefineData) GetGearprivate() int32 {
	if x != nil && x.Gearprivate != nil {
		return *x.Gearprivate
	}
	return Default_NpcDefineData_Gearprivate
}

func (x *NpcDefineData) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return Default_NpcDefineData_Level
}

func (x *NpcDefineData) GetWaitaction() string {
	if x != nil && x.Waitaction != nil {
		return *x.Waitaction
	}
	return ""
}

func (x *NpcDefineData) GetStype() ESummonType {
	if x != nil && x.Stype != nil {
		return *x.Stype
	}
	return Default_NpcDefineData_Stype
}

func (x *NpcDefineData) GetSuperai() []int32 {
	if x != nil {
		return x.Superai
	}
	return nil
}

func (x *NpcDefineData) GetPursue() int32 {
	if x != nil && x.Pursue != nil {
		return *x.Pursue
	}
	return Default_NpcDefineData_Pursue
}

func (x *NpcDefineData) GetPursuetime() int32 {
	if x != nil && x.Pursuetime != nil {
		return *x.Pursuetime
	}
	return Default_NpcDefineData_Pursuetime
}

func (x *NpcDefineData) GetWeaponpetid() int32 {
	if x != nil && x.Weaponpetid != nil {
		return *x.Weaponpetid
	}
	return Default_NpcDefineData_Weaponpetid
}

func (x *NpcDefineData) GetDeadlv() int32 {
	if x != nil && x.Deadlv != nil {
		return *x.Deadlv
	}
	return Default_NpcDefineData_Deadlv
}

func (x *NpcDefineData) GetDeadrewardids() []int32 {
	if x != nil {
		return x.Deadrewardids
	}
	return nil
}

func (x *NpcDefineData) GetBlockpos() int32 {
	if x != nil && x.Blockpos != nil {
		return *x.Blockpos
	}
	return Default_NpcDefineData_Blockpos
}

func (x *NpcDefineData) GetAttackMonsters() []uint32 {
	if x != nil {
		return x.AttackMonsters
	}
	return nil
}

func (x *NpcDefineData) GetWalkid() uint32 {
	if x != nil && x.Walkid != nil {
		return *x.Walkid
	}
	return Default_NpcDefineData_Walkid
}

func (x *NpcDefineData) GetSearchBuffids() []uint32 {
	if x != nil {
		return x.SearchBuffids
	}
	return nil
}

func (x *NpcDefineData) GetMotionactionid() uint32 {
	if x != nil && x.Motionactionid != nil {
		return *x.Motionactionid
	}
	return 0
}

func (x *NpcDefineData) GetBoxid() uint32 {
	if x != nil && x.Boxid != nil {
		return *x.Boxid
	}
	return 0
}

func (x *NpcDefineData) GetBoxfeature() uint32 {
	if x != nil && x.Boxfeature != nil {
		return *x.Boxfeature
	}
	return 0
}

func (x *NpcDefineData) GetAffix() []uint32 {
	if x != nil {
		return x.Affix
	}
	return nil
}

func (x *NpcDefineData) GetDirection() uint32 {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return 0
}

func (x *NpcDefineData) GetPuzzlemotionid() uint32 {
	if x != nil && x.Puzzlemotionid != nil {
		return *x.Puzzlemotionid
	}
	return 0
}

func (x *NpcDefineData) GetObjnpc() bool {
	if x != nil && x.Objnpc != nil {
		return *x.Objnpc
	}
	return false
}

func (x *NpcDefineData) GetPushLimit() uint32 {
	if x != nil && x.PushLimit != nil {
		return *x.PushLimit
	}
	return 0
}

func (x *NpcDefineData) GetIsveer() bool {
	if x != nil && x.Isveer != nil {
		return *x.Isveer
	}
	return false
}

func (x *NpcDefineData) GetShowname() uint32 {
	if x != nil && x.Showname != nil {
		return *x.Showname
	}
	return 0
}

type UpyunApi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket            *string `protobuf:"bytes,1,opt,name=bucket" json:"bucket,omitempty"`
	ContentMd5        *string `protobuf:"bytes,2,opt,name=content_md5,json=contentMd5" json:"content_md5,omitempty"`
	ContentLenthRange *string `protobuf:"bytes,3,opt,name=content_lenth_range,json=contentLenthRange" json:"content_lenth_range,omitempty"`
	Expiration        *uint32 `protobuf:"varint,4,opt,name=expiration" json:"expiration,omitempty"`
	FileBlocks        *uint32 `protobuf:"varint,5,opt,name=file_blocks,json=fileBlocks" json:"file_blocks,omitempty"`
	FileHash          *string `protobuf:"bytes,6,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	FileSize          *uint32 `protobuf:"varint,7,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	Path              *string `protobuf:"bytes,8,opt,name=path" json:"path,omitempty"`
}

func (x *UpyunApi) Reset() {
	*x = UpyunApi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpyunApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpyunApi) ProtoMessage() {}

func (x *UpyunApi) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpyunApi.ProtoReflect.Descriptor instead.
func (*UpyunApi) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{4}
}

func (x *UpyunApi) GetBucket() string {
	if x != nil && x.Bucket != nil {
		return *x.Bucket
	}
	return ""
}

func (x *UpyunApi) GetContentMd5() string {
	if x != nil && x.ContentMd5 != nil {
		return *x.ContentMd5
	}
	return ""
}

func (x *UpyunApi) GetContentLenthRange() string {
	if x != nil && x.ContentLenthRange != nil {
		return *x.ContentLenthRange
	}
	return ""
}

func (x *UpyunApi) GetExpiration() uint32 {
	if x != nil && x.Expiration != nil {
		return *x.Expiration
	}
	return 0
}

func (x *UpyunApi) GetFileBlocks() uint32 {
	if x != nil && x.FileBlocks != nil {
		return *x.FileBlocks
	}
	return 0
}

func (x *UpyunApi) GetFileHash() string {
	if x != nil && x.FileHash != nil {
		return *x.FileHash
	}
	return ""
}

func (x *UpyunApi) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *UpyunApi) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

type FrostItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId      *uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	FrostedTime *uint64 `protobuf:"varint,2,opt,name=frosted_time,json=frostedTime" json:"frosted_time,omitempty"`
}

func (x *FrostItemInfo) Reset() {
	*x = FrostItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrostItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostItemInfo) ProtoMessage() {}

func (x *FrostItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostItemInfo.ProtoReflect.Descriptor instead.
func (*FrostItemInfo) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{5}
}

func (x *FrostItemInfo) GetItemId() uint32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *FrostItemInfo) GetFrostedTime() uint64 {
	if x != nil && x.FrostedTime != nil {
		return *x.FrostedTime
	}
	return 0
}

type SpEffectData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid       *string  `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	Id         *uint32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Entity     []uint64 `protobuf:"varint,3,rep,name=entity" json:"entity,omitempty"`
	Expiretime *uint32  `protobuf:"varint,4,opt,name=expiretime" json:"expiretime,omitempty"`
	Freeobj    []uint64 `protobuf:"varint,5,rep,name=freeobj" json:"freeobj,omitempty"`
}

func (x *SpEffectData) Reset() {
	*x = SpEffectData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpEffectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpEffectData) ProtoMessage() {}

func (x *SpEffectData) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpEffectData.ProtoReflect.Descriptor instead.
func (*SpEffectData) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{6}
}

func (x *SpEffectData) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *SpEffectData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SpEffectData) GetEntity() []uint64 {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *SpEffectData) GetExpiretime() uint32 {
	if x != nil && x.Expiretime != nil {
		return *x.Expiretime
	}
	return 0
}

func (x *SpEffectData) GetFreeobj() []uint64 {
	if x != nil {
		return x.Freeobj
	}
	return nil
}

type Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Items []*Param `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

func (x *Param) Reset() {
	*x = Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Param) ProtoMessage() {}

func (x *Param) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Param.ProtoReflect.Descriptor instead.
func (*Param) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{7}
}

func (x *Param) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Param) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *Param) GetItems() []*Param {
	if x != nil {
		return x.Items
	}
	return nil
}

type ConfigParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params []*Param `protobuf:"bytes,1,rep,name=params" json:"params,omitempty"`
}

func (x *ConfigParam) Reset() {
	*x = ConfigParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigParam) ProtoMessage() {}

func (x *ConfigParam) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigParam.ProtoReflect.Descriptor instead.
func (*ConfigParam) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{8}
}

func (x *ConfigParam) GetParams() []*Param {
	if x != nil {
		return x.Params
	}
	return nil
}

type UserPortraitData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Portrait      *uint32 `protobuf:"varint,1,opt,name=portrait,def=0" json:"portrait,omitempty"`
	Body          *uint32 `protobuf:"varint,2,opt,name=body,def=0" json:"body,omitempty"`
	Hair          *uint32 `protobuf:"varint,3,opt,name=hair,def=0" json:"hair,omitempty"`
	Haircolor     *uint32 `protobuf:"varint,4,opt,name=haircolor,def=0" json:"haircolor,omitempty"`
	Gender        *uint32 `protobuf:"varint,5,opt,name=gender,def=0" json:"gender,omitempty"`
	Head          *uint32 `protobuf:"varint,6,opt,name=head,def=0" json:"head,omitempty"`
	Face          *uint32 `protobuf:"varint,7,opt,name=face,def=0" json:"face,omitempty"`
	Mouth         *uint32 `protobuf:"varint,8,opt,name=mouth,def=0" json:"mouth,omitempty"`
	Eye           *uint32 `protobuf:"varint,9,opt,name=eye,def=0" json:"eye,omitempty"`
	PortraitFrame *uint32 `protobuf:"varint,10,opt,name=portrait_frame,json=portraitFrame,def=0" json:"portrait_frame,omitempty"`
}

// Default values for UserPortraitData fields.
const (
	Default_UserPortraitData_Portrait      = uint32(0)
	Default_UserPortraitData_Body          = uint32(0)
	Default_UserPortraitData_Hair          = uint32(0)
	Default_UserPortraitData_Haircolor     = uint32(0)
	Default_UserPortraitData_Gender        = uint32(0)
	Default_UserPortraitData_Head          = uint32(0)
	Default_UserPortraitData_Face          = uint32(0)
	Default_UserPortraitData_Mouth         = uint32(0)
	Default_UserPortraitData_Eye           = uint32(0)
	Default_UserPortraitData_PortraitFrame = uint32(0)
)

func (x *UserPortraitData) Reset() {
	*x = UserPortraitData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPortraitData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPortraitData) ProtoMessage() {}

func (x *UserPortraitData) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPortraitData.ProtoReflect.Descriptor instead.
func (*UserPortraitData) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{9}
}

func (x *UserPortraitData) GetPortrait() uint32 {
	if x != nil && x.Portrait != nil {
		return *x.Portrait
	}
	return Default_UserPortraitData_Portrait
}

func (x *UserPortraitData) GetBody() uint32 {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return Default_UserPortraitData_Body
}

func (x *UserPortraitData) GetHair() uint32 {
	if x != nil && x.Hair != nil {
		return *x.Hair
	}
	return Default_UserPortraitData_Hair
}

func (x *UserPortraitData) GetHaircolor() uint32 {
	if x != nil && x.Haircolor != nil {
		return *x.Haircolor
	}
	return Default_UserPortraitData_Haircolor
}

func (x *UserPortraitData) GetGender() uint32 {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Default_UserPortraitData_Gender
}

func (x *UserPortraitData) GetHead() uint32 {
	if x != nil && x.Head != nil {
		return *x.Head
	}
	return Default_UserPortraitData_Head
}

func (x *UserPortraitData) GetFace() uint32 {
	if x != nil && x.Face != nil {
		return *x.Face
	}
	return Default_UserPortraitData_Face
}

func (x *UserPortraitData) GetMouth() uint32 {
	if x != nil && x.Mouth != nil {
		return *x.Mouth
	}
	return Default_UserPortraitData_Mouth
}

func (x *UserPortraitData) GetEye() uint32 {
	if x != nil && x.Eye != nil {
		return *x.Eye
	}
	return Default_UserPortraitData_Eye
}

func (x *UserPortraitData) GetPortraitFrame() uint32 {
	if x != nil && x.PortraitFrame != nil {
		return *x.PortraitFrame
	}
	return Default_UserPortraitData_PortraitFrame
}

type ServerZoneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minzoneid *uint32 `protobuf:"varint,1,opt,name=minzoneid,def=0" json:"minzoneid,omitempty"`
	Maxzoneid *uint32 `protobuf:"varint,2,opt,name=maxzoneid,def=0" json:"maxzoneid,omitempty"`
	Zoneid    *uint32 `protobuf:"varint,3,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Name      *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

// Default values for ServerZoneInfo fields.
const (
	Default_ServerZoneInfo_Minzoneid = uint32(0)
	Default_ServerZoneInfo_Maxzoneid = uint32(0)
	Default_ServerZoneInfo_Zoneid    = uint32(0)
)

func (x *ServerZoneInfo) Reset() {
	*x = ServerZoneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerZoneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerZoneInfo) ProtoMessage() {}

func (x *ServerZoneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerZoneInfo.ProtoReflect.Descriptor instead.
func (*ServerZoneInfo) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{10}
}

func (x *ServerZoneInfo) GetMinzoneid() uint32 {
	if x != nil && x.Minzoneid != nil {
		return *x.Minzoneid
	}
	return Default_ServerZoneInfo_Minzoneid
}

func (x *ServerZoneInfo) GetMaxzoneid() uint32 {
	if x != nil && x.Maxzoneid != nil {
		return *x.Maxzoneid
	}
	return Default_ServerZoneInfo_Maxzoneid
}

func (x *ServerZoneInfo) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_ServerZoneInfo_Zoneid
}

func (x *ServerZoneInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serverid     *uint32           `protobuf:"varint,1,opt,name=serverid,def=0" json:"serverid,omitempty"`
	Groupid      *uint32           `protobuf:"varint,2,opt,name=groupid,def=0" json:"groupid,omitempty"`
	Zoneinfos    []*ServerZoneInfo `protobuf:"bytes,3,rep,name=zoneinfos" json:"zoneinfos,omitempty"`
	Tradegroupid *uint32           `protobuf:"varint,4,opt,name=tradegroupid" json:"tradegroupid,omitempty"`
}

// Default values for ServerInfo fields.
const (
	Default_ServerInfo_Serverid = uint32(0)
	Default_ServerInfo_Groupid  = uint32(0)
)

func (x *ServerInfo) Reset() {
	*x = ServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfo) ProtoMessage() {}

func (x *ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfo.ProtoReflect.Descriptor instead.
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{11}
}

func (x *ServerInfo) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return Default_ServerInfo_Serverid
}

func (x *ServerInfo) GetGroupid() uint32 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return Default_ServerInfo_Groupid
}

func (x *ServerInfo) GetZoneinfos() []*ServerZoneInfo {
	if x != nil {
		return x.Zoneinfos
	}
	return nil
}

func (x *ServerInfo) GetTradegroupid() uint32 {
	if x != nil && x.Tradegroupid != nil {
		return *x.Tradegroupid
	}
	return 0
}

type RegionServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serverinfos []*ServerInfo `protobuf:"bytes,1,rep,name=serverinfos" json:"serverinfos,omitempty"`
	Pvpzoneids  []uint32      `protobuf:"varint,2,rep,name=pvpzoneids" json:"pvpzoneids,omitempty"`
}

func (x *RegionServerInfo) Reset() {
	*x = RegionServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionServerInfo) ProtoMessage() {}

func (x *RegionServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionServerInfo.ProtoReflect.Descriptor instead.
func (*RegionServerInfo) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{12}
}

func (x *RegionServerInfo) GetServerinfos() []*ServerInfo {
	if x != nil {
		return x.Serverinfos
	}
	return nil
}

func (x *RegionServerInfo) GetPvpzoneids() []uint32 {
	if x != nil {
		return x.Pvpzoneids
	}
	return nil
}

type UserModelShowData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid     *uint64 `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Name       *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Guildid    *uint64 `protobuf:"varint,3,opt,name=guildid,def=0" json:"guildid,omitempty"`
	Guildname  *string `protobuf:"bytes,4,opt,name=guildname" json:"guildname,omitempty"`
	Gender     *uint32 `protobuf:"varint,5,opt,name=gender,def=0" json:"gender,omitempty"`
	Profession *uint32 `protobuf:"varint,6,opt,name=profession,def=0" json:"profession,omitempty"`
	Level      *uint32 `protobuf:"varint,7,opt,name=level,def=0" json:"level,omitempty"`
	Hair       *uint32 `protobuf:"varint,8,opt,name=hair,def=0" json:"hair,omitempty"`
	Haircolor  *uint32 `protobuf:"varint,9,opt,name=haircolor,def=0" json:"haircolor,omitempty"`
	Body       *uint32 `protobuf:"varint,10,opt,name=body,def=0" json:"body,omitempty"`
	Eye        *uint32 `protobuf:"varint,11,opt,name=eye,def=0" json:"eye,omitempty"`
	Clothcolor *uint32 `protobuf:"varint,12,opt,name=clothcolor,def=0" json:"clothcolor,omitempty"`
	Head       *uint32 `protobuf:"varint,13,opt,name=head,def=0" json:"head,omitempty"`
	Back       *uint32 `protobuf:"varint,14,opt,name=back,def=0" json:"back,omitempty"`
	Face       *uint32 `protobuf:"varint,15,opt,name=face,def=0" json:"face,omitempty"`
	Tail       *uint32 `protobuf:"varint,16,opt,name=tail,def=0" json:"tail,omitempty"`
	Mount      *uint32 `protobuf:"varint,17,opt,name=mount,def=0" json:"mount,omitempty"`
	Mouth      *uint32 `protobuf:"varint,18,opt,name=mouth,def=0" json:"mouth,omitempty"`
	Lefthand   *uint32 `protobuf:"varint,19,opt,name=lefthand,def=0" json:"lefthand,omitempty"`
	Righthand  *uint32 `protobuf:"varint,20,opt,name=righthand,def=0" json:"righthand,omitempty"`
	Portrait   *uint32 `protobuf:"varint,21,opt,name=portrait,def=0" json:"portrait,omitempty"`
}

// Default values for UserModelShowData fields.
const (
	Default_UserModelShowData_Charid     = uint64(0)
	Default_UserModelShowData_Guildid    = uint64(0)
	Default_UserModelShowData_Gender     = uint32(0)
	Default_UserModelShowData_Profession = uint32(0)
	Default_UserModelShowData_Level      = uint32(0)
	Default_UserModelShowData_Hair       = uint32(0)
	Default_UserModelShowData_Haircolor  = uint32(0)
	Default_UserModelShowData_Body       = uint32(0)
	Default_UserModelShowData_Eye        = uint32(0)
	Default_UserModelShowData_Clothcolor = uint32(0)
	Default_UserModelShowData_Head       = uint32(0)
	Default_UserModelShowData_Back       = uint32(0)
	Default_UserModelShowData_Face       = uint32(0)
	Default_UserModelShowData_Tail       = uint32(0)
	Default_UserModelShowData_Mount      = uint32(0)
	Default_UserModelShowData_Mouth      = uint32(0)
	Default_UserModelShowData_Lefthand   = uint32(0)
	Default_UserModelShowData_Righthand  = uint32(0)
	Default_UserModelShowData_Portrait   = uint32(0)
)

func (x *UserModelShowData) Reset() {
	*x = UserModelShowData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserModelShowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserModelShowData) ProtoMessage() {}

func (x *UserModelShowData) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserModelShowData.ProtoReflect.Descriptor instead.
func (*UserModelShowData) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{13}
}

func (x *UserModelShowData) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_UserModelShowData_Charid
}

func (x *UserModelShowData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UserModelShowData) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return Default_UserModelShowData_Guildid
}

func (x *UserModelShowData) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

func (x *UserModelShowData) GetGender() uint32 {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Default_UserModelShowData_Gender
}

func (x *UserModelShowData) GetProfession() uint32 {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return Default_UserModelShowData_Profession
}

func (x *UserModelShowData) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return Default_UserModelShowData_Level
}

func (x *UserModelShowData) GetHair() uint32 {
	if x != nil && x.Hair != nil {
		return *x.Hair
	}
	return Default_UserModelShowData_Hair
}

func (x *UserModelShowData) GetHaircolor() uint32 {
	if x != nil && x.Haircolor != nil {
		return *x.Haircolor
	}
	return Default_UserModelShowData_Haircolor
}

func (x *UserModelShowData) GetBody() uint32 {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return Default_UserModelShowData_Body
}

func (x *UserModelShowData) GetEye() uint32 {
	if x != nil && x.Eye != nil {
		return *x.Eye
	}
	return Default_UserModelShowData_Eye
}

func (x *UserModelShowData) GetClothcolor() uint32 {
	if x != nil && x.Clothcolor != nil {
		return *x.Clothcolor
	}
	return Default_UserModelShowData_Clothcolor
}

func (x *UserModelShowData) GetHead() uint32 {
	if x != nil && x.Head != nil {
		return *x.Head
	}
	return Default_UserModelShowData_Head
}

func (x *UserModelShowData) GetBack() uint32 {
	if x != nil && x.Back != nil {
		return *x.Back
	}
	return Default_UserModelShowData_Back
}

func (x *UserModelShowData) GetFace() uint32 {
	if x != nil && x.Face != nil {
		return *x.Face
	}
	return Default_UserModelShowData_Face
}

func (x *UserModelShowData) GetTail() uint32 {
	if x != nil && x.Tail != nil {
		return *x.Tail
	}
	return Default_UserModelShowData_Tail
}

func (x *UserModelShowData) GetMount() uint32 {
	if x != nil && x.Mount != nil {
		return *x.Mount
	}
	return Default_UserModelShowData_Mount
}

func (x *UserModelShowData) GetMouth() uint32 {
	if x != nil && x.Mouth != nil {
		return *x.Mouth
	}
	return Default_UserModelShowData_Mouth
}

func (x *UserModelShowData) GetLefthand() uint32 {
	if x != nil && x.Lefthand != nil {
		return *x.Lefthand
	}
	return Default_UserModelShowData_Lefthand
}

func (x *UserModelShowData) GetRighthand() uint32 {
	if x != nil && x.Righthand != nil {
		return *x.Righthand
	}
	return Default_UserModelShowData_Righthand
}

func (x *UserModelShowData) GetPortrait() uint32 {
	if x != nil && x.Portrait != nil {
		return *x.Portrait
	}
	return Default_UserModelShowData_Portrait
}

type DeviceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *DeviceItem) Reset() {
	*x = DeviceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceItem) ProtoMessage() {}

func (x *DeviceItem) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceItem.ProtoReflect.Descriptor instead.
func (*DeviceItem) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{14}
}

func (x *DeviceItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DeviceItem) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type UserProfileData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Birthmonth      *uint32  `protobuf:"varint,1,opt,name=birthmonth" json:"birthmonth,omitempty"`
	Birthday        *uint32  `protobuf:"varint,2,opt,name=birthday" json:"birthday,omitempty"`
	Needpartner     *uint32  `protobuf:"varint,3,opt,name=needpartner" json:"needpartner,omitempty"`
	Signtext        *string  `protobuf:"bytes,4,opt,name=signtext" json:"signtext,omitempty"`
	Label           []uint32 `protobuf:"varint,5,rep,name=label" json:"label,omitempty"`
	Unlocklabels    []uint32 `protobuf:"varint,6,rep,name=unlocklabels" json:"unlocklabels,omitempty"`
	Birthupdatetime *uint32  `protobuf:"varint,7,opt,name=birthupdatetime" json:"birthupdatetime,omitempty"`
	Version         *uint32  `protobuf:"varint,8,opt,name=version" json:"version,omitempty"`
}

func (x *UserProfileData) Reset() {
	*x = UserProfileData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileData) ProtoMessage() {}

func (x *UserProfileData) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileData.ProtoReflect.Descriptor instead.
func (*UserProfileData) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{15}
}

func (x *UserProfileData) GetBirthmonth() uint32 {
	if x != nil && x.Birthmonth != nil {
		return *x.Birthmonth
	}
	return 0
}

func (x *UserProfileData) GetBirthday() uint32 {
	if x != nil && x.Birthday != nil {
		return *x.Birthday
	}
	return 0
}

func (x *UserProfileData) GetNeedpartner() uint32 {
	if x != nil && x.Needpartner != nil {
		return *x.Needpartner
	}
	return 0
}

func (x *UserProfileData) GetSigntext() string {
	if x != nil && x.Signtext != nil {
		return *x.Signtext
	}
	return ""
}

func (x *UserProfileData) GetLabel() []uint32 {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *UserProfileData) GetUnlocklabels() []uint32 {
	if x != nil {
		return x.Unlocklabels
	}
	return nil
}

func (x *UserProfileData) GetBirthupdatetime() uint32 {
	if x != nil && x.Birthupdatetime != nil {
		return *x.Birthupdatetime
	}
	return 0
}

func (x *UserProfileData) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type GvgPerfectTimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pause *bool   `protobuf:"varint,1,opt,name=pause" json:"pause,omitempty"`
	Time  *uint32 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
}

func (x *GvgPerfectTimeInfo) Reset() {
	*x = GvgPerfectTimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GvgPerfectTimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GvgPerfectTimeInfo) ProtoMessage() {}

func (x *GvgPerfectTimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GvgPerfectTimeInfo.ProtoReflect.Descriptor instead.
func (*GvgPerfectTimeInfo) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{16}
}

func (x *GvgPerfectTimeInfo) GetPause() bool {
	if x != nil && x.Pause != nil {
		return *x.Pause
	}
	return false
}

func (x *GvgPerfectTimeInfo) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type Bit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Flag  *uint32 `protobuf:"varint,2,opt,name=flag" json:"flag,omitempty"`
}

func (x *Bit) Reset() {
	*x = Bit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bit) ProtoMessage() {}

func (x *Bit) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bit.ProtoReflect.Descriptor instead.
func (*Bit) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{17}
}

func (x *Bit) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Bit) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

type BitFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bits []*Bit `protobuf:"bytes,1,rep,name=bits" json:"bits,omitempty"`
}

func (x *BitFlag) Reset() {
	*x = BitFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProtoCommon_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitFlag) ProtoMessage() {}

func (x *BitFlag) ProtoReflect() protoreflect.Message {
	mi := &file_ProtoCommon_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitFlag.ProtoReflect.Descriptor instead.
func (*BitFlag) Descriptor() ([]byte, []int) {
	return file_ProtoCommon_proto_rawDescGZIP(), []int{18}
}

func (x *BitFlag) GetBits() []*Bit {
	if x != nil {
		return x.Bits
	}
	return nil
}

var File_ProtoCommon_proto protoreflect.FileDescriptor

var file_ProtoCommon_proto_rawDesc = []byte{
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x22, 0x34, 0x0a, 0x08, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x50, 0x6f, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79,
	0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x7a, 0x22, 0xa1,
	0x06, 0x0a, 0x0e, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x06, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x76, 0x12, 0x15, 0x0a, 0x04,
	0x68, 0x61, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x68,
	0x61, 0x69, 0x72, 0x12, 0x1f, 0x0a, 0x09, 0x68, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x68, 0x61, 0x69, 0x72, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x68, 0x61, 0x6e, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x68,
	0x61, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x68, 0x61, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x15, 0x0a, 0x04, 0x68,
	0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x68, 0x65,
	0x61, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x04, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x15, 0x0a, 0x04, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x15, 0x0a, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x13, 0x0a, 0x03, 0x65, 0x79, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x03, 0x65, 0x79, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x70, 0x6f, 0x72,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x31, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x3a,
	0x0b, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x0f, 0x45, 0x50, 0x52, 0x4f,
	0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x69, 0x73,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x69,
	0x73, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x05, 0x69, 0x73, 0x62, 0x61,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05,
	0x69, 0x73, 0x62, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x73, 0x22, 0x38, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x0f, 0x0a, 0x01, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x01, 0x78, 0x12, 0x0f, 0x0a, 0x01, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x01, 0x79, 0x12, 0x0f, 0x0a, 0x01, 0x7a,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x01, 0x7a, 0x22, 0xf4, 0x09, 0x0a,
	0x0d, 0x4e, 0x70, 0x63, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x11,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x12, 0x17, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x03, 0x64, 0x69,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12,
	0x19, 0x0a, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x01, 0x30, 0x52, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x09, 0x74, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30,
	0x52, 0x09, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x08, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x6d, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30,
	0x52, 0x08, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x6d, 0x61, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52,
	0x08, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6d, 0x61, 0x78, 0x12, 0x15, 0x0a, 0x04, 0x6c, 0x69, 0x66,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x6c, 0x69, 0x66, 0x65,
	0x12, 0x21, 0x0a, 0x0a, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x75, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1d,
	0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x30, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0c, 0x67, 0x65, 0x61, 0x72, 0x6f, 0x72, 0x67, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x67, 0x65, 0x61, 0x72, 0x6f, 0x72, 0x67, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x70, 0x75, 0x72, 0x69, 0x66, 0x79, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x70, 0x75, 0x72, 0x69, 0x66, 0x79, 0x12,
	0x1f, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x73, 0x61, 0x66, 0x65, 0x6c, 0x76, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x61, 0x74, 0x74, 0x73, 0x61, 0x66, 0x65, 0x6c, 0x76,
	0x12, 0x1d, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x64, 0x69, 0x73, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0b, 0x67, 0x65, 0x61, 0x72, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x67, 0x65, 0x61, 0x72, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x61, 0x69, 0x74, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0f,
	0x45, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x70, 0x65, 0x72, 0x61,
	0x69, 0x18, 0x17, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x70, 0x65, 0x72, 0x61, 0x69,
	0x12, 0x19, 0x0a, 0x06, 0x70, 0x75, 0x72, 0x73, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x70, 0x75, 0x72, 0x73, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x70,
	0x75, 0x72, 0x73, 0x75, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x01, 0x30, 0x52, 0x0a, 0x70, 0x75, 0x72, 0x73, 0x75, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0b, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x70, 0x65, 0x74, 0x69, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x70, 0x65,
	0x74, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x76, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x76, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x65, 0x61, 0x64, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64, 0x73, 0x18,
	0x1c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x61, 0x64, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x70, 0x6f, 0x73,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x70, 0x6f, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x06,
	0x77, 0x61, 0x6c, 0x6b, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x69, 0x64, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x75, 0x66, 0x66, 0x69, 0x64, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x78, 0x69, 0x64, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x6f, 0x78, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x6f, 0x78, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x62, 0x6f, 0x78, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x66, 0x66, 0x69, 0x78, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x66, 0x66,
	0x69, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x6e,
	0x70, 0x63, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x6e, 0x70, 0x63,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x76, 0x65, 0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x76, 0x65, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x08, 0x55, 0x70, 0x79, 0x75, 0x6e, 0x41, 0x70, 0x69,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x64, 0x35, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x6e, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x4b, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x53, 0x70, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x65, 0x65, 0x6f, 0x62, 0x6a, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x07, 0x66, 0x72, 0x65, 0x65, 0x6f, 0x62, 0x6a, 0x22, 0x51, 0x0a, 0x05,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x31, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x70, 0x6f,
	0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x15, 0x0a,
	0x04, 0x68, 0x61, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04,
	0x68, 0x61, 0x69, 0x72, 0x12, 0x1f, 0x0a, 0x09, 0x68, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x68, 0x61, 0x69, 0x72,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x15, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x12, 0x17,
	0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x05, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x12, 0x13, 0x0a, 0x03, 0x65, 0x79, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x65, 0x79, 0x65, 0x12, 0x28, 0x0a, 0x0e,
	0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x09, 0x6d, 0x69, 0x6e,
	0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x09, 0x6d, 0x69, 0x6e, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x7a,
	0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06,
	0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0a, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x7a,
	0x6f, 0x6e, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x10,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x31, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x76, 0x70, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x76, 0x70, 0x7a, 0x6f, 0x6e, 0x65,
	0x69, 0x64, 0x73, 0x22, 0xc8, 0x04, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x04, 0x68, 0x61,
	0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x68, 0x61, 0x69,
	0x72, 0x12, 0x1f, 0x0a, 0x09, 0x68, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x68, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x15, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x13, 0x0a, 0x03, 0x65, 0x79, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x65, 0x79, 0x65, 0x12, 0x21,
	0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x15, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x15, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a,
	0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x12,
	0x1d, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x12, 0x1f,
	0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x12,
	0x1d, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x22, 0x36,
	0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x65, 0x65,
	0x64, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x12, 0x47, 0x76, 0x67, 0x50, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x03, 0x42, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66,
	0x6c, 0x61, 0x67, 0x22, 0x27, 0x0a, 0x07, 0x42, 0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c,
	0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x42, 0x69, 0x74, 0x52, 0x04, 0x62, 0x69, 0x74, 0x73, 0x2a, 0x29, 0x0a, 0x0f,
	0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x0f, 0x45, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0xd8, 0xbd, 0xce, 0x09, 0x2a, 0x58, 0x0a, 0x0d, 0x45, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x42, 0x4f, 0x4f,
	0x4c, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10,
	0x02, 0x2a, 0xd3, 0x30, 0x0a, 0x0d, 0x45, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x55,
	0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x49,
	0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x58, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55,
	0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x50, 0x52,
	0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x55,
	0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x4f, 0x42, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x4f, 0x42, 0x45, 0x58, 0x50, 0x10, 0x07, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x4f, 0x4c, 0x45, 0x45, 0x58, 0x50, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45,
	0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x10, 0x0a, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x49, 0x4c, 0x56, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x0c, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x55, 0x52, 0x49, 0x46, 0x59, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x41, 0x52, 0x44, 0x45,
	0x4e, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x0f, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x10,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x43, 0x54, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x55,
	0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x49, 0x52,
	0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x13, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x14, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x45, 0x46, 0x54, 0x48, 0x41, 0x4e, 0x44, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54,
	0x48, 0x41, 0x4e, 0x44, 0x10, 0x16, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x17, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x4f, 0x44, 0x59, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41,
	0x44, 0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x43,
	0x45, 0x10, 0x1b, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x1c, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x1d, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x10, 0x53, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x52, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x10, 0x1f, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x49, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10,
	0x20, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x58, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x21, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56,
	0x49, 0x54, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x22, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x55, 0x4b, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x10, 0x23, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x10, 0x24, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x25,
	0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x26,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10,
	0x27, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x28,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x29, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x2a, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x2b, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x2c, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41,
	0x49, 0x54, 0x10, 0x2d, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x2e, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x2f, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41,
	0x49, 0x44, 0x49, 0x44, 0x10, 0x30, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x4e, 0x45, 0x52, 0x10, 0x31, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10,
	0x32, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x33, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x41, 0x56, 0x45, 0x4d, 0x41, 0x50, 0x10, 0x34, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x55,
	0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x4c,
	0x4f, 0x57, 0x49, 0x44, 0x10, 0x35, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x10, 0x36,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x37, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x49,
	0x45, 0x4e, 0x44, 0x53, 0x48, 0x49, 0x50, 0x10, 0x38, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43,
	0x5f, 0x43, 0x55, 0x52, 0x49, 0x44, 0x10, 0x39, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x3a, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x44,
	0x45, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x3b, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x10, 0x3c, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x41, 0x47, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x3d, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x3e, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x59, 0x45, 0x10, 0x3f, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x40, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x10, 0x41, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x56, 0x10,
	0x42, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x43, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x55, 0x52, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x10, 0x44, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x49,
	0x4c, 0x4c, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x45, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x55,
	0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x42, 0x41, 0x53, 0x45, 0x45, 0x58, 0x50, 0x10, 0x46, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x44, 0x45,
	0x52, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x47, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x48, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x43, 0x54, 0x54, 0x49,
	0x50, 0x53, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x49, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x4a, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x4b, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x4c, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x4d,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x49, 0x44, 0x10, 0x4e, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55,
	0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x45,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x4f, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x5f, 0x5a,
	0x4f, 0x4e, 0x45, 0x49, 0x44, 0x10, 0x50, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41,
	0x4c, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x49, 0x44, 0x10, 0x51, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x55,
	0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x10, 0x54, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x10, 0x55, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a, 0x45,
	0x4e, 0x59, 0x5f, 0x44, 0x45, 0x42, 0x54, 0x10, 0x56, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x57, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x52, 0x41, 0x49,
	0x44, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x58, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x45, 0x10, 0x59, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x56, 0x50, 0x43, 0x4f, 0x49, 0x4e, 0x10,
	0x5a, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x64, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x41, 0x53, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x66, 0x12, 0x1d, 0x0a, 0x19,
	0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41,
	0x53, 0x48, 0x49, 0x4f, 0x4e, 0x48, 0x49, 0x44, 0x45, 0x10, 0x67, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e,
	0x54, 0x48, 0x43, 0x41, 0x52, 0x44, 0x10, 0x68, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x45, 0x52,
	0x5f, 0x45, 0x58, 0x50, 0x10, 0x69, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x4c,
	0x56, 0x10, 0x6a, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x10,
	0x6b, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x56, 0x10, 0x6c, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x41, 0x54, 0x49, 0x45, 0x54, 0x59, 0x10, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x6f, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x43, 0x10, 0x70, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x71, 0x12, 0x1c,
	0x0a, 0x18, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x48, 0x4f, 0x4e, 0x4f, 0x52, 0x10, 0x72, 0x12, 0x1d, 0x0a, 0x19,
	0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45,
	0x41, 0x4b, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x4f, 0x59,
	0x10, 0x75, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x76,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x55, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x4a, 0x4f, 0x42, 0x10, 0x77, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x52, 0x49, 0x54, 0x41, 0x4c, 0x10, 0x78, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x54, 0x59, 0x50, 0x45, 0x10, 0x79, 0x12, 0x27, 0x0a,
	0x23, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x49, 0x56, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x43, 0x4f, 0x41,
	0x53, 0x54, 0x45, 0x52, 0x10, 0x7a, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x57, 0x49, 0x4e, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x49, 0x44, 0x10, 0x7b, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x7c, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x45,
	0x44, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x10, 0x7d, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x55,
	0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x41, 0x4e, 0x54, 0x49, 0x44, 0x10, 0x7e, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x53,
	0x43, 0x4f, 0x52, 0x45, 0x10, 0x7f, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x80, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x45, 0x53, 0x53, 0x55, 0x50, 0x10, 0x81,
	0x01, 0x12, 0x22, 0x0a, 0x1d, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x82, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x54, 0x55, 0x54, 0x4f, 0x52,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x83, 0x01, 0x12, 0x20, 0x0a,
	0x1b, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x4e, 0x53, 0x45, 0x4d, 0x42, 0x4c, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x85, 0x01, 0x12,
	0x1b, 0x0a, 0x16, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x41, 0x44, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x86, 0x01, 0x12, 0x19, 0x0a, 0x14,
	0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x41, 0x44, 0x4c, 0x56, 0x10, 0x87, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x45, 0x58, 0x50,
	0x10, 0x88, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c,
	0x4c, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x89, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x8a, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x45,
	0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x44, 0x41, 0x4c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x8b, 0x01,
	0x12, 0x18, 0x0a, 0x13, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x52, 0x10, 0x8c, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x55,
	0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x49,
	0x4e, 0x10, 0x8d, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x8e, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x41, 0x49, 0x44, 0x5f,
	0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x10, 0x8f, 0x01, 0x12, 0x1a, 0x0a,
	0x15, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x55, 0x52, 0x41, 0x47, 0x45, 0x10, 0x90, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f,
	0x5a, 0x4f, 0x4e, 0x45, 0x49, 0x44, 0x10, 0x91, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x49, 0x44, 0x10, 0x92, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x93, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54,
	0x45, 0x52, 0x59, 0x10, 0x94, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x56, 0x50, 0x5f,
	0x43, 0x4f, 0x49, 0x4e, 0x10, 0x96, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x52, 0x4f,
	0x4f, 0x4d, 0x49, 0x44, 0x10, 0x97, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x10, 0x98, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f,
	0x46, 0x41, 0x43, 0x45, 0x10, 0x99, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f,
	0x4d, 0x4f, 0x55, 0x54, 0x48, 0x10, 0x9a, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x9b, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x5f, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x9c, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x9d, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54,
	0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x9e, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x9f, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x50, 0x41, 0x53, 0x53, 0x5f, 0x4c, 0x56, 0x10, 0xa0, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x45, 0x55,
	0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x10, 0xa1, 0x01, 0x12, 0x17, 0x0a,
	0x12, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x41, 0x43, 0x45, 0x10, 0xa2, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x50, 0x45, 0x10, 0xa3, 0x01,
	0x12, 0x20, 0x0a, 0x1b, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x45, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10,
	0xa4, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xa5,
	0x01, 0x12, 0x22, 0x0a, 0x1d, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x4f,
	0x49, 0x4e, 0x10, 0xa6, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x4a, 0x4f, 0x42, 0x10, 0xa7, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x45,
	0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x10, 0xa8, 0x01, 0x12, 0x20,
	0x0a, 0x1b, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x49, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x49, 0x44, 0x10, 0xa9, 0x01,
	0x12, 0x1d, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x49, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x53, 0x10, 0xaa, 0x01, 0x12,
	0x24, 0x0a, 0x1f, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x45,
	0x58, 0x50, 0x10, 0xac, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x10, 0xad, 0x01, 0x12, 0x20,
	0x0a, 0x1b, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x50, 0x45, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x10, 0xae, 0x01,
	0x12, 0x1d, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x5f, 0x44, 0x49, 0x43, 0x45, 0x10, 0xaf, 0x01, 0x12,
	0x1f, 0x0a, 0x1a, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xb0, 0x01,
	0x12, 0x23, 0x0a, 0x1e, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41,
	0x49, 0x54, 0x10, 0xb1, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0xb3, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x4d, 0x41,
	0x52, 0x45, 0x10, 0xb4, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x50, 0x43, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x4f,
	0x47, 0x10, 0xb5, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54,
	0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f,
	0x43, 0x4f, 0x49, 0x4e, 0x10, 0xb6, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0xb7, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x45,
	0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x57, 0x45,
	0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x10, 0xb8, 0x01, 0x12, 0x1e,
	0x0a, 0x19, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0xb9, 0x01, 0x12, 0x16,
	0x0a, 0x11, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x46, 0x4b, 0x10, 0xba, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x46, 0x4b, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0xbb, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x59, 0x53, 0x45, 0x4c, 0x46, 0x5f,
	0x46, 0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x10, 0xbc, 0x01, 0x12,
	0x26, 0x0a, 0x21, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x10, 0xbd, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xbe, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x50, 0x43, 0x5f, 0x42,
	0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x55, 0x52, 0x10, 0xc0, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45,
	0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x42, 0x55, 0x4c, 0x4c, 0x45, 0x54, 0x53, 0x10, 0xc5, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45,
	0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x52,
	0x5f, 0x42, 0x55, 0x4c, 0x4c, 0x45, 0x54, 0x53, 0x10, 0xc6, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x45,
	0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0xc7, 0x01, 0x12, 0x20, 0x0a, 0x1b,
	0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f,
	0x58, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0xc9, 0x01, 0x12, 0x1e,
	0x0a, 0x19, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x4f, 0x58, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0xca, 0x01, 0x12, 0x19,
	0x0a, 0x14, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x53, 0x56, 0x45, 0x45, 0x52, 0x10, 0xcb, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0xcc, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x44, 0x49, 0x52, 0x10, 0xcd, 0x01, 0x12,
	0x1c, 0x0a, 0x17, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x49, 0x44, 0x45, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xce, 0x01, 0x12, 0x22, 0x0a,
	0x1d, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xcf,
	0x01, 0x12, 0x25, 0x0a, 0x20, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x4e,
	0x44, 0x54, 0x49, 0x4d, 0x45, 0x10, 0xd0, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x54, 0x59,
	0x50, 0x45, 0x10, 0xd1, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x50,
	0x5f, 0x45, 0x58, 0x50, 0x10, 0xd2, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x10, 0xd3, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x41, 0x53, 0x53,
	0x45, 0x4d, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x10, 0xd4, 0x01, 0x12, 0x28, 0x0a,
	0x23, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45,
	0x5f, 0x45, 0x58, 0x50, 0x10, 0xd5, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x46, 0x46, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0xd6, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45,
	0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57,
	0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x10, 0xd7, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x45, 0x55,
	0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x56, 0x45, 0x43,
	0x41, 0x52, 0x44, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x49, 0x44, 0x10, 0xd8, 0x01, 0x12, 0x20,
	0x0a, 0x1b, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x42, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x10, 0xd9, 0x01,
	0x12, 0x1d, 0x0a, 0x18, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x48, 0x45, 0x41, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0xda, 0x01, 0x12,
	0x1b, 0x0a, 0x16, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0xdb, 0x01, 0x12, 0x1e, 0x0a, 0x19,
	0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x49,
	0x44, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0xdc, 0x01, 0x12, 0x22, 0x0a, 0x1d,
	0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45,
	0x57, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0xdd, 0x01,
	0x12, 0x2b, 0x0a, 0x26, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x45, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0xde, 0x01, 0x12, 0x20, 0x0a,
	0x1b, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0xdf, 0x01, 0x12,
	0x16, 0x0a, 0x11, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0xe0, 0x01, 0x2a, 0x69, 0x0a, 0x08, 0x45, 0x4d, 0x41, 0x52, 0x49,
	0x54, 0x41, 0x4c, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4d, 0x41, 0x52, 0x49, 0x54, 0x41, 0x4c, 0x5f,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4d, 0x41, 0x52,
	0x49, 0x54, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4d, 0x41, 0x52, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x52, 0x52,
	0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4d, 0x41, 0x52, 0x49, 0x54, 0x41,
	0x4c, 0x5f, 0x44, 0x49, 0x56, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x55, 0x4e, 0x49, 0x53, 0x48,
	0x10, 0x03, 0x2a, 0xb2, 0x3c, 0x0a, 0x09, 0x45, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x10, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x49, 0x10, 0x66, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x58, 0x10, 0x67, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x54,
	0x10, 0x68, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x55, 0x4b, 0x10, 0x69, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x54, 0x4b, 0x10, 0xc8, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x4b, 0x50, 0x45, 0x52, 0x10, 0xc9, 0x01,
	0x12, 0x12, 0x0a, 0x0d, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x46, 0x10, 0xca, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x45, 0x46, 0x50, 0x45, 0x52, 0x10, 0xcb, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x4b, 0x10, 0xcc, 0x01,
	0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x54, 0x4b, 0x50, 0x45, 0x52, 0x10, 0xcd, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x44, 0x45, 0x46, 0x10, 0xce, 0x01, 0x12, 0x16, 0x0a,
	0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x44, 0x45, 0x46, 0x50,
	0x45, 0x52, 0x10, 0xcf, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x48, 0x50, 0x10, 0xd0, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x48, 0x50, 0x50, 0x45,
	0x52, 0x10, 0xd1, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x58, 0x53, 0x50, 0x10, 0xd2, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x53, 0x50, 0x50, 0x45, 0x52,
	0x10, 0xd3, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x50, 0x10, 0xd4, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x10, 0xd5, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x54, 0x10, 0xd6, 0x01, 0x12, 0x13, 0x0a,
	0x0e, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x45, 0x45, 0x10,
	0xd7, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x52, 0x49, 0x10, 0xd8, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x49, 0x52, 0x45, 0x53, 0x10, 0xd9, 0x01, 0x12, 0x18, 0x0a,
	0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x49, 0x44, 0x41,
	0x4d, 0x50, 0x45, 0x52, 0x10, 0xda, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x49, 0x44, 0x45, 0x46, 0x50, 0x45, 0x52, 0x10, 0xdb,
	0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x54, 0x4b, 0x53, 0x50, 0x44, 0x10, 0xdc, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x53, 0x50, 0x44, 0x10, 0xdd, 0x01,
	0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41,
	0x53, 0x54, 0x53, 0x50, 0x44, 0x10, 0xde, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x53, 0x50, 0x44,
	0x10, 0xdf, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x50, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x53, 0x50, 0x44, 0x10, 0xe0, 0x01,
	0x12, 0x1d, 0x0a, 0x18, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x53, 0x50, 0x44, 0x10, 0xe1, 0x01, 0x12,
	0x1f, 0x0a, 0x1a, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x53, 0x50, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x53, 0x50, 0x44, 0x10, 0xe2, 0x01,
	0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x53, 0x50, 0x44, 0x50, 0x45, 0x52, 0x10, 0xe3, 0x01, 0x12, 0x1e,
	0x0a, 0x19, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x45,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x53, 0x50, 0x44, 0x50, 0x45, 0x52, 0x10, 0xe4, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x49, 0x50,
	0x45, 0x52, 0x10, 0xe5, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x4d, 0x41, 0x58, 0x48, 0x50, 0x50, 0x45, 0x52, 0x10, 0xe6,
	0x01, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x4f, 0x4e, 0x43, 0x52, 0x49, 0x52, 0x45, 0x53, 0x10, 0xe7, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x48, 0x50, 0x10,
	0xe8, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0xac, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0xad,
	0x02, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x4f, 0x56, 0x45, 0x53, 0x50, 0x44, 0x50, 0x45, 0x52, 0x10, 0xae, 0x02, 0x12, 0x18, 0x0a, 0x13,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x41,
	0x53, 0x50, 0x44, 0x10, 0xaf, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x41, 0x53, 0x50, 0x44, 0x10, 0xb0, 0x02,
	0x12, 0x15, 0x0a, 0x10, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49,
	0x54, 0x50, 0x45, 0x52, 0x10, 0xb1, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x45, 0x45, 0x50, 0x45, 0x52, 0x10, 0xb2, 0x02, 0x12,
	0x15, 0x0a, 0x10, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52,
	0x50, 0x45, 0x52, 0x10, 0xb3, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x50, 0x45, 0x52, 0x10, 0xb4, 0x02, 0x12, 0x15, 0x0a,
	0x10, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x47, 0x49, 0x50, 0x45,
	0x52, 0x10, 0xb5, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x45, 0x58, 0x50, 0x45, 0x52, 0x10, 0xb6, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x54, 0x50, 0x45, 0x52, 0x10,
	0xb7, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x55, 0x4b, 0x50, 0x45, 0x52, 0x10, 0xb8, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x41, 0x53, 0x50, 0x44,
	0x10, 0xb9, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x48, 0x4f, 0x57, 0x41, 0x54, 0x4b, 0x10, 0x90, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x44, 0x45, 0x46,
	0x10, 0x91, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x48, 0x4f, 0x57, 0x4d, 0x41, 0x54, 0x4b, 0x10, 0x92, 0x03, 0x12, 0x17, 0x0a, 0x12,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x4d, 0x44,
	0x45, 0x46, 0x10, 0x93, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x4d, 0x41, 0x58, 0x48, 0x50, 0x10, 0x94, 0x03, 0x12,
	0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f,
	0x57, 0x4d, 0x41, 0x58, 0x53, 0x50, 0x10, 0x95, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x48, 0x49, 0x54, 0x10, 0x96,
	0x03, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x48, 0x4f, 0x57, 0x46, 0x4c, 0x45, 0x45, 0x10, 0x97, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x43, 0x52, 0x49, 0x10,
	0x98, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x48, 0x4f, 0x57, 0x43, 0x52, 0x49, 0x52, 0x45, 0x53, 0x10, 0x99, 0x03, 0x12, 0x19, 0x0a,
	0x14, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x41,
	0x54, 0x4b, 0x53, 0x50, 0x44, 0x10, 0x9a, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x4d, 0x4f, 0x56, 0x45, 0x53, 0x50,
	0x44, 0x10, 0x9b, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x43, 0x41, 0x53, 0x54, 0x53, 0x50, 0x44, 0x10, 0x9c, 0x03,
	0x12, 0x1d, 0x0a, 0x18, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48,
	0x4f, 0x57, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x53, 0x50, 0x44, 0x10, 0x9d, 0x03, 0x12,
	0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x4d,
	0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0x9e, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10,
	0x9f, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x45, 0x46, 0x10, 0xa0, 0x03, 0x12, 0x19, 0x0a, 0x14,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45,
	0x4d, 0x44, 0x45, 0x46, 0x10, 0xa1, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x4d, 0x52, 0x45, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0xa2, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x44, 0x41, 0x4d, 0x52, 0x45, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xa3, 0x03, 0x12, 0x1a,
	0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x4d, 0x49,
	0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0xa4, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x44, 0x41, 0x4d, 0x49, 0x4e, 0x43, 0x52,
	0x45, 0x41, 0x53, 0x45, 0x10, 0xa5, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x4d, 0x50, 0x49, 0x52, 0x49, 0x43, 0x10, 0xa6, 0x03,
	0x12, 0x19, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45,
	0x56, 0x41, 0x4d, 0x50, 0x49, 0x52, 0x49, 0x43, 0x10, 0xa7, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x4d, 0x49, 0x4d, 0x4d,
	0x55, 0x4e, 0x45, 0x10, 0xa8, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0xa9,
	0x03, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x44, 0x41, 0x4d, 0x10, 0xaa, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x54, 0x44, 0x41, 0x4d, 0x52,
	0x45, 0x44, 0x55, 0x43, 0x10, 0xab, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55,
	0x43, 0x10, 0xac, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x4d, 0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10,
	0xad, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x45, 0x51, 0x55, 0x49, 0x50, 0x44, 0x45, 0x46, 0x10, 0xae,
	0x03, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x48, 0x41, 0x50, 0x45, 0x41, 0x54, 0x4b, 0x50, 0x45, 0x52, 0x10, 0xaf, 0x03, 0x12, 0x17, 0x0a,
	0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x4d, 0x53, 0x50,
	0x49, 0x4b, 0x45, 0x10, 0xb0, 0x03, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x44, 0x41, 0x4d, 0x53, 0x50, 0x49, 0x4b, 0x45, 0x10, 0xb1, 0x03,
	0x12, 0x1d, 0x0a, 0x18, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0xb2, 0x03, 0x12,
	0x1e, 0x0a, 0x19, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x4d, 0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0xb3, 0x03, 0x12,
	0x1d, 0x0a, 0x18, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x45,
	0x52, 0x47, 0x59, 0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0xb4, 0x03, 0x12, 0x1c,
	0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x45, 0x45,
	0x4c, 0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0xb5, 0x03, 0x12, 0x1d, 0x0a, 0x18,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x45, 0x45, 0x4c, 0x4d,
	0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0xb6, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54,
	0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0xb7, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54,
	0x4d, 0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0xb8, 0x03, 0x12, 0x1d, 0x0a, 0x18,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e,
	0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0xbb, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x4d,
	0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0xbc, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x4c, 0x44, 0x41, 0x4d, 0x10, 0xbd, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x4d, 0x52, 0x45,
	0x41, 0x4c, 0x44, 0x41, 0x4d, 0x10, 0xbe, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x52, 0x45, 0x41, 0x4c, 0x44,
	0x41, 0x4d, 0x10, 0xbf, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x4d, 0x52, 0x45, 0x41, 0x4c, 0x44, 0x41, 0x4d,
	0x10, 0xc0, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x49, 0x44, 0x45, 0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0xb9, 0x03,
	0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49,
	0x44, 0x45, 0x4d, 0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0xba, 0x03, 0x12, 0x18,
	0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x41, 0x54, 0x4b, 0x10, 0xc1, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x41, 0x54, 0x4b, 0x44,
	0x41, 0x4d, 0x10, 0xc2, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x41, 0x54, 0x4b, 0x52, 0x45, 0x53, 0x10,
	0xc3, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x44, 0x41, 0x4d, 0x10, 0xc4, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x52, 0x45,
	0x53, 0x10, 0xc5, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4d, 0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10,
	0xc6, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x41, 0x44, 0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0xc7, 0x03, 0x12,
	0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x41,
	0x44, 0x4d, 0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0xc8, 0x03, 0x12, 0x1b, 0x0a,
	0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x44, 0x41, 0x4d, 0x49, 0x4e, 0x43, 0x10, 0xc9, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x44, 0x41,
	0x4d, 0x52, 0x45, 0x53, 0x10, 0xca, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x46, 0x4c, 0x45, 0x45, 0x52, 0x41,
	0x54, 0x45, 0x10, 0xcb, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x55, 0x42, 0x4f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x52, 0x41, 0x54, 0x45,
	0x10, 0xcc, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x52, 0x41, 0x54, 0x45,
	0x10, 0xcd, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4a, 0x49, 0x4e, 0x47, 0x41, 0x4e, 0x47, 0x52, 0x41, 0x54, 0x45, 0x10, 0xce, 0x03, 0x12,
	0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4e,
	0x47, 0x46, 0x4c, 0x45, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0xcf, 0x03, 0x12, 0x19, 0x0a, 0x14,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x57, 0x41, 0x4e, 0x47,
	0x52, 0x41, 0x54, 0x45, 0x10, 0xd0, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x4d, 0x49, 0x53, 0x53, 0x52, 0x41, 0x54,
	0x45, 0x10, 0xd1, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x57, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x44,
	0x55, 0x43, 0x10, 0xd2, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x57, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x44, 0x55, 0x43, 0x10, 0xd3, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x57, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x44, 0x41, 0x4d, 0x10, 0xd4, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x44, 0x41,
	0x4d, 0x10, 0xd5, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x4d, 0x5f, 0x50,
	0x45, 0x52, 0x10, 0xd6, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x5f, 0x4a, 0x55, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52,
	0x10, 0xd7, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x45, 0x41, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x5f, 0x50, 0x45, 0x52, 0x10, 0xd8,
	0x03, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x4f, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0xd9,
	0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x4f, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x4d, 0x10, 0xda, 0x03, 0x12,
	0x19, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0xdb, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x44, 0x55, 0x43, 0x10, 0xdc, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10,
	0xdd, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0xde, 0x03,
	0x12, 0x1d, 0x0a, 0x18, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x44, 0x41, 0x4d, 0x52, 0x45, 0x44, 0x55, 0x43, 0x10, 0xdf, 0x03, 0x12,
	0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x54, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xfd, 0x03, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x54, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x50, 0x45,
	0x52, 0x10, 0xfe, 0x03, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x44, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xff, 0x03, 0x12, 0x1a, 0x0a,
	0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x44, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x50, 0x45, 0x52, 0x10, 0x80, 0x04, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x83, 0x04,
	0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50,
	0x43, 0x4f, 0x53, 0x54, 0x50, 0x45, 0x52, 0x10, 0x84, 0x04, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x4b, 0x44, 0x49, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x10, 0x85, 0x04, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x4b, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x50,
	0x45, 0x52, 0x10, 0x86, 0x04, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x54, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x87, 0x04, 0x12, 0x19, 0x0a,
	0x14, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x54, 0x46, 0x49, 0x58,
	0x45, 0x44, 0x50, 0x45, 0x52, 0x10, 0x88, 0x04, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x89, 0x04, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x8a,
	0x04, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48,
	0x50, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x8b, 0x04, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x50, 0x43, 0x4f, 0x53, 0x54, 0x50, 0x45, 0x52, 0x10,
	0x8c, 0x04, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x41, 0x59, 0x43, 0x44, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x96, 0x04,
	0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x41, 0x59, 0x43, 0x44, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x50, 0x45, 0x52, 0x10, 0x97,
	0x04, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x98, 0x04, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x50, 0x45,
	0x52, 0x10, 0x99, 0x04, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x54, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x9a, 0x04, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0xd8, 0x04, 0x12, 0x14, 0x0a, 0x0f,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x41, 0x43, 0x54, 0x10,
	0xd9, 0x04, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0xda, 0x04, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x46, 0x10, 0xdb,
	0x04, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x10, 0xdc, 0x04, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x41, 0x52, 0x52, 0x55, 0x4e, 0x10,
	0xdd, 0x04, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x49, 0x44, 0x45, 0x10, 0xde, 0x04, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x55, 0x4e, 0x54, 0x10, 0xdf, 0x04, 0x12, 0x15, 0x0a,
	0x10, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a,
	0x45, 0x10, 0xe0, 0x04, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0xe1,
	0x04, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0xe2, 0x04, 0x12, 0x19, 0x0a,
	0x14, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x45,
	0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0xe3, 0x04, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0xe4, 0x04, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xe5, 0x04,
	0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x32, 0x10, 0xe6, 0x04, 0x12, 0x18, 0x0a, 0x13,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x10, 0xe7, 0x04, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x53, 0x4b, 0x49, 0x4c, 0x4c,
	0x10, 0xe8, 0x04, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x10, 0xe9, 0x04, 0x12, 0x13, 0x0a,
	0x0e, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x4f, 0x10,
	0xea, 0x04, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x4e, 0x53, 0x45, 0x4d, 0x42, 0x4c, 0x45, 0x10, 0xeb, 0x04, 0x12, 0x1f, 0x0a, 0x1a, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x10, 0xec, 0x04, 0x12, 0x1b, 0x0a, 0x16,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x48, 0x59,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0xed, 0x04, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x45, 0x46, 0x46, 0x45, 0x43,
	0x54, 0x33, 0x10, 0xee, 0x04, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x54, 0x4b, 0x41, 0x54, 0x54, 0x52, 0x10, 0xbc, 0x05, 0x12, 0x16, 0x0a,
	0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x54,
	0x54, 0x52, 0x10, 0xbd, 0x05, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xbe, 0x05,
	0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x41,
	0x52, 0x54, 0x48, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xbf, 0x05, 0x12, 0x1a, 0x0a, 0x15,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x44,
	0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xc0, 0x05, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52,
	0x10, 0xc1, 0x05, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xc2,
	0x05, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48,
	0x4f, 0x4c, 0x59, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xc3, 0x05, 0x12, 0x1b, 0x0a, 0x16,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x44, 0x4f, 0x57,
	0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xc4, 0x05, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x48, 0x4f, 0x53, 0x54, 0x44, 0x41, 0x4d, 0x50,
	0x45, 0x52, 0x10, 0xc5, 0x05, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x41, 0x44, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10,
	0xc6, 0x05, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x4f, 0x4e, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xc7, 0x05, 0x12,
	0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x57,
	0x49, 0x4e, 0x44, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xc8, 0x05, 0x12, 0x1c, 0x0a, 0x17,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x45, 0x41, 0x52, 0x54,
	0x48, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xc9, 0x05, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x57, 0x41, 0x54, 0x45, 0x52, 0x44,
	0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xca, 0x05, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x46, 0x49, 0x52, 0x45, 0x44, 0x41, 0x4d, 0x50,
	0x45, 0x52, 0x10, 0xcb, 0x05, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x44, 0x41, 0x4d, 0x50,
	0x45, 0x52, 0x10, 0xcc, 0x05, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x45, 0x48, 0x4f, 0x4c, 0x59, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10,
	0xcd, 0x05, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x45, 0x53, 0x48, 0x41, 0x44, 0x4f, 0x57, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xce,
	0x05, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x45, 0x47, 0x48, 0x4f, 0x53, 0x54, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xcf, 0x05, 0x12,
	0x1d, 0x0a, 0x18, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x55,
	0x4e, 0x44, 0x45, 0x41, 0x44, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xd0, 0x05, 0x12, 0x1d,
	0x0a, 0x18, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x4f, 0x4e, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xd1, 0x05, 0x12, 0x16, 0x0a,
	0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x41,
	0x54, 0x4b, 0x10, 0xd2, 0x05, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x41, 0x52, 0x54, 0x48, 0x41, 0x54, 0x4b, 0x10, 0xd3, 0x05, 0x12, 0x16,
	0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x45,
	0x41, 0x54, 0x4b, 0x10, 0xd4, 0x05, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x41, 0x54, 0x4b, 0x10, 0xd5, 0x05, 0x12,
	0x19, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x55,
	0x54, 0x52, 0x41, 0x4c, 0x41, 0x54, 0x4b, 0x10, 0xd6, 0x05, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x4c, 0x59, 0x41, 0x54, 0x4b, 0x10,
	0xd7, 0x05, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x41, 0x52, 0x4b, 0x41, 0x54, 0x4b, 0x10, 0xd8, 0x05, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x44, 0x45, 0x46, 0x10,
	0xd9, 0x05, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x41, 0x52, 0x54, 0x48, 0x44, 0x45, 0x46, 0x10, 0xda, 0x05, 0x12, 0x16, 0x0a, 0x11, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x44, 0x45, 0x46,
	0x10, 0xdb, 0x05, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x44, 0x45, 0x46, 0x10, 0xdc, 0x05, 0x12, 0x19, 0x0a, 0x14,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41,
	0x4c, 0x44, 0x45, 0x46, 0x10, 0xdd, 0x05, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x4c, 0x59, 0x44, 0x45, 0x46, 0x10, 0xde, 0x05, 0x12,
	0x16, 0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x52,
	0x4b, 0x44, 0x45, 0x46, 0x10, 0xdf, 0x05, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x48, 0x4f, 0x53, 0x54, 0x41, 0x54, 0x4b, 0x10, 0xe0, 0x05,
	0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x41, 0x44, 0x41, 0x54, 0x4b, 0x10, 0xe1, 0x05, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x53, 0x4f, 0x4e, 0x49, 0x4e,
	0x47, 0x41, 0x54, 0x4b, 0x10, 0xe2, 0x05, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x55, 0x54, 0x45, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52,
	0x10, 0xa0, 0x06, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x4d, 0x49, 0x48, 0x55, 0x4d, 0x41, 0x4e, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52,
	0x10, 0xa1, 0x06, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x4d, 0x4f, 0x4e, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xa2, 0x06, 0x12,
	0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41,
	0x4e, 0x54, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xa3, 0x06, 0x12, 0x1d, 0x0a, 0x18, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x45, 0x53,
	0x53, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xa4, 0x06, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x4c, 0x45, 0x53, 0x53,
	0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xa5, 0x06, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x53, 0x48, 0x44, 0x41, 0x4d, 0x50, 0x45,
	0x52, 0x10, 0xa6, 0x06, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xa7, 0x06,
	0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x53, 0x45, 0x43, 0x54, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xa8, 0x06, 0x12, 0x1b, 0x0a,
	0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f,
	0x4e, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0xa9, 0x06, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x55, 0x54, 0x45, 0x52, 0x45, 0x53,
	0x50, 0x45, 0x52, 0x10, 0xaa, 0x06, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4d, 0x49, 0x48, 0x55, 0x4d, 0x41, 0x4e, 0x52, 0x45, 0x53,
	0x50, 0x45, 0x52, 0x10, 0xab, 0x06, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4d, 0x4f, 0x4e, 0x52, 0x45, 0x53, 0x50, 0x45, 0x52, 0x10,
	0xac, 0x06, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x4c, 0x41, 0x4e, 0x54, 0x52, 0x45, 0x53, 0x50, 0x45, 0x52, 0x10, 0xad, 0x06, 0x12, 0x1d,
	0x0a, 0x18, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x44,
	0x4c, 0x45, 0x53, 0x53, 0x52, 0x45, 0x53, 0x50, 0x45, 0x52, 0x10, 0xae, 0x06, 0x12, 0x1d, 0x0a,
	0x18, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x4c,
	0x45, 0x53, 0x53, 0x52, 0x45, 0x53, 0x50, 0x45, 0x52, 0x10, 0xaf, 0x06, 0x12, 0x19, 0x0a, 0x14,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x53, 0x48, 0x52, 0x45,
	0x53, 0x50, 0x45, 0x52, 0x10, 0xb0, 0x06, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x52, 0x45, 0x53, 0x50, 0x45, 0x52,
	0x10, 0xb1, 0x06, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x53, 0x45, 0x43, 0x54, 0x52, 0x45, 0x53, 0x50, 0x45, 0x52, 0x10, 0xb2, 0x06,
	0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52,
	0x41, 0x47, 0x4f, 0x4e, 0x52, 0x45, 0x53, 0x50, 0x45, 0x52, 0x10, 0xb3, 0x06, 0x12, 0x1a, 0x0a,
	0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c,
	0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0x84, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x52, 0x45, 0x53, 0x50,
	0x45, 0x52, 0x10, 0x85, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0x86, 0x07, 0x12,
	0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x44,
	0x52, 0x45, 0x53, 0x50, 0x45, 0x52, 0x10, 0x87, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x47, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52,
	0x10, 0x88, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x49, 0x47, 0x52, 0x45, 0x53, 0x50, 0x45, 0x52, 0x10, 0x89, 0x07, 0x12, 0x19, 0x0a,
	0x14, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x44,
	0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0x8a, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x52, 0x45, 0x53, 0x50, 0x45, 0x52,
	0x10, 0x8b, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0x8c,
	0x07, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x52, 0x45, 0x53, 0x50, 0x45, 0x52, 0x10, 0x8d, 0x07, 0x12,
	0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x50, 0x43,
	0x44, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x10, 0x8e, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x50, 0x43, 0x52, 0x45, 0x53, 0x50, 0x45, 0x52,
	0x10, 0x8f, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x49, 0x4c, 0x45, 0x4e, 0x43, 0x45, 0x41, 0x54, 0x4b, 0x10, 0xe8, 0x07, 0x12, 0x19,
	0x0a, 0x14, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4c, 0x45,
	0x4e, 0x43, 0x45, 0x44, 0x45, 0x46, 0x10, 0xe9, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x41, 0x54, 0x4b,
	0x10, 0xea, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x44, 0x45, 0x46, 0x10, 0xeb, 0x07, 0x12, 0x17, 0x0a,
	0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45,
	0x41, 0x54, 0x4b, 0x10, 0xec, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x44, 0x45, 0x46, 0x10, 0xed, 0x07, 0x12,
	0x16, 0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x55,
	0x4e, 0x41, 0x54, 0x4b, 0x10, 0xee, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x10, 0xef, 0x07, 0x12,
	0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x49,
	0x4e, 0x44, 0x41, 0x54, 0x4b, 0x10, 0xf0, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x44, 0x45, 0x46, 0x10, 0xf1,
	0x07, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x4f, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x54, 0x4b, 0x10, 0xf2, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x4f, 0x4e, 0x44,
	0x45, 0x46, 0x10, 0xf3, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x41, 0x54, 0x4b, 0x10, 0xf4, 0x07, 0x12, 0x16, 0x0a,
	0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x44,
	0x45, 0x46, 0x10, 0xf5, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4f, 0x53, 0x41, 0x54, 0x4b, 0x10, 0xf6, 0x07, 0x12, 0x17,
	0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4f,
	0x53, 0x44, 0x45, 0x46, 0x10, 0xf7, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x53, 0x45, 0x41, 0x54, 0x4b, 0x10, 0xf8, 0x07,
	0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55,
	0x52, 0x53, 0x45, 0x44, 0x45, 0x46, 0x10, 0xf9, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x41, 0x54, 0x4b, 0x10,
	0xfa, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x44, 0x45, 0x46, 0x10, 0xfb, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f,
	0x52, 0x4d, 0x49, 0x44, 0x10, 0x80, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x41, 0x54, 0x4b, 0x10, 0x81, 0x08,
	0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4c,
	0x45, 0x45, 0x50, 0x44, 0x45, 0x46, 0x10, 0x82, 0x08, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54,
	0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45,
	0x41, 0x54, 0x4b, 0x10, 0x83, 0x08, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x45, 0x46,
	0x10, 0x84, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x4c, 0x45, 0x45, 0x44, 0x41, 0x54, 0x4b, 0x10, 0x85, 0x08, 0x12, 0x17, 0x0a, 0x12,
	0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x45, 0x45, 0x44, 0x44,
	0x45, 0x46, 0x10, 0x86, 0x08, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x41, 0x54, 0x4b, 0x10,
	0x87, 0x08, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x41, 0x52, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x44, 0x45, 0x46, 0x10, 0x88, 0x08, 0x12,
	0x1c, 0x0a, 0x17, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x44, 0x45, 0x46, 0x10, 0x89, 0x08, 0x12, 0x1b, 0x0a,
	0x16, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x48, 0x45, 0x41,
	0x4c, 0x45, 0x4e, 0x43, 0x50, 0x45, 0x52, 0x10, 0xd6, 0x08, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x45, 0x4e, 0x43, 0x50,
	0x45, 0x52, 0x10, 0xd7, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x53, 0x4f, 0x4f, 0x4e, 0x10, 0xb8, 0x09, 0x12, 0x16,
	0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x56, 0x45,
	0x5f, 0x48, 0x50, 0x10, 0xb9, 0x09, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x53, 0x50, 0x10, 0xba, 0x09, 0x12, 0x1a,
	0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4c, 0x49, 0x4d,
	0x5f, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0xbb, 0x09, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4c, 0x49, 0x4d, 0x5f, 0x57, 0x45, 0x49,
	0x47, 0x48, 0x54, 0x10, 0xbc, 0x09, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x45, 0x58, 0x50, 0x50, 0x45, 0x52, 0x10, 0xbd,
	0x09, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a,
	0x4f, 0x42, 0x45, 0x58, 0x50, 0x50, 0x45, 0x52, 0x10, 0xbe, 0x09, 0x12, 0x1a, 0x0a, 0x15, 0x45,
	0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a, 0x45, 0x4e, 0x59, 0x44, 0x52, 0x4f,
	0x50, 0x50, 0x45, 0x52, 0x10, 0xbf, 0x09, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x54, 0x52,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52,
	0x10, 0xc0, 0x09, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0xc1, 0x09, 0x2a, 0x51, 0x0a, 0x07, 0x45, 0x47, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x47, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x59, 0x0a, 0x09, 0x45, 0x43,
	0x68, 0x61, 0x72, 0x52, 0x61, 0x63, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x43, 0x48, 0x41, 0x52,
	0x52, 0x41, 0x43, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x43,
	0x48, 0x41, 0x52, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x48, 0x55, 0x4d, 0x41, 0x4e, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x43, 0x48, 0x41, 0x52, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x54,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x43, 0x48, 0x41, 0x52, 0x52, 0x41, 0x43, 0x45, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0xda, 0x14, 0x0a, 0x0b, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50,
	0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x57, 0x41, 0x52, 0x52, 0x49, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x4e, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x52, 0x44, 0x4b, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0d, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x55, 0x4e, 0x45, 0x4b, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x4d,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x52, 0x4f, 0x46,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x55, 0x53, 0x41, 0x44, 0x45, 0x52, 0x10,
	0x48, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x41, 0x4c, 0x41, 0x44, 0x49, 0x4e, 0x10, 0x49, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50,
	0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x59, 0x41, 0x4c, 0x47,
	0x55, 0x41, 0x52, 0x44, 0x10, 0x4a, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x4e, 0x45, 0x41, 0x56, 0x45, 0x4e,
	0x47, 0x45, 0x52, 0x10, 0x4b, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x49, 0x41, 0x4e, 0x10, 0x15, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x57,
	0x49, 0x5a, 0x41, 0x52, 0x44, 0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50, 0x52, 0x4f, 0x46,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x57, 0x49, 0x5a, 0x41, 0x52,
	0x44, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x52, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x18, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x43, 0x41,
	0x4e, 0x45, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x50,
	0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x41, 0x47, 0x45, 0x10, 0x52,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x10, 0x53, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x52, 0x43, 0x45,
	0x52, 0x45, 0x52, 0x10, 0x54, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x52, 0x4f, 0x4e, 0x4f, 0x4d, 0x41, 0x4e, 0x43, 0x45,
	0x52, 0x10, 0x55, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x48, 0x49, 0x45, 0x46, 0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50,
	0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x53, 0x41, 0x53, 0x53,
	0x49, 0x4e, 0x10, 0x20, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x53, 0x41, 0x53, 0x53, 0x49, 0x4e, 0x43, 0x52, 0x4f, 0x53,
	0x53, 0x10, 0x21, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x4c, 0x4f, 0x54, 0x49, 0x4e, 0x45, 0x43, 0x52, 0x4f,
	0x53, 0x53, 0x10, 0x22, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x4c, 0x42, 0x4c, 0x41, 0x44, 0x45, 0x43, 0x52, 0x4f,
	0x53, 0x53, 0x10, 0x23, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x10, 0x5c, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x4b,
	0x45, 0x52, 0x10, 0x5d, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x44, 0x4f, 0x57, 0x43, 0x48, 0x41, 0x53, 0x45, 0x52,
	0x10, 0x5e, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x48, 0x41, 0x4e, 0x54, 0x4f, 0x4d, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x10,
	0x5f, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x52, 0x43, 0x48, 0x45, 0x52, 0x10, 0x29, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50, 0x52,
	0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10,
	0x2a, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x4e, 0x49, 0x50, 0x45, 0x52, 0x10, 0x2b, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50, 0x52,
	0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x10,
	0x2c, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x41, 0x52, 0x48, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x2d,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x42, 0x41, 0x52, 0x44, 0x10, 0x66, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x57, 0x4e, 0x10, 0x67, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e,
	0x53, 0x54, 0x52, 0x45, 0x4c, 0x10, 0x68, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x50, 0x52, 0x4f, 0x46,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x4c, 0x41, 0x52, 0x54, 0x52, 0x4f, 0x55,
	0x56, 0x45, 0x52, 0x45, 0x10, 0x69, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x10, 0x70, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x59,
	0x50, 0x53, 0x59, 0x10, 0x71, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x4e, 0x44, 0x45, 0x52, 0x45, 0x52, 0x10, 0x72, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x55, 0x4e, 0x41, 0x44, 0x41, 0x4e, 0x53, 0x45, 0x55, 0x53, 0x45, 0x10, 0x73, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x4f,
	0x4c, 0x59, 0x54, 0x45, 0x10, 0x33, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x45, 0x53, 0x54, 0x10, 0x34, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x50, 0x52, 0x49, 0x45, 0x53, 0x54, 0x10, 0x35, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50,
	0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x42, 0x49,
	0x53, 0x48, 0x4f, 0x50, 0x10, 0x36, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x41, 0x49, 0x4e, 0x54, 0x10, 0x37, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e,
	0x4b, 0x10, 0x7a, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x10, 0x7b, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x55,
	0x52, 0x41, 0x10, 0x7c, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x46, 0x49, 0x53, 0x54, 0x10, 0x7d,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x10, 0x3d, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50,
	0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x53,
	0x4d, 0x49, 0x54, 0x48, 0x10, 0x3e, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x53, 0x4d, 0x49, 0x54, 0x48,
	0x10, 0x3f, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x43, 0x10, 0x40, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x42, 0x52, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x41, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x50,
	0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x43, 0x48, 0x45, 0x4d,
	0x49, 0x53, 0x54, 0x10, 0x84, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x85, 0x01,
	0x12, 0x18, 0x0a, 0x13, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x47, 0x45, 0x4e, 0x45, 0x54, 0x49, 0x43, 0x10, 0x86, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x50,
	0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x45, 0x47, 0x45, 0x54, 0x54,
	0x45, 0x52, 0x10, 0x87, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45,
	0x10, 0x8f, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4c, 0x54, 0x49, 0x4d, 0x41, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x90, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x47, 0x55, 0x41, 0x52, 0x44, 0x49, 0x41, 0x4e,
	0x10, 0x91, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x43, 0x41, 0x54, 0x10, 0x96, 0x01, 0x12,
	0x1b, 0x0a, 0x16, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x57,
	0x41, 0x52, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x41, 0x54, 0x10, 0x97, 0x01, 0x12, 0x1c, 0x0a, 0x17,
	0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x43, 0x52,
	0x4f, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x10, 0x98, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x50,
	0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e,
	0x45, 0x52, 0x10, 0x99, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x4d, 0x45, 0x52, 0x10, 0x9a, 0x01, 0x12, 0x20,
	0x0a, 0x1b, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x50,
	0x49, 0x52, 0x49, 0x54, 0x57, 0x48, 0x49, 0x53, 0x50, 0x45, 0x52, 0x45, 0x52, 0x10, 0x9b, 0x01,
	0x12, 0x16, 0x0a, 0x11, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x49, 0x4e, 0x4a, 0x41, 0x10, 0xa3, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x50, 0x52, 0x4f,
	0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x44, 0x4f, 0x57, 0x57, 0x4f,
	0x4c, 0x46, 0x10, 0xa4, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x59, 0x41, 0x4d, 0x41, 0x54, 0x41, 0x10, 0xa5, 0x01, 0x12, 0x19,
	0x0a, 0x14, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x53, 0x4d, 0x41, 0x4e, 0x10, 0xad, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x50, 0x52,
	0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x42, 0x45, 0x4c, 0x10, 0xae,
	0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x52, 0x41, 0x4e, 0x54, 0x10, 0xaf, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x50,
	0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x4c, 0x4c, 0x49,
	0x4e, 0x4b, 0x45, 0x52, 0x10, 0xb7, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x50, 0x52, 0x4f, 0x46,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x4c, 0x52, 0x45, 0x41, 0x50, 0x45,
	0x52, 0x10, 0xb8, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x57, 0x49, 0x4e, 0x44, 0x45, 0x4d, 0x4f, 0x4e, 0x10, 0xb9, 0x01,
	0x12, 0x18, 0x0a, 0x13, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x57, 0x4b, 0x57, 0x4f, 0x4e, 0x10, 0xc1, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x50,
	0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x47, 0x4c,
	0x41, 0x44, 0x49, 0x41, 0x54, 0x4f, 0x52, 0x10, 0xc2, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x50,
	0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x4f, 0x43, 0x41, 0x4c,
	0x59, 0x50, 0x53, 0x45, 0x10, 0xc3, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x50, 0x52, 0x4f, 0x46,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x10, 0xcb, 0x01, 0x12, 0x19,
	0x0a, 0x14, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49,
	0x44, 0x45, 0x46, 0x49, 0x52, 0x45, 0x10, 0xcc, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x50, 0x52,
	0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x45, 0x52, 0x4e, 0x4f,
	0x10, 0xcd, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x10, 0xd5, 0x01, 0x12, 0x1a, 0x0a, 0x15,
	0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x41, 0x47,
	0x4f, 0x4e, 0x47, 0x4f, 0x44, 0x10, 0xd6, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x50, 0x52, 0x4f,
	0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x4f, 0x4e, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0xd7, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x45,
	0x52, 0x10, 0xdf, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4f, 0x53, 0x10, 0xe0, 0x01, 0x12, 0x18, 0x0a, 0x13,
	0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x53, 0x10, 0xe1, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x41, 0x52, 0x4e, 0x41,
	0x54, 0x4f, 0x53, 0x45, 0x10, 0xdd, 0x04, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x50, 0x52, 0x4f, 0x46,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4e, 0x49, 0x44, 0x48,
	0x4f, 0x47, 0x47, 0x10, 0xe7, 0x04, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x41, 0x49, 0x54, 0x41,
	0x4d, 0x41, 0x10, 0xf1, 0x04, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x47, 0x45, 0x4e, 0x4f, 0x53, 0x10,
	0xfb, 0x04, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x84, 0x07, 0x12, 0x17, 0x0a,
	0x12, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x10, 0xf4, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x54, 0x10, 0xe7, 0x07, 0x12, 0x14, 0x0a, 0x0f,
	0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10,
	0xe8, 0x07, 0x2a, 0xcc, 0x01, 0x0a, 0x10, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x52, 0x4f, 0x46,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x54, 0x57, 0x4f, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x47, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x46, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x52, 0x4f, 0x46,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10,
	0x06, 0x2a, 0xe5, 0x01, 0x0a, 0x0c, 0x45, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x55, 0x52, 0x50, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x05, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x47, 0x4f, 0x4c,
	0x44, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x08, 0x2a, 0x8f, 0x05, 0x0a, 0x0a, 0x45, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4d, 0x4f, 0x4e,
	0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45,
	0x50, 0x54, 0x5f, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x4f, 0x12, 0x22, 0x0a, 0x1e,
	0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x7b,
	0x12, 0x17, 0x0a, 0x12, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x10, 0x84, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x4d, 0x4f,
	0x4e, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x10, 0x83,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x4f, 0x4c, 0x44, 0x10, 0x82, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x4d, 0x4f, 0x4e, 0x45,
	0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53,
	0x10, 0x85, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x41, 0x52, 0x44, 0x45, 0x4e, 0x10, 0x8c, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45,
	0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x8f, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x4d, 0x4f, 0x4e,
	0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x10, 0x91, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x41, 0x53, 0x53, 0x45, 0x54, 0x10, 0x92, 0x01,
	0x12, 0x1a, 0x0a, 0x15, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x52, 0x49, 0x45, 0x4e, 0x44, 0x53, 0x48, 0x49, 0x50, 0x10, 0x93, 0x01, 0x12, 0x17, 0x0a, 0x12,
	0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x56, 0x50, 0x43, 0x4f,
	0x49, 0x4e, 0x10, 0x8d, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x9a, 0x01, 0x12, 0x1a,
	0x0a, 0x15, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x48, 0x4f, 0x4e, 0x4f, 0x52, 0x10, 0x9c, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x4d,
	0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4c, 0x4f,
	0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x9d, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x4d, 0x4f, 0x4e,
	0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x43, 0x4f, 0x49, 0x4e, 0x10,
	0xa9, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x41, 0x4e, 0x44, 0x10, 0x81, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x4d, 0x4f, 0x4e,
	0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x4d, 0x41, 0x52, 0x45,
	0x10, 0x86, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x10, 0xa1, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4b, 0x49, 0x5f, 0x45, 0x58, 0x50, 0x10, 0xa8, 0x04, 0x12, 0x1a,
	0x0a, 0x15, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x55, 0x43,
	0x4b, 0x59, 0x5f, 0x44, 0x49, 0x43, 0x45, 0x10, 0xec, 0x20, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x4d,
	0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x50, 0x50, 0x59, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0xee, 0x20, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0xed, 0x20, 0x2a, 0xe2, 0x03, 0x0a, 0x0f,
	0x45, 0x43, 0x72, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x49, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x45, 0x41, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x4b, 0x45, 0x44, 0x45, 0x41, 0x44, 0x10, 0x05, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45,
	0x4c, 0x46, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x4c, 0x45, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x09, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c,
	0x45, 0x41, 0x56, 0x45, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x4f, 0x10, 0x0c, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x55, 0x49, 0x43, 0x49, 0x44, 0x45, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45,
	0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x10,
	0x2a, 0xb2, 0x42, 0x0a, 0x07, 0x45, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x53, 0x4b, 0x49,
	0x4c, 0x4c, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x0a, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52,
	0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x47, 0x4d, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x46, 0x55, 0x42, 0x45, 0x4e, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x0e, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x4f, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x59, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x4d, 0x41, 0x50, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x10, 0x11, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54,
	0x48, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53,
	0x48, 0x4f, 0x50, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x17,
	0x12, 0x10, 0x0a, 0x0c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x56, 0x55, 0x50,
	0x10, 0x18, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x1a, 0x12, 0x10, 0x0a, 0x0c, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x4c, 0x10, 0x1b, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x50, 0x52,
	0x41, 0x59, 0x10, 0x1c, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x10, 0x1d, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x10, 0x1e, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x20,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x41,
	0x49, 0x52, 0x10, 0x21, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x22, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x58, 0x10, 0x23, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x24,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x4f, 0x4a, 0x4f,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x25, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x44, 0x4f, 0x4a, 0x4f, 0x48, 0x45, 0x4c, 0x50, 0x10, 0x26, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10,
	0x27, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x42,
	0x10, 0x29, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x57, 0x41,
	0x4e, 0x54, 0x45, 0x44, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x2b, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x53, 0x54,
	0x45, 0x52, 0x41, 0x49, 0x10, 0x2c, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x10, 0x2d, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x45, 0x52, 0x52, 0x49, 0x53, 0x57, 0x48,
	0x45, 0x45, 0x4c, 0x10, 0x2e, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x43, 0x52, 0x41, 0x5a, 0x59, 0x47, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x2f, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x5a, 0x4f, 0x4e,
	0x45, 0x10, 0x30, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x31, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x44, 0x4f, 0x47, 0x10, 0x32, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x10, 0x33, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x51, 0x41, 0x10, 0x34, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45,
	0x10, 0x35, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x48, 0x45,
	0x4c, 0x50, 0x10, 0x36, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x37, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x55, 0x54, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10,
	0x38, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x46,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x39, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x3a, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x54, 0x52, 0x45, 0x4e,
	0x47, 0x54, 0x48, 0x10, 0x3b, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x3c, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x49, 0x54, 0x45, 0x4d,
	0x10, 0x3d, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x3e, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x3f, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x59, 0x10, 0x40, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x52, 0x45, 0x54, 0x10, 0x41, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x41, 0x50, 0x55, 0x4c,
	0x41, 0x10, 0x42, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d,
	0x4f, 0x4e, 0x45, 0x59, 0x43, 0x41, 0x54, 0x10, 0x43, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x45, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x10, 0x44,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53,
	0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x54, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x45, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x5f,
	0x4f, 0x46, 0x46, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x46, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x50, 0x55, 0x54,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x47, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x10, 0x48, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x50, 0x55, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x49, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x54, 0x45,
	0x4d, 0x50, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x4a, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x10, 0x4b, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x10, 0x4c, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x4d,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x55, 0x54, 0x5f,
	0x42, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x4e, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x4f,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x10, 0x50, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x10, 0x51, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x52, 0x41, 0x49,
	0x44, 0x10, 0x52, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d,
	0x4f, 0x4e, 0x54, 0x48, 0x43, 0x41, 0x52, 0x44, 0x10, 0x53, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x4c, 0x41, 0x42, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x54, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x4c, 0x41, 0x42, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x55, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x43, 0x41, 0x52, 0x44, 0x10,
	0x56, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4f,
	0x4b, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x57, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x45, 0x41, 0x54, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x58, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x5f,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x52, 0x59, 0x10, 0x59, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10,
	0x5a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x10, 0x5b, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x10, 0x5c, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x50, 0x45, 0x54, 0x10, 0x5d, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x50, 0x45, 0x54, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x4e, 0x54, 0x55, 0x52, 0x45, 0x10, 0x5e,
	0x12, 0x10, 0x0a, 0x0c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c,
	0x10, 0x5f, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x55,
	0x46, 0x46, 0x10, 0x60, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x50, 0x56, 0x50, 0x10, 0x61, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x55, 0x50, 0x10,
	0x62, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x55, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10,
	0x63, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x55, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x47, 0x41, 0x4e, 0x45, 0x4e, 0x5f, 0x46, 0x55, 0x44, 0x41, 0x49, 0x10, 0x66, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x67, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x10, 0x68, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52,
	0x5f, 0x47, 0x52, 0x41, 0x44, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x69, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x6a, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x6b,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x6c, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x10, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f,
	0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x6f, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f,
	0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x70, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10,
	0x71, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4c, 0x44, 0x10, 0x72, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x50,
	0x4f, 0x4c, 0x4c, 0x59, 0x10, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0x74, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52,
	0x49, 0x41, 0x4c, 0x10, 0x75, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x57, 0x45, 0x4c, 0x46, 0x41, 0x52, 0x45, 0x10, 0x76, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x10, 0x77, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x4c, 0x49, 0x54,
	0x54, 0x45, 0x52, 0x42, 0x4f, 0x58, 0x10, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10,
	0x7a, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x10, 0x7b, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x7c,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49,
	0x46, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x10, 0x7d, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41,
	0x43, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x7e, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45,
	0x52, 0x59, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x10, 0x7f, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x5f, 0x57, 0x45, 0x44,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x80, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x50,
	0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x81, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x55, 0x59,
	0x5f, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x82, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x47, 0x49, 0x56, 0x45, 0x10, 0x83, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x48, 0x4f, 0x54,
	0x4f, 0x10, 0x84, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x10, 0x85,
	0x01, 0x12, 0x10, 0x0a, 0x0b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x56, 0x47,
	0x10, 0x86, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x57,
	0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x87, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x53, 0x45, 0x10, 0x88, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x50, 0x45, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x89, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54,
	0x10, 0x8a, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b,
	0x46, 0x43, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x8b, 0x01, 0x12, 0x1b,
	0x0a, 0x16, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x8c, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x10, 0x8d, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x8e, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x46, 0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x44, 0x4e, 0x45, 0x52, 0x10,
	0x8f, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x51, 0x55,
	0x49, 0x43, 0x4b, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x90, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x10, 0x91, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x10, 0x92, 0x01, 0x12, 0x1a, 0x0a, 0x15,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x53, 0x48, 0x4f, 0x50, 0x10, 0x93, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x44, 0x52, 0x45, 0x53, 0x53, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x47,
	0x45, 0x10, 0x94, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x44, 0x45, 0x41, 0x44, 0x10, 0x95, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45,
	0x54, 0x55, 0x52, 0x4e, 0x10, 0x96, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45,
	0x10, 0x97, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x10, 0x98, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x50,
	0x10, 0x99, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45,
	0x10, 0x9a, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x9b, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x10, 0x9c, 0x01, 0x12, 0x1e,
	0x0a, 0x19, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x9d, 0x01, 0x12, 0x1c,
	0x0a, 0x17, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52,
	0x59, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x5f, 0x32, 0x10, 0x9e, 0x01, 0x12, 0x1b, 0x0a, 0x16,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x10, 0x9f, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x50, 0x55, 0x5a, 0x5a, 0x4c,
	0x45, 0x10, 0xa0, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x45, 0x58, 0x50, 0x52, 0x41, 0x49, 0x44, 0x10, 0xa1, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x52, 0x45, 0x54, 0x10,
	0xa2, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x52,
	0x45, 0x53, 0x54, 0x49, 0x47, 0x45, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x10, 0xa3, 0x01, 0x12, 0x20,
	0x0a, 0x1b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52,
	0x59, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0xa4, 0x01,
	0x12, 0x19, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x49, 0x44, 0x45,
	0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0xa5, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0xa6, 0x01, 0x12, 0x20,
	0x0a, 0x1b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x41, 0x49, 0x53, 0x41, 0x4c, 0x10, 0xa7, 0x01,
	0x12, 0x23, 0x0a, 0x1e, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x4d, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x53, 0x41,
	0x4d, 0x45, 0x10, 0xa8, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x53, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xa9, 0x01, 0x12, 0x1d, 0x0a,
	0x18, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x10, 0xaa, 0x01, 0x12, 0x1d, 0x0a, 0x18,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0xab, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xac, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x4d,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0xad, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x44, 0x45, 0x41, 0x44, 0x42, 0x4f, 0x53, 0x53, 0x10,
	0xae, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x45,
	0x4d, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x56, 0x45, 0x10, 0xaf, 0x01,
	0x12, 0x1c, 0x0a, 0x17, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54,
	0x45, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x5f, 0x33, 0x10, 0xb0, 0x01, 0x12, 0x1c,
	0x0a, 0x17, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x53, 0x4d, 0x45, 0x4c, 0x54, 0x10, 0xb1, 0x01, 0x12, 0x23, 0x0a, 0x1e,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x52, 0x4f, 0x43, 0x43, 0x5f, 0x53,
	0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0xb2,
	0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x56, 0x50,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x10, 0xb3, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52, 0x52, 0x41,
	0x49, 0x44, 0x10, 0xb4, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53, 0x10, 0xb5, 0x01, 0x12, 0x21,
	0x0a, 0x1c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x54, 0x48,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x55, 0x50, 0x10, 0xb6,
	0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x4f, 0x55,
	0x52, 0x54, 0x48, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10,
	0xb7, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x4f,
	0x47, 0x55, 0x45, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0xb8, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x10, 0xb9, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x46,
	0x4f, 0x55, 0x52, 0x54, 0x48, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x10, 0xba, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x45, 0x43, 0x48, 0x54, 0x52, 0x45, 0x45, 0x10, 0xbb, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0xbc, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x54, 0x4f, 0x59, 0x10,
	0xbd, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41,
	0x50, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xbe, 0x01, 0x12,
	0x15, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x41, 0x54, 0x42, 0x45,
	0x49, 0x4e, 0x47, 0x10, 0xbf, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc0, 0x01, 0x12,
	0x20, 0x0a, 0x1b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x42, 0x55, 0x59, 0x10, 0xc1,
	0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x51, 0x55,
	0x49, 0x50, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0xc2, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x49, 0x54, 0x45, 0x4d, 0x10, 0xc3, 0x01,
	0x12, 0x1a, 0x0a, 0x15, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0xc4, 0x01, 0x12, 0x1b, 0x0a, 0x16,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x4d, 0x41, 0x52,
	0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x10, 0xc5, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0xc6,
	0x01, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x48, 0x49, 0x54, 0x50, 0x4f, 0x4c, 0x4c, 0x59, 0x10, 0xc7, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x46,
	0x49, 0x47, 0x48, 0x54, 0x10, 0xc8, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10,
	0xc9, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x41,
	0x59, 0x53, 0x49, 0x47, 0x4e, 0x10, 0xcc, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x5f, 0x50, 0x56, 0x50, 0x10, 0xcd,
	0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x4c,
	0x4c, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0xcf, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x42, 0x49, 0x46, 0x52, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0xd0, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x45, 0x49, 0x4e, 0x48, 0x45, 0x52,
	0x4a, 0x41, 0x52, 0x10, 0xd1, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x4d, 0x49, 0x4e, 0x49, 0x52, 0x4f, 0x10, 0xd3, 0x01, 0x12, 0x14,
	0x0a, 0x0f, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4f,
	0x4e, 0x10, 0xd4, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x4f, 0x4c, 0x4c, 0x10, 0xd5, 0x01, 0x12,
	0x1b, 0x0a, 0x16, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x4c, 0x45,
	0x53, 0x53, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0xd6, 0x01, 0x12, 0x1a, 0x0a, 0x15,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0xd7, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0xd8, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x4f, 0x4b, 0x49, 0x10, 0xdd, 0x01, 0x12, 0x17,
	0x0a, 0x12, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x50, 0x55,
	0x5a, 0x5a, 0x4c, 0x45, 0x10, 0xde, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x53, 0x48, 0x4f, 0x50, 0x10, 0xdf, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x42, 0x4f,
	0x4f, 0x4b, 0x10, 0xe0, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0xd9, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x53, 0x45, 0x10, 0xda, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x53, 0x45, 0x10, 0xdb, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x55, 0x4c,
	0x44, 0x10, 0xdc, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x41, 0x49, 0x53,
	0x41, 0x4c, 0x10, 0xe1, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x4d, 0x49, 0x58, 0x31, 0x10, 0xe2, 0x01,
	0x12, 0x19, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54,
	0x45, 0x52, 0x59, 0x5f, 0x4d, 0x49, 0x58, 0x32, 0x10, 0xe3, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x4d,
	0x49, 0x58, 0x33, 0x10, 0xe4, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0xe5, 0x01,
	0x12, 0x1d, 0x0a, 0x18, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x48,
	0x41, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0xe6, 0x01, 0x12,
	0x1c, 0x0a, 0x17, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0xe7, 0x01, 0x12, 0x1d, 0x0a,
	0x18, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c,
	0x5f, 0x41, 0x44, 0x44, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0xe9, 0x01, 0x12, 0x1d, 0x0a, 0x18,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x4c, 0x41, 0x42,
	0x45, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x10, 0xe8, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x10, 0xea, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45,
	0x10, 0xeb, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45,
	0x59, 0x45, 0x10, 0xec, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0xed, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41,
	0x4e, 0x4f, 0x52, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4c, 0x56, 0x55, 0x50, 0x10, 0xee,
	0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53,
	0x4e, 0x45, 0x59, 0x5f, 0x4d, 0x49, 0x43, 0x4b, 0x45, 0x59, 0x5f, 0x4f, 0x4e, 0x10, 0xef, 0x01,
	0x12, 0x21, 0x0a, 0x1c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4e,
	0x45, 0x59, 0x5f, 0x4d, 0x49, 0x43, 0x4b, 0x45, 0x59, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44,
	0x10, 0xf0, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d,
	0x41, 0x4e, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0xf1, 0x01,
	0x12, 0x1a, 0x0a, 0x15, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x4f,
	0x52, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0xf2, 0x01, 0x12, 0x15, 0x0a, 0x10,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x41, 0x54, 0x4f, 0x53,
	0x10, 0xf3, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50,
	0x56, 0x45, 0x43, 0x41, 0x52, 0x44, 0x10, 0xf4, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4e, 0x50,
	0x43, 0x10, 0xf5, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x53, 0x55, 0x50, 0x45, 0x52, 0x47, 0x56, 0x47, 0x10, 0xf6, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f,
	0x47, 0x49, 0x56, 0x45, 0x10, 0xf7, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x10, 0xf8, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x43, 0x41, 0x50, 0x52, 0x41, 0x10, 0xf9, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x50, 0x43, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41,
	0x52, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xfa, 0x01, 0x12, 0x19,
	0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xfb, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x4f, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x47, 0x45,
	0x10, 0xfc, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f,
	0x46, 0x46, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x57, 0x41, 0x52, 0x45, 0x48, 0x4f, 0x55, 0x53, 0x45,
	0x10, 0xfd, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47,
	0x49, 0x46, 0x54, 0x5f, 0x42, 0x55, 0x59, 0x10, 0xfe, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x52, 0x41, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x53, 0x45, 0x10, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x80, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x81, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4f, 0x44, 0x4f, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f,
	0x52, 0x41, 0x49, 0x44, 0x10, 0x82, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52, 0x4c,
	0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x84, 0x02, 0x12, 0x21,
	0x0a, 0x1c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x85,
	0x02, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x5f, 0x4d, 0x49, 0x58, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x10, 0x86, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x10, 0x87, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x50, 0x45, 0x54, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x10, 0x88, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x10, 0x89, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4e, 0x45, 0x59, 0x5f, 0x4d, 0x55,
	0x53, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x8a, 0x02, 0x12, 0x22, 0x0a,
	0x1d, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x4e, 0x5f, 0x52,
	0x4f, 0x59, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x10, 0x8b,
	0x02, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x48, 0x4f,
	0x50, 0x5f, 0x46, 0x55, 0x52, 0x4e, 0x49, 0x54, 0x55, 0x52, 0x45, 0x10, 0x8c, 0x02, 0x12, 0x1e,
	0x0a, 0x19, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x8d, 0x02, 0x12, 0x1c,
	0x0a, 0x17, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x10, 0x8e, 0x02, 0x12, 0x1d, 0x0a, 0x18,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x8f, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x90, 0x02,
	0x12, 0x23, 0x0a, 0x1e, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x10, 0x91, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x50, 0x45, 0x52, 0x43, 0x45, 0x50, 0x54, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x10, 0x93, 0x02, 0x12, 0x24, 0x0a, 0x1f, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10, 0x94, 0x02, 0x12, 0x24, 0x0a,
	0x1f, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44,
	0x10, 0x95, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x96, 0x02, 0x12, 0x22, 0x0a,
	0x1d, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54,
	0x55, 0x52, 0x4e, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10, 0x97,
	0x02, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x59, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10, 0x98, 0x02, 0x12, 0x1c, 0x0a, 0x17,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x49, 0x47, 0x4e, 0x49,
	0x4e, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10, 0x99, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x10, 0x9c, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x9d, 0x02,
	0x12, 0x21, 0x0a, 0x1c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44,
	0x57, 0x45, 0x41, 0x52, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x52, 0x41, 0x49, 0x44,
	0x10, 0x9e, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x9f, 0x02, 0x12, 0x1a, 0x0a,
	0x15, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x53, 0x48, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xa0, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x50, 0x10, 0xa1,
	0x02, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x45, 0x43,
	0x48, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x42, 0x41, 0x43, 0x4b, 0x10, 0xa2,
	0x02, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x45, 0x43,
	0x48, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x41, 0x57, 0x41, 0x52, 0x44,
	0x10, 0xa3, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x45, 0x43, 0x48, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x10,
	0xa4, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x52,
	0x41, 0x43, 0x4b, 0x10, 0xa5, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x50, 0x56, 0x45, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xa6, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x43, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x10, 0xa7, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c,
	0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x4d, 0x49, 0x58, 0x34, 0x10, 0xa8, 0x02, 0x12, 0x1b,
	0x0a, 0x16, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x41, 0x53, 0x53, 0x45, 0x4d, 0x42, 0x4c, 0x59, 0x10, 0xa9, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54, 0x55, 0x52,
	0x4e, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x10, 0xaa, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0xab, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0xac, 0x02, 0x12, 0x1d, 0x0a, 0x18,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0xad, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xae, 0x02, 0x12,
	0x1a, 0x0a, 0x15, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0xaf, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x46, 0x55,
	0x4e, 0x44, 0x10, 0xb0, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0xb1, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0xb2, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x4d, 0x5f, 0x52, 0x41, 0x52, 0x45, 0x5f, 0x45,
	0x4c, 0x49, 0x54, 0x45, 0x10, 0xb3, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x42, 0x50, 0x10, 0xb4, 0x02, 0x12,
	0x1e, 0x0a, 0x19, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x56, 0x45, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x50, 0x41, 0x53, 0x53, 0x10, 0xb5, 0x02, 0x12,
	0x16, 0x0a, 0x11, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x5f,
	0x53, 0x4f, 0x52, 0x54, 0x10, 0xb6, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x10, 0xb7, 0x02, 0x12, 0x11, 0x0a,
	0x0c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xb8, 0x02,
	0x12, 0x18, 0x0a, 0x13, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x48, 0x41, 0x50, 0x50,
	0x4c, 0x59, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xb9, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x4e, 0x41,
	0x49, 0x52, 0x45, 0x10, 0xba, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x10, 0xbb, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d,
	0x49, 0x4e, 0x49, 0x47, 0x41, 0x4d, 0x45, 0x10, 0xbc, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x49, 0x4e, 0x10, 0xbd, 0x02,
	0x12, 0x12, 0x0a, 0x0d, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x4f, 0x54,
	0x41, 0x10, 0xbe, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0xbf, 0x02,
	0x12, 0x11, 0x0a, 0x0c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44,
	0x10, 0xc0, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x48,
	0x45, 0x52, 0x4f, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0xc1, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0xc2, 0x02, 0x12,
	0x15, 0x0a, 0x10, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x53,
	0x45, 0x4c, 0x4c, 0x10, 0xc3, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xc4, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x4d, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x10, 0xc5, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x42, 0x4f, 0x4c, 0x49, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0xc6, 0x02, 0x12, 0x1a, 0x0a,
	0x15, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x46, 0x52, 0x49, 0x43, 0x41, 0x4e,
	0x50, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x10, 0xc7, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x10, 0xc8, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0xc9, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x55, 0x50, 0x10, 0xca, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x10, 0xcb, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x10, 0xcc, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45,
	0x10, 0xcd, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d,
	0x41, 0x58, 0x10, 0xce, 0x02, 0x2a, 0x55, 0x0a, 0x0a, 0x45, 0x52, 0x65, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x44, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x45, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x49, 0x44, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x45, 0x50,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x50,
	0x41, 0x54, 0x43, 0x48, 0x35, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x45, 0x50, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x02, 0x2a, 0x93, 0x01, 0x0a,
	0x0a, 0x45, 0x53, 0x75, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x53, 0x55, 0x42, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x53, 0x55, 0x42, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f,
	0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x45, 0x53, 0x55, 0x42, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45,
	0x52, 0x59, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x45,
	0x53, 0x55, 0x42, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52,
	0x59, 0x5f, 0x54, 0x45, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x4f, 0x53, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x53, 0x55, 0x42, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x58,
	0x10, 0x04, 0x2a, 0x9a, 0x01, 0x0a, 0x0d, 0x45, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x44, 0x4f,
	0x55, 0x42, 0x4c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x44, 0x4f,
	0x55, 0x42, 0x4c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x44, 0x4f, 0x55,
	0x42, 0x4c, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a,
	0x2e, 0x0a, 0x0f, 0x45, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x4d, 0x61,
	0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x43, 0x48, 0x41,
	0x52, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x01, 0x2a,
	0x4f, 0x0a, 0x0b, 0x45, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x02,
	0x2a, 0xaa, 0x05, 0x0a, 0x0f, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52,
	0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x45,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x64, 0x12, 0x21,
	0x0a, 0x1d, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x66, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x4c,
	0x10, 0x67, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x68,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x69, 0x12,
	0x2d, 0x0a, 0x29, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10, 0x6a, 0x12, 0x2e,
	0x0a, 0x2a, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x49,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x6b, 0x12, 0x2a,
	0x0a, 0x26, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x53,
	0x5f, 0x46, 0x52, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x6c, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41,
	0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x53, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x10, 0x6d, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x6e, 0x12, 0x25,
	0x0a, 0x21, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x6f, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x49, 0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x70, 0x12, 0x22, 0x0a, 0x1e,
	0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x71,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x72, 0x12, 0x2e, 0x0a,
	0x2a, 0x45, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x49, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x73, 0x2a, 0x71, 0x0a,
	0x0e, 0x45, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x41, 0x50, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04,
	0x2a, 0x66, 0x0a, 0x08, 0x45, 0x42, 0x67, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x42, 0x47, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x42, 0x47, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x42, 0x47,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x42, 0x4f, 0x58, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x42, 0x47, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x03, 0x2a, 0x8d, 0x01, 0x0a, 0x10, 0x45, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e,
	0x45, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45,
	0x52, 0x59, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x44, 0x41, 0x49, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x43, 0x41, 0x52, 0x44, 0x10, 0x05, 0x2a, 0x88, 0x07, 0x0a, 0x14, 0x45, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x44, 0x41, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x42, 0x41, 0x54,
	0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x55, 0x53,
	0x49, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x42, 0x41, 0x54,
	0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x55, 0x53,
	0x49, 0x43, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x04, 0x12, 0x21, 0x0a,
	0x1d, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x47, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x05,
	0x12, 0x24, 0x0a, 0x20, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x50, 0x4f, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x44, 0x44, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x54, 0x49, 0x4d, 0x45, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x44,
	0x44, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49,
	0x4d, 0x45, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10,
	0x08, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52, 0x5f, 0x55,
	0x53, 0x45, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54,
	0x49, 0x4d, 0x45, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x55, 0x53, 0x45,
	0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d,
	0x45, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x0b, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x0c, 0x12,
	0x1f, 0x0a, 0x1b, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x0d,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x0e, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x0f, 0x12, 0x22,
	0x0a, 0x1e, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x45, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x10, 0x10, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d,
	0x45, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55,
	0x53, 0x45, 0x10, 0x11, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54,
	0x49, 0x4d, 0x45, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x50, 0x4f,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x52, 0x41, 0x43, 0x4b, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x13, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x56, 0x45, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b,
	0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x4f, 0x52, 0x4d, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x10, 0x15, 0x12, 0x23, 0x0a,
	0x1f, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x50, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44,
	0x10, 0x16, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d,
	0x45, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x10, 0x17, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x54, 0x49, 0x4d, 0x45, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x18, 0x12, 0x23,
	0x0a, 0x1f, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x10, 0x19, 0x2a, 0x9b, 0x01, 0x0a, 0x13, 0x45, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x4d,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54,
	0x49, 0x4d, 0x45, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x43,
	0x4f, 0x53, 0x54, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54,
	0x55, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x54, 0x49, 0x4d, 0x45, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10,
	0x04, 0x2a, 0x38, 0x0a, 0x0a, 0x45, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x5f, 0x41, 0x4e,
	0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x48, 0x4f, 0x4e, 0x45,
	0x5f, 0x50, 0x4c, 0x41, 0x54, 0x5f, 0x49, 0x4f, 0x53, 0x10, 0x02, 0x2a, 0xf0, 0x01, 0x0a, 0x11,
	0x45, 0x46, 0x75, 0x63, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x46, 0x55, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x46, 0x55, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x45, 0x54, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x46, 0x55, 0x4e,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x46, 0x55, 0x4e, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x4a, 0x4f, 0x42, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x46,
	0x55, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x10, 0x05, 0x12,
	0x21, 0x0a, 0x1d, 0x45, 0x46, 0x55, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x46, 0x55, 0x4e, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x07, 0x2a, 0x62,
	0x0a, 0x0e, 0x45, 0x45, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x45, 0x58, 0x49, 0x54, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x45, 0x58, 0x49,
	0x54, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x56, 0x47, 0x5f, 0x44,
	0x45, 0x46, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x45, 0x58, 0x49, 0x54, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x47, 0x56, 0x47,
	0x10, 0x02,
}

var (
	file_ProtoCommon_proto_rawDescOnce sync.Once
	file_ProtoCommon_proto_rawDescData = file_ProtoCommon_proto_rawDesc
)

func file_ProtoCommon_proto_rawDescGZIP() []byte {
	file_ProtoCommon_proto_rawDescOnce.Do(func() {
		file_ProtoCommon_proto_rawDescData = protoimpl.X.CompressGZIP(file_ProtoCommon_proto_rawDescData)
	})
	return file_ProtoCommon_proto_rawDescData
}

var file_ProtoCommon_proto_enumTypes = make([]protoimpl.EnumInfo, 27)
var file_ProtoCommon_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_ProtoCommon_proto_goTypes = []interface{}{
	(EPublishVersion)(0),       // 0: Cmd.EPublishVersion
	(EOptionalBool)(0),         // 1: Cmd.EOptionalBool
	(EUserDataType)(0),         // 2: Cmd.EUserDataType
	(EMARITAL)(0),              // 3: Cmd.EMARITAL
	(EAttrType)(0),             // 4: Cmd.EAttrType
	(EGender)(0),               // 5: Cmd.EGender
	(ECharRace)(0),             // 6: Cmd.ECharRace
	(EProfession)(0),           // 7: Cmd.EProfession
	(EProfessionGrade)(0),      // 8: Cmd.EProfessionGrade
	(EQualityType)(0),          // 9: Cmd.EQualityType
	(EMoneyType)(0),            // 10: Cmd.EMoneyType
	(ECreatureStatus)(0),       // 11: Cmd.ECreatureStatus
	(ESource)(0),               // 12: Cmd.ESource
	(ERepatchID)(0),            // 13: Cmd.ERepatchID
	(ESubSource)(0),            // 14: Cmd.ESubSource
	(EDoubleSource)(0),         // 15: Cmd.EDoubleSource
	(EDeleteCharMark)(0),       // 16: Cmd.EDeleteCharMark
	(ESummonType)(0),           // 17: Cmd.ESummonType
	(ETRADE_RET_CODE)(0),       // 18: Cmd.ETRADE_RET_CODE
	(EAccountStatus)(0),        // 19: Cmd.EAccountStatus
	(EBgmType)(0),              // 20: Cmd.EBgmType
	(EDepositCardType)(0),      // 21: Cmd.EDepositCardType
	(EBattleTimeEventType)(0),  // 22: Cmd.EBattleTimeEventType
	(EBattleTimeCostType)(0),   // 23: Cmd.EBattleTimeCostType
	(EPhonePlat)(0),            // 24: Cmd.EPhonePlat
	(EFucnParam_Rename)(0),     // 25: Cmd.EFucnParam_Rename
	(EExitPointType)(0),        // 26: Cmd.EExitPointType
	(*ScenePos)(nil),           // 27: Cmd.ScenePos
	(*SnapShotDataPB)(nil),     // 28: Cmd.SnapShotDataPB
	(*Pos)(nil),                // 29: Cmd.Pos
	(*NpcDefineData)(nil),      // 30: Cmd.NpcDefineData
	(*UpyunApi)(nil),           // 31: Cmd.UpyunApi
	(*FrostItemInfo)(nil),      // 32: Cmd.FrostItemInfo
	(*SpEffectData)(nil),       // 33: Cmd.SpEffectData
	(*Param)(nil),              // 34: Cmd.Param
	(*ConfigParam)(nil),        // 35: Cmd.ConfigParam
	(*UserPortraitData)(nil),   // 36: Cmd.UserPortraitData
	(*ServerZoneInfo)(nil),     // 37: Cmd.ServerZoneInfo
	(*ServerInfo)(nil),         // 38: Cmd.ServerInfo
	(*RegionServerInfo)(nil),   // 39: Cmd.RegionServerInfo
	(*UserModelShowData)(nil),  // 40: Cmd.UserModelShowData
	(*DeviceItem)(nil),         // 41: Cmd.DeviceItem
	(*UserProfileData)(nil),    // 42: Cmd.UserProfileData
	(*GvgPerfectTimeInfo)(nil), // 43: Cmd.GvgPerfectTimeInfo
	(*Bit)(nil),                // 44: Cmd.Bit
	(*BitFlag)(nil),            // 45: Cmd.BitFlag
}
var file_ProtoCommon_proto_depIdxs = []int32{
	5,  // 0: Cmd.SnapShotDataPB.gender:type_name -> Cmd.EGender
	7,  // 1: Cmd.SnapShotDataPB.profession:type_name -> Cmd.EProfession
	29, // 2: Cmd.NpcDefineData.pos:type_name -> Cmd.Pos
	17, // 3: Cmd.NpcDefineData.stype:type_name -> Cmd.ESummonType
	34, // 4: Cmd.Param.items:type_name -> Cmd.Param
	34, // 5: Cmd.ConfigParam.params:type_name -> Cmd.Param
	37, // 6: Cmd.ServerInfo.zoneinfos:type_name -> Cmd.ServerZoneInfo
	38, // 7: Cmd.RegionServerInfo.serverinfos:type_name -> Cmd.ServerInfo
	44, // 8: Cmd.BitFlag.bits:type_name -> Cmd.Bit
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_ProtoCommon_proto_init() }
func file_ProtoCommon_proto_init() {
	if File_ProtoCommon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ProtoCommon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScenePos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapShotDataPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpcDefineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpyunApi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrostItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpEffectData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPortraitData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerZoneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserModelShowData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GvgPerfectTimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProtoCommon_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ProtoCommon_proto_rawDesc,
			NumEnums:      27,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ProtoCommon_proto_goTypes,
		DependencyIndexes: file_ProtoCommon_proto_depIdxs,
		EnumInfos:         file_ProtoCommon_proto_enumTypes,
		MessageInfos:      file_ProtoCommon_proto_msgTypes,
	}.Build()
	File_ProtoCommon_proto = out.File
	file_ProtoCommon_proto_rawDesc = nil
	file_ProtoCommon_proto_goTypes = nil
	file_ProtoCommon_proto_depIdxs = nil
}
