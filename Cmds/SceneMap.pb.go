// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: SceneMap.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MapParam int32

const (
	MapParam_MAPPARAM_ADDMAPITEM            MapParam = 1
	MapParam_MAPPARAM_PICKUPITEM            MapParam = 2
	MapParam_MAPPARAM_ADDMAPUSER            MapParam = 3
	MapParam_MAPPARAM_ADDMAPNPC             MapParam = 4
	MapParam_MAPPARAM_ADDMAPTRAP            MapParam = 5
	MapParam_MAPPARAM_ADDMAPACT             MapParam = 6
	MapParam_MAPPARAM_EXIT_POINT_STATE      MapParam = 7
	MapParam_MAPPARAM_MAP_CMD_END           MapParam = 8
	MapParam_MAPPARAM_NPC_SEARCH_RANGE      MapParam = 9
	MapParam_MAPPARAM_USER_HANDS            MapParam = 10
	MapParam_MAPPARAM_USER_SPEFFECT         MapParam = 11
	MapParam_MAPPARAM_USER_HAND_NPC         MapParam = 12
	MapParam_MAPPARAM_GINGERBREAD_NPC       MapParam = 13
	MapParam_MAPPARAM_GO_CITYGATE           MapParam = 14
	MapParam_MAPPARAM_EDIT_NPCTEXT          MapParam = 15
	MapParam_MAPPARAM_USER_SECRET_QUERY     MapParam = 16
	MapParam_MAPPARAM_USER_SECRET_GET       MapParam = 17
	MapParam_MAPPARAM_OBJ_STATE_SYNC        MapParam = 18
	MapParam_MAPPARAM_ADDMAPOBJNPC          MapParam = 19
	MapParam_MAPPARAM_FOLLOWBANLIST         MapParam = 20
	MapParam_MAPPARAM_SYNC_FUNCBUILD_NPC    MapParam = 21
	MapParam_MAPPARAM_UPDATE_FUNCBUILD_NPC  MapParam = 22
	MapParam_MAPPARAM_CLONEMAP_QUERYSTATUS  MapParam = 23
	MapParam_MAPPARAM_CLONEMAP_CHANGE       MapParam = 24
	MapParam_MAPPARAM_STORMBOSS_AFFIX_QUERY MapParam = 25
	MapParam_MAPPARAM_BUFF_REWARD_QUERY     MapParam = 26
	MapParam_MAPPARAM_BUFF_REWARD_SELECT    MapParam = 27
	MapParam_MAPPARAM_MULTI_OBJ_STATE_SYNC  MapParam = 28
	MapParam_MAPPARAM_UPDATE_MAP_ZONE       MapParam = 29
)

// Enum value maps for MapParam.
var (
	MapParam_name = map[int32]string{
		1:  "MAPPARAM_ADDMAPITEM",
		2:  "MAPPARAM_PICKUPITEM",
		3:  "MAPPARAM_ADDMAPUSER",
		4:  "MAPPARAM_ADDMAPNPC",
		5:  "MAPPARAM_ADDMAPTRAP",
		6:  "MAPPARAM_ADDMAPACT",
		7:  "MAPPARAM_EXIT_POINT_STATE",
		8:  "MAPPARAM_MAP_CMD_END",
		9:  "MAPPARAM_NPC_SEARCH_RANGE",
		10: "MAPPARAM_USER_HANDS",
		11: "MAPPARAM_USER_SPEFFECT",
		12: "MAPPARAM_USER_HAND_NPC",
		13: "MAPPARAM_GINGERBREAD_NPC",
		14: "MAPPARAM_GO_CITYGATE",
		15: "MAPPARAM_EDIT_NPCTEXT",
		16: "MAPPARAM_USER_SECRET_QUERY",
		17: "MAPPARAM_USER_SECRET_GET",
		18: "MAPPARAM_OBJ_STATE_SYNC",
		19: "MAPPARAM_ADDMAPOBJNPC",
		20: "MAPPARAM_FOLLOWBANLIST",
		21: "MAPPARAM_SYNC_FUNCBUILD_NPC",
		22: "MAPPARAM_UPDATE_FUNCBUILD_NPC",
		23: "MAPPARAM_CLONEMAP_QUERYSTATUS",
		24: "MAPPARAM_CLONEMAP_CHANGE",
		25: "MAPPARAM_STORMBOSS_AFFIX_QUERY",
		26: "MAPPARAM_BUFF_REWARD_QUERY",
		27: "MAPPARAM_BUFF_REWARD_SELECT",
		28: "MAPPARAM_MULTI_OBJ_STATE_SYNC",
		29: "MAPPARAM_UPDATE_MAP_ZONE",
	}
	MapParam_value = map[string]int32{
		"MAPPARAM_ADDMAPITEM":            1,
		"MAPPARAM_PICKUPITEM":            2,
		"MAPPARAM_ADDMAPUSER":            3,
		"MAPPARAM_ADDMAPNPC":             4,
		"MAPPARAM_ADDMAPTRAP":            5,
		"MAPPARAM_ADDMAPACT":             6,
		"MAPPARAM_EXIT_POINT_STATE":      7,
		"MAPPARAM_MAP_CMD_END":           8,
		"MAPPARAM_NPC_SEARCH_RANGE":      9,
		"MAPPARAM_USER_HANDS":            10,
		"MAPPARAM_USER_SPEFFECT":         11,
		"MAPPARAM_USER_HAND_NPC":         12,
		"MAPPARAM_GINGERBREAD_NPC":       13,
		"MAPPARAM_GO_CITYGATE":           14,
		"MAPPARAM_EDIT_NPCTEXT":          15,
		"MAPPARAM_USER_SECRET_QUERY":     16,
		"MAPPARAM_USER_SECRET_GET":       17,
		"MAPPARAM_OBJ_STATE_SYNC":        18,
		"MAPPARAM_ADDMAPOBJNPC":          19,
		"MAPPARAM_FOLLOWBANLIST":         20,
		"MAPPARAM_SYNC_FUNCBUILD_NPC":    21,
		"MAPPARAM_UPDATE_FUNCBUILD_NPC":  22,
		"MAPPARAM_CLONEMAP_QUERYSTATUS":  23,
		"MAPPARAM_CLONEMAP_CHANGE":       24,
		"MAPPARAM_STORMBOSS_AFFIX_QUERY": 25,
		"MAPPARAM_BUFF_REWARD_QUERY":     26,
		"MAPPARAM_BUFF_REWARD_SELECT":    27,
		"MAPPARAM_MULTI_OBJ_STATE_SYNC":  28,
		"MAPPARAM_UPDATE_MAP_ZONE":       29,
	}
)

func (x MapParam) Enum() *MapParam {
	p := new(MapParam)
	*p = x
	return p
}

func (x MapParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MapParam) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneMap_proto_enumTypes[0].Descriptor()
}

func (MapParam) Type() protoreflect.EnumType {
	return &file_SceneMap_proto_enumTypes[0]
}

func (x MapParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MapParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MapParam(num)
	return nil
}

// Deprecated: Use MapParam.Descriptor instead.
func (MapParam) EnumDescriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{0}
}

type EGiveType int32

const (
	EGiveType_EGiveType_Trade   EGiveType = 1
	EGiveType_EGiveType_Lottery EGiveType = 2
)

// Enum value maps for EGiveType.
var (
	EGiveType_name = map[int32]string{
		1: "EGiveType_Trade",
		2: "EGiveType_Lottery",
	}
	EGiveType_value = map[string]int32{
		"EGiveType_Trade":   1,
		"EGiveType_Lottery": 2,
	}
)

func (x EGiveType) Enum() *EGiveType {
	p := new(EGiveType)
	*p = x
	return p
}

func (x EGiveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGiveType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneMap_proto_enumTypes[1].Descriptor()
}

func (EGiveType) Type() protoreflect.EnumType {
	return &file_SceneMap_proto_enumTypes[1]
}

func (x EGiveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGiveType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGiveType(num)
	return nil
}

// Deprecated: Use EGiveType.Descriptor instead.
func (EGiveType) EnumDescriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{1}
}

type EActType int32

const (
	EActType_EACTTYPE_MIN        EActType = 0
	EActType_EACTTYPE_PURIFY     EActType = 1
	EActType_EACTTYPE_SEAL       EActType = 2
	EActType_EACTTYPE_MUSIC      EActType = 3
	EActType_EACTTYPE_EFFECT     EActType = 4
	EActType_EACTTYPE_SCENEEVENT EActType = 5
	EActType_EACTTYPE_MAPEFFECT  EActType = 6
	EActType_EACTTYPE_MAX        EActType = 7
)

// Enum value maps for EActType.
var (
	EActType_name = map[int32]string{
		0: "EACTTYPE_MIN",
		1: "EACTTYPE_PURIFY",
		2: "EACTTYPE_SEAL",
		3: "EACTTYPE_MUSIC",
		4: "EACTTYPE_EFFECT",
		5: "EACTTYPE_SCENEEVENT",
		6: "EACTTYPE_MAPEFFECT",
		7: "EACTTYPE_MAX",
	}
	EActType_value = map[string]int32{
		"EACTTYPE_MIN":        0,
		"EACTTYPE_PURIFY":     1,
		"EACTTYPE_SEAL":       2,
		"EACTTYPE_MUSIC":      3,
		"EACTTYPE_EFFECT":     4,
		"EACTTYPE_SCENEEVENT": 5,
		"EACTTYPE_MAPEFFECT":  6,
		"EACTTYPE_MAX":        7,
	}
)

func (x EActType) Enum() *EActType {
	p := new(EActType)
	*p = x
	return p
}

func (x EActType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EActType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneMap_proto_enumTypes[2].Descriptor()
}

func (EActType) Type() protoreflect.EnumType {
	return &file_SceneMap_proto_enumTypes[2]
}

func (x EActType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EActType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EActType(num)
	return nil
}

// Deprecated: Use EActType.Descriptor instead.
func (EActType) EnumDescriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{2}
}

type ENpcTextType int32

const (
	ENpcTextType_ENPCTEXTTYPE_HEAD   ENpcTextType = 1
	ENpcTextType_ENPCTEXTTYPE_DIALOG ENpcTextType = 2
)

// Enum value maps for ENpcTextType.
var (
	ENpcTextType_name = map[int32]string{
		1: "ENPCTEXTTYPE_HEAD",
		2: "ENPCTEXTTYPE_DIALOG",
	}
	ENpcTextType_value = map[string]int32{
		"ENPCTEXTTYPE_HEAD":   1,
		"ENPCTEXTTYPE_DIALOG": 2,
	}
)

func (x ENpcTextType) Enum() *ENpcTextType {
	p := new(ENpcTextType)
	*p = x
	return p
}

func (x ENpcTextType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENpcTextType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneMap_proto_enumTypes[3].Descriptor()
}

func (ENpcTextType) Type() protoreflect.EnumType {
	return &file_SceneMap_proto_enumTypes[3]
}

func (x ENpcTextType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ENpcTextType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ENpcTextType(num)
	return nil
}

// Deprecated: Use ENpcTextType.Descriptor instead.
func (ENpcTextType) EnumDescriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{3}
}

type ECloneMapStatus int32

const (
	ECloneMapStatus_ECLONEMAPSTATUS_MIN      ECloneMapStatus = 0
	ECloneMapStatus_ECLONEMAPSTATUS_FREE     ECloneMapStatus = 1
	ECloneMapStatus_ECLONEMAPSTATUS_BUSY     ECloneMapStatus = 2
	ECloneMapStatus_ECLONEMAPSTATUS_VERYBUSY ECloneMapStatus = 3
	ECloneMapStatus_ECLONEMAPSTATUS_MAX      ECloneMapStatus = 4
)

// Enum value maps for ECloneMapStatus.
var (
	ECloneMapStatus_name = map[int32]string{
		0: "ECLONEMAPSTATUS_MIN",
		1: "ECLONEMAPSTATUS_FREE",
		2: "ECLONEMAPSTATUS_BUSY",
		3: "ECLONEMAPSTATUS_VERYBUSY",
		4: "ECLONEMAPSTATUS_MAX",
	}
	ECloneMapStatus_value = map[string]int32{
		"ECLONEMAPSTATUS_MIN":      0,
		"ECLONEMAPSTATUS_FREE":     1,
		"ECLONEMAPSTATUS_BUSY":     2,
		"ECLONEMAPSTATUS_VERYBUSY": 3,
		"ECLONEMAPSTATUS_MAX":      4,
	}
)

func (x ECloneMapStatus) Enum() *ECloneMapStatus {
	p := new(ECloneMapStatus)
	*p = x
	return p
}

func (x ECloneMapStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECloneMapStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneMap_proto_enumTypes[4].Descriptor()
}

func (ECloneMapStatus) Type() protoreflect.EnumType {
	return &file_SceneMap_proto_enumTypes[4]
}

func (x ECloneMapStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECloneMapStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECloneMapStatus(num)
	return nil
}

// Deprecated: Use ECloneMapStatus.Descriptor instead.
func (ECloneMapStatus) EnumDescriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{4}
}

type MapItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid          *uint64   `protobuf:"varint,1,opt,name=guid,def=0" json:"guid,omitempty"`
	Id            *uint32   `protobuf:"varint,2,opt,name=id,def=0" json:"id,omitempty"`
	Time          *uint64   `protobuf:"varint,3,opt,name=time,def=0" json:"time,omitempty"`
	Sourceid      *uint64   `protobuf:"varint,4,opt,name=sourceid,def=0" json:"sourceid,omitempty"`
	Pos           *ScenePos `protobuf:"bytes,5,opt,name=pos" json:"pos,omitempty"`
	Owners        []uint64  `protobuf:"varint,6,rep,name=owners" json:"owners,omitempty"`
	Refinelv      *uint32   `protobuf:"varint,7,opt,name=refinelv,def=0" json:"refinelv,omitempty"`
	DisappearTime *uint64   `protobuf:"varint,8,opt,name=disappear_time,json=disappearTime" json:"disappear_time,omitempty"`
}

// Default values for MapItem fields.
const (
	Default_MapItem_Guid     = uint64(0)
	Default_MapItem_Id       = uint32(0)
	Default_MapItem_Time     = uint64(0)
	Default_MapItem_Sourceid = uint64(0)
	Default_MapItem_Refinelv = uint32(0)
)

func (x *MapItem) Reset() {
	*x = MapItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapItem) ProtoMessage() {}

func (x *MapItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapItem.ProtoReflect.Descriptor instead.
func (*MapItem) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{0}
}

func (x *MapItem) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_MapItem_Guid
}

func (x *MapItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_MapItem_Id
}

func (x *MapItem) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_MapItem_Time
}

func (x *MapItem) GetSourceid() uint64 {
	if x != nil && x.Sourceid != nil {
		return *x.Sourceid
	}
	return Default_MapItem_Sourceid
}

func (x *MapItem) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MapItem) GetOwners() []uint64 {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *MapItem) GetRefinelv() uint32 {
	if x != nil && x.Refinelv != nil {
		return *x.Refinelv
	}
	return Default_MapItem_Refinelv
}

func (x *MapItem) GetDisappearTime() uint64 {
	if x != nil && x.DisappearTime != nil {
		return *x.DisappearTime
	}
	return 0
}

type AddMapItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param *MapParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=1" json:"param,omitempty"`
	Items []*MapItem `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for AddMapItem fields.
const (
	Default_AddMapItem_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_AddMapItem_Param = MapParam_MAPPARAM_ADDMAPITEM
)

func (x *AddMapItem) Reset() {
	*x = AddMapItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMapItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMapItem) ProtoMessage() {}

func (x *AddMapItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMapItem.ProtoReflect.Descriptor instead.
func (*AddMapItem) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{1}
}

func (x *AddMapItem) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AddMapItem_Cmd
}

func (x *AddMapItem) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AddMapItem_Param
}

func (x *AddMapItem) GetItems() []*MapItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type PickupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param      *MapParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=2" json:"param,omitempty"`
	Playerguid *uint64   `protobuf:"varint,3,opt,name=playerguid,def=0" json:"playerguid,omitempty"`
	Itemguid   *uint64   `protobuf:"varint,4,opt,name=itemguid,def=0" json:"itemguid,omitempty"`
	Success    *bool     `protobuf:"varint,5,opt,name=success,def=0" json:"success,omitempty"`
}

// Default values for PickupItem fields.
const (
	Default_PickupItem_Cmd        = Command_SCENE_USER_MAP_PROTOCMD
	Default_PickupItem_Param      = MapParam_MAPPARAM_PICKUPITEM
	Default_PickupItem_Playerguid = uint64(0)
	Default_PickupItem_Itemguid   = uint64(0)
	Default_PickupItem_Success    = bool(false)
)

func (x *PickupItem) Reset() {
	*x = PickupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickupItem) ProtoMessage() {}

func (x *PickupItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickupItem.ProtoReflect.Descriptor instead.
func (*PickupItem) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{2}
}

func (x *PickupItem) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PickupItem_Cmd
}

func (x *PickupItem) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PickupItem_Param
}

func (x *PickupItem) GetPlayerguid() uint64 {
	if x != nil && x.Playerguid != nil {
		return *x.Playerguid
	}
	return Default_PickupItem_Playerguid
}

func (x *PickupItem) GetItemguid() uint64 {
	if x != nil && x.Itemguid != nil {
		return *x.Itemguid
	}
	return Default_PickupItem_Itemguid
}

func (x *PickupItem) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_PickupItem_Success
}

type CarrierInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Masterid *uint64 `protobuf:"varint,2,opt,name=masterid" json:"masterid,omitempty"`
	Index    *uint32 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Progress *uint32 `protobuf:"varint,4,opt,name=progress" json:"progress,omitempty"`
	Line     *uint32 `protobuf:"varint,5,opt,name=line" json:"line,omitempty"`
	Assemble *uint32 `protobuf:"varint,6,opt,name=assemble" json:"assemble,omitempty"`
}

func (x *CarrierInfo) Reset() {
	*x = CarrierInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarrierInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarrierInfo) ProtoMessage() {}

func (x *CarrierInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarrierInfo.ProtoReflect.Descriptor instead.
func (*CarrierInfo) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{3}
}

func (x *CarrierInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CarrierInfo) GetMasterid() uint64 {
	if x != nil && x.Masterid != nil {
		return *x.Masterid
	}
	return 0
}

func (x *CarrierInfo) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CarrierInfo) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CarrierInfo) GetLine() uint32 {
	if x != nil && x.Line != nil {
		return *x.Line
	}
	return 0
}

func (x *CarrierInfo) GetAssemble() uint32 {
	if x != nil && x.Assemble != nil {
		return *x.Assemble
	}
	return 0
}

type LineData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterId *uint64 `protobuf:"varint,1,opt,name=masterId" json:"masterId,omitempty"`
	SlaveId  *uint64 `protobuf:"varint,2,opt,name=slaveId" json:"slaveId,omitempty"`
}

func (x *LineData) Reset() {
	*x = LineData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineData) ProtoMessage() {}

func (x *LineData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineData.ProtoReflect.Descriptor instead.
func (*LineData) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{4}
}

func (x *LineData) GetMasterId() uint64 {
	if x != nil && x.MasterId != nil {
		return *x.MasterId
	}
	return 0
}

func (x *LineData) GetSlaveId() uint64 {
	if x != nil && x.SlaveId != nil {
		return *x.SlaveId
	}
	return 0
}

type HandNpcData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body            *uint32  `protobuf:"varint,1,opt,name=body" json:"body,omitempty"`
	Head            *uint32  `protobuf:"varint,2,opt,name=head" json:"head,omitempty"`
	Hair            *uint32  `protobuf:"varint,3,opt,name=hair" json:"hair,omitempty"`
	Haircolor       *uint32  `protobuf:"varint,4,opt,name=haircolor" json:"haircolor,omitempty"`
	Guid            *uint64  `protobuf:"varint,5,opt,name=guid" json:"guid,omitempty"`
	Speffect        *uint32  `protobuf:"varint,6,opt,name=speffect" json:"speffect,omitempty"`
	Name            *string  `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	Eye             *uint32  `protobuf:"varint,8,opt,name=eye" json:"eye,omitempty"`
	Unique          *uint32  `protobuf:"varint,9,opt,name=unique,def=0" json:"unique,omitempty"`
	Normaldialogs   []uint32 `protobuf:"varint,10,rep,name=normaldialogs" json:"normaldialogs,omitempty"`
	Disappeareffect *uint32  `protobuf:"varint,11,opt,name=disappeareffect,def=0" json:"disappeareffect,omitempty"`
	Effecttime      *uint32  `protobuf:"varint,12,opt,name=effecttime,def=0" json:"effecttime,omitempty"`
	Eyecolor        *uint32  `protobuf:"varint,13,opt,name=eyecolor,def=0" json:"eyecolor,omitempty"`
	Righthand       *uint32  `protobuf:"varint,14,opt,name=righthand,def=0" json:"righthand,omitempty"`
	Lefthand        *uint32  `protobuf:"varint,15,opt,name=lefthand,def=0" json:"lefthand,omitempty"`
	Wing            *uint32  `protobuf:"varint,16,opt,name=wing,def=0" json:"wing,omitempty"`
	Face            *uint32  `protobuf:"varint,17,opt,name=face,def=0" json:"face,omitempty"`
	Tail            *uint32  `protobuf:"varint,18,opt,name=tail,def=0" json:"tail,omitempty"`
	Mouth           *uint32  `protobuf:"varint,19,opt,name=mouth,def=0" json:"mouth,omitempty"`
}

// Default values for HandNpcData fields.
const (
	Default_HandNpcData_Unique          = uint32(0)
	Default_HandNpcData_Disappeareffect = uint32(0)
	Default_HandNpcData_Effecttime      = uint32(0)
	Default_HandNpcData_Eyecolor        = uint32(0)
	Default_HandNpcData_Righthand       = uint32(0)
	Default_HandNpcData_Lefthand        = uint32(0)
	Default_HandNpcData_Wing            = uint32(0)
	Default_HandNpcData_Face            = uint32(0)
	Default_HandNpcData_Tail            = uint32(0)
	Default_HandNpcData_Mouth           = uint32(0)
)

func (x *HandNpcData) Reset() {
	*x = HandNpcData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandNpcData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandNpcData) ProtoMessage() {}

func (x *HandNpcData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandNpcData.ProtoReflect.Descriptor instead.
func (*HandNpcData) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{5}
}

func (x *HandNpcData) GetBody() uint32 {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return 0
}

func (x *HandNpcData) GetHead() uint32 {
	if x != nil && x.Head != nil {
		return *x.Head
	}
	return 0
}

func (x *HandNpcData) GetHair() uint32 {
	if x != nil && x.Hair != nil {
		return *x.Hair
	}
	return 0
}

func (x *HandNpcData) GetHaircolor() uint32 {
	if x != nil && x.Haircolor != nil {
		return *x.Haircolor
	}
	return 0
}

func (x *HandNpcData) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return 0
}

func (x *HandNpcData) GetSpeffect() uint32 {
	if x != nil && x.Speffect != nil {
		return *x.Speffect
	}
	return 0
}

func (x *HandNpcData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *HandNpcData) GetEye() uint32 {
	if x != nil && x.Eye != nil {
		return *x.Eye
	}
	return 0
}

func (x *HandNpcData) GetUnique() uint32 {
	if x != nil && x.Unique != nil {
		return *x.Unique
	}
	return Default_HandNpcData_Unique
}

func (x *HandNpcData) GetNormaldialogs() []uint32 {
	if x != nil {
		return x.Normaldialogs
	}
	return nil
}

func (x *HandNpcData) GetDisappeareffect() uint32 {
	if x != nil && x.Disappeareffect != nil {
		return *x.Disappeareffect
	}
	return Default_HandNpcData_Disappeareffect
}

func (x *HandNpcData) GetEffecttime() uint32 {
	if x != nil && x.Effecttime != nil {
		return *x.Effecttime
	}
	return Default_HandNpcData_Effecttime
}

func (x *HandNpcData) GetEyecolor() uint32 {
	if x != nil && x.Eyecolor != nil {
		return *x.Eyecolor
	}
	return Default_HandNpcData_Eyecolor
}

func (x *HandNpcData) GetRighthand() uint32 {
	if x != nil && x.Righthand != nil {
		return *x.Righthand
	}
	return Default_HandNpcData_Righthand
}

func (x *HandNpcData) GetLefthand() uint32 {
	if x != nil && x.Lefthand != nil {
		return *x.Lefthand
	}
	return Default_HandNpcData_Lefthand
}

func (x *HandNpcData) GetWing() uint32 {
	if x != nil && x.Wing != nil {
		return *x.Wing
	}
	return Default_HandNpcData_Wing
}

func (x *HandNpcData) GetFace() uint32 {
	if x != nil && x.Face != nil {
		return *x.Face
	}
	return Default_HandNpcData_Face
}

func (x *HandNpcData) GetTail() uint32 {
	if x != nil && x.Tail != nil {
		return *x.Tail
	}
	return Default_HandNpcData_Tail
}

func (x *HandNpcData) GetMouth() uint32 {
	if x != nil && x.Mouth != nil {
		return *x.Mouth
	}
	return Default_HandNpcData_Mouth
}

type GingerBreadNpcData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Npcid      *uint32    `protobuf:"varint,1,opt,name=npcid" json:"npcid,omitempty"`
	Guid       *uint64    `protobuf:"varint,2,opt,name=guid" json:"guid,omitempty"`
	Giveid     *uint64    `protobuf:"varint,3,opt,name=giveid" json:"giveid,omitempty"`
	Expiretime *uint32    `protobuf:"varint,4,opt,name=expiretime" json:"expiretime,omitempty"`
	Type       *EGiveType `protobuf:"varint,5,opt,name=type,enum=Cmd.EGiveType" json:"type,omitempty"`
}

func (x *GingerBreadNpcData) Reset() {
	*x = GingerBreadNpcData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GingerBreadNpcData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GingerBreadNpcData) ProtoMessage() {}

func (x *GingerBreadNpcData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GingerBreadNpcData.ProtoReflect.Descriptor instead.
func (*GingerBreadNpcData) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{6}
}

func (x *GingerBreadNpcData) GetNpcid() uint32 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return 0
}

func (x *GingerBreadNpcData) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return 0
}

func (x *GingerBreadNpcData) GetGiveid() uint64 {
	if x != nil && x.Giveid != nil {
		return *x.Giveid
	}
	return 0
}

func (x *GingerBreadNpcData) GetExpiretime() uint32 {
	if x != nil && x.Expiretime != nil {
		return *x.Expiretime
	}
	return 0
}

func (x *GingerBreadNpcData) GetType() EGiveType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EGiveType_EGiveType_Trade
}

type MapUserGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name          *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Icon          *string `protobuf:"bytes,3,opt,name=icon" json:"icon,omitempty"`
	Job           *string `protobuf:"bytes,4,opt,name=job" json:"job,omitempty"`
	MercenaryName *string `protobuf:"bytes,5,opt,name=mercenary_name,json=mercenaryName" json:"mercenary_name,omitempty"`
}

func (x *MapUserGuild) Reset() {
	*x = MapUserGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUserGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUserGuild) ProtoMessage() {}

func (x *MapUserGuild) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUserGuild.ProtoReflect.Descriptor instead.
func (*MapUserGuild) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{7}
}

func (x *MapUserGuild) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MapUserGuild) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MapUserGuild) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *MapUserGuild) GetJob() string {
	if x != nil && x.Job != nil {
		return *x.Job
	}
	return ""
}

func (x *MapUserGuild) GetMercenaryName() string {
	if x != nil && x.MercenaryName != nil {
		return *x.MercenaryName
	}
	return ""
}

type MapUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid           *uint64               `protobuf:"varint,1,opt,name=guid,def=0" json:"guid,omitempty"`
	Accid          *uint64               `protobuf:"varint,27,opt,name=accid,def=0" json:"accid,omitempty"`
	Name           *string               `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Gender         *EGender              `protobuf:"varint,3,opt,name=gender,enum=Cmd.EGender,def=0" json:"gender,omitempty"`
	Pos            *ScenePos             `protobuf:"bytes,4,opt,name=pos" json:"pos,omitempty"`
	Dest           *ScenePos             `protobuf:"bytes,5,opt,name=dest" json:"dest,omitempty"`
	Attrs          []*UserAttr           `protobuf:"bytes,6,rep,name=attrs" json:"attrs,omitempty"`
	Datas          []*UserData           `protobuf:"bytes,7,rep,name=datas" json:"datas,omitempty"`
	Buffs          []*BufferData         `protobuf:"bytes,8,rep,name=buffs" json:"buffs,omitempty"`
	Skillid        *uint32               `protobuf:"varint,9,opt,name=skillid" json:"skillid,omitempty"`
	Teamid         *uint64               `protobuf:"varint,10,opt,name=teamid" json:"teamid,omitempty"`
	Teamname       *string               `protobuf:"bytes,11,opt,name=teamname" json:"teamname,omitempty"`
	Carrier        *CarrierInfo          `protobuf:"bytes,12,opt,name=carrier" json:"carrier,omitempty"`
	Chatroom       *ChatRoomSummary      `protobuf:"bytes,13,opt,name=chatroom" json:"chatroom,omitempty"`
	Handsmaster    *uint64               `protobuf:"varint,14,opt,name=handsmaster" json:"handsmaster,omitempty"`
	Speffectdata   []*SpEffectData       `protobuf:"bytes,15,rep,name=speffectdata" json:"speffectdata,omitempty"`
	Guildid        *uint64               `protobuf:"varint,16,opt,name=guildid,def=0" json:"guildid,omitempty"`
	Guildname      *string               `protobuf:"bytes,17,opt,name=guildname" json:"guildname,omitempty"`
	Guildicon      *string               `protobuf:"bytes,18,opt,name=guildicon" json:"guildicon,omitempty"`
	Guildjob       *string               `protobuf:"bytes,19,opt,name=guildjob" json:"guildjob,omitempty"`
	Handnpc        *HandNpcData          `protobuf:"bytes,20,opt,name=handnpc" json:"handnpc,omitempty"`
	Motionactionid *uint32               `protobuf:"varint,21,opt,name=motionactionid" json:"motionactionid,omitempty"`
	Seatid         *uint32               `protobuf:"varint,22,opt,name=seatid" json:"seatid,omitempty"`
	Givenpcdatas   []*GingerBreadNpcData `protobuf:"bytes,23,rep,name=givenpcdatas" json:"givenpcdatas,omitempty"`
	Achievetitle   *uint32               `protobuf:"varint,24,opt,name=achievetitle" json:"achievetitle,omitempty"`
	Cookstate      *CookStateMsg         `protobuf:"bytes,25,opt,name=cookstate" json:"cookstate,omitempty"`
	Info           *BoothInfo            `protobuf:"bytes,26,opt,name=info" json:"info,omitempty"`
	Skilleffects   []uint32              `protobuf:"varint,29,rep,name=skilleffects" json:"skilleffects,omitempty"`
	Chantskill     *ChantSkillInfo       `protobuf:"bytes,30,opt,name=chantskill" json:"chantskill,omitempty"`
	Serverid       *uint32               `protobuf:"varint,31,opt,name=serverid" json:"serverid,omitempty"`
	Mercenary      *MapUserGuild         `protobuf:"bytes,32,opt,name=mercenary" json:"mercenary,omitempty"`
}

// Default values for MapUser fields.
const (
	Default_MapUser_Guid    = uint64(0)
	Default_MapUser_Accid   = uint64(0)
	Default_MapUser_Gender  = EGender_EGENDER_MIN
	Default_MapUser_Guildid = uint64(0)
)

func (x *MapUser) Reset() {
	*x = MapUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUser) ProtoMessage() {}

func (x *MapUser) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUser.ProtoReflect.Descriptor instead.
func (*MapUser) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{8}
}

func (x *MapUser) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_MapUser_Guid
}

func (x *MapUser) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return Default_MapUser_Accid
}

func (x *MapUser) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MapUser) GetGender() EGender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Default_MapUser_Gender
}

func (x *MapUser) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MapUser) GetDest() *ScenePos {
	if x != nil {
		return x.Dest
	}
	return nil
}

func (x *MapUser) GetAttrs() []*UserAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *MapUser) GetDatas() []*UserData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *MapUser) GetBuffs() []*BufferData {
	if x != nil {
		return x.Buffs
	}
	return nil
}

func (x *MapUser) GetSkillid() uint32 {
	if x != nil && x.Skillid != nil {
		return *x.Skillid
	}
	return 0
}

func (x *MapUser) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return 0
}

func (x *MapUser) GetTeamname() string {
	if x != nil && x.Teamname != nil {
		return *x.Teamname
	}
	return ""
}

func (x *MapUser) GetCarrier() *CarrierInfo {
	if x != nil {
		return x.Carrier
	}
	return nil
}

func (x *MapUser) GetChatroom() *ChatRoomSummary {
	if x != nil {
		return x.Chatroom
	}
	return nil
}

func (x *MapUser) GetHandsmaster() uint64 {
	if x != nil && x.Handsmaster != nil {
		return *x.Handsmaster
	}
	return 0
}

func (x *MapUser) GetSpeffectdata() []*SpEffectData {
	if x != nil {
		return x.Speffectdata
	}
	return nil
}

func (x *MapUser) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return Default_MapUser_Guildid
}

func (x *MapUser) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

func (x *MapUser) GetGuildicon() string {
	if x != nil && x.Guildicon != nil {
		return *x.Guildicon
	}
	return ""
}

func (x *MapUser) GetGuildjob() string {
	if x != nil && x.Guildjob != nil {
		return *x.Guildjob
	}
	return ""
}

func (x *MapUser) GetHandnpc() *HandNpcData {
	if x != nil {
		return x.Handnpc
	}
	return nil
}

func (x *MapUser) GetMotionactionid() uint32 {
	if x != nil && x.Motionactionid != nil {
		return *x.Motionactionid
	}
	return 0
}

func (x *MapUser) GetSeatid() uint32 {
	if x != nil && x.Seatid != nil {
		return *x.Seatid
	}
	return 0
}

func (x *MapUser) GetGivenpcdatas() []*GingerBreadNpcData {
	if x != nil {
		return x.Givenpcdatas
	}
	return nil
}

func (x *MapUser) GetAchievetitle() uint32 {
	if x != nil && x.Achievetitle != nil {
		return *x.Achievetitle
	}
	return 0
}

func (x *MapUser) GetCookstate() *CookStateMsg {
	if x != nil {
		return x.Cookstate
	}
	return nil
}

func (x *MapUser) GetInfo() *BoothInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *MapUser) GetSkilleffects() []uint32 {
	if x != nil {
		return x.Skilleffects
	}
	return nil
}

func (x *MapUser) GetChantskill() *ChantSkillInfo {
	if x != nil {
		return x.Chantskill
	}
	return nil
}

func (x *MapUser) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return 0
}

func (x *MapUser) GetMercenary() *MapUserGuild {
	if x != nil {
		return x.Mercenary
	}
	return nil
}

type AddMapUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param *MapParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=3" json:"param,omitempty"`
	Users []*MapUser `protobuf:"bytes,3,rep,name=users" json:"users,omitempty"`
}

// Default values for AddMapUser fields.
const (
	Default_AddMapUser_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_AddMapUser_Param = MapParam_MAPPARAM_ADDMAPUSER
)

func (x *AddMapUser) Reset() {
	*x = AddMapUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMapUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMapUser) ProtoMessage() {}

func (x *AddMapUser) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMapUser.ProtoReflect.Descriptor instead.
func (*AddMapUser) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{9}
}

func (x *AddMapUser) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AddMapUser_Cmd
}

func (x *AddMapUser) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AddMapUser_Param
}

func (x *AddMapUser) GetUsers() []*MapUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type MountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mountid *uint32 `protobuf:"varint,1,opt,name=mountid" json:"mountid,omitempty"`
	Charid  *uint64 `protobuf:"varint,2,opt,name=charid" json:"charid,omitempty"`
}

func (x *MountInfo) Reset() {
	*x = MountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountInfo) ProtoMessage() {}

func (x *MountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountInfo.ProtoReflect.Descriptor instead.
func (*MountInfo) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{10}
}

func (x *MountInfo) GetMountid() uint32 {
	if x != nil && x.Mountid != nil {
		return *x.Mountid
	}
	return 0
}

func (x *MountInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

type MapNpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *uint64         `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Name             *string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	NpcID            *uint32         `protobuf:"varint,3,opt,name=npcID,def=0" json:"npcID,omitempty"`
	Character        []uint32        `protobuf:"varint,5,rep,name=character" json:"character,omitempty"`
	Pos              *ScenePos       `protobuf:"bytes,6,opt,name=pos" json:"pos,omitempty"`
	Dest             *ScenePos       `protobuf:"bytes,7,opt,name=dest" json:"dest,omitempty"`
	Dir              *uint32         `protobuf:"varint,8,opt,name=dir" json:"dir,omitempty"`
	Datas            []*UserData     `protobuf:"bytes,9,rep,name=datas" json:"datas,omitempty"`
	Attrs            []*UserAttr     `protobuf:"bytes,10,rep,name=attrs" json:"attrs,omitempty"`
	Owner            *uint64         `protobuf:"varint,11,opt,name=owner,def=0" json:"owner,omitempty"`
	Behaviour        *uint32         `protobuf:"varint,12,opt,name=behaviour,def=0" json:"behaviour,omitempty"`
	Uniqueid         *uint32         `protobuf:"varint,13,opt,name=uniqueid,def=0" json:"uniqueid,omitempty"`
	Waitaction       *string         `protobuf:"bytes,14,opt,name=waitaction" json:"waitaction,omitempty"`
	Teamid           *uint64         `protobuf:"varint,15,opt,name=teamid,def=0" json:"teamid,omitempty"`
	Searchrange      *uint32         `protobuf:"varint,16,opt,name=searchrange,def=0" json:"searchrange,omitempty"`
	Buffs            []*BufferData   `protobuf:"bytes,17,rep,name=buffs" json:"buffs,omitempty"`
	Motionactionid   *uint32         `protobuf:"varint,18,opt,name=motionactionid,def=0" json:"motionactionid,omitempty"`
	Effect           *string         `protobuf:"bytes,19,opt,name=effect" json:"effect,omitempty"`
	Effectpos        *uint32         `protobuf:"varint,20,opt,name=effectpos,def=0" json:"effectpos,omitempty"`
	Effectindex      *uint32         `protobuf:"varint,21,opt,name=effectindex,def=0" json:"effectindex,omitempty"`
	Speffectdata     []*SpEffectData `protobuf:"bytes,22,rep,name=speffectdata" json:"speffectdata,omitempty"`
	Isbirth          *bool           `protobuf:"varint,23,opt,name=isbirth,def=0" json:"isbirth,omitempty"`
	EatProgress      *uint32         `protobuf:"varint,24,opt,name=eat_progress,json=eatProgress" json:"eat_progress,omitempty"`
	Fadein           *uint32         `protobuf:"varint,25,opt,name=fadein,def=0" json:"fadein,omitempty"`
	Guildid          *uint64         `protobuf:"varint,26,opt,name=guildid,def=0" json:"guildid,omitempty"`
	Search           *uint32         `protobuf:"varint,27,opt,name=search,def=0" json:"search,omitempty"`
	Bosstype         *uint32         `protobuf:"varint,28,opt,name=bosstype,def=0" json:"bosstype,omitempty"`
	IsBossFromBranch *bool           `protobuf:"varint,31,opt,name=isBossFromBranch,def=0" json:"isBossFromBranch,omitempty"`
	Mounts           []*MountInfo    `protobuf:"bytes,29,rep,name=mounts" json:"mounts,omitempty"`
	Carrier          *CarrierInfo    `protobuf:"bytes,30,opt,name=carrier" json:"carrier,omitempty"`
	Furnguid         *string         `protobuf:"bytes,32,opt,name=furnguid" json:"furnguid,omitempty"`
	Affix            []uint32        `protobuf:"varint,34,rep,name=affix" json:"affix,omitempty"`
	Boxid            *uint32         `protobuf:"varint,35,opt,name=boxid" json:"boxid,omitempty"`
	Direction        *uint32         `protobuf:"varint,36,opt,name=direction" json:"direction,omitempty"`
	Puzzlemotionid   *uint32         `protobuf:"varint,37,opt,name=puzzlemotionid" json:"puzzlemotionid,omitempty"`
	Groupid          *uint64         `protobuf:"varint,38,opt,name=groupid" json:"groupid,omitempty"`
	Chantskill       *ChantSkillInfo `protobuf:"bytes,39,opt,name=chantskill" json:"chantskill,omitempty"`
	Skillid          *uint32         `protobuf:"varint,40,opt,name=skillid" json:"skillid,omitempty"`
	Skillowner       *uint64         `protobuf:"varint,41,opt,name=skillowner" json:"skillowner,omitempty"`
}

// Default values for MapNpc fields.
const (
	Default_MapNpc_Id               = uint64(0)
	Default_MapNpc_NpcID            = uint32(0)
	Default_MapNpc_Owner            = uint64(0)
	Default_MapNpc_Behaviour        = uint32(0)
	Default_MapNpc_Uniqueid         = uint32(0)
	Default_MapNpc_Teamid           = uint64(0)
	Default_MapNpc_Searchrange      = uint32(0)
	Default_MapNpc_Motionactionid   = uint32(0)
	Default_MapNpc_Effectpos        = uint32(0)
	Default_MapNpc_Effectindex      = uint32(0)
	Default_MapNpc_Isbirth          = bool(false)
	Default_MapNpc_Fadein           = uint32(0)
	Default_MapNpc_Guildid          = uint64(0)
	Default_MapNpc_Search           = uint32(0)
	Default_MapNpc_Bosstype         = uint32(0)
	Default_MapNpc_IsBossFromBranch = bool(false)
)

func (x *MapNpc) Reset() {
	*x = MapNpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapNpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapNpc) ProtoMessage() {}

func (x *MapNpc) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapNpc.ProtoReflect.Descriptor instead.
func (*MapNpc) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{11}
}

func (x *MapNpc) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_MapNpc_Id
}

func (x *MapNpc) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MapNpc) GetNpcID() uint32 {
	if x != nil && x.NpcID != nil {
		return *x.NpcID
	}
	return Default_MapNpc_NpcID
}

func (x *MapNpc) GetCharacter() []uint32 {
	if x != nil {
		return x.Character
	}
	return nil
}

func (x *MapNpc) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MapNpc) GetDest() *ScenePos {
	if x != nil {
		return x.Dest
	}
	return nil
}

func (x *MapNpc) GetDir() uint32 {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return 0
}

func (x *MapNpc) GetDatas() []*UserData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *MapNpc) GetAttrs() []*UserAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *MapNpc) GetOwner() uint64 {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return Default_MapNpc_Owner
}

func (x *MapNpc) GetBehaviour() uint32 {
	if x != nil && x.Behaviour != nil {
		return *x.Behaviour
	}
	return Default_MapNpc_Behaviour
}

func (x *MapNpc) GetUniqueid() uint32 {
	if x != nil && x.Uniqueid != nil {
		return *x.Uniqueid
	}
	return Default_MapNpc_Uniqueid
}

func (x *MapNpc) GetWaitaction() string {
	if x != nil && x.Waitaction != nil {
		return *x.Waitaction
	}
	return ""
}

func (x *MapNpc) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return Default_MapNpc_Teamid
}

func (x *MapNpc) GetSearchrange() uint32 {
	if x != nil && x.Searchrange != nil {
		return *x.Searchrange
	}
	return Default_MapNpc_Searchrange
}

func (x *MapNpc) GetBuffs() []*BufferData {
	if x != nil {
		return x.Buffs
	}
	return nil
}

func (x *MapNpc) GetMotionactionid() uint32 {
	if x != nil && x.Motionactionid != nil {
		return *x.Motionactionid
	}
	return Default_MapNpc_Motionactionid
}

func (x *MapNpc) GetEffect() string {
	if x != nil && x.Effect != nil {
		return *x.Effect
	}
	return ""
}

func (x *MapNpc) GetEffectpos() uint32 {
	if x != nil && x.Effectpos != nil {
		return *x.Effectpos
	}
	return Default_MapNpc_Effectpos
}

func (x *MapNpc) GetEffectindex() uint32 {
	if x != nil && x.Effectindex != nil {
		return *x.Effectindex
	}
	return Default_MapNpc_Effectindex
}

func (x *MapNpc) GetSpeffectdata() []*SpEffectData {
	if x != nil {
		return x.Speffectdata
	}
	return nil
}

func (x *MapNpc) GetIsbirth() bool {
	if x != nil && x.Isbirth != nil {
		return *x.Isbirth
	}
	return Default_MapNpc_Isbirth
}

func (x *MapNpc) GetEatProgress() uint32 {
	if x != nil && x.EatProgress != nil {
		return *x.EatProgress
	}
	return 0
}

func (x *MapNpc) GetFadein() uint32 {
	if x != nil && x.Fadein != nil {
		return *x.Fadein
	}
	return Default_MapNpc_Fadein
}

func (x *MapNpc) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return Default_MapNpc_Guildid
}

func (x *MapNpc) GetSearch() uint32 {
	if x != nil && x.Search != nil {
		return *x.Search
	}
	return Default_MapNpc_Search
}

func (x *MapNpc) GetBosstype() uint32 {
	if x != nil && x.Bosstype != nil {
		return *x.Bosstype
	}
	return Default_MapNpc_Bosstype
}

func (x *MapNpc) GetIsBossFromBranch() bool {
	if x != nil && x.IsBossFromBranch != nil {
		return *x.IsBossFromBranch
	}
	return Default_MapNpc_IsBossFromBranch
}

func (x *MapNpc) GetMounts() []*MountInfo {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *MapNpc) GetCarrier() *CarrierInfo {
	if x != nil {
		return x.Carrier
	}
	return nil
}

func (x *MapNpc) GetFurnguid() string {
	if x != nil && x.Furnguid != nil {
		return *x.Furnguid
	}
	return ""
}

func (x *MapNpc) GetAffix() []uint32 {
	if x != nil {
		return x.Affix
	}
	return nil
}

func (x *MapNpc) GetBoxid() uint32 {
	if x != nil && x.Boxid != nil {
		return *x.Boxid
	}
	return 0
}

func (x *MapNpc) GetDirection() uint32 {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return 0
}

func (x *MapNpc) GetPuzzlemotionid() uint32 {
	if x != nil && x.Puzzlemotionid != nil {
		return *x.Puzzlemotionid
	}
	return 0
}

func (x *MapNpc) GetGroupid() uint64 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

func (x *MapNpc) GetChantskill() *ChantSkillInfo {
	if x != nil {
		return x.Chantskill
	}
	return nil
}

func (x *MapNpc) GetSkillid() uint32 {
	if x != nil && x.Skillid != nil {
		return *x.Skillid
	}
	return 0
}

func (x *MapNpc) GetSkillowner() uint64 {
	if x != nil && x.Skillowner != nil {
		return *x.Skillowner
	}
	return 0
}

type AddMapNpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param *MapParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=4" json:"param,omitempty"`
	Npcs  []*MapNpc `protobuf:"bytes,3,rep,name=npcs" json:"npcs,omitempty"`
}

// Default values for AddMapNpc fields.
const (
	Default_AddMapNpc_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_AddMapNpc_Param = MapParam_MAPPARAM_ADDMAPNPC
)

func (x *AddMapNpc) Reset() {
	*x = AddMapNpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMapNpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMapNpc) ProtoMessage() {}

func (x *AddMapNpc) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMapNpc.ProtoReflect.Descriptor instead.
func (*AddMapNpc) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{12}
}

func (x *AddMapNpc) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AddMapNpc_Cmd
}

func (x *AddMapNpc) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AddMapNpc_Param
}

func (x *AddMapNpc) GetNpcs() []*MapNpc {
	if x != nil {
		return x.Npcs
	}
	return nil
}

type MapTrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SkillID  *uint32   `protobuf:"varint,2,opt,name=skillID" json:"skillID,omitempty"`
	Pos      *ScenePos `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
	Dir      *uint32   `protobuf:"varint,4,opt,name=dir" json:"dir,omitempty"`
	Masterid *uint64   `protobuf:"varint,5,opt,name=masterid" json:"masterid,omitempty"`
}

func (x *MapTrap) Reset() {
	*x = MapTrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapTrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTrap) ProtoMessage() {}

func (x *MapTrap) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapTrap.ProtoReflect.Descriptor instead.
func (*MapTrap) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{13}
}

func (x *MapTrap) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MapTrap) GetSkillID() uint32 {
	if x != nil && x.SkillID != nil {
		return *x.SkillID
	}
	return 0
}

func (x *MapTrap) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *MapTrap) GetDir() uint32 {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return 0
}

func (x *MapTrap) GetMasterid() uint64 {
	if x != nil && x.Masterid != nil {
		return *x.Masterid
	}
	return 0
}

type AddMapTrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param *MapParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=5" json:"param,omitempty"`
	Traps []*MapTrap `protobuf:"bytes,3,rep,name=traps" json:"traps,omitempty"`
}

// Default values for AddMapTrap fields.
const (
	Default_AddMapTrap_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_AddMapTrap_Param = MapParam_MAPPARAM_ADDMAPTRAP
)

func (x *AddMapTrap) Reset() {
	*x = AddMapTrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMapTrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMapTrap) ProtoMessage() {}

func (x *AddMapTrap) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMapTrap.ProtoReflect.Descriptor instead.
func (*AddMapTrap) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{14}
}

func (x *AddMapTrap) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AddMapTrap_Cmd
}

func (x *AddMapTrap) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AddMapTrap_Param
}

func (x *AddMapTrap) GetTraps() []*MapTrap {
	if x != nil {
		return x.Traps
	}
	return nil
}

type MapAct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint64   `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Range    *uint32   `protobuf:"varint,2,opt,name=range,def=0" json:"range,omitempty"`
	Masterid *uint64   `protobuf:"varint,3,opt,name=masterid,def=0" json:"masterid,omitempty"`
	Type     *EActType `protobuf:"varint,4,opt,name=type,enum=Cmd.EActType,def=0" json:"type,omitempty"`
	Actvalue *uint32   `protobuf:"varint,5,opt,name=actvalue,def=0" json:"actvalue,omitempty"`
	Pos      *ScenePos `protobuf:"bytes,6,opt,name=pos" json:"pos,omitempty"`
}

// Default values for MapAct fields.
const (
	Default_MapAct_Id       = uint64(0)
	Default_MapAct_Range    = uint32(0)
	Default_MapAct_Masterid = uint64(0)
	Default_MapAct_Type     = EActType_EACTTYPE_MIN
	Default_MapAct_Actvalue = uint32(0)
)

func (x *MapAct) Reset() {
	*x = MapAct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapAct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapAct) ProtoMessage() {}

func (x *MapAct) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapAct.ProtoReflect.Descriptor instead.
func (*MapAct) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{15}
}

func (x *MapAct) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_MapAct_Id
}

func (x *MapAct) GetRange() uint32 {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return Default_MapAct_Range
}

func (x *MapAct) GetMasterid() uint64 {
	if x != nil && x.Masterid != nil {
		return *x.Masterid
	}
	return Default_MapAct_Masterid
}

func (x *MapAct) GetType() EActType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_MapAct_Type
}

func (x *MapAct) GetActvalue() uint32 {
	if x != nil && x.Actvalue != nil {
		return *x.Actvalue
	}
	return Default_MapAct_Actvalue
}

func (x *MapAct) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

type AddMapAct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param *MapParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=6" json:"param,omitempty"`
	Acts  []*MapAct `protobuf:"bytes,3,rep,name=acts" json:"acts,omitempty"`
}

// Default values for AddMapAct fields.
const (
	Default_AddMapAct_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_AddMapAct_Param = MapParam_MAPPARAM_ADDMAPACT
)

func (x *AddMapAct) Reset() {
	*x = AddMapAct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMapAct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMapAct) ProtoMessage() {}

func (x *AddMapAct) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMapAct.ProtoReflect.Descriptor instead.
func (*AddMapAct) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{16}
}

func (x *AddMapAct) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AddMapAct_Cmd
}

func (x *AddMapAct) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AddMapAct_Param
}

func (x *AddMapAct) GetActs() []*MapAct {
	if x != nil {
		return x.Acts
	}
	return nil
}

type ExitPointState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param   *MapParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=7" json:"param,omitempty"`
	Exitid  *uint32   `protobuf:"varint,3,opt,name=exitid" json:"exitid,omitempty"`
	Visible *uint32   `protobuf:"varint,4,opt,name=visible" json:"visible,omitempty"`
}

// Default values for ExitPointState fields.
const (
	Default_ExitPointState_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_ExitPointState_Param = MapParam_MAPPARAM_EXIT_POINT_STATE
)

func (x *ExitPointState) Reset() {
	*x = ExitPointState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitPointState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitPointState) ProtoMessage() {}

func (x *ExitPointState) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitPointState.ProtoReflect.Descriptor instead.
func (*ExitPointState) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{17}
}

func (x *ExitPointState) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExitPointState_Cmd
}

func (x *ExitPointState) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExitPointState_Param
}

func (x *ExitPointState) GetExitid() uint32 {
	if x != nil && x.Exitid != nil {
		return *x.Exitid
	}
	return 0
}

func (x *ExitPointState) GetVisible() uint32 {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return 0
}

type MapCmdEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param *MapParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=8" json:"param,omitempty"`
}

// Default values for MapCmdEnd fields.
const (
	Default_MapCmdEnd_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_MapCmdEnd_Param = MapParam_MAPPARAM_MAP_CMD_END
)

func (x *MapCmdEnd) Reset() {
	*x = MapCmdEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapCmdEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapCmdEnd) ProtoMessage() {}

func (x *MapCmdEnd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapCmdEnd.ProtoReflect.Descriptor instead.
func (*MapCmdEnd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{18}
}

func (x *MapCmdEnd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MapCmdEnd_Cmd
}

func (x *MapCmdEnd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MapCmdEnd_Param
}

type NpcSearchRangeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param *MapParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=9" json:"param,omitempty"`
	Id    *uint64   `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Range *uint32   `protobuf:"varint,4,opt,name=range,def=0" json:"range,omitempty"`
}

// Default values for NpcSearchRangeCmd fields.
const (
	Default_NpcSearchRangeCmd_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_NpcSearchRangeCmd_Param = MapParam_MAPPARAM_NPC_SEARCH_RANGE
	Default_NpcSearchRangeCmd_Id    = uint64(0)
	Default_NpcSearchRangeCmd_Range = uint32(0)
)

func (x *NpcSearchRangeCmd) Reset() {
	*x = NpcSearchRangeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpcSearchRangeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpcSearchRangeCmd) ProtoMessage() {}

func (x *NpcSearchRangeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpcSearchRangeCmd.ProtoReflect.Descriptor instead.
func (*NpcSearchRangeCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{19}
}

func (x *NpcSearchRangeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NpcSearchRangeCmd_Cmd
}

func (x *NpcSearchRangeCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NpcSearchRangeCmd_Param
}

func (x *NpcSearchRangeCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_NpcSearchRangeCmd_Id
}

func (x *NpcSearchRangeCmd) GetRange() uint32 {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return Default_NpcSearchRangeCmd_Range
}

type UserHandsCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param   *MapParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=10" json:"param,omitempty"`
	Player1 *uint64   `protobuf:"varint,3,opt,name=player1,def=0" json:"player1,omitempty"`
	Player2 *uint64   `protobuf:"varint,4,opt,name=player2,def=0" json:"player2,omitempty"`
	Isadd   *uint32   `protobuf:"varint,5,opt,name=isadd,def=1" json:"isadd,omitempty"`
}

// Default values for UserHandsCmd fields.
const (
	Default_UserHandsCmd_Cmd     = Command_SCENE_USER_MAP_PROTOCMD
	Default_UserHandsCmd_Param   = MapParam_MAPPARAM_USER_HANDS
	Default_UserHandsCmd_Player1 = uint64(0)
	Default_UserHandsCmd_Player2 = uint64(0)
	Default_UserHandsCmd_Isadd   = uint32(1)
)

func (x *UserHandsCmd) Reset() {
	*x = UserHandsCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserHandsCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserHandsCmd) ProtoMessage() {}

func (x *UserHandsCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserHandsCmd.ProtoReflect.Descriptor instead.
func (*UserHandsCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{20}
}

func (x *UserHandsCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserHandsCmd_Cmd
}

func (x *UserHandsCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserHandsCmd_Param
}

func (x *UserHandsCmd) GetPlayer1() uint64 {
	if x != nil && x.Player1 != nil {
		return *x.Player1
	}
	return Default_UserHandsCmd_Player1
}

func (x *UserHandsCmd) GetPlayer2() uint64 {
	if x != nil && x.Player2 != nil {
		return *x.Player2
	}
	return Default_UserHandsCmd_Player2
}

func (x *UserHandsCmd) GetIsadd() uint32 {
	if x != nil && x.Isadd != nil {
		return *x.Isadd
	}
	return Default_UserHandsCmd_Isadd
}

type SpEffectCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param    *MapParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=11" json:"param,omitempty"`
	Senderid *uint64       `protobuf:"varint,3,opt,name=senderid" json:"senderid,omitempty"`
	Data     *SpEffectData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	Isadd    *bool         `protobuf:"varint,5,opt,name=isadd,def=1" json:"isadd,omitempty"`
}

// Default values for SpEffectCmd fields.
const (
	Default_SpEffectCmd_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_SpEffectCmd_Param = MapParam_MAPPARAM_USER_SPEFFECT
	Default_SpEffectCmd_Isadd = bool(true)
)

func (x *SpEffectCmd) Reset() {
	*x = SpEffectCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpEffectCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpEffectCmd) ProtoMessage() {}

func (x *SpEffectCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpEffectCmd.ProtoReflect.Descriptor instead.
func (*SpEffectCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{21}
}

func (x *SpEffectCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SpEffectCmd_Cmd
}

func (x *SpEffectCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SpEffectCmd_Param
}

func (x *SpEffectCmd) GetSenderid() uint64 {
	if x != nil && x.Senderid != nil {
		return *x.Senderid
	}
	return 0
}

func (x *SpEffectCmd) GetData() *SpEffectData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SpEffectCmd) GetIsadd() bool {
	if x != nil && x.Isadd != nil {
		return *x.Isadd
	}
	return Default_SpEffectCmd_Isadd
}

type UserHandNpcCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param  *MapParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=12" json:"param,omitempty"`
	Data   *HandNpcData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Ishand *bool        `protobuf:"varint,4,opt,name=ishand,def=1" json:"ishand,omitempty"`
	Userid *uint64      `protobuf:"varint,5,opt,name=userid,def=0" json:"userid,omitempty"`
}

// Default values for UserHandNpcCmd fields.
const (
	Default_UserHandNpcCmd_Cmd    = Command_SCENE_USER_MAP_PROTOCMD
	Default_UserHandNpcCmd_Param  = MapParam_MAPPARAM_USER_HAND_NPC
	Default_UserHandNpcCmd_Ishand = bool(true)
	Default_UserHandNpcCmd_Userid = uint64(0)
)

func (x *UserHandNpcCmd) Reset() {
	*x = UserHandNpcCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserHandNpcCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserHandNpcCmd) ProtoMessage() {}

func (x *UserHandNpcCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserHandNpcCmd.ProtoReflect.Descriptor instead.
func (*UserHandNpcCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{22}
}

func (x *UserHandNpcCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserHandNpcCmd_Cmd
}

func (x *UserHandNpcCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserHandNpcCmd_Param
}

func (x *UserHandNpcCmd) GetData() *HandNpcData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UserHandNpcCmd) GetIshand() bool {
	if x != nil && x.Ishand != nil {
		return *x.Ishand
	}
	return Default_UserHandNpcCmd_Ishand
}

func (x *UserHandNpcCmd) GetUserid() uint64 {
	if x != nil && x.Userid != nil {
		return *x.Userid
	}
	return Default_UserHandNpcCmd_Userid
}

type GingerBreadNpcCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param   *MapParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=13" json:"param,omitempty"`
	Data    *GingerBreadNpcData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Isadd   *bool               `protobuf:"varint,4,opt,name=isadd,def=1" json:"isadd,omitempty"`
	Userid  *uint64             `protobuf:"varint,5,opt,name=userid,def=0" json:"userid,omitempty"`
	Bornpos *ScenePos           `protobuf:"bytes,6,opt,name=bornpos" json:"bornpos,omitempty"`
}

// Default values for GingerBreadNpcCmd fields.
const (
	Default_GingerBreadNpcCmd_Cmd    = Command_SCENE_USER_MAP_PROTOCMD
	Default_GingerBreadNpcCmd_Param  = MapParam_MAPPARAM_GINGERBREAD_NPC
	Default_GingerBreadNpcCmd_Isadd  = bool(true)
	Default_GingerBreadNpcCmd_Userid = uint64(0)
)

func (x *GingerBreadNpcCmd) Reset() {
	*x = GingerBreadNpcCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GingerBreadNpcCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GingerBreadNpcCmd) ProtoMessage() {}

func (x *GingerBreadNpcCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GingerBreadNpcCmd.ProtoReflect.Descriptor instead.
func (*GingerBreadNpcCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{23}
}

func (x *GingerBreadNpcCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GingerBreadNpcCmd_Cmd
}

func (x *GingerBreadNpcCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GingerBreadNpcCmd_Param
}

func (x *GingerBreadNpcCmd) GetData() *GingerBreadNpcData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GingerBreadNpcCmd) GetIsadd() bool {
	if x != nil && x.Isadd != nil {
		return *x.Isadd
	}
	return Default_GingerBreadNpcCmd_Isadd
}

func (x *GingerBreadNpcCmd) GetUserid() uint64 {
	if x != nil && x.Userid != nil {
		return *x.Userid
	}
	return Default_GingerBreadNpcCmd_Userid
}

func (x *GingerBreadNpcCmd) GetBornpos() *ScenePos {
	if x != nil {
		return x.Bornpos
	}
	return nil
}

type GoCityGateMapCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param *MapParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=14" json:"param,omitempty"`
	Flag  *uint32   `protobuf:"varint,3,opt,name=flag,def=0" json:"flag,omitempty"`
}

// Default values for GoCityGateMapCmd fields.
const (
	Default_GoCityGateMapCmd_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_GoCityGateMapCmd_Param = MapParam_MAPPARAM_GO_CITYGATE
	Default_GoCityGateMapCmd_Flag  = uint32(0)
)

func (x *GoCityGateMapCmd) Reset() {
	*x = GoCityGateMapCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoCityGateMapCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoCityGateMapCmd) ProtoMessage() {}

func (x *GoCityGateMapCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoCityGateMapCmd.ProtoReflect.Descriptor instead.
func (*GoCityGateMapCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{24}
}

func (x *GoCityGateMapCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GoCityGateMapCmd_Cmd
}

func (x *GoCityGateMapCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GoCityGateMapCmd_Param
}

func (x *GoCityGateMapCmd) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return Default_GoCityGateMapCmd_Flag
}

type UserSecretQueryMapCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param    *MapParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=16" json:"param,omitempty"`
	Ids      []uint32  `protobuf:"varint,3,rep,name=ids" json:"ids,omitempty"`
	DayCount *uint32   `protobuf:"varint,4,opt,name=day_count,json=dayCount" json:"day_count,omitempty"`
}

// Default values for UserSecretQueryMapCmd fields.
const (
	Default_UserSecretQueryMapCmd_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_UserSecretQueryMapCmd_Param = MapParam_MAPPARAM_USER_SECRET_QUERY
)

func (x *UserSecretQueryMapCmd) Reset() {
	*x = UserSecretQueryMapCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSecretQueryMapCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSecretQueryMapCmd) ProtoMessage() {}

func (x *UserSecretQueryMapCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSecretQueryMapCmd.ProtoReflect.Descriptor instead.
func (*UserSecretQueryMapCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{25}
}

func (x *UserSecretQueryMapCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserSecretQueryMapCmd_Cmd
}

func (x *UserSecretQueryMapCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserSecretQueryMapCmd_Param
}

func (x *UserSecretQueryMapCmd) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UserSecretQueryMapCmd) GetDayCount() uint32 {
	if x != nil && x.DayCount != nil {
		return *x.DayCount
	}
	return 0
}

type UserSecretGetMapCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param *MapParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=17" json:"param,omitempty"`
	Id    *uint32   `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

// Default values for UserSecretGetMapCmd fields.
const (
	Default_UserSecretGetMapCmd_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_UserSecretGetMapCmd_Param = MapParam_MAPPARAM_USER_SECRET_GET
)

func (x *UserSecretGetMapCmd) Reset() {
	*x = UserSecretGetMapCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSecretGetMapCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSecretGetMapCmd) ProtoMessage() {}

func (x *UserSecretGetMapCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSecretGetMapCmd.ProtoReflect.Descriptor instead.
func (*UserSecretGetMapCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{26}
}

func (x *UserSecretGetMapCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserSecretGetMapCmd_Cmd
}

func (x *UserSecretGetMapCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserSecretGetMapCmd_Param
}

func (x *UserSecretGetMapCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type EditNpcTextMapCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param  *MapParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=15" json:"param,omitempty"`
	Etype  *ENpcTextType `protobuf:"varint,3,opt,name=etype,enum=Cmd.ENpcTextType,def=1" json:"etype,omitempty"`
	Tempid *uint64       `protobuf:"varint,4,opt,name=tempid,def=0" json:"tempid,omitempty"`
	Text   *string       `protobuf:"bytes,5,opt,name=text" json:"text,omitempty"`
}

// Default values for EditNpcTextMapCmd fields.
const (
	Default_EditNpcTextMapCmd_Cmd    = Command_SCENE_USER_MAP_PROTOCMD
	Default_EditNpcTextMapCmd_Param  = MapParam_MAPPARAM_EDIT_NPCTEXT
	Default_EditNpcTextMapCmd_Etype  = ENpcTextType_ENPCTEXTTYPE_HEAD
	Default_EditNpcTextMapCmd_Tempid = uint64(0)
)

func (x *EditNpcTextMapCmd) Reset() {
	*x = EditNpcTextMapCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditNpcTextMapCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditNpcTextMapCmd) ProtoMessage() {}

func (x *EditNpcTextMapCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditNpcTextMapCmd.ProtoReflect.Descriptor instead.
func (*EditNpcTextMapCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{27}
}

func (x *EditNpcTextMapCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EditNpcTextMapCmd_Cmd
}

func (x *EditNpcTextMapCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EditNpcTextMapCmd_Param
}

func (x *EditNpcTextMapCmd) GetEtype() ENpcTextType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_EditNpcTextMapCmd_Etype
}

func (x *EditNpcTextMapCmd) GetTempid() uint64 {
	if x != nil && x.Tempid != nil {
		return *x.Tempid
	}
	return Default_EditNpcTextMapCmd_Tempid
}

func (x *EditNpcTextMapCmd) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type ObjStateSyncMapCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param *MapParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=18" json:"param,omitempty"`
	Objid *uint32   `protobuf:"varint,3,opt,name=objid" json:"objid,omitempty"`
	State *string   `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
}

// Default values for ObjStateSyncMapCmd fields.
const (
	Default_ObjStateSyncMapCmd_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_ObjStateSyncMapCmd_Param = MapParam_MAPPARAM_OBJ_STATE_SYNC
)

func (x *ObjStateSyncMapCmd) Reset() {
	*x = ObjStateSyncMapCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjStateSyncMapCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjStateSyncMapCmd) ProtoMessage() {}

func (x *ObjStateSyncMapCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjStateSyncMapCmd.ProtoReflect.Descriptor instead.
func (*ObjStateSyncMapCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{28}
}

func (x *ObjStateSyncMapCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ObjStateSyncMapCmd_Cmd
}

func (x *ObjStateSyncMapCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ObjStateSyncMapCmd_Param
}

func (x *ObjStateSyncMapCmd) GetObjid() uint32 {
	if x != nil && x.Objid != nil {
		return *x.Objid
	}
	return 0
}

func (x *ObjStateSyncMapCmd) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

type AddMapObjNpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param *MapParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=19" json:"param,omitempty"`
	Npcs  []*MapNpc `protobuf:"bytes,3,rep,name=npcs" json:"npcs,omitempty"`
}

// Default values for AddMapObjNpc fields.
const (
	Default_AddMapObjNpc_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_AddMapObjNpc_Param = MapParam_MAPPARAM_ADDMAPOBJNPC
)

func (x *AddMapObjNpc) Reset() {
	*x = AddMapObjNpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMapObjNpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMapObjNpc) ProtoMessage() {}

func (x *AddMapObjNpc) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMapObjNpc.ProtoReflect.Descriptor instead.
func (*AddMapObjNpc) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{29}
}

func (x *AddMapObjNpc) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AddMapObjNpc_Cmd
}

func (x *AddMapObjNpc) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AddMapObjNpc_Param
}

func (x *AddMapObjNpc) GetNpcs() []*MapNpc {
	if x != nil {
		return x.Npcs
	}
	return nil
}

type TeamFollowBanListCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=209" json:"cmd,omitempty"`
	Param      *MapParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=20" json:"param,omitempty"`
	List       []uint32  `protobuf:"varint,3,rep,name=list" json:"list,omitempty"`
	Updateflag *bool     `protobuf:"varint,4,opt,name=updateflag" json:"updateflag,omitempty"`
}

// Default values for TeamFollowBanListCmd fields.
const (
	Default_TeamFollowBanListCmd_Cmd   = Command_TEAM_PROTOCMD
	Default_TeamFollowBanListCmd_Param = MapParam_MAPPARAM_FOLLOWBANLIST
)

func (x *TeamFollowBanListCmd) Reset() {
	*x = TeamFollowBanListCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamFollowBanListCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamFollowBanListCmd) ProtoMessage() {}

func (x *TeamFollowBanListCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamFollowBanListCmd.ProtoReflect.Descriptor instead.
func (*TeamFollowBanListCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{30}
}

func (x *TeamFollowBanListCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamFollowBanListCmd_Cmd
}

func (x *TeamFollowBanListCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamFollowBanListCmd_Param
}

func (x *TeamFollowBanListCmd) GetList() []uint32 {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *TeamFollowBanListCmd) GetUpdateflag() bool {
	if x != nil && x.Updateflag != nil {
		return *x.Updateflag
	}
	return false
}

type ChantSkillInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skillid     *uint32    `protobuf:"varint,1,opt,name=skillid" json:"skillid,omitempty"`
	Chanttime   *uint32    `protobuf:"varint,2,opt,name=chanttime" json:"chanttime,omitempty"`
	Starttime   *uint64    `protobuf:"varint,3,opt,name=starttime" json:"starttime,omitempty"`
	Data        *PhaseData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	Cursorvalue *int32     `protobuf:"varint,5,opt,name=cursorvalue" json:"cursorvalue,omitempty"`
}

func (x *ChantSkillInfo) Reset() {
	*x = ChantSkillInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChantSkillInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChantSkillInfo) ProtoMessage() {}

func (x *ChantSkillInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChantSkillInfo.ProtoReflect.Descriptor instead.
func (*ChantSkillInfo) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{31}
}

func (x *ChantSkillInfo) GetSkillid() uint32 {
	if x != nil && x.Skillid != nil {
		return *x.Skillid
	}
	return 0
}

func (x *ChantSkillInfo) GetChanttime() uint32 {
	if x != nil && x.Chanttime != nil {
		return *x.Chanttime
	}
	return 0
}

func (x *ChantSkillInfo) GetStarttime() uint64 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

func (x *ChantSkillInfo) GetData() *PhaseData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ChantSkillInfo) GetCursorvalue() int32 {
	if x != nil && x.Cursorvalue != nil {
		return *x.Cursorvalue
	}
	return 0
}

type FuncBuildNpcData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Npcguid  *uint64 `protobuf:"varint,1,opt,name=npcguid" json:"npcguid,omitempty"`
	Effectid *uint32 `protobuf:"varint,2,opt,name=effectid" json:"effectid,omitempty"`
	Level    *uint32 `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	Cdtime   *uint32 `protobuf:"varint,4,opt,name=cdtime" json:"cdtime,omitempty"`
	Valid    *bool   `protobuf:"varint,5,opt,name=valid" json:"valid,omitempty"`
}

func (x *FuncBuildNpcData) Reset() {
	*x = FuncBuildNpcData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuncBuildNpcData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuncBuildNpcData) ProtoMessage() {}

func (x *FuncBuildNpcData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuncBuildNpcData.ProtoReflect.Descriptor instead.
func (*FuncBuildNpcData) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{32}
}

func (x *FuncBuildNpcData) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return 0
}

func (x *FuncBuildNpcData) GetEffectid() uint32 {
	if x != nil && x.Effectid != nil {
		return *x.Effectid
	}
	return 0
}

func (x *FuncBuildNpcData) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *FuncBuildNpcData) GetCdtime() uint32 {
	if x != nil && x.Cdtime != nil {
		return *x.Cdtime
	}
	return 0
}

func (x *FuncBuildNpcData) GetValid() bool {
	if x != nil && x.Valid != nil {
		return *x.Valid
	}
	return false
}

type FuncBuildNpcSyncCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param *MapParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=22" json:"param,omitempty"`
	Data  []*FuncBuildNpcData `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
}

// Default values for FuncBuildNpcSyncCmd fields.
const (
	Default_FuncBuildNpcSyncCmd_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_FuncBuildNpcSyncCmd_Param = MapParam_MAPPARAM_UPDATE_FUNCBUILD_NPC
)

func (x *FuncBuildNpcSyncCmd) Reset() {
	*x = FuncBuildNpcSyncCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuncBuildNpcSyncCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuncBuildNpcSyncCmd) ProtoMessage() {}

func (x *FuncBuildNpcSyncCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuncBuildNpcSyncCmd.ProtoReflect.Descriptor instead.
func (*FuncBuildNpcSyncCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{33}
}

func (x *FuncBuildNpcSyncCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FuncBuildNpcSyncCmd_Cmd
}

func (x *FuncBuildNpcSyncCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FuncBuildNpcSyncCmd_Param
}

func (x *FuncBuildNpcSyncCmd) GetData() []*FuncBuildNpcData {
	if x != nil {
		return x.Data
	}
	return nil
}

type FuncBuildNpcUpdateCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param *MapParam           `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=22" json:"param,omitempty"`
	Data  []*FuncBuildNpcData `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
	Dels  []uint64            `protobuf:"varint,5,rep,name=dels" json:"dels,omitempty"`
}

// Default values for FuncBuildNpcUpdateCmd fields.
const (
	Default_FuncBuildNpcUpdateCmd_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_FuncBuildNpcUpdateCmd_Param = MapParam_MAPPARAM_UPDATE_FUNCBUILD_NPC
)

func (x *FuncBuildNpcUpdateCmd) Reset() {
	*x = FuncBuildNpcUpdateCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuncBuildNpcUpdateCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuncBuildNpcUpdateCmd) ProtoMessage() {}

func (x *FuncBuildNpcUpdateCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuncBuildNpcUpdateCmd.ProtoReflect.Descriptor instead.
func (*FuncBuildNpcUpdateCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{34}
}

func (x *FuncBuildNpcUpdateCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FuncBuildNpcUpdateCmd_Cmd
}

func (x *FuncBuildNpcUpdateCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FuncBuildNpcUpdateCmd_Param
}

func (x *FuncBuildNpcUpdateCmd) GetData() []*FuncBuildNpcData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FuncBuildNpcUpdateCmd) GetDels() []uint64 {
	if x != nil {
		return x.Dels
	}
	return nil
}

type CloneMapStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapid  *uint32          `protobuf:"varint,1,opt,name=mapid" json:"mapid,omitempty"`
	Status *ECloneMapStatus `protobuf:"varint,2,opt,name=status,enum=Cmd.ECloneMapStatus" json:"status,omitempty"`
	Name   *string          `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *CloneMapStatus) Reset() {
	*x = CloneMapStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneMapStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneMapStatus) ProtoMessage() {}

func (x *CloneMapStatus) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneMapStatus.ProtoReflect.Descriptor instead.
func (*CloneMapStatus) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{35}
}

func (x *CloneMapStatus) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return 0
}

func (x *CloneMapStatus) GetStatus() ECloneMapStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ECloneMapStatus_ECLONEMAPSTATUS_MIN
}

func (x *CloneMapStatus) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type QueryCloneMapStatusMapCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param  *MapParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=23" json:"param,omitempty"`
	Status []*CloneMapStatus `protobuf:"bytes,3,rep,name=status" json:"status,omitempty"`
}

// Default values for QueryCloneMapStatusMapCmd fields.
const (
	Default_QueryCloneMapStatusMapCmd_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_QueryCloneMapStatusMapCmd_Param = MapParam_MAPPARAM_CLONEMAP_QUERYSTATUS
)

func (x *QueryCloneMapStatusMapCmd) Reset() {
	*x = QueryCloneMapStatusMapCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCloneMapStatusMapCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCloneMapStatusMapCmd) ProtoMessage() {}

func (x *QueryCloneMapStatusMapCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCloneMapStatusMapCmd.ProtoReflect.Descriptor instead.
func (*QueryCloneMapStatusMapCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{36}
}

func (x *QueryCloneMapStatusMapCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryCloneMapStatusMapCmd_Cmd
}

func (x *QueryCloneMapStatusMapCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryCloneMapStatusMapCmd_Param
}

func (x *QueryCloneMapStatusMapCmd) GetStatus() []*CloneMapStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type ChangeCloneMapCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param *MapParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=24" json:"param,omitempty"`
	Mapid *uint32   `protobuf:"varint,3,opt,name=mapid" json:"mapid,omitempty"`
}

// Default values for ChangeCloneMapCmd fields.
const (
	Default_ChangeCloneMapCmd_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_ChangeCloneMapCmd_Param = MapParam_MAPPARAM_CLONEMAP_CHANGE
)

func (x *ChangeCloneMapCmd) Reset() {
	*x = ChangeCloneMapCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeCloneMapCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeCloneMapCmd) ProtoMessage() {}

func (x *ChangeCloneMapCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeCloneMapCmd.ProtoReflect.Descriptor instead.
func (*ChangeCloneMapCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{37}
}

func (x *ChangeCloneMapCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChangeCloneMapCmd_Cmd
}

func (x *ChangeCloneMapCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChangeCloneMapCmd_Param
}

func (x *ChangeCloneMapCmd) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return 0
}

type StormBossAffixQueryCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param       *MapParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=25" json:"param,omitempty"`
	Affixs      []uint32  `protobuf:"varint,3,rep,name=affixs" json:"affixs,omitempty"`
	RefreshTime *uint32   `protobuf:"varint,4,opt,name=refresh_time,json=refreshTime" json:"refresh_time,omitempty"`
}

// Default values for StormBossAffixQueryCmd fields.
const (
	Default_StormBossAffixQueryCmd_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_StormBossAffixQueryCmd_Param = MapParam_MAPPARAM_STORMBOSS_AFFIX_QUERY
)

func (x *StormBossAffixQueryCmd) Reset() {
	*x = StormBossAffixQueryCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StormBossAffixQueryCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StormBossAffixQueryCmd) ProtoMessage() {}

func (x *StormBossAffixQueryCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StormBossAffixQueryCmd.ProtoReflect.Descriptor instead.
func (*StormBossAffixQueryCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{38}
}

func (x *StormBossAffixQueryCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StormBossAffixQueryCmd_Cmd
}

func (x *StormBossAffixQueryCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StormBossAffixQueryCmd_Param
}

func (x *StormBossAffixQueryCmd) GetAffixs() []uint32 {
	if x != nil {
		return x.Affixs
	}
	return nil
}

func (x *StormBossAffixQueryCmd) GetRefreshTime() uint32 {
	if x != nil && x.RefreshTime != nil {
		return *x.RefreshTime
	}
	return 0
}

type BuffRewardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Count   *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	EndTime *uint32 `protobuf:"varint,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Layer   *uint32 `protobuf:"varint,4,opt,name=layer" json:"layer,omitempty"`
}

func (x *BuffRewardData) Reset() {
	*x = BuffRewardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffRewardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffRewardData) ProtoMessage() {}

func (x *BuffRewardData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffRewardData.ProtoReflect.Descriptor instead.
func (*BuffRewardData) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{39}
}

func (x *BuffRewardData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BuffRewardData) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *BuffRewardData) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *BuffRewardData) GetLayer() uint32 {
	if x != nil && x.Layer != nil {
		return *x.Layer
	}
	return 0
}

type BuffRewardQueryCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param *MapParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=26" json:"param,omitempty"`
	Datas []*BuffRewardData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for BuffRewardQueryCmd fields.
const (
	Default_BuffRewardQueryCmd_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_BuffRewardQueryCmd_Param = MapParam_MAPPARAM_BUFF_REWARD_QUERY
)

func (x *BuffRewardQueryCmd) Reset() {
	*x = BuffRewardQueryCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffRewardQueryCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffRewardQueryCmd) ProtoMessage() {}

func (x *BuffRewardQueryCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffRewardQueryCmd.ProtoReflect.Descriptor instead.
func (*BuffRewardQueryCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{40}
}

func (x *BuffRewardQueryCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuffRewardQueryCmd_Cmd
}

func (x *BuffRewardQueryCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuffRewardQueryCmd_Param
}

func (x *BuffRewardQueryCmd) GetDatas() []*BuffRewardData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type BuffRewardSelectCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param   *MapParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=27" json:"param,omitempty"`
	Buffs   []uint32  `protobuf:"varint,3,rep,name=buffs" json:"buffs,omitempty"`
	EndTime *uint32   `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Select  *uint32   `protobuf:"varint,5,opt,name=select" json:"select,omitempty"`
	Dialog  *uint32   `protobuf:"varint,6,opt,name=dialog" json:"dialog,omitempty"`
	NpcGuid *uint32   `protobuf:"varint,7,opt,name=npc_guid,json=npcGuid" json:"npc_guid,omitempty"`
}

// Default values for BuffRewardSelectCmd fields.
const (
	Default_BuffRewardSelectCmd_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_BuffRewardSelectCmd_Param = MapParam_MAPPARAM_BUFF_REWARD_SELECT
)

func (x *BuffRewardSelectCmd) Reset() {
	*x = BuffRewardSelectCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffRewardSelectCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffRewardSelectCmd) ProtoMessage() {}

func (x *BuffRewardSelectCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffRewardSelectCmd.ProtoReflect.Descriptor instead.
func (*BuffRewardSelectCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{41}
}

func (x *BuffRewardSelectCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuffRewardSelectCmd_Cmd
}

func (x *BuffRewardSelectCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuffRewardSelectCmd_Param
}

func (x *BuffRewardSelectCmd) GetBuffs() []uint32 {
	if x != nil {
		return x.Buffs
	}
	return nil
}

func (x *BuffRewardSelectCmd) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *BuffRewardSelectCmd) GetSelect() uint32 {
	if x != nil && x.Select != nil {
		return *x.Select
	}
	return 0
}

func (x *BuffRewardSelectCmd) GetDialog() uint32 {
	if x != nil && x.Dialog != nil {
		return *x.Dialog
	}
	return 0
}

func (x *BuffRewardSelectCmd) GetNpcGuid() uint32 {
	if x != nil && x.NpcGuid != nil {
		return *x.NpcGuid
	}
	return 0
}

type ObjState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objid *uint32 `protobuf:"varint,1,opt,name=objid" json:"objid,omitempty"`
	State *string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
}

func (x *ObjState) Reset() {
	*x = ObjState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjState) ProtoMessage() {}

func (x *ObjState) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjState.ProtoReflect.Descriptor instead.
func (*ObjState) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{42}
}

func (x *ObjState) GetObjid() uint32 {
	if x != nil && x.Objid != nil {
		return *x.Objid
	}
	return 0
}

func (x *ObjState) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

type MultiObjStateSyncMapCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param     *MapParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=28" json:"param,omitempty"`
	ObjStates []*ObjState `protobuf:"bytes,3,rep,name=obj_states,json=objStates" json:"obj_states,omitempty"`
}

// Default values for MultiObjStateSyncMapCmd fields.
const (
	Default_MultiObjStateSyncMapCmd_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_MultiObjStateSyncMapCmd_Param = MapParam_MAPPARAM_MULTI_OBJ_STATE_SYNC
)

func (x *MultiObjStateSyncMapCmd) Reset() {
	*x = MultiObjStateSyncMapCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiObjStateSyncMapCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiObjStateSyncMapCmd) ProtoMessage() {}

func (x *MultiObjStateSyncMapCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiObjStateSyncMapCmd.ProtoReflect.Descriptor instead.
func (*MultiObjStateSyncMapCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{43}
}

func (x *MultiObjStateSyncMapCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MultiObjStateSyncMapCmd_Cmd
}

func (x *MultiObjStateSyncMapCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MultiObjStateSyncMapCmd_Param
}

func (x *MultiObjStateSyncMapCmd) GetObjStates() []*ObjState {
	if x != nil {
		return x.ObjStates
	}
	return nil
}

type MapZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapZone *uint32 `protobuf:"varint,1,opt,name=map_zone,json=mapZone" json:"map_zone,omitempty"`
	Param   *uint32 `protobuf:"varint,2,opt,name=param" json:"param,omitempty"`
}

func (x *MapZone) Reset() {
	*x = MapZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapZone) ProtoMessage() {}

func (x *MapZone) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapZone.ProtoReflect.Descriptor instead.
func (*MapZone) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{44}
}

func (x *MapZone) GetMapZone() uint32 {
	if x != nil && x.MapZone != nil {
		return *x.MapZone
	}
	return 0
}

func (x *MapZone) GetParam() uint32 {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return 0
}

type UpdateZoneMapCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=12" json:"cmd,omitempty"`
	Param    *MapParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.MapParam,def=29" json:"param,omitempty"`
	Zones    []*MapZone `protobuf:"bytes,3,rep,name=zones" json:"zones,omitempty"`
	DelZones []uint32   `protobuf:"varint,4,rep,name=del_zones,json=delZones" json:"del_zones,omitempty"`
}

// Default values for UpdateZoneMapCmd fields.
const (
	Default_UpdateZoneMapCmd_Cmd   = Command_SCENE_USER_MAP_PROTOCMD
	Default_UpdateZoneMapCmd_Param = MapParam_MAPPARAM_UPDATE_MAP_ZONE
)

func (x *UpdateZoneMapCmd) Reset() {
	*x = UpdateZoneMapCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneMap_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateZoneMapCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateZoneMapCmd) ProtoMessage() {}

func (x *UpdateZoneMapCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneMap_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateZoneMapCmd.ProtoReflect.Descriptor instead.
func (*UpdateZoneMapCmd) Descriptor() ([]byte, []int) {
	return file_SceneMap_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateZoneMapCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateZoneMapCmd_Cmd
}

func (x *UpdateZoneMapCmd) GetParam() MapParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateZoneMapCmd_Param
}

func (x *UpdateZoneMapCmd) GetZones() []*MapZone {
	if x != nil {
		return x.Zones
	}
	return nil
}

func (x *UpdateZoneMapCmd) GetDelZones() []uint32 {
	if x != nil {
		return x.DelZones
	}
	return nil
}

var File_SceneMap_proto protoreflect.FileDescriptor

var file_SceneMap_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x46, 0x6f, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x01,
	0x0a, 0x07, 0x4d, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64,
	0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x1d, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6c, 0x76, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6c,
	0x76, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64,
	0x4d, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13,
	0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x4d, 0x41, 0x50, 0x49,
	0x54, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4d, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe2,
	0x01, 0x0a, 0x0a, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x37, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x49, 0x43, 0x4b, 0x55, 0x50, 0x49, 0x54, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x21, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x67,
	0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x67, 0x75,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x65, 0x22, 0x40, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x61,
	0x76, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x6c, 0x61, 0x76,
	0x65, 0x49, 0x64, 0x22, 0x8b, 0x04, 0x0a, 0x0b, 0x48, 0x61, 0x6e, 0x64, 0x4e, 0x70, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x61, 0x69, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x68, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x70, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x79, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x65, 0x79, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61,
	0x72, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x21, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x65, 0x79, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x65, 0x79, 0x65, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x68, 0x61, 0x6e, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x68, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x68, 0x61, 0x6e, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x68,
	0x61, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x0a, 0x04, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x74,
	0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x74,
	0x68, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x47, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x42, 0x72, 0x65, 0x61,
	0x64, 0x4e, 0x70, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x76, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x67, 0x69, 0x76, 0x65, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x47, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7f,
	0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xf7, 0x08, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x04, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x3a, 0x0b, 0x45,
	0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x12, 0x25, 0x0a, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61,
	0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x72,
	0x6f, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x53, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c,
	0x73, 0x70, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6a, 0x6f,
	0x62, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6a, 0x6f,
	0x62, 0x12, 0x2a, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6e, 0x70, 0x63, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x4e, 0x70, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6e, 0x70, 0x63, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x74, 0x69, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x69, 0x64, 0x12, 0x3b, 0x0a,
	0x0c, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x70, 0x63, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x42, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x70, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x67, 0x69,
	0x76, 0x65, 0x6e, 0x70, 0x63, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2f,
	0x0a, 0x09, 0x63, 0x6f, 0x6f, 0x6b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x73, 0x67, 0x52, 0x09, 0x63, 0x6f, 0x6f, 0x6b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x09,
	0x6d, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x79, 0x22, 0xa3, 0x01, 0x0a, 0x0a, 0x41, 0x64,
	0x64, 0x4d, 0x61, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x13, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x4d, 0x41, 0x50,
	0x55, 0x53, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x4d, 0x61, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22,
	0x3d, 0x0a, 0x09, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22, 0xfa,
	0x09, 0x0a, 0x06, 0x4d, 0x61, 0x70, 0x4e, 0x70, 0x63, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x23, 0x0a,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x09, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75,
	0x72, 0x12, 0x1d, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0e, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x09, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x70, 0x6f, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x70, 0x6f, 0x73, 0x12, 0x23, 0x0a, 0x0b, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x35, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x70, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x07, 0x69, 0x73, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x07, 0x69, 0x73, 0x62, 0x69, 0x72, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x61, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x66,
	0x61, 0x64, 0x65, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06,
	0x66, 0x61, 0x64, 0x65, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1d,
	0x0a, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x08, 0x62, 0x6f, 0x73, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x10, 0x69, 0x73, 0x42, 0x6f, 0x73, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10,
	0x69, 0x73, 0x42, 0x6f, 0x73, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x26, 0x0a, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x72, 0x6e, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x72, 0x6e, 0x67, 0x75, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x66, 0x69, 0x78, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x66, 0x66, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x78, 0x69, 0x64, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x6f, 0x78, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x75,
	0x7a, 0x7a, 0x6c, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x09,
	0x41, 0x64, 0x64, 0x4d, 0x61, 0x70, 0x4e, 0x70, 0x63, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x12, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x4d, 0x41,
	0x50, 0x4e, 0x50, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x04, 0x6e,
	0x70, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4d, 0x61, 0x70, 0x4e, 0x70, 0x63, 0x52, 0x04, 0x6e, 0x70, 0x63, 0x73, 0x22, 0x82, 0x01, 0x0a,
	0x07, 0x4d, 0x61, 0x70, 0x54, 0x72, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x44, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x64, 0x22, 0xa3, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x72, 0x61, 0x70,
	0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d,
	0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x41, 0x44, 0x44, 0x4d, 0x41, 0x50, 0x54, 0x52, 0x41, 0x50, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x72, 0x61, 0x70,
	0x52, 0x05, 0x74, 0x72, 0x61, 0x70, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x06, 0x4d, 0x61, 0x70, 0x41,
	0x63, 0x74, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d,
	0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x2f, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x41, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x45, 0x41, 0x43, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x08, 0x61, 0x63, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x08, 0x61, 0x63, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x9e,
	0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x70, 0x41, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x12, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x44,
	0x44, 0x4d, 0x41, 0x50, 0x41, 0x43, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f,
	0x0a, 0x04, 0x61, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x41, 0x63, 0x74, 0x52, 0x04, 0x61, 0x63, 0x74, 0x73, 0x22,
	0xbb, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x4d, 0x41, 0x50, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x78, 0x69, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x69,
	0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x7f, 0x0a,
	0x09, 0x4d, 0x61, 0x70, 0x43, 0x6d, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x14, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x50, 0x5f,
	0x43, 0x4d, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xb8,
	0x01, 0x0a, 0x11, 0x4e, 0x70, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x4d, 0x41, 0x50,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x50, 0x43, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x43, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x13, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x12, 0x1b, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x12, 0x17, 0x0a, 0x05, 0x69, 0x73, 0x61, 0x64, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x05, 0x69, 0x73, 0x61, 0x64, 0x64,
	0x22, 0xe2, 0x01, 0x0a, 0x0b, 0x53, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6d, 0x64,
	0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d,
	0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x70, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x05, 0x69, 0x73, 0x61,
	0x64, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x05,
	0x69, 0x73, 0x61, 0x64, 0x64, 0x22, 0xe5, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61,
	0x6e, 0x64, 0x4e, 0x70, 0x63, 0x43, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x16, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x48,
	0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x50, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x24,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x4e, 0x70, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x06, 0x69, 0x73, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x06, 0x69, 0x73, 0x68, 0x61,
	0x6e, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x22, 0x98, 0x02,
	0x0a, 0x11, 0x47, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x42, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x70, 0x63,
	0x43, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x4d, 0x41, 0x50, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x42, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x4e, 0x50, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x47, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x42, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x70, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x05, 0x69, 0x73, 0x61, 0x64,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x05, 0x69,
	0x73, 0x61, 0x64, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x07, 0x62, 0x6f, 0x72, 0x6e, 0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52,
	0x07, 0x62, 0x6f, 0x72, 0x6e, 0x70, 0x6f, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x10, 0x47, 0x6f, 0x43,
	0x69, 0x74, 0x79, 0x47, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6d, 0x64, 0x12, 0x37, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47,
	0x4f, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x47, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x15, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0xc0, 0x01, 0x0a, 0x15, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x43,
	0x6d, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x4d, 0x41, 0x50, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x13,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70,
	0x43, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x4d, 0x41, 0x50, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54,
	0x5f, 0x47, 0x45, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x11,
	0x45, 0x64, 0x69, 0x74, 0x4e, 0x70, 0x63, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x70, 0x43, 0x6d,
	0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x4e, 0x50, 0x43, 0x54, 0x45, 0x58, 0x54, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4e, 0x70, 0x63,
	0x54, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x45, 0x4e, 0x50, 0x43, 0x54, 0x45,
	0x58, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x52, 0x05, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x22, 0xb7, 0x01, 0x0a, 0x12, 0x4f, 0x62, 0x6a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x4d, 0x61, 0x70, 0x43, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x17, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x42, 0x4a, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6f, 0x62, 0x6a, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0c,
	0x41, 0x64, 0x64, 0x4d, 0x61, 0x70, 0x4f, 0x62, 0x6a, 0x4e, 0x70, 0x63, 0x12, 0x37, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x15, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x44,
	0x44, 0x4d, 0x41, 0x50, 0x4f, 0x42, 0x4a, 0x4e, 0x50, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x1f, 0x0a, 0x04, 0x6e, 0x70, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x4e, 0x70, 0x63, 0x52, 0x04, 0x6e, 0x70,
	0x63, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x42, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x42, 0x41, 0x4e, 0x4c, 0x49, 0x53, 0x54,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x22, 0xac, 0x01, 0x0a, 0x0e,
	0x43, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x10, 0x46,
	0x75, 0x6e, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x70, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x64, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x13, 0x46, 0x75,
	0x6e, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x70, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6d,
	0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x4e, 0x50, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x29,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x70, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd3, 0x01, 0x0a, 0x15, 0x46, 0x75,
	0x6e, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x70, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x4d, 0x41, 0x50, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4e, 0x50, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x70,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x22,
	0x68, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x19, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x61, 0x70, 0x43, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d,
	0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x4d, 0x41,
	0x50, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x4d, 0x61, 0x70, 0x43, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18,
	0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x4d, 0x41,
	0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x61, 0x70, 0x69, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x42,
	0x6f, 0x73, 0x73, 0x41, 0x66, 0x66, 0x69, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6d, 0x64,
	0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d,
	0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x4d, 0x42, 0x4f, 0x53, 0x53, 0x5f, 0x41, 0x46, 0x46, 0x49,
	0x58, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x66, 0x66, 0x69, 0x78, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06,
	0x61, 0x66, 0x66, 0x69, 0x78, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x0e, 0x42, 0x75, 0x66,
	0x66, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x22, 0xb9, 0x01, 0x0a, 0x12, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x1a, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x8c,
	0x02, 0x0a, 0x13, 0x42, 0x75, 0x66, 0x66, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41,
	0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x4d,
	0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x70, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x47, 0x75, 0x69, 0x64, 0x22, 0x36, 0x0a,
	0x08, 0x4f, 0x62, 0x6a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x62, 0x6a,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4f,
	0x62, 0x6a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x70, 0x43, 0x6d,
	0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x4f, 0x42, 0x4a, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c,
	0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4f, 0x62, 0x6a, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x07,
	0x4d, 0x61, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6d, 0x64, 0x12, 0x37, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x5a, 0x6f,
	0x6e, 0x65, 0x52, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x6c,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65,
	0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2a, 0xd7, 0x06, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x41, 0x44, 0x44, 0x4d, 0x41, 0x50, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x55, 0x50, 0x49,
	0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x41, 0x44, 0x44, 0x4d, 0x41, 0x50, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x4d, 0x41,
	0x50, 0x4e, 0x50, 0x43, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x4d, 0x41, 0x50, 0x54, 0x52, 0x41, 0x50, 0x10, 0x05, 0x12,
	0x16, 0x0a, 0x12, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x4d,
	0x41, 0x50, 0x41, 0x43, 0x54, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x50, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x08,
	0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x50, 0x43,
	0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x09, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x50, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x46, 0x46, 0x45,
	0x43, 0x54, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x50, 0x43, 0x10, 0x0c,
	0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x49, 0x4e,
	0x47, 0x45, 0x52, 0x42, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4e, 0x50, 0x43, 0x10, 0x0d, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4f, 0x5f, 0x43, 0x49,
	0x54, 0x59, 0x47, 0x41, 0x54, 0x45, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x50, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x4e, 0x50, 0x43, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x10,
	0x11, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x42,
	0x4a, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x12, 0x12, 0x19,
	0x0a, 0x15, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x4d, 0x41,
	0x50, 0x4f, 0x42, 0x4a, 0x4e, 0x50, 0x43, 0x10, 0x13, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x50,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x42, 0x41, 0x4e, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x4e, 0x50, 0x43, 0x10, 0x15, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x4e, 0x50, 0x43, 0x10, 0x16, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x50,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x4d, 0x41, 0x50, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x17, 0x12, 0x1c, 0x0a, 0x18,
	0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x4d, 0x41,
	0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x18, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41,
	0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x4d, 0x42, 0x4f, 0x53, 0x53,
	0x5f, 0x41, 0x46, 0x46, 0x49, 0x58, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x19, 0x12, 0x1e,
	0x0a, 0x1a, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x1a, 0x12, 0x1f,
	0x0a, 0x1b, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x1b, 0x12,
	0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x5f, 0x4f, 0x42, 0x4a, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43,
	0x10, 0x1c, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x1d,
	0x2a, 0x37, 0x0a, 0x09, 0x45, 0x47, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x47, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x10, 0x02, 0x2a, 0xb0, 0x01, 0x0a, 0x08, 0x45, 0x41,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x41, 0x43, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x41, 0x43, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x52, 0x49, 0x46, 0x59, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x41, 0x43, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x41, 0x43, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x53,
	0x49, 0x43, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x41, 0x43, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x41, 0x43,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x41, 0x43, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x50, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x41,
	0x43, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x07, 0x2a, 0x3e, 0x0a, 0x0c,
	0x45, 0x4e, 0x70, 0x63, 0x54, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x4e, 0x50, 0x43, 0x54, 0x45, 0x58, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41,
	0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x50, 0x43, 0x54, 0x45, 0x58, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x10, 0x02, 0x2a, 0x95, 0x01, 0x0a,
	0x0f, 0x45, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x4d, 0x41, 0x50, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x43, 0x4c,
	0x4f, 0x4e, 0x45, 0x4d, 0x41, 0x50, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x52, 0x45,
	0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x4d, 0x41, 0x50,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x4d, 0x41, 0x50, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x56, 0x45, 0x52, 0x59, 0x42, 0x55, 0x53, 0x59, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x4d, 0x41, 0x50, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d,
	0x41, 0x58, 0x10, 0x04,
}

var (
	file_SceneMap_proto_rawDescOnce sync.Once
	file_SceneMap_proto_rawDescData = file_SceneMap_proto_rawDesc
)

func file_SceneMap_proto_rawDescGZIP() []byte {
	file_SceneMap_proto_rawDescOnce.Do(func() {
		file_SceneMap_proto_rawDescData = protoimpl.X.CompressGZIP(file_SceneMap_proto_rawDescData)
	})
	return file_SceneMap_proto_rawDescData
}

var file_SceneMap_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_SceneMap_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_SceneMap_proto_goTypes = []interface{}{
	(MapParam)(0),                     // 0: Cmd.MapParam
	(EGiveType)(0),                    // 1: Cmd.EGiveType
	(EActType)(0),                     // 2: Cmd.EActType
	(ENpcTextType)(0),                 // 3: Cmd.ENpcTextType
	(ECloneMapStatus)(0),              // 4: Cmd.ECloneMapStatus
	(*MapItem)(nil),                   // 5: Cmd.MapItem
	(*AddMapItem)(nil),                // 6: Cmd.AddMapItem
	(*PickupItem)(nil),                // 7: Cmd.PickupItem
	(*CarrierInfo)(nil),               // 8: Cmd.CarrierInfo
	(*LineData)(nil),                  // 9: Cmd.LineData
	(*HandNpcData)(nil),               // 10: Cmd.HandNpcData
	(*GingerBreadNpcData)(nil),        // 11: Cmd.GingerBreadNpcData
	(*MapUserGuild)(nil),              // 12: Cmd.MapUserGuild
	(*MapUser)(nil),                   // 13: Cmd.MapUser
	(*AddMapUser)(nil),                // 14: Cmd.AddMapUser
	(*MountInfo)(nil),                 // 15: Cmd.MountInfo
	(*MapNpc)(nil),                    // 16: Cmd.MapNpc
	(*AddMapNpc)(nil),                 // 17: Cmd.AddMapNpc
	(*MapTrap)(nil),                   // 18: Cmd.MapTrap
	(*AddMapTrap)(nil),                // 19: Cmd.AddMapTrap
	(*MapAct)(nil),                    // 20: Cmd.MapAct
	(*AddMapAct)(nil),                 // 21: Cmd.AddMapAct
	(*ExitPointState)(nil),            // 22: Cmd.ExitPointState
	(*MapCmdEnd)(nil),                 // 23: Cmd.MapCmdEnd
	(*NpcSearchRangeCmd)(nil),         // 24: Cmd.NpcSearchRangeCmd
	(*UserHandsCmd)(nil),              // 25: Cmd.UserHandsCmd
	(*SpEffectCmd)(nil),               // 26: Cmd.SpEffectCmd
	(*UserHandNpcCmd)(nil),            // 27: Cmd.UserHandNpcCmd
	(*GingerBreadNpcCmd)(nil),         // 28: Cmd.GingerBreadNpcCmd
	(*GoCityGateMapCmd)(nil),          // 29: Cmd.GoCityGateMapCmd
	(*UserSecretQueryMapCmd)(nil),     // 30: Cmd.UserSecretQueryMapCmd
	(*UserSecretGetMapCmd)(nil),       // 31: Cmd.UserSecretGetMapCmd
	(*EditNpcTextMapCmd)(nil),         // 32: Cmd.EditNpcTextMapCmd
	(*ObjStateSyncMapCmd)(nil),        // 33: Cmd.ObjStateSyncMapCmd
	(*AddMapObjNpc)(nil),              // 34: Cmd.AddMapObjNpc
	(*TeamFollowBanListCmd)(nil),      // 35: Cmd.TeamFollowBanListCmd
	(*ChantSkillInfo)(nil),            // 36: Cmd.ChantSkillInfo
	(*FuncBuildNpcData)(nil),          // 37: Cmd.FuncBuildNpcData
	(*FuncBuildNpcSyncCmd)(nil),       // 38: Cmd.FuncBuildNpcSyncCmd
	(*FuncBuildNpcUpdateCmd)(nil),     // 39: Cmd.FuncBuildNpcUpdateCmd
	(*CloneMapStatus)(nil),            // 40: Cmd.CloneMapStatus
	(*QueryCloneMapStatusMapCmd)(nil), // 41: Cmd.QueryCloneMapStatusMapCmd
	(*ChangeCloneMapCmd)(nil),         // 42: Cmd.ChangeCloneMapCmd
	(*StormBossAffixQueryCmd)(nil),    // 43: Cmd.StormBossAffixQueryCmd
	(*BuffRewardData)(nil),            // 44: Cmd.BuffRewardData
	(*BuffRewardQueryCmd)(nil),        // 45: Cmd.BuffRewardQueryCmd
	(*BuffRewardSelectCmd)(nil),       // 46: Cmd.BuffRewardSelectCmd
	(*ObjState)(nil),                  // 47: Cmd.ObjState
	(*MultiObjStateSyncMapCmd)(nil),   // 48: Cmd.MultiObjStateSyncMapCmd
	(*MapZone)(nil),                   // 49: Cmd.MapZone
	(*UpdateZoneMapCmd)(nil),          // 50: Cmd.UpdateZoneMapCmd
	(*ScenePos)(nil),                  // 51: Cmd.ScenePos
	(Command)(0),                      // 52: Cmd.Command
	(EGender)(0),                      // 53: Cmd.EGender
	(*UserAttr)(nil),                  // 54: Cmd.UserAttr
	(*UserData)(nil),                  // 55: Cmd.UserData
	(*BufferData)(nil),                // 56: Cmd.BufferData
	(*ChatRoomSummary)(nil),           // 57: Cmd.ChatRoomSummary
	(*SpEffectData)(nil),              // 58: Cmd.SpEffectData
	(*CookStateMsg)(nil),              // 59: Cmd.CookStateMsg
	(*BoothInfo)(nil),                 // 60: Cmd.BoothInfo
	(*PhaseData)(nil),                 // 61: Cmd.PhaseData
}
var file_SceneMap_proto_depIdxs = []int32{
	51,  // 0: Cmd.MapItem.pos:type_name -> Cmd.ScenePos
	52,  // 1: Cmd.AddMapItem.cmd:type_name -> Cmd.Command
	0,   // 2: Cmd.AddMapItem.param:type_name -> Cmd.MapParam
	5,   // 3: Cmd.AddMapItem.items:type_name -> Cmd.MapItem
	52,  // 4: Cmd.PickupItem.cmd:type_name -> Cmd.Command
	0,   // 5: Cmd.PickupItem.param:type_name -> Cmd.MapParam
	1,   // 6: Cmd.GingerBreadNpcData.type:type_name -> Cmd.EGiveType
	53,  // 7: Cmd.MapUser.gender:type_name -> Cmd.EGender
	51,  // 8: Cmd.MapUser.pos:type_name -> Cmd.ScenePos
	51,  // 9: Cmd.MapUser.dest:type_name -> Cmd.ScenePos
	54,  // 10: Cmd.MapUser.attrs:type_name -> Cmd.UserAttr
	55,  // 11: Cmd.MapUser.datas:type_name -> Cmd.UserData
	56,  // 12: Cmd.MapUser.buffs:type_name -> Cmd.BufferData
	8,   // 13: Cmd.MapUser.carrier:type_name -> Cmd.CarrierInfo
	57,  // 14: Cmd.MapUser.chatroom:type_name -> Cmd.ChatRoomSummary
	58,  // 15: Cmd.MapUser.speffectdata:type_name -> Cmd.SpEffectData
	10,  // 16: Cmd.MapUser.handnpc:type_name -> Cmd.HandNpcData
	11,  // 17: Cmd.MapUser.givenpcdatas:type_name -> Cmd.GingerBreadNpcData
	59,  // 18: Cmd.MapUser.cookstate:type_name -> Cmd.CookStateMsg
	60,  // 19: Cmd.MapUser.info:type_name -> Cmd.BoothInfo
	36,  // 20: Cmd.MapUser.chantskill:type_name -> Cmd.ChantSkillInfo
	12,  // 21: Cmd.MapUser.mercenary:type_name -> Cmd.MapUserGuild
	52,  // 22: Cmd.AddMapUser.cmd:type_name -> Cmd.Command
	0,   // 23: Cmd.AddMapUser.param:type_name -> Cmd.MapParam
	13,  // 24: Cmd.AddMapUser.users:type_name -> Cmd.MapUser
	51,  // 25: Cmd.MapNpc.pos:type_name -> Cmd.ScenePos
	51,  // 26: Cmd.MapNpc.dest:type_name -> Cmd.ScenePos
	55,  // 27: Cmd.MapNpc.datas:type_name -> Cmd.UserData
	54,  // 28: Cmd.MapNpc.attrs:type_name -> Cmd.UserAttr
	56,  // 29: Cmd.MapNpc.buffs:type_name -> Cmd.BufferData
	58,  // 30: Cmd.MapNpc.speffectdata:type_name -> Cmd.SpEffectData
	15,  // 31: Cmd.MapNpc.mounts:type_name -> Cmd.MountInfo
	8,   // 32: Cmd.MapNpc.carrier:type_name -> Cmd.CarrierInfo
	36,  // 33: Cmd.MapNpc.chantskill:type_name -> Cmd.ChantSkillInfo
	52,  // 34: Cmd.AddMapNpc.cmd:type_name -> Cmd.Command
	0,   // 35: Cmd.AddMapNpc.param:type_name -> Cmd.MapParam
	16,  // 36: Cmd.AddMapNpc.npcs:type_name -> Cmd.MapNpc
	51,  // 37: Cmd.MapTrap.pos:type_name -> Cmd.ScenePos
	52,  // 38: Cmd.AddMapTrap.cmd:type_name -> Cmd.Command
	0,   // 39: Cmd.AddMapTrap.param:type_name -> Cmd.MapParam
	18,  // 40: Cmd.AddMapTrap.traps:type_name -> Cmd.MapTrap
	2,   // 41: Cmd.MapAct.type:type_name -> Cmd.EActType
	51,  // 42: Cmd.MapAct.pos:type_name -> Cmd.ScenePos
	52,  // 43: Cmd.AddMapAct.cmd:type_name -> Cmd.Command
	0,   // 44: Cmd.AddMapAct.param:type_name -> Cmd.MapParam
	20,  // 45: Cmd.AddMapAct.acts:type_name -> Cmd.MapAct
	52,  // 46: Cmd.ExitPointState.cmd:type_name -> Cmd.Command
	0,   // 47: Cmd.ExitPointState.param:type_name -> Cmd.MapParam
	52,  // 48: Cmd.MapCmdEnd.cmd:type_name -> Cmd.Command
	0,   // 49: Cmd.MapCmdEnd.param:type_name -> Cmd.MapParam
	52,  // 50: Cmd.NpcSearchRangeCmd.cmd:type_name -> Cmd.Command
	0,   // 51: Cmd.NpcSearchRangeCmd.param:type_name -> Cmd.MapParam
	52,  // 52: Cmd.UserHandsCmd.cmd:type_name -> Cmd.Command
	0,   // 53: Cmd.UserHandsCmd.param:type_name -> Cmd.MapParam
	52,  // 54: Cmd.SpEffectCmd.cmd:type_name -> Cmd.Command
	0,   // 55: Cmd.SpEffectCmd.param:type_name -> Cmd.MapParam
	58,  // 56: Cmd.SpEffectCmd.data:type_name -> Cmd.SpEffectData
	52,  // 57: Cmd.UserHandNpcCmd.cmd:type_name -> Cmd.Command
	0,   // 58: Cmd.UserHandNpcCmd.param:type_name -> Cmd.MapParam
	10,  // 59: Cmd.UserHandNpcCmd.data:type_name -> Cmd.HandNpcData
	52,  // 60: Cmd.GingerBreadNpcCmd.cmd:type_name -> Cmd.Command
	0,   // 61: Cmd.GingerBreadNpcCmd.param:type_name -> Cmd.MapParam
	11,  // 62: Cmd.GingerBreadNpcCmd.data:type_name -> Cmd.GingerBreadNpcData
	51,  // 63: Cmd.GingerBreadNpcCmd.bornpos:type_name -> Cmd.ScenePos
	52,  // 64: Cmd.GoCityGateMapCmd.cmd:type_name -> Cmd.Command
	0,   // 65: Cmd.GoCityGateMapCmd.param:type_name -> Cmd.MapParam
	52,  // 66: Cmd.UserSecretQueryMapCmd.cmd:type_name -> Cmd.Command
	0,   // 67: Cmd.UserSecretQueryMapCmd.param:type_name -> Cmd.MapParam
	52,  // 68: Cmd.UserSecretGetMapCmd.cmd:type_name -> Cmd.Command
	0,   // 69: Cmd.UserSecretGetMapCmd.param:type_name -> Cmd.MapParam
	52,  // 70: Cmd.EditNpcTextMapCmd.cmd:type_name -> Cmd.Command
	0,   // 71: Cmd.EditNpcTextMapCmd.param:type_name -> Cmd.MapParam
	3,   // 72: Cmd.EditNpcTextMapCmd.etype:type_name -> Cmd.ENpcTextType
	52,  // 73: Cmd.ObjStateSyncMapCmd.cmd:type_name -> Cmd.Command
	0,   // 74: Cmd.ObjStateSyncMapCmd.param:type_name -> Cmd.MapParam
	52,  // 75: Cmd.AddMapObjNpc.cmd:type_name -> Cmd.Command
	0,   // 76: Cmd.AddMapObjNpc.param:type_name -> Cmd.MapParam
	16,  // 77: Cmd.AddMapObjNpc.npcs:type_name -> Cmd.MapNpc
	52,  // 78: Cmd.TeamFollowBanListCmd.cmd:type_name -> Cmd.Command
	0,   // 79: Cmd.TeamFollowBanListCmd.param:type_name -> Cmd.MapParam
	61,  // 80: Cmd.ChantSkillInfo.data:type_name -> Cmd.PhaseData
	52,  // 81: Cmd.FuncBuildNpcSyncCmd.cmd:type_name -> Cmd.Command
	0,   // 82: Cmd.FuncBuildNpcSyncCmd.param:type_name -> Cmd.MapParam
	37,  // 83: Cmd.FuncBuildNpcSyncCmd.data:type_name -> Cmd.FuncBuildNpcData
	52,  // 84: Cmd.FuncBuildNpcUpdateCmd.cmd:type_name -> Cmd.Command
	0,   // 85: Cmd.FuncBuildNpcUpdateCmd.param:type_name -> Cmd.MapParam
	37,  // 86: Cmd.FuncBuildNpcUpdateCmd.data:type_name -> Cmd.FuncBuildNpcData
	4,   // 87: Cmd.CloneMapStatus.status:type_name -> Cmd.ECloneMapStatus
	52,  // 88: Cmd.QueryCloneMapStatusMapCmd.cmd:type_name -> Cmd.Command
	0,   // 89: Cmd.QueryCloneMapStatusMapCmd.param:type_name -> Cmd.MapParam
	40,  // 90: Cmd.QueryCloneMapStatusMapCmd.status:type_name -> Cmd.CloneMapStatus
	52,  // 91: Cmd.ChangeCloneMapCmd.cmd:type_name -> Cmd.Command
	0,   // 92: Cmd.ChangeCloneMapCmd.param:type_name -> Cmd.MapParam
	52,  // 93: Cmd.StormBossAffixQueryCmd.cmd:type_name -> Cmd.Command
	0,   // 94: Cmd.StormBossAffixQueryCmd.param:type_name -> Cmd.MapParam
	52,  // 95: Cmd.BuffRewardQueryCmd.cmd:type_name -> Cmd.Command
	0,   // 96: Cmd.BuffRewardQueryCmd.param:type_name -> Cmd.MapParam
	44,  // 97: Cmd.BuffRewardQueryCmd.datas:type_name -> Cmd.BuffRewardData
	52,  // 98: Cmd.BuffRewardSelectCmd.cmd:type_name -> Cmd.Command
	0,   // 99: Cmd.BuffRewardSelectCmd.param:type_name -> Cmd.MapParam
	52,  // 100: Cmd.MultiObjStateSyncMapCmd.cmd:type_name -> Cmd.Command
	0,   // 101: Cmd.MultiObjStateSyncMapCmd.param:type_name -> Cmd.MapParam
	47,  // 102: Cmd.MultiObjStateSyncMapCmd.obj_states:type_name -> Cmd.ObjState
	52,  // 103: Cmd.UpdateZoneMapCmd.cmd:type_name -> Cmd.Command
	0,   // 104: Cmd.UpdateZoneMapCmd.param:type_name -> Cmd.MapParam
	49,  // 105: Cmd.UpdateZoneMapCmd.zones:type_name -> Cmd.MapZone
	106, // [106:106] is the sub-list for method output_type
	106, // [106:106] is the sub-list for method input_type
	106, // [106:106] is the sub-list for extension type_name
	106, // [106:106] is the sub-list for extension extendee
	0,   // [0:106] is the sub-list for field type_name
}

func init() { file_SceneMap_proto_init() }
func file_SceneMap_proto_init() {
	if File_SceneMap_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	file_SceneUser_proto_init()
	file_SceneUser2_proto_init()
	file_SceneChatRoom_proto_init()
	file_SceneFood_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SceneMap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMapItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarrierInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandNpcData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GingerBreadNpcData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUserGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMapUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapNpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMapNpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapTrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMapTrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapAct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMapAct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitPointState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapCmdEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpcSearchRangeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserHandsCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpEffectCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserHandNpcCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GingerBreadNpcCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoCityGateMapCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSecretQueryMapCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSecretGetMapCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditNpcTextMapCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjStateSyncMapCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMapObjNpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamFollowBanListCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChantSkillInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuncBuildNpcData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuncBuildNpcSyncCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuncBuildNpcUpdateCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneMapStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCloneMapStatusMapCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeCloneMapCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StormBossAffixQueryCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffRewardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffRewardQueryCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffRewardSelectCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiObjStateSyncMapCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneMap_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateZoneMapCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SceneMap_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SceneMap_proto_goTypes,
		DependencyIndexes: file_SceneMap_proto_depIdxs,
		EnumInfos:         file_SceneMap_proto_enumTypes,
		MessageInfos:      file_SceneMap_proto_msgTypes,
	}.Build()
	File_SceneMap_proto = out.File
	file_SceneMap_proto_rawDesc = nil
	file_SceneMap_proto_goTypes = nil
	file_SceneMap_proto_depIdxs = nil
}
