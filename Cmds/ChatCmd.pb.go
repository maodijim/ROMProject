// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: ChatCmd.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ChatParam int32

const (
	ChatParam_CHATPARAM_QUERYITEMDATA              ChatParam = 1
	ChatParam_CHATPARAM_PLAYEXPRESSION             ChatParam = 2
	ChatParam_CHATPARAM_QUERYUSERINFO              ChatParam = 3
	ChatParam_CHATPARAM_BARRAGE                    ChatParam = 4
	ChatParam_CHATPARAM_BARRAGEMSG                 ChatParam = 5
	ChatParam_CHATPARAM_CHAT                       ChatParam = 6
	ChatParam_CHATPARAM_CHAT_RET                   ChatParam = 7
	ChatParam_CHATPARAM_QUERY_VOICE                ChatParam = 8
	ChatParam_CHATPARAM_GET_VOICEID                ChatParam = 10
	ChatParam_CHATPARAM_LOVE_LETTER                ChatParam = 11
	ChatParam_CHATPARAM_CHAT_SELF                  ChatParam = 12
	ChatParam_CHATPARAM_NPC_CHAT_NTF               ChatParam = 13
	ChatParam_CHATPARAM_QUERY_REALTIME_VOICE_ID    ChatParam = 14
	ChatParam_CHATPARAM_SYSTEM_BARRAGE             ChatParam = 15
	ChatParam_CHATPARAM_QUERY_USER_SHOW_INFO       ChatParam = 16
	ChatParam_CHATPARAM_FAVORITE_EXPRESSION_QUERY  ChatParam = 17
	ChatParam_CHATPARAM_FAVORITE_EXPRESSION_UPDATE ChatParam = 18
	ChatParam_CHATPARAM_EXPRESSION                 ChatParam = 19
	ChatParam_CHATPARAM_QUERY_GEM                  ChatParam = 20
	ChatParam_CHATPARAM_FACESHOW                   ChatParam = 21
	ChatParam_CHATPARAM_CLIENTLOG                  ChatParam = 22
	ChatParam_CHATPARAM_SEND_RED_PACKET_CMD        ChatParam = 23
	ChatParam_CHATPARAM_RECEIVE_RED_PACKET_CMD     ChatParam = 24
	ChatParam_CHATPARAM_INIT_RED_PACKET_CMD        ChatParam = 25
	ChatParam_CHATPARAM_SEND_RED_PACKET_RET        ChatParam = 26
	ChatParam_CHATPARAM_RECEIVE_RED_PACKET_RET     ChatParam = 27
)

// Enum value maps for ChatParam.
var (
	ChatParam_name = map[int32]string{
		1:  "CHATPARAM_QUERYITEMDATA",
		2:  "CHATPARAM_PLAYEXPRESSION",
		3:  "CHATPARAM_QUERYUSERINFO",
		4:  "CHATPARAM_BARRAGE",
		5:  "CHATPARAM_BARRAGEMSG",
		6:  "CHATPARAM_CHAT",
		7:  "CHATPARAM_CHAT_RET",
		8:  "CHATPARAM_QUERY_VOICE",
		10: "CHATPARAM_GET_VOICEID",
		11: "CHATPARAM_LOVE_LETTER",
		12: "CHATPARAM_CHAT_SELF",
		13: "CHATPARAM_NPC_CHAT_NTF",
		14: "CHATPARAM_QUERY_REALTIME_VOICE_ID",
		15: "CHATPARAM_SYSTEM_BARRAGE",
		16: "CHATPARAM_QUERY_USER_SHOW_INFO",
		17: "CHATPARAM_FAVORITE_EXPRESSION_QUERY",
		18: "CHATPARAM_FAVORITE_EXPRESSION_UPDATE",
		19: "CHATPARAM_EXPRESSION",
		20: "CHATPARAM_QUERY_GEM",
		21: "CHATPARAM_FACESHOW",
		22: "CHATPARAM_CLIENTLOG",
		23: "CHATPARAM_SEND_RED_PACKET_CMD",
		24: "CHATPARAM_RECEIVE_RED_PACKET_CMD",
		25: "CHATPARAM_INIT_RED_PACKET_CMD",
		26: "CHATPARAM_SEND_RED_PACKET_RET",
		27: "CHATPARAM_RECEIVE_RED_PACKET_RET",
	}
	ChatParam_value = map[string]int32{
		"CHATPARAM_QUERYITEMDATA":              1,
		"CHATPARAM_PLAYEXPRESSION":             2,
		"CHATPARAM_QUERYUSERINFO":              3,
		"CHATPARAM_BARRAGE":                    4,
		"CHATPARAM_BARRAGEMSG":                 5,
		"CHATPARAM_CHAT":                       6,
		"CHATPARAM_CHAT_RET":                   7,
		"CHATPARAM_QUERY_VOICE":                8,
		"CHATPARAM_GET_VOICEID":                10,
		"CHATPARAM_LOVE_LETTER":                11,
		"CHATPARAM_CHAT_SELF":                  12,
		"CHATPARAM_NPC_CHAT_NTF":               13,
		"CHATPARAM_QUERY_REALTIME_VOICE_ID":    14,
		"CHATPARAM_SYSTEM_BARRAGE":             15,
		"CHATPARAM_QUERY_USER_SHOW_INFO":       16,
		"CHATPARAM_FAVORITE_EXPRESSION_QUERY":  17,
		"CHATPARAM_FAVORITE_EXPRESSION_UPDATE": 18,
		"CHATPARAM_EXPRESSION":                 19,
		"CHATPARAM_QUERY_GEM":                  20,
		"CHATPARAM_FACESHOW":                   21,
		"CHATPARAM_CLIENTLOG":                  22,
		"CHATPARAM_SEND_RED_PACKET_CMD":        23,
		"CHATPARAM_RECEIVE_RED_PACKET_CMD":     24,
		"CHATPARAM_INIT_RED_PACKET_CMD":        25,
		"CHATPARAM_SEND_RED_PACKET_RET":        26,
		"CHATPARAM_RECEIVE_RED_PACKET_RET":     27,
	}
)

func (x ChatParam) Enum() *ChatParam {
	p := new(ChatParam)
	*p = x
	return p
}

func (x ChatParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatParam) Descriptor() protoreflect.EnumDescriptor {
	return file_ChatCmd_proto_enumTypes[0].Descriptor()
}

func (ChatParam) Type() protoreflect.EnumType {
	return &file_ChatCmd_proto_enumTypes[0]
}

func (x ChatParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChatParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChatParam(num)
	return nil
}

// Deprecated: Use ChatParam.Descriptor instead.
func (ChatParam) EnumDescriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{0}
}

type EOfflineMsg int32

const (
	EOfflineMsg_EOFFLINEMSG_MIN             EOfflineMsg = 0
	EOfflineMsg_EOFFLINEMSG_USER            EOfflineMsg = 1
	EOfflineMsg_EOFFLINEMSG_TRADE           EOfflineMsg = 2
	EOfflineMsg_EOFFLINEMSG_GM              EOfflineMsg = 3
	EOfflineMsg_EOFFLINEMSG_SYS             EOfflineMsg = 4
	EOfflineMsg_EOFFLINEMSG_SYS2            EOfflineMsg = 5
	EOfflineMsg_EOFFLINEMSG_ADD_RELATION    EOfflineMsg = 6
	EOfflineMsg_EOFFLINEMSG_REMOVE_RELATION EOfflineMsg = 7
	EOfflineMsg_EOFFLINEMSG_ADD_ITEM        EOfflineMsg = 8
	EOfflineMsg_EOFFLINEMSG_TUTOR_REWARD    EOfflineMsg = 9
	EOfflineMsg_EOFFLINEMSG_USER_ADD_ITEM   EOfflineMsg = 10
	EOfflineMsg_EOFFLINEMSG_WEDDING         EOfflineMsg = 11
	EOfflineMsg_EOFFLINEMSG_USER_QUOTA      EOfflineMsg = 12
	EOfflineMsg_EOFFLINEMSG_ACCGM           EOfflineMsg = 14
	EOfflineMsg_EOFFLINEMSG_USER_ROGUELIKE  EOfflineMsg = 15
	EOfflineMsg_EOFFLINEMSG_MAX             EOfflineMsg = 16
)

// Enum value maps for EOfflineMsg.
var (
	EOfflineMsg_name = map[int32]string{
		0:  "EOFFLINEMSG_MIN",
		1:  "EOFFLINEMSG_USER",
		2:  "EOFFLINEMSG_TRADE",
		3:  "EOFFLINEMSG_GM",
		4:  "EOFFLINEMSG_SYS",
		5:  "EOFFLINEMSG_SYS2",
		6:  "EOFFLINEMSG_ADD_RELATION",
		7:  "EOFFLINEMSG_REMOVE_RELATION",
		8:  "EOFFLINEMSG_ADD_ITEM",
		9:  "EOFFLINEMSG_TUTOR_REWARD",
		10: "EOFFLINEMSG_USER_ADD_ITEM",
		11: "EOFFLINEMSG_WEDDING",
		12: "EOFFLINEMSG_USER_QUOTA",
		14: "EOFFLINEMSG_ACCGM",
		15: "EOFFLINEMSG_USER_ROGUELIKE",
		16: "EOFFLINEMSG_MAX",
	}
	EOfflineMsg_value = map[string]int32{
		"EOFFLINEMSG_MIN":             0,
		"EOFFLINEMSG_USER":            1,
		"EOFFLINEMSG_TRADE":           2,
		"EOFFLINEMSG_GM":              3,
		"EOFFLINEMSG_SYS":             4,
		"EOFFLINEMSG_SYS2":            5,
		"EOFFLINEMSG_ADD_RELATION":    6,
		"EOFFLINEMSG_REMOVE_RELATION": 7,
		"EOFFLINEMSG_ADD_ITEM":        8,
		"EOFFLINEMSG_TUTOR_REWARD":    9,
		"EOFFLINEMSG_USER_ADD_ITEM":   10,
		"EOFFLINEMSG_WEDDING":         11,
		"EOFFLINEMSG_USER_QUOTA":      12,
		"EOFFLINEMSG_ACCGM":           14,
		"EOFFLINEMSG_USER_ROGUELIKE":  15,
		"EOFFLINEMSG_MAX":             16,
	}
)

func (x EOfflineMsg) Enum() *EOfflineMsg {
	p := new(EOfflineMsg)
	*p = x
	return p
}

func (x EOfflineMsg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOfflineMsg) Descriptor() protoreflect.EnumDescriptor {
	return file_ChatCmd_proto_enumTypes[1].Descriptor()
}

func (EOfflineMsg) Type() protoreflect.EnumType {
	return &file_ChatCmd_proto_enumTypes[1]
}

func (x EOfflineMsg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EOfflineMsg) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EOfflineMsg(num)
	return nil
}

// Deprecated: Use EOfflineMsg.Descriptor instead.
func (EOfflineMsg) EnumDescriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{1}
}

type EUserAddItemType int32

const (
	EUserAddItemType_EUSERADDITEMTYPE_MIN          EUserAddItemType = 0
	EUserAddItemType_EUSERADDITEMTYPE_GUILD_DONATE EUserAddItemType = 1
)

// Enum value maps for EUserAddItemType.
var (
	EUserAddItemType_name = map[int32]string{
		0: "EUSERADDITEMTYPE_MIN",
		1: "EUSERADDITEMTYPE_GUILD_DONATE",
	}
	EUserAddItemType_value = map[string]int32{
		"EUSERADDITEMTYPE_MIN":          0,
		"EUSERADDITEMTYPE_GUILD_DONATE": 1,
	}
)

func (x EUserAddItemType) Enum() *EUserAddItemType {
	p := new(EUserAddItemType)
	*p = x
	return p
}

func (x EUserAddItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUserAddItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_ChatCmd_proto_enumTypes[2].Descriptor()
}

func (EUserAddItemType) Type() protoreflect.EnumType {
	return &file_ChatCmd_proto_enumTypes[2]
}

func (x EUserAddItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUserAddItemType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUserAddItemType(num)
	return nil
}

// Deprecated: Use EUserAddItemType.Descriptor instead.
func (EUserAddItemType) EnumDescriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{2}
}

type EUserQuotaOper int32

const (
	EUserQuotaOper_EUSERQUOTAOPER_MIN        EUserQuotaOper = 0
	EUserQuotaOper_EUSERQUOTAOPER_UNLOCK     EUserQuotaOper = 1
	EUserQuotaOper_EUSERQUOTAOPER_UNLOCK_SUB EUserQuotaOper = 2
	EUserQuotaOper_EUSERQUOTAOPER_MAX        EUserQuotaOper = 3
)

// Enum value maps for EUserQuotaOper.
var (
	EUserQuotaOper_name = map[int32]string{
		0: "EUSERQUOTAOPER_MIN",
		1: "EUSERQUOTAOPER_UNLOCK",
		2: "EUSERQUOTAOPER_UNLOCK_SUB",
		3: "EUSERQUOTAOPER_MAX",
	}
	EUserQuotaOper_value = map[string]int32{
		"EUSERQUOTAOPER_MIN":        0,
		"EUSERQUOTAOPER_UNLOCK":     1,
		"EUSERQUOTAOPER_UNLOCK_SUB": 2,
		"EUSERQUOTAOPER_MAX":        3,
	}
)

func (x EUserQuotaOper) Enum() *EUserQuotaOper {
	p := new(EUserQuotaOper)
	*p = x
	return p
}

func (x EUserQuotaOper) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUserQuotaOper) Descriptor() protoreflect.EnumDescriptor {
	return file_ChatCmd_proto_enumTypes[3].Descriptor()
}

func (EUserQuotaOper) Type() protoreflect.EnumType {
	return &file_ChatCmd_proto_enumTypes[3]
}

func (x EUserQuotaOper) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUserQuotaOper) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUserQuotaOper(num)
	return nil
}

// Deprecated: Use EUserQuotaOper.Descriptor instead.
func (EUserQuotaOper) EnumDescriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{3}
}

type EUserInfoType int32

const (
	EUserInfoType_EUSERINFOTYPE_CHAT    EUserInfoType = 0
	EUserInfoType_EUSERINFOTYPE_WEDDING EUserInfoType = 1
)

// Enum value maps for EUserInfoType.
var (
	EUserInfoType_name = map[int32]string{
		0: "EUSERINFOTYPE_CHAT",
		1: "EUSERINFOTYPE_WEDDING",
	}
	EUserInfoType_value = map[string]int32{
		"EUSERINFOTYPE_CHAT":    0,
		"EUSERINFOTYPE_WEDDING": 1,
	}
)

func (x EUserInfoType) Enum() *EUserInfoType {
	p := new(EUserInfoType)
	*p = x
	return p
}

func (x EUserInfoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUserInfoType) Descriptor() protoreflect.EnumDescriptor {
	return file_ChatCmd_proto_enumTypes[4].Descriptor()
}

func (EUserInfoType) Type() protoreflect.EnumType {
	return &file_ChatCmd_proto_enumTypes[4]
}

func (x EUserInfoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUserInfoType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUserInfoType(num)
	return nil
}

// Deprecated: Use EUserInfoType.Descriptor instead.
func (EUserInfoType) EnumDescriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{4}
}

type EBarrageOpt int32

const (
	EBarrageOpt_EBARRAGE_OPEN  EBarrageOpt = 1
	EBarrageOpt_EBARRAGE_CLOSE EBarrageOpt = 2
)

// Enum value maps for EBarrageOpt.
var (
	EBarrageOpt_name = map[int32]string{
		1: "EBARRAGE_OPEN",
		2: "EBARRAGE_CLOSE",
	}
	EBarrageOpt_value = map[string]int32{
		"EBARRAGE_OPEN":  1,
		"EBARRAGE_CLOSE": 2,
	}
)

func (x EBarrageOpt) Enum() *EBarrageOpt {
	p := new(EBarrageOpt)
	*p = x
	return p
}

func (x EBarrageOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBarrageOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_ChatCmd_proto_enumTypes[5].Descriptor()
}

func (EBarrageOpt) Type() protoreflect.EnumType {
	return &file_ChatCmd_proto_enumTypes[5]
}

func (x EBarrageOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBarrageOpt) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBarrageOpt(num)
	return nil
}

// Deprecated: Use EBarrageOpt.Descriptor instead.
func (EBarrageOpt) EnumDescriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{5}
}

type EGameChatChannel int32

const (
	EGameChatChannel_ECHAT_CHANNEL_MIN             EGameChatChannel = 0
	EGameChatChannel_ECHAT_CHANNEL_ROUND           EGameChatChannel = 1
	EGameChatChannel_ECHAT_CHANNEL_TEAM            EGameChatChannel = 2
	EGameChatChannel_ECHAT_CHANNEL_GUILD           EGameChatChannel = 3
	EGameChatChannel_ECHAT_CHANNEL_FRIEND          EGameChatChannel = 4
	EGameChatChannel_ECHAT_CHANNEL_WORLD           EGameChatChannel = 5
	EGameChatChannel_ECHAT_CHANNEL_MAP             EGameChatChannel = 6
	EGameChatChannel_ECHAT_CHANNEL_SYS             EGameChatChannel = 7
	EGameChatChannel_ECHAT_CHANNEL_ROOM            EGameChatChannel = 8
	EGameChatChannel_ECHAT_CHANNEL_BARRAGE         EGameChatChannel = 9
	EGameChatChannel_ECHAT_CHANNEL_CHAT            EGameChatChannel = 10
	EGameChatChannel_ECHAT_CHANNEL_USERRETURN_ROOM EGameChatChannel = 11
	EGameChatChannel_ECHAT_CHANNEL_MAX             EGameChatChannel = 12
)

// Enum value maps for EGameChatChannel.
var (
	EGameChatChannel_name = map[int32]string{
		0:  "ECHAT_CHANNEL_MIN",
		1:  "ECHAT_CHANNEL_ROUND",
		2:  "ECHAT_CHANNEL_TEAM",
		3:  "ECHAT_CHANNEL_GUILD",
		4:  "ECHAT_CHANNEL_FRIEND",
		5:  "ECHAT_CHANNEL_WORLD",
		6:  "ECHAT_CHANNEL_MAP",
		7:  "ECHAT_CHANNEL_SYS",
		8:  "ECHAT_CHANNEL_ROOM",
		9:  "ECHAT_CHANNEL_BARRAGE",
		10: "ECHAT_CHANNEL_CHAT",
		11: "ECHAT_CHANNEL_USERRETURN_ROOM",
		12: "ECHAT_CHANNEL_MAX",
	}
	EGameChatChannel_value = map[string]int32{
		"ECHAT_CHANNEL_MIN":             0,
		"ECHAT_CHANNEL_ROUND":           1,
		"ECHAT_CHANNEL_TEAM":            2,
		"ECHAT_CHANNEL_GUILD":           3,
		"ECHAT_CHANNEL_FRIEND":          4,
		"ECHAT_CHANNEL_WORLD":           5,
		"ECHAT_CHANNEL_MAP":             6,
		"ECHAT_CHANNEL_SYS":             7,
		"ECHAT_CHANNEL_ROOM":            8,
		"ECHAT_CHANNEL_BARRAGE":         9,
		"ECHAT_CHANNEL_CHAT":            10,
		"ECHAT_CHANNEL_USERRETURN_ROOM": 11,
		"ECHAT_CHANNEL_MAX":             12,
	}
)

func (x EGameChatChannel) Enum() *EGameChatChannel {
	p := new(EGameChatChannel)
	*p = x
	return p
}

func (x EGameChatChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGameChatChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_ChatCmd_proto_enumTypes[6].Descriptor()
}

func (EGameChatChannel) Type() protoreflect.EnumType {
	return &file_ChatCmd_proto_enumTypes[6]
}

func (x EGameChatChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGameChatChannel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGameChatChannel(num)
	return nil
}

// Deprecated: Use EGameChatChannel.Descriptor instead.
func (EGameChatChannel) EnumDescriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{6}
}

type ESystemBarrageType int32

const (
	ESystemBarrageType_ESYSTEMBARRAGE_NORMAL ESystemBarrageType = 1
)

// Enum value maps for ESystemBarrageType.
var (
	ESystemBarrageType_name = map[int32]string{
		1: "ESYSTEMBARRAGE_NORMAL",
	}
	ESystemBarrageType_value = map[string]int32{
		"ESYSTEMBARRAGE_NORMAL": 1,
	}
)

func (x ESystemBarrageType) Enum() *ESystemBarrageType {
	p := new(ESystemBarrageType)
	*p = x
	return p
}

func (x ESystemBarrageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemBarrageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ChatCmd_proto_enumTypes[7].Descriptor()
}

func (ESystemBarrageType) Type() protoreflect.EnumType {
	return &file_ChatCmd_proto_enumTypes[7]
}

func (x ESystemBarrageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemBarrageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemBarrageType(num)
	return nil
}

// Deprecated: Use ESystemBarrageType.Descriptor instead.
func (ESystemBarrageType) EnumDescriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{7}
}

type EFavoriteExpression int32

const (
	EFavoriteExpression_EFAVORITEEXPRESSION_MIN    EFavoriteExpression = 0
	EFavoriteExpression_EFAVORITEEXPRESSION_ACTION EFavoriteExpression = 1
	EFavoriteExpression_EFAVORITEEXPRESSION_EMOJI  EFavoriteExpression = 2
	EFavoriteExpression_EFAVORITEEXPRESSION_MAX    EFavoriteExpression = 3
)

// Enum value maps for EFavoriteExpression.
var (
	EFavoriteExpression_name = map[int32]string{
		0: "EFAVORITEEXPRESSION_MIN",
		1: "EFAVORITEEXPRESSION_ACTION",
		2: "EFAVORITEEXPRESSION_EMOJI",
		3: "EFAVORITEEXPRESSION_MAX",
	}
	EFavoriteExpression_value = map[string]int32{
		"EFAVORITEEXPRESSION_MIN":    0,
		"EFAVORITEEXPRESSION_ACTION": 1,
		"EFAVORITEEXPRESSION_EMOJI":  2,
		"EFAVORITEEXPRESSION_MAX":    3,
	}
)

func (x EFavoriteExpression) Enum() *EFavoriteExpression {
	p := new(EFavoriteExpression)
	*p = x
	return p
}

func (x EFavoriteExpression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFavoriteExpression) Descriptor() protoreflect.EnumDescriptor {
	return file_ChatCmd_proto_enumTypes[8].Descriptor()
}

func (EFavoriteExpression) Type() protoreflect.EnumType {
	return &file_ChatCmd_proto_enumTypes[8]
}

func (x EFavoriteExpression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFavoriteExpression) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFavoriteExpression(num)
	return nil
}

// Deprecated: Use EFavoriteExpression.Descriptor instead.
func (EFavoriteExpression) EnumDescriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{8}
}

type ERedPacketType int32

const (
	ERedPacketType_EREDPACKETTYPE_MIN  ERedPacketType = 0
	ERedPacketType_EREDPACKETTYPE_SYS  ERedPacketType = 1
	ERedPacketType_EREDPACKETTYPE_USER ERedPacketType = 2
	ERedPacketType_EREDPACKETTYPE_MAX  ERedPacketType = 3
)

// Enum value maps for ERedPacketType.
var (
	ERedPacketType_name = map[int32]string{
		0: "EREDPACKETTYPE_MIN",
		1: "EREDPACKETTYPE_SYS",
		2: "EREDPACKETTYPE_USER",
		3: "EREDPACKETTYPE_MAX",
	}
	ERedPacketType_value = map[string]int32{
		"EREDPACKETTYPE_MIN":  0,
		"EREDPACKETTYPE_SYS":  1,
		"EREDPACKETTYPE_USER": 2,
		"EREDPACKETTYPE_MAX":  3,
	}
)

func (x ERedPacketType) Enum() *ERedPacketType {
	p := new(ERedPacketType)
	*p = x
	return p
}

func (x ERedPacketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERedPacketType) Descriptor() protoreflect.EnumDescriptor {
	return file_ChatCmd_proto_enumTypes[9].Descriptor()
}

func (ERedPacketType) Type() protoreflect.EnumType {
	return &file_ChatCmd_proto_enumTypes[9]
}

func (x ERedPacketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERedPacketType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERedPacketType(num)
	return nil
}

// Deprecated: Use ERedPacketType.Descriptor instead.
func (ERedPacketType) EnumDescriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{9}
}

type OfflineMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targetid        *uint64              `protobuf:"varint,1,opt,name=targetid,def=0" json:"targetid,omitempty"`
	Senderid        *uint64              `protobuf:"varint,2,opt,name=senderid,def=0" json:"senderid,omitempty"`
	Time            *uint32              `protobuf:"varint,3,opt,name=time,def=0" json:"time,omitempty"`
	Type            *EOfflineMsg         `protobuf:"varint,4,opt,name=type,enum=Cmd.EOfflineMsg,def=0" json:"type,omitempty"`
	Sendername      *string              `protobuf:"bytes,5,opt,name=sendername" json:"sendername,omitempty"`
	Chat            *ChatRetCmd          `protobuf:"bytes,19,opt,name=chat" json:"chat,omitempty"`
	Expression      *ExpressionChatCmd   `protobuf:"bytes,27,opt,name=expression" json:"expression,omitempty"`
	Itemid          *uint32              `protobuf:"varint,11,opt,name=itemid,def=0" json:"itemid,omitempty"`
	Price           *uint64              `protobuf:"varint,12,opt,name=price,def=0" json:"price,omitempty"`
	Count           *uint32              `protobuf:"varint,13,opt,name=count,def=0" json:"count,omitempty"`
	Givemoney       *uint64              `protobuf:"varint,14,opt,name=givemoney,def=0" json:"givemoney,omitempty"`
	Moneytype       *EMoneyType          `protobuf:"varint,15,opt,name=moneytype,enum=Cmd.EMoneyType,def=0" json:"moneytype,omitempty"`
	Sysstr          *string              `protobuf:"bytes,20,opt,name=sysstr" json:"sysstr,omitempty"`
	Gmcmd           *string              `protobuf:"bytes,16,opt,name=gmcmd" json:"gmcmd,omitempty"`
	Id              *uint64              `protobuf:"varint,17,opt,name=id,def=0" json:"id,omitempty"`
	Msg             *string              `protobuf:"bytes,18,opt,name=msg" json:"msg,omitempty"`
	Accid           *uint64              `protobuf:"varint,29,opt,name=accid" json:"accid,omitempty"`
	Itemdata        *ItemData            `protobuf:"bytes,22,opt,name=itemdata" json:"itemdata,omitempty"`
	Syscmd          *SysMsg              `protobuf:"bytes,21,opt,name=syscmd" json:"syscmd,omitempty"`
	Tutorreward     *TutorReward         `protobuf:"bytes,23,opt,name=tutorreward" json:"tutorreward,omitempty"`
	Useradditem     *OffMsgUserAddItem   `protobuf:"bytes,24,opt,name=useradditem" json:"useradditem,omitempty"`
	Weddingmsg      *WeddingEventMsgCCmd `protobuf:"bytes,25,opt,name=weddingmsg" json:"weddingmsg,omitempty"`
	Quotadata       *OffMsgUserQuotaData `protobuf:"bytes,26,opt,name=quotadata" json:"quotadata,omitempty"`
	Rogueorigintime *uint32              `protobuf:"varint,28,opt,name=rogueorigintime,def=0" json:"rogueorigintime,omitempty"`
}

// Default values for OfflineMsg fields.
const (
	Default_OfflineMsg_Targetid        = uint64(0)
	Default_OfflineMsg_Senderid        = uint64(0)
	Default_OfflineMsg_Time            = uint32(0)
	Default_OfflineMsg_Type            = EOfflineMsg_EOFFLINEMSG_MIN
	Default_OfflineMsg_Itemid          = uint32(0)
	Default_OfflineMsg_Price           = uint64(0)
	Default_OfflineMsg_Count           = uint32(0)
	Default_OfflineMsg_Givemoney       = uint64(0)
	Default_OfflineMsg_Moneytype       = EMoneyType_EMONEYTYPE_MIN
	Default_OfflineMsg_Id              = uint64(0)
	Default_OfflineMsg_Rogueorigintime = uint32(0)
)

func (x *OfflineMsg) Reset() {
	*x = OfflineMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineMsg) ProtoMessage() {}

func (x *OfflineMsg) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineMsg.ProtoReflect.Descriptor instead.
func (*OfflineMsg) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{0}
}

func (x *OfflineMsg) GetTargetid() uint64 {
	if x != nil && x.Targetid != nil {
		return *x.Targetid
	}
	return Default_OfflineMsg_Targetid
}

func (x *OfflineMsg) GetSenderid() uint64 {
	if x != nil && x.Senderid != nil {
		return *x.Senderid
	}
	return Default_OfflineMsg_Senderid
}

func (x *OfflineMsg) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_OfflineMsg_Time
}

func (x *OfflineMsg) GetType() EOfflineMsg {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_OfflineMsg_Type
}

func (x *OfflineMsg) GetSendername() string {
	if x != nil && x.Sendername != nil {
		return *x.Sendername
	}
	return ""
}

func (x *OfflineMsg) GetChat() *ChatRetCmd {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *OfflineMsg) GetExpression() *ExpressionChatCmd {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *OfflineMsg) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_OfflineMsg_Itemid
}

func (x *OfflineMsg) GetPrice() uint64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return Default_OfflineMsg_Price
}

func (x *OfflineMsg) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_OfflineMsg_Count
}

func (x *OfflineMsg) GetGivemoney() uint64 {
	if x != nil && x.Givemoney != nil {
		return *x.Givemoney
	}
	return Default_OfflineMsg_Givemoney
}

func (x *OfflineMsg) GetMoneytype() EMoneyType {
	if x != nil && x.Moneytype != nil {
		return *x.Moneytype
	}
	return Default_OfflineMsg_Moneytype
}

func (x *OfflineMsg) GetSysstr() string {
	if x != nil && x.Sysstr != nil {
		return *x.Sysstr
	}
	return ""
}

func (x *OfflineMsg) GetGmcmd() string {
	if x != nil && x.Gmcmd != nil {
		return *x.Gmcmd
	}
	return ""
}

func (x *OfflineMsg) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_OfflineMsg_Id
}

func (x *OfflineMsg) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *OfflineMsg) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return 0
}

func (x *OfflineMsg) GetItemdata() *ItemData {
	if x != nil {
		return x.Itemdata
	}
	return nil
}

func (x *OfflineMsg) GetSyscmd() *SysMsg {
	if x != nil {
		return x.Syscmd
	}
	return nil
}

func (x *OfflineMsg) GetTutorreward() *TutorReward {
	if x != nil {
		return x.Tutorreward
	}
	return nil
}

func (x *OfflineMsg) GetUseradditem() *OffMsgUserAddItem {
	if x != nil {
		return x.Useradditem
	}
	return nil
}

func (x *OfflineMsg) GetWeddingmsg() *WeddingEventMsgCCmd {
	if x != nil {
		return x.Weddingmsg
	}
	return nil
}

func (x *OfflineMsg) GetQuotadata() *OffMsgUserQuotaData {
	if x != nil {
		return x.Quotadata
	}
	return nil
}

func (x *OfflineMsg) GetRogueorigintime() uint32 {
	if x != nil && x.Rogueorigintime != nil {
		return *x.Rogueorigintime
	}
	return Default_OfflineMsg_Rogueorigintime
}

type OffMsgUserAddItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *EUserAddItemType `protobuf:"varint,1,opt,name=type,enum=Cmd.EUserAddItemType,def=0" json:"type,omitempty"`
	Items []*ItemInfo       `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

// Default values for OffMsgUserAddItem fields.
const (
	Default_OffMsgUserAddItem_Type = EUserAddItemType_EUSERADDITEMTYPE_MIN
)

func (x *OffMsgUserAddItem) Reset() {
	*x = OffMsgUserAddItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffMsgUserAddItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffMsgUserAddItem) ProtoMessage() {}

func (x *OffMsgUserAddItem) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffMsgUserAddItem.ProtoReflect.Descriptor instead.
func (*OffMsgUserAddItem) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{1}
}

func (x *OffMsgUserAddItem) GetType() EUserAddItemType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_OffMsgUserAddItem_Type
}

func (x *OffMsgUserAddItem) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type OffMsgUserQuotaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quota *uint64         `protobuf:"varint,1,opt,name=quota,def=0" json:"quota,omitempty"`
	Oper  *EUserQuotaOper `protobuf:"varint,2,opt,name=oper,enum=Cmd.EUserQuotaOper,def=0" json:"oper,omitempty"`
	Type  *EQuotaType     `protobuf:"varint,3,opt,name=type,enum=Cmd.EQuotaType,def=12" json:"type,omitempty"`
}

// Default values for OffMsgUserQuotaData fields.
const (
	Default_OffMsgUserQuotaData_Quota = uint64(0)
	Default_OffMsgUserQuotaData_Oper  = EUserQuotaOper_EUSERQUOTAOPER_MIN
	Default_OffMsgUserQuotaData_Type  = EQuotaType_EQuotaType_U_Give_Trade
)

func (x *OffMsgUserQuotaData) Reset() {
	*x = OffMsgUserQuotaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffMsgUserQuotaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffMsgUserQuotaData) ProtoMessage() {}

func (x *OffMsgUserQuotaData) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffMsgUserQuotaData.ProtoReflect.Descriptor instead.
func (*OffMsgUserQuotaData) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{2}
}

func (x *OffMsgUserQuotaData) GetQuota() uint64 {
	if x != nil && x.Quota != nil {
		return *x.Quota
	}
	return Default_OffMsgUserQuotaData_Quota
}

func (x *OffMsgUserQuotaData) GetOper() EUserQuotaOper {
	if x != nil && x.Oper != nil {
		return *x.Oper
	}
	return Default_OffMsgUserQuotaData_Oper
}

func (x *OffMsgUserQuotaData) GetType() EQuotaType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_OffMsgUserQuotaData_Type
}

type QueryItemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param *ChatParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=1" json:"param,omitempty"`
	Guid  *string    `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
	Data  *ItemData  `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

// Default values for QueryItemData fields.
const (
	Default_QueryItemData_Cmd   = Command_CHAT_PROTOCMD
	Default_QueryItemData_Param = ChatParam_CHATPARAM_QUERYITEMDATA
)

func (x *QueryItemData) Reset() {
	*x = QueryItemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryItemData) ProtoMessage() {}

func (x *QueryItemData) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryItemData.ProtoReflect.Descriptor instead.
func (*QueryItemData) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{3}
}

func (x *QueryItemData) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryItemData_Cmd
}

func (x *QueryItemData) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryItemData_Param
}

func (x *QueryItemData) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *QueryItemData) GetData() *ItemData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PlayExpressionChatCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param        *ChatParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=2" json:"param,omitempty"`
	Charid       *uint64    `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Expressionid *uint32    `protobuf:"varint,4,opt,name=expressionid,def=0" json:"expressionid,omitempty"`
}

// Default values for PlayExpressionChatCmd fields.
const (
	Default_PlayExpressionChatCmd_Cmd          = Command_CHAT_PROTOCMD
	Default_PlayExpressionChatCmd_Param        = ChatParam_CHATPARAM_PLAYEXPRESSION
	Default_PlayExpressionChatCmd_Charid       = uint64(0)
	Default_PlayExpressionChatCmd_Expressionid = uint32(0)
)

func (x *PlayExpressionChatCmd) Reset() {
	*x = PlayExpressionChatCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayExpressionChatCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayExpressionChatCmd) ProtoMessage() {}

func (x *PlayExpressionChatCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayExpressionChatCmd.ProtoReflect.Descriptor instead.
func (*PlayExpressionChatCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{4}
}

func (x *PlayExpressionChatCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PlayExpressionChatCmd_Cmd
}

func (x *PlayExpressionChatCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PlayExpressionChatCmd_Param
}

func (x *PlayExpressionChatCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_PlayExpressionChatCmd_Charid
}

func (x *PlayExpressionChatCmd) GetExpressionid() uint32 {
	if x != nil && x.Expressionid != nil {
		return *x.Expressionid
	}
	return Default_PlayExpressionChatCmd_Expressionid
}

type QueryUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid        *uint64           `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Guildid       *uint64           `protobuf:"varint,2,opt,name=guildid,def=0" json:"guildid,omitempty"`
	Accid         *uint64           `protobuf:"varint,13,opt,name=accid" json:"accid,omitempty"`
	Name          *string           `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Guildname     *string           `protobuf:"bytes,4,opt,name=guildname" json:"guildname,omitempty"`
	Guildportrait *string           `protobuf:"bytes,5,opt,name=guildportrait" json:"guildportrait,omitempty"`
	Guildjob      *string           `protobuf:"bytes,6,opt,name=guildjob" json:"guildjob,omitempty"`
	Datas         []*UserData       `protobuf:"bytes,7,rep,name=datas" json:"datas,omitempty"`
	Attrs         []*UserAttr       `protobuf:"bytes,8,rep,name=attrs" json:"attrs,omitempty"`
	Equip         []*ItemData       `protobuf:"bytes,9,rep,name=equip" json:"equip,omitempty"`
	Fashion       []*ItemData       `protobuf:"bytes,12,rep,name=fashion" json:"fashion,omitempty"`
	Highrefine    []*HighRefineData `protobuf:"bytes,10,rep,name=highrefine" json:"highrefine,omitempty"`
	Partner       *string           `protobuf:"bytes,11,opt,name=partner" json:"partner,omitempty"`
}

// Default values for QueryUserInfo fields.
const (
	Default_QueryUserInfo_Charid  = uint64(0)
	Default_QueryUserInfo_Guildid = uint64(0)
)

func (x *QueryUserInfo) Reset() {
	*x = QueryUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserInfo) ProtoMessage() {}

func (x *QueryUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserInfo.ProtoReflect.Descriptor instead.
func (*QueryUserInfo) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{5}
}

func (x *QueryUserInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_QueryUserInfo_Charid
}

func (x *QueryUserInfo) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return Default_QueryUserInfo_Guildid
}

func (x *QueryUserInfo) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return 0
}

func (x *QueryUserInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *QueryUserInfo) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

func (x *QueryUserInfo) GetGuildportrait() string {
	if x != nil && x.Guildportrait != nil {
		return *x.Guildportrait
	}
	return ""
}

func (x *QueryUserInfo) GetGuildjob() string {
	if x != nil && x.Guildjob != nil {
		return *x.Guildjob
	}
	return ""
}

func (x *QueryUserInfo) GetDatas() []*UserData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *QueryUserInfo) GetAttrs() []*UserAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *QueryUserInfo) GetEquip() []*ItemData {
	if x != nil {
		return x.Equip
	}
	return nil
}

func (x *QueryUserInfo) GetFashion() []*ItemData {
	if x != nil {
		return x.Fashion
	}
	return nil
}

func (x *QueryUserInfo) GetHighrefine() []*HighRefineData {
	if x != nil {
		return x.Highrefine
	}
	return nil
}

func (x *QueryUserInfo) GetPartner() string {
	if x != nil && x.Partner != nil {
		return *x.Partner
	}
	return ""
}

type QueryUserInfoChatCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param  *ChatParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=3" json:"param,omitempty"`
	Charid *uint64        `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Msgid  *uint32        `protobuf:"varint,4,opt,name=msgid,def=0" json:"msgid,omitempty"`
	Type   *EUserInfoType `protobuf:"varint,6,opt,name=type,enum=Cmd.EUserInfoType,def=0" json:"type,omitempty"`
	Info   *QueryUserInfo `protobuf:"bytes,5,opt,name=info" json:"info,omitempty"`
}

// Default values for QueryUserInfoChatCmd fields.
const (
	Default_QueryUserInfoChatCmd_Cmd    = Command_CHAT_PROTOCMD
	Default_QueryUserInfoChatCmd_Param  = ChatParam_CHATPARAM_QUERYUSERINFO
	Default_QueryUserInfoChatCmd_Charid = uint64(0)
	Default_QueryUserInfoChatCmd_Msgid  = uint32(0)
	Default_QueryUserInfoChatCmd_Type   = EUserInfoType_EUSERINFOTYPE_CHAT
)

func (x *QueryUserInfoChatCmd) Reset() {
	*x = QueryUserInfoChatCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserInfoChatCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserInfoChatCmd) ProtoMessage() {}

func (x *QueryUserInfoChatCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserInfoChatCmd.ProtoReflect.Descriptor instead.
func (*QueryUserInfoChatCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{6}
}

func (x *QueryUserInfoChatCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryUserInfoChatCmd_Cmd
}

func (x *QueryUserInfoChatCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryUserInfoChatCmd_Param
}

func (x *QueryUserInfoChatCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_QueryUserInfoChatCmd_Charid
}

func (x *QueryUserInfoChatCmd) GetMsgid() uint32 {
	if x != nil && x.Msgid != nil {
		return *x.Msgid
	}
	return Default_QueryUserInfoChatCmd_Msgid
}

func (x *QueryUserInfoChatCmd) GetType() EUserInfoType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_QueryUserInfoChatCmd_Type
}

func (x *QueryUserInfoChatCmd) GetInfo() *QueryUserInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attrgems  []*ItemData `protobuf:"bytes,1,rep,name=attrgems" json:"attrgems,omitempty"`
	Skillgems []*ItemData `protobuf:"bytes,2,rep,name=skillgems" json:"skillgems,omitempty"`
}

func (x *GemInfo) Reset() {
	*x = GemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GemInfo) ProtoMessage() {}

func (x *GemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GemInfo.ProtoReflect.Descriptor instead.
func (*GemInfo) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{7}
}

func (x *GemInfo) GetAttrgems() []*ItemData {
	if x != nil {
		return x.Attrgems
	}
	return nil
}

func (x *GemInfo) GetSkillgems() []*ItemData {
	if x != nil {
		return x.Skillgems
	}
	return nil
}

type QueryUserGemChatCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param  *ChatParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=20" json:"param,omitempty"`
	Accid  *uint64    `protobuf:"varint,3,opt,name=accid" json:"accid,omitempty"`
	Charid *uint64    `protobuf:"varint,4,opt,name=charid" json:"charid,omitempty"`
	Info   *GemInfo   `protobuf:"bytes,5,opt,name=info" json:"info,omitempty"`
}

// Default values for QueryUserGemChatCmd fields.
const (
	Default_QueryUserGemChatCmd_Cmd   = Command_CHAT_PROTOCMD
	Default_QueryUserGemChatCmd_Param = ChatParam_CHATPARAM_QUERY_GEM
)

func (x *QueryUserGemChatCmd) Reset() {
	*x = QueryUserGemChatCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserGemChatCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserGemChatCmd) ProtoMessage() {}

func (x *QueryUserGemChatCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserGemChatCmd.ProtoReflect.Descriptor instead.
func (*QueryUserGemChatCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{8}
}

func (x *QueryUserGemChatCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryUserGemChatCmd_Cmd
}

func (x *QueryUserGemChatCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryUserGemChatCmd_Param
}

func (x *QueryUserGemChatCmd) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return 0
}

func (x *QueryUserGemChatCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *QueryUserGemChatCmd) GetInfo() *GemInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type BarrageChatCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param *ChatParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=4" json:"param,omitempty"`
	Opt   *EBarrageOpt `protobuf:"varint,3,opt,name=opt,enum=Cmd.EBarrageOpt,def=2" json:"opt,omitempty"`
}

// Default values for BarrageChatCmd fields.
const (
	Default_BarrageChatCmd_Cmd   = Command_CHAT_PROTOCMD
	Default_BarrageChatCmd_Param = ChatParam_CHATPARAM_BARRAGE
	Default_BarrageChatCmd_Opt   = EBarrageOpt_EBARRAGE_CLOSE
)

func (x *BarrageChatCmd) Reset() {
	*x = BarrageChatCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarrageChatCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarrageChatCmd) ProtoMessage() {}

func (x *BarrageChatCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarrageChatCmd.ProtoReflect.Descriptor instead.
func (*BarrageChatCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{9}
}

func (x *BarrageChatCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BarrageChatCmd_Cmd
}

func (x *BarrageChatCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BarrageChatCmd_Param
}

func (x *BarrageChatCmd) GetOpt() EBarrageOpt {
	if x != nil && x.Opt != nil {
		return *x.Opt
	}
	return Default_BarrageChatCmd_Opt
}

type ColorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R *uint32 `protobuf:"varint,1,opt,name=r,def=255" json:"r,omitempty"`
	G *uint32 `protobuf:"varint,2,opt,name=g,def=255" json:"g,omitempty"`
	B *uint32 `protobuf:"varint,3,opt,name=b,def=255" json:"b,omitempty"`
}

// Default values for ColorInfo fields.
const (
	Default_ColorInfo_R = uint32(255)
	Default_ColorInfo_G = uint32(255)
	Default_ColorInfo_B = uint32(255)
)

func (x *ColorInfo) Reset() {
	*x = ColorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorInfo) ProtoMessage() {}

func (x *ColorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorInfo.ProtoReflect.Descriptor instead.
func (*ColorInfo) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{10}
}

func (x *ColorInfo) GetR() uint32 {
	if x != nil && x.R != nil {
		return *x.R
	}
	return Default_ColorInfo_R
}

func (x *ColorInfo) GetG() uint32 {
	if x != nil && x.G != nil {
		return *x.G
	}
	return Default_ColorInfo_G
}

func (x *ColorInfo) GetB() uint32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return Default_ColorInfo_B
}

type BarrageMsgChatCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param       *ChatParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=5" json:"param,omitempty"`
	Str         *string    `protobuf:"bytes,3,opt,name=str" json:"str,omitempty"`
	Msgpos      *ScenePos  `protobuf:"bytes,4,opt,name=msgpos" json:"msgpos,omitempty"`
	Clr         *ColorInfo `protobuf:"bytes,5,opt,name=clr" json:"clr,omitempty"`
	Speed       *uint32    `protobuf:"varint,6,opt,name=speed,def=0" json:"speed,omitempty"`
	Userid      *uint64    `protobuf:"varint,7,opt,name=userid,def=0" json:"userid,omitempty"`
	Frame       *uint32    `protobuf:"varint,8,opt,name=frame,def=0" json:"frame,omitempty"`
	Bshieldword *bool      `protobuf:"varint,9,opt,name=bshieldword,def=0" json:"bshieldword,omitempty"`
}

// Default values for BarrageMsgChatCmd fields.
const (
	Default_BarrageMsgChatCmd_Cmd         = Command_CHAT_PROTOCMD
	Default_BarrageMsgChatCmd_Param       = ChatParam_CHATPARAM_BARRAGEMSG
	Default_BarrageMsgChatCmd_Speed       = uint32(0)
	Default_BarrageMsgChatCmd_Userid      = uint64(0)
	Default_BarrageMsgChatCmd_Frame       = uint32(0)
	Default_BarrageMsgChatCmd_Bshieldword = bool(false)
)

func (x *BarrageMsgChatCmd) Reset() {
	*x = BarrageMsgChatCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarrageMsgChatCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarrageMsgChatCmd) ProtoMessage() {}

func (x *BarrageMsgChatCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarrageMsgChatCmd.ProtoReflect.Descriptor instead.
func (*BarrageMsgChatCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{11}
}

func (x *BarrageMsgChatCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BarrageMsgChatCmd_Cmd
}

func (x *BarrageMsgChatCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BarrageMsgChatCmd_Param
}

func (x *BarrageMsgChatCmd) GetStr() string {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return ""
}

func (x *BarrageMsgChatCmd) GetMsgpos() *ScenePos {
	if x != nil {
		return x.Msgpos
	}
	return nil
}

func (x *BarrageMsgChatCmd) GetClr() *ColorInfo {
	if x != nil {
		return x.Clr
	}
	return nil
}

func (x *BarrageMsgChatCmd) GetSpeed() uint32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return Default_BarrageMsgChatCmd_Speed
}

func (x *BarrageMsgChatCmd) GetUserid() uint64 {
	if x != nil && x.Userid != nil {
		return *x.Userid
	}
	return Default_BarrageMsgChatCmd_Userid
}

func (x *BarrageMsgChatCmd) GetFrame() uint32 {
	if x != nil && x.Frame != nil {
		return *x.Frame
	}
	return Default_BarrageMsgChatCmd_Frame
}

func (x *BarrageMsgChatCmd) GetBshieldword() bool {
	if x != nil && x.Bshieldword != nil {
		return *x.Bshieldword
	}
	return Default_BarrageMsgChatCmd_Bshieldword
}

type ChatCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param       *ChatParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=6" json:"param,omitempty"`
	Channel     *EGameChatChannel   `protobuf:"varint,3,opt,name=channel,enum=Cmd.EGameChatChannel,def=1" json:"channel,omitempty"`
	Str         *string             `protobuf:"bytes,4,req,name=str" json:"str,omitempty"`
	DesID       *uint64             `protobuf:"varint,5,opt,name=desID" json:"desID,omitempty"`
	Voice       []byte              `protobuf:"bytes,6,opt,name=voice" json:"voice,omitempty"`
	Voicetime   *uint32             `protobuf:"varint,7,opt,name=voicetime,def=0" json:"voicetime,omitempty"`
	Msgid       *uint32             `protobuf:"varint,8,opt,name=msgid,def=0" json:"msgid,omitempty"`
	Msgover     *bool               `protobuf:"varint,9,opt,name=msgover,def=0" json:"msgover,omitempty"`
	Photo       *GuildPhoto         `protobuf:"bytes,10,opt,name=photo" json:"photo,omitempty"`
	Expression  *FavoriteExpression `protobuf:"bytes,11,opt,name=expression" json:"expression,omitempty"`
	Bshieldword *bool               `protobuf:"varint,12,opt,name=bshieldword,def=0" json:"bshieldword,omitempty"`
}

// Default values for ChatCmd fields.
const (
	Default_ChatCmd_Cmd         = Command_CHAT_PROTOCMD
	Default_ChatCmd_Param       = ChatParam_CHATPARAM_CHAT
	Default_ChatCmd_Channel     = EGameChatChannel_ECHAT_CHANNEL_ROUND
	Default_ChatCmd_Voicetime   = uint32(0)
	Default_ChatCmd_Msgid       = uint32(0)
	Default_ChatCmd_Msgover     = bool(false)
	Default_ChatCmd_Bshieldword = bool(false)
)

func (x *ChatCmd) Reset() {
	*x = ChatCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCmd) ProtoMessage() {}

func (x *ChatCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCmd.ProtoReflect.Descriptor instead.
func (*ChatCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{12}
}

func (x *ChatCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChatCmd_Cmd
}

func (x *ChatCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChatCmd_Param
}

func (x *ChatCmd) GetChannel() EGameChatChannel {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return Default_ChatCmd_Channel
}

func (x *ChatCmd) GetStr() string {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return ""
}

func (x *ChatCmd) GetDesID() uint64 {
	if x != nil && x.DesID != nil {
		return *x.DesID
	}
	return 0
}

func (x *ChatCmd) GetVoice() []byte {
	if x != nil {
		return x.Voice
	}
	return nil
}

func (x *ChatCmd) GetVoicetime() uint32 {
	if x != nil && x.Voicetime != nil {
		return *x.Voicetime
	}
	return Default_ChatCmd_Voicetime
}

func (x *ChatCmd) GetMsgid() uint32 {
	if x != nil && x.Msgid != nil {
		return *x.Msgid
	}
	return Default_ChatCmd_Msgid
}

func (x *ChatCmd) GetMsgover() bool {
	if x != nil && x.Msgover != nil {
		return *x.Msgover
	}
	return Default_ChatCmd_Msgover
}

func (x *ChatCmd) GetPhoto() *GuildPhoto {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *ChatCmd) GetExpression() *FavoriteExpression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *ChatCmd) GetBshieldword() bool {
	if x != nil && x.Bshieldword != nil {
		return *x.Bshieldword
	}
	return Default_ChatCmd_Bshieldword
}

type ChatRetCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command                `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param         *ChatParam              `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=7" json:"param,omitempty"`
	Accid         *uint64                 `protobuf:"varint,27,req,name=accid,def=0" json:"accid,omitempty"`
	Id            *uint64                 `protobuf:"varint,6,req,name=id" json:"id,omitempty"`
	Targetid      *uint64                 `protobuf:"varint,13,opt,name=targetid,def=0" json:"targetid,omitempty"`
	Portrait      *uint32                 `protobuf:"varint,7,req,name=portrait" json:"portrait,omitempty"`
	Frame         *uint32                 `protobuf:"varint,8,req,name=frame" json:"frame,omitempty"`
	Baselevel     *uint32                 `protobuf:"varint,10,opt,name=baselevel,def=0" json:"baselevel,omitempty"`
	Voiceid       *uint32                 `protobuf:"varint,11,opt,name=voiceid,def=0" json:"voiceid,omitempty"`
	Voicetime     *uint32                 `protobuf:"varint,12,opt,name=voicetime,def=0" json:"voicetime,omitempty"`
	Hair          *uint32                 `protobuf:"varint,14,opt,name=hair,def=0" json:"hair,omitempty"`
	Haircolor     *uint32                 `protobuf:"varint,15,opt,name=haircolor,def=0" json:"haircolor,omitempty"`
	Body          *uint32                 `protobuf:"varint,16,opt,name=body,def=0" json:"body,omitempty"`
	Appellation   *uint32                 `protobuf:"varint,19,opt,name=appellation,def=0" json:"appellation,omitempty"`
	Msgid         *uint32                 `protobuf:"varint,21,opt,name=msgid,def=0" json:"msgid,omitempty"`
	Head          *uint32                 `protobuf:"varint,22,opt,name=head,def=0" json:"head,omitempty"`
	Face          *uint32                 `protobuf:"varint,23,opt,name=face,def=0" json:"face,omitempty"`
	Mouth         *uint32                 `protobuf:"varint,24,opt,name=mouth,def=0" json:"mouth,omitempty"`
	Eye           *uint32                 `protobuf:"varint,25,opt,name=eye,def=0" json:"eye,omitempty"`
	Roomid        *uint32                 `protobuf:"varint,28,opt,name=roomid,def=0" json:"roomid,omitempty"`
	PortraitFrame *uint32                 `protobuf:"varint,30,opt,name=portrait_frame,json=portraitFrame,def=0" json:"portrait_frame,omitempty"`
	Serverid      *uint32                 `protobuf:"varint,32,opt,name=serverid" json:"serverid,omitempty"`
	Channel       *EGameChatChannel       `protobuf:"varint,3,opt,name=channel,enum=Cmd.EGameChatChannel,def=1" json:"channel,omitempty"`
	Rolejob       *EProfession            `protobuf:"varint,9,opt,name=rolejob,enum=Cmd.EProfession,def=0" json:"rolejob,omitempty"`
	Gender        *EGender                `protobuf:"varint,17,opt,name=gender,enum=Cmd.EGender,def=0" json:"gender,omitempty"`
	Blink         *bool                   `protobuf:"varint,20,opt,name=blink,def=0" json:"blink,omitempty"`
	Str           *string                 `protobuf:"bytes,4,req,name=str" json:"str,omitempty"`
	Name          *string                 `protobuf:"bytes,5,req,name=name" json:"name,omitempty"`
	Guildname     *string                 `protobuf:"bytes,18,opt,name=guildname" json:"guildname,omitempty"`
	Sysmsgid      *uint32                 `protobuf:"varint,26,opt,name=sysmsgid,def=0" json:"sysmsgid,omitempty"`
	Photo         *GuildPhoto             `protobuf:"bytes,29,opt,name=photo" json:"photo,omitempty"`
	Expression    *FavoriteExpression     `protobuf:"bytes,31,opt,name=expression" json:"expression,omitempty"`
	Redpacketret  *SendRedPacketSocialRet `protobuf:"bytes,33,opt,name=redpacketret" json:"redpacketret,omitempty"`
	Isreturnuser  *bool                   `protobuf:"varint,34,opt,name=isreturnuser" json:"isreturnuser,omitempty"`
}

// Default values for ChatRetCmd fields.
const (
	Default_ChatRetCmd_Cmd           = Command_CHAT_PROTOCMD
	Default_ChatRetCmd_Param         = ChatParam_CHATPARAM_CHAT_RET
	Default_ChatRetCmd_Accid         = uint64(0)
	Default_ChatRetCmd_Targetid      = uint64(0)
	Default_ChatRetCmd_Baselevel     = uint32(0)
	Default_ChatRetCmd_Voiceid       = uint32(0)
	Default_ChatRetCmd_Voicetime     = uint32(0)
	Default_ChatRetCmd_Hair          = uint32(0)
	Default_ChatRetCmd_Haircolor     = uint32(0)
	Default_ChatRetCmd_Body          = uint32(0)
	Default_ChatRetCmd_Appellation   = uint32(0)
	Default_ChatRetCmd_Msgid         = uint32(0)
	Default_ChatRetCmd_Head          = uint32(0)
	Default_ChatRetCmd_Face          = uint32(0)
	Default_ChatRetCmd_Mouth         = uint32(0)
	Default_ChatRetCmd_Eye           = uint32(0)
	Default_ChatRetCmd_Roomid        = uint32(0)
	Default_ChatRetCmd_PortraitFrame = uint32(0)
	Default_ChatRetCmd_Channel       = EGameChatChannel_ECHAT_CHANNEL_ROUND
	Default_ChatRetCmd_Rolejob       = EProfession_EPROFESSION_MIN
	Default_ChatRetCmd_Gender        = EGender_EGENDER_MIN
	Default_ChatRetCmd_Blink         = bool(false)
	Default_ChatRetCmd_Sysmsgid      = uint32(0)
)

func (x *ChatRetCmd) Reset() {
	*x = ChatRetCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRetCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRetCmd) ProtoMessage() {}

func (x *ChatRetCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRetCmd.ProtoReflect.Descriptor instead.
func (*ChatRetCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{13}
}

func (x *ChatRetCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChatRetCmd_Cmd
}

func (x *ChatRetCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChatRetCmd_Param
}

func (x *ChatRetCmd) GetAccid() uint64 {
	if x != nil && x.Accid != nil {
		return *x.Accid
	}
	return Default_ChatRetCmd_Accid
}

func (x *ChatRetCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ChatRetCmd) GetTargetid() uint64 {
	if x != nil && x.Targetid != nil {
		return *x.Targetid
	}
	return Default_ChatRetCmd_Targetid
}

func (x *ChatRetCmd) GetPortrait() uint32 {
	if x != nil && x.Portrait != nil {
		return *x.Portrait
	}
	return 0
}

func (x *ChatRetCmd) GetFrame() uint32 {
	if x != nil && x.Frame != nil {
		return *x.Frame
	}
	return 0
}

func (x *ChatRetCmd) GetBaselevel() uint32 {
	if x != nil && x.Baselevel != nil {
		return *x.Baselevel
	}
	return Default_ChatRetCmd_Baselevel
}

func (x *ChatRetCmd) GetVoiceid() uint32 {
	if x != nil && x.Voiceid != nil {
		return *x.Voiceid
	}
	return Default_ChatRetCmd_Voiceid
}

func (x *ChatRetCmd) GetVoicetime() uint32 {
	if x != nil && x.Voicetime != nil {
		return *x.Voicetime
	}
	return Default_ChatRetCmd_Voicetime
}

func (x *ChatRetCmd) GetHair() uint32 {
	if x != nil && x.Hair != nil {
		return *x.Hair
	}
	return Default_ChatRetCmd_Hair
}

func (x *ChatRetCmd) GetHaircolor() uint32 {
	if x != nil && x.Haircolor != nil {
		return *x.Haircolor
	}
	return Default_ChatRetCmd_Haircolor
}

func (x *ChatRetCmd) GetBody() uint32 {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return Default_ChatRetCmd_Body
}

func (x *ChatRetCmd) GetAppellation() uint32 {
	if x != nil && x.Appellation != nil {
		return *x.Appellation
	}
	return Default_ChatRetCmd_Appellation
}

func (x *ChatRetCmd) GetMsgid() uint32 {
	if x != nil && x.Msgid != nil {
		return *x.Msgid
	}
	return Default_ChatRetCmd_Msgid
}

func (x *ChatRetCmd) GetHead() uint32 {
	if x != nil && x.Head != nil {
		return *x.Head
	}
	return Default_ChatRetCmd_Head
}

func (x *ChatRetCmd) GetFace() uint32 {
	if x != nil && x.Face != nil {
		return *x.Face
	}
	return Default_ChatRetCmd_Face
}

func (x *ChatRetCmd) GetMouth() uint32 {
	if x != nil && x.Mouth != nil {
		return *x.Mouth
	}
	return Default_ChatRetCmd_Mouth
}

func (x *ChatRetCmd) GetEye() uint32 {
	if x != nil && x.Eye != nil {
		return *x.Eye
	}
	return Default_ChatRetCmd_Eye
}

func (x *ChatRetCmd) GetRoomid() uint32 {
	if x != nil && x.Roomid != nil {
		return *x.Roomid
	}
	return Default_ChatRetCmd_Roomid
}

func (x *ChatRetCmd) GetPortraitFrame() uint32 {
	if x != nil && x.PortraitFrame != nil {
		return *x.PortraitFrame
	}
	return Default_ChatRetCmd_PortraitFrame
}

func (x *ChatRetCmd) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return 0
}

func (x *ChatRetCmd) GetChannel() EGameChatChannel {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return Default_ChatRetCmd_Channel
}

func (x *ChatRetCmd) GetRolejob() EProfession {
	if x != nil && x.Rolejob != nil {
		return *x.Rolejob
	}
	return Default_ChatRetCmd_Rolejob
}

func (x *ChatRetCmd) GetGender() EGender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Default_ChatRetCmd_Gender
}

func (x *ChatRetCmd) GetBlink() bool {
	if x != nil && x.Blink != nil {
		return *x.Blink
	}
	return Default_ChatRetCmd_Blink
}

func (x *ChatRetCmd) GetStr() string {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return ""
}

func (x *ChatRetCmd) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ChatRetCmd) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

func (x *ChatRetCmd) GetSysmsgid() uint32 {
	if x != nil && x.Sysmsgid != nil {
		return *x.Sysmsgid
	}
	return Default_ChatRetCmd_Sysmsgid
}

func (x *ChatRetCmd) GetPhoto() *GuildPhoto {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *ChatRetCmd) GetExpression() *FavoriteExpression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *ChatRetCmd) GetRedpacketret() *SendRedPacketSocialRet {
	if x != nil {
		return x.Redpacketret
	}
	return nil
}

func (x *ChatRetCmd) GetIsreturnuser() bool {
	if x != nil && x.Isreturnuser != nil {
		return *x.Isreturnuser
	}
	return false
}

type QueryVoiceUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param   *ChatParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=8" json:"param,omitempty"`
	Voiceid *uint32    `protobuf:"varint,3,opt,name=voiceid,def=0" json:"voiceid,omitempty"`
	Voice   []byte     `protobuf:"bytes,4,opt,name=voice" json:"voice,omitempty"`
	Msgid   *uint32    `protobuf:"varint,8,opt,name=msgid,def=0" json:"msgid,omitempty"`
	Msgover *bool      `protobuf:"varint,9,opt,name=msgover,def=0" json:"msgover,omitempty"`
}

// Default values for QueryVoiceUserCmd fields.
const (
	Default_QueryVoiceUserCmd_Cmd     = Command_CHAT_PROTOCMD
	Default_QueryVoiceUserCmd_Param   = ChatParam_CHATPARAM_QUERY_VOICE
	Default_QueryVoiceUserCmd_Voiceid = uint32(0)
	Default_QueryVoiceUserCmd_Msgid   = uint32(0)
	Default_QueryVoiceUserCmd_Msgover = bool(false)
)

func (x *QueryVoiceUserCmd) Reset() {
	*x = QueryVoiceUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVoiceUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVoiceUserCmd) ProtoMessage() {}

func (x *QueryVoiceUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVoiceUserCmd.ProtoReflect.Descriptor instead.
func (*QueryVoiceUserCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{14}
}

func (x *QueryVoiceUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryVoiceUserCmd_Cmd
}

func (x *QueryVoiceUserCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryVoiceUserCmd_Param
}

func (x *QueryVoiceUserCmd) GetVoiceid() uint32 {
	if x != nil && x.Voiceid != nil {
		return *x.Voiceid
	}
	return Default_QueryVoiceUserCmd_Voiceid
}

func (x *QueryVoiceUserCmd) GetVoice() []byte {
	if x != nil {
		return x.Voice
	}
	return nil
}

func (x *QueryVoiceUserCmd) GetMsgid() uint32 {
	if x != nil && x.Msgid != nil {
		return *x.Msgid
	}
	return Default_QueryVoiceUserCmd_Msgid
}

func (x *QueryVoiceUserCmd) GetMsgover() bool {
	if x != nil && x.Msgover != nil {
		return *x.Msgover
	}
	return Default_QueryVoiceUserCmd_Msgover
}

type GetVoiceIDChatCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param *ChatParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=10" json:"param,omitempty"`
	Id    *uint32    `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
}

// Default values for GetVoiceIDChatCmd fields.
const (
	Default_GetVoiceIDChatCmd_Cmd   = Command_CHAT_PROTOCMD
	Default_GetVoiceIDChatCmd_Param = ChatParam_CHATPARAM_GET_VOICEID
	Default_GetVoiceIDChatCmd_Id    = uint32(0)
)

func (x *GetVoiceIDChatCmd) Reset() {
	*x = GetVoiceIDChatCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVoiceIDChatCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVoiceIDChatCmd) ProtoMessage() {}

func (x *GetVoiceIDChatCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVoiceIDChatCmd.ProtoReflect.Descriptor instead.
func (*GetVoiceIDChatCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{15}
}

func (x *GetVoiceIDChatCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GetVoiceIDChatCmd_Cmd
}

func (x *GetVoiceIDChatCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GetVoiceIDChatCmd_Param
}

func (x *GetVoiceIDChatCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_GetVoiceIDChatCmd_Id
}

type LoveLetterNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param    *ChatParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=11" json:"param,omitempty"`
	Name     *string    `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Content  *string    `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	Type     *uint32    `protobuf:"varint,5,opt,name=type" json:"type,omitempty"`
	Bg       *string    `protobuf:"bytes,6,opt,name=bg" json:"bg,omitempty"`
	LetterID *uint32    `protobuf:"varint,7,opt,name=letterID,def=0" json:"letterID,omitempty"`
	ConfigID *uint32    `protobuf:"varint,8,opt,name=configID,def=0" json:"configID,omitempty"`
	Content2 *string    `protobuf:"bytes,9,opt,name=content2" json:"content2,omitempty"`
}

// Default values for LoveLetterNtf fields.
const (
	Default_LoveLetterNtf_Cmd      = Command_CHAT_PROTOCMD
	Default_LoveLetterNtf_Param    = ChatParam_CHATPARAM_LOVE_LETTER
	Default_LoveLetterNtf_LetterID = uint32(0)
	Default_LoveLetterNtf_ConfigID = uint32(0)
)

func (x *LoveLetterNtf) Reset() {
	*x = LoveLetterNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoveLetterNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoveLetterNtf) ProtoMessage() {}

func (x *LoveLetterNtf) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoveLetterNtf.ProtoReflect.Descriptor instead.
func (*LoveLetterNtf) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{16}
}

func (x *LoveLetterNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LoveLetterNtf_Cmd
}

func (x *LoveLetterNtf) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LoveLetterNtf_Param
}

func (x *LoveLetterNtf) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *LoveLetterNtf) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *LoveLetterNtf) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *LoveLetterNtf) GetBg() string {
	if x != nil && x.Bg != nil {
		return *x.Bg
	}
	return ""
}

func (x *LoveLetterNtf) GetLetterID() uint32 {
	if x != nil && x.LetterID != nil {
		return *x.LetterID
	}
	return Default_LoveLetterNtf_LetterID
}

func (x *LoveLetterNtf) GetConfigID() uint32 {
	if x != nil && x.ConfigID != nil {
		return *x.ConfigID
	}
	return Default_LoveLetterNtf_ConfigID
}

func (x *LoveLetterNtf) GetContent2() string {
	if x != nil && x.Content2 != nil {
		return *x.Content2
	}
	return ""
}

type ChatSelfNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param *ChatParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=12" json:"param,omitempty"`
	Chat  *ChatCmd   `protobuf:"bytes,3,opt,name=chat" json:"chat,omitempty"`
}

// Default values for ChatSelfNtf fields.
const (
	Default_ChatSelfNtf_Cmd   = Command_CHAT_PROTOCMD
	Default_ChatSelfNtf_Param = ChatParam_CHATPARAM_CHAT_SELF
)

func (x *ChatSelfNtf) Reset() {
	*x = ChatSelfNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatSelfNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatSelfNtf) ProtoMessage() {}

func (x *ChatSelfNtf) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatSelfNtf.ProtoReflect.Descriptor instead.
func (*ChatSelfNtf) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{17}
}

func (x *ChatSelfNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChatSelfNtf_Cmd
}

func (x *ChatSelfNtf) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChatSelfNtf_Param
}

func (x *ChatSelfNtf) GetChat() *ChatCmd {
	if x != nil {
		return x.Chat
	}
	return nil
}

type NpcChatNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param   *ChatParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=13" json:"param,omitempty"`
	Channel *EGameChatChannel `protobuf:"varint,3,opt,name=channel,enum=Cmd.EGameChatChannel,def=0" json:"channel,omitempty"`
	Npcid   *uint32           `protobuf:"varint,4,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Msgid   *uint32           `protobuf:"varint,5,opt,name=msgid,def=0" json:"msgid,omitempty"`
	Params  []*MsgParam       `protobuf:"bytes,6,rep,name=params" json:"params,omitempty"`
	Msg     *string           `protobuf:"bytes,7,opt,name=msg" json:"msg,omitempty"`
	Npcguid *uint64           `protobuf:"varint,8,opt,name=npcguid,def=0" json:"npcguid,omitempty"`
}

// Default values for NpcChatNtf fields.
const (
	Default_NpcChatNtf_Cmd     = Command_CHAT_PROTOCMD
	Default_NpcChatNtf_Param   = ChatParam_CHATPARAM_NPC_CHAT_NTF
	Default_NpcChatNtf_Channel = EGameChatChannel_ECHAT_CHANNEL_MIN
	Default_NpcChatNtf_Npcid   = uint32(0)
	Default_NpcChatNtf_Msgid   = uint32(0)
	Default_NpcChatNtf_Npcguid = uint64(0)
)

func (x *NpcChatNtf) Reset() {
	*x = NpcChatNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpcChatNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpcChatNtf) ProtoMessage() {}

func (x *NpcChatNtf) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpcChatNtf.ProtoReflect.Descriptor instead.
func (*NpcChatNtf) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{18}
}

func (x *NpcChatNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NpcChatNtf_Cmd
}

func (x *NpcChatNtf) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NpcChatNtf_Param
}

func (x *NpcChatNtf) GetChannel() EGameChatChannel {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return Default_NpcChatNtf_Channel
}

func (x *NpcChatNtf) GetNpcid() uint32 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_NpcChatNtf_Npcid
}

func (x *NpcChatNtf) GetMsgid() uint32 {
	if x != nil && x.Msgid != nil {
		return *x.Msgid
	}
	return Default_NpcChatNtf_Msgid
}

func (x *NpcChatNtf) GetParams() []*MsgParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *NpcChatNtf) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *NpcChatNtf) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return Default_NpcChatNtf_Npcguid
}

type QueryRealtimeVoiceIDCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param   *ChatParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=14" json:"param,omitempty"`
	Channel *EGameChatChannel `protobuf:"varint,3,opt,name=channel,enum=Cmd.EGameChatChannel,def=0" json:"channel,omitempty"`
	Id      *string           `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"`
}

// Default values for QueryRealtimeVoiceIDCmd fields.
const (
	Default_QueryRealtimeVoiceIDCmd_Cmd     = Command_CHAT_PROTOCMD
	Default_QueryRealtimeVoiceIDCmd_Param   = ChatParam_CHATPARAM_QUERY_REALTIME_VOICE_ID
	Default_QueryRealtimeVoiceIDCmd_Channel = EGameChatChannel_ECHAT_CHANNEL_MIN
)

func (x *QueryRealtimeVoiceIDCmd) Reset() {
	*x = QueryRealtimeVoiceIDCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRealtimeVoiceIDCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRealtimeVoiceIDCmd) ProtoMessage() {}

func (x *QueryRealtimeVoiceIDCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRealtimeVoiceIDCmd.ProtoReflect.Descriptor instead.
func (*QueryRealtimeVoiceIDCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{19}
}

func (x *QueryRealtimeVoiceIDCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryRealtimeVoiceIDCmd_Cmd
}

func (x *QueryRealtimeVoiceIDCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryRealtimeVoiceIDCmd_Param
}

func (x *QueryRealtimeVoiceIDCmd) GetChannel() EGameChatChannel {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return Default_QueryRealtimeVoiceIDCmd_Channel
}

func (x *QueryRealtimeVoiceIDCmd) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type QueryUserShowInfoCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param    *ChatParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=16" json:"param,omitempty"`
	Targetid *uint64        `protobuf:"varint,3,opt,name=targetid,def=0" json:"targetid,omitempty"`
	Info     *QueryUserInfo `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
}

// Default values for QueryUserShowInfoCmd fields.
const (
	Default_QueryUserShowInfoCmd_Cmd      = Command_CHAT_PROTOCMD
	Default_QueryUserShowInfoCmd_Param    = ChatParam_CHATPARAM_QUERY_USER_SHOW_INFO
	Default_QueryUserShowInfoCmd_Targetid = uint64(0)
)

func (x *QueryUserShowInfoCmd) Reset() {
	*x = QueryUserShowInfoCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserShowInfoCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserShowInfoCmd) ProtoMessage() {}

func (x *QueryUserShowInfoCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserShowInfoCmd.ProtoReflect.Descriptor instead.
func (*QueryUserShowInfoCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{20}
}

func (x *QueryUserShowInfoCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryUserShowInfoCmd_Cmd
}

func (x *QueryUserShowInfoCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryUserShowInfoCmd_Param
}

func (x *QueryUserShowInfoCmd) GetTargetid() uint64 {
	if x != nil && x.Targetid != nil {
		return *x.Targetid
	}
	return Default_QueryUserShowInfoCmd_Targetid
}

func (x *QueryUserShowInfoCmd) GetInfo() *QueryUserInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type SystemBarrageChatCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param *ChatParam          `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=15" json:"param,omitempty"`
	Type  *ESystemBarrageType `protobuf:"varint,3,opt,name=type,enum=Cmd.ESystemBarrageType,def=1" json:"type,omitempty"`
	Msgid *uint32             `protobuf:"varint,4,opt,name=msgid,def=0" json:"msgid,omitempty"`
}

// Default values for SystemBarrageChatCmd fields.
const (
	Default_SystemBarrageChatCmd_Cmd   = Command_CHAT_PROTOCMD
	Default_SystemBarrageChatCmd_Param = ChatParam_CHATPARAM_SYSTEM_BARRAGE
	Default_SystemBarrageChatCmd_Type  = ESystemBarrageType_ESYSTEMBARRAGE_NORMAL
	Default_SystemBarrageChatCmd_Msgid = uint32(0)
)

func (x *SystemBarrageChatCmd) Reset() {
	*x = SystemBarrageChatCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemBarrageChatCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemBarrageChatCmd) ProtoMessage() {}

func (x *SystemBarrageChatCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemBarrageChatCmd.ProtoReflect.Descriptor instead.
func (*SystemBarrageChatCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{21}
}

func (x *SystemBarrageChatCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SystemBarrageChatCmd_Cmd
}

func (x *SystemBarrageChatCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SystemBarrageChatCmd_Param
}

func (x *SystemBarrageChatCmd) GetType() ESystemBarrageType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_SystemBarrageChatCmd_Type
}

func (x *SystemBarrageChatCmd) GetMsgid() uint32 {
	if x != nil && x.Msgid != nil {
		return *x.Msgid
	}
	return Default_SystemBarrageChatCmd_Msgid
}

type FavoriteExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *EFavoriteExpression `protobuf:"varint,1,opt,name=type,enum=Cmd.EFavoriteExpression,def=0" json:"type,omitempty"`
	Id   *uint32              `protobuf:"varint,2,opt,name=id,def=0" json:"id,omitempty"`
	Pos  *uint32              `protobuf:"varint,3,opt,name=pos,def=0" json:"pos,omitempty"`
}

// Default values for FavoriteExpression fields.
const (
	Default_FavoriteExpression_Type = EFavoriteExpression_EFAVORITEEXPRESSION_MIN
	Default_FavoriteExpression_Id   = uint32(0)
	Default_FavoriteExpression_Pos  = uint32(0)
)

func (x *FavoriteExpression) Reset() {
	*x = FavoriteExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavoriteExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteExpression) ProtoMessage() {}

func (x *FavoriteExpression) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteExpression.ProtoReflect.Descriptor instead.
func (*FavoriteExpression) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{22}
}

func (x *FavoriteExpression) GetType() EFavoriteExpression {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_FavoriteExpression_Type
}

func (x *FavoriteExpression) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_FavoriteExpression_Id
}

func (x *FavoriteExpression) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_FavoriteExpression_Pos
}

type QueryFavoriteExpressionChatCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param      *ChatParam            `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=17" json:"param,omitempty"`
	Expression []*FavoriteExpression `protobuf:"bytes,3,rep,name=expression" json:"expression,omitempty"`
}

// Default values for QueryFavoriteExpressionChatCmd fields.
const (
	Default_QueryFavoriteExpressionChatCmd_Cmd   = Command_CHAT_PROTOCMD
	Default_QueryFavoriteExpressionChatCmd_Param = ChatParam_CHATPARAM_FAVORITE_EXPRESSION_QUERY
)

func (x *QueryFavoriteExpressionChatCmd) Reset() {
	*x = QueryFavoriteExpressionChatCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFavoriteExpressionChatCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFavoriteExpressionChatCmd) ProtoMessage() {}

func (x *QueryFavoriteExpressionChatCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFavoriteExpressionChatCmd.ProtoReflect.Descriptor instead.
func (*QueryFavoriteExpressionChatCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{23}
}

func (x *QueryFavoriteExpressionChatCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryFavoriteExpressionChatCmd_Cmd
}

func (x *QueryFavoriteExpressionChatCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryFavoriteExpressionChatCmd_Param
}

func (x *QueryFavoriteExpressionChatCmd) GetExpression() []*FavoriteExpression {
	if x != nil {
		return x.Expression
	}
	return nil
}

type UpdateFavoriteExpressionChatCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param   *ChatParam            `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=18" json:"param,omitempty"`
	Updates []*FavoriteExpression `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
	Dels    []*FavoriteExpression `protobuf:"bytes,4,rep,name=dels" json:"dels,omitempty"`
}

// Default values for UpdateFavoriteExpressionChatCmd fields.
const (
	Default_UpdateFavoriteExpressionChatCmd_Cmd   = Command_CHAT_PROTOCMD
	Default_UpdateFavoriteExpressionChatCmd_Param = ChatParam_CHATPARAM_FAVORITE_EXPRESSION_UPDATE
)

func (x *UpdateFavoriteExpressionChatCmd) Reset() {
	*x = UpdateFavoriteExpressionChatCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFavoriteExpressionChatCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFavoriteExpressionChatCmd) ProtoMessage() {}

func (x *UpdateFavoriteExpressionChatCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFavoriteExpressionChatCmd.ProtoReflect.Descriptor instead.
func (*UpdateFavoriteExpressionChatCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateFavoriteExpressionChatCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateFavoriteExpressionChatCmd_Cmd
}

func (x *UpdateFavoriteExpressionChatCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateFavoriteExpressionChatCmd_Param
}

func (x *UpdateFavoriteExpressionChatCmd) GetUpdates() []*FavoriteExpression {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *UpdateFavoriteExpressionChatCmd) GetDels() []*FavoriteExpression {
	if x != nil {
		return x.Dels
	}
	return nil
}

type ExpressionChatCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param      *ChatParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=19" json:"param,omitempty"`
	Channel    *EGameChatChannel `protobuf:"varint,3,opt,name=channel,enum=Cmd.EGameChatChannel,def=0" json:"channel,omitempty"`
	Id         *uint64           `protobuf:"varint,8,opt,name=id,def=0" json:"id,omitempty"`
	Targetid   *uint64           `protobuf:"varint,4,opt,name=targetid,def=0" json:"targetid,omitempty"`
	Msgid      *uint32           `protobuf:"varint,5,opt,name=msgid,def=0" json:"msgid,omitempty"`
	Sendername *string           `protobuf:"bytes,6,opt,name=sendername" json:"sendername,omitempty"`
	Targetname *string           `protobuf:"bytes,7,opt,name=targetname" json:"targetname,omitempty"`
}

// Default values for ExpressionChatCmd fields.
const (
	Default_ExpressionChatCmd_Cmd      = Command_CHAT_PROTOCMD
	Default_ExpressionChatCmd_Param    = ChatParam_CHATPARAM_EXPRESSION
	Default_ExpressionChatCmd_Channel  = EGameChatChannel_ECHAT_CHANNEL_MIN
	Default_ExpressionChatCmd_Id       = uint64(0)
	Default_ExpressionChatCmd_Targetid = uint64(0)
	Default_ExpressionChatCmd_Msgid    = uint32(0)
)

func (x *ExpressionChatCmd) Reset() {
	*x = ExpressionChatCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpressionChatCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionChatCmd) ProtoMessage() {}

func (x *ExpressionChatCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionChatCmd.ProtoReflect.Descriptor instead.
func (*ExpressionChatCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{25}
}

func (x *ExpressionChatCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExpressionChatCmd_Cmd
}

func (x *ExpressionChatCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExpressionChatCmd_Param
}

func (x *ExpressionChatCmd) GetChannel() EGameChatChannel {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return Default_ExpressionChatCmd_Channel
}

func (x *ExpressionChatCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_ExpressionChatCmd_Id
}

func (x *ExpressionChatCmd) GetTargetid() uint64 {
	if x != nil && x.Targetid != nil {
		return *x.Targetid
	}
	return Default_ExpressionChatCmd_Targetid
}

func (x *ExpressionChatCmd) GetMsgid() uint32 {
	if x != nil && x.Msgid != nil {
		return *x.Msgid
	}
	return Default_ExpressionChatCmd_Msgid
}

func (x *ExpressionChatCmd) GetSendername() string {
	if x != nil && x.Sendername != nil {
		return *x.Sendername
	}
	return ""
}

func (x *ExpressionChatCmd) GetTargetname() string {
	if x != nil && x.Targetname != nil {
		return *x.Targetname
	}
	return ""
}

type FaceShowChatCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param      *ChatParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=21" json:"param,omitempty"`
	Channel    *EGameChatChannel `protobuf:"varint,3,opt,name=channel,enum=Cmd.EGameChatChannel,def=0" json:"channel,omitempty"`
	Id         *uint64           `protobuf:"varint,8,opt,name=id,def=0" json:"id,omitempty"`
	Targetid   *uint64           `protobuf:"varint,4,opt,name=targetid,def=0" json:"targetid,omitempty"`
	Msgid      *uint32           `protobuf:"varint,5,opt,name=msgid,def=0" json:"msgid,omitempty"`
	Sendername *string           `protobuf:"bytes,6,opt,name=sendername" json:"sendername,omitempty"`
	Targetname *string           `protobuf:"bytes,7,opt,name=targetname" json:"targetname,omitempty"`
	Charid     *uint64           `protobuf:"varint,9,opt,name=charid" json:"charid,omitempty"`
}

// Default values for FaceShowChatCmd fields.
const (
	Default_FaceShowChatCmd_Cmd      = Command_CHAT_PROTOCMD
	Default_FaceShowChatCmd_Param    = ChatParam_CHATPARAM_FACESHOW
	Default_FaceShowChatCmd_Channel  = EGameChatChannel_ECHAT_CHANNEL_MIN
	Default_FaceShowChatCmd_Id       = uint64(0)
	Default_FaceShowChatCmd_Targetid = uint64(0)
	Default_FaceShowChatCmd_Msgid    = uint32(0)
)

func (x *FaceShowChatCmd) Reset() {
	*x = FaceShowChatCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaceShowChatCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceShowChatCmd) ProtoMessage() {}

func (x *FaceShowChatCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceShowChatCmd.ProtoReflect.Descriptor instead.
func (*FaceShowChatCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{26}
}

func (x *FaceShowChatCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FaceShowChatCmd_Cmd
}

func (x *FaceShowChatCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FaceShowChatCmd_Param
}

func (x *FaceShowChatCmd) GetChannel() EGameChatChannel {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return Default_FaceShowChatCmd_Channel
}

func (x *FaceShowChatCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_FaceShowChatCmd_Id
}

func (x *FaceShowChatCmd) GetTargetid() uint64 {
	if x != nil && x.Targetid != nil {
		return *x.Targetid
	}
	return Default_FaceShowChatCmd_Targetid
}

func (x *FaceShowChatCmd) GetMsgid() uint32 {
	if x != nil && x.Msgid != nil {
		return *x.Msgid
	}
	return Default_FaceShowChatCmd_Msgid
}

func (x *FaceShowChatCmd) GetSendername() string {
	if x != nil && x.Sendername != nil {
		return *x.Sendername
	}
	return ""
}

func (x *FaceShowChatCmd) GetTargetname() string {
	if x != nil && x.Targetname != nil {
		return *x.Targetname
	}
	return ""
}

func (x *FaceShowChatCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

type ClientLogChatCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param *ChatParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=22" json:"param,omitempty"`
	Func  *string    `protobuf:"bytes,3,opt,name=func" json:"func,omitempty"`
	Oper  *string    `protobuf:"bytes,4,opt,name=oper" json:"oper,omitempty"`
	Msg   *string    `protobuf:"bytes,5,opt,name=msg" json:"msg,omitempty"`
}

// Default values for ClientLogChatCmd fields.
const (
	Default_ClientLogChatCmd_Cmd   = Command_CHAT_PROTOCMD
	Default_ClientLogChatCmd_Param = ChatParam_CHATPARAM_CLIENTLOG
)

func (x *ClientLogChatCmd) Reset() {
	*x = ClientLogChatCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientLogChatCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientLogChatCmd) ProtoMessage() {}

func (x *ClientLogChatCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientLogChatCmd.ProtoReflect.Descriptor instead.
func (*ClientLogChatCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{27}
}

func (x *ClientLogChatCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClientLogChatCmd_Cmd
}

func (x *ClientLogChatCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClientLogChatCmd_Param
}

func (x *ClientLogChatCmd) GetFunc() string {
	if x != nil && x.Func != nil {
		return *x.Func
	}
	return ""
}

func (x *ClientLogChatCmd) GetOper() string {
	if x != nil && x.Oper != nil {
		return *x.Oper
	}
	return ""
}

func (x *ClientLogChatCmd) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

type ChatUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccID         *uint64      `protobuf:"varint,1,opt,name=accID,def=0" json:"accID,omitempty"`
	ID            *uint64      `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
	Portrait      *uint32      `protobuf:"varint,3,opt,name=portrait" json:"portrait,omitempty"`
	Frame         *uint32      `protobuf:"varint,4,opt,name=frame" json:"frame,omitempty"`
	BaseLevel     *uint32      `protobuf:"varint,5,opt,name=baseLevel,def=0" json:"baseLevel,omitempty"`
	Hair          *uint32      `protobuf:"varint,6,opt,name=hair,def=0" json:"hair,omitempty"`
	HairColor     *uint32      `protobuf:"varint,7,opt,name=hairColor,def=0" json:"hairColor,omitempty"`
	Body          *uint32      `protobuf:"varint,8,opt,name=body,def=0" json:"body,omitempty"`
	Appellation   *uint32      `protobuf:"varint,9,opt,name=appellation,def=0" json:"appellation,omitempty"`
	Head          *uint32      `protobuf:"varint,10,opt,name=head,def=0" json:"head,omitempty"`
	Face          *uint32      `protobuf:"varint,11,opt,name=face,def=0" json:"face,omitempty"`
	Mouth         *uint32      `protobuf:"varint,12,opt,name=mouth,def=0" json:"mouth,omitempty"`
	Eye           *uint32      `protobuf:"varint,13,opt,name=eye,def=0" json:"eye,omitempty"`
	RoomID        *uint32      `protobuf:"varint,14,opt,name=roomID,def=0" json:"roomID,omitempty"`
	PortraitFrame *uint32      `protobuf:"varint,15,opt,name=portrait_frame,json=portraitFrame,def=0" json:"portrait_frame,omitempty"`
	RoleJob       *EProfession `protobuf:"varint,16,opt,name=roleJob,enum=Cmd.EProfession,def=0" json:"roleJob,omitempty"`
	Gender        *EGender     `protobuf:"varint,17,opt,name=gender,enum=Cmd.EGender,def=0" json:"gender,omitempty"`
	Blink         *bool        `protobuf:"varint,18,opt,name=blink,def=0" json:"blink,omitempty"`
	Name          *string      `protobuf:"bytes,19,opt,name=name" json:"name,omitempty"`
	GuildName     *string      `protobuf:"bytes,20,opt,name=guildName" json:"guildName,omitempty"`
}

// Default values for ChatUserInfo fields.
const (
	Default_ChatUserInfo_AccID         = uint64(0)
	Default_ChatUserInfo_BaseLevel     = uint32(0)
	Default_ChatUserInfo_Hair          = uint32(0)
	Default_ChatUserInfo_HairColor     = uint32(0)
	Default_ChatUserInfo_Body          = uint32(0)
	Default_ChatUserInfo_Appellation   = uint32(0)
	Default_ChatUserInfo_Head          = uint32(0)
	Default_ChatUserInfo_Face          = uint32(0)
	Default_ChatUserInfo_Mouth         = uint32(0)
	Default_ChatUserInfo_Eye           = uint32(0)
	Default_ChatUserInfo_RoomID        = uint32(0)
	Default_ChatUserInfo_PortraitFrame = uint32(0)
	Default_ChatUserInfo_RoleJob       = EProfession_EPROFESSION_MIN
	Default_ChatUserInfo_Gender        = EGender_EGENDER_MIN
	Default_ChatUserInfo_Blink         = bool(false)
)

func (x *ChatUserInfo) Reset() {
	*x = ChatUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatUserInfo) ProtoMessage() {}

func (x *ChatUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatUserInfo.ProtoReflect.Descriptor instead.
func (*ChatUserInfo) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{28}
}

func (x *ChatUserInfo) GetAccID() uint64 {
	if x != nil && x.AccID != nil {
		return *x.AccID
	}
	return Default_ChatUserInfo_AccID
}

func (x *ChatUserInfo) GetID() uint64 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *ChatUserInfo) GetPortrait() uint32 {
	if x != nil && x.Portrait != nil {
		return *x.Portrait
	}
	return 0
}

func (x *ChatUserInfo) GetFrame() uint32 {
	if x != nil && x.Frame != nil {
		return *x.Frame
	}
	return 0
}

func (x *ChatUserInfo) GetBaseLevel() uint32 {
	if x != nil && x.BaseLevel != nil {
		return *x.BaseLevel
	}
	return Default_ChatUserInfo_BaseLevel
}

func (x *ChatUserInfo) GetHair() uint32 {
	if x != nil && x.Hair != nil {
		return *x.Hair
	}
	return Default_ChatUserInfo_Hair
}

func (x *ChatUserInfo) GetHairColor() uint32 {
	if x != nil && x.HairColor != nil {
		return *x.HairColor
	}
	return Default_ChatUserInfo_HairColor
}

func (x *ChatUserInfo) GetBody() uint32 {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return Default_ChatUserInfo_Body
}

func (x *ChatUserInfo) GetAppellation() uint32 {
	if x != nil && x.Appellation != nil {
		return *x.Appellation
	}
	return Default_ChatUserInfo_Appellation
}

func (x *ChatUserInfo) GetHead() uint32 {
	if x != nil && x.Head != nil {
		return *x.Head
	}
	return Default_ChatUserInfo_Head
}

func (x *ChatUserInfo) GetFace() uint32 {
	if x != nil && x.Face != nil {
		return *x.Face
	}
	return Default_ChatUserInfo_Face
}

func (x *ChatUserInfo) GetMouth() uint32 {
	if x != nil && x.Mouth != nil {
		return *x.Mouth
	}
	return Default_ChatUserInfo_Mouth
}

func (x *ChatUserInfo) GetEye() uint32 {
	if x != nil && x.Eye != nil {
		return *x.Eye
	}
	return Default_ChatUserInfo_Eye
}

func (x *ChatUserInfo) GetRoomID() uint32 {
	if x != nil && x.RoomID != nil {
		return *x.RoomID
	}
	return Default_ChatUserInfo_RoomID
}

func (x *ChatUserInfo) GetPortraitFrame() uint32 {
	if x != nil && x.PortraitFrame != nil {
		return *x.PortraitFrame
	}
	return Default_ChatUserInfo_PortraitFrame
}

func (x *ChatUserInfo) GetRoleJob() EProfession {
	if x != nil && x.RoleJob != nil {
		return *x.RoleJob
	}
	return Default_ChatUserInfo_RoleJob
}

func (x *ChatUserInfo) GetGender() EGender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Default_ChatUserInfo_Gender
}

func (x *ChatUserInfo) GetBlink() bool {
	if x != nil && x.Blink != nil {
		return *x.Blink
	}
	return Default_ChatUserInfo_Blink
}

func (x *ChatUserInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ChatUserInfo) GetGuildName() string {
	if x != nil && x.GuildName != nil {
		return *x.GuildName
	}
	return ""
}

type ChatUserIDInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccID           *uint64 `protobuf:"varint,1,opt,name=accID,def=0" json:"accID,omitempty"`
	CharID          *uint64 `protobuf:"varint,2,opt,name=charID,def=0" json:"charID,omitempty"`
	Name            *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	GuildID         *uint32 `protobuf:"varint,4,opt,name=guildID,def=0" json:"guildID,omitempty"`
	SceneServerName *string `protobuf:"bytes,5,opt,name=sceneServerName" json:"sceneServerName,omitempty"`
	PlatformID      *uint32 `protobuf:"varint,6,opt,name=platformID,def=0" json:"platformID,omitempty"`
}

// Default values for ChatUserIDInfo fields.
const (
	Default_ChatUserIDInfo_AccID      = uint64(0)
	Default_ChatUserIDInfo_CharID     = uint64(0)
	Default_ChatUserIDInfo_GuildID    = uint32(0)
	Default_ChatUserIDInfo_PlatformID = uint32(0)
)

func (x *ChatUserIDInfo) Reset() {
	*x = ChatUserIDInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatUserIDInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatUserIDInfo) ProtoMessage() {}

func (x *ChatUserIDInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatUserIDInfo.ProtoReflect.Descriptor instead.
func (*ChatUserIDInfo) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{29}
}

func (x *ChatUserIDInfo) GetAccID() uint64 {
	if x != nil && x.AccID != nil {
		return *x.AccID
	}
	return Default_ChatUserIDInfo_AccID
}

func (x *ChatUserIDInfo) GetCharID() uint64 {
	if x != nil && x.CharID != nil {
		return *x.CharID
	}
	return Default_ChatUserIDInfo_CharID
}

func (x *ChatUserIDInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ChatUserIDInfo) GetGuildID() uint32 {
	if x != nil && x.GuildID != nil {
		return *x.GuildID
	}
	return Default_ChatUserIDInfo_GuildID
}

func (x *ChatUserIDInfo) GetSceneServerName() string {
	if x != nil && x.SceneServerName != nil {
		return *x.SceneServerName
	}
	return ""
}

func (x *ChatUserIDInfo) GetPlatformID() uint32 {
	if x != nil && x.PlatformID != nil {
		return *x.PlatformID
	}
	return Default_ChatUserIDInfo_PlatformID
}

type RedPacketContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedPacketCFGID *uint32           `protobuf:"varint,1,opt,name=redPacketCFGID,def=0" json:"redPacketCFGID,omitempty"`
	Str            *string           `protobuf:"bytes,2,opt,name=str" json:"str,omitempty"`
	TotalMoney     *uint32           `protobuf:"varint,3,opt,name=totalMoney,def=0" json:"totalMoney,omitempty"`
	TotalNum       *uint32           `protobuf:"varint,4,opt,name=totalNum,def=0" json:"totalNum,omitempty"`
	Channel        *EGameChatChannel `protobuf:"varint,5,opt,name=channel,enum=Cmd.EGameChatChannel,def=1" json:"channel,omitempty"`
	Type           *ERedPacketType   `protobuf:"varint,6,opt,name=type,enum=Cmd.ERedPacketType,def=0" json:"type,omitempty"`
	MoneyID        *uint32           `protobuf:"varint,7,opt,name=MoneyID" json:"MoneyID,omitempty"`
	Overtime       *uint32           `protobuf:"varint,8,opt,name=overtime,def=0" json:"overtime,omitempty"`
	BOvertime      *bool             `protobuf:"varint,9,opt,name=bOvertime,def=0" json:"bOvertime,omitempty"`
	BShieldWord    *bool             `protobuf:"varint,10,opt,name=bShieldWord,def=0" json:"bShieldWord,omitempty"`
	GuildID        *uint32           `protobuf:"varint,11,opt,name=guildID,def=0" json:"guildID,omitempty"`
	CharID         *uint64           `protobuf:"varint,12,opt,name=charID,def=0" json:"charID,omitempty"`
	AccID          *uint64           `protobuf:"varint,13,opt,name=accID,def=0" json:"accID,omitempty"`
	RestMoney      *uint32           `protobuf:"varint,14,opt,name=restMoney,def=0" json:"restMoney,omitempty"`
	RestNum        *uint32           `protobuf:"varint,15,opt,name=restNum,def=0" json:"restNum,omitempty"`
	ReceivedInfos  []*ReceivedInfo   `protobuf:"bytes,16,rep,name=receivedInfos" json:"receivedInfos,omitempty"`
	StrRedPacketID *string           `protobuf:"bytes,17,opt,name=strRedPacketID" json:"strRedPacketID,omitempty"`
}

// Default values for RedPacketContent fields.
const (
	Default_RedPacketContent_RedPacketCFGID = uint32(0)
	Default_RedPacketContent_TotalMoney     = uint32(0)
	Default_RedPacketContent_TotalNum       = uint32(0)
	Default_RedPacketContent_Channel        = EGameChatChannel_ECHAT_CHANNEL_ROUND
	Default_RedPacketContent_Type           = ERedPacketType_EREDPACKETTYPE_MIN
	Default_RedPacketContent_Overtime       = uint32(0)
	Default_RedPacketContent_BOvertime      = bool(false)
	Default_RedPacketContent_BShieldWord    = bool(false)
	Default_RedPacketContent_GuildID        = uint32(0)
	Default_RedPacketContent_CharID         = uint64(0)
	Default_RedPacketContent_AccID          = uint64(0)
	Default_RedPacketContent_RestMoney      = uint32(0)
	Default_RedPacketContent_RestNum        = uint32(0)
)

func (x *RedPacketContent) Reset() {
	*x = RedPacketContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPacketContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPacketContent) ProtoMessage() {}

func (x *RedPacketContent) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPacketContent.ProtoReflect.Descriptor instead.
func (*RedPacketContent) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{30}
}

func (x *RedPacketContent) GetRedPacketCFGID() uint32 {
	if x != nil && x.RedPacketCFGID != nil {
		return *x.RedPacketCFGID
	}
	return Default_RedPacketContent_RedPacketCFGID
}

func (x *RedPacketContent) GetStr() string {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return ""
}

func (x *RedPacketContent) GetTotalMoney() uint32 {
	if x != nil && x.TotalMoney != nil {
		return *x.TotalMoney
	}
	return Default_RedPacketContent_TotalMoney
}

func (x *RedPacketContent) GetTotalNum() uint32 {
	if x != nil && x.TotalNum != nil {
		return *x.TotalNum
	}
	return Default_RedPacketContent_TotalNum
}

func (x *RedPacketContent) GetChannel() EGameChatChannel {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return Default_RedPacketContent_Channel
}

func (x *RedPacketContent) GetType() ERedPacketType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_RedPacketContent_Type
}

func (x *RedPacketContent) GetMoneyID() uint32 {
	if x != nil && x.MoneyID != nil {
		return *x.MoneyID
	}
	return 0
}

func (x *RedPacketContent) GetOvertime() uint32 {
	if x != nil && x.Overtime != nil {
		return *x.Overtime
	}
	return Default_RedPacketContent_Overtime
}

func (x *RedPacketContent) GetBOvertime() bool {
	if x != nil && x.BOvertime != nil {
		return *x.BOvertime
	}
	return Default_RedPacketContent_BOvertime
}

func (x *RedPacketContent) GetBShieldWord() bool {
	if x != nil && x.BShieldWord != nil {
		return *x.BShieldWord
	}
	return Default_RedPacketContent_BShieldWord
}

func (x *RedPacketContent) GetGuildID() uint32 {
	if x != nil && x.GuildID != nil {
		return *x.GuildID
	}
	return Default_RedPacketContent_GuildID
}

func (x *RedPacketContent) GetCharID() uint64 {
	if x != nil && x.CharID != nil {
		return *x.CharID
	}
	return Default_RedPacketContent_CharID
}

func (x *RedPacketContent) GetAccID() uint64 {
	if x != nil && x.AccID != nil {
		return *x.AccID
	}
	return Default_RedPacketContent_AccID
}

func (x *RedPacketContent) GetRestMoney() uint32 {
	if x != nil && x.RestMoney != nil {
		return *x.RestMoney
	}
	return Default_RedPacketContent_RestMoney
}

func (x *RedPacketContent) GetRestNum() uint32 {
	if x != nil && x.RestNum != nil {
		return *x.RestNum
	}
	return Default_RedPacketContent_RestNum
}

func (x *RedPacketContent) GetReceivedInfos() []*ReceivedInfo {
	if x != nil {
		return x.ReceivedInfos
	}
	return nil
}

func (x *RedPacketContent) GetStrRedPacketID() string {
	if x != nil && x.StrRedPacketID != nil {
		return *x.StrRedPacketID
	}
	return ""
}

type ReceivedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivedName  *string `protobuf:"bytes,1,opt,name=receivedName" json:"receivedName,omitempty"`
	ReceivedAccID *uint64 `protobuf:"varint,2,opt,name=receivedAccID,def=0" json:"receivedAccID,omitempty"`
	ReceivedMoney *uint32 `protobuf:"varint,3,opt,name=receivedMoney,def=0" json:"receivedMoney,omitempty"`
}

// Default values for ReceivedInfo fields.
const (
	Default_ReceivedInfo_ReceivedAccID = uint64(0)
	Default_ReceivedInfo_ReceivedMoney = uint32(0)
)

func (x *ReceivedInfo) Reset() {
	*x = ReceivedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedInfo) ProtoMessage() {}

func (x *ReceivedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedInfo.ProtoReflect.Descriptor instead.
func (*ReceivedInfo) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{31}
}

func (x *ReceivedInfo) GetReceivedName() string {
	if x != nil && x.ReceivedName != nil {
		return *x.ReceivedName
	}
	return ""
}

func (x *ReceivedInfo) GetReceivedAccID() uint64 {
	if x != nil && x.ReceivedAccID != nil {
		return *x.ReceivedAccID
	}
	return Default_ReceivedInfo_ReceivedAccID
}

func (x *ReceivedInfo) GetReceivedMoney() uint32 {
	if x != nil && x.ReceivedMoney != nil {
		return *x.ReceivedMoney
	}
	return Default_ReceivedInfo_ReceivedMoney
}

type SendRedPacketCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param      *ChatParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=23" json:"param,omitempty"`
	Content    *RedPacketContent `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	UserIDInfo *ChatUserIDInfo   `protobuf:"bytes,4,opt,name=userIDInfo" json:"userIDInfo,omitempty"`
}

// Default values for SendRedPacketCmd fields.
const (
	Default_SendRedPacketCmd_Cmd   = Command_CHAT_PROTOCMD
	Default_SendRedPacketCmd_Param = ChatParam_CHATPARAM_SEND_RED_PACKET_CMD
)

func (x *SendRedPacketCmd) Reset() {
	*x = SendRedPacketCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRedPacketCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRedPacketCmd) ProtoMessage() {}

func (x *SendRedPacketCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRedPacketCmd.ProtoReflect.Descriptor instead.
func (*SendRedPacketCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{32}
}

func (x *SendRedPacketCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SendRedPacketCmd_Cmd
}

func (x *SendRedPacketCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SendRedPacketCmd_Param
}

func (x *SendRedPacketCmd) GetContent() *RedPacketContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *SendRedPacketCmd) GetUserIDInfo() *ChatUserIDInfo {
	if x != nil {
		return x.UserIDInfo
	}
	return nil
}

type ReceiveRedPacketCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd                  *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param                *ChatParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=24" json:"param,omitempty"`
	StrRedPacketID       *string         `protobuf:"bytes,3,opt,name=strRedPacketID" json:"strRedPacketID,omitempty"`
	SenderID             *uint64         `protobuf:"varint,4,opt,name=senderID,def=0" json:"senderID,omitempty"`
	UserIDInfo           *ChatUserIDInfo `protobuf:"bytes,5,opt,name=userIDInfo" json:"userIDInfo,omitempty"`
	IsBeyondReceiveLinit *bool           `protobuf:"varint,6,opt,name=isBeyondReceiveLinit,def=0" json:"isBeyondReceiveLinit,omitempty"`
}

// Default values for ReceiveRedPacketCmd fields.
const (
	Default_ReceiveRedPacketCmd_Cmd                  = Command_CHAT_PROTOCMD
	Default_ReceiveRedPacketCmd_Param                = ChatParam_CHATPARAM_RECEIVE_RED_PACKET_CMD
	Default_ReceiveRedPacketCmd_SenderID             = uint64(0)
	Default_ReceiveRedPacketCmd_IsBeyondReceiveLinit = bool(false)
)

func (x *ReceiveRedPacketCmd) Reset() {
	*x = ReceiveRedPacketCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveRedPacketCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveRedPacketCmd) ProtoMessage() {}

func (x *ReceiveRedPacketCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveRedPacketCmd.ProtoReflect.Descriptor instead.
func (*ReceiveRedPacketCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{33}
}

func (x *ReceiveRedPacketCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReceiveRedPacketCmd_Cmd
}

func (x *ReceiveRedPacketCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReceiveRedPacketCmd_Param
}

func (x *ReceiveRedPacketCmd) GetStrRedPacketID() string {
	if x != nil && x.StrRedPacketID != nil {
		return *x.StrRedPacketID
	}
	return ""
}

func (x *ReceiveRedPacketCmd) GetSenderID() uint64 {
	if x != nil && x.SenderID != nil {
		return *x.SenderID
	}
	return Default_ReceiveRedPacketCmd_SenderID
}

func (x *ReceiveRedPacketCmd) GetUserIDInfo() *ChatUserIDInfo {
	if x != nil {
		return x.UserIDInfo
	}
	return nil
}

func (x *ReceiveRedPacketCmd) GetIsBeyondReceiveLinit() bool {
	if x != nil && x.IsBeyondReceiveLinit != nil {
		return *x.IsBeyondReceiveLinit
	}
	return Default_ReceiveRedPacketCmd_IsBeyondReceiveLinit
}

type InitUserRedPacketCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param  *ChatParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=25" json:"param,omitempty"`
	CharID *uint64    `protobuf:"varint,3,opt,name=charID,def=0" json:"charID,omitempty"`
}

// Default values for InitUserRedPacketCmd fields.
const (
	Default_InitUserRedPacketCmd_Cmd    = Command_CHAT_PROTOCMD
	Default_InitUserRedPacketCmd_Param  = ChatParam_CHATPARAM_INIT_RED_PACKET_CMD
	Default_InitUserRedPacketCmd_CharID = uint64(0)
)

func (x *InitUserRedPacketCmd) Reset() {
	*x = InitUserRedPacketCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitUserRedPacketCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitUserRedPacketCmd) ProtoMessage() {}

func (x *InitUserRedPacketCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitUserRedPacketCmd.ProtoReflect.Descriptor instead.
func (*InitUserRedPacketCmd) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{34}
}

func (x *InitUserRedPacketCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InitUserRedPacketCmd_Cmd
}

func (x *InitUserRedPacketCmd) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InitUserRedPacketCmd_Param
}

func (x *InitUserRedPacketCmd) GetCharID() uint64 {
	if x != nil && x.CharID != nil {
		return *x.CharID
	}
	return Default_InitUserRedPacketCmd_CharID
}

type SendRedPacketSocialRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrRedPacketID *string `protobuf:"bytes,1,opt,name=strRedPacketID" json:"strRedPacketID,omitempty"`
	ItemID         *uint32 `protobuf:"varint,2,opt,name=itemID,def=0" json:"itemID,omitempty"`
}

// Default values for SendRedPacketSocialRet fields.
const (
	Default_SendRedPacketSocialRet_ItemID = uint32(0)
)

func (x *SendRedPacketSocialRet) Reset() {
	*x = SendRedPacketSocialRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRedPacketSocialRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRedPacketSocialRet) ProtoMessage() {}

func (x *SendRedPacketSocialRet) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRedPacketSocialRet.ProtoReflect.Descriptor instead.
func (*SendRedPacketSocialRet) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{35}
}

func (x *SendRedPacketSocialRet) GetStrRedPacketID() string {
	if x != nil && x.StrRedPacketID != nil {
		return *x.StrRedPacketID
	}
	return ""
}

func (x *SendRedPacketSocialRet) GetItemID() uint32 {
	if x != nil && x.ItemID != nil {
		return *x.ItemID
	}
	return Default_SendRedPacketSocialRet_ItemID
}

type ReceiveRedPacketRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd              *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=59" json:"cmd,omitempty"`
	Param            *ChatParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.ChatParam,def=27" json:"param,omitempty"`
	StrRedPacketID   *string           `protobuf:"bytes,3,opt,name=strRedPacketID" json:"strRedPacketID,omitempty"`
	BRedPacketExist  *bool             `protobuf:"varint,4,opt,name=bRedPacketExist,def=0" json:"bRedPacketExist,omitempty"`
	BRedPacketUsable *bool             `protobuf:"varint,5,opt,name=bRedPacketUsable,def=0" json:"bRedPacketUsable,omitempty"`
	Content          *RedPacketContent `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	ThisReceiveMoney *uint32           `protobuf:"varint,7,opt,name=thisReceiveMoney,def=0" json:"thisReceiveMoney,omitempty"`
	UserIDInfo       *ChatUserIDInfo   `protobuf:"bytes,8,opt,name=userIDInfo" json:"userIDInfo,omitempty"`
}

// Default values for ReceiveRedPacketRet fields.
const (
	Default_ReceiveRedPacketRet_Cmd              = Command_CHAT_PROTOCMD
	Default_ReceiveRedPacketRet_Param            = ChatParam_CHATPARAM_RECEIVE_RED_PACKET_RET
	Default_ReceiveRedPacketRet_BRedPacketExist  = bool(false)
	Default_ReceiveRedPacketRet_BRedPacketUsable = bool(false)
	Default_ReceiveRedPacketRet_ThisReceiveMoney = uint32(0)
)

func (x *ReceiveRedPacketRet) Reset() {
	*x = ReceiveRedPacketRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ChatCmd_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveRedPacketRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveRedPacketRet) ProtoMessage() {}

func (x *ReceiveRedPacketRet) ProtoReflect() protoreflect.Message {
	mi := &file_ChatCmd_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveRedPacketRet.ProtoReflect.Descriptor instead.
func (*ReceiveRedPacketRet) Descriptor() ([]byte, []int) {
	return file_ChatCmd_proto_rawDescGZIP(), []int{36}
}

func (x *ReceiveRedPacketRet) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReceiveRedPacketRet_Cmd
}

func (x *ReceiveRedPacketRet) GetParam() ChatParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReceiveRedPacketRet_Param
}

func (x *ReceiveRedPacketRet) GetStrRedPacketID() string {
	if x != nil && x.StrRedPacketID != nil {
		return *x.StrRedPacketID
	}
	return ""
}

func (x *ReceiveRedPacketRet) GetBRedPacketExist() bool {
	if x != nil && x.BRedPacketExist != nil {
		return *x.BRedPacketExist
	}
	return Default_ReceiveRedPacketRet_BRedPacketExist
}

func (x *ReceiveRedPacketRet) GetBRedPacketUsable() bool {
	if x != nil && x.BRedPacketUsable != nil {
		return *x.BRedPacketUsable
	}
	return Default_ReceiveRedPacketRet_BRedPacketUsable
}

func (x *ReceiveRedPacketRet) GetContent() *RedPacketContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ReceiveRedPacketRet) GetThisReceiveMoney() uint32 {
	if x != nil && x.ThisReceiveMoney != nil {
		return *x.ThisReceiveMoney
	}
	return Default_ReceiveRedPacketRet_ThisReceiveMoney
}

func (x *ReceiveRedPacketRet) GetUserIDInfo() *ChatUserIDInfo {
	if x != nil {
		return x.UserIDInfo
	}
	return nil
}

var File_ChatCmd_proto protoreflect.FileDescriptor

var file_ChatCmd_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x43, 0x6d,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x07, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x3a, 0x0f, 0x45, 0x4f, 0x46,
	0x46, 0x4c, 0x49, 0x4e, 0x45, 0x4d, 0x53, 0x47, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x74, 0x43, 0x6d,
	0x64, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6d, 0x64, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x09,
	0x67, 0x69, 0x76, 0x65, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x3d, 0x0a,
	0x09, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x0e, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x73, 0x73, 0x74, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x73, 0x73, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x6d, 0x63, 0x6d, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x6d, 0x63, 0x6d, 0x64, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x61, 0x63, 0x63, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x63, 0x6d, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x79, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x73,
	0x79, 0x73, 0x63, 0x6d, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x74, 0x75,
	0x74, 0x6f, 0x72, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x61, 0x64, 0x64, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4f, 0x66, 0x66, 0x4d, 0x73, 0x67, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x0a, 0x77, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x73,
	0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x43, 0x43, 0x6d,
	0x64, 0x52, 0x0a, 0x77, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a,
	0x09, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4f, 0x66, 0x66, 0x4d, 0x73, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0f, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x0f, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x79, 0x0a, 0x11, 0x4f, 0x66, 0x66, 0x4d, 0x73, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x45, 0x55,
	0x53, 0x45, 0x52, 0x41, 0x44, 0x44, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa9, 0x01,
	0x0a, 0x13, 0x4f, 0x66, 0x66, 0x4d, 0x73, 0x67, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x3b,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4f, 0x70, 0x65,
	0x72, 0x3a, 0x12, 0x45, 0x55, 0x53, 0x45, 0x52, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x4f, 0x50, 0x45,
	0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x17, 0x45, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x5f, 0x47, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x0d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x43, 0x48, 0x41, 0x54, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x49, 0x54, 0x45, 0x4d, 0x44, 0x41,
	0x54, 0x41, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xc8, 0x01, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0xb8, 0x03, 0x0a, 0x0d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6a, 0x6f, 0x62, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6a, 0x6f, 0x62, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x65, 0x71, 0x75, 0x69, 0x70, 0x12, 0x27,
	0x0a, 0x07, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x72,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x22, 0x9c, 0x02, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6d, 0x64, 0x12,
	0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x43,
	0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x55, 0x53,
	0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x69,
	0x64, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x12, 0x45, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x07, 0x47, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x29, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x67, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x67, 0x65, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x67, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x67, 0x65, 0x6d, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6d, 0x64,
	0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13,
	0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x47, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63,
	0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x0e, 0x42,
	0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x43, 0x48, 0x41,
	0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x41, 0x47, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x32, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x74, 0x3a, 0x0e, 0x45, 0x42, 0x41, 0x52, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x22, 0x44, 0x0a, 0x09, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x03, 0x32, 0x35, 0x35, 0x52, 0x01, 0x72, 0x12, 0x11, 0x0a, 0x01, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x32, 0x35, 0x35, 0x52, 0x01, 0x67, 0x12, 0x11, 0x0a, 0x01,
	0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x32, 0x35, 0x35, 0x52, 0x01, 0x62, 0x22,
	0xcf, 0x02, 0x0a, 0x11, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x14, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42,
	0x41, 0x52, 0x52, 0x41, 0x47, 0x45, 0x4d, 0x53, 0x47, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x74, 0x72, 0x12, 0x25, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f,
	0x73, 0x52, 0x06, 0x6d, 0x73, 0x67, 0x70, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x03, 0x63, 0x6c, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x63, 0x6c, 0x72, 0x12, 0x17, 0x0a, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x62, 0x73, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x62, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0xd6, 0x03, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0e, 0x43, 0x48, 0x41,
	0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x13, 0x45, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65,
	0x73, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x65, 0x73, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0b, 0x62, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x62,
	0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x93, 0x09, 0x0a, 0x0a, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x02, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x63, 0x63, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f,
	0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a,
	0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x04, 0x68,
	0x61, 0x69, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x68, 0x61,
	0x69, 0x72, 0x12, 0x1f, 0x0a, 0x09, 0x68, 0x61, 0x69, 0x72, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x68, 0x61, 0x69, 0x72, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12,
	0x15, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x12,
	0x13, 0x0a, 0x03, 0x65, 0x79, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x03, 0x65, 0x79, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x70, 0x6f, 0x72, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x13, 0x45,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x07, 0x72,
	0x6f, 0x6c, 0x65, 0x6a, 0x6f, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x0f,
	0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x07, 0x72, 0x6f, 0x6c, 0x65, 0x6a, 0x6f, 0x62, 0x12, 0x31, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x3a, 0x0b, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x4d, 0x49, 0x4e, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x05, 0x62,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x08,
	0x73, 0x79, 0x73, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x08, 0x73, 0x79, 0x73, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x72, 0x65, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x52, 0x0c,
	0x72, 0x65, 0x64, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x72, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x73, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x75, 0x73, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x75, 0x73, 0x65, 0x72,
	0x22, 0xec, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x07, 0x6d, 0x73, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x22,
	0x92, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x44, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x15, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x49, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xa7, 0x02, 0x0a, 0x0d, 0x4c, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x4e, 0x74, 0x66, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4c, 0x4f, 0x56, 0x45, 0x5f, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x62, 0x67, 0x12, 0x1d, 0x0a, 0x08, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32, 0x22, 0x99,
	0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4e, 0x74, 0x66, 0x12, 0x2d,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x43, 0x48,
	0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x45, 0x4c,
	0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x6d, 0x64, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x22, 0xc5, 0x02, 0x0a, 0x0a, 0x4e,
	0x70, 0x63, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x74, 0x66, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4e, 0x50, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4e, 0x54, 0x46, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x11,
	0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x49,
	0x4e, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x70,
	0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x70,
	0x63, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75,
	0x69, 0x64, 0x22, 0xe5, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x44, 0x43, 0x6d, 0x64, 0x12, 0x2d,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x43, 0x48,
	0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x11,
	0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x49,
	0x4e, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x14, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1e, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0xe2, 0x01, 0x0a, 0x14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x41, 0x47, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x15,
	0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x42, 0x41, 0x52, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4e,
	0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6d,
	0x73, 0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x69, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x17, 0x45, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x45, 0x58,
	0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x1e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x23, 0x43, 0x48, 0x41,
	0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f,
	0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xfc, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x24, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41,
	0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x31, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x22,
	0xcd, 0x02, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x14, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45,
	0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x42, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x11, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xe1, 0x02, 0x0a, 0x0f, 0x46, 0x61, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x12, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x43,
	0x45, 0x53, 0x48, 0x4f, 0x57, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x42, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x11, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x67, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x4c, 0x4f, 0x47, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xde, 0x04, 0x0a,
	0x0c, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a,
	0x05, 0x61, 0x63, 0x63, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x61, 0x63, 0x63, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x04, 0x68, 0x61, 0x69,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x68, 0x61, 0x69, 0x72,
	0x12, 0x1f, 0x0a, 0x09, 0x68, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x68, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x15, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x65,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04,
	0x68, 0x65, 0x61, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6d,
	0x6f, 0x75, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d,
	0x6f, 0x75, 0x74, 0x68, 0x12, 0x13, 0x0a, 0x03, 0x65, 0x79, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x65, 0x79, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x0d, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x0f, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x49, 0x4e, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x31, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x3a, 0x0b, 0x45, 0x47, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc2, 0x01,
	0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x17, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x05, 0x61, 0x63, 0x63, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x44, 0x22, 0x8b, 0x05, 0x0a, 0x10, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x46, 0x47, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x46, 0x47,
	0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x74, 0x72, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x13,
	0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x12, 0x45, 0x52, 0x45, 0x44, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x09, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x62, 0x4f,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x62, 0x53, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x0b, 0x62, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x6f, 0x72, 0x64,
	0x12, 0x1b, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x19, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x49,
	0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x63, 0x63, 0x49,
	0x44, 0x12, 0x1f, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x72, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x1b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12,
	0x37, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x52,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x74, 0x72, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x22, 0x84, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x63, 0x63, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x49, 0x44, 0x12, 0x27,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0xec, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x43, 0x48, 0x41, 0x54,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x33, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc3, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x2d,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x43, 0x48,
	0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f,
	0x52, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x52, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x74, 0x72, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1d, 0x0a,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x39, 0x0a, 0x14, 0x69, 0x73, 0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14, 0x69, 0x73, 0x42, 0x65, 0x79, 0x6f, 0x6e, 0x64,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x6e, 0x69, 0x74, 0x22, 0xa5, 0x01, 0x0a,
	0x14, 0x49, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43,
	0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x74, 0x72, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49,
	0x44, 0x22, 0xad, 0x03, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x0f, 0x62, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x62, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x10, 0x62, 0x52, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x62, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x10, 0x74, 0x68, 0x69, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x74, 0x68, 0x69, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x49, 0x6e, 0x66,
	0x6f, 0x2a, 0x9b, 0x06, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x49, 0x54, 0x45, 0x4d, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x58,
	0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48,
	0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x55, 0x53, 0x45,
	0x52, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x54, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x41, 0x52, 0x52,
	0x41, 0x47, 0x45, 0x4d, 0x53, 0x47, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x54,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52,
	0x45, 0x54, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x08, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x49, 0x44, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48,
	0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x56, 0x45, 0x5f, 0x4c, 0x45, 0x54,
	0x54, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x0c, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x50, 0x43, 0x5f,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x48,
	0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10,
	0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x41, 0x47, 0x45, 0x10, 0x0f, 0x12,
	0x22, 0x0a, 0x1e, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x10, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x11, 0x12, 0x28, 0x0a, 0x24,
	0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x13,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x47, 0x45, 0x4d, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41,
	0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x53, 0x48, 0x4f, 0x57, 0x10,
	0x15, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x4c, 0x4f, 0x47, 0x10, 0x16, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x48,
	0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x44,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x17, 0x12, 0x24, 0x0a,
	0x20, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4d,
	0x44, 0x10, 0x18, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x43, 0x4d, 0x44, 0x10, 0x19, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x10, 0x1a, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x48, 0x41,
	0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x52,
	0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x10, 0x1b, 0x2a,
	0xa5, 0x03, 0x0a, 0x0b, 0x45, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x4d, 0x53, 0x47, 0x5f, 0x4d,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45,
	0x4d, 0x53, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4f,
	0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x4d, 0x53, 0x47,
	0x5f, 0x47, 0x4d, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e,
	0x45, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4f,
	0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x32, 0x10, 0x05,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x4d, 0x53, 0x47, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x4d, 0x53, 0x47, 0x5f, 0x41,
	0x44, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4f, 0x46,
	0x46, 0x4c, 0x49, 0x4e, 0x45, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x52,
	0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4f, 0x46, 0x46, 0x4c,
	0x49, 0x4e, 0x45, 0x4d, 0x53, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4f, 0x46, 0x46, 0x4c, 0x49,
	0x4e, 0x45, 0x4d, 0x53, 0x47, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x4d, 0x53, 0x47, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x4d, 0x53, 0x47, 0x5f, 0x41, 0x43, 0x43, 0x47, 0x4d,
	0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x4d, 0x53,
	0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x4c, 0x49, 0x4b, 0x45,
	0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x4d, 0x53,
	0x47, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x10, 0x2a, 0x4f, 0x0a, 0x10, 0x45, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x55, 0x53, 0x45, 0x52, 0x41, 0x44, 0x44, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x55, 0x53, 0x45, 0x52, 0x41, 0x44,
	0x44, 0x49, 0x54, 0x45, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x01, 0x2a, 0x7a, 0x0a, 0x0e, 0x45, 0x55, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x55,
	0x53, 0x45, 0x52, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x55, 0x53, 0x45, 0x52, 0x51, 0x55, 0x4f, 0x54, 0x41,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x55, 0x53, 0x45, 0x52, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x4f, 0x50, 0x45, 0x52, 0x5f,
	0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x55, 0x42, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x55, 0x53, 0x45, 0x52, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x58, 0x10, 0x03, 0x2a, 0x42, 0x0a, 0x0d, 0x45, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e,
	0x46, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57,
	0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x2a, 0x34, 0x0a, 0x0b, 0x45, 0x42, 0x61, 0x72,
	0x72, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x42, 0x41, 0x52, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x42,
	0x41, 0x52, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x2a, 0xd9,
	0x02, 0x0a, 0x10, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x43,
	0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x57, 0x4f, 0x52, 0x4c, 0x44, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x43, 0x48, 0x41, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x06, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x53, 0x59, 0x53, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x08, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x42,
	0x41, 0x52, 0x52, 0x41, 0x47, 0x45, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x0a,
	0x12, 0x21, 0x0a, 0x1d, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x52, 0x4f, 0x4f,
	0x4d, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x0c, 0x2a, 0x2f, 0x0a, 0x12, 0x45, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x72, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x42, 0x41, 0x52, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x2a, 0x8e, 0x01, 0x0a, 0x13,
	0x45, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45,
	0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x45, 0x58, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x45, 0x58, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4d, 0x4f, 0x4a, 0x49, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x45, 0x58, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x71, 0x0a, 0x0e,
	0x45, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x52, 0x45, 0x44, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x45, 0x44, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x52, 0x45, 0x44, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x45, 0x44, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03,
}

var (
	file_ChatCmd_proto_rawDescOnce sync.Once
	file_ChatCmd_proto_rawDescData = file_ChatCmd_proto_rawDesc
)

func file_ChatCmd_proto_rawDescGZIP() []byte {
	file_ChatCmd_proto_rawDescOnce.Do(func() {
		file_ChatCmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_ChatCmd_proto_rawDescData)
	})
	return file_ChatCmd_proto_rawDescData
}

var file_ChatCmd_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_ChatCmd_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_ChatCmd_proto_goTypes = []interface{}{
	(ChatParam)(0),                          // 0: Cmd.ChatParam
	(EOfflineMsg)(0),                        // 1: Cmd.EOfflineMsg
	(EUserAddItemType)(0),                   // 2: Cmd.EUserAddItemType
	(EUserQuotaOper)(0),                     // 3: Cmd.EUserQuotaOper
	(EUserInfoType)(0),                      // 4: Cmd.EUserInfoType
	(EBarrageOpt)(0),                        // 5: Cmd.EBarrageOpt
	(EGameChatChannel)(0),                   // 6: Cmd.EGameChatChannel
	(ESystemBarrageType)(0),                 // 7: Cmd.ESystemBarrageType
	(EFavoriteExpression)(0),                // 8: Cmd.EFavoriteExpression
	(ERedPacketType)(0),                     // 9: Cmd.ERedPacketType
	(*OfflineMsg)(nil),                      // 10: Cmd.OfflineMsg
	(*OffMsgUserAddItem)(nil),               // 11: Cmd.OffMsgUserAddItem
	(*OffMsgUserQuotaData)(nil),             // 12: Cmd.OffMsgUserQuotaData
	(*QueryItemData)(nil),                   // 13: Cmd.QueryItemData
	(*PlayExpressionChatCmd)(nil),           // 14: Cmd.PlayExpressionChatCmd
	(*QueryUserInfo)(nil),                   // 15: Cmd.QueryUserInfo
	(*QueryUserInfoChatCmd)(nil),            // 16: Cmd.QueryUserInfoChatCmd
	(*GemInfo)(nil),                         // 17: Cmd.GemInfo
	(*QueryUserGemChatCmd)(nil),             // 18: Cmd.QueryUserGemChatCmd
	(*BarrageChatCmd)(nil),                  // 19: Cmd.BarrageChatCmd
	(*ColorInfo)(nil),                       // 20: Cmd.ColorInfo
	(*BarrageMsgChatCmd)(nil),               // 21: Cmd.BarrageMsgChatCmd
	(*ChatCmd)(nil),                         // 22: Cmd.ChatCmd
	(*ChatRetCmd)(nil),                      // 23: Cmd.ChatRetCmd
	(*QueryVoiceUserCmd)(nil),               // 24: Cmd.QueryVoiceUserCmd
	(*GetVoiceIDChatCmd)(nil),               // 25: Cmd.GetVoiceIDChatCmd
	(*LoveLetterNtf)(nil),                   // 26: Cmd.LoveLetterNtf
	(*ChatSelfNtf)(nil),                     // 27: Cmd.ChatSelfNtf
	(*NpcChatNtf)(nil),                      // 28: Cmd.NpcChatNtf
	(*QueryRealtimeVoiceIDCmd)(nil),         // 29: Cmd.QueryRealtimeVoiceIDCmd
	(*QueryUserShowInfoCmd)(nil),            // 30: Cmd.QueryUserShowInfoCmd
	(*SystemBarrageChatCmd)(nil),            // 31: Cmd.SystemBarrageChatCmd
	(*FavoriteExpression)(nil),              // 32: Cmd.FavoriteExpression
	(*QueryFavoriteExpressionChatCmd)(nil),  // 33: Cmd.QueryFavoriteExpressionChatCmd
	(*UpdateFavoriteExpressionChatCmd)(nil), // 34: Cmd.UpdateFavoriteExpressionChatCmd
	(*ExpressionChatCmd)(nil),               // 35: Cmd.ExpressionChatCmd
	(*FaceShowChatCmd)(nil),                 // 36: Cmd.FaceShowChatCmd
	(*ClientLogChatCmd)(nil),                // 37: Cmd.ClientLogChatCmd
	(*ChatUserInfo)(nil),                    // 38: Cmd.ChatUserInfo
	(*ChatUserIDInfo)(nil),                  // 39: Cmd.ChatUserIDInfo
	(*RedPacketContent)(nil),                // 40: Cmd.RedPacketContent
	(*ReceivedInfo)(nil),                    // 41: Cmd.ReceivedInfo
	(*SendRedPacketCmd)(nil),                // 42: Cmd.SendRedPacketCmd
	(*ReceiveRedPacketCmd)(nil),             // 43: Cmd.ReceiveRedPacketCmd
	(*InitUserRedPacketCmd)(nil),            // 44: Cmd.InitUserRedPacketCmd
	(*SendRedPacketSocialRet)(nil),          // 45: Cmd.SendRedPacketSocialRet
	(*ReceiveRedPacketRet)(nil),             // 46: Cmd.ReceiveRedPacketRet
	(EMoneyType)(0),                         // 47: Cmd.EMoneyType
	(*ItemData)(nil),                        // 48: Cmd.ItemData
	(*SysMsg)(nil),                          // 49: Cmd.SysMsg
	(*TutorReward)(nil),                     // 50: Cmd.TutorReward
	(*WeddingEventMsgCCmd)(nil),             // 51: Cmd.WeddingEventMsgCCmd
	(*ItemInfo)(nil),                        // 52: Cmd.ItemInfo
	(EQuotaType)(0),                         // 53: Cmd.EQuotaType
	(Command)(0),                            // 54: Cmd.Command
	(*UserData)(nil),                        // 55: Cmd.UserData
	(*UserAttr)(nil),                        // 56: Cmd.UserAttr
	(*HighRefineData)(nil),                  // 57: Cmd.HighRefineData
	(*ScenePos)(nil),                        // 58: Cmd.ScenePos
	(*GuildPhoto)(nil),                      // 59: Cmd.GuildPhoto
	(EProfession)(0),                        // 60: Cmd.EProfession
	(EGender)(0),                            // 61: Cmd.EGender
	(*MsgParam)(nil),                        // 62: Cmd.MsgParam
}
var file_ChatCmd_proto_depIdxs = []int32{
	1,   // 0: Cmd.OfflineMsg.type:type_name -> Cmd.EOfflineMsg
	23,  // 1: Cmd.OfflineMsg.chat:type_name -> Cmd.ChatRetCmd
	35,  // 2: Cmd.OfflineMsg.expression:type_name -> Cmd.ExpressionChatCmd
	47,  // 3: Cmd.OfflineMsg.moneytype:type_name -> Cmd.EMoneyType
	48,  // 4: Cmd.OfflineMsg.itemdata:type_name -> Cmd.ItemData
	49,  // 5: Cmd.OfflineMsg.syscmd:type_name -> Cmd.SysMsg
	50,  // 6: Cmd.OfflineMsg.tutorreward:type_name -> Cmd.TutorReward
	11,  // 7: Cmd.OfflineMsg.useradditem:type_name -> Cmd.OffMsgUserAddItem
	51,  // 8: Cmd.OfflineMsg.weddingmsg:type_name -> Cmd.WeddingEventMsgCCmd
	12,  // 9: Cmd.OfflineMsg.quotadata:type_name -> Cmd.OffMsgUserQuotaData
	2,   // 10: Cmd.OffMsgUserAddItem.type:type_name -> Cmd.EUserAddItemType
	52,  // 11: Cmd.OffMsgUserAddItem.items:type_name -> Cmd.ItemInfo
	3,   // 12: Cmd.OffMsgUserQuotaData.oper:type_name -> Cmd.EUserQuotaOper
	53,  // 13: Cmd.OffMsgUserQuotaData.type:type_name -> Cmd.EQuotaType
	54,  // 14: Cmd.QueryItemData.cmd:type_name -> Cmd.Command
	0,   // 15: Cmd.QueryItemData.param:type_name -> Cmd.ChatParam
	48,  // 16: Cmd.QueryItemData.data:type_name -> Cmd.ItemData
	54,  // 17: Cmd.PlayExpressionChatCmd.cmd:type_name -> Cmd.Command
	0,   // 18: Cmd.PlayExpressionChatCmd.param:type_name -> Cmd.ChatParam
	55,  // 19: Cmd.QueryUserInfo.datas:type_name -> Cmd.UserData
	56,  // 20: Cmd.QueryUserInfo.attrs:type_name -> Cmd.UserAttr
	48,  // 21: Cmd.QueryUserInfo.equip:type_name -> Cmd.ItemData
	48,  // 22: Cmd.QueryUserInfo.fashion:type_name -> Cmd.ItemData
	57,  // 23: Cmd.QueryUserInfo.highrefine:type_name -> Cmd.HighRefineData
	54,  // 24: Cmd.QueryUserInfoChatCmd.cmd:type_name -> Cmd.Command
	0,   // 25: Cmd.QueryUserInfoChatCmd.param:type_name -> Cmd.ChatParam
	4,   // 26: Cmd.QueryUserInfoChatCmd.type:type_name -> Cmd.EUserInfoType
	15,  // 27: Cmd.QueryUserInfoChatCmd.info:type_name -> Cmd.QueryUserInfo
	48,  // 28: Cmd.GemInfo.attrgems:type_name -> Cmd.ItemData
	48,  // 29: Cmd.GemInfo.skillgems:type_name -> Cmd.ItemData
	54,  // 30: Cmd.QueryUserGemChatCmd.cmd:type_name -> Cmd.Command
	0,   // 31: Cmd.QueryUserGemChatCmd.param:type_name -> Cmd.ChatParam
	17,  // 32: Cmd.QueryUserGemChatCmd.info:type_name -> Cmd.GemInfo
	54,  // 33: Cmd.BarrageChatCmd.cmd:type_name -> Cmd.Command
	0,   // 34: Cmd.BarrageChatCmd.param:type_name -> Cmd.ChatParam
	5,   // 35: Cmd.BarrageChatCmd.opt:type_name -> Cmd.EBarrageOpt
	54,  // 36: Cmd.BarrageMsgChatCmd.cmd:type_name -> Cmd.Command
	0,   // 37: Cmd.BarrageMsgChatCmd.param:type_name -> Cmd.ChatParam
	58,  // 38: Cmd.BarrageMsgChatCmd.msgpos:type_name -> Cmd.ScenePos
	20,  // 39: Cmd.BarrageMsgChatCmd.clr:type_name -> Cmd.ColorInfo
	54,  // 40: Cmd.ChatCmd.cmd:type_name -> Cmd.Command
	0,   // 41: Cmd.ChatCmd.param:type_name -> Cmd.ChatParam
	6,   // 42: Cmd.ChatCmd.channel:type_name -> Cmd.EGameChatChannel
	59,  // 43: Cmd.ChatCmd.photo:type_name -> Cmd.GuildPhoto
	32,  // 44: Cmd.ChatCmd.expression:type_name -> Cmd.FavoriteExpression
	54,  // 45: Cmd.ChatRetCmd.cmd:type_name -> Cmd.Command
	0,   // 46: Cmd.ChatRetCmd.param:type_name -> Cmd.ChatParam
	6,   // 47: Cmd.ChatRetCmd.channel:type_name -> Cmd.EGameChatChannel
	60,  // 48: Cmd.ChatRetCmd.rolejob:type_name -> Cmd.EProfession
	61,  // 49: Cmd.ChatRetCmd.gender:type_name -> Cmd.EGender
	59,  // 50: Cmd.ChatRetCmd.photo:type_name -> Cmd.GuildPhoto
	32,  // 51: Cmd.ChatRetCmd.expression:type_name -> Cmd.FavoriteExpression
	45,  // 52: Cmd.ChatRetCmd.redpacketret:type_name -> Cmd.SendRedPacketSocialRet
	54,  // 53: Cmd.QueryVoiceUserCmd.cmd:type_name -> Cmd.Command
	0,   // 54: Cmd.QueryVoiceUserCmd.param:type_name -> Cmd.ChatParam
	54,  // 55: Cmd.GetVoiceIDChatCmd.cmd:type_name -> Cmd.Command
	0,   // 56: Cmd.GetVoiceIDChatCmd.param:type_name -> Cmd.ChatParam
	54,  // 57: Cmd.LoveLetterNtf.cmd:type_name -> Cmd.Command
	0,   // 58: Cmd.LoveLetterNtf.param:type_name -> Cmd.ChatParam
	54,  // 59: Cmd.ChatSelfNtf.cmd:type_name -> Cmd.Command
	0,   // 60: Cmd.ChatSelfNtf.param:type_name -> Cmd.ChatParam
	22,  // 61: Cmd.ChatSelfNtf.chat:type_name -> Cmd.ChatCmd
	54,  // 62: Cmd.NpcChatNtf.cmd:type_name -> Cmd.Command
	0,   // 63: Cmd.NpcChatNtf.param:type_name -> Cmd.ChatParam
	6,   // 64: Cmd.NpcChatNtf.channel:type_name -> Cmd.EGameChatChannel
	62,  // 65: Cmd.NpcChatNtf.params:type_name -> Cmd.MsgParam
	54,  // 66: Cmd.QueryRealtimeVoiceIDCmd.cmd:type_name -> Cmd.Command
	0,   // 67: Cmd.QueryRealtimeVoiceIDCmd.param:type_name -> Cmd.ChatParam
	6,   // 68: Cmd.QueryRealtimeVoiceIDCmd.channel:type_name -> Cmd.EGameChatChannel
	54,  // 69: Cmd.QueryUserShowInfoCmd.cmd:type_name -> Cmd.Command
	0,   // 70: Cmd.QueryUserShowInfoCmd.param:type_name -> Cmd.ChatParam
	15,  // 71: Cmd.QueryUserShowInfoCmd.info:type_name -> Cmd.QueryUserInfo
	54,  // 72: Cmd.SystemBarrageChatCmd.cmd:type_name -> Cmd.Command
	0,   // 73: Cmd.SystemBarrageChatCmd.param:type_name -> Cmd.ChatParam
	7,   // 74: Cmd.SystemBarrageChatCmd.type:type_name -> Cmd.ESystemBarrageType
	8,   // 75: Cmd.FavoriteExpression.type:type_name -> Cmd.EFavoriteExpression
	54,  // 76: Cmd.QueryFavoriteExpressionChatCmd.cmd:type_name -> Cmd.Command
	0,   // 77: Cmd.QueryFavoriteExpressionChatCmd.param:type_name -> Cmd.ChatParam
	32,  // 78: Cmd.QueryFavoriteExpressionChatCmd.expression:type_name -> Cmd.FavoriteExpression
	54,  // 79: Cmd.UpdateFavoriteExpressionChatCmd.cmd:type_name -> Cmd.Command
	0,   // 80: Cmd.UpdateFavoriteExpressionChatCmd.param:type_name -> Cmd.ChatParam
	32,  // 81: Cmd.UpdateFavoriteExpressionChatCmd.updates:type_name -> Cmd.FavoriteExpression
	32,  // 82: Cmd.UpdateFavoriteExpressionChatCmd.dels:type_name -> Cmd.FavoriteExpression
	54,  // 83: Cmd.ExpressionChatCmd.cmd:type_name -> Cmd.Command
	0,   // 84: Cmd.ExpressionChatCmd.param:type_name -> Cmd.ChatParam
	6,   // 85: Cmd.ExpressionChatCmd.channel:type_name -> Cmd.EGameChatChannel
	54,  // 86: Cmd.FaceShowChatCmd.cmd:type_name -> Cmd.Command
	0,   // 87: Cmd.FaceShowChatCmd.param:type_name -> Cmd.ChatParam
	6,   // 88: Cmd.FaceShowChatCmd.channel:type_name -> Cmd.EGameChatChannel
	54,  // 89: Cmd.ClientLogChatCmd.cmd:type_name -> Cmd.Command
	0,   // 90: Cmd.ClientLogChatCmd.param:type_name -> Cmd.ChatParam
	60,  // 91: Cmd.ChatUserInfo.roleJob:type_name -> Cmd.EProfession
	61,  // 92: Cmd.ChatUserInfo.gender:type_name -> Cmd.EGender
	6,   // 93: Cmd.RedPacketContent.channel:type_name -> Cmd.EGameChatChannel
	9,   // 94: Cmd.RedPacketContent.type:type_name -> Cmd.ERedPacketType
	41,  // 95: Cmd.RedPacketContent.receivedInfos:type_name -> Cmd.ReceivedInfo
	54,  // 96: Cmd.SendRedPacketCmd.cmd:type_name -> Cmd.Command
	0,   // 97: Cmd.SendRedPacketCmd.param:type_name -> Cmd.ChatParam
	40,  // 98: Cmd.SendRedPacketCmd.content:type_name -> Cmd.RedPacketContent
	39,  // 99: Cmd.SendRedPacketCmd.userIDInfo:type_name -> Cmd.ChatUserIDInfo
	54,  // 100: Cmd.ReceiveRedPacketCmd.cmd:type_name -> Cmd.Command
	0,   // 101: Cmd.ReceiveRedPacketCmd.param:type_name -> Cmd.ChatParam
	39,  // 102: Cmd.ReceiveRedPacketCmd.userIDInfo:type_name -> Cmd.ChatUserIDInfo
	54,  // 103: Cmd.InitUserRedPacketCmd.cmd:type_name -> Cmd.Command
	0,   // 104: Cmd.InitUserRedPacketCmd.param:type_name -> Cmd.ChatParam
	54,  // 105: Cmd.ReceiveRedPacketRet.cmd:type_name -> Cmd.Command
	0,   // 106: Cmd.ReceiveRedPacketRet.param:type_name -> Cmd.ChatParam
	40,  // 107: Cmd.ReceiveRedPacketRet.content:type_name -> Cmd.RedPacketContent
	39,  // 108: Cmd.ReceiveRedPacketRet.userIDInfo:type_name -> Cmd.ChatUserIDInfo
	109, // [109:109] is the sub-list for method output_type
	109, // [109:109] is the sub-list for method input_type
	109, // [109:109] is the sub-list for extension type_name
	109, // [109:109] is the sub-list for extension extendee
	0,   // [0:109] is the sub-list for field type_name
}

func init() { file_ChatCmd_proto_init() }
func file_ChatCmd_proto_init() {
	if File_ChatCmd_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	file_SceneItem_proto_init()
	file_SceneUser_proto_init()
	file_SceneUser2_proto_init()
	file_Tutor_proto_init()
	file_WeddingCCmd_proto_init()
	file_GuildCmd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ChatCmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfflineMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffMsgUserAddItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffMsgUserQuotaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryItemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayExpressionChatCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserInfoChatCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserGemChatCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarrageChatCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarrageMsgChatCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRetCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVoiceUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVoiceIDChatCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoveLetterNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatSelfNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpcChatNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRealtimeVoiceIDCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserShowInfoCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemBarrageChatCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavoriteExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFavoriteExpressionChatCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFavoriteExpressionChatCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpressionChatCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaceShowChatCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientLogChatCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatUserIDInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPacketContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRedPacketCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveRedPacketCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitUserRedPacketCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRedPacketSocialRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ChatCmd_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveRedPacketRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ChatCmd_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ChatCmd_proto_goTypes,
		DependencyIndexes: file_ChatCmd_proto_depIdxs,
		EnumInfos:         file_ChatCmd_proto_enumTypes,
		MessageInfos:      file_ChatCmd_proto_msgTypes,
	}.Build()
	File_ChatCmd_proto = out.File
	file_ChatCmd_proto_rawDesc = nil
	file_ChatCmd_proto_goTypes = nil
	file_ChatCmd_proto_depIdxs = nil
}
