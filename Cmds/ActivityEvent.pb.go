// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: ActivityEvent.proto

package Cmd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActivityEventParam int32

const (
	ActivityEventParam_ACTIVITYEVENTPARAM_NTF           ActivityEventParam = 1
	ActivityEventParam_ACTIVITYEVENTPARAM_USER_DATA_NTF ActivityEventParam = 2
	ActivityEventParam_ACTIVITYEVENTPARAM_NTF_EVENT_CNT ActivityEventParam = 3
)

// Enum value maps for ActivityEventParam.
var (
	ActivityEventParam_name = map[int32]string{
		1: "ACTIVITYEVENTPARAM_NTF",
		2: "ACTIVITYEVENTPARAM_USER_DATA_NTF",
		3: "ACTIVITYEVENTPARAM_NTF_EVENT_CNT",
	}
	ActivityEventParam_value = map[string]int32{
		"ACTIVITYEVENTPARAM_NTF":           1,
		"ACTIVITYEVENTPARAM_USER_DATA_NTF": 2,
		"ACTIVITYEVENTPARAM_NTF_EVENT_CNT": 3,
	}
)

func (x ActivityEventParam) Enum() *ActivityEventParam {
	p := new(ActivityEventParam)
	*p = x
	return p
}

func (x ActivityEventParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityEventParam) Descriptor() protoreflect.EnumDescriptor {
	return file_ActivityEvent_proto_enumTypes[0].Descriptor()
}

func (ActivityEventParam) Type() protoreflect.EnumType {
	return &file_ActivityEvent_proto_enumTypes[0]
}

func (x ActivityEventParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActivityEventParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActivityEventParam(num)
	return nil
}

// Deprecated: Use ActivityEventParam.Descriptor instead.
func (ActivityEventParam) EnumDescriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{0}
}

type ETwelvePvpMode int32

const (
	ETwelvePvpMode_ETWELVEPVPMODE_MIN      ETwelvePvpMode = 0
	ETwelvePvpMode_ETWELVEPVPMODE_NORMAL   ETwelvePvpMode = 1
	ETwelvePvpMode_ETWELVEPVPMODE_CHAMPION ETwelvePvpMode = 2
)

// Enum value maps for ETwelvePvpMode.
var (
	ETwelvePvpMode_name = map[int32]string{
		0: "ETWELVEPVPMODE_MIN",
		1: "ETWELVEPVPMODE_NORMAL",
		2: "ETWELVEPVPMODE_CHAMPION",
	}
	ETwelvePvpMode_value = map[string]int32{
		"ETWELVEPVPMODE_MIN":      0,
		"ETWELVEPVPMODE_NORMAL":   1,
		"ETWELVEPVPMODE_CHAMPION": 2,
	}
)

func (x ETwelvePvpMode) Enum() *ETwelvePvpMode {
	p := new(ETwelvePvpMode)
	*p = x
	return p
}

func (x ETwelvePvpMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETwelvePvpMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ActivityEvent_proto_enumTypes[1].Descriptor()
}

func (ETwelvePvpMode) Type() protoreflect.EnumType {
	return &file_ActivityEvent_proto_enumTypes[1]
}

func (x ETwelvePvpMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETwelvePvpMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETwelvePvpMode(num)
	return nil
}

// Deprecated: Use ETwelvePvpMode.Descriptor instead.
func (ETwelvePvpMode) EnumDescriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{1}
}

type EAERewardMode int32

const (
	EAERewardMode_EAEREWARDMODE_MIN          EAERewardMode = 0
	EAERewardMode_EAEREWARDMODE_LABORATORY   EAERewardMode = 1
	EAERewardMode_EAEREWARDMODE_WANTEDQUEST  EAERewardMode = 2
	EAERewardMode_EAEREWARDMODE_SEAL         EAERewardMode = 3
	EAERewardMode_EAEREWARDMODE_GUILD_DONATE EAERewardMode = 4
	EAERewardMode_EAEREWARDMODE_TOWER        EAERewardMode = 5
	EAERewardMode_EAEREWARDMODE_GUILDRAID    EAERewardMode = 6
	EAERewardMode_EAEREWARDMODE_GUILDDOJO    EAERewardMode = 7
	EAERewardMode_EAEREWARDMODE_PVECARD      EAERewardMode = 8
	EAERewardMode_EAEREWARDMODE_EXPRAID      EAERewardMode = 9
	EAERewardMode_EAEREWARDMODE_TEAMGROUP    EAERewardMode = 10
	EAERewardMode_EAEREWARDMODE_TWELVEPVP    EAERewardMode = 11
	EAERewardMode_EAEREWARDMODE_Comodo_Team  EAERewardMode = 12
)

// Enum value maps for EAERewardMode.
var (
	EAERewardMode_name = map[int32]string{
		0:  "EAEREWARDMODE_MIN",
		1:  "EAEREWARDMODE_LABORATORY",
		2:  "EAEREWARDMODE_WANTEDQUEST",
		3:  "EAEREWARDMODE_SEAL",
		4:  "EAEREWARDMODE_GUILD_DONATE",
		5:  "EAEREWARDMODE_TOWER",
		6:  "EAEREWARDMODE_GUILDRAID",
		7:  "EAEREWARDMODE_GUILDDOJO",
		8:  "EAEREWARDMODE_PVECARD",
		9:  "EAEREWARDMODE_EXPRAID",
		10: "EAEREWARDMODE_TEAMGROUP",
		11: "EAEREWARDMODE_TWELVEPVP",
		12: "EAEREWARDMODE_Comodo_Team",
	}
	EAERewardMode_value = map[string]int32{
		"EAEREWARDMODE_MIN":          0,
		"EAEREWARDMODE_LABORATORY":   1,
		"EAEREWARDMODE_WANTEDQUEST":  2,
		"EAEREWARDMODE_SEAL":         3,
		"EAEREWARDMODE_GUILD_DONATE": 4,
		"EAEREWARDMODE_TOWER":        5,
		"EAEREWARDMODE_GUILDRAID":    6,
		"EAEREWARDMODE_GUILDDOJO":    7,
		"EAEREWARDMODE_PVECARD":      8,
		"EAEREWARDMODE_EXPRAID":      9,
		"EAEREWARDMODE_TEAMGROUP":    10,
		"EAEREWARDMODE_TWELVEPVP":    11,
		"EAEREWARDMODE_Comodo_Team":  12,
	}
)

func (x EAERewardMode) Enum() *EAERewardMode {
	p := new(EAERewardMode)
	*p = x
	return p
}

func (x EAERewardMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAERewardMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ActivityEvent_proto_enumTypes[2].Descriptor()
}

func (EAERewardMode) Type() protoreflect.EnumType {
	return &file_ActivityEvent_proto_enumTypes[2]
}

func (x EAERewardMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAERewardMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAERewardMode(num)
	return nil
}

// Deprecated: Use EAERewardMode.Descriptor instead.
func (EAERewardMode) EnumDescriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{2}
}

type ECoinType int32

const (
	ECoinType_ECoinType_Min    ECoinType = 0
	ECoinType_ECoinType_Coin   ECoinType = 1
	ECoinType_ECoinType_Ticket ECoinType = 2
)

// Enum value maps for ECoinType.
var (
	ECoinType_name = map[int32]string{
		0: "ECoinType_Min",
		1: "ECoinType_Coin",
		2: "ECoinType_Ticket",
	}
	ECoinType_value = map[string]int32{
		"ECoinType_Min":    0,
		"ECoinType_Coin":   1,
		"ECoinType_Ticket": 2,
	}
)

func (x ECoinType) Enum() *ECoinType {
	p := new(ECoinType)
	*p = x
	return p
}

func (x ECoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_ActivityEvent_proto_enumTypes[3].Descriptor()
}

func (ECoinType) Type() protoreflect.EnumType {
	return &file_ActivityEvent_proto_enumTypes[3]
}

func (x ECoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECoinType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECoinType(num)
	return nil
}

// Deprecated: Use ECoinType.Descriptor instead.
func (ECoinType) EnumDescriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{3}
}

type EUserType int32

const (
	EUserType_EUserType_Char EUserType = 1
	EUserType_EUserType_Acc  EUserType = 2
)

// Enum value maps for EUserType.
var (
	EUserType_name = map[int32]string{
		1: "EUserType_Char",
		2: "EUserType_Acc",
	}
	EUserType_value = map[string]int32{
		"EUserType_Char": 1,
		"EUserType_Acc":  2,
	}
)

func (x EUserType) Enum() *EUserType {
	p := new(EUserType)
	*p = x
	return p
}

func (x EUserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUserType) Descriptor() protoreflect.EnumDescriptor {
	return file_ActivityEvent_proto_enumTypes[4].Descriptor()
}

func (EUserType) Type() protoreflect.EnumType {
	return &file_ActivityEvent_proto_enumTypes[4]
}

func (x EUserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUserType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUserType(num)
	return nil
}

// Deprecated: Use EUserType.Descriptor instead.
func (EUserType) EnumDescriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{4}
}

type EActivityEventType int32

const (
	EActivityEventType_EACTIVITYEVENTTYPE_MIN                   EActivityEventType = 0
	EActivityEventType_EACTIVITYEVENTTYPE_FREE_TRANSFER         EActivityEventType = 1
	EActivityEventType_EACTIVITYEVENTTYPE_SUMMON                EActivityEventType = 2
	EActivityEventType_EACTIVITYEVENTTYPE_REWARD                EActivityEventType = 3
	EActivityEventType_EACTIVITYEVENTTYPE_RESETTIME             EActivityEventType = 4
	EActivityEventType_EACTIVITYEVENTTYPE_LOTTERY_DISCOUNT      EActivityEventType = 5
	EActivityEventType_EACTIVITYEVENTTYPE_LOTTERY_NPC           EActivityEventType = 6
	EActivityEventType_EACTIVITYEVENTTYPE_LOTTERY_BANNER        EActivityEventType = 7
	EActivityEventType_EACTIVITYEVENTTYPE_GUILD_BUILDING_SUBMIT EActivityEventType = 8
	EActivityEventType_EACTIVITYEVENTTYPE_SHOP                  EActivityEventType = 9
	EActivityEventType_EACTIVITYEVENTTYPE_SERVANT_CALENDAR      EActivityEventType = 10
	EActivityEventType_EACTIVITYEVENTTYPE_SHOP_CLOSE            EActivityEventType = 11
	EActivityEventType_EACTIVITYEVENTTYPE_LOTTERY_CLOSE         EActivityEventType = 12
	EActivityEventType_EACTIVITYEVENTTYPE_CARD_RESOURCE         EActivityEventType = 13
	EActivityEventType_EACTIVITYEVENTTYPE_THEME_DETAILS         EActivityEventType = 14
	EActivityEventType_EACTIVITYEVENTTYPE_LUCKY_DICE            EActivityEventType = 15
	EActivityEventType_EACTIVITYEVENTTYPE_CUSTOM_SHOP           EActivityEventType = 16
	EActivityEventType_EACTIVITYEVENTTYPE_HEAD_LOTTERY_REWARD   EActivityEventType = 17
	EActivityEventType_EACTIVITYEVENTTYPE_MAX                   EActivityEventType = 18
)

// Enum value maps for EActivityEventType.
var (
	EActivityEventType_name = map[int32]string{
		0:  "EACTIVITYEVENTTYPE_MIN",
		1:  "EACTIVITYEVENTTYPE_FREE_TRANSFER",
		2:  "EACTIVITYEVENTTYPE_SUMMON",
		3:  "EACTIVITYEVENTTYPE_REWARD",
		4:  "EACTIVITYEVENTTYPE_RESETTIME",
		5:  "EACTIVITYEVENTTYPE_LOTTERY_DISCOUNT",
		6:  "EACTIVITYEVENTTYPE_LOTTERY_NPC",
		7:  "EACTIVITYEVENTTYPE_LOTTERY_BANNER",
		8:  "EACTIVITYEVENTTYPE_GUILD_BUILDING_SUBMIT",
		9:  "EACTIVITYEVENTTYPE_SHOP",
		10: "EACTIVITYEVENTTYPE_SERVANT_CALENDAR",
		11: "EACTIVITYEVENTTYPE_SHOP_CLOSE",
		12: "EACTIVITYEVENTTYPE_LOTTERY_CLOSE",
		13: "EACTIVITYEVENTTYPE_CARD_RESOURCE",
		14: "EACTIVITYEVENTTYPE_THEME_DETAILS",
		15: "EACTIVITYEVENTTYPE_LUCKY_DICE",
		16: "EACTIVITYEVENTTYPE_CUSTOM_SHOP",
		17: "EACTIVITYEVENTTYPE_HEAD_LOTTERY_REWARD",
		18: "EACTIVITYEVENTTYPE_MAX",
	}
	EActivityEventType_value = map[string]int32{
		"EACTIVITYEVENTTYPE_MIN":                   0,
		"EACTIVITYEVENTTYPE_FREE_TRANSFER":         1,
		"EACTIVITYEVENTTYPE_SUMMON":                2,
		"EACTIVITYEVENTTYPE_REWARD":                3,
		"EACTIVITYEVENTTYPE_RESETTIME":             4,
		"EACTIVITYEVENTTYPE_LOTTERY_DISCOUNT":      5,
		"EACTIVITYEVENTTYPE_LOTTERY_NPC":           6,
		"EACTIVITYEVENTTYPE_LOTTERY_BANNER":        7,
		"EACTIVITYEVENTTYPE_GUILD_BUILDING_SUBMIT": 8,
		"EACTIVITYEVENTTYPE_SHOP":                  9,
		"EACTIVITYEVENTTYPE_SERVANT_CALENDAR":      10,
		"EACTIVITYEVENTTYPE_SHOP_CLOSE":            11,
		"EACTIVITYEVENTTYPE_LOTTERY_CLOSE":         12,
		"EACTIVITYEVENTTYPE_CARD_RESOURCE":         13,
		"EACTIVITYEVENTTYPE_THEME_DETAILS":         14,
		"EACTIVITYEVENTTYPE_LUCKY_DICE":            15,
		"EACTIVITYEVENTTYPE_CUSTOM_SHOP":           16,
		"EACTIVITYEVENTTYPE_HEAD_LOTTERY_REWARD":   17,
		"EACTIVITYEVENTTYPE_MAX":                   18,
	}
)

func (x EActivityEventType) Enum() *EActivityEventType {
	p := new(EActivityEventType)
	*p = x
	return p
}

func (x EActivityEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EActivityEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_ActivityEvent_proto_enumTypes[5].Descriptor()
}

func (EActivityEventType) Type() protoreflect.EnumType {
	return &file_ActivityEvent_proto_enumTypes[5]
}

func (x EActivityEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EActivityEventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EActivityEventType(num)
	return nil
}

// Deprecated: Use EActivityEventType.Descriptor instead.
func (EActivityEventType) EnumDescriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{5}
}

type AEReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint32  `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Count       *uint32  `protobuf:"varint,2,opt,name=count,def=0" json:"count,omitempty"`
	Weight      *uint32  `protobuf:"varint,3,opt,name=weight,def=0" json:"weight,omitempty"`
	Minlayer    *uint32  `protobuf:"varint,4,opt,name=minlayer,def=0" json:"minlayer,omitempty"`
	Maxlayer    *uint32  `protobuf:"varint,5,opt,name=maxlayer,def=0" json:"maxlayer,omitempty"`
	Difficultys []uint32 `protobuf:"varint,6,rep,name=difficultys" json:"difficultys,omitempty"`
	Levels      []uint32 `protobuf:"varint,7,rep,name=levels" json:"levels,omitempty"`
}

// Default values for AEReward fields.
const (
	Default_AEReward_Id       = uint32(0)
	Default_AEReward_Count    = uint32(0)
	Default_AEReward_Weight   = uint32(0)
	Default_AEReward_Minlayer = uint32(0)
	Default_AEReward_Maxlayer = uint32(0)
)

func (x *AEReward) Reset() {
	*x = AEReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AEReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AEReward) ProtoMessage() {}

func (x *AEReward) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AEReward.ProtoReflect.Descriptor instead.
func (*AEReward) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{0}
}

func (x *AEReward) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_AEReward_Id
}

func (x *AEReward) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_AEReward_Count
}

func (x *AEReward) GetWeight() uint32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return Default_AEReward_Weight
}

func (x *AEReward) GetMinlayer() uint32 {
	if x != nil && x.Minlayer != nil {
		return *x.Minlayer
	}
	return Default_AEReward_Minlayer
}

func (x *AEReward) GetMaxlayer() uint32 {
	if x != nil && x.Maxlayer != nil {
		return *x.Maxlayer
	}
	return Default_AEReward_Maxlayer
}

func (x *AEReward) GetDifficultys() []uint32 {
	if x != nil {
		return x.Difficultys
	}
	return nil
}

func (x *AEReward) GetLevels() []uint32 {
	if x != nil {
		return x.Levels
	}
	return nil
}

type AEMapPos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos   []float32 `protobuf:"fixed32,1,rep,name=pos" json:"pos,omitempty"`
	Range *float32  `protobuf:"fixed32,2,opt,name=range,def=0" json:"range,omitempty"`
}

// Default values for AEMapPos fields.
const (
	Default_AEMapPos_Range = float32(0)
)

func (x *AEMapPos) Reset() {
	*x = AEMapPos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AEMapPos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AEMapPos) ProtoMessage() {}

func (x *AEMapPos) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AEMapPos.ProtoReflect.Descriptor instead.
func (*AEMapPos) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{1}
}

func (x *AEMapPos) GetPos() []float32 {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *AEMapPos) GetRange() float32 {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return Default_AEMapPos_Range
}

type AEMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *uint32     `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Desc  *string     `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
	Coord []*AEMapPos `protobuf:"bytes,3,rep,name=coord" json:"coord,omitempty"`
}

// Default values for AEMap fields.
const (
	Default_AEMap_Id = uint32(0)
)

func (x *AEMap) Reset() {
	*x = AEMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AEMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AEMap) ProtoMessage() {}

func (x *AEMap) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AEMap.ProtoReflect.Descriptor instead.
func (*AEMap) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{2}
}

func (x *AEMap) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_AEMap_Id
}

func (x *AEMap) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *AEMap) GetCoord() []*AEMapPos {
	if x != nil {
		return x.Coord
	}
	return nil
}

type AEFreeTransferInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapids      []uint32 `protobuf:"varint,1,rep,name=mapids" json:"mapids,omitempty"`
	Allfree     *bool    `protobuf:"varint,2,opt,name=allfree,def=0" json:"allfree,omitempty"`
	Teammapids  []uint32 `protobuf:"varint,3,rep,name=teammapids" json:"teammapids,omitempty"`
	Teamallfree *bool    `protobuf:"varint,4,opt,name=teamallfree,def=0" json:"teamallfree,omitempty"`
	Storefree   *bool    `protobuf:"varint,5,opt,name=storefree,def=0" json:"storefree,omitempty"`
}

// Default values for AEFreeTransferInfo fields.
const (
	Default_AEFreeTransferInfo_Allfree     = bool(false)
	Default_AEFreeTransferInfo_Teamallfree = bool(false)
	Default_AEFreeTransferInfo_Storefree   = bool(false)
)

func (x *AEFreeTransferInfo) Reset() {
	*x = AEFreeTransferInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AEFreeTransferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AEFreeTransferInfo) ProtoMessage() {}

func (x *AEFreeTransferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AEFreeTransferInfo.ProtoReflect.Descriptor instead.
func (*AEFreeTransferInfo) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{3}
}

func (x *AEFreeTransferInfo) GetMapids() []uint32 {
	if x != nil {
		return x.Mapids
	}
	return nil
}

func (x *AEFreeTransferInfo) GetAllfree() bool {
	if x != nil && x.Allfree != nil {
		return *x.Allfree
	}
	return Default_AEFreeTransferInfo_Allfree
}

func (x *AEFreeTransferInfo) GetTeammapids() []uint32 {
	if x != nil {
		return x.Teammapids
	}
	return nil
}

func (x *AEFreeTransferInfo) GetTeamallfree() bool {
	if x != nil && x.Teamallfree != nil {
		return *x.Teamallfree
	}
	return Default_AEFreeTransferInfo_Teamallfree
}

func (x *AEFreeTransferInfo) GetStorefree() bool {
	if x != nil && x.Storefree != nil {
		return *x.Storefree
	}
	return Default_AEFreeTransferInfo_Storefree
}

type AESummonInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Monsterid   *uint32     `protobuf:"varint,1,opt,name=monsterid,def=0" json:"monsterid,omitempty"`
	Count       *uint32     `protobuf:"varint,2,opt,name=count,def=0" json:"count,omitempty"`
	Revive      *bool       `protobuf:"varint,3,opt,name=revive,def=0" json:"revive,omitempty"`
	Iscreate    *bool       `protobuf:"varint,4,opt,name=iscreate,def=0" json:"iscreate,omitempty"`
	Namezh      *string     `protobuf:"bytes,5,opt,name=namezh" json:"namezh,omitempty"`
	Nameen      *string     `protobuf:"bytes,6,opt,name=nameen" json:"nameen,omitempty"`
	Icon        *string     `protobuf:"bytes,7,opt,name=icon" json:"icon,omitempty"`
	Type        *string     `protobuf:"bytes,8,opt,name=type" json:"type,omitempty"`
	Zone        *string     `protobuf:"bytes,9,opt,name=zone" json:"zone,omitempty"`
	Race        *string     `protobuf:"bytes,10,opt,name=race" json:"race,omitempty"`
	Nature      *string     `protobuf:"bytes,11,opt,name=nature" json:"nature,omitempty"`
	Shape       *string     `protobuf:"bytes,12,opt,name=shape" json:"shape,omitempty"`
	Body        *uint32     `protobuf:"varint,13,opt,name=body,def=0" json:"body,omitempty"`
	Jobexp      *uint32     `protobuf:"varint,14,opt,name=jobexp,def=0" json:"jobexp,omitempty"`
	Baseexp     *uint32     `protobuf:"varint,15,opt,name=baseexp,def=0" json:"baseexp,omitempty"`
	Str         *float32    `protobuf:"fixed32,16,opt,name=str,def=0" json:"str,omitempty"`
	Dex         *float32    `protobuf:"fixed32,17,opt,name=dex,def=0" json:"dex,omitempty"`
	Inte        *float32    `protobuf:"fixed32,18,opt,name=inte,def=0" json:"inte,omitempty"`
	Vit         *float32    `protobuf:"fixed32,19,opt,name=vit,def=0" json:"vit,omitempty"`
	Agi         *float32    `protobuf:"fixed32,20,opt,name=agi,def=0" json:"agi,omitempty"`
	Luk         *float32    `protobuf:"fixed32,21,opt,name=luk,def=0" json:"luk,omitempty"`
	Atk         *float32    `protobuf:"fixed32,22,opt,name=atk,def=0" json:"atk,omitempty"`
	Matk        *float32    `protobuf:"fixed32,23,opt,name=matk,def=0" json:"matk,omitempty"`
	Def         *float32    `protobuf:"fixed32,24,opt,name=def,def=0" json:"def,omitempty"`
	Mdef        *float32    `protobuf:"fixed32,25,opt,name=mdef,def=0" json:"mdef,omitempty"`
	Hp          *float32    `protobuf:"fixed32,26,opt,name=hp,def=0" json:"hp,omitempty"`
	Hit         *float32    `protobuf:"fixed32,27,opt,name=hit,def=0" json:"hit,omitempty"`
	Flee        *float32    `protobuf:"fixed32,28,opt,name=flee,def=0" json:"flee,omitempty"`
	Movespd     *float32    `protobuf:"fixed32,29,opt,name=movespd,def=0" json:"movespd,omitempty"`
	Movespdrate *float32    `protobuf:"fixed32,30,opt,name=movespdrate,def=0" json:"movespdrate,omitempty"`
	Scale       *float32    `protobuf:"fixed32,31,opt,name=scale,def=0" json:"scale,omitempty"`
	Normalskill *uint32     `protobuf:"varint,32,opt,name=normalskill,def=0" json:"normalskill,omitempty"`
	Rewardid    *uint32     `protobuf:"varint,33,opt,name=rewardid,def=0" json:"rewardid,omitempty"`
	Rewards     []*AEReward `protobuf:"bytes,34,rep,name=rewards" json:"rewards,omitempty"`
	Map         []*AEMap    `protobuf:"bytes,35,rep,name=map" json:"map,omitempty"`
}

// Default values for AESummonInfo fields.
const (
	Default_AESummonInfo_Monsterid   = uint32(0)
	Default_AESummonInfo_Count       = uint32(0)
	Default_AESummonInfo_Revive      = bool(false)
	Default_AESummonInfo_Iscreate    = bool(false)
	Default_AESummonInfo_Body        = uint32(0)
	Default_AESummonInfo_Jobexp      = uint32(0)
	Default_AESummonInfo_Baseexp     = uint32(0)
	Default_AESummonInfo_Str         = float32(0)
	Default_AESummonInfo_Dex         = float32(0)
	Default_AESummonInfo_Inte        = float32(0)
	Default_AESummonInfo_Vit         = float32(0)
	Default_AESummonInfo_Agi         = float32(0)
	Default_AESummonInfo_Luk         = float32(0)
	Default_AESummonInfo_Atk         = float32(0)
	Default_AESummonInfo_Matk        = float32(0)
	Default_AESummonInfo_Def         = float32(0)
	Default_AESummonInfo_Mdef        = float32(0)
	Default_AESummonInfo_Hp          = float32(0)
	Default_AESummonInfo_Hit         = float32(0)
	Default_AESummonInfo_Flee        = float32(0)
	Default_AESummonInfo_Movespd     = float32(0)
	Default_AESummonInfo_Movespdrate = float32(0)
	Default_AESummonInfo_Scale       = float32(0)
	Default_AESummonInfo_Normalskill = uint32(0)
	Default_AESummonInfo_Rewardid    = uint32(0)
)

func (x *AESummonInfo) Reset() {
	*x = AESummonInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESummonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESummonInfo) ProtoMessage() {}

func (x *AESummonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESummonInfo.ProtoReflect.Descriptor instead.
func (*AESummonInfo) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{4}
}

func (x *AESummonInfo) GetMonsterid() uint32 {
	if x != nil && x.Monsterid != nil {
		return *x.Monsterid
	}
	return Default_AESummonInfo_Monsterid
}

func (x *AESummonInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_AESummonInfo_Count
}

func (x *AESummonInfo) GetRevive() bool {
	if x != nil && x.Revive != nil {
		return *x.Revive
	}
	return Default_AESummonInfo_Revive
}

func (x *AESummonInfo) GetIscreate() bool {
	if x != nil && x.Iscreate != nil {
		return *x.Iscreate
	}
	return Default_AESummonInfo_Iscreate
}

func (x *AESummonInfo) GetNamezh() string {
	if x != nil && x.Namezh != nil {
		return *x.Namezh
	}
	return ""
}

func (x *AESummonInfo) GetNameen() string {
	if x != nil && x.Nameen != nil {
		return *x.Nameen
	}
	return ""
}

func (x *AESummonInfo) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *AESummonInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *AESummonInfo) GetZone() string {
	if x != nil && x.Zone != nil {
		return *x.Zone
	}
	return ""
}

func (x *AESummonInfo) GetRace() string {
	if x != nil && x.Race != nil {
		return *x.Race
	}
	return ""
}

func (x *AESummonInfo) GetNature() string {
	if x != nil && x.Nature != nil {
		return *x.Nature
	}
	return ""
}

func (x *AESummonInfo) GetShape() string {
	if x != nil && x.Shape != nil {
		return *x.Shape
	}
	return ""
}

func (x *AESummonInfo) GetBody() uint32 {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return Default_AESummonInfo_Body
}

func (x *AESummonInfo) GetJobexp() uint32 {
	if x != nil && x.Jobexp != nil {
		return *x.Jobexp
	}
	return Default_AESummonInfo_Jobexp
}

func (x *AESummonInfo) GetBaseexp() uint32 {
	if x != nil && x.Baseexp != nil {
		return *x.Baseexp
	}
	return Default_AESummonInfo_Baseexp
}

func (x *AESummonInfo) GetStr() float32 {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return Default_AESummonInfo_Str
}

func (x *AESummonInfo) GetDex() float32 {
	if x != nil && x.Dex != nil {
		return *x.Dex
	}
	return Default_AESummonInfo_Dex
}

func (x *AESummonInfo) GetInte() float32 {
	if x != nil && x.Inte != nil {
		return *x.Inte
	}
	return Default_AESummonInfo_Inte
}

func (x *AESummonInfo) GetVit() float32 {
	if x != nil && x.Vit != nil {
		return *x.Vit
	}
	return Default_AESummonInfo_Vit
}

func (x *AESummonInfo) GetAgi() float32 {
	if x != nil && x.Agi != nil {
		return *x.Agi
	}
	return Default_AESummonInfo_Agi
}

func (x *AESummonInfo) GetLuk() float32 {
	if x != nil && x.Luk != nil {
		return *x.Luk
	}
	return Default_AESummonInfo_Luk
}

func (x *AESummonInfo) GetAtk() float32 {
	if x != nil && x.Atk != nil {
		return *x.Atk
	}
	return Default_AESummonInfo_Atk
}

func (x *AESummonInfo) GetMatk() float32 {
	if x != nil && x.Matk != nil {
		return *x.Matk
	}
	return Default_AESummonInfo_Matk
}

func (x *AESummonInfo) GetDef() float32 {
	if x != nil && x.Def != nil {
		return *x.Def
	}
	return Default_AESummonInfo_Def
}

func (x *AESummonInfo) GetMdef() float32 {
	if x != nil && x.Mdef != nil {
		return *x.Mdef
	}
	return Default_AESummonInfo_Mdef
}

func (x *AESummonInfo) GetHp() float32 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return Default_AESummonInfo_Hp
}

func (x *AESummonInfo) GetHit() float32 {
	if x != nil && x.Hit != nil {
		return *x.Hit
	}
	return Default_AESummonInfo_Hit
}

func (x *AESummonInfo) GetFlee() float32 {
	if x != nil && x.Flee != nil {
		return *x.Flee
	}
	return Default_AESummonInfo_Flee
}

func (x *AESummonInfo) GetMovespd() float32 {
	if x != nil && x.Movespd != nil {
		return *x.Movespd
	}
	return Default_AESummonInfo_Movespd
}

func (x *AESummonInfo) GetMovespdrate() float32 {
	if x != nil && x.Movespdrate != nil {
		return *x.Movespdrate
	}
	return Default_AESummonInfo_Movespdrate
}

func (x *AESummonInfo) GetScale() float32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return Default_AESummonInfo_Scale
}

func (x *AESummonInfo) GetNormalskill() uint32 {
	if x != nil && x.Normalskill != nil {
		return *x.Normalskill
	}
	return Default_AESummonInfo_Normalskill
}

func (x *AESummonInfo) GetRewardid() uint32 {
	if x != nil && x.Rewardid != nil {
		return *x.Rewardid
	}
	return Default_AESummonInfo_Rewardid
}

func (x *AESummonInfo) GetRewards() []*AEReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *AESummonInfo) GetMap() []*AEMap {
	if x != nil {
		return x.Map
	}
	return nil
}

type AERewardExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards      []*AEReward `protobuf:"bytes,1,rep,name=rewards" json:"rewards,omitempty"`
	Finishcount  *uint32     `protobuf:"varint,2,opt,name=finishcount,def=0" json:"finishcount,omitempty"`
	Daylimit     *uint32     `protobuf:"varint,3,opt,name=daylimit,def=0" json:"daylimit,omitempty"`
	Acclimit     *bool       `protobuf:"varint,4,opt,name=acclimit,def=0" json:"acclimit,omitempty"`
	ValidPvpMode []uint32    `protobuf:"varint,6,rep,name=valid_pvp_mode,json=validPvpMode" json:"valid_pvp_mode,omitempty"`
	NeedWin      *bool       `protobuf:"varint,7,opt,name=need_win,json=needWin" json:"need_win,omitempty"`
}

// Default values for AERewardExtraInfo fields.
const (
	Default_AERewardExtraInfo_Finishcount = uint32(0)
	Default_AERewardExtraInfo_Daylimit    = uint32(0)
	Default_AERewardExtraInfo_Acclimit    = bool(false)
)

func (x *AERewardExtraInfo) Reset() {
	*x = AERewardExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AERewardExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AERewardExtraInfo) ProtoMessage() {}

func (x *AERewardExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AERewardExtraInfo.ProtoReflect.Descriptor instead.
func (*AERewardExtraInfo) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{5}
}

func (x *AERewardExtraInfo) GetRewards() []*AEReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *AERewardExtraInfo) GetFinishcount() uint32 {
	if x != nil && x.Finishcount != nil {
		return *x.Finishcount
	}
	return Default_AERewardExtraInfo_Finishcount
}

func (x *AERewardExtraInfo) GetDaylimit() uint32 {
	if x != nil && x.Daylimit != nil {
		return *x.Daylimit
	}
	return Default_AERewardExtraInfo_Daylimit
}

func (x *AERewardExtraInfo) GetAcclimit() bool {
	if x != nil && x.Acclimit != nil {
		return *x.Acclimit
	}
	return Default_AERewardExtraInfo_Acclimit
}

func (x *AERewardExtraInfo) GetValidPvpMode() []uint32 {
	if x != nil {
		return x.ValidPvpMode
	}
	return nil
}

func (x *AERewardExtraInfo) GetNeedWin() bool {
	if x != nil && x.NeedWin != nil {
		return *x.NeedWin
	}
	return false
}

type AERewardMultipleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Multiple     *uint32  `protobuf:"varint,1,opt,name=multiple,def=1" json:"multiple,omitempty"`
	Finishcount  *uint32  `protobuf:"varint,2,opt,name=finishcount,def=0" json:"finishcount,omitempty"`
	Daylimit     *uint32  `protobuf:"varint,3,opt,name=daylimit,def=0" json:"daylimit,omitempty"`
	Acclimit     *bool    `protobuf:"varint,4,opt,name=acclimit,def=0" json:"acclimit,omitempty"`
	ValidPvpMode []uint32 `protobuf:"varint,6,rep,name=valid_pvp_mode,json=validPvpMode" json:"valid_pvp_mode,omitempty"`
}

// Default values for AERewardMultipleInfo fields.
const (
	Default_AERewardMultipleInfo_Multiple    = uint32(1)
	Default_AERewardMultipleInfo_Finishcount = uint32(0)
	Default_AERewardMultipleInfo_Daylimit    = uint32(0)
	Default_AERewardMultipleInfo_Acclimit    = bool(false)
)

func (x *AERewardMultipleInfo) Reset() {
	*x = AERewardMultipleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AERewardMultipleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AERewardMultipleInfo) ProtoMessage() {}

func (x *AERewardMultipleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AERewardMultipleInfo.ProtoReflect.Descriptor instead.
func (*AERewardMultipleInfo) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{6}
}

func (x *AERewardMultipleInfo) GetMultiple() uint32 {
	if x != nil && x.Multiple != nil {
		return *x.Multiple
	}
	return Default_AERewardMultipleInfo_Multiple
}

func (x *AERewardMultipleInfo) GetFinishcount() uint32 {
	if x != nil && x.Finishcount != nil {
		return *x.Finishcount
	}
	return Default_AERewardMultipleInfo_Finishcount
}

func (x *AERewardMultipleInfo) GetDaylimit() uint32 {
	if x != nil && x.Daylimit != nil {
		return *x.Daylimit
	}
	return Default_AERewardMultipleInfo_Daylimit
}

func (x *AERewardMultipleInfo) GetAcclimit() bool {
	if x != nil && x.Acclimit != nil {
		return *x.Acclimit
	}
	return Default_AERewardMultipleInfo_Acclimit
}

func (x *AERewardMultipleInfo) GetValidPvpMode() []uint32 {
	if x != nil {
		return x.ValidPvpMode
	}
	return nil
}

type AERewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode           *EAERewardMode        `protobuf:"varint,1,opt,name=mode,enum=Cmd.EAERewardMode,def=0" json:"mode,omitempty"`
	Extrareward    *AERewardExtraInfo    `protobuf:"bytes,2,opt,name=extrareward" json:"extrareward,omitempty"`
	Multiplereward *AERewardMultipleInfo `protobuf:"bytes,3,opt,name=multiplereward" json:"multiplereward,omitempty"`
	Extratimes     *uint32               `protobuf:"varint,4,opt,name=extratimes,def=0" json:"extratimes,omitempty"`
}

// Default values for AERewardInfo fields.
const (
	Default_AERewardInfo_Mode       = EAERewardMode_EAEREWARDMODE_MIN
	Default_AERewardInfo_Extratimes = uint32(0)
)

func (x *AERewardInfo) Reset() {
	*x = AERewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AERewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AERewardInfo) ProtoMessage() {}

func (x *AERewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AERewardInfo.ProtoReflect.Descriptor instead.
func (*AERewardInfo) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{7}
}

func (x *AERewardInfo) GetMode() EAERewardMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Default_AERewardInfo_Mode
}

func (x *AERewardInfo) GetExtrareward() *AERewardExtraInfo {
	if x != nil {
		return x.Extrareward
	}
	return nil
}

func (x *AERewardInfo) GetMultiplereward() *AERewardMultipleInfo {
	if x != nil {
		return x.Multiplereward
	}
	return nil
}

func (x *AERewardInfo) GetExtratimes() uint32 {
	if x != nil && x.Extratimes != nil {
		return *x.Extratimes
	}
	return Default_AERewardInfo_Extratimes
}

type AELotteryDiscount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lotterytype *ELotteryType `protobuf:"varint,1,opt,name=lotterytype,enum=Cmd.ELotteryType" json:"lotterytype,omitempty"`
	Cointype    *ECoinType    `protobuf:"varint,2,opt,name=cointype,enum=Cmd.ECoinType" json:"cointype,omitempty"`
	Usertype    *EUserType    `protobuf:"varint,3,opt,name=usertype,enum=Cmd.EUserType" json:"usertype,omitempty"`
	Discount    *uint32       `protobuf:"varint,4,opt,name=discount" json:"discount,omitempty"`
	Count       *uint32       `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	Yearmonth   *uint32       `protobuf:"varint,7,opt,name=yearmonth" json:"yearmonth,omitempty"`
}

func (x *AELotteryDiscount) Reset() {
	*x = AELotteryDiscount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AELotteryDiscount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AELotteryDiscount) ProtoMessage() {}

func (x *AELotteryDiscount) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AELotteryDiscount.ProtoReflect.Descriptor instead.
func (*AELotteryDiscount) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{8}
}

func (x *AELotteryDiscount) GetLotterytype() ELotteryType {
	if x != nil && x.Lotterytype != nil {
		return *x.Lotterytype
	}
	return ELotteryType_ELotteryType_Min
}

func (x *AELotteryDiscount) GetCointype() ECoinType {
	if x != nil && x.Cointype != nil {
		return *x.Cointype
	}
	return ECoinType_ECoinType_Min
}

func (x *AELotteryDiscount) GetUsertype() EUserType {
	if x != nil && x.Usertype != nil {
		return *x.Usertype
	}
	return EUserType_EUserType_Char
}

func (x *AELotteryDiscount) GetDiscount() uint32 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *AELotteryDiscount) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *AELotteryDiscount) GetYearmonth() uint32 {
	if x != nil && x.Yearmonth != nil {
		return *x.Yearmonth
	}
	return 0
}

type AELotteryNpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lotterytype *ELotteryType `protobuf:"varint,1,opt,name=lotterytype,enum=Cmd.ELotteryType" json:"lotterytype,omitempty"`
	Map         []*AEMap      `protobuf:"bytes,2,rep,name=map" json:"map,omitempty"`
}

func (x *AELotteryNpc) Reset() {
	*x = AELotteryNpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AELotteryNpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AELotteryNpc) ProtoMessage() {}

func (x *AELotteryNpc) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AELotteryNpc.ProtoReflect.Descriptor instead.
func (*AELotteryNpc) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{9}
}

func (x *AELotteryNpc) GetLotterytype() ELotteryType {
	if x != nil && x.Lotterytype != nil {
		return *x.Lotterytype
	}
	return ELotteryType_ELotteryType_Min
}

func (x *AELotteryNpc) GetMap() []*AEMap {
	if x != nil {
		return x.Map
	}
	return nil
}

type AEUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language *uint32 `protobuf:"varint,1,opt,name=language,def=0" json:"language,omitempty"`
	Url      *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

// Default values for AEUrl fields.
const (
	Default_AEUrl_Language = uint32(0)
)

func (x *AEUrl) Reset() {
	*x = AEUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AEUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AEUrl) ProtoMessage() {}

func (x *AEUrl) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AEUrl.ProtoReflect.Descriptor instead.
func (*AEUrl) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{10}
}

func (x *AEUrl) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return Default_AEUrl_Language
}

func (x *AEUrl) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type AELotteryBanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lotterytype *ELotteryType `protobuf:"varint,1,opt,name=lotterytype,enum=Cmd.ELotteryType" json:"lotterytype,omitempty"`
	Path        *string       `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Urls        []*AEUrl      `protobuf:"bytes,3,rep,name=urls" json:"urls,omitempty"`
}

func (x *AELotteryBanner) Reset() {
	*x = AELotteryBanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AELotteryBanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AELotteryBanner) ProtoMessage() {}

func (x *AELotteryBanner) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AELotteryBanner.ProtoReflect.Descriptor instead.
func (*AELotteryBanner) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{11}
}

func (x *AELotteryBanner) GetLotterytype() ELotteryType {
	if x != nil && x.Lotterytype != nil {
		return *x.Lotterytype
	}
	return ELotteryType_ELotteryType_Min
}

func (x *AELotteryBanner) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *AELotteryBanner) GetUrls() []*AEUrl {
	if x != nil {
		return x.Urls
	}
	return nil
}

type AEGuildBuildingSubmitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types     []EGuildBuilding `protobuf:"varint,1,rep,name=types,enum=Cmd.EGuildBuilding" json:"types,omitempty"`
	Minlv     *uint32          `protobuf:"varint,2,opt,name=minlv,def=0" json:"minlv,omitempty"`
	Maxlv     *uint32          `protobuf:"varint,3,opt,name=maxlv,def=0" json:"maxlv,omitempty"`
	Submitinc *uint32          `protobuf:"varint,4,opt,name=submitinc,def=0" json:"submitinc,omitempty"`
	Rewardinc *uint32          `protobuf:"varint,5,opt,name=rewardinc,def=0" json:"rewardinc,omitempty"`
}

// Default values for AEGuildBuildingSubmitInfo fields.
const (
	Default_AEGuildBuildingSubmitInfo_Minlv     = uint32(0)
	Default_AEGuildBuildingSubmitInfo_Maxlv     = uint32(0)
	Default_AEGuildBuildingSubmitInfo_Submitinc = uint32(0)
	Default_AEGuildBuildingSubmitInfo_Rewardinc = uint32(0)
)

func (x *AEGuildBuildingSubmitInfo) Reset() {
	*x = AEGuildBuildingSubmitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AEGuildBuildingSubmitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AEGuildBuildingSubmitInfo) ProtoMessage() {}

func (x *AEGuildBuildingSubmitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AEGuildBuildingSubmitInfo.ProtoReflect.Descriptor instead.
func (*AEGuildBuildingSubmitInfo) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{12}
}

func (x *AEGuildBuildingSubmitInfo) GetTypes() []EGuildBuilding {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *AEGuildBuildingSubmitInfo) GetMinlv() uint32 {
	if x != nil && x.Minlv != nil {
		return *x.Minlv
	}
	return Default_AEGuildBuildingSubmitInfo_Minlv
}

func (x *AEGuildBuildingSubmitInfo) GetMaxlv() uint32 {
	if x != nil && x.Maxlv != nil {
		return *x.Maxlv
	}
	return Default_AEGuildBuildingSubmitInfo_Maxlv
}

func (x *AEGuildBuildingSubmitInfo) GetSubmitinc() uint32 {
	if x != nil && x.Submitinc != nil {
		return *x.Submitinc
	}
	return Default_AEGuildBuildingSubmitInfo_Submitinc
}

func (x *AEGuildBuildingSubmitInfo) GetRewardinc() uint32 {
	if x != nil && x.Rewardinc != nil {
		return *x.Rewardinc
	}
	return Default_AEGuildBuildingSubmitInfo_Rewardinc
}

type AECardResourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cardtype *uint32 `protobuf:"varint,1,opt,name=cardtype,def=0" json:"cardtype,omitempty"`
	Url      *AEUrl  `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

// Default values for AECardResourceInfo fields.
const (
	Default_AECardResourceInfo_Cardtype = uint32(0)
)

func (x *AECardResourceInfo) Reset() {
	*x = AECardResourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AECardResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AECardResourceInfo) ProtoMessage() {}

func (x *AECardResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AECardResourceInfo.ProtoReflect.Descriptor instead.
func (*AECardResourceInfo) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{13}
}

func (x *AECardResourceInfo) GetCardtype() uint32 {
	if x != nil && x.Cardtype != nil {
		return *x.Cardtype
	}
	return Default_AECardResourceInfo_Cardtype
}

func (x *AECardResourceInfo) GetUrl() *AEUrl {
	if x != nil {
		return x.Url
	}
	return nil
}

type AEShopInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ShopItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (x *AEShopInfo) Reset() {
	*x = AEShopInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AEShopInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AEShopInfo) ProtoMessage() {}

func (x *AEShopInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AEShopInfo.ProtoReflect.Descriptor instead.
func (*AEShopInfo) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{14}
}

func (x *AEShopInfo) GetItems() []*ShopItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type AETrackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *uint32  `protobuf:"varint,1,opt,name=type,def=0" json:"type,omitempty"`
	Panelid *uint32  `protobuf:"varint,2,opt,name=panelid,def=0" json:"panelid,omitempty"`
	Mapid   *uint32  `protobuf:"varint,3,opt,name=mapid,def=0" json:"mapid,omitempty"`
	Pos     []string `protobuf:"bytes,4,rep,name=pos" json:"pos,omitempty"`
}

// Default values for AETrackInfo fields.
const (
	Default_AETrackInfo_Type    = uint32(0)
	Default_AETrackInfo_Panelid = uint32(0)
	Default_AETrackInfo_Mapid   = uint32(0)
)

func (x *AETrackInfo) Reset() {
	*x = AETrackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AETrackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AETrackInfo) ProtoMessage() {}

func (x *AETrackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AETrackInfo.ProtoReflect.Descriptor instead.
func (*AETrackInfo) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{15}
}

func (x *AETrackInfo) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_AETrackInfo_Type
}

func (x *AETrackInfo) GetPanelid() uint32 {
	if x != nil && x.Panelid != nil {
		return *x.Panelid
	}
	return Default_AETrackInfo_Panelid
}

func (x *AETrackInfo) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_AETrackInfo_Mapid
}

func (x *AETrackInfo) GetPos() []string {
	if x != nil {
		return x.Pos
	}
	return nil
}

type AEServantCalendar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Iconurls  *AEUrl       `protobuf:"bytes,2,opt,name=iconurls" json:"iconurls,omitempty"`
	Photourls *AEUrl       `protobuf:"bytes,3,opt,name=photourls" json:"photourls,omitempty"`
	Times     []uint32     `protobuf:"varint,4,rep,name=times" json:"times,omitempty"`
	Location  *string      `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	Desc      *string      `protobuf:"bytes,6,opt,name=desc" json:"desc,omitempty"`
	Track     *AETrackInfo `protobuf:"bytes,7,opt,name=track" json:"track,omitempty"`
}

func (x *AEServantCalendar) Reset() {
	*x = AEServantCalendar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AEServantCalendar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AEServantCalendar) ProtoMessage() {}

func (x *AEServantCalendar) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AEServantCalendar.ProtoReflect.Descriptor instead.
func (*AEServantCalendar) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{16}
}

func (x *AEServantCalendar) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AEServantCalendar) GetIconurls() *AEUrl {
	if x != nil {
		return x.Iconurls
	}
	return nil
}

func (x *AEServantCalendar) GetPhotourls() *AEUrl {
	if x != nil {
		return x.Photourls
	}
	return nil
}

func (x *AEServantCalendar) GetTimes() []uint32 {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *AEServantCalendar) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *AEServantCalendar) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *AEServantCalendar) GetTrack() *AETrackInfo {
	if x != nil {
		return x.Track
	}
	return nil
}

type AEShopCloseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ftype  *uint32 `protobuf:"varint,1,opt,name=ftype,def=0" json:"ftype,omitempty"`
	Shopid *uint32 `protobuf:"varint,2,opt,name=shopid,def=0" json:"shopid,omitempty"`
	Open   *bool   `protobuf:"varint,3,opt,name=open,def=1" json:"open,omitempty"`
}

// Default values for AEShopCloseInfo fields.
const (
	Default_AEShopCloseInfo_Ftype  = uint32(0)
	Default_AEShopCloseInfo_Shopid = uint32(0)
	Default_AEShopCloseInfo_Open   = bool(true)
)

func (x *AEShopCloseInfo) Reset() {
	*x = AEShopCloseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AEShopCloseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AEShopCloseInfo) ProtoMessage() {}

func (x *AEShopCloseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AEShopCloseInfo.ProtoReflect.Descriptor instead.
func (*AEShopCloseInfo) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{17}
}

func (x *AEShopCloseInfo) GetFtype() uint32 {
	if x != nil && x.Ftype != nil {
		return *x.Ftype
	}
	return Default_AEShopCloseInfo_Ftype
}

func (x *AEShopCloseInfo) GetShopid() uint32 {
	if x != nil && x.Shopid != nil {
		return *x.Shopid
	}
	return Default_AEShopCloseInfo_Shopid
}

func (x *AEShopCloseInfo) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return Default_AEShopCloseInfo_Open
}

type AELotteryCloseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ftype *uint32 `protobuf:"varint,1,opt,name=ftype,def=0" json:"ftype,omitempty"`
	Open  *bool   `protobuf:"varint,2,opt,name=open,def=1" json:"open,omitempty"`
}

// Default values for AELotteryCloseInfo fields.
const (
	Default_AELotteryCloseInfo_Ftype = uint32(0)
	Default_AELotteryCloseInfo_Open  = bool(true)
)

func (x *AELotteryCloseInfo) Reset() {
	*x = AELotteryCloseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AELotteryCloseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AELotteryCloseInfo) ProtoMessage() {}

func (x *AELotteryCloseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AELotteryCloseInfo.ProtoReflect.Descriptor instead.
func (*AELotteryCloseInfo) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{18}
}

func (x *AELotteryCloseInfo) GetFtype() uint32 {
	if x != nil && x.Ftype != nil {
		return *x.Ftype
	}
	return Default_AELotteryCloseInfo_Ftype
}

func (x *AELotteryCloseInfo) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return Default_AELotteryCloseInfo_Open
}

type AECustomShopInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ShopItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (x *AECustomShopInfo) Reset() {
	*x = AECustomShopInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AECustomShopInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AECustomShopInfo) ProtoMessage() {}

func (x *AECustomShopInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AECustomShopInfo.ProtoReflect.Descriptor instead.
func (*AECustomShopInfo) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{19}
}

func (x *AECustomShopInfo) GetItems() []*ShopItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type AEHeadLotteryRewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Count *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *AEHeadLotteryRewardItem) Reset() {
	*x = AEHeadLotteryRewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AEHeadLotteryRewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AEHeadLotteryRewardItem) ProtoMessage() {}

func (x *AEHeadLotteryRewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AEHeadLotteryRewardItem.ProtoReflect.Descriptor instead.
func (*AEHeadLotteryRewardItem) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{20}
}

func (x *AEHeadLotteryRewardItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *AEHeadLotteryRewardItem) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type AEHeadLotteryRewardCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Edge    *uint32                    `protobuf:"varint,1,opt,name=edge" json:"edge,omitempty"`
	Rewards []*AEHeadLotteryRewardItem `protobuf:"bytes,2,rep,name=rewards" json:"rewards,omitempty"`
}

func (x *AEHeadLotteryRewardCfg) Reset() {
	*x = AEHeadLotteryRewardCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AEHeadLotteryRewardCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AEHeadLotteryRewardCfg) ProtoMessage() {}

func (x *AEHeadLotteryRewardCfg) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AEHeadLotteryRewardCfg.ProtoReflect.Descriptor instead.
func (*AEHeadLotteryRewardCfg) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{21}
}

func (x *AEHeadLotteryRewardCfg) GetEdge() uint32 {
	if x != nil && x.Edge != nil {
		return *x.Edge
	}
	return 0
}

func (x *AEHeadLotteryRewardCfg) GetRewards() []*AEHeadLotteryRewardItem {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type AEHeadLotteryReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cfgs     []*AEHeadLotteryRewardCfg `protobuf:"bytes,1,rep,name=cfgs" json:"cfgs,omitempty"`
	Usertype *EUserType                `protobuf:"varint,2,opt,name=usertype,enum=Cmd.EUserType" json:"usertype,omitempty"`
}

func (x *AEHeadLotteryReward) Reset() {
	*x = AEHeadLotteryReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AEHeadLotteryReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AEHeadLotteryReward) ProtoMessage() {}

func (x *AEHeadLotteryReward) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AEHeadLotteryReward.ProtoReflect.Descriptor instead.
func (*AEHeadLotteryReward) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{22}
}

func (x *AEHeadLotteryReward) GetCfgs() []*AEHeadLotteryRewardCfg {
	if x != nil {
		return x.Cfgs
	}
	return nil
}

func (x *AEHeadLotteryReward) GetUsertype() EUserType {
	if x != nil && x.Usertype != nil {
		return *x.Usertype
	}
	return EUserType_EUserType_Char
}

type AESubitemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     *uint32      `protobuf:"varint,1,opt,name=index,def=0" json:"index,omitempty"`
	Name      *string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Photourls *AEUrl       `protobuf:"bytes,3,opt,name=photourls" json:"photourls,omitempty"`
	Time      []uint32     `protobuf:"varint,4,rep,name=time" json:"time,omitempty"`
	Desc      *string      `protobuf:"bytes,5,opt,name=desc" json:"desc,omitempty"`
	Rewards   []uint32     `protobuf:"varint,6,rep,name=rewards" json:"rewards,omitempty"`
	Track     *AETrackInfo `protobuf:"bytes,7,opt,name=track" json:"track,omitempty"`
}

// Default values for AESubitemInfo fields.
const (
	Default_AESubitemInfo_Index = uint32(0)
)

func (x *AESubitemInfo) Reset() {
	*x = AESubitemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AESubitemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AESubitemInfo) ProtoMessage() {}

func (x *AESubitemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AESubitemInfo.ProtoReflect.Descriptor instead.
func (*AESubitemInfo) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{23}
}

func (x *AESubitemInfo) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_AESubitemInfo_Index
}

func (x *AESubitemInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AESubitemInfo) GetPhotourls() *AEUrl {
	if x != nil {
		return x.Photourls
	}
	return nil
}

func (x *AESubitemInfo) GetTime() []uint32 {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AESubitemInfo) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *AESubitemInfo) GetRewards() []uint32 {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *AESubitemInfo) GetTrack() *AETrackInfo {
	if x != nil {
		return x.Track
	}
	return nil
}

type AEThemeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Photourls *AEUrl           `protobuf:"bytes,2,opt,name=photourls" json:"photourls,omitempty"`
	Items     []*AESubitemInfo `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	Entrance  []uint32         `protobuf:"varint,4,rep,name=entrance" json:"entrance,omitempty"`
}

func (x *AEThemeDetails) Reset() {
	*x = AEThemeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AEThemeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AEThemeDetails) ProtoMessage() {}

func (x *AEThemeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AEThemeDetails.ProtoReflect.Descriptor instead.
func (*AEThemeDetails) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{24}
}

func (x *AEThemeDetails) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AEThemeDetails) GetPhotourls() *AEUrl {
	if x != nil {
		return x.Photourls
	}
	return nil
}

func (x *AEThemeDetails) GetItems() []*AESubitemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *AEThemeDetails) GetEntrance() []uint32 {
	if x != nil {
		return x.Entrance
	}
	return nil
}

type ActivityEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *uint64                    `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Begintime           *uint64                    `protobuf:"varint,2,opt,name=begintime,def=0" json:"begintime,omitempty"`
	Endtime             *uint64                    `protobuf:"varint,3,opt,name=endtime,def=0" json:"endtime,omitempty"`
	Type                *EActivityEventType        `protobuf:"varint,4,opt,name=type,enum=Cmd.EActivityEventType" json:"type,omitempty"`
	Freetransferinfo    *AEFreeTransferInfo        `protobuf:"bytes,5,opt,name=freetransferinfo" json:"freetransferinfo,omitempty"`
	Summoninfo          *AESummonInfo              `protobuf:"bytes,6,opt,name=summoninfo" json:"summoninfo,omitempty"`
	Rewardinfo          *AERewardInfo              `protobuf:"bytes,7,opt,name=rewardinfo" json:"rewardinfo,omitempty"`
	Resetinfo           *AEResetInfo               `protobuf:"bytes,8,opt,name=resetinfo" json:"resetinfo,omitempty"`
	Lotterydiscount     *AELotteryDiscount         `protobuf:"bytes,9,opt,name=lotterydiscount" json:"lotterydiscount,omitempty"`
	Lotterynpc          *AELotteryNpc              `protobuf:"bytes,10,opt,name=lotterynpc" json:"lotterynpc,omitempty"`
	Lotterybanner       *AELotteryBanner           `protobuf:"bytes,11,opt,name=lotterybanner" json:"lotterybanner,omitempty"`
	Gbuildingsubmitinfo *AEGuildBuildingSubmitInfo `protobuf:"bytes,12,opt,name=gbuildingsubmitinfo" json:"gbuildingsubmitinfo,omitempty"`
	Shopinfo            *AEShopInfo                `protobuf:"bytes,13,opt,name=shopinfo" json:"shopinfo,omitempty"`
	Serverid            *string                    `protobuf:"bytes,14,opt,name=serverid" json:"serverid,omitempty"`
	Calendarinfo        *AEServantCalendar         `protobuf:"bytes,15,opt,name=calendarinfo" json:"calendarinfo,omitempty"`
	Shopcloseinfo       *AEShopCloseInfo           `protobuf:"bytes,16,opt,name=shopcloseinfo" json:"shopcloseinfo,omitempty"`
	Lotterycloseinfo    *AELotteryCloseInfo        `protobuf:"bytes,17,opt,name=lotterycloseinfo" json:"lotterycloseinfo,omitempty"`
	Cardrscinfo         *AECardResourceInfo        `protobuf:"bytes,18,opt,name=cardrscinfo" json:"cardrscinfo,omitempty"`
	Headlotteryextra    *AEHeadLotteryReward       `protobuf:"bytes,19,opt,name=headlotteryextra" json:"headlotteryextra,omitempty"`
	Customshopinfo      *AECustomShopInfo          `protobuf:"bytes,20,opt,name=customshopinfo" json:"customshopinfo,omitempty"`
	Themedetailsinfo    *AEThemeDetails            `protobuf:"bytes,21,opt,name=themedetailsinfo" json:"themedetailsinfo,omitempty"`
}

// Default values for ActivityEventInfo fields.
const (
	Default_ActivityEventInfo_Id        = uint64(0)
	Default_ActivityEventInfo_Begintime = uint64(0)
	Default_ActivityEventInfo_Endtime   = uint64(0)
)

func (x *ActivityEventInfo) Reset() {
	*x = ActivityEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityEventInfo) ProtoMessage() {}

func (x *ActivityEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityEventInfo.ProtoReflect.Descriptor instead.
func (*ActivityEventInfo) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{25}
}

func (x *ActivityEventInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_ActivityEventInfo_Id
}

func (x *ActivityEventInfo) GetBegintime() uint64 {
	if x != nil && x.Begintime != nil {
		return *x.Begintime
	}
	return Default_ActivityEventInfo_Begintime
}

func (x *ActivityEventInfo) GetEndtime() uint64 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return Default_ActivityEventInfo_Endtime
}

func (x *ActivityEventInfo) GetType() EActivityEventType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EActivityEventType_EACTIVITYEVENTTYPE_MIN
}

func (x *ActivityEventInfo) GetFreetransferinfo() *AEFreeTransferInfo {
	if x != nil {
		return x.Freetransferinfo
	}
	return nil
}

func (x *ActivityEventInfo) GetSummoninfo() *AESummonInfo {
	if x != nil {
		return x.Summoninfo
	}
	return nil
}

func (x *ActivityEventInfo) GetRewardinfo() *AERewardInfo {
	if x != nil {
		return x.Rewardinfo
	}
	return nil
}

func (x *ActivityEventInfo) GetResetinfo() *AEResetInfo {
	if x != nil {
		return x.Resetinfo
	}
	return nil
}

func (x *ActivityEventInfo) GetLotterydiscount() *AELotteryDiscount {
	if x != nil {
		return x.Lotterydiscount
	}
	return nil
}

func (x *ActivityEventInfo) GetLotterynpc() *AELotteryNpc {
	if x != nil {
		return x.Lotterynpc
	}
	return nil
}

func (x *ActivityEventInfo) GetLotterybanner() *AELotteryBanner {
	if x != nil {
		return x.Lotterybanner
	}
	return nil
}

func (x *ActivityEventInfo) GetGbuildingsubmitinfo() *AEGuildBuildingSubmitInfo {
	if x != nil {
		return x.Gbuildingsubmitinfo
	}
	return nil
}

func (x *ActivityEventInfo) GetShopinfo() *AEShopInfo {
	if x != nil {
		return x.Shopinfo
	}
	return nil
}

func (x *ActivityEventInfo) GetServerid() string {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return ""
}

func (x *ActivityEventInfo) GetCalendarinfo() *AEServantCalendar {
	if x != nil {
		return x.Calendarinfo
	}
	return nil
}

func (x *ActivityEventInfo) GetShopcloseinfo() *AEShopCloseInfo {
	if x != nil {
		return x.Shopcloseinfo
	}
	return nil
}

func (x *ActivityEventInfo) GetLotterycloseinfo() *AELotteryCloseInfo {
	if x != nil {
		return x.Lotterycloseinfo
	}
	return nil
}

func (x *ActivityEventInfo) GetCardrscinfo() *AECardResourceInfo {
	if x != nil {
		return x.Cardrscinfo
	}
	return nil
}

func (x *ActivityEventInfo) GetHeadlotteryextra() *AEHeadLotteryReward {
	if x != nil {
		return x.Headlotteryextra
	}
	return nil
}

func (x *ActivityEventInfo) GetCustomshopinfo() *AECustomShopInfo {
	if x != nil {
		return x.Customshopinfo
	}
	return nil
}

func (x *ActivityEventInfo) GetThemedetailsinfo() *AEThemeDetails {
	if x != nil {
		return x.Themedetailsinfo
	}
	return nil
}

type AEResetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode  *EAERewardMode `protobuf:"varint,1,opt,name=mode,enum=Cmd.EAERewardMode,def=0" json:"mode,omitempty"`
	Times *uint32        `protobuf:"varint,2,opt,name=times,def=0" json:"times,omitempty"`
}

// Default values for AEResetInfo fields.
const (
	Default_AEResetInfo_Mode  = EAERewardMode_EAEREWARDMODE_MIN
	Default_AEResetInfo_Times = uint32(0)
)

func (x *AEResetInfo) Reset() {
	*x = AEResetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AEResetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AEResetInfo) ProtoMessage() {}

func (x *AEResetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AEResetInfo.ProtoReflect.Descriptor instead.
func (*AEResetInfo) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{26}
}

func (x *AEResetInfo) GetMode() EAERewardMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Default_AEResetInfo_Mode
}

func (x *AEResetInfo) GetTimes() uint32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return Default_AEResetInfo_Times
}

type AERewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode                   *EAERewardMode `protobuf:"varint,1,opt,name=mode,enum=Cmd.EAERewardMode,def=0" json:"mode,omitempty"`
	Daycount               *uint32        `protobuf:"varint,2,opt,name=daycount,def=0" json:"daycount,omitempty"`
	Acclimitcharid         *uint64        `protobuf:"varint,3,opt,name=acclimitcharid,def=0" json:"acclimitcharid,omitempty"`
	Multipledaycount       *uint32        `protobuf:"varint,4,opt,name=multipledaycount,def=0" json:"multipledaycount,omitempty"`
	Multipleacclimitcharid *uint64        `protobuf:"varint,5,opt,name=multipleacclimitcharid,def=0" json:"multipleacclimitcharid,omitempty"`
	Multipleacclimitfunc   []uint32       `protobuf:"varint,8,rep,name=multipleacclimitfunc" json:"multipleacclimitfunc,omitempty"`
	Extraacclimitfunc      []uint32       `protobuf:"varint,9,rep,name=extraacclimitfunc" json:"extraacclimitfunc,omitempty"`
	NeedWin                *bool          `protobuf:"varint,10,opt,name=need_win,json=needWin" json:"need_win,omitempty"`
}

// Default values for AERewardItem fields.
const (
	Default_AERewardItem_Mode                   = EAERewardMode_EAEREWARDMODE_MIN
	Default_AERewardItem_Daycount               = uint32(0)
	Default_AERewardItem_Acclimitcharid         = uint64(0)
	Default_AERewardItem_Multipledaycount       = uint32(0)
	Default_AERewardItem_Multipleacclimitcharid = uint64(0)
)

func (x *AERewardItem) Reset() {
	*x = AERewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AERewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AERewardItem) ProtoMessage() {}

func (x *AERewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AERewardItem.ProtoReflect.Descriptor instead.
func (*AERewardItem) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{27}
}

func (x *AERewardItem) GetMode() EAERewardMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Default_AERewardItem_Mode
}

func (x *AERewardItem) GetDaycount() uint32 {
	if x != nil && x.Daycount != nil {
		return *x.Daycount
	}
	return Default_AERewardItem_Daycount
}

func (x *AERewardItem) GetAcclimitcharid() uint64 {
	if x != nil && x.Acclimitcharid != nil {
		return *x.Acclimitcharid
	}
	return Default_AERewardItem_Acclimitcharid
}

func (x *AERewardItem) GetMultipledaycount() uint32 {
	if x != nil && x.Multipledaycount != nil {
		return *x.Multipledaycount
	}
	return Default_AERewardItem_Multipledaycount
}

func (x *AERewardItem) GetMultipleacclimitcharid() uint64 {
	if x != nil && x.Multipleacclimitcharid != nil {
		return *x.Multipleacclimitcharid
	}
	return Default_AERewardItem_Multipleacclimitcharid
}

func (x *AERewardItem) GetMultipleacclimitfunc() []uint32 {
	if x != nil {
		return x.Multipleacclimitfunc
	}
	return nil
}

func (x *AERewardItem) GetExtraacclimitfunc() []uint32 {
	if x != nil {
		return x.Extraacclimitfunc
	}
	return nil
}

func (x *AERewardItem) GetNeedWin() bool {
	if x != nil && x.NeedWin != nil {
		return *x.NeedWin
	}
	return false
}

type ActivityEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             *EActivityEventType        `protobuf:"varint,1,opt,name=type,enum=Cmd.EActivityEventType,def=0" json:"type,omitempty"`
	Begintime        *uint64                    `protobuf:"varint,2,opt,name=begintime,def=0" json:"begintime,omitempty"`
	Endtime          *uint64                    `protobuf:"varint,3,opt,name=endtime,def=0" json:"endtime,omitempty"`
	Freetransfer     *AEFreeTransferInfo        `protobuf:"bytes,4,opt,name=freetransfer" json:"freetransfer,omitempty"`
	Reward           []*AERewardInfo            `protobuf:"bytes,5,rep,name=reward" json:"reward,omitempty"`
	Resetinfo        []*AEResetInfo             `protobuf:"bytes,6,rep,name=resetinfo" json:"resetinfo,omitempty"`
	Lotterydiscount  *AELotteryDiscount         `protobuf:"bytes,7,opt,name=lotterydiscount" json:"lotterydiscount,omitempty"`
	Lotterybanner    *AELotteryBanner           `protobuf:"bytes,8,opt,name=lotterybanner" json:"lotterybanner,omitempty"`
	Id               *uint64                    `protobuf:"varint,9,opt,name=id" json:"id,omitempty"`
	Gbuildingsubmit  *AEGuildBuildingSubmitInfo `protobuf:"bytes,10,opt,name=gbuildingsubmit" json:"gbuildingsubmit,omitempty"`
	Calendarinfo     *AEServantCalendar         `protobuf:"bytes,11,opt,name=calendarinfo" json:"calendarinfo,omitempty"`
	Cardrscinfo      *AECardResourceInfo        `protobuf:"bytes,12,opt,name=cardrscinfo" json:"cardrscinfo,omitempty"`
	Headlotteryextra *AEHeadLotteryReward       `protobuf:"bytes,13,opt,name=headlotteryextra" json:"headlotteryextra,omitempty"`
	Themedetailsinfo *AEThemeDetails            `protobuf:"bytes,14,opt,name=themedetailsinfo" json:"themedetailsinfo,omitempty"`
}

// Default values for ActivityEvent fields.
const (
	Default_ActivityEvent_Type      = EActivityEventType_EACTIVITYEVENTTYPE_MIN
	Default_ActivityEvent_Begintime = uint64(0)
	Default_ActivityEvent_Endtime   = uint64(0)
)

func (x *ActivityEvent) Reset() {
	*x = ActivityEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityEvent) ProtoMessage() {}

func (x *ActivityEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityEvent.ProtoReflect.Descriptor instead.
func (*ActivityEvent) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{28}
}

func (x *ActivityEvent) GetType() EActivityEventType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ActivityEvent_Type
}

func (x *ActivityEvent) GetBegintime() uint64 {
	if x != nil && x.Begintime != nil {
		return *x.Begintime
	}
	return Default_ActivityEvent_Begintime
}

func (x *ActivityEvent) GetEndtime() uint64 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return Default_ActivityEvent_Endtime
}

func (x *ActivityEvent) GetFreetransfer() *AEFreeTransferInfo {
	if x != nil {
		return x.Freetransfer
	}
	return nil
}

func (x *ActivityEvent) GetReward() []*AERewardInfo {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *ActivityEvent) GetResetinfo() []*AEResetInfo {
	if x != nil {
		return x.Resetinfo
	}
	return nil
}

func (x *ActivityEvent) GetLotterydiscount() *AELotteryDiscount {
	if x != nil {
		return x.Lotterydiscount
	}
	return nil
}

func (x *ActivityEvent) GetLotterybanner() *AELotteryBanner {
	if x != nil {
		return x.Lotterybanner
	}
	return nil
}

func (x *ActivityEvent) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ActivityEvent) GetGbuildingsubmit() *AEGuildBuildingSubmitInfo {
	if x != nil {
		return x.Gbuildingsubmit
	}
	return nil
}

func (x *ActivityEvent) GetCalendarinfo() *AEServantCalendar {
	if x != nil {
		return x.Calendarinfo
	}
	return nil
}

func (x *ActivityEvent) GetCardrscinfo() *AECardResourceInfo {
	if x != nil {
		return x.Cardrscinfo
	}
	return nil
}

func (x *ActivityEvent) GetHeadlotteryextra() *AEHeadLotteryReward {
	if x != nil {
		return x.Headlotteryextra
	}
	return nil
}

func (x *ActivityEvent) GetThemedetailsinfo() *AEThemeDetails {
	if x != nil {
		return x.Themedetailsinfo
	}
	return nil
}

type ActivityEventNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=64" json:"cmd,omitempty"`
	Param  *ActivityEventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityEventParam,def=1" json:"param,omitempty"`
	Events []*ActivityEvent    `protobuf:"bytes,3,rep,name=events" json:"events,omitempty"`
}

// Default values for ActivityEventNtf fields.
const (
	Default_ActivityEventNtf_Cmd   = Command_ACTIVITY_EVENT_PROTOCMD
	Default_ActivityEventNtf_Param = ActivityEventParam_ACTIVITYEVENTPARAM_NTF
)

func (x *ActivityEventNtf) Reset() {
	*x = ActivityEventNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityEventNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityEventNtf) ProtoMessage() {}

func (x *ActivityEventNtf) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityEventNtf.ProtoReflect.Descriptor instead.
func (*ActivityEventNtf) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{29}
}

func (x *ActivityEventNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ActivityEventNtf_Cmd
}

func (x *ActivityEventNtf) GetParam() ActivityEventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ActivityEventNtf_Param
}

func (x *ActivityEventNtf) GetEvents() []*ActivityEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type ActivityEventUserDataNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=64" json:"cmd,omitempty"`
	Param       *ActivityEventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityEventParam,def=2" json:"param,omitempty"`
	Rewarditems []*AERewardItem     `protobuf:"bytes,3,rep,name=rewarditems" json:"rewarditems,omitempty"`
}

// Default values for ActivityEventUserDataNtf fields.
const (
	Default_ActivityEventUserDataNtf_Cmd   = Command_ACTIVITY_EVENT_PROTOCMD
	Default_ActivityEventUserDataNtf_Param = ActivityEventParam_ACTIVITYEVENTPARAM_USER_DATA_NTF
)

func (x *ActivityEventUserDataNtf) Reset() {
	*x = ActivityEventUserDataNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityEventUserDataNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityEventUserDataNtf) ProtoMessage() {}

func (x *ActivityEventUserDataNtf) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityEventUserDataNtf.ProtoReflect.Descriptor instead.
func (*ActivityEventUserDataNtf) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{30}
}

func (x *ActivityEventUserDataNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ActivityEventUserDataNtf_Cmd
}

func (x *ActivityEventUserDataNtf) GetParam() ActivityEventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ActivityEventUserDataNtf_Param
}

func (x *ActivityEventUserDataNtf) GetRewarditems() []*AERewardItem {
	if x != nil {
		return x.Rewarditems
	}
	return nil
}

type ActivityEventCnt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *EActivityEventType `protobuf:"varint,1,opt,name=type,enum=Cmd.EActivityEventType,def=0" json:"type,omitempty"`
	Id    *uint64             `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Count *uint32             `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

// Default values for ActivityEventCnt fields.
const (
	Default_ActivityEventCnt_Type = EActivityEventType_EACTIVITYEVENTTYPE_MIN
)

func (x *ActivityEventCnt) Reset() {
	*x = ActivityEventCnt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityEventCnt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityEventCnt) ProtoMessage() {}

func (x *ActivityEventCnt) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityEventCnt.ProtoReflect.Descriptor instead.
func (*ActivityEventCnt) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{31}
}

func (x *ActivityEventCnt) GetType() EActivityEventType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ActivityEventCnt_Type
}

func (x *ActivityEventCnt) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ActivityEventCnt) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type ActivityEventNtfEventCntCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=64" json:"cmd,omitempty"`
	Param *ActivityEventParam `protobuf:"varint,2,opt,name=param,enum=Cmd.ActivityEventParam,def=3" json:"param,omitempty"`
	Cnt   []*ActivityEventCnt `protobuf:"bytes,3,rep,name=cnt" json:"cnt,omitempty"`
}

// Default values for ActivityEventNtfEventCntCmd fields.
const (
	Default_ActivityEventNtfEventCntCmd_Cmd   = Command_ACTIVITY_EVENT_PROTOCMD
	Default_ActivityEventNtfEventCntCmd_Param = ActivityEventParam_ACTIVITYEVENTPARAM_NTF_EVENT_CNT
)

func (x *ActivityEventNtfEventCntCmd) Reset() {
	*x = ActivityEventNtfEventCntCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActivityEvent_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityEventNtfEventCntCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityEventNtfEventCntCmd) ProtoMessage() {}

func (x *ActivityEventNtfEventCntCmd) ProtoReflect() protoreflect.Message {
	mi := &file_ActivityEvent_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityEventNtfEventCntCmd.ProtoReflect.Descriptor instead.
func (*ActivityEventNtfEventCntCmd) Descriptor() ([]byte, []int) {
	return file_ActivityEvent_proto_rawDescGZIP(), []int{32}
}

func (x *ActivityEventNtfEventCntCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ActivityEventNtfEventCntCmd_Cmd
}

func (x *ActivityEventNtfEventCntCmd) GetParam() ActivityEventParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ActivityEventNtfEventCntCmd_Param
}

func (x *ActivityEventNtfEventCntCmd) GetCnt() []*ActivityEventCnt {
	if x != nil {
		return x.Cnt
	}
	return nil
}

var File_ActivityEvent_proto protoreflect.FileDescriptor

var file_ActivityEvent_proto_rawDesc = []byte{
	0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6d,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x68, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x01, 0x0a, 0x08, 0x41,
	0x45, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d,
	0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0b, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0x35, 0x0a, 0x08, 0x41, 0x45, 0x4d, 0x61, 0x70, 0x50,
	0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x03, 0x70, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x53, 0x0a,
	0x05, 0x41, 0x45, 0x4d, 0x61, 0x70, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a,
	0x05, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x41, 0x45, 0x4d, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x52, 0x05, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x12, 0x41, 0x45, 0x46, 0x72, 0x65, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x70,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x69, 0x64,
	0x73, 0x12, 0x1f, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x66, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x66, 0x72,
	0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x70, 0x69,
	0x64, 0x73, 0x12, 0x27, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x61, 0x6c, 0x6c, 0x66, 0x72, 0x65,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b,
	0x74, 0x65, 0x61, 0x6d, 0x61, 0x6c, 0x6c, 0x66, 0x72, 0x65, 0x65, 0x12, 0x23, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x65,
	0x22, 0x84, 0x07, 0x0a, 0x0c, 0x41, 0x45, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x06, 0x72,
	0x65, 0x76, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x69, 0x73,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x08, 0x69, 0x73, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x61, 0x6d, 0x65, 0x7a, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x61, 0x6d, 0x65, 0x7a, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x65, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x65, 0x78, 0x70, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x65, 0x78, 0x70, 0x12, 0x1b, 0x0a,
	0x07, 0x62, 0x61, 0x73, 0x65, 0x65, 0x78, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x65, 0x78, 0x70, 0x12, 0x13, 0x0a, 0x03, 0x73, 0x74,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12,
	0x13, 0x0a, 0x03, 0x64, 0x65, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52,
	0x03, 0x64, 0x65, 0x78, 0x12, 0x15, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x03, 0x76,
	0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x76, 0x69, 0x74,
	0x12, 0x13, 0x0a, 0x03, 0x61, 0x67, 0x69, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30,
	0x52, 0x03, 0x61, 0x67, 0x69, 0x12, 0x13, 0x0a, 0x03, 0x6c, 0x75, 0x6b, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x6c, 0x75, 0x6b, 0x12, 0x13, 0x0a, 0x03, 0x61, 0x74,
	0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x61, 0x74, 0x6b, 0x12,
	0x15, 0x0a, 0x04, 0x6d, 0x61, 0x74, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30,
	0x52, 0x04, 0x6d, 0x61, 0x74, 0x6b, 0x12, 0x13, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x64, 0x65, 0x66, 0x12, 0x15, 0x0a, 0x04, 0x6d,
	0x64, 0x65, 0x66, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x6d, 0x64,
	0x65, 0x66, 0x12, 0x11, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01,
	0x30, 0x52, 0x02, 0x68, 0x70, 0x12, 0x13, 0x0a, 0x03, 0x68, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x68, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x66, 0x6c,
	0x65, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x66, 0x6c, 0x65,
	0x65, 0x12, 0x1b, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x70, 0x64, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x70, 0x64, 0x12, 0x23,
	0x0a, 0x0b, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x70, 0x64, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x70, 0x64, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0b,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x03, 0x6d, 0x61, 0x70,
	0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x4d,
	0x61, 0x70, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x22, 0xe4, 0x01, 0x0a, 0x11, 0x41, 0x45, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x64,
	0x61, 0x79, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x08, 0x64, 0x61, 0x79, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x61, 0x63,
	0x63, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x76, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x76, 0x70, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x65, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x22, 0xc2,
	0x01, 0x0a, 0x14, 0x41, 0x45, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x64,
	0x61, 0x79, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x08, 0x64, 0x61, 0x79, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x61, 0x63,
	0x63, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x76, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x76, 0x70, 0x4d,
	0x6f, 0x64, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x0c, 0x41, 0x45, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x45, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x11, 0x45, 0x41, 0x45, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0a,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22,
	0xf0, 0x01, 0x0a, 0x11, 0x41, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x6f,
	0x69, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f,
	0x69, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x79, 0x65, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x79, 0x65, 0x61, 0x72, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x22, 0x61, 0x0a, 0x0c, 0x41, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4e,
	0x70, 0x63, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x4d, 0x61, 0x70,
	0x52, 0x03, 0x6d, 0x61, 0x70, 0x22, 0x38, 0x0a, 0x05, 0x41, 0x45, 0x55, 0x72, 0x6c, 0x12, 0x1d,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x7a, 0x0a, 0x0f, 0x41, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x04, 0x75,
	0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x41, 0x45, 0x55, 0x72, 0x6c, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x19,
	0x41, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6c, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6c, 0x76, 0x12, 0x17, 0x0a,
	0x05, 0x6d, 0x61, 0x78, 0x6c, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x6d, 0x61, 0x78, 0x6c, 0x76, 0x12, 0x1f, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x69, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x63, 0x12, 0x1f, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x63, 0x22, 0x51, 0x0a, 0x12, 0x41, 0x45, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x41, 0x45, 0x55, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x31, 0x0a, 0x0a, 0x41,
	0x45, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53,
	0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x6c,
	0x0a, 0x0b, 0x41, 0x45, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xe7, 0x01, 0x0a,
	0x11, 0x41, 0x45, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x75, 0x72,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41,
	0x45, 0x55, 0x72, 0x6c, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x28,
	0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x55, 0x72, 0x6c, 0x52, 0x09, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x26,
	0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x5f, 0x0a, 0x0f, 0x41, 0x45, 0x53, 0x68, 0x6f, 0x70,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x05, 0x66, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x66, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0x47, 0x0a, 0x12, 0x41, 0x45, 0x4c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a,
	0x05, 0x66, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x66, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x22, 0x37, 0x0a, 0x10, 0x41, 0x45, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x3f, 0x0a, 0x17, 0x41, 0x45, 0x48,
	0x65, 0x61, 0x64, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x16, 0x41, 0x45,
	0x48, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x66, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x65, 0x64, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x41, 0x45, 0x48, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x72, 0x0a, 0x13, 0x41, 0x45, 0x48, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x66, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x48, 0x65,
	0x61, 0x64, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x66, 0x67, 0x52, 0x04, 0x63, 0x66, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x0d, 0x41, 0x45, 0x53, 0x75, 0x62, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x75, 0x72, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x55,
	0x72, 0x6c, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x26, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x41, 0x45, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x09, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x55, 0x72, 0x6c, 0x52, 0x09, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45,
	0x53, 0x75, 0x62, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xf6,
	0x08, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x66, 0x72, 0x65, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x41, 0x45, 0x46, 0x72, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x66, 0x72, 0x65, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0a, 0x73, 0x75, 0x6d, 0x6d, 0x6f,
	0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x41, 0x45, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0a, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a,
	0x0f, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x4c,
	0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f,
	0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x0a, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x6e, 0x70, 0x63, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x4c, 0x6f, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x4e, 0x70, 0x63, 0x52, 0x0a, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x6e,
	0x70, 0x63, 0x12, 0x3a, 0x0a, 0x0d, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x41, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52,
	0x0d, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x50,
	0x0a, 0x13, 0x67, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x41, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x67, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x2b, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x53, 0x68, 0x6f, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x70, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x41, 0x45, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x70, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x41, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x72, 0x73,
	0x63, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x41, 0x45, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x72, 0x73, 0x63, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x44, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x41, 0x45, 0x48, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x10, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x73, 0x68, 0x6f, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x68,
	0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x68,
	0x6f, 0x70, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x10, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x10, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x0b, 0x41, 0x45, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x45, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x11, 0x45, 0x41, 0x45, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x17, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xfa, 0x02, 0x0a, 0x0c, 0x41,
	0x45, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x41, 0x45, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x11, 0x45,
	0x41, 0x45, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x64, 0x61, 0x79, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x64, 0x61, 0x79,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x0e, 0x61, 0x63, 0x63, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x64, 0x61, 0x79, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x64, 0x61, 0x79, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x39, 0x0a, 0x16, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x61, 0x63, 0x63, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x16, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x61, 0x63, 0x63, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x61, 0x63, 0x63, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x66, 0x75,
	0x6e, 0x63, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x61, 0x63, 0x63, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x2c,
	0x0a, 0x11, 0x65, 0x78, 0x74, 0x72, 0x61, 0x61, 0x63, 0x63, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x66,
	0x75, 0x6e, 0x63, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x61, 0x63, 0x63, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x6e, 0x65, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x22, 0x80, 0x06, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x16, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0c,
	0x66, 0x72, 0x65, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x46, 0x72, 0x65, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x66, 0x72, 0x65,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x41, 0x45, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0f, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x52, 0x0d, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x67, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x41, 0x45, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x67, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x0c,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x53, 0x65, 0x72, 0x76, 0x61,
	0x6e, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64,
	0x72, 0x73, 0x63, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x72, 0x73, 0x63, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x48, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x10, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x3f, 0x0a, 0x10, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x10, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xbe, 0x01, 0x0a, 0x10, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x74, 0x66, 0x12,
	0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x17, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x2a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x18,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x74, 0x66, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x4f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x33, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x45,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x7d, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x16, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x1b, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x74, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6e, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x4f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x27, 0x0a, 0x03, 0x63, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6e, 0x74, 0x52, 0x03, 0x63, 0x6e, 0x74, 0x2a, 0x7c, 0x0a, 0x12, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e, 0x54, 0x46, 0x10,
	0x02, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0x60, 0x0a, 0x0e, 0x45, 0x54, 0x77, 0x65, 0x6c,
	0x76, 0x65, 0x50, 0x76, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x57,
	0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0xfd, 0x02, 0x0a, 0x0d, 0x45, 0x41,
	0x45, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x41, 0x45, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x41, 0x45, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x4f, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x41, 0x45, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x41, 0x45, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x45, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x41, 0x45, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44,
	0x4f, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x41, 0x45, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x41, 0x45, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x52, 0x41, 0x49, 0x44, 0x10, 0x06, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x41, 0x45, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x44, 0x4f, 0x4a, 0x4f, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x41,
	0x45, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x56, 0x45, 0x43,
	0x41, 0x52, 0x44, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x41, 0x45, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x41, 0x49, 0x44, 0x10, 0x09,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x41, 0x45, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x0a, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x41, 0x45, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54,
	0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x41,
	0x45, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x6f, 0x6d, 0x6f,
	0x64, 0x6f, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x0c, 0x2a, 0x48, 0x0a, 0x09, 0x45, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x10, 0x02, 0x2a, 0x32, 0x0a, 0x09, 0x45, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x68,
	0x61, 0x72, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x41, 0x63, 0x63, 0x10, 0x02, 0x2a, 0xc2, 0x05, 0x0a, 0x12, 0x45, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x20,
	0x0a, 0x1c, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04,
	0x12, 0x27, 0x0a, 0x23, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x4e, 0x50, 0x43, 0x10, 0x06, 0x12, 0x25, 0x0a,
	0x21, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4e,
	0x45, 0x52, 0x10, 0x07, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54,
	0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x10, 0x09, 0x12,
	0x27, 0x0a, 0x23, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x41,
	0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x48, 0x4f, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x0b, 0x12, 0x24, 0x0a, 0x20, 0x45,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10,
	0x0c, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x0d, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48,
	0x45, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x10, 0x0e, 0x12, 0x21, 0x0a,
	0x1d, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x5f, 0x44, 0x49, 0x43, 0x45, 0x10, 0x0f,
	0x12, 0x22, 0x0a, 0x1e, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x53, 0x48,
	0x4f, 0x50, 0x10, 0x10, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x5f,
	0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x11,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x12,
}

var (
	file_ActivityEvent_proto_rawDescOnce sync.Once
	file_ActivityEvent_proto_rawDescData = file_ActivityEvent_proto_rawDesc
)

func file_ActivityEvent_proto_rawDescGZIP() []byte {
	file_ActivityEvent_proto_rawDescOnce.Do(func() {
		file_ActivityEvent_proto_rawDescData = protoimpl.X.CompressGZIP(file_ActivityEvent_proto_rawDescData)
	})
	return file_ActivityEvent_proto_rawDescData
}

var file_ActivityEvent_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_ActivityEvent_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_ActivityEvent_proto_goTypes = []interface{}{
	(ActivityEventParam)(0),             // 0: Cmd.ActivityEventParam
	(ETwelvePvpMode)(0),                 // 1: Cmd.ETwelvePvpMode
	(EAERewardMode)(0),                  // 2: Cmd.EAERewardMode
	(ECoinType)(0),                      // 3: Cmd.ECoinType
	(EUserType)(0),                      // 4: Cmd.EUserType
	(EActivityEventType)(0),             // 5: Cmd.EActivityEventType
	(*AEReward)(nil),                    // 6: Cmd.AEReward
	(*AEMapPos)(nil),                    // 7: Cmd.AEMapPos
	(*AEMap)(nil),                       // 8: Cmd.AEMap
	(*AEFreeTransferInfo)(nil),          // 9: Cmd.AEFreeTransferInfo
	(*AESummonInfo)(nil),                // 10: Cmd.AESummonInfo
	(*AERewardExtraInfo)(nil),           // 11: Cmd.AERewardExtraInfo
	(*AERewardMultipleInfo)(nil),        // 12: Cmd.AERewardMultipleInfo
	(*AERewardInfo)(nil),                // 13: Cmd.AERewardInfo
	(*AELotteryDiscount)(nil),           // 14: Cmd.AELotteryDiscount
	(*AELotteryNpc)(nil),                // 15: Cmd.AELotteryNpc
	(*AEUrl)(nil),                       // 16: Cmd.AEUrl
	(*AELotteryBanner)(nil),             // 17: Cmd.AELotteryBanner
	(*AEGuildBuildingSubmitInfo)(nil),   // 18: Cmd.AEGuildBuildingSubmitInfo
	(*AECardResourceInfo)(nil),          // 19: Cmd.AECardResourceInfo
	(*AEShopInfo)(nil),                  // 20: Cmd.AEShopInfo
	(*AETrackInfo)(nil),                 // 21: Cmd.AETrackInfo
	(*AEServantCalendar)(nil),           // 22: Cmd.AEServantCalendar
	(*AEShopCloseInfo)(nil),             // 23: Cmd.AEShopCloseInfo
	(*AELotteryCloseInfo)(nil),          // 24: Cmd.AELotteryCloseInfo
	(*AECustomShopInfo)(nil),            // 25: Cmd.AECustomShopInfo
	(*AEHeadLotteryRewardItem)(nil),     // 26: Cmd.AEHeadLotteryRewardItem
	(*AEHeadLotteryRewardCfg)(nil),      // 27: Cmd.AEHeadLotteryRewardCfg
	(*AEHeadLotteryReward)(nil),         // 28: Cmd.AEHeadLotteryReward
	(*AESubitemInfo)(nil),               // 29: Cmd.AESubitemInfo
	(*AEThemeDetails)(nil),              // 30: Cmd.AEThemeDetails
	(*ActivityEventInfo)(nil),           // 31: Cmd.ActivityEventInfo
	(*AEResetInfo)(nil),                 // 32: Cmd.AEResetInfo
	(*AERewardItem)(nil),                // 33: Cmd.AERewardItem
	(*ActivityEvent)(nil),               // 34: Cmd.ActivityEvent
	(*ActivityEventNtf)(nil),            // 35: Cmd.ActivityEventNtf
	(*ActivityEventUserDataNtf)(nil),    // 36: Cmd.ActivityEventUserDataNtf
	(*ActivityEventCnt)(nil),            // 37: Cmd.ActivityEventCnt
	(*ActivityEventNtfEventCntCmd)(nil), // 38: Cmd.ActivityEventNtfEventCntCmd
	(ELotteryType)(0),                   // 39: Cmd.ELotteryType
	(EGuildBuilding)(0),                 // 40: Cmd.EGuildBuilding
	(*ShopItem)(nil),                    // 41: Cmd.ShopItem
	(Command)(0),                        // 42: Cmd.Command
}
var file_ActivityEvent_proto_depIdxs = []int32{
	7,  // 0: Cmd.AEMap.coord:type_name -> Cmd.AEMapPos
	6,  // 1: Cmd.AESummonInfo.rewards:type_name -> Cmd.AEReward
	8,  // 2: Cmd.AESummonInfo.map:type_name -> Cmd.AEMap
	6,  // 3: Cmd.AERewardExtraInfo.rewards:type_name -> Cmd.AEReward
	2,  // 4: Cmd.AERewardInfo.mode:type_name -> Cmd.EAERewardMode
	11, // 5: Cmd.AERewardInfo.extrareward:type_name -> Cmd.AERewardExtraInfo
	12, // 6: Cmd.AERewardInfo.multiplereward:type_name -> Cmd.AERewardMultipleInfo
	39, // 7: Cmd.AELotteryDiscount.lotterytype:type_name -> Cmd.ELotteryType
	3,  // 8: Cmd.AELotteryDiscount.cointype:type_name -> Cmd.ECoinType
	4,  // 9: Cmd.AELotteryDiscount.usertype:type_name -> Cmd.EUserType
	39, // 10: Cmd.AELotteryNpc.lotterytype:type_name -> Cmd.ELotteryType
	8,  // 11: Cmd.AELotteryNpc.map:type_name -> Cmd.AEMap
	39, // 12: Cmd.AELotteryBanner.lotterytype:type_name -> Cmd.ELotteryType
	16, // 13: Cmd.AELotteryBanner.urls:type_name -> Cmd.AEUrl
	40, // 14: Cmd.AEGuildBuildingSubmitInfo.types:type_name -> Cmd.EGuildBuilding
	16, // 15: Cmd.AECardResourceInfo.url:type_name -> Cmd.AEUrl
	41, // 16: Cmd.AEShopInfo.items:type_name -> Cmd.ShopItem
	16, // 17: Cmd.AEServantCalendar.iconurls:type_name -> Cmd.AEUrl
	16, // 18: Cmd.AEServantCalendar.photourls:type_name -> Cmd.AEUrl
	21, // 19: Cmd.AEServantCalendar.track:type_name -> Cmd.AETrackInfo
	41, // 20: Cmd.AECustomShopInfo.items:type_name -> Cmd.ShopItem
	26, // 21: Cmd.AEHeadLotteryRewardCfg.rewards:type_name -> Cmd.AEHeadLotteryRewardItem
	27, // 22: Cmd.AEHeadLotteryReward.cfgs:type_name -> Cmd.AEHeadLotteryRewardCfg
	4,  // 23: Cmd.AEHeadLotteryReward.usertype:type_name -> Cmd.EUserType
	16, // 24: Cmd.AESubitemInfo.photourls:type_name -> Cmd.AEUrl
	21, // 25: Cmd.AESubitemInfo.track:type_name -> Cmd.AETrackInfo
	16, // 26: Cmd.AEThemeDetails.photourls:type_name -> Cmd.AEUrl
	29, // 27: Cmd.AEThemeDetails.items:type_name -> Cmd.AESubitemInfo
	5,  // 28: Cmd.ActivityEventInfo.type:type_name -> Cmd.EActivityEventType
	9,  // 29: Cmd.ActivityEventInfo.freetransferinfo:type_name -> Cmd.AEFreeTransferInfo
	10, // 30: Cmd.ActivityEventInfo.summoninfo:type_name -> Cmd.AESummonInfo
	13, // 31: Cmd.ActivityEventInfo.rewardinfo:type_name -> Cmd.AERewardInfo
	32, // 32: Cmd.ActivityEventInfo.resetinfo:type_name -> Cmd.AEResetInfo
	14, // 33: Cmd.ActivityEventInfo.lotterydiscount:type_name -> Cmd.AELotteryDiscount
	15, // 34: Cmd.ActivityEventInfo.lotterynpc:type_name -> Cmd.AELotteryNpc
	17, // 35: Cmd.ActivityEventInfo.lotterybanner:type_name -> Cmd.AELotteryBanner
	18, // 36: Cmd.ActivityEventInfo.gbuildingsubmitinfo:type_name -> Cmd.AEGuildBuildingSubmitInfo
	20, // 37: Cmd.ActivityEventInfo.shopinfo:type_name -> Cmd.AEShopInfo
	22, // 38: Cmd.ActivityEventInfo.calendarinfo:type_name -> Cmd.AEServantCalendar
	23, // 39: Cmd.ActivityEventInfo.shopcloseinfo:type_name -> Cmd.AEShopCloseInfo
	24, // 40: Cmd.ActivityEventInfo.lotterycloseinfo:type_name -> Cmd.AELotteryCloseInfo
	19, // 41: Cmd.ActivityEventInfo.cardrscinfo:type_name -> Cmd.AECardResourceInfo
	28, // 42: Cmd.ActivityEventInfo.headlotteryextra:type_name -> Cmd.AEHeadLotteryReward
	25, // 43: Cmd.ActivityEventInfo.customshopinfo:type_name -> Cmd.AECustomShopInfo
	30, // 44: Cmd.ActivityEventInfo.themedetailsinfo:type_name -> Cmd.AEThemeDetails
	2,  // 45: Cmd.AEResetInfo.mode:type_name -> Cmd.EAERewardMode
	2,  // 46: Cmd.AERewardItem.mode:type_name -> Cmd.EAERewardMode
	5,  // 47: Cmd.ActivityEvent.type:type_name -> Cmd.EActivityEventType
	9,  // 48: Cmd.ActivityEvent.freetransfer:type_name -> Cmd.AEFreeTransferInfo
	13, // 49: Cmd.ActivityEvent.reward:type_name -> Cmd.AERewardInfo
	32, // 50: Cmd.ActivityEvent.resetinfo:type_name -> Cmd.AEResetInfo
	14, // 51: Cmd.ActivityEvent.lotterydiscount:type_name -> Cmd.AELotteryDiscount
	17, // 52: Cmd.ActivityEvent.lotterybanner:type_name -> Cmd.AELotteryBanner
	18, // 53: Cmd.ActivityEvent.gbuildingsubmit:type_name -> Cmd.AEGuildBuildingSubmitInfo
	22, // 54: Cmd.ActivityEvent.calendarinfo:type_name -> Cmd.AEServantCalendar
	19, // 55: Cmd.ActivityEvent.cardrscinfo:type_name -> Cmd.AECardResourceInfo
	28, // 56: Cmd.ActivityEvent.headlotteryextra:type_name -> Cmd.AEHeadLotteryReward
	30, // 57: Cmd.ActivityEvent.themedetailsinfo:type_name -> Cmd.AEThemeDetails
	42, // 58: Cmd.ActivityEventNtf.cmd:type_name -> Cmd.Command
	0,  // 59: Cmd.ActivityEventNtf.param:type_name -> Cmd.ActivityEventParam
	34, // 60: Cmd.ActivityEventNtf.events:type_name -> Cmd.ActivityEvent
	42, // 61: Cmd.ActivityEventUserDataNtf.cmd:type_name -> Cmd.Command
	0,  // 62: Cmd.ActivityEventUserDataNtf.param:type_name -> Cmd.ActivityEventParam
	33, // 63: Cmd.ActivityEventUserDataNtf.rewarditems:type_name -> Cmd.AERewardItem
	5,  // 64: Cmd.ActivityEventCnt.type:type_name -> Cmd.EActivityEventType
	42, // 65: Cmd.ActivityEventNtfEventCntCmd.cmd:type_name -> Cmd.Command
	0,  // 66: Cmd.ActivityEventNtfEventCntCmd.param:type_name -> Cmd.ActivityEventParam
	37, // 67: Cmd.ActivityEventNtfEventCntCmd.cnt:type_name -> Cmd.ActivityEventCnt
	68, // [68:68] is the sub-list for method output_type
	68, // [68:68] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_ActivityEvent_proto_init() }
func file_ActivityEvent_proto_init() {
	if File_ActivityEvent_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_SceneItem_proto_init()
	file_GuildCmd_proto_init()
	file_SessionShop_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ActivityEvent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AEReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AEMapPos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AEMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AEFreeTransferInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESummonInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AERewardExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AERewardMultipleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AERewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AELotteryDiscount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AELotteryNpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AEUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AELotteryBanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AEGuildBuildingSubmitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AECardResourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AEShopInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AETrackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AEServantCalendar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AEShopCloseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AELotteryCloseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AECustomShopInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AEHeadLotteryRewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AEHeadLotteryRewardCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AEHeadLotteryReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AESubitemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AEThemeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AEResetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AERewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityEventNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityEventUserDataNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityEventCnt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActivityEvent_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityEventNtfEventCntCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ActivityEvent_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ActivityEvent_proto_goTypes,
		DependencyIndexes: file_ActivityEvent_proto_depIdxs,
		EnumInfos:         file_ActivityEvent_proto_enumTypes,
		MessageInfos:      file_ActivityEvent_proto_msgTypes,
	}.Build()
	File_ActivityEvent_proto = out.File
	file_ActivityEvent_proto_rawDesc = nil
	file_ActivityEvent_proto_goTypes = nil
	file_ActivityEvent_proto_depIdxs = nil
}
