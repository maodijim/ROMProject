// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: SceneUser2.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type User2Param int32

const (
	User2Param_USER2PARAM_GOCITY                       User2Param = 1
	User2Param_USER2PARAM_SYSMSG                       User2Param = 2
	User2Param_USER2PARAM_NPCDATASYNC                  User2Param = 3
	User2Param_USER2PARAM_USERNINESYNC                 User2Param = 4
	User2Param_USER2PARAM_ACTION                       User2Param = 5
	User2Param_USER2PARAM_BUFFERSYNC                   User2Param = 6
	User2Param_USER2PARAM_EXIT_POS                     User2Param = 7
	User2Param_USER2PARAM_RELIVE                       User2Param = 8
	User2Param_USER2PARAM_VAR                          User2Param = 9
	User2Param_USER2PARAM_TALKINFO                     User2Param = 10
	User2Param_USER2PARAM_SERVERTIME                   User2Param = 11
	User2Param_USER2PARAM_NEWTRANSMAP                  User2Param = 12
	User2Param_USER2PARAM_EFFECT                       User2Param = 14
	User2Param_USER2PARAM_MENU                         User2Param = 15
	User2Param_USER2PARAM_NEWMENU                      User2Param = 16
	User2Param_USER2PARAM_TEAMINFONINE                 User2Param = 17
	User2Param_USER2PARAM_USEPORTRAIT                  User2Param = 18
	User2Param_USER2PARAM_USEFRAME                     User2Param = 19
	User2Param_USER2PARAM_NEWPORTRAITFRAME             User2Param = 20
	User2Param_USER2PARAM_QUERYPORTRAITLIST            User2Param = 24
	User2Param_USER2PARAM_ADDATTRPOINT                 User2Param = 21
	User2Param_USER2PARAM_QUERYSHOPGOTITEM             User2Param = 22
	User2Param_USER2PARAM_UPDATESHOPGOTITEM            User2Param = 23
	User2Param_USER2PARAM_USEDRESSING                  User2Param = 25
	User2Param_USER2PARAM_NEWDRESSING                  User2Param = 26
	User2Param_USER2PARAM_DRESSINGLIST                 User2Param = 27
	User2Param_USER2PARAM_OPENUI                       User2Param = 29
	User2Param_USER2PARAM_DBGSYSMSG                    User2Param = 30
	User2Param_USER2PARAM_FOLLOWTRANSFER               User2Param = 32
	User2Param_USER2PARAM_NPCFUNC                      User2Param = 33
	User2Param_USER2PARAM_MODELSHOW                    User2Param = 34
	User2Param_USER2PARAM_SOUNDEFFECT                  User2Param = 35
	User2Param_USER2PARAM_PRESETCHATMSG                User2Param = 36
	User2Param_USER2PARAM_CHANGEBGM                    User2Param = 37
	User2Param_USER2PARAM_QUERYFIGHTERINFO             User2Param = 38
	User2Param_USER2PARAM_GAMETIME                     User2Param = 40
	User2Param_USER2PARAM_CDTIME                       User2Param = 41
	User2Param_USER2PARAM_STATECHANGE                  User2Param = 42
	User2Param_USER2PARAM_PHOTO                        User2Param = 44
	User2Param_USER2PARAM_SHAKESCREEN                  User2Param = 45
	User2Param_USER2PARAM_QUERYSHORTCUT                User2Param = 47
	User2Param_USER2PARAM_PUTSHORTCUT                  User2Param = 48
	User2Param_USER2PARAM_NPCANGLE                     User2Param = 49
	User2Param_USER2PARAM_CAMERAFOCUS                  User2Param = 50
	User2Param_USER2PARAM_GOTO_LIST                    User2Param = 51
	User2Param_USER2PARAM_GOTO_GEAR                    User2Param = 52
	User2Param_USER2PARAM_FOLLOWER                     User2Param = 53
	User2Param_USER2PARAM_LABORATORY                   User2Param = 54
	User2Param_USER2PARAM_EXCHANGEPROFESSION           User2Param = 56
	User2Param_USER2PARAM_GOTO_LABORATORY              User2Param = 57
	User2Param_USER2PARAM_SCENERY                      User2Param = 58
	User2Param_USER2PARAM_GOMAP_QUEST                  User2Param = 59
	User2Param_USER2PARAM_GOMAP_FOLLOW                 User2Param = 60
	User2Param_USER2PARAM_AUTOHIT                      User2Param = 61
	User2Param_USER2PARAM_UPLOAD_SCENERY_PHOTO         User2Param = 62
	User2Param_USER2PARAM_QUERY_MAPAREA                User2Param = 63
	User2Param_USER2PARAM_NEW_MAPAREA                  User2Param = 64
	User2Param_USER2PARAM_FOREVER_BUFF                 User2Param = 66
	User2Param_USER2PARAM_INVITE_JOIN_HANDS            User2Param = 67
	User2Param_USER2PARAM_BREAK_UP_HANDS               User2Param = 68
	User2Param_USER2PARAM_QUERY_ACTION                 User2Param = 69
	User2Param_USER2PARAM_MUSIC_LIST                   User2Param = 70
	User2Param_USER2PARAM_MUSIC_DEMAND                 User2Param = 71
	User2Param_USER2PARAM_MUSIC_CLOSE                  User2Param = 72
	User2Param_USER2PARAM_UPLOAD_OK_SCENERY            User2Param = 73
	User2Param_USER2PARAM_JOIN_HANDS                   User2Param = 74
	User2Param_USER2PARAM_QUERY_TRACE_LIST             User2Param = 75
	User2Param_USER2PARAM_UPDATE_TRACE_LIST            User2Param = 76
	User2Param_USER2PARAM_SET_DIRECTION                User2Param = 77
	User2Param_USER2PARAM_DOWNLOAD_SCENERY_PHOTO       User2Param = 80
	User2Param_USER2PARAM_BATTLE_TIMELEN_USER_CMD      User2Param = 82
	User2Param_USER2PARAM_SETOPTION                    User2Param = 83
	User2Param_USER2PARAM_QUERYUSERINFO                User2Param = 84
	User2Param_USER2PARAM_COUNTDOWN_TICK               User2Param = 85
	User2Param_USER2PARAM_ITEM_MUSIC_NTF               User2Param = 86
	User2Param_USER2PARAM_SHAKETREE                    User2Param = 87
	User2Param_USER2PARAM_TREELIST                     User2Param = 88
	User2Param_USER2PARAM_ACTIVITY_NTF                 User2Param = 89
	User2Param_USER2PARAM_QUERY_ZONESTATUS             User2Param = 91
	User2Param_USER2PARAM_JUMP_ZONE                    User2Param = 92
	User2Param_USER2PARAM_ITEMIMAGE_USER_NTF           User2Param = 93
	User2Param_USER2PARAM_HANDSTATUS                   User2Param = 95
	User2Param_USER2PARAM_BEFOLLOW                     User2Param = 96
	User2Param_USER2PARAM_INVITEFOLLOW                 User2Param = 97
	User2Param_USER2PARAM_CHANGENAME                   User2Param = 98
	User2Param_USER2PARAM_CHARGEPLAY                   User2Param = 99
	User2Param_USER2PARAM_REQUIRENPCFUNC               User2Param = 100
	User2Param_USER2PARAM_CHECK_SEAT                   User2Param = 101
	User2Param_USER2PARAM_NTF_SEAT                     User2Param = 102
	User2Param_USER2PARAM_SET_NORMALSKILL_OPTION       User2Param = 103
	User2Param_USER2PARAM_UNSOLVED_SCENERY_NTF         User2Param = 104
	User2Param_USER2PARAM_NTF_VISIBLENPC               User2Param = 105
	User2Param_USER2PARAM_NEW_SET_OPTION               User2Param = 106
	User2Param_USER2PARAM_TRANSFORM_PREDATA            User2Param = 108
	User2Param_USER2PARAM_USER_RENAME                  User2Param = 109
	User2Param_USER2PARAM_ENTER_CAPRA_ACTIVITY         User2Param = 110
	User2Param_USER2PARAM_BUY_ZENY                     User2Param = 111
	User2Param_USER2PARAM_CALL_TEAMER                  User2Param = 112
	User2Param_USER2PARAM_CALL_TEAMER_JOIN             User2Param = 113
	User2Param_USER2PARAM_YOYO_SEAT                    User2Param = 114
	User2Param_USER2PARAM_SHOW_SEAT                    User2Param = 115
	User2Param_USER2PARAM_SPECIAL_EFFECT               User2Param = 116
	User2Param_USER2PARAM_MARRIAGE_PROPOSAL            User2Param = 117
	User2Param_USER2PARAM_MARRIAGE_PROPOSAL_REPLY      User2Param = 118
	User2Param_USER2PARAM_UPLOAD_WEDDING_PHOTO         User2Param = 119
	User2Param_USER2PARAM_MARRIAGE_PROPOSAL_SUCCESS    User2Param = 120
	User2Param_USER2PARAM_INVITEE_WEDDING_START_NTF    User2Param = 121
	User2Param_USER2PARAM_SERVANT_SHOW                 User2Param = 122
	User2Param_USER2PARAM_SERVANT_REPLACE              User2Param = 123
	User2Param_USER2PARAM_SERVANT_SERVICE              User2Param = 124
	User2Param_USER2PARAM_SERVANT_RECOMMEND            User2Param = 125
	User2Param_USER2PARAM_SERVANT_RECEIVE              User2Param = 126
	User2Param_USER2PARAM_SERVANT_REWARD_STATUS        User2Param = 127
	User2Param_USER2PARAM_KFC_SHARE                    User2Param = 128
	User2Param_USER2PARAM_TWINS_ACTION                 User2Param = 129
	User2Param_USER2PARAM_CHECK_RELATION               User2Param = 130
	User2Param_USER2PARAM_PROFESSION_QUERY             User2Param = 131
	User2Param_USER2PARAM_PROFESSION_BUY               User2Param = 132
	User2Param_USER2PARAM_PROFESSION_CHANGE            User2Param = 133
	User2Param_USER2PARAM_UPDATE_RECORD_INFO           User2Param = 134
	User2Param_USER2PARAM_SAVE_RECORD                  User2Param = 135
	User2Param_USER2PARAM_LOAD_RECORD                  User2Param = 136
	User2Param_USER2PARAM_CHANGE_RECORD_NAME           User2Param = 137
	User2Param_USER2PARAM_BUY_RECORD_SLOT              User2Param = 138
	User2Param_USER2PARAM_DELETE_RECORD                User2Param = 139
	User2Param_USER2PARAM_UPDATE_BRANCH_INFO           User2Param = 140
	User2Param_USER2PARAM_GOTO_FUNCMAP                 User2Param = 141
	User2Param_USER2PARAM_INVITE_WITH_ME               User2Param = 142
	User2Param_USER2PARAM_QUERY_ALTMAN_KILL            User2Param = 143
	User2Param_USER2PARAM_USER_BOOTH_REQ               User2Param = 144
	User2Param_USER2PARAM_BOOTH_INFO_SYNC              User2Param = 145
	User2Param_USER2PARAM_DRESSUP_MODEL                User2Param = 146
	User2Param_USER2PARAM_DRESSUP_HEAD                 User2Param = 147
	User2Param_USER2PARAM_QUERY_STAGE                  User2Param = 148
	User2Param_USER2PARAM_DRESSUP_LINEUP               User2Param = 149
	User2Param_USER2PARAM_DRESSUP_STAGE                User2Param = 150
	User2Param_USER2PARAM_DEATH_TRANSFER_LIST          User2Param = 151
	User2Param_USER2PARAM_NEW_DEATH_TRANSFER           User2Param = 152
	User2Param_USER2PARAM_TRANSFER                     User2Param = 153
	User2Param_USER2PARAM_SERVANT_GROWTH               User2Param = 154
	User2Param_USER2PARAM_SERVANT_RECEIVE_GROWTH       User2Param = 155
	User2Param_USER2PARAM_SERVANT_GROWTH_OPEN          User2Param = 156
	User2Param_USER2PARAM_CHEAT_TAG                    User2Param = 157
	User2Param_USER2PARAM_CHEAT_TAG_STAT               User2Param = 158
	User2Param_USER2PARAM_CLICK_POS_LIST               User2Param = 159
	User2Param_USER2PARAM_BEAT_PORI                    User2Param = 160
	User2Param_USER2PARAM_UNLOCK_FRAME                 User2Param = 161
	User2Param_USER2PARAM_KFC_ENROLL                   User2Param = 162
	User2Param_USER2PARAM_KFC_ENROLL_REPLY             User2Param = 163
	User2Param_USER2PARAM_SIGNIN                       User2Param = 164
	User2Param_USER2PARAM_SIGNIN_NTF                   User2Param = 165
	User2Param_USER2PARAM_KFC_HAS_ENROLLED             User2Param = 166
	User2Param_USER2PARAM_KFC_ENROLL_QUERY             User2Param = 167
	User2Param_USER2PARAM_KFC_ENROLL_CODE              User2Param = 168
	User2Param_USER2PARAM_SERVER_INFO_NTF              User2Param = 169
	User2Param_USER2PARAM_ALTMAN_REWARD                User2Param = 170
	User2Param_USER2PARAM_SERVANT_REQ_RESERVATION      User2Param = 171
	User2Param_USER2PARAM_SERVANT_RESERVATION          User2Param = 172
	User2Param_USER2PARAM_SERVANT_REC_EQUIP            User2Param = 173
	User2Param_USER2PARAM_READYTOMAP                   User2Param = 174
	User2Param_USER2PARAM_PRESTIGE_NTF                 User2Param = 175
	User2Param_USER2PARAM_PRESTIGE_GIVE                User2Param = 176
	User2Param_USER2PARAM_ACT_POINT                    User2Param = 177
	User2Param_USER2PARAM_GAMEHEALTH_UPDATE            User2Param = 178
	User2Param_USER2PARAM_GAMEHEALTH_EVENT_STAT        User2Param = 179
	User2Param_USER2PARAM_TEMP_PUT_SHORTCUT            User2Param = 180
	User2Param_USER2PARAM_FISHWAY2_INFORM              User2Param = 181
	User2Param_USER2PARAM_HIGHREFINE_ATTR              User2Param = 182
	User2Param_USER2PARAM_HEADWEAR_NPC                 User2Param = 183
	User2Param_USER2PARAM_HEADWEAR_ROUND               User2Param = 184
	User2Param_USER2PARAM_HEADWEAR_TOWER               User2Param = 185
	User2Param_USER2PARAM_HEADWEAR_END                 User2Param = 186
	User2Param_USER2PARAM_HEADWEAR_RANGE               User2Param = 187
	User2Param_USER2PARAM_HEADWEAR_OPEN                User2Param = 201
	User2Param_USER2PARAM_SERVANT_STATISTICS           User2Param = 191
	User2Param_USER2PARAM_SERVANT_STATISTICS_MAIL      User2Param = 192
	User2Param_USER2PARAM_RIDE_MULTI_MOUNT             User2Param = 193
	User2Param_USER2PARAM_KICK_OFF_PASSENGER           User2Param = 194
	User2Param_USER2PARAM_SET_MULTIMOUNT_OPT           User2Param = 195
	User2Param_USER2PARAM_MULTIMOUNT_CHANGE_POS        User2Param = 196
	User2Param_USER2PARAM_MAP_ANIME                    User2Param = 197
	User2Param_USER2PARAM_FAST_TRANS_CLASS             User2Param = 198
	User2Param_USER2PARAM_FAST_TRANS_GEM_QUERY         User2Param = 199
	User2Param_USER2PARAM_FAST_TRANS_GEM_GET           User2Param = 200
	User2Param_USER2PARAM_FOURTH_SKILL_COST_GET        User2Param = 205
	User2Param_USER2PARAM_BUILD_DATA_QUERY             User2Param = 202
	User2Param_USER2PARAM_BUILD_CONTRIBUTE             User2Param = 203
	User2Param_USER2PARAM_BUILD_OPERATE                User2Param = 204
	User2Param_USER2PARAM_EXTRACTION_QUERY             User2Param = 206
	User2Param_USER2PARAM_EXTRACTION_OPERATE           User2Param = 207
	User2Param_USER2PARAM_EXTRACTION_ACTIVE            User2Param = 208
	User2Param_USER2PARAM_EXTRACTION_REMOVE            User2Param = 209
	User2Param_USER2PARAM_EXTRACTION_GRID_BUY          User2Param = 210
	User2Param_USER2PARAM_EXTRACTION_REFRESH           User2Param = 214
	User2Param_USER2PARAM_NIGHTMARE_ATTR_QUERY         User2Param = 211
	User2Param_USER2PARAM_NIGHTMARE_ATTR_GET           User2Param = 212
	User2Param_USER2PARAM_QUERY_PROFESSION_DATA_DETAIL User2Param = 215
	User2Param_USER2PARAM_SHOOT_NPC                    User2Param = 216
	User2Param_USER2PARAM_PAYSIGN_NTF                  User2Param = 217
	User2Param_USER2PARAM_PAYSIGN_BUY                  User2Param = 218
	User2Param_USER2PARAM_PAYSIGN_REWARD               User2Param = 219
	User2Param_USER2PARAM_TEAM_EXP_REWAD               User2Param = 220
	User2Param_USER2PARAM_MYSELF_SETOPTION             User2Param = 221
	User2Param_USER2PARAM_GROUPON_QUERY                User2Param = 222
	User2Param_USER2PARAM_GROUPON_BUY                  User2Param = 223
	User2Param_USER2PARAM_GROUPON_REWARD               User2Param = 224
	User2Param_USER2PARAM_NOVICE_TARGET_UPDATE         User2Param = 225
	User2Param_USER2PARAM_NOVICE_TARGET_REWARD         User2Param = 229
	User2Param_USER2PARAM_NTF_PLAYACT                  User2Param = 228
	User2Param_USER2PARAM_USE_SKILLEFFECT_ITEM         User2Param = 231
	User2Param_USER2PARAM_EVALUATION_REWARD            User2Param = 232
	User2Param_USER2PARAM_QUERY_MAPMONSTER_REFRESH     User2Param = 233
	User2Param_USER2PARAM_SET_BOKI_STATE               User2Param = 234
	User2Param_USER2PARAM_CLOSEDIALOGMASK              User2Param = 239
	User2Param_USER2PARAM_CLOSEDIALOGCAMERA            User2Param = 240
	User2Param_USER2PARAM_HIDEUI                       User2Param = 241
	User2Param_USER2PARAM_SET_CAMERA                   User2Param = 242
	User2Param_USER2PARAM_CHAIN_EXCHANGE               User2Param = 243
	User2Param_USER2PARAM_CHAIN_OPT                    User2Param = 244
	User2Param_USER2PARAM_HAPPY_VALUE                  User2Param = 245
	User2Param_USER2PARAM_CLEAR_PROFESSION_DATA_DETAIL User2Param = 246
	User2Param_USER2PARAM_ACTIVITY_DONATE_QUERY        User2Param = 247
	User2Param_USER2PARAM_ACTIVITY_DONATE_REWARD       User2Param = 248
	User2Param_USER2PARAM_CHANGE_HAIR                  User2Param = 249
	User2Param_USER2PARAM_CHANGE_EYE                   User2Param = 250
	User2Param_USER2PARAM_SEND_TARGET_POS              User2Param = 251
	User2Param_USER2PARAM_COOK_GAME_FINISH             User2Param = 252
	User2Param_USER2PARAM_RACE_GAME_START              User2Param = 253
	User2Param_USER2PARAM_RACE_GAME_FINISH             User2Param = 254
	User2Param_USER2PARAM_HIRE_SERVANT_FIRST           User2Param = 255
)

// Enum value maps for User2Param.
var (
	User2Param_name = map[int32]string{
		1:   "USER2PARAM_GOCITY",
		2:   "USER2PARAM_SYSMSG",
		3:   "USER2PARAM_NPCDATASYNC",
		4:   "USER2PARAM_USERNINESYNC",
		5:   "USER2PARAM_ACTION",
		6:   "USER2PARAM_BUFFERSYNC",
		7:   "USER2PARAM_EXIT_POS",
		8:   "USER2PARAM_RELIVE",
		9:   "USER2PARAM_VAR",
		10:  "USER2PARAM_TALKINFO",
		11:  "USER2PARAM_SERVERTIME",
		12:  "USER2PARAM_NEWTRANSMAP",
		14:  "USER2PARAM_EFFECT",
		15:  "USER2PARAM_MENU",
		16:  "USER2PARAM_NEWMENU",
		17:  "USER2PARAM_TEAMINFONINE",
		18:  "USER2PARAM_USEPORTRAIT",
		19:  "USER2PARAM_USEFRAME",
		20:  "USER2PARAM_NEWPORTRAITFRAME",
		24:  "USER2PARAM_QUERYPORTRAITLIST",
		21:  "USER2PARAM_ADDATTRPOINT",
		22:  "USER2PARAM_QUERYSHOPGOTITEM",
		23:  "USER2PARAM_UPDATESHOPGOTITEM",
		25:  "USER2PARAM_USEDRESSING",
		26:  "USER2PARAM_NEWDRESSING",
		27:  "USER2PARAM_DRESSINGLIST",
		29:  "USER2PARAM_OPENUI",
		30:  "USER2PARAM_DBGSYSMSG",
		32:  "USER2PARAM_FOLLOWTRANSFER",
		33:  "USER2PARAM_NPCFUNC",
		34:  "USER2PARAM_MODELSHOW",
		35:  "USER2PARAM_SOUNDEFFECT",
		36:  "USER2PARAM_PRESETCHATMSG",
		37:  "USER2PARAM_CHANGEBGM",
		38:  "USER2PARAM_QUERYFIGHTERINFO",
		40:  "USER2PARAM_GAMETIME",
		41:  "USER2PARAM_CDTIME",
		42:  "USER2PARAM_STATECHANGE",
		44:  "USER2PARAM_PHOTO",
		45:  "USER2PARAM_SHAKESCREEN",
		47:  "USER2PARAM_QUERYSHORTCUT",
		48:  "USER2PARAM_PUTSHORTCUT",
		49:  "USER2PARAM_NPCANGLE",
		50:  "USER2PARAM_CAMERAFOCUS",
		51:  "USER2PARAM_GOTO_LIST",
		52:  "USER2PARAM_GOTO_GEAR",
		53:  "USER2PARAM_FOLLOWER",
		54:  "USER2PARAM_LABORATORY",
		56:  "USER2PARAM_EXCHANGEPROFESSION",
		57:  "USER2PARAM_GOTO_LABORATORY",
		58:  "USER2PARAM_SCENERY",
		59:  "USER2PARAM_GOMAP_QUEST",
		60:  "USER2PARAM_GOMAP_FOLLOW",
		61:  "USER2PARAM_AUTOHIT",
		62:  "USER2PARAM_UPLOAD_SCENERY_PHOTO",
		63:  "USER2PARAM_QUERY_MAPAREA",
		64:  "USER2PARAM_NEW_MAPAREA",
		66:  "USER2PARAM_FOREVER_BUFF",
		67:  "USER2PARAM_INVITE_JOIN_HANDS",
		68:  "USER2PARAM_BREAK_UP_HANDS",
		69:  "USER2PARAM_QUERY_ACTION",
		70:  "USER2PARAM_MUSIC_LIST",
		71:  "USER2PARAM_MUSIC_DEMAND",
		72:  "USER2PARAM_MUSIC_CLOSE",
		73:  "USER2PARAM_UPLOAD_OK_SCENERY",
		74:  "USER2PARAM_JOIN_HANDS",
		75:  "USER2PARAM_QUERY_TRACE_LIST",
		76:  "USER2PARAM_UPDATE_TRACE_LIST",
		77:  "USER2PARAM_SET_DIRECTION",
		80:  "USER2PARAM_DOWNLOAD_SCENERY_PHOTO",
		82:  "USER2PARAM_BATTLE_TIMELEN_USER_CMD",
		83:  "USER2PARAM_SETOPTION",
		84:  "USER2PARAM_QUERYUSERINFO",
		85:  "USER2PARAM_COUNTDOWN_TICK",
		86:  "USER2PARAM_ITEM_MUSIC_NTF",
		87:  "USER2PARAM_SHAKETREE",
		88:  "USER2PARAM_TREELIST",
		89:  "USER2PARAM_ACTIVITY_NTF",
		91:  "USER2PARAM_QUERY_ZONESTATUS",
		92:  "USER2PARAM_JUMP_ZONE",
		93:  "USER2PARAM_ITEMIMAGE_USER_NTF",
		95:  "USER2PARAM_HANDSTATUS",
		96:  "USER2PARAM_BEFOLLOW",
		97:  "USER2PARAM_INVITEFOLLOW",
		98:  "USER2PARAM_CHANGENAME",
		99:  "USER2PARAM_CHARGEPLAY",
		100: "USER2PARAM_REQUIRENPCFUNC",
		101: "USER2PARAM_CHECK_SEAT",
		102: "USER2PARAM_NTF_SEAT",
		103: "USER2PARAM_SET_NORMALSKILL_OPTION",
		104: "USER2PARAM_UNSOLVED_SCENERY_NTF",
		105: "USER2PARAM_NTF_VISIBLENPC",
		106: "USER2PARAM_NEW_SET_OPTION",
		108: "USER2PARAM_TRANSFORM_PREDATA",
		109: "USER2PARAM_USER_RENAME",
		110: "USER2PARAM_ENTER_CAPRA_ACTIVITY",
		111: "USER2PARAM_BUY_ZENY",
		112: "USER2PARAM_CALL_TEAMER",
		113: "USER2PARAM_CALL_TEAMER_JOIN",
		114: "USER2PARAM_YOYO_SEAT",
		115: "USER2PARAM_SHOW_SEAT",
		116: "USER2PARAM_SPECIAL_EFFECT",
		117: "USER2PARAM_MARRIAGE_PROPOSAL",
		118: "USER2PARAM_MARRIAGE_PROPOSAL_REPLY",
		119: "USER2PARAM_UPLOAD_WEDDING_PHOTO",
		120: "USER2PARAM_MARRIAGE_PROPOSAL_SUCCESS",
		121: "USER2PARAM_INVITEE_WEDDING_START_NTF",
		122: "USER2PARAM_SERVANT_SHOW",
		123: "USER2PARAM_SERVANT_REPLACE",
		124: "USER2PARAM_SERVANT_SERVICE",
		125: "USER2PARAM_SERVANT_RECOMMEND",
		126: "USER2PARAM_SERVANT_RECEIVE",
		127: "USER2PARAM_SERVANT_REWARD_STATUS",
		128: "USER2PARAM_KFC_SHARE",
		129: "USER2PARAM_TWINS_ACTION",
		130: "USER2PARAM_CHECK_RELATION",
		131: "USER2PARAM_PROFESSION_QUERY",
		132: "USER2PARAM_PROFESSION_BUY",
		133: "USER2PARAM_PROFESSION_CHANGE",
		134: "USER2PARAM_UPDATE_RECORD_INFO",
		135: "USER2PARAM_SAVE_RECORD",
		136: "USER2PARAM_LOAD_RECORD",
		137: "USER2PARAM_CHANGE_RECORD_NAME",
		138: "USER2PARAM_BUY_RECORD_SLOT",
		139: "USER2PARAM_DELETE_RECORD",
		140: "USER2PARAM_UPDATE_BRANCH_INFO",
		141: "USER2PARAM_GOTO_FUNCMAP",
		142: "USER2PARAM_INVITE_WITH_ME",
		143: "USER2PARAM_QUERY_ALTMAN_KILL",
		144: "USER2PARAM_USER_BOOTH_REQ",
		145: "USER2PARAM_BOOTH_INFO_SYNC",
		146: "USER2PARAM_DRESSUP_MODEL",
		147: "USER2PARAM_DRESSUP_HEAD",
		148: "USER2PARAM_QUERY_STAGE",
		149: "USER2PARAM_DRESSUP_LINEUP",
		150: "USER2PARAM_DRESSUP_STAGE",
		151: "USER2PARAM_DEATH_TRANSFER_LIST",
		152: "USER2PARAM_NEW_DEATH_TRANSFER",
		153: "USER2PARAM_TRANSFER",
		154: "USER2PARAM_SERVANT_GROWTH",
		155: "USER2PARAM_SERVANT_RECEIVE_GROWTH",
		156: "USER2PARAM_SERVANT_GROWTH_OPEN",
		157: "USER2PARAM_CHEAT_TAG",
		158: "USER2PARAM_CHEAT_TAG_STAT",
		159: "USER2PARAM_CLICK_POS_LIST",
		160: "USER2PARAM_BEAT_PORI",
		161: "USER2PARAM_UNLOCK_FRAME",
		162: "USER2PARAM_KFC_ENROLL",
		163: "USER2PARAM_KFC_ENROLL_REPLY",
		164: "USER2PARAM_SIGNIN",
		165: "USER2PARAM_SIGNIN_NTF",
		166: "USER2PARAM_KFC_HAS_ENROLLED",
		167: "USER2PARAM_KFC_ENROLL_QUERY",
		168: "USER2PARAM_KFC_ENROLL_CODE",
		169: "USER2PARAM_SERVER_INFO_NTF",
		170: "USER2PARAM_ALTMAN_REWARD",
		171: "USER2PARAM_SERVANT_REQ_RESERVATION",
		172: "USER2PARAM_SERVANT_RESERVATION",
		173: "USER2PARAM_SERVANT_REC_EQUIP",
		174: "USER2PARAM_READYTOMAP",
		175: "USER2PARAM_PRESTIGE_NTF",
		176: "USER2PARAM_PRESTIGE_GIVE",
		177: "USER2PARAM_ACT_POINT",
		178: "USER2PARAM_GAMEHEALTH_UPDATE",
		179: "USER2PARAM_GAMEHEALTH_EVENT_STAT",
		180: "USER2PARAM_TEMP_PUT_SHORTCUT",
		181: "USER2PARAM_FISHWAY2_INFORM",
		182: "USER2PARAM_HIGHREFINE_ATTR",
		183: "USER2PARAM_HEADWEAR_NPC",
		184: "USER2PARAM_HEADWEAR_ROUND",
		185: "USER2PARAM_HEADWEAR_TOWER",
		186: "USER2PARAM_HEADWEAR_END",
		187: "USER2PARAM_HEADWEAR_RANGE",
		201: "USER2PARAM_HEADWEAR_OPEN",
		191: "USER2PARAM_SERVANT_STATISTICS",
		192: "USER2PARAM_SERVANT_STATISTICS_MAIL",
		193: "USER2PARAM_RIDE_MULTI_MOUNT",
		194: "USER2PARAM_KICK_OFF_PASSENGER",
		195: "USER2PARAM_SET_MULTIMOUNT_OPT",
		196: "USER2PARAM_MULTIMOUNT_CHANGE_POS",
		197: "USER2PARAM_MAP_ANIME",
		198: "USER2PARAM_FAST_TRANS_CLASS",
		199: "USER2PARAM_FAST_TRANS_GEM_QUERY",
		200: "USER2PARAM_FAST_TRANS_GEM_GET",
		205: "USER2PARAM_FOURTH_SKILL_COST_GET",
		202: "USER2PARAM_BUILD_DATA_QUERY",
		203: "USER2PARAM_BUILD_CONTRIBUTE",
		204: "USER2PARAM_BUILD_OPERATE",
		206: "USER2PARAM_EXTRACTION_QUERY",
		207: "USER2PARAM_EXTRACTION_OPERATE",
		208: "USER2PARAM_EXTRACTION_ACTIVE",
		209: "USER2PARAM_EXTRACTION_REMOVE",
		210: "USER2PARAM_EXTRACTION_GRID_BUY",
		214: "USER2PARAM_EXTRACTION_REFRESH",
		211: "USER2PARAM_NIGHTMARE_ATTR_QUERY",
		212: "USER2PARAM_NIGHTMARE_ATTR_GET",
		215: "USER2PARAM_QUERY_PROFESSION_DATA_DETAIL",
		216: "USER2PARAM_SHOOT_NPC",
		217: "USER2PARAM_PAYSIGN_NTF",
		218: "USER2PARAM_PAYSIGN_BUY",
		219: "USER2PARAM_PAYSIGN_REWARD",
		220: "USER2PARAM_TEAM_EXP_REWAD",
		221: "USER2PARAM_MYSELF_SETOPTION",
		222: "USER2PARAM_GROUPON_QUERY",
		223: "USER2PARAM_GROUPON_BUY",
		224: "USER2PARAM_GROUPON_REWARD",
		225: "USER2PARAM_NOVICE_TARGET_UPDATE",
		229: "USER2PARAM_NOVICE_TARGET_REWARD",
		228: "USER2PARAM_NTF_PLAYACT",
		231: "USER2PARAM_USE_SKILLEFFECT_ITEM",
		232: "USER2PARAM_EVALUATION_REWARD",
		233: "USER2PARAM_QUERY_MAPMONSTER_REFRESH",
		234: "USER2PARAM_SET_BOKI_STATE",
		239: "USER2PARAM_CLOSEDIALOGMASK",
		240: "USER2PARAM_CLOSEDIALOGCAMERA",
		241: "USER2PARAM_HIDEUI",
		242: "USER2PARAM_SET_CAMERA",
		243: "USER2PARAM_CHAIN_EXCHANGE",
		244: "USER2PARAM_CHAIN_OPT",
		245: "USER2PARAM_HAPPY_VALUE",
		246: "USER2PARAM_CLEAR_PROFESSION_DATA_DETAIL",
		247: "USER2PARAM_ACTIVITY_DONATE_QUERY",
		248: "USER2PARAM_ACTIVITY_DONATE_REWARD",
		249: "USER2PARAM_CHANGE_HAIR",
		250: "USER2PARAM_CHANGE_EYE",
		251: "USER2PARAM_SEND_TARGET_POS",
		252: "USER2PARAM_COOK_GAME_FINISH",
		253: "USER2PARAM_RACE_GAME_START",
		254: "USER2PARAM_RACE_GAME_FINISH",
		255: "USER2PARAM_HIRE_SERVANT_FIRST",
	}
	User2Param_value = map[string]int32{
		"USER2PARAM_GOCITY":                       1,
		"USER2PARAM_SYSMSG":                       2,
		"USER2PARAM_NPCDATASYNC":                  3,
		"USER2PARAM_USERNINESYNC":                 4,
		"USER2PARAM_ACTION":                       5,
		"USER2PARAM_BUFFERSYNC":                   6,
		"USER2PARAM_EXIT_POS":                     7,
		"USER2PARAM_RELIVE":                       8,
		"USER2PARAM_VAR":                          9,
		"USER2PARAM_TALKINFO":                     10,
		"USER2PARAM_SERVERTIME":                   11,
		"USER2PARAM_NEWTRANSMAP":                  12,
		"USER2PARAM_EFFECT":                       14,
		"USER2PARAM_MENU":                         15,
		"USER2PARAM_NEWMENU":                      16,
		"USER2PARAM_TEAMINFONINE":                 17,
		"USER2PARAM_USEPORTRAIT":                  18,
		"USER2PARAM_USEFRAME":                     19,
		"USER2PARAM_NEWPORTRAITFRAME":             20,
		"USER2PARAM_QUERYPORTRAITLIST":            24,
		"USER2PARAM_ADDATTRPOINT":                 21,
		"USER2PARAM_QUERYSHOPGOTITEM":             22,
		"USER2PARAM_UPDATESHOPGOTITEM":            23,
		"USER2PARAM_USEDRESSING":                  25,
		"USER2PARAM_NEWDRESSING":                  26,
		"USER2PARAM_DRESSINGLIST":                 27,
		"USER2PARAM_OPENUI":                       29,
		"USER2PARAM_DBGSYSMSG":                    30,
		"USER2PARAM_FOLLOWTRANSFER":               32,
		"USER2PARAM_NPCFUNC":                      33,
		"USER2PARAM_MODELSHOW":                    34,
		"USER2PARAM_SOUNDEFFECT":                  35,
		"USER2PARAM_PRESETCHATMSG":                36,
		"USER2PARAM_CHANGEBGM":                    37,
		"USER2PARAM_QUERYFIGHTERINFO":             38,
		"USER2PARAM_GAMETIME":                     40,
		"USER2PARAM_CDTIME":                       41,
		"USER2PARAM_STATECHANGE":                  42,
		"USER2PARAM_PHOTO":                        44,
		"USER2PARAM_SHAKESCREEN":                  45,
		"USER2PARAM_QUERYSHORTCUT":                47,
		"USER2PARAM_PUTSHORTCUT":                  48,
		"USER2PARAM_NPCANGLE":                     49,
		"USER2PARAM_CAMERAFOCUS":                  50,
		"USER2PARAM_GOTO_LIST":                    51,
		"USER2PARAM_GOTO_GEAR":                    52,
		"USER2PARAM_FOLLOWER":                     53,
		"USER2PARAM_LABORATORY":                   54,
		"USER2PARAM_EXCHANGEPROFESSION":           56,
		"USER2PARAM_GOTO_LABORATORY":              57,
		"USER2PARAM_SCENERY":                      58,
		"USER2PARAM_GOMAP_QUEST":                  59,
		"USER2PARAM_GOMAP_FOLLOW":                 60,
		"USER2PARAM_AUTOHIT":                      61,
		"USER2PARAM_UPLOAD_SCENERY_PHOTO":         62,
		"USER2PARAM_QUERY_MAPAREA":                63,
		"USER2PARAM_NEW_MAPAREA":                  64,
		"USER2PARAM_FOREVER_BUFF":                 66,
		"USER2PARAM_INVITE_JOIN_HANDS":            67,
		"USER2PARAM_BREAK_UP_HANDS":               68,
		"USER2PARAM_QUERY_ACTION":                 69,
		"USER2PARAM_MUSIC_LIST":                   70,
		"USER2PARAM_MUSIC_DEMAND":                 71,
		"USER2PARAM_MUSIC_CLOSE":                  72,
		"USER2PARAM_UPLOAD_OK_SCENERY":            73,
		"USER2PARAM_JOIN_HANDS":                   74,
		"USER2PARAM_QUERY_TRACE_LIST":             75,
		"USER2PARAM_UPDATE_TRACE_LIST":            76,
		"USER2PARAM_SET_DIRECTION":                77,
		"USER2PARAM_DOWNLOAD_SCENERY_PHOTO":       80,
		"USER2PARAM_BATTLE_TIMELEN_USER_CMD":      82,
		"USER2PARAM_SETOPTION":                    83,
		"USER2PARAM_QUERYUSERINFO":                84,
		"USER2PARAM_COUNTDOWN_TICK":               85,
		"USER2PARAM_ITEM_MUSIC_NTF":               86,
		"USER2PARAM_SHAKETREE":                    87,
		"USER2PARAM_TREELIST":                     88,
		"USER2PARAM_ACTIVITY_NTF":                 89,
		"USER2PARAM_QUERY_ZONESTATUS":             91,
		"USER2PARAM_JUMP_ZONE":                    92,
		"USER2PARAM_ITEMIMAGE_USER_NTF":           93,
		"USER2PARAM_HANDSTATUS":                   95,
		"USER2PARAM_BEFOLLOW":                     96,
		"USER2PARAM_INVITEFOLLOW":                 97,
		"USER2PARAM_CHANGENAME":                   98,
		"USER2PARAM_CHARGEPLAY":                   99,
		"USER2PARAM_REQUIRENPCFUNC":               100,
		"USER2PARAM_CHECK_SEAT":                   101,
		"USER2PARAM_NTF_SEAT":                     102,
		"USER2PARAM_SET_NORMALSKILL_OPTION":       103,
		"USER2PARAM_UNSOLVED_SCENERY_NTF":         104,
		"USER2PARAM_NTF_VISIBLENPC":               105,
		"USER2PARAM_NEW_SET_OPTION":               106,
		"USER2PARAM_TRANSFORM_PREDATA":            108,
		"USER2PARAM_USER_RENAME":                  109,
		"USER2PARAM_ENTER_CAPRA_ACTIVITY":         110,
		"USER2PARAM_BUY_ZENY":                     111,
		"USER2PARAM_CALL_TEAMER":                  112,
		"USER2PARAM_CALL_TEAMER_JOIN":             113,
		"USER2PARAM_YOYO_SEAT":                    114,
		"USER2PARAM_SHOW_SEAT":                    115,
		"USER2PARAM_SPECIAL_EFFECT":               116,
		"USER2PARAM_MARRIAGE_PROPOSAL":            117,
		"USER2PARAM_MARRIAGE_PROPOSAL_REPLY":      118,
		"USER2PARAM_UPLOAD_WEDDING_PHOTO":         119,
		"USER2PARAM_MARRIAGE_PROPOSAL_SUCCESS":    120,
		"USER2PARAM_INVITEE_WEDDING_START_NTF":    121,
		"USER2PARAM_SERVANT_SHOW":                 122,
		"USER2PARAM_SERVANT_REPLACE":              123,
		"USER2PARAM_SERVANT_SERVICE":              124,
		"USER2PARAM_SERVANT_RECOMMEND":            125,
		"USER2PARAM_SERVANT_RECEIVE":              126,
		"USER2PARAM_SERVANT_REWARD_STATUS":        127,
		"USER2PARAM_KFC_SHARE":                    128,
		"USER2PARAM_TWINS_ACTION":                 129,
		"USER2PARAM_CHECK_RELATION":               130,
		"USER2PARAM_PROFESSION_QUERY":             131,
		"USER2PARAM_PROFESSION_BUY":               132,
		"USER2PARAM_PROFESSION_CHANGE":            133,
		"USER2PARAM_UPDATE_RECORD_INFO":           134,
		"USER2PARAM_SAVE_RECORD":                  135,
		"USER2PARAM_LOAD_RECORD":                  136,
		"USER2PARAM_CHANGE_RECORD_NAME":           137,
		"USER2PARAM_BUY_RECORD_SLOT":              138,
		"USER2PARAM_DELETE_RECORD":                139,
		"USER2PARAM_UPDATE_BRANCH_INFO":           140,
		"USER2PARAM_GOTO_FUNCMAP":                 141,
		"USER2PARAM_INVITE_WITH_ME":               142,
		"USER2PARAM_QUERY_ALTMAN_KILL":            143,
		"USER2PARAM_USER_BOOTH_REQ":               144,
		"USER2PARAM_BOOTH_INFO_SYNC":              145,
		"USER2PARAM_DRESSUP_MODEL":                146,
		"USER2PARAM_DRESSUP_HEAD":                 147,
		"USER2PARAM_QUERY_STAGE":                  148,
		"USER2PARAM_DRESSUP_LINEUP":               149,
		"USER2PARAM_DRESSUP_STAGE":                150,
		"USER2PARAM_DEATH_TRANSFER_LIST":          151,
		"USER2PARAM_NEW_DEATH_TRANSFER":           152,
		"USER2PARAM_TRANSFER":                     153,
		"USER2PARAM_SERVANT_GROWTH":               154,
		"USER2PARAM_SERVANT_RECEIVE_GROWTH":       155,
		"USER2PARAM_SERVANT_GROWTH_OPEN":          156,
		"USER2PARAM_CHEAT_TAG":                    157,
		"USER2PARAM_CHEAT_TAG_STAT":               158,
		"USER2PARAM_CLICK_POS_LIST":               159,
		"USER2PARAM_BEAT_PORI":                    160,
		"USER2PARAM_UNLOCK_FRAME":                 161,
		"USER2PARAM_KFC_ENROLL":                   162,
		"USER2PARAM_KFC_ENROLL_REPLY":             163,
		"USER2PARAM_SIGNIN":                       164,
		"USER2PARAM_SIGNIN_NTF":                   165,
		"USER2PARAM_KFC_HAS_ENROLLED":             166,
		"USER2PARAM_KFC_ENROLL_QUERY":             167,
		"USER2PARAM_KFC_ENROLL_CODE":              168,
		"USER2PARAM_SERVER_INFO_NTF":              169,
		"USER2PARAM_ALTMAN_REWARD":                170,
		"USER2PARAM_SERVANT_REQ_RESERVATION":      171,
		"USER2PARAM_SERVANT_RESERVATION":          172,
		"USER2PARAM_SERVANT_REC_EQUIP":            173,
		"USER2PARAM_READYTOMAP":                   174,
		"USER2PARAM_PRESTIGE_NTF":                 175,
		"USER2PARAM_PRESTIGE_GIVE":                176,
		"USER2PARAM_ACT_POINT":                    177,
		"USER2PARAM_GAMEHEALTH_UPDATE":            178,
		"USER2PARAM_GAMEHEALTH_EVENT_STAT":        179,
		"USER2PARAM_TEMP_PUT_SHORTCUT":            180,
		"USER2PARAM_FISHWAY2_INFORM":              181,
		"USER2PARAM_HIGHREFINE_ATTR":              182,
		"USER2PARAM_HEADWEAR_NPC":                 183,
		"USER2PARAM_HEADWEAR_ROUND":               184,
		"USER2PARAM_HEADWEAR_TOWER":               185,
		"USER2PARAM_HEADWEAR_END":                 186,
		"USER2PARAM_HEADWEAR_RANGE":               187,
		"USER2PARAM_HEADWEAR_OPEN":                201,
		"USER2PARAM_SERVANT_STATISTICS":           191,
		"USER2PARAM_SERVANT_STATISTICS_MAIL":      192,
		"USER2PARAM_RIDE_MULTI_MOUNT":             193,
		"USER2PARAM_KICK_OFF_PASSENGER":           194,
		"USER2PARAM_SET_MULTIMOUNT_OPT":           195,
		"USER2PARAM_MULTIMOUNT_CHANGE_POS":        196,
		"USER2PARAM_MAP_ANIME":                    197,
		"USER2PARAM_FAST_TRANS_CLASS":             198,
		"USER2PARAM_FAST_TRANS_GEM_QUERY":         199,
		"USER2PARAM_FAST_TRANS_GEM_GET":           200,
		"USER2PARAM_FOURTH_SKILL_COST_GET":        205,
		"USER2PARAM_BUILD_DATA_QUERY":             202,
		"USER2PARAM_BUILD_CONTRIBUTE":             203,
		"USER2PARAM_BUILD_OPERATE":                204,
		"USER2PARAM_EXTRACTION_QUERY":             206,
		"USER2PARAM_EXTRACTION_OPERATE":           207,
		"USER2PARAM_EXTRACTION_ACTIVE":            208,
		"USER2PARAM_EXTRACTION_REMOVE":            209,
		"USER2PARAM_EXTRACTION_GRID_BUY":          210,
		"USER2PARAM_EXTRACTION_REFRESH":           214,
		"USER2PARAM_NIGHTMARE_ATTR_QUERY":         211,
		"USER2PARAM_NIGHTMARE_ATTR_GET":           212,
		"USER2PARAM_QUERY_PROFESSION_DATA_DETAIL": 215,
		"USER2PARAM_SHOOT_NPC":                    216,
		"USER2PARAM_PAYSIGN_NTF":                  217,
		"USER2PARAM_PAYSIGN_BUY":                  218,
		"USER2PARAM_PAYSIGN_REWARD":               219,
		"USER2PARAM_TEAM_EXP_REWAD":               220,
		"USER2PARAM_MYSELF_SETOPTION":             221,
		"USER2PARAM_GROUPON_QUERY":                222,
		"USER2PARAM_GROUPON_BUY":                  223,
		"USER2PARAM_GROUPON_REWARD":               224,
		"USER2PARAM_NOVICE_TARGET_UPDATE":         225,
		"USER2PARAM_NOVICE_TARGET_REWARD":         229,
		"USER2PARAM_NTF_PLAYACT":                  228,
		"USER2PARAM_USE_SKILLEFFECT_ITEM":         231,
		"USER2PARAM_EVALUATION_REWARD":            232,
		"USER2PARAM_QUERY_MAPMONSTER_REFRESH":     233,
		"USER2PARAM_SET_BOKI_STATE":               234,
		"USER2PARAM_CLOSEDIALOGMASK":              239,
		"USER2PARAM_CLOSEDIALOGCAMERA":            240,
		"USER2PARAM_HIDEUI":                       241,
		"USER2PARAM_SET_CAMERA":                   242,
		"USER2PARAM_CHAIN_EXCHANGE":               243,
		"USER2PARAM_CHAIN_OPT":                    244,
		"USER2PARAM_HAPPY_VALUE":                  245,
		"USER2PARAM_CLEAR_PROFESSION_DATA_DETAIL": 246,
		"USER2PARAM_ACTIVITY_DONATE_QUERY":        247,
		"USER2PARAM_ACTIVITY_DONATE_REWARD":       248,
		"USER2PARAM_CHANGE_HAIR":                  249,
		"USER2PARAM_CHANGE_EYE":                   250,
		"USER2PARAM_SEND_TARGET_POS":              251,
		"USER2PARAM_COOK_GAME_FINISH":             252,
		"USER2PARAM_RACE_GAME_START":              253,
		"USER2PARAM_RACE_GAME_FINISH":             254,
		"USER2PARAM_HIRE_SERVANT_FIRST":           255,
	}
)

func (x User2Param) Enum() *User2Param {
	p := new(User2Param)
	*p = x
	return p
}

func (x User2Param) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User2Param) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[0].Descriptor()
}

func (User2Param) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[0]
}

func (x User2Param) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *User2Param) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = User2Param(num)
	return nil
}

// Deprecated: Use User2Param.Descriptor instead.
func (User2Param) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{0}
}

type EMessageType int32

const (
	EMessageType_EMESSAGETYPE_MIN                 EMessageType = 0
	EMessageType_EMESSAGETYPE_FRAME               EMessageType = 1
	EMessageType_EMESSAGETYPE_GETEXP              EMessageType = 2
	EMessageType_EMESSAGETYPE_TIME_DOWN           EMessageType = 3
	EMessageType_EMESSAGETYPE_TIME_DOWN_NOT_CLEAR EMessageType = 4
	EMessageType_EMESSAGETYPE_MIDDLE_SHOW         EMessageType = 5
	EMessageType_EMESSAGETYPE_MAX                 EMessageType = 6
)

// Enum value maps for EMessageType.
var (
	EMessageType_name = map[int32]string{
		0: "EMESSAGETYPE_MIN",
		1: "EMESSAGETYPE_FRAME",
		2: "EMESSAGETYPE_GETEXP",
		3: "EMESSAGETYPE_TIME_DOWN",
		4: "EMESSAGETYPE_TIME_DOWN_NOT_CLEAR",
		5: "EMESSAGETYPE_MIDDLE_SHOW",
		6: "EMESSAGETYPE_MAX",
	}
	EMessageType_value = map[string]int32{
		"EMESSAGETYPE_MIN":                 0,
		"EMESSAGETYPE_FRAME":               1,
		"EMESSAGETYPE_GETEXP":              2,
		"EMESSAGETYPE_TIME_DOWN":           3,
		"EMESSAGETYPE_TIME_DOWN_NOT_CLEAR": 4,
		"EMESSAGETYPE_MIDDLE_SHOW":         5,
		"EMESSAGETYPE_MAX":                 6,
	}
)

func (x EMessageType) Enum() *EMessageType {
	p := new(EMessageType)
	*p = x
	return p
}

func (x EMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[1].Descriptor()
}

func (EMessageType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[1]
}

func (x EMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMessageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMessageType(num)
	return nil
}

// Deprecated: Use EMessageType.Descriptor instead.
func (EMessageType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{1}
}

type EMessageActOpt int32

const (
	EMessageActOpt_EMESSAGEACT_ADD EMessageActOpt = 1
	EMessageActOpt_EMESSAGEACT_DEL EMessageActOpt = 2
)

// Enum value maps for EMessageActOpt.
var (
	EMessageActOpt_name = map[int32]string{
		1: "EMESSAGEACT_ADD",
		2: "EMESSAGEACT_DEL",
	}
	EMessageActOpt_value = map[string]int32{
		"EMESSAGEACT_ADD": 1,
		"EMESSAGEACT_DEL": 2,
	}
)

func (x EMessageActOpt) Enum() *EMessageActOpt {
	p := new(EMessageActOpt)
	*p = x
	return p
}

func (x EMessageActOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMessageActOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[2].Descriptor()
}

func (EMessageActOpt) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[2]
}

func (x EMessageActOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMessageActOpt) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMessageActOpt(num)
	return nil
}

// Deprecated: Use EMessageActOpt.Descriptor instead.
func (EMessageActOpt) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{2}
}

type EUserActionType int32

const (
	EUserActionType_EUSERACTIONTYPE_MIN          EUserActionType = 0
	EUserActionType_EUSERACTIONTYPE_ADDHP        EUserActionType = 1
	EUserActionType_EUSERACTIONTYPE_REFINE       EUserActionType = 2
	EUserActionType_EUSERACTIONTYPE_EXPRESSION   EUserActionType = 3
	EUserActionType_EUSERACTIONTYPE_MOTION       EUserActionType = 4
	EUserActionType_EUSERACTIONTYPE_GEAR_ACTION  EUserActionType = 5
	EUserActionType_EUSERACTIONTYPE_NORMALMOTION EUserActionType = 6
	EUserActionType_EUSERACTIONTYPE_DIALOG       EUserActionType = 7
	EUserActionType_EUSERACTIONTYPE_ANIMATION    EUserActionType = 8
	EUserActionType_EUSERACTIONTYPE_WALKACTION   EUserActionType = 9
	EUserActionType_EUSERACTIONTYPE_MAX          EUserActionType = 10
)

// Enum value maps for EUserActionType.
var (
	EUserActionType_name = map[int32]string{
		0:  "EUSERACTIONTYPE_MIN",
		1:  "EUSERACTIONTYPE_ADDHP",
		2:  "EUSERACTIONTYPE_REFINE",
		3:  "EUSERACTIONTYPE_EXPRESSION",
		4:  "EUSERACTIONTYPE_MOTION",
		5:  "EUSERACTIONTYPE_GEAR_ACTION",
		6:  "EUSERACTIONTYPE_NORMALMOTION",
		7:  "EUSERACTIONTYPE_DIALOG",
		8:  "EUSERACTIONTYPE_ANIMATION",
		9:  "EUSERACTIONTYPE_WALKACTION",
		10: "EUSERACTIONTYPE_MAX",
	}
	EUserActionType_value = map[string]int32{
		"EUSERACTIONTYPE_MIN":          0,
		"EUSERACTIONTYPE_ADDHP":        1,
		"EUSERACTIONTYPE_REFINE":       2,
		"EUSERACTIONTYPE_EXPRESSION":   3,
		"EUSERACTIONTYPE_MOTION":       4,
		"EUSERACTIONTYPE_GEAR_ACTION":  5,
		"EUSERACTIONTYPE_NORMALMOTION": 6,
		"EUSERACTIONTYPE_DIALOG":       7,
		"EUSERACTIONTYPE_ANIMATION":    8,
		"EUSERACTIONTYPE_WALKACTION":   9,
		"EUSERACTIONTYPE_MAX":          10,
	}
)

func (x EUserActionType) Enum() *EUserActionType {
	p := new(EUserActionType)
	*p = x
	return p
}

func (x EUserActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUserActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[3].Descriptor()
}

func (EUserActionType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[3]
}

func (x EUserActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUserActionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUserActionType(num)
	return nil
}

// Deprecated: Use EUserActionType.Descriptor instead.
func (EUserActionType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{3}
}

type EReliveType int32

const (
	EReliveType_ERELIVETYPE_MIN           EReliveType = 0
	EReliveType_ERELIVETYPE_RETURN        EReliveType = 1
	EReliveType_ERELIVETYPE_MONEY         EReliveType = 2
	EReliveType_ERELIVETYPE_RAND          EReliveType = 3
	EReliveType_ERELIVETYPE_RETURNSAVE    EReliveType = 4
	EReliveType_ERELIVETYPE_SKILL         EReliveType = 5
	EReliveType_ERELIVETYPE_TOWER         EReliveType = 6
	EReliveType_ERELIVETYPE_SYSTEM        EReliveType = 7
	EReliveType_ERELIVETYPE_LIMIT_ITEM    EReliveType = 8
	EReliveType_ERELIVETYPE_GUILDRAID     EReliveType = 9
	EReliveType_ERELIVETYPE_MAP           EReliveType = 10
	EReliveType_ERELIVETYPE_KICK_RETURN   EReliveType = 11
	EReliveType_ERELIVETYPE_SYSTEM_CLIENT EReliveType = 12
	EReliveType_ERELIVETYPE_MAX           EReliveType = 13
)

// Enum value maps for EReliveType.
var (
	EReliveType_name = map[int32]string{
		0:  "ERELIVETYPE_MIN",
		1:  "ERELIVETYPE_RETURN",
		2:  "ERELIVETYPE_MONEY",
		3:  "ERELIVETYPE_RAND",
		4:  "ERELIVETYPE_RETURNSAVE",
		5:  "ERELIVETYPE_SKILL",
		6:  "ERELIVETYPE_TOWER",
		7:  "ERELIVETYPE_SYSTEM",
		8:  "ERELIVETYPE_LIMIT_ITEM",
		9:  "ERELIVETYPE_GUILDRAID",
		10: "ERELIVETYPE_MAP",
		11: "ERELIVETYPE_KICK_RETURN",
		12: "ERELIVETYPE_SYSTEM_CLIENT",
		13: "ERELIVETYPE_MAX",
	}
	EReliveType_value = map[string]int32{
		"ERELIVETYPE_MIN":           0,
		"ERELIVETYPE_RETURN":        1,
		"ERELIVETYPE_MONEY":         2,
		"ERELIVETYPE_RAND":          3,
		"ERELIVETYPE_RETURNSAVE":    4,
		"ERELIVETYPE_SKILL":         5,
		"ERELIVETYPE_TOWER":         6,
		"ERELIVETYPE_SYSTEM":        7,
		"ERELIVETYPE_LIMIT_ITEM":    8,
		"ERELIVETYPE_GUILDRAID":     9,
		"ERELIVETYPE_MAP":           10,
		"ERELIVETYPE_KICK_RETURN":   11,
		"ERELIVETYPE_SYSTEM_CLIENT": 12,
		"ERELIVETYPE_MAX":           13,
	}
)

func (x EReliveType) Enum() *EReliveType {
	p := new(EReliveType)
	*p = x
	return p
}

func (x EReliveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EReliveType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[4].Descriptor()
}

func (EReliveType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[4]
}

func (x EReliveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EReliveType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EReliveType(num)
	return nil
}

// Deprecated: Use EReliveType.Descriptor instead.
func (EReliveType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{4}
}

type EEffectOpt int32

const (
	EEffectOpt_EEFFECTOPT_PLAY   EEffectOpt = 1
	EEffectOpt_EEFFECTOPT_STOP   EEffectOpt = 2
	EEffectOpt_EEFFECTOPT_DELETE EEffectOpt = 3
)

// Enum value maps for EEffectOpt.
var (
	EEffectOpt_name = map[int32]string{
		1: "EEFFECTOPT_PLAY",
		2: "EEFFECTOPT_STOP",
		3: "EEFFECTOPT_DELETE",
	}
	EEffectOpt_value = map[string]int32{
		"EEFFECTOPT_PLAY":   1,
		"EEFFECTOPT_STOP":   2,
		"EEFFECTOPT_DELETE": 3,
	}
)

func (x EEffectOpt) Enum() *EEffectOpt {
	p := new(EEffectOpt)
	*p = x
	return p
}

func (x EEffectOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEffectOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[5].Descriptor()
}

func (EEffectOpt) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[5]
}

func (x EEffectOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEffectOpt) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEffectOpt(num)
	return nil
}

// Deprecated: Use EEffectOpt.Descriptor instead.
func (EEffectOpt) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{5}
}

type EEffectType int32

const (
	EEffectType_EEFFECTTYPE_NORMAL             EEffectType = 1
	EEffectType_EEFFECTTYPE_ACCEPTQUEST        EEffectType = 2
	EEffectType_EEFFECTTYPE_FINISHQUEST        EEffectType = 3
	EEffectType_EEFFECTTYPE_MVPSHOW            EEffectType = 4
	EEffectType_EEFFECTTYPE_SCENEEFFECT        EEffectType = 5
	EEffectType_EEFFECTTYPE_UIPATH             EEffectType = 6
	EEffectType_EEFFECTTYPE_FILTER             EEffectType = 7
	EEffectType_EEFFECTTYPE_FULLSCREENUIEFFECT EEffectType = 8
	EEffectType_EEFFECTTYPE_SKILL              EEffectType = 9
)

// Enum value maps for EEffectType.
var (
	EEffectType_name = map[int32]string{
		1: "EEFFECTTYPE_NORMAL",
		2: "EEFFECTTYPE_ACCEPTQUEST",
		3: "EEFFECTTYPE_FINISHQUEST",
		4: "EEFFECTTYPE_MVPSHOW",
		5: "EEFFECTTYPE_SCENEEFFECT",
		6: "EEFFECTTYPE_UIPATH",
		7: "EEFFECTTYPE_FILTER",
		8: "EEFFECTTYPE_FULLSCREENUIEFFECT",
		9: "EEFFECTTYPE_SKILL",
	}
	EEffectType_value = map[string]int32{
		"EEFFECTTYPE_NORMAL":             1,
		"EEFFECTTYPE_ACCEPTQUEST":        2,
		"EEFFECTTYPE_FINISHQUEST":        3,
		"EEFFECTTYPE_MVPSHOW":            4,
		"EEFFECTTYPE_SCENEEFFECT":        5,
		"EEFFECTTYPE_UIPATH":             6,
		"EEFFECTTYPE_FILTER":             7,
		"EEFFECTTYPE_FULLSCREENUIEFFECT": 8,
		"EEFFECTTYPE_SKILL":              9,
	}
)

func (x EEffectType) Enum() *EEffectType {
	p := new(EEffectType)
	*p = x
	return p
}

func (x EEffectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEffectType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[6].Descriptor()
}

func (EEffectType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[6]
}

func (x EEffectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEffectType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEffectType(num)
	return nil
}

// Deprecated: Use EEffectType.Descriptor instead.
func (EEffectType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{6}
}

type EEffectSource int32

const (
	EEffectSource_EEFFECTSOURCE_MIN   EEffectSource = 0
	EEffectSource_EEFFECTSOURCE_QUEST EEffectSource = 1
	EEffectSource_EEFFECTSOURCE_RAID  EEffectSource = 2
	EEffectSource_EEFFECTSOURCE_MAX   EEffectSource = 3
)

// Enum value maps for EEffectSource.
var (
	EEffectSource_name = map[int32]string{
		0: "EEFFECTSOURCE_MIN",
		1: "EEFFECTSOURCE_QUEST",
		2: "EEFFECTSOURCE_RAID",
		3: "EEFFECTSOURCE_MAX",
	}
	EEffectSource_value = map[string]int32{
		"EEFFECTSOURCE_MIN":   0,
		"EEFFECTSOURCE_QUEST": 1,
		"EEFFECTSOURCE_RAID":  2,
		"EEFFECTSOURCE_MAX":   3,
	}
)

func (x EEffectSource) Enum() *EEffectSource {
	p := new(EEffectSource)
	*p = x
	return p
}

func (x EEffectSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEffectSource) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[7].Descriptor()
}

func (EEffectSource) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[7]
}

func (x EEffectSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEffectSource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEffectSource(num)
	return nil
}

// Deprecated: Use EEffectSource.Descriptor instead.
func (EEffectSource) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{7}
}

type EDressType int32

const (
	EDressType_EDRESSTYPE_MIN       EDressType = 0
	EDressType_EDRESSTYPE_HAIR      EDressType = 1
	EDressType_EDRESSTYPE_HAIRCOLOR EDressType = 2
	EDressType_EDRESSTYPE_EYE       EDressType = 3
	EDressType_EDRESSTYPE_CLOTH     EDressType = 4
	EDressType_EDRESSTYPE_MAX       EDressType = 5
)

// Enum value maps for EDressType.
var (
	EDressType_name = map[int32]string{
		0: "EDRESSTYPE_MIN",
		1: "EDRESSTYPE_HAIR",
		2: "EDRESSTYPE_HAIRCOLOR",
		3: "EDRESSTYPE_EYE",
		4: "EDRESSTYPE_CLOTH",
		5: "EDRESSTYPE_MAX",
	}
	EDressType_value = map[string]int32{
		"EDRESSTYPE_MIN":       0,
		"EDRESSTYPE_HAIR":      1,
		"EDRESSTYPE_HAIRCOLOR": 2,
		"EDRESSTYPE_EYE":       3,
		"EDRESSTYPE_CLOTH":     4,
		"EDRESSTYPE_MAX":       5,
	}
)

func (x EDressType) Enum() *EDressType {
	p := new(EDressType)
	*p = x
	return p
}

func (x EDressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDressType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[8].Descriptor()
}

func (EDressType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[8]
}

func (x EDressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDressType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDressType(num)
	return nil
}

// Deprecated: Use EDressType.Descriptor instead.
func (EDressType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{8}
}

type PointType int32

const (
	PointType_POINTTYPE_ADD   PointType = 1
	PointType_POINTTYPE_RESET PointType = 2
)

// Enum value maps for PointType.
var (
	PointType_name = map[int32]string{
		1: "POINTTYPE_ADD",
		2: "POINTTYPE_RESET",
	}
	PointType_value = map[string]int32{
		"POINTTYPE_ADD":   1,
		"POINTTYPE_RESET": 2,
	}
)

func (x PointType) Enum() *PointType {
	p := new(PointType)
	*p = x
	return p
}

func (x PointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[9].Descriptor()
}

func (PointType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[9]
}

func (x PointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PointType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PointType(num)
	return nil
}

// Deprecated: Use PointType.Descriptor instead.
func (PointType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{9}
}

type EDbgMsgType int32

const (
	EDbgMsgType_EDBGMSGTYPE_MIN  EDbgMsgType = 0
	EDbgMsgType_EDBGMSGTYPE_TEST EDbgMsgType = 1
)

// Enum value maps for EDbgMsgType.
var (
	EDbgMsgType_name = map[int32]string{
		0: "EDBGMSGTYPE_MIN",
		1: "EDBGMSGTYPE_TEST",
	}
	EDbgMsgType_value = map[string]int32{
		"EDBGMSGTYPE_MIN":  0,
		"EDBGMSGTYPE_TEST": 1,
	}
)

func (x EDbgMsgType) Enum() *EDbgMsgType {
	p := new(EDbgMsgType)
	*p = x
	return p
}

func (x EDbgMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDbgMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[10].Descriptor()
}

func (EDbgMsgType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[10]
}

func (x EDbgMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDbgMsgType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDbgMsgType(num)
	return nil
}

// Deprecated: Use EDbgMsgType.Descriptor instead.
func (EDbgMsgType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{10}
}

type GameTimeOpt int32

const (
	GameTimeOpt_EGAMETIMEOPT_SYNC   GameTimeOpt = 1
	GameTimeOpt_EGAMETIMEOPT_ADJUST GameTimeOpt = 2
)

// Enum value maps for GameTimeOpt.
var (
	GameTimeOpt_name = map[int32]string{
		1: "EGAMETIMEOPT_SYNC",
		2: "EGAMETIMEOPT_ADJUST",
	}
	GameTimeOpt_value = map[string]int32{
		"EGAMETIMEOPT_SYNC":   1,
		"EGAMETIMEOPT_ADJUST": 2,
	}
)

func (x GameTimeOpt) Enum() *GameTimeOpt {
	p := new(GameTimeOpt)
	*p = x
	return p
}

func (x GameTimeOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameTimeOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[11].Descriptor()
}

func (GameTimeOpt) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[11]
}

func (x GameTimeOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GameTimeOpt) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GameTimeOpt(num)
	return nil
}

// Deprecated: Use GameTimeOpt.Descriptor instead.
func (GameTimeOpt) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{11}
}

type CD_TYPE int32

const (
	CD_TYPE_CD_TYPE_SKILL       CD_TYPE = 0
	CD_TYPE_CD_TYPE_ITEM        CD_TYPE = 1
	CD_TYPE_CD_TYPE_SKILLDEALY  CD_TYPE = 2
	CD_TYPE_CD_TYPE_ITEMGROUP   CD_TYPE = 3
	CD_TYPE_CD_TYPE_TRAINACTION CD_TYPE = 4
)

// Enum value maps for CD_TYPE.
var (
	CD_TYPE_name = map[int32]string{
		0: "CD_TYPE_SKILL",
		1: "CD_TYPE_ITEM",
		2: "CD_TYPE_SKILLDEALY",
		3: "CD_TYPE_ITEMGROUP",
		4: "CD_TYPE_TRAINACTION",
	}
	CD_TYPE_value = map[string]int32{
		"CD_TYPE_SKILL":       0,
		"CD_TYPE_ITEM":        1,
		"CD_TYPE_SKILLDEALY":  2,
		"CD_TYPE_ITEMGROUP":   3,
		"CD_TYPE_TRAINACTION": 4,
	}
)

func (x CD_TYPE) Enum() *CD_TYPE {
	p := new(CD_TYPE)
	*p = x
	return p
}

func (x CD_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CD_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[12].Descriptor()
}

func (CD_TYPE) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[12]
}

func (x CD_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CD_TYPE) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CD_TYPE(num)
	return nil
}

// Deprecated: Use CD_TYPE.Descriptor instead.
func (CD_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{12}
}

type EGoToGearType int32

const (
	EGoToGearType_EGoToGearType_Single EGoToGearType = 1
	EGoToGearType_EGoToGearType_Hand   EGoToGearType = 2
	EGoToGearType_EGoToGearType_Team   EGoToGearType = 3
	EGoToGearType_EGoToGearType_Free   EGoToGearType = 4
)

// Enum value maps for EGoToGearType.
var (
	EGoToGearType_name = map[int32]string{
		1: "EGoToGearType_Single",
		2: "EGoToGearType_Hand",
		3: "EGoToGearType_Team",
		4: "EGoToGearType_Free",
	}
	EGoToGearType_value = map[string]int32{
		"EGoToGearType_Single": 1,
		"EGoToGearType_Hand":   2,
		"EGoToGearType_Team":   3,
		"EGoToGearType_Free":   4,
	}
)

func (x EGoToGearType) Enum() *EGoToGearType {
	p := new(EGoToGearType)
	*p = x
	return p
}

func (x EGoToGearType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGoToGearType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[13].Descriptor()
}

func (EGoToGearType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[13]
}

func (x EGoToGearType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGoToGearType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGoToGearType(num)
	return nil
}

// Deprecated: Use EGoToGearType.Descriptor instead.
func (EGoToGearType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{13}
}

type EFollowType int32

const (
	EFollowType_EFOLLOWTYPE_MIN         EFollowType = 0
	EFollowType_EFOLLOWTYPE_HAND        EFollowType = 1
	EFollowType_EFOLLOWTYPE_BREAK       EFollowType = 5
	EFollowType_EFOLLOWTYPE_TWINSACTION EFollowType = 6
	EFollowType_EFOLLOWTYPE_MAX         EFollowType = 7
)

// Enum value maps for EFollowType.
var (
	EFollowType_name = map[int32]string{
		0: "EFOLLOWTYPE_MIN",
		1: "EFOLLOWTYPE_HAND",
		5: "EFOLLOWTYPE_BREAK",
		6: "EFOLLOWTYPE_TWINSACTION",
		7: "EFOLLOWTYPE_MAX",
	}
	EFollowType_value = map[string]int32{
		"EFOLLOWTYPE_MIN":         0,
		"EFOLLOWTYPE_HAND":        1,
		"EFOLLOWTYPE_BREAK":       5,
		"EFOLLOWTYPE_TWINSACTION": 6,
		"EFOLLOWTYPE_MAX":         7,
	}
)

func (x EFollowType) Enum() *EFollowType {
	p := new(EFollowType)
	*p = x
	return p
}

func (x EFollowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFollowType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[14].Descriptor()
}

func (EFollowType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[14]
}

func (x EFollowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFollowType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFollowType(num)
	return nil
}

// Deprecated: Use EFollowType.Descriptor instead.
func (EFollowType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{14}
}

type EAlbumType int32

const (
	EAlbumType_EALBUMTYPE_MIN        EAlbumType = 0
	EAlbumType_EALBUMTYPE_SCENERY    EAlbumType = 1
	EAlbumType_EALBUMTYPE_PHOTO      EAlbumType = 2
	EAlbumType_EALBUMTYPE_GUILD_ICON EAlbumType = 3
	EAlbumType_EALBUMTYPE_WEDDING    EAlbumType = 4
	EAlbumType_EALBUMTYPE_MAX        EAlbumType = 5
)

// Enum value maps for EAlbumType.
var (
	EAlbumType_name = map[int32]string{
		0: "EALBUMTYPE_MIN",
		1: "EALBUMTYPE_SCENERY",
		2: "EALBUMTYPE_PHOTO",
		3: "EALBUMTYPE_GUILD_ICON",
		4: "EALBUMTYPE_WEDDING",
		5: "EALBUMTYPE_MAX",
	}
	EAlbumType_value = map[string]int32{
		"EALBUMTYPE_MIN":        0,
		"EALBUMTYPE_SCENERY":    1,
		"EALBUMTYPE_PHOTO":      2,
		"EALBUMTYPE_GUILD_ICON": 3,
		"EALBUMTYPE_WEDDING":    4,
		"EALBUMTYPE_MAX":        5,
	}
)

func (x EAlbumType) Enum() *EAlbumType {
	p := new(EAlbumType)
	*p = x
	return p
}

func (x EAlbumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAlbumType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[15].Descriptor()
}

func (EAlbumType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[15]
}

func (x EAlbumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAlbumType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAlbumType(num)
	return nil
}

// Deprecated: Use EAlbumType.Descriptor instead.
func (EAlbumType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{15}
}

type EBattleStatus int32

const (
	EBattleStatus_EBATTLESTATUS_EASY      EBattleStatus = 1
	EBattleStatus_EBATTLESTATUS_TIRED     EBattleStatus = 2
	EBattleStatus_EBATTLESTATUS_HIGHTIRED EBattleStatus = 3
)

// Enum value maps for EBattleStatus.
var (
	EBattleStatus_name = map[int32]string{
		1: "EBATTLESTATUS_EASY",
		2: "EBATTLESTATUS_TIRED",
		3: "EBATTLESTATUS_HIGHTIRED",
	}
	EBattleStatus_value = map[string]int32{
		"EBATTLESTATUS_EASY":      1,
		"EBATTLESTATUS_TIRED":     2,
		"EBATTLESTATUS_HIGHTIRED": 3,
	}
)

func (x EBattleStatus) Enum() *EBattleStatus {
	p := new(EBattleStatus)
	*p = x
	return p
}

func (x EBattleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBattleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[16].Descriptor()
}

func (EBattleStatus) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[16]
}

func (x EBattleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBattleStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBattleStatus(num)
	return nil
}

// Deprecated: Use EBattleStatus.Descriptor instead.
func (EBattleStatus) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{16}
}

type EQueryType int32

const (
	EQueryType_EQUERYTYPE_MIN            EQueryType = 0
	EQueryType_EQUERYTYPE_ALL            EQueryType = 1
	EQueryType_EQUERYTYPE_FRIEND         EQueryType = 2
	EQueryType_EQUERYTYPE_CLOSE          EQueryType = 3
	EQueryType_EQUERYTYPE_WEDDING_ALL    EQueryType = 4
	EQueryType_EQUERYTYPE_WEDDING_FRIEND EQueryType = 5
	EQueryType_EQUERYTYPE_WEDDING_CLOSE  EQueryType = 6
	EQueryType_EQUERYTYPE_MAX            EQueryType = 7
)

// Enum value maps for EQueryType.
var (
	EQueryType_name = map[int32]string{
		0: "EQUERYTYPE_MIN",
		1: "EQUERYTYPE_ALL",
		2: "EQUERYTYPE_FRIEND",
		3: "EQUERYTYPE_CLOSE",
		4: "EQUERYTYPE_WEDDING_ALL",
		5: "EQUERYTYPE_WEDDING_FRIEND",
		6: "EQUERYTYPE_WEDDING_CLOSE",
		7: "EQUERYTYPE_MAX",
	}
	EQueryType_value = map[string]int32{
		"EQUERYTYPE_MIN":            0,
		"EQUERYTYPE_ALL":            1,
		"EQUERYTYPE_FRIEND":         2,
		"EQUERYTYPE_CLOSE":          3,
		"EQUERYTYPE_WEDDING_ALL":    4,
		"EQUERYTYPE_WEDDING_FRIEND": 5,
		"EQUERYTYPE_WEDDING_CLOSE":  6,
		"EQUERYTYPE_MAX":            7,
	}
)

func (x EQueryType) Enum() *EQueryType {
	p := new(EQueryType)
	*p = x
	return p
}

func (x EQueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[17].Descriptor()
}

func (EQueryType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[17]
}

func (x EQueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EQueryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EQueryType(num)
	return nil
}

// Deprecated: Use EQueryType.Descriptor instead.
func (EQueryType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{17}
}

type EFashionHideType int32

const (
	EFashionHideType_EFASHIONHIDETYPE_HEAD           EFashionHideType = 0
	EFashionHideType_EFASHIONHIDETYPE_BACK           EFashionHideType = 1
	EFashionHideType_EFASHIONHIDETYPE_FACE           EFashionHideType = 2
	EFashionHideType_EFASHIONHIDETYPE_TAIL           EFashionHideType = 3
	EFashionHideType_EFASHIONHIDETYPE_MOUTH          EFashionHideType = 4
	EFashionHideType_EFASHIONHIDETYPE_BODY           EFashionHideType = 5
	EFashionHideType_EFASHIONHIDETYPE_WEAPON         EFashionHideType = 6
	EFashionHideType_EFASHIONHIDETYPE_SHIELD         EFashionHideType = 7
	EFashionHideType_EFASHIONHIDETYPE_PORTRAIT_FRAME EFashionHideType = 8
	EFashionHideType_EFASHIONHIDETYPE_BACKGROUND     EFashionHideType = 9
	EFashionHideType_EFASHIONHIDETYPE_MAX            EFashionHideType = 10
)

// Enum value maps for EFashionHideType.
var (
	EFashionHideType_name = map[int32]string{
		0:  "EFASHIONHIDETYPE_HEAD",
		1:  "EFASHIONHIDETYPE_BACK",
		2:  "EFASHIONHIDETYPE_FACE",
		3:  "EFASHIONHIDETYPE_TAIL",
		4:  "EFASHIONHIDETYPE_MOUTH",
		5:  "EFASHIONHIDETYPE_BODY",
		6:  "EFASHIONHIDETYPE_WEAPON",
		7:  "EFASHIONHIDETYPE_SHIELD",
		8:  "EFASHIONHIDETYPE_PORTRAIT_FRAME",
		9:  "EFASHIONHIDETYPE_BACKGROUND",
		10: "EFASHIONHIDETYPE_MAX",
	}
	EFashionHideType_value = map[string]int32{
		"EFASHIONHIDETYPE_HEAD":           0,
		"EFASHIONHIDETYPE_BACK":           1,
		"EFASHIONHIDETYPE_FACE":           2,
		"EFASHIONHIDETYPE_TAIL":           3,
		"EFASHIONHIDETYPE_MOUTH":          4,
		"EFASHIONHIDETYPE_BODY":           5,
		"EFASHIONHIDETYPE_WEAPON":         6,
		"EFASHIONHIDETYPE_SHIELD":         7,
		"EFASHIONHIDETYPE_PORTRAIT_FRAME": 8,
		"EFASHIONHIDETYPE_BACKGROUND":     9,
		"EFASHIONHIDETYPE_MAX":            10,
	}
)

func (x EFashionHideType) Enum() *EFashionHideType {
	p := new(EFashionHideType)
	*p = x
	return p
}

func (x EFashionHideType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFashionHideType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[18].Descriptor()
}

func (EFashionHideType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[18]
}

func (x EFashionHideType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFashionHideType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFashionHideType(num)
	return nil
}

// Deprecated: Use EFashionHideType.Descriptor instead.
func (EFashionHideType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{18}
}

type ECountDownType int32

const (
	ECountDownType_ECOUNTDOWNTYPE_DOJO   ECountDownType = 1
	ECountDownType_ECOUNTDOWNTYPE_TOWER  ECountDownType = 2
	ECountDownType_ECOUNTDOWNTYPE_ALTMAN ECountDownType = 3
)

// Enum value maps for ECountDownType.
var (
	ECountDownType_name = map[int32]string{
		1: "ECOUNTDOWNTYPE_DOJO",
		2: "ECOUNTDOWNTYPE_TOWER",
		3: "ECOUNTDOWNTYPE_ALTMAN",
	}
	ECountDownType_value = map[string]int32{
		"ECOUNTDOWNTYPE_DOJO":   1,
		"ECOUNTDOWNTYPE_TOWER":  2,
		"ECOUNTDOWNTYPE_ALTMAN": 3,
	}
)

func (x ECountDownType) Enum() *ECountDownType {
	p := new(ECountDownType)
	*p = x
	return p
}

func (x ECountDownType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECountDownType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[19].Descriptor()
}

func (ECountDownType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[19]
}

func (x ECountDownType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECountDownType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECountDownType(num)
	return nil
}

// Deprecated: Use ECountDownType.Descriptor instead.
func (ECountDownType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{19}
}

type ETreeStatus int32

const (
	ETreeStatus_ETREESTATUS_MIN     ETreeStatus = 0
	ETreeStatus_ETREESTATUS_NORMAL  ETreeStatus = 1
	ETreeStatus_ETREESTATUS_MONSTER ETreeStatus = 2
	ETreeStatus_ETREESTATUS_REWARD  ETreeStatus = 3
	ETreeStatus_ETREESTATUS_DEAD    ETreeStatus = 4
	ETreeStatus_ETREESTATUS_MAX     ETreeStatus = 5
)

// Enum value maps for ETreeStatus.
var (
	ETreeStatus_name = map[int32]string{
		0: "ETREESTATUS_MIN",
		1: "ETREESTATUS_NORMAL",
		2: "ETREESTATUS_MONSTER",
		3: "ETREESTATUS_REWARD",
		4: "ETREESTATUS_DEAD",
		5: "ETREESTATUS_MAX",
	}
	ETreeStatus_value = map[string]int32{
		"ETREESTATUS_MIN":     0,
		"ETREESTATUS_NORMAL":  1,
		"ETREESTATUS_MONSTER": 2,
		"ETREESTATUS_REWARD":  3,
		"ETREESTATUS_DEAD":    4,
		"ETREESTATUS_MAX":     5,
	}
)

func (x ETreeStatus) Enum() *ETreeStatus {
	p := new(ETreeStatus)
	*p = x
	return p
}

func (x ETreeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETreeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[20].Descriptor()
}

func (ETreeStatus) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[20]
}

func (x ETreeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETreeStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETreeStatus(num)
	return nil
}

// Deprecated: Use ETreeStatus.Descriptor instead.
func (ETreeStatus) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{20}
}

type EZoneStatus int32

const (
	EZoneStatus_EZONESTATUS_MIN      EZoneStatus = 0
	EZoneStatus_EZONESTATUS_FREE     EZoneStatus = 1
	EZoneStatus_EZONESTATUS_BUSY     EZoneStatus = 2
	EZoneStatus_EZONESTATUS_VERYBUSY EZoneStatus = 3
	EZoneStatus_EZONESTATUS_MAX      EZoneStatus = 4
)

// Enum value maps for EZoneStatus.
var (
	EZoneStatus_name = map[int32]string{
		0: "EZONESTATUS_MIN",
		1: "EZONESTATUS_FREE",
		2: "EZONESTATUS_BUSY",
		3: "EZONESTATUS_VERYBUSY",
		4: "EZONESTATUS_MAX",
	}
	EZoneStatus_value = map[string]int32{
		"EZONESTATUS_MIN":      0,
		"EZONESTATUS_FREE":     1,
		"EZONESTATUS_BUSY":     2,
		"EZONESTATUS_VERYBUSY": 3,
		"EZONESTATUS_MAX":      4,
	}
)

func (x EZoneStatus) Enum() *EZoneStatus {
	p := new(EZoneStatus)
	*p = x
	return p
}

func (x EZoneStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EZoneStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[21].Descriptor()
}

func (EZoneStatus) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[21]
}

func (x EZoneStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EZoneStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EZoneStatus(num)
	return nil
}

// Deprecated: Use EZoneStatus.Descriptor instead.
func (EZoneStatus) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{21}
}

type EZoneState int32

const (
	EZoneState_EZONESTATE_MIN    EZoneState = 0
	EZoneState_EZONESTATE_FULL   EZoneState = 1
	EZoneState_EZONESTATE_NOFULL EZoneState = 2
	EZoneState_EZONESTATE_MAX    EZoneState = 3
)

// Enum value maps for EZoneState.
var (
	EZoneState_name = map[int32]string{
		0: "EZONESTATE_MIN",
		1: "EZONESTATE_FULL",
		2: "EZONESTATE_NOFULL",
		3: "EZONESTATE_MAX",
	}
	EZoneState_value = map[string]int32{
		"EZONESTATE_MIN":    0,
		"EZONESTATE_FULL":   1,
		"EZONESTATE_NOFULL": 2,
		"EZONESTATE_MAX":    3,
	}
)

func (x EZoneState) Enum() *EZoneState {
	p := new(EZoneState)
	*p = x
	return p
}

func (x EZoneState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EZoneState) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[22].Descriptor()
}

func (EZoneState) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[22]
}

func (x EZoneState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EZoneState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EZoneState(num)
	return nil
}

// Deprecated: Use EZoneState.Descriptor instead.
func (EZoneState) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{22}
}

type EJumpZone int32

const (
	EJumpZone_EJUMPZONE_MIN     EJumpZone = 0
	EJumpZone_EJUMPZONE_GUILD   EJumpZone = 1
	EJumpZone_EJUMPZONE_TEAM    EJumpZone = 2
	EJumpZone_EJUMPZONE_USER    EJumpZone = 3
	EJumpZone_EJUMPZONE_WEDDING EJumpZone = 4
	EJumpZone_EJUMPZONE_MAX     EJumpZone = 5
)

// Enum value maps for EJumpZone.
var (
	EJumpZone_name = map[int32]string{
		0: "EJUMPZONE_MIN",
		1: "EJUMPZONE_GUILD",
		2: "EJUMPZONE_TEAM",
		3: "EJUMPZONE_USER",
		4: "EJUMPZONE_WEDDING",
		5: "EJUMPZONE_MAX",
	}
	EJumpZone_value = map[string]int32{
		"EJUMPZONE_MIN":     0,
		"EJUMPZONE_GUILD":   1,
		"EJUMPZONE_TEAM":    2,
		"EJUMPZONE_USER":    3,
		"EJUMPZONE_WEDDING": 4,
		"EJUMPZONE_MAX":     5,
	}
)

func (x EJumpZone) Enum() *EJumpZone {
	p := new(EJumpZone)
	*p = x
	return p
}

func (x EJumpZone) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EJumpZone) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[23].Descriptor()
}

func (EJumpZone) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[23]
}

func (x EJumpZone) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EJumpZone) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EJumpZone(num)
	return nil
}

// Deprecated: Use EJumpZone.Descriptor instead.
func (EJumpZone) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{23}
}

type SeatShowType int32

const (
	SeatShowType_SEAT_SHOW_VISIBLE   SeatShowType = 0
	SeatShowType_SEAT_SHOW_INVISIBLE SeatShowType = 1
)

// Enum value maps for SeatShowType.
var (
	SeatShowType_name = map[int32]string{
		0: "SEAT_SHOW_VISIBLE",
		1: "SEAT_SHOW_INVISIBLE",
	}
	SeatShowType_value = map[string]int32{
		"SEAT_SHOW_VISIBLE":   0,
		"SEAT_SHOW_INVISIBLE": 1,
	}
)

func (x SeatShowType) Enum() *SeatShowType {
	p := new(SeatShowType)
	*p = x
	return p
}

func (x SeatShowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeatShowType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[24].Descriptor()
}

func (SeatShowType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[24]
}

func (x SeatShowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SeatShowType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SeatShowType(num)
	return nil
}

// Deprecated: Use SeatShowType.Descriptor instead.
func (SeatShowType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{24}
}

type EOptionType int32

const (
	EOptionType_EOPTIONTYPE_USE_SAVE_HP         EOptionType = 0
	EOptionType_EOPTIONTYPE_USE_SAVE_SP         EOptionType = 1
	EOptionType_EOPTIONTYPE_USE_SLIM            EOptionType = 2
	EOptionType_EOPTIONTYPE_LOTTERY_CNT_HEAD    EOptionType = 3
	EOptionType_EOPTIONTYPE_LOTTERY_CNT_EQUIP   EOptionType = 4
	EOptionType_EOPTIONTYPE_LOTTERY_CNT_CARD    EOptionType = 5
	EOptionType_EOPTIONTYPE_LOTTERY_CNT_MAGIC   EOptionType = 6
	EOptionType_EOPTIONTYPE_LOTTERY_CNT_GIVE    EOptionType = 7
	EOptionType_EOPTIONTYPE_USE_PETTALK         EOptionType = 8
	EOptionType_EOPTIONTYPE_LOTTERY_CNT_MAGIC_2 EOptionType = 9
	EOptionType_EOPTIONTYPE_LOTTERY_CNT_MAGIC_3 EOptionType = 10
	EOptionType_EOPTIONTYPE_MAX                 EOptionType = 63
)

// Enum value maps for EOptionType.
var (
	EOptionType_name = map[int32]string{
		0:  "EOPTIONTYPE_USE_SAVE_HP",
		1:  "EOPTIONTYPE_USE_SAVE_SP",
		2:  "EOPTIONTYPE_USE_SLIM",
		3:  "EOPTIONTYPE_LOTTERY_CNT_HEAD",
		4:  "EOPTIONTYPE_LOTTERY_CNT_EQUIP",
		5:  "EOPTIONTYPE_LOTTERY_CNT_CARD",
		6:  "EOPTIONTYPE_LOTTERY_CNT_MAGIC",
		7:  "EOPTIONTYPE_LOTTERY_CNT_GIVE",
		8:  "EOPTIONTYPE_USE_PETTALK",
		9:  "EOPTIONTYPE_LOTTERY_CNT_MAGIC_2",
		10: "EOPTIONTYPE_LOTTERY_CNT_MAGIC_3",
		63: "EOPTIONTYPE_MAX",
	}
	EOptionType_value = map[string]int32{
		"EOPTIONTYPE_USE_SAVE_HP":         0,
		"EOPTIONTYPE_USE_SAVE_SP":         1,
		"EOPTIONTYPE_USE_SLIM":            2,
		"EOPTIONTYPE_LOTTERY_CNT_HEAD":    3,
		"EOPTIONTYPE_LOTTERY_CNT_EQUIP":   4,
		"EOPTIONTYPE_LOTTERY_CNT_CARD":    5,
		"EOPTIONTYPE_LOTTERY_CNT_MAGIC":   6,
		"EOPTIONTYPE_LOTTERY_CNT_GIVE":    7,
		"EOPTIONTYPE_USE_PETTALK":         8,
		"EOPTIONTYPE_LOTTERY_CNT_MAGIC_2": 9,
		"EOPTIONTYPE_LOTTERY_CNT_MAGIC_3": 10,
		"EOPTIONTYPE_MAX":                 63,
	}
)

func (x EOptionType) Enum() *EOptionType {
	p := new(EOptionType)
	*p = x
	return p
}

func (x EOptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[25].Descriptor()
}

func (EOptionType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[25]
}

func (x EOptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EOptionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EOptionType(num)
	return nil
}

// Deprecated: Use EOptionType.Descriptor instead.
func (EOptionType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{25}
}

type ERenameErrCode int32

const (
	ERenameErrCode_ERENAME_SUCCESS   ERenameErrCode = 0
	ERenameErrCode_ERENAME_CD        ERenameErrCode = 1
	ERenameErrCode_ERENAME_CONFLICT  ERenameErrCode = 2
	ERenameErrCode_ERENAME_SHIELWORD ERenameErrCode = 3
	ERenameErrCode_ERENAME_ADVERTISE ERenameErrCode = 4
)

// Enum value maps for ERenameErrCode.
var (
	ERenameErrCode_name = map[int32]string{
		0: "ERENAME_SUCCESS",
		1: "ERENAME_CD",
		2: "ERENAME_CONFLICT",
		3: "ERENAME_SHIELWORD",
		4: "ERENAME_ADVERTISE",
	}
	ERenameErrCode_value = map[string]int32{
		"ERENAME_SUCCESS":   0,
		"ERENAME_CD":        1,
		"ERENAME_CONFLICT":  2,
		"ERENAME_SHIELWORD": 3,
		"ERENAME_ADVERTISE": 4,
	}
)

func (x ERenameErrCode) Enum() *ERenameErrCode {
	p := new(ERenameErrCode)
	*p = x
	return p
}

func (x ERenameErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERenameErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[26].Descriptor()
}

func (ERenameErrCode) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[26]
}

func (x ERenameErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERenameErrCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERenameErrCode(num)
	return nil
}

// Deprecated: Use ERenameErrCode.Descriptor instead.
func (ERenameErrCode) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{26}
}

type EProposalReply int32

const (
	EProposalReply_EPROPOSALREPLY_YES      EProposalReply = 0
	EProposalReply_EPROPOSALREPLY_NO       EProposalReply = 1
	EProposalReply_EPROPOSALREPLY_OUTRANGE EProposalReply = 2
	EProposalReply_EPROPOSALREPLY_CANCEL   EProposalReply = 3
)

// Enum value maps for EProposalReply.
var (
	EProposalReply_name = map[int32]string{
		0: "EPROPOSALREPLY_YES",
		1: "EPROPOSALREPLY_NO",
		2: "EPROPOSALREPLY_OUTRANGE",
		3: "EPROPOSALREPLY_CANCEL",
	}
	EProposalReply_value = map[string]int32{
		"EPROPOSALREPLY_YES":      0,
		"EPROPOSALREPLY_NO":       1,
		"EPROPOSALREPLY_OUTRANGE": 2,
		"EPROPOSALREPLY_CANCEL":   3,
	}
)

func (x EProposalReply) Enum() *EProposalReply {
	p := new(EProposalReply)
	*p = x
	return p
}

func (x EProposalReply) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProposalReply) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[27].Descriptor()
}

func (EProposalReply) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[27]
}

func (x EProposalReply) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EProposalReply) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EProposalReply(num)
	return nil
}

// Deprecated: Use EProposalReply.Descriptor instead.
func (EProposalReply) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{27}
}

type EnrollResult int32

const (
	EnrollResult_EENROLLRESULT_SUCCESS        EnrollResult = 0
	EnrollResult_EENROLLRESULT_CHARID_EXISTED EnrollResult = 1
	EnrollResult_EENROLLRESULT_PHONE_EXISTED  EnrollResult = 2
	EnrollResult_EENROLLRESULT_CODE_INCORRECT EnrollResult = 3
	EnrollResult_EENROLLRESULT_CODE_INVALID   EnrollResult = 4
	EnrollResult_EENROLLRESULT_CODE_TOOFAST   EnrollResult = 5
	EnrollResult_EENROLLRESULT_ERROR          EnrollResult = 6
)

// Enum value maps for EnrollResult.
var (
	EnrollResult_name = map[int32]string{
		0: "EENROLLRESULT_SUCCESS",
		1: "EENROLLRESULT_CHARID_EXISTED",
		2: "EENROLLRESULT_PHONE_EXISTED",
		3: "EENROLLRESULT_CODE_INCORRECT",
		4: "EENROLLRESULT_CODE_INVALID",
		5: "EENROLLRESULT_CODE_TOOFAST",
		6: "EENROLLRESULT_ERROR",
	}
	EnrollResult_value = map[string]int32{
		"EENROLLRESULT_SUCCESS":        0,
		"EENROLLRESULT_CHARID_EXISTED": 1,
		"EENROLLRESULT_PHONE_EXISTED":  2,
		"EENROLLRESULT_CODE_INCORRECT": 3,
		"EENROLLRESULT_CODE_INVALID":   4,
		"EENROLLRESULT_CODE_TOOFAST":   5,
		"EENROLLRESULT_ERROR":          6,
	}
)

func (x EnrollResult) Enum() *EnrollResult {
	p := new(EnrollResult)
	*p = x
	return p
}

func (x EnrollResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnrollResult) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[28].Descriptor()
}

func (EnrollResult) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[28]
}

func (x EnrollResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnrollResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnrollResult(num)
	return nil
}

// Deprecated: Use EnrollResult.Descriptor instead.
func (EnrollResult) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{28}
}

type ETwinsOperation int32

const (
	ETwinsOperation_ETWINS_OPERATION_MIN      ETwinsOperation = 0
	ETwinsOperation_ETWINS_OPERATION_SPONSOR  ETwinsOperation = 1
	ETwinsOperation_ETWINS_OPERATION_REQUEST  ETwinsOperation = 2
	ETwinsOperation_ETWINS_OPERATION_AGREE    ETwinsOperation = 3
	ETwinsOperation_ETWINS_OPERATION_DISAGREE ETwinsOperation = 4
	ETwinsOperation_ETWINS_OPERATION_COMMIT   ETwinsOperation = 5
)

// Enum value maps for ETwinsOperation.
var (
	ETwinsOperation_name = map[int32]string{
		0: "ETWINS_OPERATION_MIN",
		1: "ETWINS_OPERATION_SPONSOR",
		2: "ETWINS_OPERATION_REQUEST",
		3: "ETWINS_OPERATION_AGREE",
		4: "ETWINS_OPERATION_DISAGREE",
		5: "ETWINS_OPERATION_COMMIT",
	}
	ETwinsOperation_value = map[string]int32{
		"ETWINS_OPERATION_MIN":      0,
		"ETWINS_OPERATION_SPONSOR":  1,
		"ETWINS_OPERATION_REQUEST":  2,
		"ETWINS_OPERATION_AGREE":    3,
		"ETWINS_OPERATION_DISAGREE": 4,
		"ETWINS_OPERATION_COMMIT":   5,
	}
)

func (x ETwinsOperation) Enum() *ETwinsOperation {
	p := new(ETwinsOperation)
	*p = x
	return p
}

func (x ETwinsOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETwinsOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[29].Descriptor()
}

func (ETwinsOperation) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[29]
}

func (x ETwinsOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETwinsOperation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETwinsOperation(num)
	return nil
}

// Deprecated: Use ETwinsOperation.Descriptor instead.
func (ETwinsOperation) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{29}
}

type EServantService int32

const (
	EServantService_ESERVANT_SERVICE_RECOMMEND         EServantService = 1
	EServantService_ESERVANT_SERVICE_FINANCE_THREE     EServantService = 2
	EServantService_ESERVANT_SERVICE_FINANCE_SEVEN     EServantService = 3
	EServantService_ESERVANT_SERVICE_UPGRADE           EServantService = 4
	EServantService_ESERVANT_SERVICE_SPECIAL           EServantService = 5
	EServantService_ESERVANT_SERVICE_RECOMMEND_REFRESH EServantService = 6
	EServantService_ESERVANT_SERVICE_INVITE_HAND       EServantService = 7
	EServantService_ESERVANT_SERVICE_BREAK_HAND        EServantService = 8
)

// Enum value maps for EServantService.
var (
	EServantService_name = map[int32]string{
		1: "ESERVANT_SERVICE_RECOMMEND",
		2: "ESERVANT_SERVICE_FINANCE_THREE",
		3: "ESERVANT_SERVICE_FINANCE_SEVEN",
		4: "ESERVANT_SERVICE_UPGRADE",
		5: "ESERVANT_SERVICE_SPECIAL",
		6: "ESERVANT_SERVICE_RECOMMEND_REFRESH",
		7: "ESERVANT_SERVICE_INVITE_HAND",
		8: "ESERVANT_SERVICE_BREAK_HAND",
	}
	EServantService_value = map[string]int32{
		"ESERVANT_SERVICE_RECOMMEND":         1,
		"ESERVANT_SERVICE_FINANCE_THREE":     2,
		"ESERVANT_SERVICE_FINANCE_SEVEN":     3,
		"ESERVANT_SERVICE_UPGRADE":           4,
		"ESERVANT_SERVICE_SPECIAL":           5,
		"ESERVANT_SERVICE_RECOMMEND_REFRESH": 6,
		"ESERVANT_SERVICE_INVITE_HAND":       7,
		"ESERVANT_SERVICE_BREAK_HAND":        8,
	}
)

func (x EServantService) Enum() *EServantService {
	p := new(EServantService)
	*p = x
	return p
}

func (x EServantService) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EServantService) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[30].Descriptor()
}

func (EServantService) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[30]
}

func (x EServantService) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EServantService) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EServantService(num)
	return nil
}

// Deprecated: Use EServantService.Descriptor instead.
func (EServantService) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{30}
}

type ERecommendStatus int32

const (
	ERecommendStatus_ERECOMMEND_STATUS_MIN       ERecommendStatus = 0
	ERecommendStatus_ERECOMMEND_STATUS_GO        ERecommendStatus = 1
	ERecommendStatus_ERECOMMEND_STATUS_RECEIVE   ERecommendStatus = 2
	ERecommendStatus_ERECOMMEND_STATUS_FINISH    ERecommendStatus = 3
	ERecommendStatus_ERECOMMEND_STATUS_EVER_PASS ERecommendStatus = 4
)

// Enum value maps for ERecommendStatus.
var (
	ERecommendStatus_name = map[int32]string{
		0: "ERECOMMEND_STATUS_MIN",
		1: "ERECOMMEND_STATUS_GO",
		2: "ERECOMMEND_STATUS_RECEIVE",
		3: "ERECOMMEND_STATUS_FINISH",
		4: "ERECOMMEND_STATUS_EVER_PASS",
	}
	ERecommendStatus_value = map[string]int32{
		"ERECOMMEND_STATUS_MIN":       0,
		"ERECOMMEND_STATUS_GO":        1,
		"ERECOMMEND_STATUS_RECEIVE":   2,
		"ERECOMMEND_STATUS_FINISH":    3,
		"ERECOMMEND_STATUS_EVER_PASS": 4,
	}
)

func (x ERecommendStatus) Enum() *ERecommendStatus {
	p := new(ERecommendStatus)
	*p = x
	return p
}

func (x ERecommendStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERecommendStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[31].Descriptor()
}

func (ERecommendStatus) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[31]
}

func (x ERecommendStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERecommendStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERecommendStatus(num)
	return nil
}

// Deprecated: Use ERecommendStatus.Descriptor instead.
func (ERecommendStatus) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{31}
}

type EProfessionDataType int32

const (
	EProfessionDataType_ETypeAdvance EProfessionDataType = 0
	EProfessionDataType_ETypeBranch  EProfessionDataType = 1
	EProfessionDataType_ETypeRecord  EProfessionDataType = 2
)

// Enum value maps for EProfessionDataType.
var (
	EProfessionDataType_name = map[int32]string{
		0: "ETypeAdvance",
		1: "ETypeBranch",
		2: "ETypeRecord",
	}
	EProfessionDataType_value = map[string]int32{
		"ETypeAdvance": 0,
		"ETypeBranch":  1,
		"ETypeRecord":  2,
	}
)

func (x EProfessionDataType) Enum() *EProfessionDataType {
	p := new(EProfessionDataType)
	*p = x
	return p
}

func (x EProfessionDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProfessionDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[32].Descriptor()
}

func (EProfessionDataType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[32]
}

func (x EProfessionDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EProfessionDataType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EProfessionDataType(num)
	return nil
}

// Deprecated: Use EProfessionDataType.Descriptor instead.
func (EProfessionDataType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{32}
}

type ESlotType int32

const (
	ESlotType_ESLOT_DEFAULT    ESlotType = 1
	ESlotType_ESLOT_BUY        ESlotType = 2
	ESlotType_ESLOT_MONTH_CARD ESlotType = 3
)

// Enum value maps for ESlotType.
var (
	ESlotType_name = map[int32]string{
		1: "ESLOT_DEFAULT",
		2: "ESLOT_BUY",
		3: "ESLOT_MONTH_CARD",
	}
	ESlotType_value = map[string]int32{
		"ESLOT_DEFAULT":    1,
		"ESLOT_BUY":        2,
		"ESLOT_MONTH_CARD": 3,
	}
)

func (x ESlotType) Enum() *ESlotType {
	p := new(ESlotType)
	*p = x
	return p
}

func (x ESlotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESlotType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[33].Descriptor()
}

func (ESlotType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[33]
}

func (x ESlotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESlotType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESlotType(num)
	return nil
}

// Deprecated: Use ESlotType.Descriptor instead.
func (ESlotType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{33}
}

type EBoothOper int32

const (
	EBoothOper_EBOOTHOPER_OPEN   EBoothOper = 0
	EBoothOper_EBOOTHOPER_CLOSE  EBoothOper = 1
	EBoothOper_EBOOTHOPER_UPDATE EBoothOper = 2
)

// Enum value maps for EBoothOper.
var (
	EBoothOper_name = map[int32]string{
		0: "EBOOTHOPER_OPEN",
		1: "EBOOTHOPER_CLOSE",
		2: "EBOOTHOPER_UPDATE",
	}
	EBoothOper_value = map[string]int32{
		"EBOOTHOPER_OPEN":   0,
		"EBOOTHOPER_CLOSE":  1,
		"EBOOTHOPER_UPDATE": 2,
	}
)

func (x EBoothOper) Enum() *EBoothOper {
	p := new(EBoothOper)
	*p = x
	return p
}

func (x EBoothOper) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBoothOper) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[34].Descriptor()
}

func (EBoothOper) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[34]
}

func (x EBoothOper) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBoothOper) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBoothOper(num)
	return nil
}

// Deprecated: Use EBoothOper.Descriptor instead.
func (EBoothOper) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{34}
}

type EBoothSign int32

const (
	EBoothSign_EBOOTHSIGN_WHITE  EBoothSign = 0
	EBoothSign_EBOOTHSIGN_GREEN  EBoothSign = 1
	EBoothSign_EBOOTHSIGN_BLUE   EBoothSign = 2
	EBoothSign_EBOOTHSIGN_PURPLE EBoothSign = 3
	EBoothSign_EBOOTHSIGN_ORANGE EBoothSign = 4
	EBoothSign_EBOOTHSIGN_PINK   EBoothSign = 5
)

// Enum value maps for EBoothSign.
var (
	EBoothSign_name = map[int32]string{
		0: "EBOOTHSIGN_WHITE",
		1: "EBOOTHSIGN_GREEN",
		2: "EBOOTHSIGN_BLUE",
		3: "EBOOTHSIGN_PURPLE",
		4: "EBOOTHSIGN_ORANGE",
		5: "EBOOTHSIGN_PINK",
	}
	EBoothSign_value = map[string]int32{
		"EBOOTHSIGN_WHITE":  0,
		"EBOOTHSIGN_GREEN":  1,
		"EBOOTHSIGN_BLUE":   2,
		"EBOOTHSIGN_PURPLE": 3,
		"EBOOTHSIGN_ORANGE": 4,
		"EBOOTHSIGN_PINK":   5,
	}
)

func (x EBoothSign) Enum() *EBoothSign {
	p := new(EBoothSign)
	*p = x
	return p
}

func (x EBoothSign) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBoothSign) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[35].Descriptor()
}

func (EBoothSign) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[35]
}

func (x EBoothSign) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBoothSign) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBoothSign(num)
	return nil
}

// Deprecated: Use EBoothSign.Descriptor instead.
func (EBoothSign) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{35}
}

type EDressUpStatus int32

const (
	EDressUpStatus_EDRESSUP_MIN  EDressUpStatus = 0
	EDressUpStatus_EDRESSUP_WAIT EDressUpStatus = 1
	EDressUpStatus_EDRESSUP_SHOW EDressUpStatus = 2
)

// Enum value maps for EDressUpStatus.
var (
	EDressUpStatus_name = map[int32]string{
		0: "EDRESSUP_MIN",
		1: "EDRESSUP_WAIT",
		2: "EDRESSUP_SHOW",
	}
	EDressUpStatus_value = map[string]int32{
		"EDRESSUP_MIN":  0,
		"EDRESSUP_WAIT": 1,
		"EDRESSUP_SHOW": 2,
	}
)

func (x EDressUpStatus) Enum() *EDressUpStatus {
	p := new(EDressUpStatus)
	*p = x
	return p
}

func (x EDressUpStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDressUpStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[36].Descriptor()
}

func (EDressUpStatus) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[36]
}

func (x EDressUpStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDressUpStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDressUpStatus(num)
	return nil
}

// Deprecated: Use EDressUpStatus.Descriptor instead.
func (EDressUpStatus) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{36}
}

type EFuncMapType int32

const (
	EFuncMapType_EFUNCMAPTYPE_POLLY EFuncMapType = 1
)

// Enum value maps for EFuncMapType.
var (
	EFuncMapType_name = map[int32]string{
		1: "EFUNCMAPTYPE_POLLY",
	}
	EFuncMapType_value = map[string]int32{
		"EFUNCMAPTYPE_POLLY": 1,
	}
)

func (x EFuncMapType) Enum() *EFuncMapType {
	p := new(EFuncMapType)
	*p = x
	return p
}

func (x EFuncMapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFuncMapType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[37].Descriptor()
}

func (EFuncMapType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[37]
}

func (x EFuncMapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFuncMapType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFuncMapType(num)
	return nil
}

// Deprecated: Use EFuncMapType.Descriptor instead.
func (EFuncMapType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{37}
}

type EGrowthStatus int32

const (
	EGrowthStatus_EGROWTH_STATUS_MIN     EGrowthStatus = 0
	EGrowthStatus_EGROWTH_STATUS_GO      EGrowthStatus = 1
	EGrowthStatus_EGROWTH_STATUS_RECEIVE EGrowthStatus = 2
	EGrowthStatus_EGROWTH_STATUS_FINISH  EGrowthStatus = 3
)

// Enum value maps for EGrowthStatus.
var (
	EGrowthStatus_name = map[int32]string{
		0: "EGROWTH_STATUS_MIN",
		1: "EGROWTH_STATUS_GO",
		2: "EGROWTH_STATUS_RECEIVE",
		3: "EGROWTH_STATUS_FINISH",
	}
	EGrowthStatus_value = map[string]int32{
		"EGROWTH_STATUS_MIN":     0,
		"EGROWTH_STATUS_GO":      1,
		"EGROWTH_STATUS_RECEIVE": 2,
		"EGROWTH_STATUS_FINISH":  3,
	}
)

func (x EGrowthStatus) Enum() *EGrowthStatus {
	p := new(EGrowthStatus)
	*p = x
	return p
}

func (x EGrowthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGrowthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[38].Descriptor()
}

func (EGrowthStatus) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[38]
}

func (x EGrowthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGrowthStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGrowthStatus(num)
	return nil
}

// Deprecated: Use EGrowthStatus.Descriptor instead.
func (EGrowthStatus) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{38}
}

type EGrowthType int32

const (
	EGrowthType_EGROWTH_TYPE_MIN        EGrowthType = 0
	EGrowthType_EGROWTH_TYPE_STEP       EGrowthType = 1
	EGrowthType_EGROWTH_TYPE_EP         EGrowthType = 2
	EGrowthType_EGROWTH_TYPE_TIME_LIMIT EGrowthType = 3
	EGrowthType_EGROWTH_TYPE_MAX        EGrowthType = 4
)

// Enum value maps for EGrowthType.
var (
	EGrowthType_name = map[int32]string{
		0: "EGROWTH_TYPE_MIN",
		1: "EGROWTH_TYPE_STEP",
		2: "EGROWTH_TYPE_EP",
		3: "EGROWTH_TYPE_TIME_LIMIT",
		4: "EGROWTH_TYPE_MAX",
	}
	EGrowthType_value = map[string]int32{
		"EGROWTH_TYPE_MIN":        0,
		"EGROWTH_TYPE_STEP":       1,
		"EGROWTH_TYPE_EP":         2,
		"EGROWTH_TYPE_TIME_LIMIT": 3,
		"EGROWTH_TYPE_MAX":        4,
	}
)

func (x EGrowthType) Enum() *EGrowthType {
	p := new(EGrowthType)
	*p = x
	return p
}

func (x EGrowthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGrowthType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[39].Descriptor()
}

func (EGrowthType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[39]
}

func (x EGrowthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGrowthType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGrowthType(num)
	return nil
}

// Deprecated: Use EGrowthType.Descriptor instead.
func (EGrowthType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{39}
}

type EMonitorButton int32

const (
	EMonitorButton_EMONITORBUTTON_AUTO_BATTLE_BUTTON    EMonitorButton = 0
	EMonitorButton_EMONITORBUTTON_QUICK_ITEM_CELL1      EMonitorButton = 1
	EMonitorButton_EMONITORBUTTON_QUICK_ITEM_CELL2      EMonitorButton = 2
	EMonitorButton_EMONITORBUTTON_NEARLY_BUTTON         EMonitorButton = 3
	EMonitorButton_EMONITORBUTTON_NPC_TOG               EMonitorButton = 4
	EMonitorButton_EMONITORBUTTON_NEARLY_CREATURE_CELL2 EMonitorButton = 5
	EMonitorButton_EMONITORBUTTON_CLICK_MVP_MINI        EMonitorButton = 101
	EMonitorButton_EMONITORBUTTON_AUTO_CLICK_MVP_MINI   EMonitorButton = 102
	EMonitorButton_EMONITORBUTTON_CLICK_NPC             EMonitorButton = 103
	EMonitorButton_EMONITORBUTTON_MAP_CLICK_NPC         EMonitorButton = 104
	EMonitorButton_EMONITORBUTTON_MAX                   EMonitorButton = 105
)

// Enum value maps for EMonitorButton.
var (
	EMonitorButton_name = map[int32]string{
		0:   "EMONITORBUTTON_AUTO_BATTLE_BUTTON",
		1:   "EMONITORBUTTON_QUICK_ITEM_CELL1",
		2:   "EMONITORBUTTON_QUICK_ITEM_CELL2",
		3:   "EMONITORBUTTON_NEARLY_BUTTON",
		4:   "EMONITORBUTTON_NPC_TOG",
		5:   "EMONITORBUTTON_NEARLY_CREATURE_CELL2",
		101: "EMONITORBUTTON_CLICK_MVP_MINI",
		102: "EMONITORBUTTON_AUTO_CLICK_MVP_MINI",
		103: "EMONITORBUTTON_CLICK_NPC",
		104: "EMONITORBUTTON_MAP_CLICK_NPC",
		105: "EMONITORBUTTON_MAX",
	}
	EMonitorButton_value = map[string]int32{
		"EMONITORBUTTON_AUTO_BATTLE_BUTTON":    0,
		"EMONITORBUTTON_QUICK_ITEM_CELL1":      1,
		"EMONITORBUTTON_QUICK_ITEM_CELL2":      2,
		"EMONITORBUTTON_NEARLY_BUTTON":         3,
		"EMONITORBUTTON_NPC_TOG":               4,
		"EMONITORBUTTON_NEARLY_CREATURE_CELL2": 5,
		"EMONITORBUTTON_CLICK_MVP_MINI":        101,
		"EMONITORBUTTON_AUTO_CLICK_MVP_MINI":   102,
		"EMONITORBUTTON_CLICK_NPC":             103,
		"EMONITORBUTTON_MAP_CLICK_NPC":         104,
		"EMONITORBUTTON_MAX":                   105,
	}
)

func (x EMonitorButton) Enum() *EMonitorButton {
	p := new(EMonitorButton)
	*p = x
	return p
}

func (x EMonitorButton) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMonitorButton) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[40].Descriptor()
}

func (EMonitorButton) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[40]
}

func (x EMonitorButton) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMonitorButton) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMonitorButton(num)
	return nil
}

// Deprecated: Use EMonitorButton.Descriptor instead.
func (EMonitorButton) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{40}
}

type ESignInType int32

const (
	ESignInType_ESIGNINTYPE_MIN      ESignInType = 0
	ESignInType_ESIGNINTYPE_DAILY    ESignInType = 1
	ESignInType_ESIGNINTYPE_ACTIVITY ESignInType = 2
)

// Enum value maps for ESignInType.
var (
	ESignInType_name = map[int32]string{
		0: "ESIGNINTYPE_MIN",
		1: "ESIGNINTYPE_DAILY",
		2: "ESIGNINTYPE_ACTIVITY",
	}
	ESignInType_value = map[string]int32{
		"ESIGNINTYPE_MIN":      0,
		"ESIGNINTYPE_DAILY":    1,
		"ESIGNINTYPE_ACTIVITY": 2,
	}
)

func (x ESignInType) Enum() *ESignInType {
	p := new(ESignInType)
	*p = x
	return p
}

func (x ESignInType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESignInType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[41].Descriptor()
}

func (ESignInType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[41]
}

func (x ESignInType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESignInType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESignInType(num)
	return nil
}

// Deprecated: Use ESignInType.Descriptor instead.
func (ESignInType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{41}
}

type ERewardStatus int32

const (
	ERewardStatus_EREWEARD_STATUS_MIN     ERewardStatus = 0
	ERewardStatus_EREWEARD_STATUS_CAN_GET ERewardStatus = 1
	ERewardStatus_EREWEARD_STATUS_GET     ERewardStatus = 2
	ERewardStatus_EREWEARD_STATUS_MAX     ERewardStatus = 3
)

// Enum value maps for ERewardStatus.
var (
	ERewardStatus_name = map[int32]string{
		0: "EREWEARD_STATUS_MIN",
		1: "EREWEARD_STATUS_CAN_GET",
		2: "EREWEARD_STATUS_GET",
		3: "EREWEARD_STATUS_MAX",
	}
	ERewardStatus_value = map[string]int32{
		"EREWEARD_STATUS_MIN":     0,
		"EREWEARD_STATUS_CAN_GET": 1,
		"EREWEARD_STATUS_GET":     2,
		"EREWEARD_STATUS_MAX":     3,
	}
)

func (x ERewardStatus) Enum() *ERewardStatus {
	p := new(ERewardStatus)
	*p = x
	return p
}

func (x ERewardStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERewardStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[42].Descriptor()
}

func (ERewardStatus) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[42]
}

func (x ERewardStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERewardStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERewardStatus(num)
	return nil
}

// Deprecated: Use ERewardStatus.Descriptor instead.
func (ERewardStatus) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{42}
}

type EReservationType int32

const (
	EReservationType_ERESERVATIONTYPE_CONFIG  EReservationType = 1
	EReservationType_ERESERVATIONTYPE_CONSOLE EReservationType = 2
)

// Enum value maps for EReservationType.
var (
	EReservationType_name = map[int32]string{
		1: "ERESERVATIONTYPE_CONFIG",
		2: "ERESERVATIONTYPE_CONSOLE",
	}
	EReservationType_value = map[string]int32{
		"ERESERVATIONTYPE_CONFIG":  1,
		"ERESERVATIONTYPE_CONSOLE": 2,
	}
)

func (x EReservationType) Enum() *EReservationType {
	p := new(EReservationType)
	*p = x
	return p
}

func (x EReservationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EReservationType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[43].Descriptor()
}

func (EReservationType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[43]
}

func (x EReservationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EReservationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EReservationType(num)
	return nil
}

// Deprecated: Use EReservationType.Descriptor instead.
func (EReservationType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{43}
}

type EGameHealthEventType int32

const (
	EGameHealthEventType_EGHEVENTTYPE_MIN          EGameHealthEventType = 0
	EGameHealthEventType_EGHEVENTTYPE_TIME         EGameHealthEventType = 1
	EGameHealthEventType_EGHEVENTTYPE_POS          EGameHealthEventType = 2
	EGameHealthEventType_EGHEVENTTYPE_NPC          EGameHealthEventType = 3
	EGameHealthEventType_EGHEVENTTYPE_DANGER_LEVEL EGameHealthEventType = 4
	EGameHealthEventType_EGHEVENTTYPE_COUNT        EGameHealthEventType = 5
	EGameHealthEventType_EGHEVENTTYPE_BARRAGE      EGameHealthEventType = 6
	EGameHealthEventType_EGHEVENTTYPE_MAX          EGameHealthEventType = 7
)

// Enum value maps for EGameHealthEventType.
var (
	EGameHealthEventType_name = map[int32]string{
		0: "EGHEVENTTYPE_MIN",
		1: "EGHEVENTTYPE_TIME",
		2: "EGHEVENTTYPE_POS",
		3: "EGHEVENTTYPE_NPC",
		4: "EGHEVENTTYPE_DANGER_LEVEL",
		5: "EGHEVENTTYPE_COUNT",
		6: "EGHEVENTTYPE_BARRAGE",
		7: "EGHEVENTTYPE_MAX",
	}
	EGameHealthEventType_value = map[string]int32{
		"EGHEVENTTYPE_MIN":          0,
		"EGHEVENTTYPE_TIME":         1,
		"EGHEVENTTYPE_POS":          2,
		"EGHEVENTTYPE_NPC":          3,
		"EGHEVENTTYPE_DANGER_LEVEL": 4,
		"EGHEVENTTYPE_COUNT":        5,
		"EGHEVENTTYPE_BARRAGE":      6,
		"EGHEVENTTYPE_MAX":          7,
	}
)

func (x EGameHealthEventType) Enum() *EGameHealthEventType {
	p := new(EGameHealthEventType)
	*p = x
	return p
}

func (x EGameHealthEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGameHealthEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[44].Descriptor()
}

func (EGameHealthEventType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[44]
}

func (x EGameHealthEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGameHealthEventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGameHealthEventType(num)
	return nil
}

// Deprecated: Use EGameHealthEventType.Descriptor instead.
func (EGameHealthEventType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{44}
}

type EProgressStatus int32

const (
	EProgressStatus_EPROGRESSSTATUS_MIN    EProgressStatus = 0
	EProgressStatus_EPROGRESSSTATUS_GO     EProgressStatus = 1
	EProgressStatus_EPROGRESSSTATUS_REWARD EProgressStatus = 2
	EProgressStatus_EPROGRESSSTATUS_FINISH EProgressStatus = 3
)

// Enum value maps for EProgressStatus.
var (
	EProgressStatus_name = map[int32]string{
		0: "EPROGRESSSTATUS_MIN",
		1: "EPROGRESSSTATUS_GO",
		2: "EPROGRESSSTATUS_REWARD",
		3: "EPROGRESSSTATUS_FINISH",
	}
	EProgressStatus_value = map[string]int32{
		"EPROGRESSSTATUS_MIN":    0,
		"EPROGRESSSTATUS_GO":     1,
		"EPROGRESSSTATUS_REWARD": 2,
		"EPROGRESSSTATUS_FINISH": 3,
	}
)

func (x EProgressStatus) Enum() *EProgressStatus {
	p := new(EProgressStatus)
	*p = x
	return p
}

func (x EProgressStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EProgressStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[45].Descriptor()
}

func (EProgressStatus) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[45]
}

func (x EProgressStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EProgressStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EProgressStatus(num)
	return nil
}

// Deprecated: Use EProgressStatus.Descriptor instead.
func (EProgressStatus) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{45}
}

type EBuildStatus int32

const (
	EBuildStatus_EBUILDSTATUS_INIT EBuildStatus = 0
	EBuildStatus_EBUILDSTATUS_RUN  EBuildStatus = 1
	EBuildStatus_EBUILDSTATUS_OPER EBuildStatus = 2
)

// Enum value maps for EBuildStatus.
var (
	EBuildStatus_name = map[int32]string{
		0: "EBUILDSTATUS_INIT",
		1: "EBUILDSTATUS_RUN",
		2: "EBUILDSTATUS_OPER",
	}
	EBuildStatus_value = map[string]int32{
		"EBUILDSTATUS_INIT": 0,
		"EBUILDSTATUS_RUN":  1,
		"EBUILDSTATUS_OPER": 2,
	}
)

func (x EBuildStatus) Enum() *EBuildStatus {
	p := new(EBuildStatus)
	*p = x
	return p
}

func (x EBuildStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBuildStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[46].Descriptor()
}

func (EBuildStatus) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[46]
}

func (x EBuildStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBuildStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBuildStatus(num)
	return nil
}

// Deprecated: Use EBuildStatus.Descriptor instead.
func (EBuildStatus) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{46}
}

type ERewardTeamExpType int32

const (
	ERewardTeamExpType_REWARD_TEAM_EXP_MIN  ERewardTeamExpType = 0
	ERewardTeamExpType_REWARD_TEAM_EXP_EXP  ERewardTeamExpType = 1
	ERewardTeamExpType_REWARD_TEAM_EXP_ITEM ERewardTeamExpType = 2
	ERewardTeamExpType_REWARD_TEAM_EXP_MAX  ERewardTeamExpType = 3
)

// Enum value maps for ERewardTeamExpType.
var (
	ERewardTeamExpType_name = map[int32]string{
		0: "REWARD_TEAM_EXP_MIN",
		1: "REWARD_TEAM_EXP_EXP",
		2: "REWARD_TEAM_EXP_ITEM",
		3: "REWARD_TEAM_EXP_MAX",
	}
	ERewardTeamExpType_value = map[string]int32{
		"REWARD_TEAM_EXP_MIN":  0,
		"REWARD_TEAM_EXP_EXP":  1,
		"REWARD_TEAM_EXP_ITEM": 2,
		"REWARD_TEAM_EXP_MAX":  3,
	}
)

func (x ERewardTeamExpType) Enum() *ERewardTeamExpType {
	p := new(ERewardTeamExpType)
	*p = x
	return p
}

func (x ERewardTeamExpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERewardTeamExpType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[47].Descriptor()
}

func (ERewardTeamExpType) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[47]
}

func (x ERewardTeamExpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERewardTeamExpType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERewardTeamExpType(num)
	return nil
}

// Deprecated: Use ERewardTeamExpType.Descriptor instead.
func (ERewardTeamExpType) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{47}
}

type EMultiMountOption int32

const (
	EMultiMountOption_EMULTIMOUNT_OPTION_ALL_USER EMultiMountOption = 1
	EMultiMountOption_EMULTIMOUNT_OPTION_TEAM     EMultiMountOption = 2
)

// Enum value maps for EMultiMountOption.
var (
	EMultiMountOption_name = map[int32]string{
		1: "EMULTIMOUNT_OPTION_ALL_USER",
		2: "EMULTIMOUNT_OPTION_TEAM",
	}
	EMultiMountOption_value = map[string]int32{
		"EMULTIMOUNT_OPTION_ALL_USER": 1,
		"EMULTIMOUNT_OPTION_TEAM":     2,
	}
)

func (x EMultiMountOption) Enum() *EMultiMountOption {
	p := new(EMultiMountOption)
	*p = x
	return p
}

func (x EMultiMountOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMultiMountOption) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[48].Descriptor()
}

func (EMultiMountOption) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[48]
}

func (x EMultiMountOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMultiMountOption) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMultiMountOption(num)
	return nil
}

// Deprecated: Use EMultiMountOption.Descriptor instead.
func (EMultiMountOption) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{48}
}

type ENtfPalyVersion int32

const (
	ENtfPalyVersion_ENTFPLAYACTTYPE_MIN      ENtfPalyVersion = 0
	ENtfPalyVersion_ENTFPLAYACTTYPE_VERSION1 ENtfPalyVersion = 1
	ENtfPalyVersion_ENTFPLAYACTTYPE_VERSION2 ENtfPalyVersion = 2
)

// Enum value maps for ENtfPalyVersion.
var (
	ENtfPalyVersion_name = map[int32]string{
		0: "ENTFPLAYACTTYPE_MIN",
		1: "ENTFPLAYACTTYPE_VERSION1",
		2: "ENTFPLAYACTTYPE_VERSION2",
	}
	ENtfPalyVersion_value = map[string]int32{
		"ENTFPLAYACTTYPE_MIN":      0,
		"ENTFPLAYACTTYPE_VERSION1": 1,
		"ENTFPLAYACTTYPE_VERSION2": 2,
	}
)

func (x ENtfPalyVersion) Enum() *ENtfPalyVersion {
	p := new(ENtfPalyVersion)
	*p = x
	return p
}

func (x ENtfPalyVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENtfPalyVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[49].Descriptor()
}

func (ENtfPalyVersion) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[49]
}

func (x ENtfPalyVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ENtfPalyVersion) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ENtfPalyVersion(num)
	return nil
}

// Deprecated: Use ENtfPalyVersion.Descriptor instead.
func (ENtfPalyVersion) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{49}
}

type ENoviceTargetState int32

const (
	ENoviceTargetState_ENOVICE_TARGET_GO       ENoviceTargetState = 0
	ENoviceTargetState_ENOVICE_TARGET_FINISH   ENoviceTargetState = 1
	ENoviceTargetState_ENOVICE_TARGET_REWARDED ENoviceTargetState = 2
	ENoviceTargetState_ENOVICE_TARGET_LOCKED   ENoviceTargetState = 3
)

// Enum value maps for ENoviceTargetState.
var (
	ENoviceTargetState_name = map[int32]string{
		0: "ENOVICE_TARGET_GO",
		1: "ENOVICE_TARGET_FINISH",
		2: "ENOVICE_TARGET_REWARDED",
		3: "ENOVICE_TARGET_LOCKED",
	}
	ENoviceTargetState_value = map[string]int32{
		"ENOVICE_TARGET_GO":       0,
		"ENOVICE_TARGET_FINISH":   1,
		"ENOVICE_TARGET_REWARDED": 2,
		"ENOVICE_TARGET_LOCKED":   3,
	}
)

func (x ENoviceTargetState) Enum() *ENoviceTargetState {
	p := new(ENoviceTargetState)
	*p = x
	return p
}

func (x ENoviceTargetState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENoviceTargetState) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneUser2_proto_enumTypes[50].Descriptor()
}

func (ENoviceTargetState) Type() protoreflect.EnumType {
	return &file_SceneUser2_proto_enumTypes[50]
}

func (x ENoviceTargetState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ENoviceTargetState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ENoviceTargetState(num)
	return nil
}

// Deprecated: Use ENoviceTargetState.Descriptor instead.
func (ENoviceTargetState) EnumDescriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{50}
}

type GoCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=1" json:"param,omitempty"`
	Mapid *uint32     `protobuf:"varint,3,opt,name=mapid,def=0" json:"mapid,omitempty"`
}

// Default values for GoCity fields.
const (
	Default_GoCity_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_GoCity_Param = User2Param_USER2PARAM_GOCITY
	Default_GoCity_Mapid = uint32(0)
)

func (x *GoCity) Reset() {
	*x = GoCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoCity) ProtoMessage() {}

func (x *GoCity) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoCity.ProtoReflect.Descriptor instead.
func (*GoCity) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{0}
}

func (x *GoCity) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GoCity_Cmd
}

func (x *GoCity) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GoCity_Param
}

func (x *GoCity) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_GoCity_Mapid
}

type MsgLangParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language *uint32 `protobuf:"varint,1,opt,name=language,def=0" json:"language,omitempty"`
	Param    *string `protobuf:"bytes,2,opt,name=param" json:"param,omitempty"`
}

// Default values for MsgLangParam fields.
const (
	Default_MsgLangParam_Language = uint32(0)
)

func (x *MsgLangParam) Reset() {
	*x = MsgLangParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgLangParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgLangParam) ProtoMessage() {}

func (x *MsgLangParam) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgLangParam.ProtoReflect.Descriptor instead.
func (*MsgLangParam) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{1}
}

func (x *MsgLangParam) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return Default_MsgLangParam_Language
}

func (x *MsgLangParam) GetParam() string {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return ""
}

type MsgParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param      *string         `protobuf:"bytes,1,opt,name=param" json:"param,omitempty"`
	Subparams  []string        `protobuf:"bytes,2,rep,name=subparams" json:"subparams,omitempty"`
	Langparams []*MsgLangParam `protobuf:"bytes,3,rep,name=langparams" json:"langparams,omitempty"`
}

func (x *MsgParam) Reset() {
	*x = MsgParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgParam) ProtoMessage() {}

func (x *MsgParam) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgParam.ProtoReflect.Descriptor instead.
func (*MsgParam) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{2}
}

func (x *MsgParam) GetParam() string {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return ""
}

func (x *MsgParam) GetSubparams() []string {
	if x != nil {
		return x.Subparams
	}
	return nil
}

func (x *MsgParam) GetLangparams() []*MsgLangParam {
	if x != nil {
		return x.Langparams
	}
	return nil
}

type SysMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param     `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=2" json:"param,omitempty"`
	Id     *uint32         `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Type   *EMessageType   `protobuf:"varint,4,opt,name=type,enum=Cmd.EMessageType,def=0" json:"type,omitempty"`
	Params []*MsgParam     `protobuf:"bytes,5,rep,name=params" json:"params,omitempty"`
	Act    *EMessageActOpt `protobuf:"varint,6,opt,name=act,enum=Cmd.EMessageActOpt,def=1" json:"act,omitempty"`
	Delay  *uint32         `protobuf:"varint,7,opt,name=delay,def=0" json:"delay,omitempty"`
}

// Default values for SysMsg fields.
const (
	Default_SysMsg_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_SysMsg_Param = User2Param_USER2PARAM_SYSMSG
	Default_SysMsg_Id    = uint32(0)
	Default_SysMsg_Type  = EMessageType_EMESSAGETYPE_MIN
	Default_SysMsg_Act   = EMessageActOpt_EMESSAGEACT_ADD
	Default_SysMsg_Delay = uint32(0)
)

func (x *SysMsg) Reset() {
	*x = SysMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysMsg) ProtoMessage() {}

func (x *SysMsg) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysMsg.ProtoReflect.Descriptor instead.
func (*SysMsg) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{3}
}

func (x *SysMsg) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SysMsg_Cmd
}

func (x *SysMsg) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SysMsg_Param
}

func (x *SysMsg) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_SysMsg_Id
}

func (x *SysMsg) GetType() EMessageType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_SysMsg_Type
}

func (x *SysMsg) GetParams() []*MsgParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SysMsg) GetAct() EMessageActOpt {
	if x != nil && x.Act != nil {
		return *x.Act
	}
	return Default_SysMsg_Act
}

func (x *SysMsg) GetDelay() uint32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return Default_SysMsg_Delay
}

type NpcDataSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=3" json:"param,omitempty"`
	Guid  *uint64     `protobuf:"varint,3,opt,name=guid,def=0" json:"guid,omitempty"`
	Attrs []*UserAttr `protobuf:"bytes,4,rep,name=attrs" json:"attrs,omitempty"`
	Datas []*UserData `protobuf:"bytes,5,rep,name=datas" json:"datas,omitempty"`
}

// Default values for NpcDataSync fields.
const (
	Default_NpcDataSync_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_NpcDataSync_Param = User2Param_USER2PARAM_NPCDATASYNC
	Default_NpcDataSync_Guid  = uint64(0)
)

func (x *NpcDataSync) Reset() {
	*x = NpcDataSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpcDataSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpcDataSync) ProtoMessage() {}

func (x *NpcDataSync) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpcDataSync.ProtoReflect.Descriptor instead.
func (*NpcDataSync) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{4}
}

func (x *NpcDataSync) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NpcDataSync_Cmd
}

func (x *NpcDataSync) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NpcDataSync_Param
}

func (x *NpcDataSync) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_NpcDataSync_Guid
}

func (x *NpcDataSync) GetAttrs() []*UserAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *NpcDataSync) GetDatas() []*UserData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type UserNineSyncCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=4" json:"param,omitempty"`
	Guid  *uint64     `protobuf:"varint,3,opt,name=guid,def=0" json:"guid,omitempty"`
	Datas []*UserData `protobuf:"bytes,4,rep,name=datas" json:"datas,omitempty"`
	Attrs []*UserAttr `protobuf:"bytes,5,rep,name=attrs" json:"attrs,omitempty"`
}

// Default values for UserNineSyncCmd fields.
const (
	Default_UserNineSyncCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_UserNineSyncCmd_Param = User2Param_USER2PARAM_USERNINESYNC
	Default_UserNineSyncCmd_Guid  = uint64(0)
)

func (x *UserNineSyncCmd) Reset() {
	*x = UserNineSyncCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNineSyncCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNineSyncCmd) ProtoMessage() {}

func (x *UserNineSyncCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNineSyncCmd.ProtoReflect.Descriptor instead.
func (*UserNineSyncCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{5}
}

func (x *UserNineSyncCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserNineSyncCmd_Cmd
}

func (x *UserNineSyncCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserNineSyncCmd_Param
}

func (x *UserNineSyncCmd) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_UserNineSyncCmd_Guid
}

func (x *UserNineSyncCmd) GetDatas() []*UserData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *UserNineSyncCmd) GetAttrs() []*UserAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type UserActionNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param      `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=5" json:"param,omitempty"`
	Charid *uint64          `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Value  *uint64          `protobuf:"varint,5,opt,name=value,def=0" json:"value,omitempty"`
	Type   *EUserActionType `protobuf:"varint,4,opt,name=type,enum=Cmd.EUserActionType,def=0" json:"type,omitempty"`
	Delay  *uint32          `protobuf:"varint,6,opt,name=delay,def=0" json:"delay,omitempty"`
}

// Default values for UserActionNtf fields.
const (
	Default_UserActionNtf_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_UserActionNtf_Param  = User2Param_USER2PARAM_ACTION
	Default_UserActionNtf_Charid = uint64(0)
	Default_UserActionNtf_Value  = uint64(0)
	Default_UserActionNtf_Type   = EUserActionType_EUSERACTIONTYPE_MIN
	Default_UserActionNtf_Delay  = uint32(0)
)

func (x *UserActionNtf) Reset() {
	*x = UserActionNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserActionNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActionNtf) ProtoMessage() {}

func (x *UserActionNtf) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActionNtf.ProtoReflect.Descriptor instead.
func (*UserActionNtf) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{6}
}

func (x *UserActionNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserActionNtf_Cmd
}

func (x *UserActionNtf) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserActionNtf_Param
}

func (x *UserActionNtf) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_UserActionNtf_Charid
}

func (x *UserActionNtf) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_UserActionNtf_Value
}

func (x *UserActionNtf) GetType() EUserActionType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_UserActionNtf_Type
}

func (x *UserActionNtf) GetDelay() uint32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return Default_UserActionNtf_Delay
}

type BufferData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Layer    *uint32 `protobuf:"varint,2,opt,name=layer,def=1" json:"layer,omitempty"`
	Time     *uint64 `protobuf:"varint,3,opt,name=time,def=0" json:"time,omitempty"`
	Active   *bool   `protobuf:"varint,4,opt,name=active,def=1" json:"active,omitempty"`
	Fromname *string `protobuf:"bytes,5,opt,name=fromname" json:"fromname,omitempty"`
	Fromid   *uint64 `protobuf:"varint,6,opt,name=fromid,def=0" json:"fromid,omitempty"`
	Level    *uint32 `protobuf:"varint,7,opt,name=level,def=0" json:"level,omitempty"`
	Stateid  *uint32 `protobuf:"varint,8,opt,name=stateid,def=0" json:"stateid,omitempty"`
}

// Default values for BufferData fields.
const (
	Default_BufferData_Id      = uint32(0)
	Default_BufferData_Layer   = uint32(1)
	Default_BufferData_Time    = uint64(0)
	Default_BufferData_Active  = bool(true)
	Default_BufferData_Fromid  = uint64(0)
	Default_BufferData_Level   = uint32(0)
	Default_BufferData_Stateid = uint32(0)
)

func (x *BufferData) Reset() {
	*x = BufferData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BufferData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferData) ProtoMessage() {}

func (x *BufferData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferData.ProtoReflect.Descriptor instead.
func (*BufferData) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{7}
}

func (x *BufferData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_BufferData_Id
}

func (x *BufferData) GetLayer() uint32 {
	if x != nil && x.Layer != nil {
		return *x.Layer
	}
	return Default_BufferData_Layer
}

func (x *BufferData) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_BufferData_Time
}

func (x *BufferData) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return Default_BufferData_Active
}

func (x *BufferData) GetFromname() string {
	if x != nil && x.Fromname != nil {
		return *x.Fromname
	}
	return ""
}

func (x *BufferData) GetFromid() uint64 {
	if x != nil && x.Fromid != nil {
		return *x.Fromid
	}
	return Default_BufferData_Fromid
}

func (x *BufferData) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return Default_BufferData_Level
}

func (x *BufferData) GetStateid() uint32 {
	if x != nil && x.Stateid != nil {
		return *x.Stateid
	}
	return Default_BufferData_Stateid
}

type UserBuffNineSyncCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param   `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=6" json:"param,omitempty"`
	Guid    *uint64       `protobuf:"varint,3,opt,name=guid,def=0" json:"guid,omitempty"`
	Updates []*BufferData `protobuf:"bytes,4,rep,name=updates" json:"updates,omitempty"`
	Dels    []uint32      `protobuf:"varint,5,rep,name=dels" json:"dels,omitempty"`
	All     *bool         `protobuf:"varint,6,opt,name=all" json:"all,omitempty"`
}

// Default values for UserBuffNineSyncCmd fields.
const (
	Default_UserBuffNineSyncCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_UserBuffNineSyncCmd_Param = User2Param_USER2PARAM_BUFFERSYNC
	Default_UserBuffNineSyncCmd_Guid  = uint64(0)
)

func (x *UserBuffNineSyncCmd) Reset() {
	*x = UserBuffNineSyncCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBuffNineSyncCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBuffNineSyncCmd) ProtoMessage() {}

func (x *UserBuffNineSyncCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBuffNineSyncCmd.ProtoReflect.Descriptor instead.
func (*UserBuffNineSyncCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{8}
}

func (x *UserBuffNineSyncCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserBuffNineSyncCmd_Cmd
}

func (x *UserBuffNineSyncCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserBuffNineSyncCmd_Param
}

func (x *UserBuffNineSyncCmd) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_UserBuffNineSyncCmd_Guid
}

func (x *UserBuffNineSyncCmd) GetUpdates() []*BufferData {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *UserBuffNineSyncCmd) GetDels() []uint32 {
	if x != nil {
		return x.Dels
	}
	return nil
}

func (x *UserBuffNineSyncCmd) GetAll() bool {
	if x != nil && x.All != nil {
		return *x.All
	}
	return false
}

type ExitPosUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=7" json:"param,omitempty"`
	Pos    *ScenePos   `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
	Exitid *uint32     `protobuf:"varint,4,opt,name=exitid" json:"exitid,omitempty"`
	Mapid  *uint32     `protobuf:"varint,5,opt,name=mapid" json:"mapid,omitempty"`
}

// Default values for ExitPosUserCmd fields.
const (
	Default_ExitPosUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ExitPosUserCmd_Param = User2Param_USER2PARAM_EXIT_POS
)

func (x *ExitPosUserCmd) Reset() {
	*x = ExitPosUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitPosUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitPosUserCmd) ProtoMessage() {}

func (x *ExitPosUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitPosUserCmd.ProtoReflect.Descriptor instead.
func (*ExitPosUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{9}
}

func (x *ExitPosUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExitPosUserCmd_Cmd
}

func (x *ExitPosUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExitPosUserCmd_Param
}

func (x *ExitPosUserCmd) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *ExitPosUserCmd) GetExitid() uint32 {
	if x != nil && x.Exitid != nil {
		return *x.Exitid
	}
	return 0
}

func (x *ExitPosUserCmd) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return 0
}

type Relive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=8" json:"param,omitempty"`
	Type   *EReliveType `protobuf:"varint,3,opt,name=type,enum=Cmd.EReliveType,def=0" json:"type,omitempty"`
	Itemid *uint32      `protobuf:"varint,4,opt,name=itemid,def=0" json:"itemid,omitempty"`
}

// Default values for Relive fields.
const (
	Default_Relive_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_Relive_Param  = User2Param_USER2PARAM_RELIVE
	Default_Relive_Type   = EReliveType_ERELIVETYPE_MIN
	Default_Relive_Itemid = uint32(0)
)

func (x *Relive) Reset() {
	*x = Relive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relive) ProtoMessage() {}

func (x *Relive) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relive.ProtoReflect.Descriptor instead.
func (*Relive) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{10}
}

func (x *Relive) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_Relive_Cmd
}

func (x *Relive) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_Relive_Param
}

func (x *Relive) GetType() EReliveType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_Relive_Type
}

func (x *Relive) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_Relive_Itemid
}

type VarUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=9" json:"param,omitempty"`
	Vars    []*Var      `protobuf:"bytes,3,rep,name=vars" json:"vars,omitempty"`
	Accvars []*AccVar   `protobuf:"bytes,4,rep,name=accvars" json:"accvars,omitempty"`
}

// Default values for VarUpdate fields.
const (
	Default_VarUpdate_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_VarUpdate_Param = User2Param_USER2PARAM_VAR
)

func (x *VarUpdate) Reset() {
	*x = VarUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarUpdate) ProtoMessage() {}

func (x *VarUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarUpdate.ProtoReflect.Descriptor instead.
func (*VarUpdate) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{11}
}

func (x *VarUpdate) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_VarUpdate_Cmd
}

func (x *VarUpdate) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_VarUpdate_Param
}

func (x *VarUpdate) GetVars() []*Var {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *VarUpdate) GetAccvars() []*AccVar {
	if x != nil {
		return x.Accvars
	}
	return nil
}

type TalkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param       *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=10" json:"param,omitempty"`
	Guid        *uint64     `protobuf:"varint,3,opt,name=guid,def=0" json:"guid,omitempty"`
	Talkid      *uint32     `protobuf:"varint,4,opt,name=talkid" json:"talkid,omitempty"`
	Talkmessage *string     `protobuf:"bytes,5,opt,name=talkmessage" json:"talkmessage,omitempty"`
	Params      []*MsgParam `protobuf:"bytes,6,rep,name=params" json:"params,omitempty"`
}

// Default values for TalkInfo fields.
const (
	Default_TalkInfo_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_TalkInfo_Param = User2Param_USER2PARAM_TALKINFO
	Default_TalkInfo_Guid  = uint64(0)
)

func (x *TalkInfo) Reset() {
	*x = TalkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkInfo) ProtoMessage() {}

func (x *TalkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkInfo.ProtoReflect.Descriptor instead.
func (*TalkInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{12}
}

func (x *TalkInfo) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TalkInfo_Cmd
}

func (x *TalkInfo) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TalkInfo_Param
}

func (x *TalkInfo) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_TalkInfo_Guid
}

func (x *TalkInfo) GetTalkid() uint32 {
	if x != nil && x.Talkid != nil {
		return *x.Talkid
	}
	return 0
}

func (x *TalkInfo) GetTalkmessage() string {
	if x != nil && x.Talkmessage != nil {
		return *x.Talkmessage
	}
	return ""
}

func (x *TalkInfo) GetParams() []*MsgParam {
	if x != nil {
		return x.Params
	}
	return nil
}

type ServerTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=11" json:"param,omitempty"`
	Time  *uint64     `protobuf:"varint,3,opt,name=time,def=0" json:"time,omitempty"`
}

// Default values for ServerTime fields.
const (
	Default_ServerTime_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ServerTime_Param = User2Param_USER2PARAM_SERVERTIME
	Default_ServerTime_Time  = uint64(0)
)

func (x *ServerTime) Reset() {
	*x = ServerTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerTime) ProtoMessage() {}

func (x *ServerTime) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerTime.ProtoReflect.Descriptor instead.
func (*ServerTime) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{13}
}

func (x *ServerTime) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ServerTime_Cmd
}

func (x *ServerTime) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ServerTime_Param
}

func (x *ServerTime) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_ServerTime_Time
}

type EffectUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param         *User2Param    `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=14" json:"param,omitempty"`
	Effecttype    *EEffectType   `protobuf:"varint,3,opt,name=effecttype,enum=Cmd.EEffectType,def=1" json:"effecttype,omitempty"`
	Charid        *uint64        `protobuf:"varint,4,opt,name=charid" json:"charid,omitempty"`
	Effectpos     *uint32        `protobuf:"varint,5,opt,name=effectpos" json:"effectpos,omitempty"`
	Pos           *ScenePos      `protobuf:"bytes,6,opt,name=pos" json:"pos,omitempty"`
	Effect        *string        `protobuf:"bytes,7,opt,name=effect" json:"effect,omitempty"`
	Msec          *uint32        `protobuf:"varint,8,opt,name=msec,def=0" json:"msec,omitempty"`
	Times         *uint32        `protobuf:"varint,9,opt,name=times,def=1" json:"times,omitempty"`
	Index         *uint32        `protobuf:"varint,10,opt,name=index,def=1" json:"index,omitempty"`
	Opt           *EEffectOpt    `protobuf:"varint,11,opt,name=opt,enum=Cmd.EEffectOpt,def=1" json:"opt,omitempty"`
	Posbind       *bool          `protobuf:"varint,12,opt,name=posbind,def=0" json:"posbind,omitempty"`
	Epbind        *bool          `protobuf:"varint,13,opt,name=epbind,def=0" json:"epbind,omitempty"`
	Delay         *uint32        `protobuf:"varint,14,opt,name=delay,def=0" json:"delay,omitempty"`
	Id            *uint64        `protobuf:"varint,15,opt,name=id,def=0" json:"id,omitempty"`
	Dir           *uint32        `protobuf:"varint,16,opt,name=dir" json:"dir,omitempty"`
	Skillid       *uint32        `protobuf:"varint,17,opt,name=skillid,def=0" json:"skillid,omitempty"`
	Ignorenavmesh *bool          `protobuf:"varint,18,opt,name=ignorenavmesh,def=0" json:"ignorenavmesh,omitempty"`
	Filterid      *uint32        `protobuf:"varint,19,opt,name=filterid,def=0" json:"filterid,omitempty"`
	Scale         *float32       `protobuf:"fixed32,20,opt,name=scale,def=0" json:"scale,omitempty"`
	Dir3D         *ScenePos      `protobuf:"bytes,21,opt,name=dir3d" json:"dir3d,omitempty"`
	Source        *EEffectSource `protobuf:"varint,22,opt,name=source,enum=Cmd.EEffectSource" json:"source,omitempty"`
}

// Default values for EffectUserCmd fields.
const (
	Default_EffectUserCmd_Cmd           = Command_SCENE_USER2_PROTOCMD
	Default_EffectUserCmd_Param         = User2Param_USER2PARAM_EFFECT
	Default_EffectUserCmd_Effecttype    = EEffectType_EEFFECTTYPE_NORMAL
	Default_EffectUserCmd_Msec          = uint32(0)
	Default_EffectUserCmd_Times         = uint32(1)
	Default_EffectUserCmd_Index         = uint32(1)
	Default_EffectUserCmd_Opt           = EEffectOpt_EEFFECTOPT_PLAY
	Default_EffectUserCmd_Posbind       = bool(false)
	Default_EffectUserCmd_Epbind        = bool(false)
	Default_EffectUserCmd_Delay         = uint32(0)
	Default_EffectUserCmd_Id            = uint64(0)
	Default_EffectUserCmd_Skillid       = uint32(0)
	Default_EffectUserCmd_Ignorenavmesh = bool(false)
	Default_EffectUserCmd_Filterid      = uint32(0)
	Default_EffectUserCmd_Scale         = float32(0)
)

func (x *EffectUserCmd) Reset() {
	*x = EffectUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffectUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectUserCmd) ProtoMessage() {}

func (x *EffectUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectUserCmd.ProtoReflect.Descriptor instead.
func (*EffectUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{14}
}

func (x *EffectUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EffectUserCmd_Cmd
}

func (x *EffectUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EffectUserCmd_Param
}

func (x *EffectUserCmd) GetEffecttype() EEffectType {
	if x != nil && x.Effecttype != nil {
		return *x.Effecttype
	}
	return Default_EffectUserCmd_Effecttype
}

func (x *EffectUserCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *EffectUserCmd) GetEffectpos() uint32 {
	if x != nil && x.Effectpos != nil {
		return *x.Effectpos
	}
	return 0
}

func (x *EffectUserCmd) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *EffectUserCmd) GetEffect() string {
	if x != nil && x.Effect != nil {
		return *x.Effect
	}
	return ""
}

func (x *EffectUserCmd) GetMsec() uint32 {
	if x != nil && x.Msec != nil {
		return *x.Msec
	}
	return Default_EffectUserCmd_Msec
}

func (x *EffectUserCmd) GetTimes() uint32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return Default_EffectUserCmd_Times
}

func (x *EffectUserCmd) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_EffectUserCmd_Index
}

func (x *EffectUserCmd) GetOpt() EEffectOpt {
	if x != nil && x.Opt != nil {
		return *x.Opt
	}
	return Default_EffectUserCmd_Opt
}

func (x *EffectUserCmd) GetPosbind() bool {
	if x != nil && x.Posbind != nil {
		return *x.Posbind
	}
	return Default_EffectUserCmd_Posbind
}

func (x *EffectUserCmd) GetEpbind() bool {
	if x != nil && x.Epbind != nil {
		return *x.Epbind
	}
	return Default_EffectUserCmd_Epbind
}

func (x *EffectUserCmd) GetDelay() uint32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return Default_EffectUserCmd_Delay
}

func (x *EffectUserCmd) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_EffectUserCmd_Id
}

func (x *EffectUserCmd) GetDir() uint32 {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return 0
}

func (x *EffectUserCmd) GetSkillid() uint32 {
	if x != nil && x.Skillid != nil {
		return *x.Skillid
	}
	return Default_EffectUserCmd_Skillid
}

func (x *EffectUserCmd) GetIgnorenavmesh() bool {
	if x != nil && x.Ignorenavmesh != nil {
		return *x.Ignorenavmesh
	}
	return Default_EffectUserCmd_Ignorenavmesh
}

func (x *EffectUserCmd) GetFilterid() uint32 {
	if x != nil && x.Filterid != nil {
		return *x.Filterid
	}
	return Default_EffectUserCmd_Filterid
}

func (x *EffectUserCmd) GetScale() float32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return Default_EffectUserCmd_Scale
}

func (x *EffectUserCmd) GetDir3D() *ScenePos {
	if x != nil {
		return x.Dir3D
	}
	return nil
}

func (x *EffectUserCmd) GetSource() EEffectSource {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return EEffectSource_EEFFECTSOURCE_MIN
}

type MenuList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=15" json:"param,omitempty"`
	List    []uint32    `protobuf:"varint,3,rep,name=list" json:"list,omitempty"`
	Dellist []uint32    `protobuf:"varint,4,rep,name=dellist" json:"dellist,omitempty"`
}

// Default values for MenuList fields.
const (
	Default_MenuList_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_MenuList_Param = User2Param_USER2PARAM_MENU
)

func (x *MenuList) Reset() {
	*x = MenuList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenuList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuList) ProtoMessage() {}

func (x *MenuList) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuList.ProtoReflect.Descriptor instead.
func (*MenuList) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{15}
}

func (x *MenuList) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MenuList_Cmd
}

func (x *MenuList) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MenuList_Param
}

func (x *MenuList) GetList() []uint32 {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MenuList) GetDellist() []uint32 {
	if x != nil {
		return x.Dellist
	}
	return nil
}

type NewMenu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=16" json:"param,omitempty"`
	Animplay *bool       `protobuf:"varint,3,opt,name=animplay,def=1" json:"animplay,omitempty"`
	List     []uint32    `protobuf:"varint,4,rep,name=list" json:"list,omitempty"`
}

// Default values for NewMenu fields.
const (
	Default_NewMenu_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_NewMenu_Param    = User2Param_USER2PARAM_NEWMENU
	Default_NewMenu_Animplay = bool(true)
)

func (x *NewMenu) Reset() {
	*x = NewMenu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMenu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMenu) ProtoMessage() {}

func (x *NewMenu) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMenu.ProtoReflect.Descriptor instead.
func (*NewMenu) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{16}
}

func (x *NewMenu) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NewMenu_Cmd
}

func (x *NewMenu) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NewMenu_Param
}

func (x *NewMenu) GetAnimplay() bool {
	if x != nil && x.Animplay != nil {
		return *x.Animplay
	}
	return Default_NewMenu_Animplay
}

func (x *NewMenu) GetList() []uint32 {
	if x != nil {
		return x.List
	}
	return nil
}

type EvaluationReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=232" json:"param,omitempty"`
	Menuid *uint32     `protobuf:"varint,3,opt,name=menuid" json:"menuid,omitempty"`
}

// Default values for EvaluationReward fields.
const (
	Default_EvaluationReward_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_EvaluationReward_Param = User2Param_USER2PARAM_EVALUATION_REWARD
)

func (x *EvaluationReward) Reset() {
	*x = EvaluationReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationReward) ProtoMessage() {}

func (x *EvaluationReward) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationReward.ProtoReflect.Descriptor instead.
func (*EvaluationReward) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{17}
}

func (x *EvaluationReward) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EvaluationReward_Cmd
}

func (x *EvaluationReward) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EvaluationReward_Param
}

func (x *EvaluationReward) GetMenuid() uint32 {
	if x != nil && x.Menuid != nil {
		return *x.Menuid
	}
	return 0
}

type TeamInfoNine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=17" json:"param,omitempty"`
	Userid *uint64     `protobuf:"varint,3,opt,name=userid,def=0" json:"userid,omitempty"`
	Id     *uint32     `protobuf:"varint,4,opt,name=id,def=0" json:"id,omitempty"`
	Name   *string     `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

// Default values for TeamInfoNine fields.
const (
	Default_TeamInfoNine_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_TeamInfoNine_Param  = User2Param_USER2PARAM_TEAMINFONINE
	Default_TeamInfoNine_Userid = uint64(0)
	Default_TeamInfoNine_Id     = uint32(0)
)

func (x *TeamInfoNine) Reset() {
	*x = TeamInfoNine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamInfoNine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamInfoNine) ProtoMessage() {}

func (x *TeamInfoNine) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamInfoNine.ProtoReflect.Descriptor instead.
func (*TeamInfoNine) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{18}
}

func (x *TeamInfoNine) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamInfoNine_Cmd
}

func (x *TeamInfoNine) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamInfoNine_Param
}

func (x *TeamInfoNine) GetUserid() uint64 {
	if x != nil && x.Userid != nil {
		return *x.Userid
	}
	return Default_TeamInfoNine_Userid
}

func (x *TeamInfoNine) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_TeamInfoNine_Id
}

func (x *TeamInfoNine) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type UsePortrait struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=18" json:"param,omitempty"`
	Id    *uint32     `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
}

// Default values for UsePortrait fields.
const (
	Default_UsePortrait_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_UsePortrait_Param = User2Param_USER2PARAM_USEPORTRAIT
	Default_UsePortrait_Id    = uint32(0)
)

func (x *UsePortrait) Reset() {
	*x = UsePortrait{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsePortrait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsePortrait) ProtoMessage() {}

func (x *UsePortrait) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsePortrait.ProtoReflect.Descriptor instead.
func (*UsePortrait) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{19}
}

func (x *UsePortrait) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UsePortrait_Cmd
}

func (x *UsePortrait) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UsePortrait_Param
}

func (x *UsePortrait) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_UsePortrait_Id
}

type UseFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=19" json:"param,omitempty"`
	Id    *uint32     `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
}

// Default values for UseFrame fields.
const (
	Default_UseFrame_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_UseFrame_Param = User2Param_USER2PARAM_USEFRAME
	Default_UseFrame_Id    = uint32(0)
)

func (x *UseFrame) Reset() {
	*x = UseFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseFrame) ProtoMessage() {}

func (x *UseFrame) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseFrame.ProtoReflect.Descriptor instead.
func (*UseFrame) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{20}
}

func (x *UseFrame) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UseFrame_Cmd
}

func (x *UseFrame) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UseFrame_Param
}

func (x *UseFrame) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_UseFrame_Id
}

type NewPortraitFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=20" json:"param,omitempty"`
	Portrait []uint32    `protobuf:"varint,3,rep,name=portrait" json:"portrait,omitempty"`
	Frame    []uint32    `protobuf:"varint,4,rep,name=frame" json:"frame,omitempty"`
}

// Default values for NewPortraitFrame fields.
const (
	Default_NewPortraitFrame_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_NewPortraitFrame_Param = User2Param_USER2PARAM_NEWPORTRAITFRAME
)

func (x *NewPortraitFrame) Reset() {
	*x = NewPortraitFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPortraitFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPortraitFrame) ProtoMessage() {}

func (x *NewPortraitFrame) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPortraitFrame.ProtoReflect.Descriptor instead.
func (*NewPortraitFrame) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{21}
}

func (x *NewPortraitFrame) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NewPortraitFrame_Cmd
}

func (x *NewPortraitFrame) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NewPortraitFrame_Param
}

func (x *NewPortraitFrame) GetPortrait() []uint32 {
	if x != nil {
		return x.Portrait
	}
	return nil
}

func (x *NewPortraitFrame) GetFrame() []uint32 {
	if x != nil {
		return x.Frame
	}
	return nil
}

type QueryPortraitListUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=24" json:"param,omitempty"`
	Portrait []uint32    `protobuf:"varint,3,rep,name=portrait" json:"portrait,omitempty"`
}

// Default values for QueryPortraitListUserCmd fields.
const (
	Default_QueryPortraitListUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_QueryPortraitListUserCmd_Param = User2Param_USER2PARAM_QUERYPORTRAITLIST
)

func (x *QueryPortraitListUserCmd) Reset() {
	*x = QueryPortraitListUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPortraitListUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPortraitListUserCmd) ProtoMessage() {}

func (x *QueryPortraitListUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPortraitListUserCmd.ProtoReflect.Descriptor instead.
func (*QueryPortraitListUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{22}
}

func (x *QueryPortraitListUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryPortraitListUserCmd_Cmd
}

func (x *QueryPortraitListUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryPortraitListUserCmd_Param
}

func (x *QueryPortraitListUserCmd) GetPortrait() []uint32 {
	if x != nil {
		return x.Portrait
	}
	return nil
}

type UseDressing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=25" json:"param,omitempty"`
	Id     *uint32     `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Charid *uint64     `protobuf:"varint,4,opt,name=charid,def=0" json:"charid,omitempty"`
	Type   *EDressType `protobuf:"varint,5,opt,name=type,enum=Cmd.EDressType,def=0" json:"type,omitempty"`
}

// Default values for UseDressing fields.
const (
	Default_UseDressing_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_UseDressing_Param  = User2Param_USER2PARAM_USEDRESSING
	Default_UseDressing_Id     = uint32(0)
	Default_UseDressing_Charid = uint64(0)
	Default_UseDressing_Type   = EDressType_EDRESSTYPE_MIN
)

func (x *UseDressing) Reset() {
	*x = UseDressing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseDressing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseDressing) ProtoMessage() {}

func (x *UseDressing) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseDressing.ProtoReflect.Descriptor instead.
func (*UseDressing) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{23}
}

func (x *UseDressing) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UseDressing_Cmd
}

func (x *UseDressing) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UseDressing_Param
}

func (x *UseDressing) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_UseDressing_Id
}

func (x *UseDressing) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_UseDressing_Charid
}

func (x *UseDressing) GetType() EDressType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_UseDressing_Type
}

type NewDressing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=26" json:"param,omitempty"`
	Type     *EDressType `protobuf:"varint,3,opt,name=type,enum=Cmd.EDressType,def=0" json:"type,omitempty"`
	Dressids []uint32    `protobuf:"varint,4,rep,name=dressids" json:"dressids,omitempty"`
}

// Default values for NewDressing fields.
const (
	Default_NewDressing_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_NewDressing_Param = User2Param_USER2PARAM_NEWDRESSING
	Default_NewDressing_Type  = EDressType_EDRESSTYPE_MIN
)

func (x *NewDressing) Reset() {
	*x = NewDressing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDressing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDressing) ProtoMessage() {}

func (x *NewDressing) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDressing.ProtoReflect.Descriptor instead.
func (*NewDressing) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{24}
}

func (x *NewDressing) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NewDressing_Cmd
}

func (x *NewDressing) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NewDressing_Param
}

func (x *NewDressing) GetType() EDressType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_NewDressing_Type
}

func (x *NewDressing) GetDressids() []uint32 {
	if x != nil {
		return x.Dressids
	}
	return nil
}

type DressingListUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=27" json:"param,omitempty"`
	Type     *EDressType `protobuf:"varint,3,opt,name=type,enum=Cmd.EDressType,def=0" json:"type,omitempty"`
	Dressids []uint32    `protobuf:"varint,4,rep,name=dressids" json:"dressids,omitempty"`
}

// Default values for DressingListUserCmd fields.
const (
	Default_DressingListUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_DressingListUserCmd_Param = User2Param_USER2PARAM_DRESSINGLIST
	Default_DressingListUserCmd_Type  = EDressType_EDRESSTYPE_MIN
)

func (x *DressingListUserCmd) Reset() {
	*x = DressingListUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DressingListUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DressingListUserCmd) ProtoMessage() {}

func (x *DressingListUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DressingListUserCmd.ProtoReflect.Descriptor instead.
func (*DressingListUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{25}
}

func (x *DressingListUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DressingListUserCmd_Cmd
}

func (x *DressingListUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DressingListUserCmd_Param
}

func (x *DressingListUserCmd) GetType() EDressType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_DressingListUserCmd_Type
}

func (x *DressingListUserCmd) GetDressids() []uint32 {
	if x != nil {
		return x.Dressids
	}
	return nil
}

type AddAttrPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=21" json:"param,omitempty"`
	Type     *PointType  `protobuf:"varint,3,opt,name=type,enum=Cmd.PointType,def=1" json:"type,omitempty"`
	Strpoint *uint32     `protobuf:"varint,4,opt,name=strpoint,def=0" json:"strpoint,omitempty"`
	Intpoint *uint32     `protobuf:"varint,5,opt,name=intpoint,def=0" json:"intpoint,omitempty"`
	Agipoint *uint32     `protobuf:"varint,6,opt,name=agipoint,def=0" json:"agipoint,omitempty"`
	Dexpoint *uint32     `protobuf:"varint,7,opt,name=dexpoint,def=0" json:"dexpoint,omitempty"`
	Vitpoint *uint32     `protobuf:"varint,8,opt,name=vitpoint,def=0" json:"vitpoint,omitempty"`
	Lukpoint *uint32     `protobuf:"varint,9,opt,name=lukpoint,def=0" json:"lukpoint,omitempty"`
}

// Default values for AddAttrPoint fields.
const (
	Default_AddAttrPoint_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_AddAttrPoint_Param    = User2Param_USER2PARAM_ADDATTRPOINT
	Default_AddAttrPoint_Type     = PointType_POINTTYPE_ADD
	Default_AddAttrPoint_Strpoint = uint32(0)
	Default_AddAttrPoint_Intpoint = uint32(0)
	Default_AddAttrPoint_Agipoint = uint32(0)
	Default_AddAttrPoint_Dexpoint = uint32(0)
	Default_AddAttrPoint_Vitpoint = uint32(0)
	Default_AddAttrPoint_Lukpoint = uint32(0)
)

func (x *AddAttrPoint) Reset() {
	*x = AddAttrPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAttrPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAttrPoint) ProtoMessage() {}

func (x *AddAttrPoint) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAttrPoint.ProtoReflect.Descriptor instead.
func (*AddAttrPoint) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{26}
}

func (x *AddAttrPoint) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AddAttrPoint_Cmd
}

func (x *AddAttrPoint) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AddAttrPoint_Param
}

func (x *AddAttrPoint) GetType() PointType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_AddAttrPoint_Type
}

func (x *AddAttrPoint) GetStrpoint() uint32 {
	if x != nil && x.Strpoint != nil {
		return *x.Strpoint
	}
	return Default_AddAttrPoint_Strpoint
}

func (x *AddAttrPoint) GetIntpoint() uint32 {
	if x != nil && x.Intpoint != nil {
		return *x.Intpoint
	}
	return Default_AddAttrPoint_Intpoint
}

func (x *AddAttrPoint) GetAgipoint() uint32 {
	if x != nil && x.Agipoint != nil {
		return *x.Agipoint
	}
	return Default_AddAttrPoint_Agipoint
}

func (x *AddAttrPoint) GetDexpoint() uint32 {
	if x != nil && x.Dexpoint != nil {
		return *x.Dexpoint
	}
	return Default_AddAttrPoint_Dexpoint
}

func (x *AddAttrPoint) GetVitpoint() uint32 {
	if x != nil && x.Vitpoint != nil {
		return *x.Vitpoint
	}
	return Default_AddAttrPoint_Vitpoint
}

func (x *AddAttrPoint) GetLukpoint() uint32 {
	if x != nil && x.Lukpoint != nil {
		return *x.Lukpoint
	}
	return Default_AddAttrPoint_Lukpoint
}

type ShopGotItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Count *uint32 `protobuf:"varint,2,opt,name=count,def=0" json:"count,omitempty"`
}

// Default values for ShopGotItem fields.
const (
	Default_ShopGotItem_Id    = uint32(0)
	Default_ShopGotItem_Count = uint32(0)
)

func (x *ShopGotItem) Reset() {
	*x = ShopGotItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopGotItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopGotItem) ProtoMessage() {}

func (x *ShopGotItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopGotItem.ProtoReflect.Descriptor instead.
func (*ShopGotItem) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{27}
}

func (x *ShopGotItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_ShopGotItem_Id
}

func (x *ShopGotItem) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_ShopGotItem_Count
}

type QueryShopGotItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param         *User2Param    `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=22" json:"param,omitempty"`
	Items         []*ShopGotItem `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	Discountitems []*ShopGotItem `protobuf:"bytes,4,rep,name=discountitems" json:"discountitems,omitempty"`
	Limititems    []*ShopGotItem `protobuf:"bytes,5,rep,name=limititems" json:"limititems,omitempty"`
	Addlimits     []*ShopGotItem `protobuf:"bytes,6,rep,name=addlimits" json:"addlimits,omitempty"`
}

// Default values for QueryShopGotItem fields.
const (
	Default_QueryShopGotItem_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_QueryShopGotItem_Param = User2Param_USER2PARAM_QUERYSHOPGOTITEM
)

func (x *QueryShopGotItem) Reset() {
	*x = QueryShopGotItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryShopGotItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryShopGotItem) ProtoMessage() {}

func (x *QueryShopGotItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryShopGotItem.ProtoReflect.Descriptor instead.
func (*QueryShopGotItem) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{28}
}

func (x *QueryShopGotItem) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryShopGotItem_Cmd
}

func (x *QueryShopGotItem) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryShopGotItem_Param
}

func (x *QueryShopGotItem) GetItems() []*ShopGotItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *QueryShopGotItem) GetDiscountitems() []*ShopGotItem {
	if x != nil {
		return x.Discountitems
	}
	return nil
}

func (x *QueryShopGotItem) GetLimititems() []*ShopGotItem {
	if x != nil {
		return x.Limititems
	}
	return nil
}

func (x *QueryShopGotItem) GetAddlimits() []*ShopGotItem {
	if x != nil {
		return x.Addlimits
	}
	return nil
}

type UpdateShopGotItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param        *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=23" json:"param,omitempty"`
	Item         *ShopGotItem `protobuf:"bytes,3,opt,name=item" json:"item,omitempty"`
	Discountitem *ShopGotItem `protobuf:"bytes,4,opt,name=discountitem" json:"discountitem,omitempty"`
	Limititem    *ShopGotItem `protobuf:"bytes,5,opt,name=limititem" json:"limititem,omitempty"`
	Addlimit     *ShopGotItem `protobuf:"bytes,6,opt,name=addlimit" json:"addlimit,omitempty"`
}

// Default values for UpdateShopGotItem fields.
const (
	Default_UpdateShopGotItem_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_UpdateShopGotItem_Param = User2Param_USER2PARAM_UPDATESHOPGOTITEM
)

func (x *UpdateShopGotItem) Reset() {
	*x = UpdateShopGotItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateShopGotItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShopGotItem) ProtoMessage() {}

func (x *UpdateShopGotItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShopGotItem.ProtoReflect.Descriptor instead.
func (*UpdateShopGotItem) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateShopGotItem) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateShopGotItem_Cmd
}

func (x *UpdateShopGotItem) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateShopGotItem_Param
}

func (x *UpdateShopGotItem) GetItem() *ShopGotItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *UpdateShopGotItem) GetDiscountitem() *ShopGotItem {
	if x != nil {
		return x.Discountitem
	}
	return nil
}

func (x *UpdateShopGotItem) GetLimititem() *ShopGotItem {
	if x != nil {
		return x.Limititem
	}
	return nil
}

func (x *UpdateShopGotItem) GetAddlimit() *ShopGotItem {
	if x != nil {
		return x.Addlimit
	}
	return nil
}

type OpenUI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=29" json:"param,omitempty"`
	Id    *uint32     `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Ui    *uint32     `protobuf:"varint,4,opt,name=ui,def=0" json:"ui,omitempty"`
}

// Default values for OpenUI fields.
const (
	Default_OpenUI_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_OpenUI_Param = User2Param_USER2PARAM_OPENUI
	Default_OpenUI_Id    = uint32(0)
	Default_OpenUI_Ui    = uint32(0)
)

func (x *OpenUI) Reset() {
	*x = OpenUI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenUI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenUI) ProtoMessage() {}

func (x *OpenUI) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenUI.ProtoReflect.Descriptor instead.
func (*OpenUI) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{30}
}

func (x *OpenUI) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_OpenUI_Cmd
}

func (x *OpenUI) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_OpenUI_Param
}

func (x *OpenUI) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_OpenUI_Id
}

func (x *OpenUI) GetUi() uint32 {
	if x != nil && x.Ui != nil {
		return *x.Ui
	}
	return Default_OpenUI_Ui
}

type DbgSysMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=30" json:"param,omitempty"`
	Type    *EDbgMsgType `protobuf:"varint,3,req,name=type,enum=Cmd.EDbgMsgType,def=0" json:"type,omitempty"`
	Content *string      `protobuf:"bytes,4,req,name=content" json:"content,omitempty"`
}

// Default values for DbgSysMsg fields.
const (
	Default_DbgSysMsg_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_DbgSysMsg_Param = User2Param_USER2PARAM_DBGSYSMSG
	Default_DbgSysMsg_Type  = EDbgMsgType_EDBGMSGTYPE_MIN
)

func (x *DbgSysMsg) Reset() {
	*x = DbgSysMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbgSysMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbgSysMsg) ProtoMessage() {}

func (x *DbgSysMsg) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbgSysMsg.ProtoReflect.Descriptor instead.
func (*DbgSysMsg) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{31}
}

func (x *DbgSysMsg) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DbgSysMsg_Cmd
}

func (x *DbgSysMsg) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DbgSysMsg_Param
}

func (x *DbgSysMsg) GetType() EDbgMsgType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_DbgSysMsg_Type
}

func (x *DbgSysMsg) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

type FollowTransferCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=32" json:"param,omitempty"`
	TargetId *uint64     `protobuf:"varint,3,opt,name=targetId" json:"targetId,omitempty"`
}

// Default values for FollowTransferCmd fields.
const (
	Default_FollowTransferCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_FollowTransferCmd_Param = User2Param_USER2PARAM_FOLLOWTRANSFER
)

func (x *FollowTransferCmd) Reset() {
	*x = FollowTransferCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowTransferCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowTransferCmd) ProtoMessage() {}

func (x *FollowTransferCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowTransferCmd.ProtoReflect.Descriptor instead.
func (*FollowTransferCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{32}
}

func (x *FollowTransferCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FollowTransferCmd_Cmd
}

func (x *FollowTransferCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FollowTransferCmd_Param
}

func (x *FollowTransferCmd) GetTargetId() uint64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

type CallNpcFuncCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=33" json:"param,omitempty"`
	Type     *uint32     `protobuf:"varint,3,opt,name=type,def=0" json:"type,omitempty"`
	Funparam *string     `protobuf:"bytes,4,opt,name=funparam" json:"funparam,omitempty"`
}

// Default values for CallNpcFuncCmd fields.
const (
	Default_CallNpcFuncCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_CallNpcFuncCmd_Param = User2Param_USER2PARAM_NPCFUNC
	Default_CallNpcFuncCmd_Type  = uint32(0)
)

func (x *CallNpcFuncCmd) Reset() {
	*x = CallNpcFuncCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallNpcFuncCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallNpcFuncCmd) ProtoMessage() {}

func (x *CallNpcFuncCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallNpcFuncCmd.ProtoReflect.Descriptor instead.
func (*CallNpcFuncCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{33}
}

func (x *CallNpcFuncCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CallNpcFuncCmd_Cmd
}

func (x *CallNpcFuncCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CallNpcFuncCmd_Param
}

func (x *CallNpcFuncCmd) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CallNpcFuncCmd_Type
}

func (x *CallNpcFuncCmd) GetFunparam() string {
	if x != nil && x.Funparam != nil {
		return *x.Funparam
	}
	return ""
}

type ModelShow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=34" json:"param,omitempty"`
	Type  *uint32     `protobuf:"varint,3,opt,name=type,def=0" json:"type,omitempty"`
	Data  *string     `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

// Default values for ModelShow fields.
const (
	Default_ModelShow_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ModelShow_Param = User2Param_USER2PARAM_MODELSHOW
	Default_ModelShow_Type  = uint32(0)
)

func (x *ModelShow) Reset() {
	*x = ModelShow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelShow) ProtoMessage() {}

func (x *ModelShow) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelShow.ProtoReflect.Descriptor instead.
func (*ModelShow) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{34}
}

func (x *ModelShow) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ModelShow_Cmd
}

func (x *ModelShow) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ModelShow_Param
}

func (x *ModelShow) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ModelShow_Type
}

func (x *ModelShow) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

type SoundEffectCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=35" json:"param,omitempty"`
	Se    *string     `protobuf:"bytes,3,opt,name=se" json:"se,omitempty"`
	Pos   *ScenePos   `protobuf:"bytes,4,opt,name=pos" json:"pos,omitempty"`
	Msec  *uint32     `protobuf:"varint,5,opt,name=msec,def=0" json:"msec,omitempty"`
	Times *uint32     `protobuf:"varint,6,opt,name=times,def=1" json:"times,omitempty"`
	Delay *uint32     `protobuf:"varint,7,opt,name=delay,def=0" json:"delay,omitempty"`
}

// Default values for SoundEffectCmd fields.
const (
	Default_SoundEffectCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_SoundEffectCmd_Param = User2Param_USER2PARAM_SOUNDEFFECT
	Default_SoundEffectCmd_Msec  = uint32(0)
	Default_SoundEffectCmd_Times = uint32(1)
	Default_SoundEffectCmd_Delay = uint32(0)
)

func (x *SoundEffectCmd) Reset() {
	*x = SoundEffectCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoundEffectCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundEffectCmd) ProtoMessage() {}

func (x *SoundEffectCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundEffectCmd.ProtoReflect.Descriptor instead.
func (*SoundEffectCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{35}
}

func (x *SoundEffectCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SoundEffectCmd_Cmd
}

func (x *SoundEffectCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SoundEffectCmd_Param
}

func (x *SoundEffectCmd) GetSe() string {
	if x != nil && x.Se != nil {
		return *x.Se
	}
	return ""
}

func (x *SoundEffectCmd) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SoundEffectCmd) GetMsec() uint32 {
	if x != nil && x.Msec != nil {
		return *x.Msec
	}
	return Default_SoundEffectCmd_Msec
}

func (x *SoundEffectCmd) GetTimes() uint32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return Default_SoundEffectCmd_Times
}

func (x *SoundEffectCmd) GetDelay() uint32 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return Default_SoundEffectCmd_Delay
}

type PresetMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msgid *uint32 `protobuf:"varint,1,opt,name=msgid,def=0" json:"msgid,omitempty"`
	Msg   *string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

// Default values for PresetMsg fields.
const (
	Default_PresetMsg_Msgid = uint32(0)
)

func (x *PresetMsg) Reset() {
	*x = PresetMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresetMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresetMsg) ProtoMessage() {}

func (x *PresetMsg) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresetMsg.ProtoReflect.Descriptor instead.
func (*PresetMsg) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{36}
}

func (x *PresetMsg) GetMsgid() uint32 {
	if x != nil && x.Msgid != nil {
		return *x.Msgid
	}
	return Default_PresetMsg_Msgid
}

func (x *PresetMsg) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

type PresetMsgCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=36" json:"param,omitempty"`
	Msgs  []string    `protobuf:"bytes,3,rep,name=msgs" json:"msgs,omitempty"`
}

// Default values for PresetMsgCmd fields.
const (
	Default_PresetMsgCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_PresetMsgCmd_Param = User2Param_USER2PARAM_PRESETCHATMSG
)

func (x *PresetMsgCmd) Reset() {
	*x = PresetMsgCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresetMsgCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresetMsgCmd) ProtoMessage() {}

func (x *PresetMsgCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresetMsgCmd.ProtoReflect.Descriptor instead.
func (*PresetMsgCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{37}
}

func (x *PresetMsgCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PresetMsgCmd_Cmd
}

func (x *PresetMsgCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PresetMsgCmd_Param
}

func (x *PresetMsgCmd) GetMsgs() []string {
	if x != nil {
		return x.Msgs
	}
	return nil
}

type ChangeBgmCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=37" json:"param,omitempty"`
	Bgm   *string     `protobuf:"bytes,3,opt,name=bgm" json:"bgm,omitempty"`
	Play  *bool       `protobuf:"varint,4,opt,name=play,def=1" json:"play,omitempty"`
	Times *uint32     `protobuf:"varint,5,opt,name=times,def=0" json:"times,omitempty"`
	Type  *EBgmType   `protobuf:"varint,6,opt,name=type,enum=Cmd.EBgmType" json:"type,omitempty"`
}

// Default values for ChangeBgmCmd fields.
const (
	Default_ChangeBgmCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ChangeBgmCmd_Param = User2Param_USER2PARAM_CHANGEBGM
	Default_ChangeBgmCmd_Play  = bool(true)
	Default_ChangeBgmCmd_Times = uint32(0)
)

func (x *ChangeBgmCmd) Reset() {
	*x = ChangeBgmCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeBgmCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeBgmCmd) ProtoMessage() {}

func (x *ChangeBgmCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeBgmCmd.ProtoReflect.Descriptor instead.
func (*ChangeBgmCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{38}
}

func (x *ChangeBgmCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChangeBgmCmd_Cmd
}

func (x *ChangeBgmCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChangeBgmCmd_Param
}

func (x *ChangeBgmCmd) GetBgm() string {
	if x != nil && x.Bgm != nil {
		return *x.Bgm
	}
	return ""
}

func (x *ChangeBgmCmd) GetPlay() bool {
	if x != nil && x.Play != nil {
		return *x.Play
	}
	return Default_ChangeBgmCmd_Play
}

func (x *ChangeBgmCmd) GetTimes() uint32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return Default_ChangeBgmCmd_Times
}

func (x *ChangeBgmCmd) GetType() EBgmType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EBgmType_EBGM_TYPE_QUEST
}

type FighterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*UserData `protobuf:"bytes,1,rep,name=datas" json:"datas,omitempty"`
	Attrs []*UserAttr `protobuf:"bytes,2,rep,name=attrs" json:"attrs,omitempty"`
}

func (x *FighterInfo) Reset() {
	*x = FighterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FighterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FighterInfo) ProtoMessage() {}

func (x *FighterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FighterInfo.ProtoReflect.Descriptor instead.
func (*FighterInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{39}
}

func (x *FighterInfo) GetDatas() []*UserData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *FighterInfo) GetAttrs() []*UserAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type QueryFighterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param    `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=38" json:"param,omitempty"`
	Fighters []*FighterInfo `protobuf:"bytes,3,rep,name=fighters" json:"fighters,omitempty"`
}

// Default values for QueryFighterInfo fields.
const (
	Default_QueryFighterInfo_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_QueryFighterInfo_Param = User2Param_USER2PARAM_QUERYFIGHTERINFO
)

func (x *QueryFighterInfo) Reset() {
	*x = QueryFighterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFighterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFighterInfo) ProtoMessage() {}

func (x *QueryFighterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFighterInfo.ProtoReflect.Descriptor instead.
func (*QueryFighterInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{40}
}

func (x *QueryFighterInfo) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryFighterInfo_Cmd
}

func (x *QueryFighterInfo) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryFighterInfo_Param
}

func (x *QueryFighterInfo) GetFighters() []*FighterInfo {
	if x != nil {
		return x.Fighters
	}
	return nil
}

type GameTimeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=40" json:"param,omitempty"`
	Opt   *GameTimeOpt `protobuf:"varint,3,opt,name=opt,enum=Cmd.GameTimeOpt,def=1" json:"opt,omitempty"`
	Sec   *uint32      `protobuf:"varint,4,opt,name=sec,def=1" json:"sec,omitempty"`
	Speed *uint32      `protobuf:"varint,5,opt,name=speed,def=1" json:"speed,omitempty"`
}

// Default values for GameTimeCmd fields.
const (
	Default_GameTimeCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_GameTimeCmd_Param = User2Param_USER2PARAM_GAMETIME
	Default_GameTimeCmd_Opt   = GameTimeOpt_EGAMETIMEOPT_SYNC
	Default_GameTimeCmd_Sec   = uint32(1)
	Default_GameTimeCmd_Speed = uint32(1)
)

func (x *GameTimeCmd) Reset() {
	*x = GameTimeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameTimeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameTimeCmd) ProtoMessage() {}

func (x *GameTimeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameTimeCmd.ProtoReflect.Descriptor instead.
func (*GameTimeCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{41}
}

func (x *GameTimeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GameTimeCmd_Cmd
}

func (x *GameTimeCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GameTimeCmd_Param
}

func (x *GameTimeCmd) GetOpt() GameTimeOpt {
	if x != nil && x.Opt != nil {
		return *x.Opt
	}
	return Default_GameTimeCmd_Opt
}

func (x *GameTimeCmd) GetSec() uint32 {
	if x != nil && x.Sec != nil {
		return *x.Sec
	}
	return Default_GameTimeCmd_Sec
}

func (x *GameTimeCmd) GetSpeed() uint32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return Default_GameTimeCmd_Speed
}

type CDTimeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Time      *uint64  `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Type      *CD_TYPE `protobuf:"varint,3,opt,name=type,enum=Cmd.CD_TYPE" json:"type,omitempty"`
	Lefttimes *uint32  `protobuf:"varint,4,opt,name=lefttimes" json:"lefttimes,omitempty"`
	Maxtimes  *uint32  `protobuf:"varint,5,opt,name=maxtimes" json:"maxtimes,omitempty"`
	Cd        *uint32  `protobuf:"varint,6,opt,name=cd" json:"cd,omitempty"`
	Coldtime  *uint64  `protobuf:"varint,7,opt,name=coldtime" json:"coldtime,omitempty"`
}

func (x *CDTimeItem) Reset() {
	*x = CDTimeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDTimeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDTimeItem) ProtoMessage() {}

func (x *CDTimeItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDTimeItem.ProtoReflect.Descriptor instead.
func (*CDTimeItem) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{42}
}

func (x *CDTimeItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CDTimeItem) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CDTimeItem) GetType() CD_TYPE {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CD_TYPE_CD_TYPE_SKILL
}

func (x *CDTimeItem) GetLefttimes() uint32 {
	if x != nil && x.Lefttimes != nil {
		return *x.Lefttimes
	}
	return 0
}

func (x *CDTimeItem) GetMaxtimes() uint32 {
	if x != nil && x.Maxtimes != nil {
		return *x.Maxtimes
	}
	return 0
}

func (x *CDTimeItem) GetCd() uint32 {
	if x != nil && x.Cd != nil {
		return *x.Cd
	}
	return 0
}

func (x *CDTimeItem) GetColdtime() uint64 {
	if x != nil && x.Coldtime != nil {
		return *x.Coldtime
	}
	return 0
}

type CDTimeUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param   `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=41" json:"param,omitempty"`
	List  []*CDTimeItem `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Isall *bool         `protobuf:"varint,4,opt,name=isall" json:"isall,omitempty"`
}

// Default values for CDTimeUserCmd fields.
const (
	Default_CDTimeUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_CDTimeUserCmd_Param = User2Param_USER2PARAM_CDTIME
)

func (x *CDTimeUserCmd) Reset() {
	*x = CDTimeUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDTimeUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDTimeUserCmd) ProtoMessage() {}

func (x *CDTimeUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDTimeUserCmd.ProtoReflect.Descriptor instead.
func (*CDTimeUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{43}
}

func (x *CDTimeUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CDTimeUserCmd_Cmd
}

func (x *CDTimeUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CDTimeUserCmd_Param
}

func (x *CDTimeUserCmd) GetList() []*CDTimeItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CDTimeUserCmd) GetIsall() bool {
	if x != nil && x.Isall != nil {
		return *x.Isall
	}
	return false
}

type StateChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param      `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=42" json:"param,omitempty"`
	Status *ECreatureStatus `protobuf:"varint,3,opt,name=status,enum=Cmd.ECreatureStatus,def=0" json:"status,omitempty"`
}

// Default values for StateChange fields.
const (
	Default_StateChange_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_StateChange_Param  = User2Param_USER2PARAM_STATECHANGE
	Default_StateChange_Status = ECreatureStatus_ECREATURESTATUS_MIN
)

func (x *StateChange) Reset() {
	*x = StateChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateChange) ProtoMessage() {}

func (x *StateChange) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateChange.ProtoReflect.Descriptor instead.
func (*StateChange) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{44}
}

func (x *StateChange) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StateChange_Cmd
}

func (x *StateChange) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StateChange_Param
}

func (x *StateChange) GetStatus() ECreatureStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_StateChange_Status
}

type Photo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=44" json:"param,omitempty"`
	Guid  *uint64     `protobuf:"varint,3,opt,name=guid,def=0" json:"guid,omitempty"`
}

// Default values for Photo fields.
const (
	Default_Photo_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_Photo_Param = User2Param_USER2PARAM_PHOTO
	Default_Photo_Guid  = uint64(0)
)

func (x *Photo) Reset() {
	*x = Photo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Photo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Photo) ProtoMessage() {}

func (x *Photo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Photo.ProtoReflect.Descriptor instead.
func (*Photo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{45}
}

func (x *Photo) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_Photo_Cmd
}

func (x *Photo) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_Photo_Param
}

func (x *Photo) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_Photo_Guid
}

type ShakeScreen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param        *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=45" json:"param,omitempty"`
	Maxamplitude *uint32     `protobuf:"varint,3,opt,name=maxamplitude,def=3" json:"maxamplitude,omitempty"`
	Msec         *uint32     `protobuf:"varint,4,opt,name=msec,def=0" json:"msec,omitempty"`
	Shaketype    *uint32     `protobuf:"varint,5,opt,name=shaketype,def=1" json:"shaketype,omitempty"`
}

// Default values for ShakeScreen fields.
const (
	Default_ShakeScreen_Cmd          = Command_SCENE_USER2_PROTOCMD
	Default_ShakeScreen_Param        = User2Param_USER2PARAM_SHAKESCREEN
	Default_ShakeScreen_Maxamplitude = uint32(3)
	Default_ShakeScreen_Msec         = uint32(0)
	Default_ShakeScreen_Shaketype    = uint32(1)
)

func (x *ShakeScreen) Reset() {
	*x = ShakeScreen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShakeScreen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShakeScreen) ProtoMessage() {}

func (x *ShakeScreen) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShakeScreen.ProtoReflect.Descriptor instead.
func (*ShakeScreen) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{46}
}

func (x *ShakeScreen) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ShakeScreen_Cmd
}

func (x *ShakeScreen) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ShakeScreen_Param
}

func (x *ShakeScreen) GetMaxamplitude() uint32 {
	if x != nil && x.Maxamplitude != nil {
		return *x.Maxamplitude
	}
	return Default_ShakeScreen_Maxamplitude
}

func (x *ShakeScreen) GetMsec() uint32 {
	if x != nil && x.Msec != nil {
		return *x.Msec
	}
	return Default_ShakeScreen_Msec
}

func (x *ShakeScreen) GetShaketype() uint32 {
	if x != nil && x.Shaketype != nil {
		return *x.Shaketype
	}
	return Default_ShakeScreen_Shaketype
}

type ShortcutItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid *string `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	Type *uint32 `protobuf:"varint,2,opt,name=type,def=0" json:"type,omitempty"`
	Pos  *uint32 `protobuf:"varint,3,opt,name=pos,def=0" json:"pos,omitempty"`
}

// Default values for ShortcutItem fields.
const (
	Default_ShortcutItem_Type = uint32(0)
	Default_ShortcutItem_Pos  = uint32(0)
)

func (x *ShortcutItem) Reset() {
	*x = ShortcutItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortcutItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortcutItem) ProtoMessage() {}

func (x *ShortcutItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortcutItem.ProtoReflect.Descriptor instead.
func (*ShortcutItem) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{47}
}

func (x *ShortcutItem) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *ShortcutItem) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ShortcutItem_Type
}

func (x *ShortcutItem) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return Default_ShortcutItem_Pos
}

type QueryShortcut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param     `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=47" json:"param,omitempty"`
	List  []*ShortcutItem `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
}

// Default values for QueryShortcut fields.
const (
	Default_QueryShortcut_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_QueryShortcut_Param = User2Param_USER2PARAM_QUERYSHORTCUT
)

func (x *QueryShortcut) Reset() {
	*x = QueryShortcut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryShortcut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryShortcut) ProtoMessage() {}

func (x *QueryShortcut) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryShortcut.ProtoReflect.Descriptor instead.
func (*QueryShortcut) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{48}
}

func (x *QueryShortcut) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryShortcut_Cmd
}

func (x *QueryShortcut) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryShortcut_Param
}

func (x *QueryShortcut) GetList() []*ShortcutItem {
	if x != nil {
		return x.List
	}
	return nil
}

type PutShortcut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param   `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=48" json:"param,omitempty"`
	Item  *ShortcutItem `protobuf:"bytes,3,opt,name=item" json:"item,omitempty"`
}

// Default values for PutShortcut fields.
const (
	Default_PutShortcut_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_PutShortcut_Param = User2Param_USER2PARAM_PUTSHORTCUT
)

func (x *PutShortcut) Reset() {
	*x = PutShortcut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutShortcut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutShortcut) ProtoMessage() {}

func (x *PutShortcut) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutShortcut.ProtoReflect.Descriptor instead.
func (*PutShortcut) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{49}
}

func (x *PutShortcut) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PutShortcut_Cmd
}

func (x *PutShortcut) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PutShortcut_Param
}

func (x *PutShortcut) GetItem() *ShortcutItem {
	if x != nil {
		return x.Item
	}
	return nil
}

type TempPutShortCut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param   `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=180" json:"param,omitempty"`
	Origin  *ShortcutItem `protobuf:"bytes,3,opt,name=origin" json:"origin,omitempty"`
	Changed *ShortcutItem `protobuf:"bytes,4,opt,name=changed" json:"changed,omitempty"`
}

// Default values for TempPutShortCut fields.
const (
	Default_TempPutShortCut_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_TempPutShortCut_Param = User2Param_USER2PARAM_TEMP_PUT_SHORTCUT
)

func (x *TempPutShortCut) Reset() {
	*x = TempPutShortCut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempPutShortCut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempPutShortCut) ProtoMessage() {}

func (x *TempPutShortCut) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempPutShortCut.ProtoReflect.Descriptor instead.
func (*TempPutShortCut) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{50}
}

func (x *TempPutShortCut) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TempPutShortCut_Cmd
}

func (x *TempPutShortCut) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TempPutShortCut_Param
}

func (x *TempPutShortCut) GetOrigin() *ShortcutItem {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *TempPutShortCut) GetChanged() *ShortcutItem {
	if x != nil {
		return x.Changed
	}
	return nil
}

type NpcChangeAngle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=49" json:"param,omitempty"`
	Guid     *uint64     `protobuf:"varint,3,opt,name=guid,def=0" json:"guid,omitempty"`
	Targetid *uint64     `protobuf:"varint,4,opt,name=targetid,def=0" json:"targetid,omitempty"`
	Angle    *uint32     `protobuf:"varint,5,opt,name=angle,def=0" json:"angle,omitempty"`
}

// Default values for NpcChangeAngle fields.
const (
	Default_NpcChangeAngle_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_NpcChangeAngle_Param    = User2Param_USER2PARAM_NPCANGLE
	Default_NpcChangeAngle_Guid     = uint64(0)
	Default_NpcChangeAngle_Targetid = uint64(0)
	Default_NpcChangeAngle_Angle    = uint32(0)
)

func (x *NpcChangeAngle) Reset() {
	*x = NpcChangeAngle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpcChangeAngle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpcChangeAngle) ProtoMessage() {}

func (x *NpcChangeAngle) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpcChangeAngle.ProtoReflect.Descriptor instead.
func (*NpcChangeAngle) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{51}
}

func (x *NpcChangeAngle) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NpcChangeAngle_Cmd
}

func (x *NpcChangeAngle) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NpcChangeAngle_Param
}

func (x *NpcChangeAngle) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_NpcChangeAngle_Guid
}

func (x *NpcChangeAngle) GetTargetid() uint64 {
	if x != nil && x.Targetid != nil {
		return *x.Targetid
	}
	return Default_NpcChangeAngle_Targetid
}

func (x *NpcChangeAngle) GetAngle() uint32 {
	if x != nil && x.Angle != nil {
		return *x.Angle
	}
	return Default_NpcChangeAngle_Angle
}

type CameraFocus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=50" json:"param,omitempty"`
	Targets []uint64    `protobuf:"varint,3,rep,name=targets" json:"targets,omitempty"`
}

// Default values for CameraFocus fields.
const (
	Default_CameraFocus_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_CameraFocus_Param = User2Param_USER2PARAM_CAMERAFOCUS
)

func (x *CameraFocus) Reset() {
	*x = CameraFocus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraFocus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraFocus) ProtoMessage() {}

func (x *CameraFocus) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraFocus.ProtoReflect.Descriptor instead.
func (*CameraFocus) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{52}
}

func (x *CameraFocus) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CameraFocus_Cmd
}

func (x *CameraFocus) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CameraFocus_Param
}

func (x *CameraFocus) GetTargets() []uint64 {
	if x != nil {
		return x.Targets
	}
	return nil
}

type GoToListUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=51" json:"param,omitempty"`
	Mapid []uint32    `protobuf:"varint,3,rep,name=mapid" json:"mapid,omitempty"`
}

// Default values for GoToListUserCmd fields.
const (
	Default_GoToListUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_GoToListUserCmd_Param = User2Param_USER2PARAM_GOTO_LIST
)

func (x *GoToListUserCmd) Reset() {
	*x = GoToListUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoToListUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoToListUserCmd) ProtoMessage() {}

func (x *GoToListUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoToListUserCmd.ProtoReflect.Descriptor instead.
func (*GoToListUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{53}
}

func (x *GoToListUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GoToListUserCmd_Cmd
}

func (x *GoToListUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GoToListUserCmd_Param
}

func (x *GoToListUserCmd) GetMapid() []uint32 {
	if x != nil {
		return x.Mapid
	}
	return nil
}

type GoToGearUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param    `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=52" json:"param,omitempty"`
	Mapid    *uint32        `protobuf:"varint,3,opt,name=mapid" json:"mapid,omitempty"`
	Type     *EGoToGearType `protobuf:"varint,4,opt,name=type,enum=Cmd.EGoToGearType" json:"type,omitempty"`
	Otherids []uint64       `protobuf:"varint,5,rep,name=otherids" json:"otherids,omitempty"`
}

// Default values for GoToGearUserCmd fields.
const (
	Default_GoToGearUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_GoToGearUserCmd_Param = User2Param_USER2PARAM_GOTO_GEAR
)

func (x *GoToGearUserCmd) Reset() {
	*x = GoToGearUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoToGearUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoToGearUserCmd) ProtoMessage() {}

func (x *GoToGearUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoToGearUserCmd.ProtoReflect.Descriptor instead.
func (*GoToGearUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{54}
}

func (x *GoToGearUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GoToGearUserCmd_Cmd
}

func (x *GoToGearUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GoToGearUserCmd_Param
}

func (x *GoToGearUserCmd) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return 0
}

func (x *GoToGearUserCmd) GetType() EGoToGearType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EGoToGearType_EGoToGearType_Single
}

func (x *GoToGearUserCmd) GetOtherids() []uint64 {
	if x != nil {
		return x.Otherids
	}
	return nil
}

type NewTransMapCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=12" json:"param,omitempty"`
	Mapid []uint32    `protobuf:"varint,3,rep,name=mapid" json:"mapid,omitempty"`
}

// Default values for NewTransMapCmd fields.
const (
	Default_NewTransMapCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_NewTransMapCmd_Param = User2Param_USER2PARAM_NEWTRANSMAP
)

func (x *NewTransMapCmd) Reset() {
	*x = NewTransMapCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTransMapCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTransMapCmd) ProtoMessage() {}

func (x *NewTransMapCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTransMapCmd.ProtoReflect.Descriptor instead.
func (*NewTransMapCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{55}
}

func (x *NewTransMapCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NewTransMapCmd_Cmd
}

func (x *NewTransMapCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NewTransMapCmd_Param
}

func (x *NewTransMapCmd) GetMapid() []uint32 {
	if x != nil {
		return x.Mapid
	}
	return nil
}

type DeathTransferListCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=151" json:"param,omitempty"`
	TransferId []uint32    `protobuf:"varint,3,rep,name=transferId" json:"transferId,omitempty"`
}

// Default values for DeathTransferListCmd fields.
const (
	Default_DeathTransferListCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_DeathTransferListCmd_Param = User2Param_USER2PARAM_DEATH_TRANSFER_LIST
)

func (x *DeathTransferListCmd) Reset() {
	*x = DeathTransferListCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeathTransferListCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeathTransferListCmd) ProtoMessage() {}

func (x *DeathTransferListCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeathTransferListCmd.ProtoReflect.Descriptor instead.
func (*DeathTransferListCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{56}
}

func (x *DeathTransferListCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DeathTransferListCmd_Cmd
}

func (x *DeathTransferListCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DeathTransferListCmd_Param
}

func (x *DeathTransferListCmd) GetTransferId() []uint32 {
	if x != nil {
		return x.TransferId
	}
	return nil
}

type NewDeathTransferCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=152" json:"param,omitempty"`
	TransferId *uint32     `protobuf:"varint,3,opt,name=transferId" json:"transferId,omitempty"`
	Active     *bool       `protobuf:"varint,4,opt,name=active" json:"active,omitempty"`
}

// Default values for NewDeathTransferCmd fields.
const (
	Default_NewDeathTransferCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_NewDeathTransferCmd_Param = User2Param_USER2PARAM_NEW_DEATH_TRANSFER
)

func (x *NewDeathTransferCmd) Reset() {
	*x = NewDeathTransferCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDeathTransferCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDeathTransferCmd) ProtoMessage() {}

func (x *NewDeathTransferCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDeathTransferCmd.ProtoReflect.Descriptor instead.
func (*NewDeathTransferCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{57}
}

func (x *NewDeathTransferCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NewDeathTransferCmd_Cmd
}

func (x *NewDeathTransferCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NewDeathTransferCmd_Param
}

func (x *NewDeathTransferCmd) GetTransferId() uint32 {
	if x != nil && x.TransferId != nil {
		return *x.TransferId
	}
	return 0
}

func (x *NewDeathTransferCmd) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

type UseDeathTransferCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param          *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=153" json:"param,omitempty"`
	FromTransferId *uint32     `protobuf:"varint,3,opt,name=fromTransferId" json:"fromTransferId,omitempty"`
	ToTransferId   *uint32     `protobuf:"varint,4,opt,name=toTransferId" json:"toTransferId,omitempty"`
}

// Default values for UseDeathTransferCmd fields.
const (
	Default_UseDeathTransferCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_UseDeathTransferCmd_Param = User2Param_USER2PARAM_TRANSFER
)

func (x *UseDeathTransferCmd) Reset() {
	*x = UseDeathTransferCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseDeathTransferCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseDeathTransferCmd) ProtoMessage() {}

func (x *UseDeathTransferCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseDeathTransferCmd.ProtoReflect.Descriptor instead.
func (*UseDeathTransferCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{58}
}

func (x *UseDeathTransferCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UseDeathTransferCmd_Cmd
}

func (x *UseDeathTransferCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UseDeathTransferCmd_Param
}

func (x *UseDeathTransferCmd) GetFromTransferId() uint32 {
	if x != nil && x.FromTransferId != nil {
		return *x.FromTransferId
	}
	return 0
}

func (x *UseDeathTransferCmd) GetToTransferId() uint32 {
	if x != nil && x.ToTransferId != nil {
		return *x.ToTransferId
	}
	return 0
}

type FollowerUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=53" json:"param,omitempty"`
	Userid *uint64      `protobuf:"varint,3,opt,name=userid,def=0" json:"userid,omitempty"`
	EType  *EFollowType `protobuf:"varint,4,opt,name=eType,enum=Cmd.EFollowType,def=0" json:"eType,omitempty"`
}

// Default values for FollowerUser fields.
const (
	Default_FollowerUser_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_FollowerUser_Param  = User2Param_USER2PARAM_FOLLOWER
	Default_FollowerUser_Userid = uint64(0)
	Default_FollowerUser_EType  = EFollowType_EFOLLOWTYPE_MIN
)

func (x *FollowerUser) Reset() {
	*x = FollowerUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowerUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowerUser) ProtoMessage() {}

func (x *FollowerUser) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowerUser.ProtoReflect.Descriptor instead.
func (*FollowerUser) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{59}
}

func (x *FollowerUser) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FollowerUser_Cmd
}

func (x *FollowerUser) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FollowerUser_Param
}

func (x *FollowerUser) GetUserid() uint64 {
	if x != nil && x.Userid != nil {
		return *x.Userid
	}
	return Default_FollowerUser_Userid
}

func (x *FollowerUser) GetEType() EFollowType {
	if x != nil && x.EType != nil {
		return *x.EType
	}
	return Default_FollowerUser_EType
}

type BeFollowUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=96" json:"param,omitempty"`
	Userid *uint64      `protobuf:"varint,3,opt,name=userid,def=0" json:"userid,omitempty"`
	EType  *EFollowType `protobuf:"varint,4,opt,name=eType,enum=Cmd.EFollowType,def=0" json:"eType,omitempty"`
}

// Default values for BeFollowUserCmd fields.
const (
	Default_BeFollowUserCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_BeFollowUserCmd_Param  = User2Param_USER2PARAM_BEFOLLOW
	Default_BeFollowUserCmd_Userid = uint64(0)
	Default_BeFollowUserCmd_EType  = EFollowType_EFOLLOWTYPE_MIN
)

func (x *BeFollowUserCmd) Reset() {
	*x = BeFollowUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeFollowUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeFollowUserCmd) ProtoMessage() {}

func (x *BeFollowUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeFollowUserCmd.ProtoReflect.Descriptor instead.
func (*BeFollowUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{60}
}

func (x *BeFollowUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BeFollowUserCmd_Cmd
}

func (x *BeFollowUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BeFollowUserCmd_Param
}

func (x *BeFollowUserCmd) GetUserid() uint64 {
	if x != nil && x.Userid != nil {
		return *x.Userid
	}
	return Default_BeFollowUserCmd_Userid
}

func (x *BeFollowUserCmd) GetEType() EFollowType {
	if x != nil && x.EType != nil {
		return *x.EType
	}
	return Default_BeFollowUserCmd_EType
}

type LaboratoryUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=54" json:"param,omitempty"`
	Round    *uint32     `protobuf:"varint,3,opt,name=round,def=0" json:"round,omitempty"`
	Curscore *uint32     `protobuf:"varint,4,opt,name=curscore,def=0" json:"curscore,omitempty"`
	Maxscore *uint32     `protobuf:"varint,5,opt,name=maxscore,def=0" json:"maxscore,omitempty"`
}

// Default values for LaboratoryUserCmd fields.
const (
	Default_LaboratoryUserCmd_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_LaboratoryUserCmd_Param    = User2Param_USER2PARAM_LABORATORY
	Default_LaboratoryUserCmd_Round    = uint32(0)
	Default_LaboratoryUserCmd_Curscore = uint32(0)
	Default_LaboratoryUserCmd_Maxscore = uint32(0)
)

func (x *LaboratoryUserCmd) Reset() {
	*x = LaboratoryUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaboratoryUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaboratoryUserCmd) ProtoMessage() {}

func (x *LaboratoryUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaboratoryUserCmd.ProtoReflect.Descriptor instead.
func (*LaboratoryUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{61}
}

func (x *LaboratoryUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LaboratoryUserCmd_Cmd
}

func (x *LaboratoryUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LaboratoryUserCmd_Param
}

func (x *LaboratoryUserCmd) GetRound() uint32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return Default_LaboratoryUserCmd_Round
}

func (x *LaboratoryUserCmd) GetCurscore() uint32 {
	if x != nil && x.Curscore != nil {
		return *x.Curscore
	}
	return Default_LaboratoryUserCmd_Curscore
}

func (x *LaboratoryUserCmd) GetMaxscore() uint32 {
	if x != nil && x.Maxscore != nil {
		return *x.Maxscore
	}
	return Default_LaboratoryUserCmd_Maxscore
}

type GotoLaboratoryUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=57" json:"param,omitempty"`
	Funid *uint32     `protobuf:"varint,3,opt,name=funid" json:"funid,omitempty"`
}

// Default values for GotoLaboratoryUserCmd fields.
const (
	Default_GotoLaboratoryUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_GotoLaboratoryUserCmd_Param = User2Param_USER2PARAM_GOTO_LABORATORY
)

func (x *GotoLaboratoryUserCmd) Reset() {
	*x = GotoLaboratoryUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GotoLaboratoryUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GotoLaboratoryUserCmd) ProtoMessage() {}

func (x *GotoLaboratoryUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GotoLaboratoryUserCmd.ProtoReflect.Descriptor instead.
func (*GotoLaboratoryUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{62}
}

func (x *GotoLaboratoryUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GotoLaboratoryUserCmd_Cmd
}

func (x *GotoLaboratoryUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GotoLaboratoryUserCmd_Param
}

func (x *GotoLaboratoryUserCmd) GetFunid() uint32 {
	if x != nil && x.Funid != nil {
		return *x.Funid
	}
	return 0
}

type ExchangeProfession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param          `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=56" json:"param,omitempty"`
	Guid       *uint64              `protobuf:"varint,3,opt,name=guid,def=0" json:"guid,omitempty"`
	Datas      []*UserData          `protobuf:"bytes,4,rep,name=datas" json:"datas,omitempty"`
	Attrs      []*UserAttr          `protobuf:"bytes,5,rep,name=attrs" json:"attrs,omitempty"`
	Pointattrs []*UserAttr          `protobuf:"bytes,6,rep,name=pointattrs" json:"pointattrs,omitempty"`
	Type       *EProfessionDataType `protobuf:"varint,7,opt,name=type,enum=Cmd.EProfessionDataType,def=0" json:"type,omitempty"`
}

// Default values for ExchangeProfession fields.
const (
	Default_ExchangeProfession_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ExchangeProfession_Param = User2Param_USER2PARAM_EXCHANGEPROFESSION
	Default_ExchangeProfession_Guid  = uint64(0)
	Default_ExchangeProfession_Type  = EProfessionDataType_ETypeAdvance
)

func (x *ExchangeProfession) Reset() {
	*x = ExchangeProfession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeProfession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeProfession) ProtoMessage() {}

func (x *ExchangeProfession) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeProfession.ProtoReflect.Descriptor instead.
func (*ExchangeProfession) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{63}
}

func (x *ExchangeProfession) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExchangeProfession_Cmd
}

func (x *ExchangeProfession) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExchangeProfession_Param
}

func (x *ExchangeProfession) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_ExchangeProfession_Guid
}

func (x *ExchangeProfession) GetDatas() []*UserData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *ExchangeProfession) GetAttrs() []*UserAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *ExchangeProfession) GetPointattrs() []*UserAttr {
	if x != nil {
		return x.Pointattrs
	}
	return nil
}

func (x *ExchangeProfession) GetType() EProfessionDataType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ExchangeProfession_Type
}

type Scenery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sceneryid *uint32 `protobuf:"varint,1,opt,name=sceneryid,def=0" json:"sceneryid,omitempty"`
	Anglez    *uint32 `protobuf:"varint,2,opt,name=anglez,def=0" json:"anglez,omitempty"`
	Charid    *uint64 `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
}

// Default values for Scenery fields.
const (
	Default_Scenery_Sceneryid = uint32(0)
	Default_Scenery_Anglez    = uint32(0)
	Default_Scenery_Charid    = uint64(0)
)

func (x *Scenery) Reset() {
	*x = Scenery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scenery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scenery) ProtoMessage() {}

func (x *Scenery) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scenery.ProtoReflect.Descriptor instead.
func (*Scenery) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{64}
}

func (x *Scenery) GetSceneryid() uint32 {
	if x != nil && x.Sceneryid != nil {
		return *x.Sceneryid
	}
	return Default_Scenery_Sceneryid
}

func (x *Scenery) GetAnglez() uint32 {
	if x != nil && x.Anglez != nil {
		return *x.Anglez
	}
	return Default_Scenery_Anglez
}

func (x *Scenery) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_Scenery_Charid
}

type SceneryUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=58" json:"param,omitempty"`
	Mapid    *uint32     `protobuf:"varint,3,opt,name=mapid,def=0" json:"mapid,omitempty"`
	Scenerys []*Scenery  `protobuf:"bytes,4,rep,name=scenerys" json:"scenerys,omitempty"`
}

// Default values for SceneryUserCmd fields.
const (
	Default_SceneryUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_SceneryUserCmd_Param = User2Param_USER2PARAM_SCENERY
	Default_SceneryUserCmd_Mapid = uint32(0)
)

func (x *SceneryUserCmd) Reset() {
	*x = SceneryUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneryUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneryUserCmd) ProtoMessage() {}

func (x *SceneryUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneryUserCmd.ProtoReflect.Descriptor instead.
func (*SceneryUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{65}
}

func (x *SceneryUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SceneryUserCmd_Cmd
}

func (x *SceneryUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SceneryUserCmd_Param
}

func (x *SceneryUserCmd) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_SceneryUserCmd_Mapid
}

func (x *SceneryUserCmd) GetScenerys() []*Scenery {
	if x != nil {
		return x.Scenerys
	}
	return nil
}

type GoMapQuestUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=59" json:"param,omitempty"`
	Questid *uint32     `protobuf:"varint,3,opt,name=questid,def=0" json:"questid,omitempty"`
}

// Default values for GoMapQuestUserCmd fields.
const (
	Default_GoMapQuestUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_GoMapQuestUserCmd_Param   = User2Param_USER2PARAM_GOMAP_QUEST
	Default_GoMapQuestUserCmd_Questid = uint32(0)
)

func (x *GoMapQuestUserCmd) Reset() {
	*x = GoMapQuestUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoMapQuestUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoMapQuestUserCmd) ProtoMessage() {}

func (x *GoMapQuestUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoMapQuestUserCmd.ProtoReflect.Descriptor instead.
func (*GoMapQuestUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{66}
}

func (x *GoMapQuestUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GoMapQuestUserCmd_Cmd
}

func (x *GoMapQuestUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GoMapQuestUserCmd_Param
}

func (x *GoMapQuestUserCmd) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return Default_GoMapQuestUserCmd_Questid
}

type GoMapFollowUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=60" json:"param,omitempty"`
	Mapid  *uint32     `protobuf:"varint,3,opt,name=mapid,def=0" json:"mapid,omitempty"`
	Charid *uint64     `protobuf:"varint,4,opt,name=charid,def=0" json:"charid,omitempty"`
}

// Default values for GoMapFollowUserCmd fields.
const (
	Default_GoMapFollowUserCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_GoMapFollowUserCmd_Param  = User2Param_USER2PARAM_GOMAP_FOLLOW
	Default_GoMapFollowUserCmd_Mapid  = uint32(0)
	Default_GoMapFollowUserCmd_Charid = uint64(0)
)

func (x *GoMapFollowUserCmd) Reset() {
	*x = GoMapFollowUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoMapFollowUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoMapFollowUserCmd) ProtoMessage() {}

func (x *GoMapFollowUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoMapFollowUserCmd.ProtoReflect.Descriptor instead.
func (*GoMapFollowUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{67}
}

func (x *GoMapFollowUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GoMapFollowUserCmd_Cmd
}

func (x *GoMapFollowUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GoMapFollowUserCmd_Param
}

func (x *GoMapFollowUserCmd) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_GoMapFollowUserCmd_Mapid
}

func (x *GoMapFollowUserCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_GoMapFollowUserCmd_Charid
}

type UserAutoHitCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=61" json:"param,omitempty"`
	Charid *uint64     `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
}

// Default values for UserAutoHitCmd fields.
const (
	Default_UserAutoHitCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_UserAutoHitCmd_Param  = User2Param_USER2PARAM_AUTOHIT
	Default_UserAutoHitCmd_Charid = uint64(0)
)

func (x *UserAutoHitCmd) Reset() {
	*x = UserAutoHitCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAutoHitCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAutoHitCmd) ProtoMessage() {}

func (x *UserAutoHitCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAutoHitCmd.ProtoReflect.Descriptor instead.
func (*UserAutoHitCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{68}
}

func (x *UserAutoHitCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserAutoHitCmd_Cmd
}

func (x *UserAutoHitCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserAutoHitCmd_Param
}

func (x *UserAutoHitCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_UserAutoHitCmd_Charid
}

type UploadSceneryPhotoUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=62" json:"param,omitempty"`
	Type      *EAlbumType `protobuf:"varint,3,opt,name=type,enum=Cmd.EAlbumType,def=1" json:"type,omitempty"`
	Sceneryid *uint32     `protobuf:"varint,4,opt,name=sceneryid" json:"sceneryid,omitempty"`
	Policy    *string     `protobuf:"bytes,5,opt,name=policy" json:"policy,omitempty"`
	Signature *string     `protobuf:"bytes,6,opt,name=signature" json:"signature,omitempty"`
}

// Default values for UploadSceneryPhotoUserCmd fields.
const (
	Default_UploadSceneryPhotoUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_UploadSceneryPhotoUserCmd_Param = User2Param_USER2PARAM_UPLOAD_SCENERY_PHOTO
	Default_UploadSceneryPhotoUserCmd_Type  = EAlbumType_EALBUMTYPE_SCENERY
)

func (x *UploadSceneryPhotoUserCmd) Reset() {
	*x = UploadSceneryPhotoUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadSceneryPhotoUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSceneryPhotoUserCmd) ProtoMessage() {}

func (x *UploadSceneryPhotoUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSceneryPhotoUserCmd.ProtoReflect.Descriptor instead.
func (*UploadSceneryPhotoUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{69}
}

func (x *UploadSceneryPhotoUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UploadSceneryPhotoUserCmd_Cmd
}

func (x *UploadSceneryPhotoUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UploadSceneryPhotoUserCmd_Param
}

func (x *UploadSceneryPhotoUserCmd) GetType() EAlbumType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_UploadSceneryPhotoUserCmd_Type
}

func (x *UploadSceneryPhotoUserCmd) GetSceneryid() uint32 {
	if x != nil && x.Sceneryid != nil {
		return *x.Sceneryid
	}
	return 0
}

func (x *UploadSceneryPhotoUserCmd) GetPolicy() string {
	if x != nil && x.Policy != nil {
		return *x.Policy
	}
	return ""
}

func (x *UploadSceneryPhotoUserCmd) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

type UpyunUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *EAlbumType `protobuf:"varint,1,opt,name=type,enum=Cmd.EAlbumType,def=1" json:"type,omitempty"`
	CharUrl *string     `protobuf:"bytes,2,opt,name=char_url,json=charUrl" json:"char_url,omitempty"`
	AccUrl  *string     `protobuf:"bytes,3,opt,name=acc_url,json=accUrl" json:"acc_url,omitempty"`
}

// Default values for UpyunUrl fields.
const (
	Default_UpyunUrl_Type = EAlbumType_EALBUMTYPE_SCENERY
)

func (x *UpyunUrl) Reset() {
	*x = UpyunUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpyunUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpyunUrl) ProtoMessage() {}

func (x *UpyunUrl) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpyunUrl.ProtoReflect.Descriptor instead.
func (*UpyunUrl) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{70}
}

func (x *UpyunUrl) GetType() EAlbumType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_UpyunUrl_Type
}

func (x *UpyunUrl) GetCharUrl() string {
	if x != nil && x.CharUrl != nil {
		return *x.CharUrl
	}
	return ""
}

func (x *UpyunUrl) GetAccUrl() string {
	if x != nil && x.AccUrl != nil {
		return *x.AccUrl
	}
	return ""
}

type DownloadSceneryPhotoUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=80" json:"param,omitempty"`
	Urls  []*UpyunUrl `protobuf:"bytes,3,rep,name=urls" json:"urls,omitempty"`
}

// Default values for DownloadSceneryPhotoUserCmd fields.
const (
	Default_DownloadSceneryPhotoUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_DownloadSceneryPhotoUserCmd_Param = User2Param_USER2PARAM_DOWNLOAD_SCENERY_PHOTO
)

func (x *DownloadSceneryPhotoUserCmd) Reset() {
	*x = DownloadSceneryPhotoUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadSceneryPhotoUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadSceneryPhotoUserCmd) ProtoMessage() {}

func (x *DownloadSceneryPhotoUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadSceneryPhotoUserCmd.ProtoReflect.Descriptor instead.
func (*DownloadSceneryPhotoUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{71}
}

func (x *DownloadSceneryPhotoUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DownloadSceneryPhotoUserCmd_Cmd
}

func (x *DownloadSceneryPhotoUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DownloadSceneryPhotoUserCmd_Param
}

func (x *DownloadSceneryPhotoUserCmd) GetUrls() []*UpyunUrl {
	if x != nil {
		return x.Urls
	}
	return nil
}

type QueryMapArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=63" json:"param,omitempty"`
	Areas []uint32    `protobuf:"varint,3,rep,name=areas" json:"areas,omitempty"`
}

// Default values for QueryMapArea fields.
const (
	Default_QueryMapArea_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_QueryMapArea_Param = User2Param_USER2PARAM_QUERY_MAPAREA
)

func (x *QueryMapArea) Reset() {
	*x = QueryMapArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMapArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMapArea) ProtoMessage() {}

func (x *QueryMapArea) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMapArea.ProtoReflect.Descriptor instead.
func (*QueryMapArea) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{72}
}

func (x *QueryMapArea) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryMapArea_Cmd
}

func (x *QueryMapArea) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryMapArea_Param
}

func (x *QueryMapArea) GetAreas() []uint32 {
	if x != nil {
		return x.Areas
	}
	return nil
}

type NewMapAreaNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=64" json:"param,omitempty"`
	Area  *uint32     `protobuf:"varint,3,opt,name=area,def=0" json:"area,omitempty"`
}

// Default values for NewMapAreaNtf fields.
const (
	Default_NewMapAreaNtf_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_NewMapAreaNtf_Param = User2Param_USER2PARAM_NEW_MAPAREA
	Default_NewMapAreaNtf_Area  = uint32(0)
)

func (x *NewMapAreaNtf) Reset() {
	*x = NewMapAreaNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMapAreaNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMapAreaNtf) ProtoMessage() {}

func (x *NewMapAreaNtf) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMapAreaNtf.ProtoReflect.Descriptor instead.
func (*NewMapAreaNtf) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{73}
}

func (x *NewMapAreaNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NewMapAreaNtf_Cmd
}

func (x *NewMapAreaNtf) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NewMapAreaNtf_Param
}

func (x *NewMapAreaNtf) GetArea() uint32 {
	if x != nil && x.Area != nil {
		return *x.Area
	}
	return Default_NewMapAreaNtf_Area
}

type BuffForeverCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param   `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=66" json:"param,omitempty"`
	Buff  []*BufferData `protobuf:"bytes,3,rep,name=buff" json:"buff,omitempty"`
}

// Default values for BuffForeverCmd fields.
const (
	Default_BuffForeverCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_BuffForeverCmd_Param = User2Param_USER2PARAM_FOREVER_BUFF
)

func (x *BuffForeverCmd) Reset() {
	*x = BuffForeverCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuffForeverCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffForeverCmd) ProtoMessage() {}

func (x *BuffForeverCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffForeverCmd.ProtoReflect.Descriptor instead.
func (*BuffForeverCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{74}
}

func (x *BuffForeverCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuffForeverCmd_Cmd
}

func (x *BuffForeverCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuffForeverCmd_Param
}

func (x *BuffForeverCmd) GetBuff() []*BufferData {
	if x != nil {
		return x.Buff
	}
	return nil
}

type InviteJoinHandsUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=67" json:"param,omitempty"`
	Charid     *uint64     `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Masterid   *uint64     `protobuf:"varint,4,opt,name=masterid,def=0" json:"masterid,omitempty"`
	Time       *uint32     `protobuf:"varint,5,opt,name=time,def=0" json:"time,omitempty"`
	Mastername *string     `protobuf:"bytes,6,opt,name=mastername" json:"mastername,omitempty"`
	Sign       []byte      `protobuf:"bytes,7,opt,name=sign" json:"sign,omitempty"`
}

// Default values for InviteJoinHandsUserCmd fields.
const (
	Default_InviteJoinHandsUserCmd_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_InviteJoinHandsUserCmd_Param    = User2Param_USER2PARAM_INVITE_JOIN_HANDS
	Default_InviteJoinHandsUserCmd_Charid   = uint64(0)
	Default_InviteJoinHandsUserCmd_Masterid = uint64(0)
	Default_InviteJoinHandsUserCmd_Time     = uint32(0)
)

func (x *InviteJoinHandsUserCmd) Reset() {
	*x = InviteJoinHandsUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteJoinHandsUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteJoinHandsUserCmd) ProtoMessage() {}

func (x *InviteJoinHandsUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteJoinHandsUserCmd.ProtoReflect.Descriptor instead.
func (*InviteJoinHandsUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{75}
}

func (x *InviteJoinHandsUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InviteJoinHandsUserCmd_Cmd
}

func (x *InviteJoinHandsUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InviteJoinHandsUserCmd_Param
}

func (x *InviteJoinHandsUserCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_InviteJoinHandsUserCmd_Charid
}

func (x *InviteJoinHandsUserCmd) GetMasterid() uint64 {
	if x != nil && x.Masterid != nil {
		return *x.Masterid
	}
	return Default_InviteJoinHandsUserCmd_Masterid
}

func (x *InviteJoinHandsUserCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_InviteJoinHandsUserCmd_Time
}

func (x *InviteJoinHandsUserCmd) GetMastername() string {
	if x != nil && x.Mastername != nil {
		return *x.Mastername
	}
	return ""
}

func (x *InviteJoinHandsUserCmd) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

type BreakUpHandsUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=68" json:"param,omitempty"`
}

// Default values for BreakUpHandsUserCmd fields.
const (
	Default_BreakUpHandsUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_BreakUpHandsUserCmd_Param = User2Param_USER2PARAM_BREAK_UP_HANDS
)

func (x *BreakUpHandsUserCmd) Reset() {
	*x = BreakUpHandsUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakUpHandsUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakUpHandsUserCmd) ProtoMessage() {}

func (x *BreakUpHandsUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakUpHandsUserCmd.ProtoReflect.Descriptor instead.
func (*BreakUpHandsUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{76}
}

func (x *BreakUpHandsUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BreakUpHandsUserCmd_Cmd
}

func (x *BreakUpHandsUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BreakUpHandsUserCmd_Param
}

type HandStatusUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=95" json:"param,omitempty"`
	Build    *bool       `protobuf:"varint,3,opt,name=build,def=1" json:"build,omitempty"`
	Masterid *uint64     `protobuf:"varint,4,opt,name=masterid,def=0" json:"masterid,omitempty"`
	Followid *uint64     `protobuf:"varint,5,opt,name=followid,def=0" json:"followid,omitempty"`
	Type     *uint32     `protobuf:"varint,6,opt,name=type,def=0" json:"type,omitempty"`
}

// Default values for HandStatusUserCmd fields.
const (
	Default_HandStatusUserCmd_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_HandStatusUserCmd_Param    = User2Param_USER2PARAM_HANDSTATUS
	Default_HandStatusUserCmd_Build    = bool(true)
	Default_HandStatusUserCmd_Masterid = uint64(0)
	Default_HandStatusUserCmd_Followid = uint64(0)
	Default_HandStatusUserCmd_Type     = uint32(0)
)

func (x *HandStatusUserCmd) Reset() {
	*x = HandStatusUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandStatusUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandStatusUserCmd) ProtoMessage() {}

func (x *HandStatusUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandStatusUserCmd.ProtoReflect.Descriptor instead.
func (*HandStatusUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{77}
}

func (x *HandStatusUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HandStatusUserCmd_Cmd
}

func (x *HandStatusUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HandStatusUserCmd_Param
}

func (x *HandStatusUserCmd) GetBuild() bool {
	if x != nil && x.Build != nil {
		return *x.Build
	}
	return Default_HandStatusUserCmd_Build
}

func (x *HandStatusUserCmd) GetMasterid() uint64 {
	if x != nil && x.Masterid != nil {
		return *x.Masterid
	}
	return Default_HandStatusUserCmd_Masterid
}

func (x *HandStatusUserCmd) GetFollowid() uint64 {
	if x != nil && x.Followid != nil {
		return *x.Followid
	}
	return Default_HandStatusUserCmd_Followid
}

func (x *HandStatusUserCmd) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_HandStatusUserCmd_Type
}

type QueryShow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=69" json:"param,omitempty"`
	Actionid   []uint32    `protobuf:"varint,3,rep,name=actionid" json:"actionid,omitempty"`
	Expression []uint32    `protobuf:"varint,4,rep,name=expression" json:"expression,omitempty"`
}

// Default values for QueryShow fields.
const (
	Default_QueryShow_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_QueryShow_Param = User2Param_USER2PARAM_QUERY_ACTION
)

func (x *QueryShow) Reset() {
	*x = QueryShow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryShow) ProtoMessage() {}

func (x *QueryShow) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryShow.ProtoReflect.Descriptor instead.
func (*QueryShow) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{78}
}

func (x *QueryShow) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryShow_Cmd
}

func (x *QueryShow) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryShow_Param
}

func (x *QueryShow) GetActionid() []uint32 {
	if x != nil {
		return x.Actionid
	}
	return nil
}

func (x *QueryShow) GetExpression() []uint32 {
	if x != nil {
		return x.Expression
	}
	return nil
}

type MusicItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid     *uint64 `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Demandtime *uint32 `protobuf:"varint,2,opt,name=demandtime,def=0" json:"demandtime,omitempty"`
	Mapid      *uint32 `protobuf:"varint,3,opt,name=mapid,def=0" json:"mapid,omitempty"`
	Npcid      *uint32 `protobuf:"varint,4,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Musicid    *uint32 `protobuf:"varint,5,opt,name=musicid,def=0" json:"musicid,omitempty"`
	Starttime  *uint32 `protobuf:"varint,6,opt,name=starttime,def=0" json:"starttime,omitempty"`
	Endtime    *uint32 `protobuf:"varint,7,opt,name=endtime,def=0" json:"endtime,omitempty"`
	Status     *uint32 `protobuf:"varint,8,opt,name=status,def=0" json:"status,omitempty"`
	Name       *string `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
}

// Default values for MusicItem fields.
const (
	Default_MusicItem_Charid     = uint64(0)
	Default_MusicItem_Demandtime = uint32(0)
	Default_MusicItem_Mapid      = uint32(0)
	Default_MusicItem_Npcid      = uint32(0)
	Default_MusicItem_Musicid    = uint32(0)
	Default_MusicItem_Starttime  = uint32(0)
	Default_MusicItem_Endtime    = uint32(0)
	Default_MusicItem_Status     = uint32(0)
)

func (x *MusicItem) Reset() {
	*x = MusicItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MusicItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MusicItem) ProtoMessage() {}

func (x *MusicItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MusicItem.ProtoReflect.Descriptor instead.
func (*MusicItem) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{79}
}

func (x *MusicItem) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_MusicItem_Charid
}

func (x *MusicItem) GetDemandtime() uint32 {
	if x != nil && x.Demandtime != nil {
		return *x.Demandtime
	}
	return Default_MusicItem_Demandtime
}

func (x *MusicItem) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_MusicItem_Mapid
}

func (x *MusicItem) GetNpcid() uint32 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_MusicItem_Npcid
}

func (x *MusicItem) GetMusicid() uint32 {
	if x != nil && x.Musicid != nil {
		return *x.Musicid
	}
	return Default_MusicItem_Musicid
}

func (x *MusicItem) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return Default_MusicItem_Starttime
}

func (x *MusicItem) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return Default_MusicItem_Endtime
}

func (x *MusicItem) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_MusicItem_Status
}

func (x *MusicItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type QueryMusicList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=70" json:"param,omitempty"`
	Npcid *uint64      `protobuf:"varint,3,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Items []*MusicItem `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

// Default values for QueryMusicList fields.
const (
	Default_QueryMusicList_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_QueryMusicList_Param = User2Param_USER2PARAM_MUSIC_LIST
	Default_QueryMusicList_Npcid = uint64(0)
)

func (x *QueryMusicList) Reset() {
	*x = QueryMusicList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMusicList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMusicList) ProtoMessage() {}

func (x *QueryMusicList) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMusicList.ProtoReflect.Descriptor instead.
func (*QueryMusicList) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{80}
}

func (x *QueryMusicList) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryMusicList_Cmd
}

func (x *QueryMusicList) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryMusicList_Param
}

func (x *QueryMusicList) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_QueryMusicList_Npcid
}

func (x *QueryMusicList) GetItems() []*MusicItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type DemandMusic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=71" json:"param,omitempty"`
	Npcid   *uint64     `protobuf:"varint,3,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Musicid *uint32     `protobuf:"varint,4,opt,name=musicid,def=0" json:"musicid,omitempty"`
}

// Default values for DemandMusic fields.
const (
	Default_DemandMusic_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_DemandMusic_Param   = User2Param_USER2PARAM_MUSIC_DEMAND
	Default_DemandMusic_Npcid   = uint64(0)
	Default_DemandMusic_Musicid = uint32(0)
)

func (x *DemandMusic) Reset() {
	*x = DemandMusic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemandMusic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemandMusic) ProtoMessage() {}

func (x *DemandMusic) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemandMusic.ProtoReflect.Descriptor instead.
func (*DemandMusic) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{81}
}

func (x *DemandMusic) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DemandMusic_Cmd
}

func (x *DemandMusic) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DemandMusic_Param
}

func (x *DemandMusic) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_DemandMusic_Npcid
}

func (x *DemandMusic) GetMusicid() uint32 {
	if x != nil && x.Musicid != nil {
		return *x.Musicid
	}
	return Default_DemandMusic_Musicid
}

type CloseMusicFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=72" json:"param,omitempty"`
}

// Default values for CloseMusicFrame fields.
const (
	Default_CloseMusicFrame_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_CloseMusicFrame_Param = User2Param_USER2PARAM_MUSIC_CLOSE
)

func (x *CloseMusicFrame) Reset() {
	*x = CloseMusicFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseMusicFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseMusicFrame) ProtoMessage() {}

func (x *CloseMusicFrame) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseMusicFrame.ProtoReflect.Descriptor instead.
func (*CloseMusicFrame) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{82}
}

func (x *CloseMusicFrame) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CloseMusicFrame_Cmd
}

func (x *CloseMusicFrame) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CloseMusicFrame_Param
}

type UploadOkSceneryUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=73" json:"param,omitempty"`
	Sceneryid *uint32     `protobuf:"varint,3,opt,name=sceneryid,def=0" json:"sceneryid,omitempty"`
	Status    *uint32     `protobuf:"varint,4,opt,name=status,def=0" json:"status,omitempty"`
	Anglez    *uint32     `protobuf:"varint,5,opt,name=anglez,def=0" json:"anglez,omitempty"`
	Time      *uint32     `protobuf:"varint,6,opt,name=time,def=0" json:"time,omitempty"`
}

// Default values for UploadOkSceneryUserCmd fields.
const (
	Default_UploadOkSceneryUserCmd_Cmd       = Command_SCENE_USER2_PROTOCMD
	Default_UploadOkSceneryUserCmd_Param     = User2Param_USER2PARAM_UPLOAD_OK_SCENERY
	Default_UploadOkSceneryUserCmd_Sceneryid = uint32(0)
	Default_UploadOkSceneryUserCmd_Status    = uint32(0)
	Default_UploadOkSceneryUserCmd_Anglez    = uint32(0)
	Default_UploadOkSceneryUserCmd_Time      = uint32(0)
)

func (x *UploadOkSceneryUserCmd) Reset() {
	*x = UploadOkSceneryUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadOkSceneryUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadOkSceneryUserCmd) ProtoMessage() {}

func (x *UploadOkSceneryUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadOkSceneryUserCmd.ProtoReflect.Descriptor instead.
func (*UploadOkSceneryUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{83}
}

func (x *UploadOkSceneryUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UploadOkSceneryUserCmd_Cmd
}

func (x *UploadOkSceneryUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UploadOkSceneryUserCmd_Param
}

func (x *UploadOkSceneryUserCmd) GetSceneryid() uint32 {
	if x != nil && x.Sceneryid != nil {
		return *x.Sceneryid
	}
	return Default_UploadOkSceneryUserCmd_Sceneryid
}

func (x *UploadOkSceneryUserCmd) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_UploadOkSceneryUserCmd_Status
}

func (x *UploadOkSceneryUserCmd) GetAnglez() uint32 {
	if x != nil && x.Anglez != nil {
		return *x.Anglez
	}
	return Default_UploadOkSceneryUserCmd_Anglez
}

func (x *UploadOkSceneryUserCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_UploadOkSceneryUserCmd_Time
}

type JoinHandsUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=74" json:"param,omitempty"`
	Masterid *uint64     `protobuf:"varint,3,opt,name=masterid,def=0" json:"masterid,omitempty"`
	Sign     *string     `protobuf:"bytes,4,opt,name=sign" json:"sign,omitempty"`
	Time     *uint32     `protobuf:"varint,5,opt,name=time,def=0" json:"time,omitempty"`
}

// Default values for JoinHandsUserCmd fields.
const (
	Default_JoinHandsUserCmd_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_JoinHandsUserCmd_Param    = User2Param_USER2PARAM_JOIN_HANDS
	Default_JoinHandsUserCmd_Masterid = uint64(0)
	Default_JoinHandsUserCmd_Time     = uint32(0)
)

func (x *JoinHandsUserCmd) Reset() {
	*x = JoinHandsUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinHandsUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinHandsUserCmd) ProtoMessage() {}

func (x *JoinHandsUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinHandsUserCmd.ProtoReflect.Descriptor instead.
func (*JoinHandsUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{84}
}

func (x *JoinHandsUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_JoinHandsUserCmd_Cmd
}

func (x *JoinHandsUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_JoinHandsUserCmd_Param
}

func (x *JoinHandsUserCmd) GetMasterid() uint64 {
	if x != nil && x.Masterid != nil {
		return *x.Masterid
	}
	return Default_JoinHandsUserCmd_Masterid
}

func (x *JoinHandsUserCmd) GetSign() string {
	if x != nil && x.Sign != nil {
		return *x.Sign
	}
	return ""
}

func (x *JoinHandsUserCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_JoinHandsUserCmd_Time
}

type TraceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid    *uint32 `protobuf:"varint,1,opt,name=itemid,def=0" json:"itemid,omitempty"`
	Monsterid *uint32 `protobuf:"varint,2,opt,name=monsterid,def=0" json:"monsterid,omitempty"`
}

// Default values for TraceItem fields.
const (
	Default_TraceItem_Itemid    = uint32(0)
	Default_TraceItem_Monsterid = uint32(0)
)

func (x *TraceItem) Reset() {
	*x = TraceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceItem) ProtoMessage() {}

func (x *TraceItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceItem.ProtoReflect.Descriptor instead.
func (*TraceItem) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{85}
}

func (x *TraceItem) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_TraceItem_Itemid
}

func (x *TraceItem) GetMonsterid() uint32 {
	if x != nil && x.Monsterid != nil {
		return *x.Monsterid
	}
	return Default_TraceItem_Monsterid
}

type QueryTraceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=75" json:"param,omitempty"`
	Items []*TraceItem `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for QueryTraceList fields.
const (
	Default_QueryTraceList_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_QueryTraceList_Param = User2Param_USER2PARAM_QUERY_TRACE_LIST
)

func (x *QueryTraceList) Reset() {
	*x = QueryTraceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTraceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTraceList) ProtoMessage() {}

func (x *QueryTraceList) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTraceList.ProtoReflect.Descriptor instead.
func (*QueryTraceList) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{86}
}

func (x *QueryTraceList) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryTraceList_Cmd
}

func (x *QueryTraceList) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryTraceList_Param
}

func (x *QueryTraceList) GetItems() []*TraceItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type UpdateTraceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=76" json:"param,omitempty"`
	Updates []*TraceItem `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
	Dels    []uint32     `protobuf:"varint,4,rep,name=dels" json:"dels,omitempty"`
}

// Default values for UpdateTraceList fields.
const (
	Default_UpdateTraceList_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_UpdateTraceList_Param = User2Param_USER2PARAM_UPDATE_TRACE_LIST
)

func (x *UpdateTraceList) Reset() {
	*x = UpdateTraceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTraceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTraceList) ProtoMessage() {}

func (x *UpdateTraceList) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTraceList.ProtoReflect.Descriptor instead.
func (*UpdateTraceList) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{87}
}

func (x *UpdateTraceList) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateTraceList_Cmd
}

func (x *UpdateTraceList) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateTraceList_Param
}

func (x *UpdateTraceList) GetUpdates() []*TraceItem {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *UpdateTraceList) GetDels() []uint32 {
	if x != nil {
		return x.Dels
	}
	return nil
}

type SetDirection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=77" json:"param,omitempty"`
	Dir   *uint32     `protobuf:"varint,3,opt,name=dir,def=0" json:"dir,omitempty"`
}

// Default values for SetDirection fields.
const (
	Default_SetDirection_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_SetDirection_Param = User2Param_USER2PARAM_SET_DIRECTION
	Default_SetDirection_Dir   = uint32(0)
)

func (x *SetDirection) Reset() {
	*x = SetDirection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDirection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDirection) ProtoMessage() {}

func (x *SetDirection) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDirection.ProtoReflect.Descriptor instead.
func (*SetDirection) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{88}
}

func (x *SetDirection) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SetDirection_Cmd
}

func (x *SetDirection) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SetDirection_Param
}

func (x *SetDirection) GetDir() uint32 {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return Default_SetDirection_Dir
}

type BattleTimelenUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param    `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=82" json:"param,omitempty"`
	Timelen   *uint32        `protobuf:"varint,3,opt,name=timelen,def=0" json:"timelen,omitempty"`
	Totaltime *uint32        `protobuf:"varint,4,opt,name=totaltime,def=0" json:"totaltime,omitempty"`
	Musictime *uint32        `protobuf:"varint,5,opt,name=musictime,def=0" json:"musictime,omitempty"`
	Tutortime *uint32        `protobuf:"varint,6,opt,name=tutortime,def=0" json:"tutortime,omitempty"`
	Estatus   *EBattleStatus `protobuf:"varint,7,opt,name=estatus,enum=Cmd.EBattleStatus,def=1" json:"estatus,omitempty"`
	Powertime *uint32        `protobuf:"varint,8,opt,name=powertime,def=0" json:"powertime,omitempty"`
}

// Default values for BattleTimelenUserCmd fields.
const (
	Default_BattleTimelenUserCmd_Cmd       = Command_SCENE_USER2_PROTOCMD
	Default_BattleTimelenUserCmd_Param     = User2Param_USER2PARAM_BATTLE_TIMELEN_USER_CMD
	Default_BattleTimelenUserCmd_Timelen   = uint32(0)
	Default_BattleTimelenUserCmd_Totaltime = uint32(0)
	Default_BattleTimelenUserCmd_Musictime = uint32(0)
	Default_BattleTimelenUserCmd_Tutortime = uint32(0)
	Default_BattleTimelenUserCmd_Estatus   = EBattleStatus_EBATTLESTATUS_EASY
	Default_BattleTimelenUserCmd_Powertime = uint32(0)
)

func (x *BattleTimelenUserCmd) Reset() {
	*x = BattleTimelenUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleTimelenUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleTimelenUserCmd) ProtoMessage() {}

func (x *BattleTimelenUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleTimelenUserCmd.ProtoReflect.Descriptor instead.
func (*BattleTimelenUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{89}
}

func (x *BattleTimelenUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BattleTimelenUserCmd_Cmd
}

func (x *BattleTimelenUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BattleTimelenUserCmd_Param
}

func (x *BattleTimelenUserCmd) GetTimelen() uint32 {
	if x != nil && x.Timelen != nil {
		return *x.Timelen
	}
	return Default_BattleTimelenUserCmd_Timelen
}

func (x *BattleTimelenUserCmd) GetTotaltime() uint32 {
	if x != nil && x.Totaltime != nil {
		return *x.Totaltime
	}
	return Default_BattleTimelenUserCmd_Totaltime
}

func (x *BattleTimelenUserCmd) GetMusictime() uint32 {
	if x != nil && x.Musictime != nil {
		return *x.Musictime
	}
	return Default_BattleTimelenUserCmd_Musictime
}

func (x *BattleTimelenUserCmd) GetTutortime() uint32 {
	if x != nil && x.Tutortime != nil {
		return *x.Tutortime
	}
	return Default_BattleTimelenUserCmd_Tutortime
}

func (x *BattleTimelenUserCmd) GetEstatus() EBattleStatus {
	if x != nil && x.Estatus != nil {
		return *x.Estatus
	}
	return Default_BattleTimelenUserCmd_Estatus
}

func (x *BattleTimelenUserCmd) GetPowertime() uint32 {
	if x != nil && x.Powertime != nil {
		return *x.Powertime
	}
	return Default_BattleTimelenUserCmd_Powertime
}

type SetOptionUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param       *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=83" json:"param,omitempty"`
	Type        *EQueryType `protobuf:"varint,3,opt,name=type,enum=Cmd.EQueryType,def=0" json:"type,omitempty"`
	Fashionhide *uint32     `protobuf:"varint,4,opt,name=fashionhide,def=0" json:"fashionhide,omitempty"`
	WeddingType *EQueryType `protobuf:"varint,5,opt,name=wedding_type,json=weddingType,enum=Cmd.EQueryType,def=0" json:"wedding_type,omitempty"`
}

// Default values for SetOptionUserCmd fields.
const (
	Default_SetOptionUserCmd_Cmd         = Command_SCENE_USER2_PROTOCMD
	Default_SetOptionUserCmd_Param       = User2Param_USER2PARAM_SETOPTION
	Default_SetOptionUserCmd_Type        = EQueryType_EQUERYTYPE_MIN
	Default_SetOptionUserCmd_Fashionhide = uint32(0)
	Default_SetOptionUserCmd_WeddingType = EQueryType_EQUERYTYPE_MIN
)

func (x *SetOptionUserCmd) Reset() {
	*x = SetOptionUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOptionUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOptionUserCmd) ProtoMessage() {}

func (x *SetOptionUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOptionUserCmd.ProtoReflect.Descriptor instead.
func (*SetOptionUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{90}
}

func (x *SetOptionUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SetOptionUserCmd_Cmd
}

func (x *SetOptionUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SetOptionUserCmd_Param
}

func (x *SetOptionUserCmd) GetType() EQueryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_SetOptionUserCmd_Type
}

func (x *SetOptionUserCmd) GetFashionhide() uint32 {
	if x != nil && x.Fashionhide != nil {
		return *x.Fashionhide
	}
	return Default_SetOptionUserCmd_Fashionhide
}

func (x *SetOptionUserCmd) GetWeddingType() EQueryType {
	if x != nil && x.WeddingType != nil {
		return *x.WeddingType
	}
	return Default_SetOptionUserCmd_WeddingType
}

type QueryUserInfoUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=84" json:"param,omitempty"`
	Charid *uint64     `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Teamid *uint64     `protobuf:"varint,4,opt,name=teamid,def=0" json:"teamid,omitempty"`
	Blink  *bool       `protobuf:"varint,5,opt,name=blink,def=0" json:"blink,omitempty"`
}

// Default values for QueryUserInfoUserCmd fields.
const (
	Default_QueryUserInfoUserCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_QueryUserInfoUserCmd_Param  = User2Param_USER2PARAM_QUERYUSERINFO
	Default_QueryUserInfoUserCmd_Charid = uint64(0)
	Default_QueryUserInfoUserCmd_Teamid = uint64(0)
	Default_QueryUserInfoUserCmd_Blink  = bool(false)
)

func (x *QueryUserInfoUserCmd) Reset() {
	*x = QueryUserInfoUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserInfoUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserInfoUserCmd) ProtoMessage() {}

func (x *QueryUserInfoUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserInfoUserCmd.ProtoReflect.Descriptor instead.
func (*QueryUserInfoUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{91}
}

func (x *QueryUserInfoUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryUserInfoUserCmd_Cmd
}

func (x *QueryUserInfoUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryUserInfoUserCmd_Param
}

func (x *QueryUserInfoUserCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_QueryUserInfoUserCmd_Charid
}

func (x *QueryUserInfoUserCmd) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return Default_QueryUserInfoUserCmd_Teamid
}

func (x *QueryUserInfoUserCmd) GetBlink() bool {
	if x != nil && x.Blink != nil {
		return *x.Blink
	}
	return Default_QueryUserInfoUserCmd_Blink
}

type CountDownTickUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param     `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=85" json:"param,omitempty"`
	Type      *ECountDownType `protobuf:"varint,3,opt,name=type,enum=Cmd.ECountDownType" json:"type,omitempty"`
	Tick      *uint32         `protobuf:"varint,4,opt,name=tick" json:"tick,omitempty"`
	Time      *uint32         `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
	Sign      *string         `protobuf:"bytes,6,opt,name=sign" json:"sign,omitempty"`
	Extparam  *uint32         `protobuf:"varint,7,opt,name=extparam" json:"extparam,omitempty"`
	Gomaptype *uint32         `protobuf:"varint,8,opt,name=gomaptype,def=0" json:"gomaptype,omitempty"`
}

// Default values for CountDownTickUserCmd fields.
const (
	Default_CountDownTickUserCmd_Cmd       = Command_SCENE_USER2_PROTOCMD
	Default_CountDownTickUserCmd_Param     = User2Param_USER2PARAM_COUNTDOWN_TICK
	Default_CountDownTickUserCmd_Gomaptype = uint32(0)
)

func (x *CountDownTickUserCmd) Reset() {
	*x = CountDownTickUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDownTickUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDownTickUserCmd) ProtoMessage() {}

func (x *CountDownTickUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDownTickUserCmd.ProtoReflect.Descriptor instead.
func (*CountDownTickUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{92}
}

func (x *CountDownTickUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CountDownTickUserCmd_Cmd
}

func (x *CountDownTickUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CountDownTickUserCmd_Param
}

func (x *CountDownTickUserCmd) GetType() ECountDownType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ECountDownType_ECOUNTDOWNTYPE_DOJO
}

func (x *CountDownTickUserCmd) GetTick() uint32 {
	if x != nil && x.Tick != nil {
		return *x.Tick
	}
	return 0
}

func (x *CountDownTickUserCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CountDownTickUserCmd) GetSign() string {
	if x != nil && x.Sign != nil {
		return *x.Sign
	}
	return ""
}

func (x *CountDownTickUserCmd) GetExtparam() uint32 {
	if x != nil && x.Extparam != nil {
		return *x.Extparam
	}
	return 0
}

func (x *CountDownTickUserCmd) GetGomaptype() uint32 {
	if x != nil && x.Gomaptype != nil {
		return *x.Gomaptype
	}
	return Default_CountDownTickUserCmd_Gomaptype
}

type ItemMusicNtfUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=86" json:"param,omitempty"`
	Add       *bool       `protobuf:"varint,3,opt,name=add" json:"add,omitempty"`
	Uri       *string     `protobuf:"bytes,4,opt,name=uri" json:"uri,omitempty"`
	Starttime *uint32     `protobuf:"varint,5,opt,name=starttime" json:"starttime,omitempty"`
}

// Default values for ItemMusicNtfUserCmd fields.
const (
	Default_ItemMusicNtfUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ItemMusicNtfUserCmd_Param = User2Param_USER2PARAM_ITEM_MUSIC_NTF
)

func (x *ItemMusicNtfUserCmd) Reset() {
	*x = ItemMusicNtfUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemMusicNtfUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemMusicNtfUserCmd) ProtoMessage() {}

func (x *ItemMusicNtfUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemMusicNtfUserCmd.ProtoReflect.Descriptor instead.
func (*ItemMusicNtfUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{93}
}

func (x *ItemMusicNtfUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ItemMusicNtfUserCmd_Cmd
}

func (x *ItemMusicNtfUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ItemMusicNtfUserCmd_Param
}

func (x *ItemMusicNtfUserCmd) GetAdd() bool {
	if x != nil && x.Add != nil {
		return *x.Add
	}
	return false
}

func (x *ItemMusicNtfUserCmd) GetUri() string {
	if x != nil && x.Uri != nil {
		return *x.Uri
	}
	return ""
}

func (x *ItemMusicNtfUserCmd) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

type ShakeTreeUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=87" json:"param,omitempty"`
	Npcid  *uint64      `protobuf:"varint,3,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Result *ETreeStatus `protobuf:"varint,4,opt,name=result,enum=Cmd.ETreeStatus,def=0" json:"result,omitempty"`
}

// Default values for ShakeTreeUserCmd fields.
const (
	Default_ShakeTreeUserCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_ShakeTreeUserCmd_Param  = User2Param_USER2PARAM_SHAKETREE
	Default_ShakeTreeUserCmd_Npcid  = uint64(0)
	Default_ShakeTreeUserCmd_Result = ETreeStatus_ETREESTATUS_MIN
)

func (x *ShakeTreeUserCmd) Reset() {
	*x = ShakeTreeUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShakeTreeUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShakeTreeUserCmd) ProtoMessage() {}

func (x *ShakeTreeUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShakeTreeUserCmd.ProtoReflect.Descriptor instead.
func (*ShakeTreeUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{94}
}

func (x *ShakeTreeUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ShakeTreeUserCmd_Cmd
}

func (x *ShakeTreeUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ShakeTreeUserCmd_Param
}

func (x *ShakeTreeUserCmd) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_ShakeTreeUserCmd_Npcid
}

func (x *ShakeTreeUserCmd) GetResult() ETreeStatus {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_ShakeTreeUserCmd_Result
}

type Tree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *uint64   `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Typeid *uint32   `protobuf:"varint,2,opt,name=typeid,def=0" json:"typeid,omitempty"`
	Pos    *ScenePos `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
}

// Default values for Tree fields.
const (
	Default_Tree_Id     = uint64(0)
	Default_Tree_Typeid = uint32(0)
)

func (x *Tree) Reset() {
	*x = Tree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tree) ProtoMessage() {}

func (x *Tree) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tree.ProtoReflect.Descriptor instead.
func (*Tree) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{95}
}

func (x *Tree) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_Tree_Id
}

func (x *Tree) GetTypeid() uint32 {
	if x != nil && x.Typeid != nil {
		return *x.Typeid
	}
	return Default_Tree_Typeid
}

func (x *Tree) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

type TreeListUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=88" json:"param,omitempty"`
	Updates []*Tree     `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
	Dels    []uint64    `protobuf:"varint,4,rep,name=dels" json:"dels,omitempty"`
}

// Default values for TreeListUserCmd fields.
const (
	Default_TreeListUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_TreeListUserCmd_Param = User2Param_USER2PARAM_TREELIST
)

func (x *TreeListUserCmd) Reset() {
	*x = TreeListUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeListUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeListUserCmd) ProtoMessage() {}

func (x *TreeListUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeListUserCmd.ProtoReflect.Descriptor instead.
func (*TreeListUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{96}
}

func (x *TreeListUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TreeListUserCmd_Cmd
}

func (x *TreeListUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TreeListUserCmd_Param
}

func (x *TreeListUserCmd) GetUpdates() []*Tree {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *TreeListUserCmd) GetDels() []uint64 {
	if x != nil {
		return x.Dels
	}
	return nil
}

type ActivityNtfUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=89" json:"param,omitempty"`
	Id       *uint32     `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Mapid    *uint32     `protobuf:"varint,4,opt,name=mapid,def=0" json:"mapid,omitempty"`
	Endtime  *uint32     `protobuf:"varint,5,opt,name=endtime,def=0" json:"endtime,omitempty"`
	Progress *uint32     `protobuf:"varint,6,opt,name=progress" json:"progress,omitempty"`
}

// Default values for ActivityNtfUserCmd fields.
const (
	Default_ActivityNtfUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_ActivityNtfUserCmd_Param   = User2Param_USER2PARAM_ACTIVITY_NTF
	Default_ActivityNtfUserCmd_Mapid   = uint32(0)
	Default_ActivityNtfUserCmd_Endtime = uint32(0)
)

func (x *ActivityNtfUserCmd) Reset() {
	*x = ActivityNtfUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityNtfUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityNtfUserCmd) ProtoMessage() {}

func (x *ActivityNtfUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityNtfUserCmd.ProtoReflect.Descriptor instead.
func (*ActivityNtfUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{97}
}

func (x *ActivityNtfUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ActivityNtfUserCmd_Cmd
}

func (x *ActivityNtfUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ActivityNtfUserCmd_Param
}

func (x *ActivityNtfUserCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ActivityNtfUserCmd) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_ActivityNtfUserCmd_Mapid
}

func (x *ActivityNtfUserCmd) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return Default_ActivityNtfUserCmd_Endtime
}

func (x *ActivityNtfUserCmd) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

type ZoneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zoneid    *uint32      `protobuf:"varint,1,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Maxbaselv *uint32      `protobuf:"varint,2,opt,name=maxbaselv,def=0" json:"maxbaselv,omitempty"`
	Status    *EZoneStatus `protobuf:"varint,3,opt,name=status,enum=Cmd.EZoneStatus,def=0" json:"status,omitempty"`
	State     *EZoneState  `protobuf:"varint,4,opt,name=state,enum=Cmd.EZoneState,def=0" json:"state,omitempty"`
	Serverid  *uint32      `protobuf:"varint,5,opt,name=serverid,def=0" json:"serverid,omitempty"`
}

// Default values for ZoneInfo fields.
const (
	Default_ZoneInfo_Zoneid    = uint32(0)
	Default_ZoneInfo_Maxbaselv = uint32(0)
	Default_ZoneInfo_Status    = EZoneStatus_EZONESTATUS_MIN
	Default_ZoneInfo_State     = EZoneState_EZONESTATE_MIN
	Default_ZoneInfo_Serverid  = uint32(0)
)

func (x *ZoneInfo) Reset() {
	*x = ZoneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoneInfo) ProtoMessage() {}

func (x *ZoneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoneInfo.ProtoReflect.Descriptor instead.
func (*ZoneInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{98}
}

func (x *ZoneInfo) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_ZoneInfo_Zoneid
}

func (x *ZoneInfo) GetMaxbaselv() uint32 {
	if x != nil && x.Maxbaselv != nil {
		return *x.Maxbaselv
	}
	return Default_ZoneInfo_Maxbaselv
}

func (x *ZoneInfo) GetStatus() EZoneStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_ZoneInfo_Status
}

func (x *ZoneInfo) GetState() EZoneState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_ZoneInfo_State
}

func (x *ZoneInfo) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return Default_ZoneInfo_Serverid
}

type RecentZoneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *EJumpZone `protobuf:"varint,1,opt,name=type,enum=Cmd.EJumpZone,def=0" json:"type,omitempty"`
	Zoneid *uint32    `protobuf:"varint,2,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
}

// Default values for RecentZoneInfo fields.
const (
	Default_RecentZoneInfo_Type   = EJumpZone_EJUMPZONE_MIN
	Default_RecentZoneInfo_Zoneid = uint32(0)
)

func (x *RecentZoneInfo) Reset() {
	*x = RecentZoneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentZoneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentZoneInfo) ProtoMessage() {}

func (x *RecentZoneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentZoneInfo.ProtoReflect.Descriptor instead.
func (*RecentZoneInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{99}
}

func (x *RecentZoneInfo) GetType() EJumpZone {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_RecentZoneInfo_Type
}

func (x *RecentZoneInfo) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_RecentZoneInfo_Zoneid
}

type QueryZoneStatusUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param       `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=91" json:"param,omitempty"`
	Infos   []*ZoneInfo       `protobuf:"bytes,3,rep,name=infos" json:"infos,omitempty"`
	Recents []*RecentZoneInfo `protobuf:"bytes,4,rep,name=recents" json:"recents,omitempty"`
}

// Default values for QueryZoneStatusUserCmd fields.
const (
	Default_QueryZoneStatusUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_QueryZoneStatusUserCmd_Param = User2Param_USER2PARAM_QUERY_ZONESTATUS
)

func (x *QueryZoneStatusUserCmd) Reset() {
	*x = QueryZoneStatusUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryZoneStatusUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryZoneStatusUserCmd) ProtoMessage() {}

func (x *QueryZoneStatusUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryZoneStatusUserCmd.ProtoReflect.Descriptor instead.
func (*QueryZoneStatusUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{100}
}

func (x *QueryZoneStatusUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryZoneStatusUserCmd_Cmd
}

func (x *QueryZoneStatusUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryZoneStatusUserCmd_Param
}

func (x *QueryZoneStatusUserCmd) GetInfos() []*ZoneInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *QueryZoneStatusUserCmd) GetRecents() []*RecentZoneInfo {
	if x != nil {
		return x.Recents
	}
	return nil
}

type JumpZoneUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=92" json:"param,omitempty"`
	Npcid      *uint64     `protobuf:"varint,3,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Zoneid     *uint32     `protobuf:"varint,4,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Isanywhere *bool       `protobuf:"varint,5,opt,name=isanywhere,def=0" json:"isanywhere,omitempty"`
}

// Default values for JumpZoneUserCmd fields.
const (
	Default_JumpZoneUserCmd_Cmd        = Command_SCENE_USER2_PROTOCMD
	Default_JumpZoneUserCmd_Param      = User2Param_USER2PARAM_JUMP_ZONE
	Default_JumpZoneUserCmd_Npcid      = uint64(0)
	Default_JumpZoneUserCmd_Zoneid     = uint32(0)
	Default_JumpZoneUserCmd_Isanywhere = bool(false)
)

func (x *JumpZoneUserCmd) Reset() {
	*x = JumpZoneUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JumpZoneUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JumpZoneUserCmd) ProtoMessage() {}

func (x *JumpZoneUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JumpZoneUserCmd.ProtoReflect.Descriptor instead.
func (*JumpZoneUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{101}
}

func (x *JumpZoneUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_JumpZoneUserCmd_Cmd
}

func (x *JumpZoneUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_JumpZoneUserCmd_Param
}

func (x *JumpZoneUserCmd) GetNpcid() uint64 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_JumpZoneUserCmd_Npcid
}

func (x *JumpZoneUserCmd) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_JumpZoneUserCmd_Zoneid
}

func (x *JumpZoneUserCmd) GetIsanywhere() bool {
	if x != nil && x.Isanywhere != nil {
		return *x.Isanywhere
	}
	return Default_JumpZoneUserCmd_Isanywhere
}

type ItemImageUserNtfUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=93" json:"param,omitempty"`
	Userid *uint64     `protobuf:"varint,3,opt,name=userid,def=0" json:"userid,omitempty"`
}

// Default values for ItemImageUserNtfUserCmd fields.
const (
	Default_ItemImageUserNtfUserCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_ItemImageUserNtfUserCmd_Param  = User2Param_USER2PARAM_ITEMIMAGE_USER_NTF
	Default_ItemImageUserNtfUserCmd_Userid = uint64(0)
)

func (x *ItemImageUserNtfUserCmd) Reset() {
	*x = ItemImageUserNtfUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemImageUserNtfUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemImageUserNtfUserCmd) ProtoMessage() {}

func (x *ItemImageUserNtfUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemImageUserNtfUserCmd.ProtoReflect.Descriptor instead.
func (*ItemImageUserNtfUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{102}
}

func (x *ItemImageUserNtfUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ItemImageUserNtfUserCmd_Cmd
}

func (x *ItemImageUserNtfUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ItemImageUserNtfUserCmd_Param
}

func (x *ItemImageUserNtfUserCmd) GetUserid() uint64 {
	if x != nil && x.Userid != nil {
		return *x.Userid
	}
	return Default_ItemImageUserNtfUserCmd_Userid
}

type InviteFollowUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=97" json:"param,omitempty"`
	Charid *uint64     `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Follow *bool       `protobuf:"varint,4,opt,name=follow,def=1" json:"follow,omitempty"`
}

// Default values for InviteFollowUserCmd fields.
const (
	Default_InviteFollowUserCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_InviteFollowUserCmd_Param  = User2Param_USER2PARAM_INVITEFOLLOW
	Default_InviteFollowUserCmd_Charid = uint64(0)
	Default_InviteFollowUserCmd_Follow = bool(true)
)

func (x *InviteFollowUserCmd) Reset() {
	*x = InviteFollowUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteFollowUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteFollowUserCmd) ProtoMessage() {}

func (x *InviteFollowUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteFollowUserCmd.ProtoReflect.Descriptor instead.
func (*InviteFollowUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{103}
}

func (x *InviteFollowUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InviteFollowUserCmd_Cmd
}

func (x *InviteFollowUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InviteFollowUserCmd_Param
}

func (x *InviteFollowUserCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_InviteFollowUserCmd_Charid
}

func (x *InviteFollowUserCmd) GetFollow() bool {
	if x != nil && x.Follow != nil {
		return *x.Follow
	}
	return Default_InviteFollowUserCmd_Follow
}

type ChangeNameUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=98" json:"param,omitempty"`
	Name  *string     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

// Default values for ChangeNameUserCmd fields.
const (
	Default_ChangeNameUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ChangeNameUserCmd_Param = User2Param_USER2PARAM_CHANGENAME
)

func (x *ChangeNameUserCmd) Reset() {
	*x = ChangeNameUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeNameUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeNameUserCmd) ProtoMessage() {}

func (x *ChangeNameUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeNameUserCmd.ProtoReflect.Descriptor instead.
func (*ChangeNameUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{104}
}

func (x *ChangeNameUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChangeNameUserCmd_Cmd
}

func (x *ChangeNameUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChangeNameUserCmd_Param
}

func (x *ChangeNameUserCmd) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ChargePlayUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=99" json:"param,omitempty"`
	Chargeids []uint32    `protobuf:"varint,3,rep,name=chargeids" json:"chargeids,omitempty"`
}

// Default values for ChargePlayUserCmd fields.
const (
	Default_ChargePlayUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ChargePlayUserCmd_Param = User2Param_USER2PARAM_CHARGEPLAY
)

func (x *ChargePlayUserCmd) Reset() {
	*x = ChargePlayUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargePlayUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargePlayUserCmd) ProtoMessage() {}

func (x *ChargePlayUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargePlayUserCmd.ProtoReflect.Descriptor instead.
func (*ChargePlayUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{105}
}

func (x *ChargePlayUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChargePlayUserCmd_Cmd
}

func (x *ChargePlayUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChargePlayUserCmd_Param
}

func (x *ChargePlayUserCmd) GetChargeids() []uint32 {
	if x != nil {
		return x.Chargeids
	}
	return nil
}

type RequireNpcFuncUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=100" json:"param,omitempty"`
	Npcid     *uint32     `protobuf:"varint,3,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Functions []string    `protobuf:"bytes,4,rep,name=functions" json:"functions,omitempty"`
}

// Default values for RequireNpcFuncUserCmd fields.
const (
	Default_RequireNpcFuncUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_RequireNpcFuncUserCmd_Param = User2Param_USER2PARAM_REQUIRENPCFUNC
	Default_RequireNpcFuncUserCmd_Npcid = uint32(0)
)

func (x *RequireNpcFuncUserCmd) Reset() {
	*x = RequireNpcFuncUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequireNpcFuncUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireNpcFuncUserCmd) ProtoMessage() {}

func (x *RequireNpcFuncUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireNpcFuncUserCmd.ProtoReflect.Descriptor instead.
func (*RequireNpcFuncUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{106}
}

func (x *RequireNpcFuncUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RequireNpcFuncUserCmd_Cmd
}

func (x *RequireNpcFuncUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RequireNpcFuncUserCmd_Param
}

func (x *RequireNpcFuncUserCmd) GetNpcid() uint32 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_RequireNpcFuncUserCmd_Npcid
}

func (x *RequireNpcFuncUserCmd) GetFunctions() []string {
	if x != nil {
		return x.Functions
	}
	return nil
}

type CheckSeatUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=101" json:"param,omitempty"`
	FurnGuid *string     `protobuf:"bytes,3,opt,name=furn_guid,json=furnGuid" json:"furn_guid,omitempty"`
	Seatid   *uint32     `protobuf:"varint,4,opt,name=seatid,def=0" json:"seatid,omitempty"`
	Success  *bool       `protobuf:"varint,5,opt,name=success" json:"success,omitempty"`
}

// Default values for CheckSeatUserCmd fields.
const (
	Default_CheckSeatUserCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_CheckSeatUserCmd_Param  = User2Param_USER2PARAM_CHECK_SEAT
	Default_CheckSeatUserCmd_Seatid = uint32(0)
)

func (x *CheckSeatUserCmd) Reset() {
	*x = CheckSeatUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSeatUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSeatUserCmd) ProtoMessage() {}

func (x *CheckSeatUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSeatUserCmd.ProtoReflect.Descriptor instead.
func (*CheckSeatUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{107}
}

func (x *CheckSeatUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CheckSeatUserCmd_Cmd
}

func (x *CheckSeatUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CheckSeatUserCmd_Param
}

func (x *CheckSeatUserCmd) GetFurnGuid() string {
	if x != nil && x.FurnGuid != nil {
		return *x.FurnGuid
	}
	return ""
}

func (x *CheckSeatUserCmd) GetSeatid() uint32 {
	if x != nil && x.Seatid != nil {
		return *x.Seatid
	}
	return Default_CheckSeatUserCmd_Seatid
}

func (x *CheckSeatUserCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type NtfSeatUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=102" json:"param,omitempty"`
	Charid     *uint64     `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Seatid     *uint32     `protobuf:"varint,4,opt,name=seatid" json:"seatid,omitempty"`
	Isseatdown *bool       `protobuf:"varint,5,opt,name=isseatdown" json:"isseatdown,omitempty"`
	FurnGuid   *string     `protobuf:"bytes,6,opt,name=furn_guid,json=furnGuid" json:"furn_guid,omitempty"`
}

// Default values for NtfSeatUserCmd fields.
const (
	Default_NtfSeatUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_NtfSeatUserCmd_Param = User2Param_USER2PARAM_NTF_SEAT
)

func (x *NtfSeatUserCmd) Reset() {
	*x = NtfSeatUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfSeatUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfSeatUserCmd) ProtoMessage() {}

func (x *NtfSeatUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfSeatUserCmd.ProtoReflect.Descriptor instead.
func (*NtfSeatUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{108}
}

func (x *NtfSeatUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfSeatUserCmd_Cmd
}

func (x *NtfSeatUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfSeatUserCmd_Param
}

func (x *NtfSeatUserCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *NtfSeatUserCmd) GetSeatid() uint32 {
	if x != nil && x.Seatid != nil {
		return *x.Seatid
	}
	return 0
}

func (x *NtfSeatUserCmd) GetIsseatdown() bool {
	if x != nil && x.Isseatdown != nil {
		return *x.Isseatdown
	}
	return false
}

func (x *NtfSeatUserCmd) GetFurnGuid() string {
	if x != nil && x.FurnGuid != nil {
		return *x.FurnGuid
	}
	return ""
}

type YoyoSeatUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=114" json:"param,omitempty"`
	Guid  *uint64     `protobuf:"varint,3,opt,name=guid,def=0" json:"guid,omitempty"`
}

// Default values for YoyoSeatUserCmd fields.
const (
	Default_YoyoSeatUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_YoyoSeatUserCmd_Param = User2Param_USER2PARAM_YOYO_SEAT
	Default_YoyoSeatUserCmd_Guid  = uint64(0)
)

func (x *YoyoSeatUserCmd) Reset() {
	*x = YoyoSeatUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YoyoSeatUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YoyoSeatUserCmd) ProtoMessage() {}

func (x *YoyoSeatUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YoyoSeatUserCmd.ProtoReflect.Descriptor instead.
func (*YoyoSeatUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{109}
}

func (x *YoyoSeatUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_YoyoSeatUserCmd_Cmd
}

func (x *YoyoSeatUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_YoyoSeatUserCmd_Param
}

func (x *YoyoSeatUserCmd) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return Default_YoyoSeatUserCmd_Guid
}

type ShowSeatUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param   `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=115" json:"param,omitempty"`
	Seatid []uint32      `protobuf:"varint,3,rep,name=seatid" json:"seatid,omitempty"`
	Show   *SeatShowType `protobuf:"varint,4,opt,name=show,enum=Cmd.SeatShowType,def=0" json:"show,omitempty"`
}

// Default values for ShowSeatUserCmd fields.
const (
	Default_ShowSeatUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ShowSeatUserCmd_Param = User2Param_USER2PARAM_SHOW_SEAT
	Default_ShowSeatUserCmd_Show  = SeatShowType_SEAT_SHOW_VISIBLE
)

func (x *ShowSeatUserCmd) Reset() {
	*x = ShowSeatUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowSeatUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowSeatUserCmd) ProtoMessage() {}

func (x *ShowSeatUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowSeatUserCmd.ProtoReflect.Descriptor instead.
func (*ShowSeatUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{110}
}

func (x *ShowSeatUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ShowSeatUserCmd_Cmd
}

func (x *ShowSeatUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ShowSeatUserCmd_Param
}

func (x *ShowSeatUserCmd) GetSeatid() []uint32 {
	if x != nil {
		return x.Seatid
	}
	return nil
}

func (x *ShowSeatUserCmd) GetShow() SeatShowType {
	if x != nil && x.Show != nil {
		return *x.Show
	}
	return Default_ShowSeatUserCmd_Show
}

type SetNormalSkillOptionUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=103" json:"param,omitempty"`
	Flag  *uint32     `protobuf:"varint,3,opt,name=flag" json:"flag,omitempty"`
}

// Default values for SetNormalSkillOptionUserCmd fields.
const (
	Default_SetNormalSkillOptionUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_SetNormalSkillOptionUserCmd_Param = User2Param_USER2PARAM_SET_NORMALSKILL_OPTION
)

func (x *SetNormalSkillOptionUserCmd) Reset() {
	*x = SetNormalSkillOptionUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNormalSkillOptionUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNormalSkillOptionUserCmd) ProtoMessage() {}

func (x *SetNormalSkillOptionUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNormalSkillOptionUserCmd.ProtoReflect.Descriptor instead.
func (*SetNormalSkillOptionUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{111}
}

func (x *SetNormalSkillOptionUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SetNormalSkillOptionUserCmd_Cmd
}

func (x *SetNormalSkillOptionUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SetNormalSkillOptionUserCmd_Param
}

func (x *SetNormalSkillOptionUserCmd) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

type NewSetOptionUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=106" json:"param,omitempty"`
	Type  *EOptionType `protobuf:"varint,3,opt,name=type,enum=Cmd.EOptionType" json:"type,omitempty"`
	Flag  *uint32      `protobuf:"varint,4,opt,name=flag" json:"flag,omitempty"`
}

// Default values for NewSetOptionUserCmd fields.
const (
	Default_NewSetOptionUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_NewSetOptionUserCmd_Param = User2Param_USER2PARAM_NEW_SET_OPTION
)

func (x *NewSetOptionUserCmd) Reset() {
	*x = NewSetOptionUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSetOptionUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSetOptionUserCmd) ProtoMessage() {}

func (x *NewSetOptionUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSetOptionUserCmd.ProtoReflect.Descriptor instead.
func (*NewSetOptionUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{112}
}

func (x *NewSetOptionUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NewSetOptionUserCmd_Cmd
}

func (x *NewSetOptionUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NewSetOptionUserCmd_Param
}

func (x *NewSetOptionUserCmd) GetType() EOptionType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EOptionType_EOPTIONTYPE_USE_SAVE_HP
}

func (x *NewSetOptionUserCmd) GetFlag() uint32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

type UnsolvedSceneryNtfUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=104" json:"param,omitempty"`
	Ids   []uint32    `protobuf:"varint,3,rep,name=ids" json:"ids,omitempty"`
}

// Default values for UnsolvedSceneryNtfUserCmd fields.
const (
	Default_UnsolvedSceneryNtfUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_UnsolvedSceneryNtfUserCmd_Param = User2Param_USER2PARAM_UNSOLVED_SCENERY_NTF
)

func (x *UnsolvedSceneryNtfUserCmd) Reset() {
	*x = UnsolvedSceneryNtfUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsolvedSceneryNtfUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsolvedSceneryNtfUserCmd) ProtoMessage() {}

func (x *UnsolvedSceneryNtfUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsolvedSceneryNtfUserCmd.ProtoReflect.Descriptor instead.
func (*UnsolvedSceneryNtfUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{113}
}

func (x *UnsolvedSceneryNtfUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UnsolvedSceneryNtfUserCmd_Cmd
}

func (x *UnsolvedSceneryNtfUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UnsolvedSceneryNtfUserCmd_Param
}

func (x *UnsolvedSceneryNtfUserCmd) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type VisibleNpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Npcid    *uint32   `protobuf:"varint,1,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Pos      *ScenePos `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`
	Uniqueid *uint64   `protobuf:"varint,3,opt,name=uniqueid,def=0" json:"uniqueid,omitempty"`
}

// Default values for VisibleNpc fields.
const (
	Default_VisibleNpc_Npcid    = uint32(0)
	Default_VisibleNpc_Uniqueid = uint64(0)
)

func (x *VisibleNpc) Reset() {
	*x = VisibleNpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisibleNpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisibleNpc) ProtoMessage() {}

func (x *VisibleNpc) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisibleNpc.ProtoReflect.Descriptor instead.
func (*VisibleNpc) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{114}
}

func (x *VisibleNpc) GetNpcid() uint32 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_VisibleNpc_Npcid
}

func (x *VisibleNpc) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *VisibleNpc) GetUniqueid() uint64 {
	if x != nil && x.Uniqueid != nil {
		return *x.Uniqueid
	}
	return Default_VisibleNpc_Uniqueid
}

type NtfVisibleNpcUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param   `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=105" json:"param,omitempty"`
	Npcs  []*VisibleNpc `protobuf:"bytes,3,rep,name=npcs" json:"npcs,omitempty"`
	Type  *uint32       `protobuf:"varint,4,opt,name=type,def=0" json:"type,omitempty"`
}

// Default values for NtfVisibleNpcUserCmd fields.
const (
	Default_NtfVisibleNpcUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_NtfVisibleNpcUserCmd_Param = User2Param_USER2PARAM_NTF_VISIBLENPC
	Default_NtfVisibleNpcUserCmd_Type  = uint32(0)
)

func (x *NtfVisibleNpcUserCmd) Reset() {
	*x = NtfVisibleNpcUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfVisibleNpcUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfVisibleNpcUserCmd) ProtoMessage() {}

func (x *NtfVisibleNpcUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfVisibleNpcUserCmd.ProtoReflect.Descriptor instead.
func (*NtfVisibleNpcUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{115}
}

func (x *NtfVisibleNpcUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfVisibleNpcUserCmd_Cmd
}

func (x *NtfVisibleNpcUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfVisibleNpcUserCmd_Param
}

func (x *NtfVisibleNpcUserCmd) GetNpcs() []*VisibleNpc {
	if x != nil {
		return x.Npcs
	}
	return nil
}

func (x *NtfVisibleNpcUserCmd) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_NtfVisibleNpcUserCmd_Type
}

type TransformPreDataCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=108" json:"param,omitempty"`
	Datas []*UserData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for TransformPreDataCmd fields.
const (
	Default_TransformPreDataCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_TransformPreDataCmd_Param = User2Param_USER2PARAM_TRANSFORM_PREDATA
)

func (x *TransformPreDataCmd) Reset() {
	*x = TransformPreDataCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformPreDataCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformPreDataCmd) ProtoMessage() {}

func (x *TransformPreDataCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformPreDataCmd.ProtoReflect.Descriptor instead.
func (*TransformPreDataCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{116}
}

func (x *TransformPreDataCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TransformPreDataCmd_Cmd
}

func (x *TransformPreDataCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TransformPreDataCmd_Param
}

func (x *TransformPreDataCmd) GetDatas() []*UserData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type UserRenameCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param     `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=109" json:"param,omitempty"`
	Name  *string         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Code  *ERenameErrCode `protobuf:"varint,4,opt,name=code,enum=Cmd.ERenameErrCode,def=0" json:"code,omitempty"`
	Force *bool           `protobuf:"varint,5,opt,name=force,def=0" json:"force,omitempty"`
}

// Default values for UserRenameCmd fields.
const (
	Default_UserRenameCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_UserRenameCmd_Param = User2Param_USER2PARAM_USER_RENAME
	Default_UserRenameCmd_Code  = ERenameErrCode_ERENAME_SUCCESS
	Default_UserRenameCmd_Force = bool(false)
)

func (x *UserRenameCmd) Reset() {
	*x = UserRenameCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRenameCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRenameCmd) ProtoMessage() {}

func (x *UserRenameCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRenameCmd.ProtoReflect.Descriptor instead.
func (*UserRenameCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{117}
}

func (x *UserRenameCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UserRenameCmd_Cmd
}

func (x *UserRenameCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UserRenameCmd_Param
}

func (x *UserRenameCmd) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UserRenameCmd) GetCode() ERenameErrCode {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return Default_UserRenameCmd_Code
}

func (x *UserRenameCmd) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return Default_UserRenameCmd_Force
}

type BuyZenyCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=111" json:"param,omitempty"`
	Bcoin *uint32     `protobuf:"varint,3,opt,name=bcoin" json:"bcoin,omitempty"`
	Zeny  *uint64     `protobuf:"varint,4,opt,name=zeny" json:"zeny,omitempty"`
	Ret   *bool       `protobuf:"varint,5,opt,name=ret" json:"ret,omitempty"`
}

// Default values for BuyZenyCmd fields.
const (
	Default_BuyZenyCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_BuyZenyCmd_Param = User2Param_USER2PARAM_BUY_ZENY
)

func (x *BuyZenyCmd) Reset() {
	*x = BuyZenyCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyZenyCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyZenyCmd) ProtoMessage() {}

func (x *BuyZenyCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyZenyCmd.ProtoReflect.Descriptor instead.
func (*BuyZenyCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{118}
}

func (x *BuyZenyCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuyZenyCmd_Cmd
}

func (x *BuyZenyCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuyZenyCmd_Param
}

func (x *BuyZenyCmd) GetBcoin() uint32 {
	if x != nil && x.Bcoin != nil {
		return *x.Bcoin
	}
	return 0
}

func (x *BuyZenyCmd) GetZeny() uint64 {
	if x != nil && x.Zeny != nil {
		return *x.Zeny
	}
	return 0
}

func (x *BuyZenyCmd) GetRet() bool {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return false
}

type CallTeamerUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=112" json:"param,omitempty"`
	Masterid *uint64     `protobuf:"varint,3,opt,name=masterid,def=0" json:"masterid,omitempty"`
	Sign     *string     `protobuf:"bytes,4,opt,name=sign" json:"sign,omitempty"`
	Time     *uint32     `protobuf:"varint,5,opt,name=time,def=0" json:"time,omitempty"`
	Username *string     `protobuf:"bytes,6,opt,name=username" json:"username,omitempty"`
	Mapid    *uint32     `protobuf:"varint,7,opt,name=mapid,def=0" json:"mapid,omitempty"`
	Pos      *ScenePos   `protobuf:"bytes,8,opt,name=pos" json:"pos,omitempty"`
}

// Default values for CallTeamerUserCmd fields.
const (
	Default_CallTeamerUserCmd_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_CallTeamerUserCmd_Param    = User2Param_USER2PARAM_CALL_TEAMER
	Default_CallTeamerUserCmd_Masterid = uint64(0)
	Default_CallTeamerUserCmd_Time     = uint32(0)
	Default_CallTeamerUserCmd_Mapid    = uint32(0)
)

func (x *CallTeamerUserCmd) Reset() {
	*x = CallTeamerUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallTeamerUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallTeamerUserCmd) ProtoMessage() {}

func (x *CallTeamerUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallTeamerUserCmd.ProtoReflect.Descriptor instead.
func (*CallTeamerUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{119}
}

func (x *CallTeamerUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CallTeamerUserCmd_Cmd
}

func (x *CallTeamerUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CallTeamerUserCmd_Param
}

func (x *CallTeamerUserCmd) GetMasterid() uint64 {
	if x != nil && x.Masterid != nil {
		return *x.Masterid
	}
	return Default_CallTeamerUserCmd_Masterid
}

func (x *CallTeamerUserCmd) GetSign() string {
	if x != nil && x.Sign != nil {
		return *x.Sign
	}
	return ""
}

func (x *CallTeamerUserCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_CallTeamerUserCmd_Time
}

func (x *CallTeamerUserCmd) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *CallTeamerUserCmd) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_CallTeamerUserCmd_Mapid
}

func (x *CallTeamerUserCmd) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

type CallTeamerReplyUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=113" json:"param,omitempty"`
	Masterid *uint64     `protobuf:"varint,3,opt,name=masterid,def=0" json:"masterid,omitempty"`
	Sign     *string     `protobuf:"bytes,4,opt,name=sign" json:"sign,omitempty"`
	Time     *uint32     `protobuf:"varint,5,opt,name=time,def=0" json:"time,omitempty"`
	Mapid    *uint32     `protobuf:"varint,6,opt,name=mapid,def=0" json:"mapid,omitempty"`
	Pos      *ScenePos   `protobuf:"bytes,7,opt,name=pos" json:"pos,omitempty"`
}

// Default values for CallTeamerReplyUserCmd fields.
const (
	Default_CallTeamerReplyUserCmd_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_CallTeamerReplyUserCmd_Param    = User2Param_USER2PARAM_CALL_TEAMER_JOIN
	Default_CallTeamerReplyUserCmd_Masterid = uint64(0)
	Default_CallTeamerReplyUserCmd_Time     = uint32(0)
	Default_CallTeamerReplyUserCmd_Mapid    = uint32(0)
)

func (x *CallTeamerReplyUserCmd) Reset() {
	*x = CallTeamerReplyUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallTeamerReplyUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallTeamerReplyUserCmd) ProtoMessage() {}

func (x *CallTeamerReplyUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallTeamerReplyUserCmd.ProtoReflect.Descriptor instead.
func (*CallTeamerReplyUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{120}
}

func (x *CallTeamerReplyUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CallTeamerReplyUserCmd_Cmd
}

func (x *CallTeamerReplyUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CallTeamerReplyUserCmd_Param
}

func (x *CallTeamerReplyUserCmd) GetMasterid() uint64 {
	if x != nil && x.Masterid != nil {
		return *x.Masterid
	}
	return Default_CallTeamerReplyUserCmd_Masterid
}

func (x *CallTeamerReplyUserCmd) GetSign() string {
	if x != nil && x.Sign != nil {
		return *x.Sign
	}
	return ""
}

func (x *CallTeamerReplyUserCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_CallTeamerReplyUserCmd_Time
}

func (x *CallTeamerReplyUserCmd) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_CallTeamerReplyUserCmd_Mapid
}

func (x *CallTeamerReplyUserCmd) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

type SpecialEffectCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=116" json:"param,omitempty"`
	Dramaid   *uint32     `protobuf:"varint,3,opt,name=dramaid" json:"dramaid,omitempty"`
	Starttime *uint32     `protobuf:"varint,4,opt,name=starttime" json:"starttime,omitempty"`
	Times     *uint32     `protobuf:"varint,5,opt,name=times,def=0" json:"times,omitempty"`
}

// Default values for SpecialEffectCmd fields.
const (
	Default_SpecialEffectCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_SpecialEffectCmd_Param = User2Param_USER2PARAM_SPECIAL_EFFECT
	Default_SpecialEffectCmd_Times = uint32(0)
)

func (x *SpecialEffectCmd) Reset() {
	*x = SpecialEffectCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialEffectCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialEffectCmd) ProtoMessage() {}

func (x *SpecialEffectCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialEffectCmd.ProtoReflect.Descriptor instead.
func (*SpecialEffectCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{121}
}

func (x *SpecialEffectCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SpecialEffectCmd_Cmd
}

func (x *SpecialEffectCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SpecialEffectCmd_Param
}

func (x *SpecialEffectCmd) GetDramaid() uint32 {
	if x != nil && x.Dramaid != nil {
		return *x.Dramaid
	}
	return 0
}

func (x *SpecialEffectCmd) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

func (x *SpecialEffectCmd) GetTimes() uint32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return Default_SpecialEffectCmd_Times
}

type MarriageProposalCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=117" json:"param,omitempty"`
	Masterid   *uint64     `protobuf:"varint,3,opt,name=masterid,def=0" json:"masterid,omitempty"`
	Itemid     *uint32     `protobuf:"varint,4,opt,name=itemid,def=0" json:"itemid,omitempty"`
	Time       *uint32     `protobuf:"varint,5,opt,name=time,def=0" json:"time,omitempty"`
	Mastername *string     `protobuf:"bytes,6,opt,name=mastername" json:"mastername,omitempty"`
	Sign       []byte      `protobuf:"bytes,7,opt,name=sign" json:"sign,omitempty"`
}

// Default values for MarriageProposalCmd fields.
const (
	Default_MarriageProposalCmd_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_MarriageProposalCmd_Param    = User2Param_USER2PARAM_MARRIAGE_PROPOSAL
	Default_MarriageProposalCmd_Masterid = uint64(0)
	Default_MarriageProposalCmd_Itemid   = uint32(0)
	Default_MarriageProposalCmd_Time     = uint32(0)
)

func (x *MarriageProposalCmd) Reset() {
	*x = MarriageProposalCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarriageProposalCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarriageProposalCmd) ProtoMessage() {}

func (x *MarriageProposalCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarriageProposalCmd.ProtoReflect.Descriptor instead.
func (*MarriageProposalCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{122}
}

func (x *MarriageProposalCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MarriageProposalCmd_Cmd
}

func (x *MarriageProposalCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MarriageProposalCmd_Param
}

func (x *MarriageProposalCmd) GetMasterid() uint64 {
	if x != nil && x.Masterid != nil {
		return *x.Masterid
	}
	return Default_MarriageProposalCmd_Masterid
}

func (x *MarriageProposalCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_MarriageProposalCmd_Itemid
}

func (x *MarriageProposalCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_MarriageProposalCmd_Time
}

func (x *MarriageProposalCmd) GetMastername() string {
	if x != nil && x.Mastername != nil {
		return *x.Mastername
	}
	return ""
}

func (x *MarriageProposalCmd) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

type MarriageProposalReplyCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param     `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=118" json:"param,omitempty"`
	Masterid *uint64         `protobuf:"varint,3,opt,name=masterid,def=0" json:"masterid,omitempty"`
	Reply    *EProposalReply `protobuf:"varint,4,opt,name=reply,enum=Cmd.EProposalReply,def=0" json:"reply,omitempty"`
	Time     *uint32         `protobuf:"varint,5,opt,name=time,def=0" json:"time,omitempty"`
	Sign     *string         `protobuf:"bytes,6,opt,name=sign" json:"sign,omitempty"`
}

// Default values for MarriageProposalReplyCmd fields.
const (
	Default_MarriageProposalReplyCmd_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_MarriageProposalReplyCmd_Param    = User2Param_USER2PARAM_MARRIAGE_PROPOSAL_REPLY
	Default_MarriageProposalReplyCmd_Masterid = uint64(0)
	Default_MarriageProposalReplyCmd_Reply    = EProposalReply_EPROPOSALREPLY_YES
	Default_MarriageProposalReplyCmd_Time     = uint32(0)
)

func (x *MarriageProposalReplyCmd) Reset() {
	*x = MarriageProposalReplyCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarriageProposalReplyCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarriageProposalReplyCmd) ProtoMessage() {}

func (x *MarriageProposalReplyCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarriageProposalReplyCmd.ProtoReflect.Descriptor instead.
func (*MarriageProposalReplyCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{123}
}

func (x *MarriageProposalReplyCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MarriageProposalReplyCmd_Cmd
}

func (x *MarriageProposalReplyCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MarriageProposalReplyCmd_Param
}

func (x *MarriageProposalReplyCmd) GetMasterid() uint64 {
	if x != nil && x.Masterid != nil {
		return *x.Masterid
	}
	return Default_MarriageProposalReplyCmd_Masterid
}

func (x *MarriageProposalReplyCmd) GetReply() EProposalReply {
	if x != nil && x.Reply != nil {
		return *x.Reply
	}
	return Default_MarriageProposalReplyCmd_Reply
}

func (x *MarriageProposalReplyCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_MarriageProposalReplyCmd_Time
}

func (x *MarriageProposalReplyCmd) GetSign() string {
	if x != nil && x.Sign != nil {
		return *x.Sign
	}
	return ""
}

type UploadWeddingPhotoUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=119" json:"param,omitempty"`
	Itemguid *string     `protobuf:"bytes,3,opt,name=itemguid" json:"itemguid,omitempty"`
	Index    *uint32     `protobuf:"varint,4,opt,name=index,def=0" json:"index,omitempty"`
	Time     *uint32     `protobuf:"varint,5,opt,name=time,def=0" json:"time,omitempty"`
}

// Default values for UploadWeddingPhotoUserCmd fields.
const (
	Default_UploadWeddingPhotoUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_UploadWeddingPhotoUserCmd_Param = User2Param_USER2PARAM_UPLOAD_WEDDING_PHOTO
	Default_UploadWeddingPhotoUserCmd_Index = uint32(0)
	Default_UploadWeddingPhotoUserCmd_Time  = uint32(0)
)

func (x *UploadWeddingPhotoUserCmd) Reset() {
	*x = UploadWeddingPhotoUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadWeddingPhotoUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadWeddingPhotoUserCmd) ProtoMessage() {}

func (x *UploadWeddingPhotoUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadWeddingPhotoUserCmd.ProtoReflect.Descriptor instead.
func (*UploadWeddingPhotoUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{124}
}

func (x *UploadWeddingPhotoUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UploadWeddingPhotoUserCmd_Cmd
}

func (x *UploadWeddingPhotoUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UploadWeddingPhotoUserCmd_Param
}

func (x *UploadWeddingPhotoUserCmd) GetItemguid() string {
	if x != nil && x.Itemguid != nil {
		return *x.Itemguid
	}
	return ""
}

func (x *UploadWeddingPhotoUserCmd) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_UploadWeddingPhotoUserCmd_Index
}

func (x *UploadWeddingPhotoUserCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_UploadWeddingPhotoUserCmd_Time
}

type MarriageProposalSuccessCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=120" json:"param,omitempty"`
	Charid   *uint64     `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Ismaster *bool       `protobuf:"varint,4,opt,name=ismaster,def=1" json:"ismaster,omitempty"`
}

// Default values for MarriageProposalSuccessCmd fields.
const (
	Default_MarriageProposalSuccessCmd_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_MarriageProposalSuccessCmd_Param    = User2Param_USER2PARAM_MARRIAGE_PROPOSAL_SUCCESS
	Default_MarriageProposalSuccessCmd_Charid   = uint64(0)
	Default_MarriageProposalSuccessCmd_Ismaster = bool(true)
)

func (x *MarriageProposalSuccessCmd) Reset() {
	*x = MarriageProposalSuccessCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarriageProposalSuccessCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarriageProposalSuccessCmd) ProtoMessage() {}

func (x *MarriageProposalSuccessCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarriageProposalSuccessCmd.ProtoReflect.Descriptor instead.
func (*MarriageProposalSuccessCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{125}
}

func (x *MarriageProposalSuccessCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MarriageProposalSuccessCmd_Cmd
}

func (x *MarriageProposalSuccessCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MarriageProposalSuccessCmd_Param
}

func (x *MarriageProposalSuccessCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_MarriageProposalSuccessCmd_Charid
}

func (x *MarriageProposalSuccessCmd) GetIsmaster() bool {
	if x != nil && x.Ismaster != nil {
		return *x.Ismaster
	}
	return Default_MarriageProposalSuccessCmd_Ismaster
}

type InviteeWeddingStartNtfUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=121" json:"param,omitempty"`
	Itemguid *string     `protobuf:"bytes,3,opt,name=itemguid" json:"itemguid,omitempty"`
}

// Default values for InviteeWeddingStartNtfUserCmd fields.
const (
	Default_InviteeWeddingStartNtfUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_InviteeWeddingStartNtfUserCmd_Param = User2Param_USER2PARAM_INVITEE_WEDDING_START_NTF
)

func (x *InviteeWeddingStartNtfUserCmd) Reset() {
	*x = InviteeWeddingStartNtfUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteeWeddingStartNtfUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteeWeddingStartNtfUserCmd) ProtoMessage() {}

func (x *InviteeWeddingStartNtfUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteeWeddingStartNtfUserCmd.ProtoReflect.Descriptor instead.
func (*InviteeWeddingStartNtfUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{126}
}

func (x *InviteeWeddingStartNtfUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InviteeWeddingStartNtfUserCmd_Cmd
}

func (x *InviteeWeddingStartNtfUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InviteeWeddingStartNtfUserCmd_Param
}

func (x *InviteeWeddingStartNtfUserCmd) GetItemguid() string {
	if x != nil && x.Itemguid != nil {
		return *x.Itemguid
	}
	return ""
}

type KFCShareUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=128" json:"param,omitempty"`
	Sharetype *uint32     `protobuf:"varint,3,opt,name=sharetype,def=0" json:"sharetype,omitempty"`
}

// Default values for KFCShareUserCmd fields.
const (
	Default_KFCShareUserCmd_Cmd       = Command_SCENE_USER2_PROTOCMD
	Default_KFCShareUserCmd_Param     = User2Param_USER2PARAM_KFC_SHARE
	Default_KFCShareUserCmd_Sharetype = uint32(0)
)

func (x *KFCShareUserCmd) Reset() {
	*x = KFCShareUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KFCShareUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KFCShareUserCmd) ProtoMessage() {}

func (x *KFCShareUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KFCShareUserCmd.ProtoReflect.Descriptor instead.
func (*KFCShareUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{127}
}

func (x *KFCShareUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_KFCShareUserCmd_Cmd
}

func (x *KFCShareUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_KFCShareUserCmd_Param
}

func (x *KFCShareUserCmd) GetSharetype() uint32 {
	if x != nil && x.Sharetype != nil {
		return *x.Sharetype
	}
	return Default_KFCShareUserCmd_Sharetype
}

type KFCEnrollUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=162" json:"param,omitempty"`
	Phone *string     `protobuf:"bytes,3,opt,name=phone" json:"phone,omitempty"`
}

// Default values for KFCEnrollUserCmd fields.
const (
	Default_KFCEnrollUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_KFCEnrollUserCmd_Param = User2Param_USER2PARAM_KFC_ENROLL
)

func (x *KFCEnrollUserCmd) Reset() {
	*x = KFCEnrollUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KFCEnrollUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KFCEnrollUserCmd) ProtoMessage() {}

func (x *KFCEnrollUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KFCEnrollUserCmd.ProtoReflect.Descriptor instead.
func (*KFCEnrollUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{128}
}

func (x *KFCEnrollUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_KFCEnrollUserCmd_Cmd
}

func (x *KFCEnrollUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_KFCEnrollUserCmd_Param
}

func (x *KFCEnrollUserCmd) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

type KFCEnrollCodeUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=168" json:"param,omitempty"`
	Code     *uint32     `protobuf:"varint,3,opt,name=code" json:"code,omitempty"`
	District *string     `protobuf:"bytes,4,opt,name=district" json:"district,omitempty"`
}

// Default values for KFCEnrollCodeUserCmd fields.
const (
	Default_KFCEnrollCodeUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_KFCEnrollCodeUserCmd_Param = User2Param_USER2PARAM_KFC_ENROLL_CODE
)

func (x *KFCEnrollCodeUserCmd) Reset() {
	*x = KFCEnrollCodeUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KFCEnrollCodeUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KFCEnrollCodeUserCmd) ProtoMessage() {}

func (x *KFCEnrollCodeUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KFCEnrollCodeUserCmd.ProtoReflect.Descriptor instead.
func (*KFCEnrollCodeUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{129}
}

func (x *KFCEnrollCodeUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_KFCEnrollCodeUserCmd_Cmd
}

func (x *KFCEnrollCodeUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_KFCEnrollCodeUserCmd_Param
}

func (x *KFCEnrollCodeUserCmd) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *KFCEnrollCodeUserCmd) GetDistrict() string {
	if x != nil && x.District != nil {
		return *x.District
	}
	return ""
}

type KFCEnrollReplyUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param   `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=163" json:"param,omitempty"`
	Result   *EnrollResult `protobuf:"varint,3,opt,name=result,enum=Cmd.EnrollResult,def=0" json:"result,omitempty"`
	District *string       `protobuf:"bytes,4,opt,name=district" json:"district,omitempty"`
	Index    *uint32       `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
}

// Default values for KFCEnrollReplyUserCmd fields.
const (
	Default_KFCEnrollReplyUserCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_KFCEnrollReplyUserCmd_Param  = User2Param_USER2PARAM_KFC_ENROLL_REPLY
	Default_KFCEnrollReplyUserCmd_Result = EnrollResult_EENROLLRESULT_SUCCESS
)

func (x *KFCEnrollReplyUserCmd) Reset() {
	*x = KFCEnrollReplyUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KFCEnrollReplyUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KFCEnrollReplyUserCmd) ProtoMessage() {}

func (x *KFCEnrollReplyUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KFCEnrollReplyUserCmd.ProtoReflect.Descriptor instead.
func (*KFCEnrollReplyUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{130}
}

func (x *KFCEnrollReplyUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_KFCEnrollReplyUserCmd_Cmd
}

func (x *KFCEnrollReplyUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_KFCEnrollReplyUserCmd_Param
}

func (x *KFCEnrollReplyUserCmd) GetResult() EnrollResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_KFCEnrollReplyUserCmd_Result
}

func (x *KFCEnrollReplyUserCmd) GetDistrict() string {
	if x != nil && x.District != nil {
		return *x.District
	}
	return ""
}

func (x *KFCEnrollReplyUserCmd) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type KFCEnrollQueryUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=167" json:"param,omitempty"`
}

// Default values for KFCEnrollQueryUserCmd fields.
const (
	Default_KFCEnrollQueryUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_KFCEnrollQueryUserCmd_Param = User2Param_USER2PARAM_KFC_ENROLL_QUERY
)

func (x *KFCEnrollQueryUserCmd) Reset() {
	*x = KFCEnrollQueryUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KFCEnrollQueryUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KFCEnrollQueryUserCmd) ProtoMessage() {}

func (x *KFCEnrollQueryUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KFCEnrollQueryUserCmd.ProtoReflect.Descriptor instead.
func (*KFCEnrollQueryUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{131}
}

func (x *KFCEnrollQueryUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_KFCEnrollQueryUserCmd_Cmd
}

func (x *KFCEnrollQueryUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_KFCEnrollQueryUserCmd_Param
}

type KFCHasEnrolledUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param       *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=166" json:"param,omitempty"`
	Hasenrolled *bool       `protobuf:"varint,3,opt,name=hasenrolled,def=0" json:"hasenrolled,omitempty"`
}

// Default values for KFCHasEnrolledUserCmd fields.
const (
	Default_KFCHasEnrolledUserCmd_Cmd         = Command_SCENE_USER2_PROTOCMD
	Default_KFCHasEnrolledUserCmd_Param       = User2Param_USER2PARAM_KFC_HAS_ENROLLED
	Default_KFCHasEnrolledUserCmd_Hasenrolled = bool(false)
)

func (x *KFCHasEnrolledUserCmd) Reset() {
	*x = KFCHasEnrolledUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KFCHasEnrolledUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KFCHasEnrolledUserCmd) ProtoMessage() {}

func (x *KFCHasEnrolledUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KFCHasEnrolledUserCmd.ProtoReflect.Descriptor instead.
func (*KFCHasEnrolledUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{132}
}

func (x *KFCHasEnrolledUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_KFCHasEnrolledUserCmd_Cmd
}

func (x *KFCHasEnrolledUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_KFCHasEnrolledUserCmd_Param
}

func (x *KFCHasEnrolledUserCmd) GetHasenrolled() bool {
	if x != nil && x.Hasenrolled != nil {
		return *x.Hasenrolled
	}
	return Default_KFCHasEnrolledUserCmd_Hasenrolled
}

type CheckRelationUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param      `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=130" json:"param,omitempty"`
	Charid *uint64          `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Etype  *ESocialRelation `protobuf:"varint,4,opt,name=etype,enum=Cmd.ESocialRelation,def=1" json:"etype,omitempty"`
	Ret    *bool            `protobuf:"varint,5,opt,name=ret,def=0" json:"ret,omitempty"`
}

// Default values for CheckRelationUserCmd fields.
const (
	Default_CheckRelationUserCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_CheckRelationUserCmd_Param  = User2Param_USER2PARAM_CHECK_RELATION
	Default_CheckRelationUserCmd_Charid = uint64(0)
	Default_CheckRelationUserCmd_Etype  = ESocialRelation_ESOCIALRELATION_MIN
	Default_CheckRelationUserCmd_Ret    = bool(false)
)

func (x *CheckRelationUserCmd) Reset() {
	*x = CheckRelationUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRelationUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRelationUserCmd) ProtoMessage() {}

func (x *CheckRelationUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRelationUserCmd.ProtoReflect.Descriptor instead.
func (*CheckRelationUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{133}
}

func (x *CheckRelationUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CheckRelationUserCmd_Cmd
}

func (x *CheckRelationUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CheckRelationUserCmd_Param
}

func (x *CheckRelationUserCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_CheckRelationUserCmd_Charid
}

func (x *CheckRelationUserCmd) GetEtype() ESocialRelation {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_CheckRelationUserCmd_Etype
}

func (x *CheckRelationUserCmd) GetRet() bool {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return Default_CheckRelationUserCmd_Ret
}

type TwinsActionUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param      `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=129" json:"param,omitempty"`
	Userid   *uint64          `protobuf:"varint,3,opt,name=userid,def=0" json:"userid,omitempty"`
	Actionid *uint32          `protobuf:"varint,4,opt,name=actionid,def=0" json:"actionid,omitempty"`
	Etype    *ETwinsOperation `protobuf:"varint,5,opt,name=etype,enum=Cmd.ETwinsOperation,def=0" json:"etype,omitempty"`
	Sponsor  *bool            `protobuf:"varint,6,opt,name=sponsor,def=1" json:"sponsor,omitempty"`
}

// Default values for TwinsActionUserCmd fields.
const (
	Default_TwinsActionUserCmd_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_TwinsActionUserCmd_Param    = User2Param_USER2PARAM_TWINS_ACTION
	Default_TwinsActionUserCmd_Userid   = uint64(0)
	Default_TwinsActionUserCmd_Actionid = uint32(0)
	Default_TwinsActionUserCmd_Etype    = ETwinsOperation_ETWINS_OPERATION_MIN
	Default_TwinsActionUserCmd_Sponsor  = bool(true)
)

func (x *TwinsActionUserCmd) Reset() {
	*x = TwinsActionUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwinsActionUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwinsActionUserCmd) ProtoMessage() {}

func (x *TwinsActionUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwinsActionUserCmd.ProtoReflect.Descriptor instead.
func (*TwinsActionUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{134}
}

func (x *TwinsActionUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwinsActionUserCmd_Cmd
}

func (x *TwinsActionUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwinsActionUserCmd_Param
}

func (x *TwinsActionUserCmd) GetUserid() uint64 {
	if x != nil && x.Userid != nil {
		return *x.Userid
	}
	return Default_TwinsActionUserCmd_Userid
}

func (x *TwinsActionUserCmd) GetActionid() uint32 {
	if x != nil && x.Actionid != nil {
		return *x.Actionid
	}
	return Default_TwinsActionUserCmd_Actionid
}

func (x *TwinsActionUserCmd) GetEtype() ETwinsOperation {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_TwinsActionUserCmd_Etype
}

func (x *TwinsActionUserCmd) GetSponsor() bool {
	if x != nil && x.Sponsor != nil {
		return *x.Sponsor
	}
	return Default_TwinsActionUserCmd_Sponsor
}

type ShowServantUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=122" json:"param,omitempty"`
	Show  *bool       `protobuf:"varint,3,opt,name=show" json:"show,omitempty"`
}

// Default values for ShowServantUserCmd fields.
const (
	Default_ShowServantUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ShowServantUserCmd_Param = User2Param_USER2PARAM_SERVANT_SHOW
)

func (x *ShowServantUserCmd) Reset() {
	*x = ShowServantUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowServantUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowServantUserCmd) ProtoMessage() {}

func (x *ShowServantUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowServantUserCmd.ProtoReflect.Descriptor instead.
func (*ShowServantUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{135}
}

func (x *ShowServantUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ShowServantUserCmd_Cmd
}

func (x *ShowServantUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ShowServantUserCmd_Param
}

func (x *ShowServantUserCmd) GetShow() bool {
	if x != nil && x.Show != nil {
		return *x.Show
	}
	return false
}

type ReplaceServantUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=123" json:"param,omitempty"`
	Replace *bool       `protobuf:"varint,3,opt,name=replace" json:"replace,omitempty"`
	Servant *uint32     `protobuf:"varint,4,opt,name=servant,def=0" json:"servant,omitempty"`
}

// Default values for ReplaceServantUserCmd fields.
const (
	Default_ReplaceServantUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_ReplaceServantUserCmd_Param   = User2Param_USER2PARAM_SERVANT_REPLACE
	Default_ReplaceServantUserCmd_Servant = uint32(0)
)

func (x *ReplaceServantUserCmd) Reset() {
	*x = ReplaceServantUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceServantUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceServantUserCmd) ProtoMessage() {}

func (x *ReplaceServantUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceServantUserCmd.ProtoReflect.Descriptor instead.
func (*ReplaceServantUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{136}
}

func (x *ReplaceServantUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReplaceServantUserCmd_Cmd
}

func (x *ReplaceServantUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReplaceServantUserCmd_Param
}

func (x *ReplaceServantUserCmd) GetReplace() bool {
	if x != nil && x.Replace != nil {
		return *x.Replace
	}
	return false
}

func (x *ReplaceServantUserCmd) GetServant() uint32 {
	if x != nil && x.Servant != nil {
		return *x.Servant
	}
	return Default_ReplaceServantUserCmd_Servant
}

type HireServantUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=255" json:"param,omitempty"`
	Servant *uint32     `protobuf:"varint,3,opt,name=servant,def=0" json:"servant,omitempty"`
}

// Default values for HireServantUserCmd fields.
const (
	Default_HireServantUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_HireServantUserCmd_Param   = User2Param_USER2PARAM_HIRE_SERVANT_FIRST
	Default_HireServantUserCmd_Servant = uint32(0)
)

func (x *HireServantUserCmd) Reset() {
	*x = HireServantUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HireServantUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HireServantUserCmd) ProtoMessage() {}

func (x *HireServantUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HireServantUserCmd.ProtoReflect.Descriptor instead.
func (*HireServantUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{137}
}

func (x *HireServantUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HireServantUserCmd_Cmd
}

func (x *HireServantUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HireServantUserCmd_Param
}

func (x *HireServantUserCmd) GetServant() uint32 {
	if x != nil && x.Servant != nil {
		return *x.Servant
	}
	return Default_HireServantUserCmd_Servant
}

type ServantService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param      `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=124" json:"param,omitempty"`
	Type  *EServantService `protobuf:"varint,3,opt,name=type,enum=Cmd.EServantService,def=1" json:"type,omitempty"`
}

// Default values for ServantService fields.
const (
	Default_ServantService_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ServantService_Param = User2Param_USER2PARAM_SERVANT_SERVICE
	Default_ServantService_Type  = EServantService_ESERVANT_SERVICE_RECOMMEND
)

func (x *ServantService) Reset() {
	*x = ServantService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServantService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServantService) ProtoMessage() {}

func (x *ServantService) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServantService.ProtoReflect.Descriptor instead.
func (*ServantService) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{138}
}

func (x *ServantService) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ServantService_Cmd
}

func (x *ServantService) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ServantService_Param
}

func (x *ServantService) GetType() EServantService {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ServantService_Type
}

type RecommendItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dwid        *uint32           `protobuf:"varint,1,opt,name=dwid,def=0" json:"dwid,omitempty"`
	Finishtimes *uint32           `protobuf:"varint,2,opt,name=finishtimes,def=0" json:"finishtimes,omitempty"`
	Status      *ERecommendStatus `protobuf:"varint,3,opt,name=status,enum=Cmd.ERecommendStatus,def=0" json:"status,omitempty"`
	Realopen    *bool             `protobuf:"varint,4,opt,name=realopen,def=0" json:"realopen,omitempty"`
}

// Default values for RecommendItemInfo fields.
const (
	Default_RecommendItemInfo_Dwid        = uint32(0)
	Default_RecommendItemInfo_Finishtimes = uint32(0)
	Default_RecommendItemInfo_Status      = ERecommendStatus_ERECOMMEND_STATUS_MIN
	Default_RecommendItemInfo_Realopen    = bool(false)
)

func (x *RecommendItemInfo) Reset() {
	*x = RecommendItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendItemInfo) ProtoMessage() {}

func (x *RecommendItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendItemInfo.ProtoReflect.Descriptor instead.
func (*RecommendItemInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{139}
}

func (x *RecommendItemInfo) GetDwid() uint32 {
	if x != nil && x.Dwid != nil {
		return *x.Dwid
	}
	return Default_RecommendItemInfo_Dwid
}

func (x *RecommendItemInfo) GetFinishtimes() uint32 {
	if x != nil && x.Finishtimes != nil {
		return *x.Finishtimes
	}
	return Default_RecommendItemInfo_Finishtimes
}

func (x *RecommendItemInfo) GetStatus() ERecommendStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_RecommendItemInfo_Status
}

func (x *RecommendItemInfo) GetRealopen() bool {
	if x != nil && x.Realopen != nil {
		return *x.Realopen
	}
	return Default_RecommendItemInfo_Realopen
}

type RecommendServantUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param          `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=125" json:"param,omitempty"`
	Items []*RecommendItemInfo `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for RecommendServantUserCmd fields.
const (
	Default_RecommendServantUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_RecommendServantUserCmd_Param = User2Param_USER2PARAM_SERVANT_RECOMMEND
)

func (x *RecommendServantUserCmd) Reset() {
	*x = RecommendServantUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendServantUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendServantUserCmd) ProtoMessage() {}

func (x *RecommendServantUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendServantUserCmd.ProtoReflect.Descriptor instead.
func (*RecommendServantUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{140}
}

func (x *RecommendServantUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RecommendServantUserCmd_Cmd
}

func (x *RecommendServantUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RecommendServantUserCmd_Param
}

func (x *RecommendServantUserCmd) GetItems() []*RecommendItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type ReceiveServantUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param        *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=126" json:"param,omitempty"`
	Favorability *bool       `protobuf:"varint,3,opt,name=favorability,def=0" json:"favorability,omitempty"`
	Dwid         *uint32     `protobuf:"varint,4,opt,name=dwid" json:"dwid,omitempty"`
}

// Default values for ReceiveServantUserCmd fields.
const (
	Default_ReceiveServantUserCmd_Cmd          = Command_SCENE_USER2_PROTOCMD
	Default_ReceiveServantUserCmd_Param        = User2Param_USER2PARAM_SERVANT_RECEIVE
	Default_ReceiveServantUserCmd_Favorability = bool(false)
)

func (x *ReceiveServantUserCmd) Reset() {
	*x = ReceiveServantUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveServantUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveServantUserCmd) ProtoMessage() {}

func (x *ReceiveServantUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveServantUserCmd.ProtoReflect.Descriptor instead.
func (*ReceiveServantUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{141}
}

func (x *ReceiveServantUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReceiveServantUserCmd_Cmd
}

func (x *ReceiveServantUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReceiveServantUserCmd_Param
}

func (x *ReceiveServantUserCmd) GetFavorability() bool {
	if x != nil && x.Favorability != nil {
		return *x.Favorability
	}
	return Default_ReceiveServantUserCmd_Favorability
}

func (x *ReceiveServantUserCmd) GetDwid() uint32 {
	if x != nil && x.Dwid != nil {
		return *x.Dwid
	}
	return 0
}

type FavorabilityStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Favorability *uint32 `protobuf:"varint,1,opt,name=favorability,def=0" json:"favorability,omitempty"`
	Status       *uint32 `protobuf:"varint,2,opt,name=status,def=0" json:"status,omitempty"`
}

// Default values for FavorabilityStatus fields.
const (
	Default_FavorabilityStatus_Favorability = uint32(0)
	Default_FavorabilityStatus_Status       = uint32(0)
)

func (x *FavorabilityStatus) Reset() {
	*x = FavorabilityStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FavorabilityStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavorabilityStatus) ProtoMessage() {}

func (x *FavorabilityStatus) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavorabilityStatus.ProtoReflect.Descriptor instead.
func (*FavorabilityStatus) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{142}
}

func (x *FavorabilityStatus) GetFavorability() uint32 {
	if x != nil && x.Favorability != nil {
		return *x.Favorability
	}
	return Default_FavorabilityStatus_Favorability
}

func (x *FavorabilityStatus) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_FavorabilityStatus_Status
}

type ServantRewardStatusUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param           `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=127" json:"param,omitempty"`
	Items    []*FavorabilityStatus `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	Stayfavo *uint32               `protobuf:"varint,4,opt,name=stayfavo,def=0" json:"stayfavo,omitempty"`
}

// Default values for ServantRewardStatusUserCmd fields.
const (
	Default_ServantRewardStatusUserCmd_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_ServantRewardStatusUserCmd_Param    = User2Param_USER2PARAM_SERVANT_REWARD_STATUS
	Default_ServantRewardStatusUserCmd_Stayfavo = uint32(0)
)

func (x *ServantRewardStatusUserCmd) Reset() {
	*x = ServantRewardStatusUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServantRewardStatusUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServantRewardStatusUserCmd) ProtoMessage() {}

func (x *ServantRewardStatusUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServantRewardStatusUserCmd.ProtoReflect.Descriptor instead.
func (*ServantRewardStatusUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{143}
}

func (x *ServantRewardStatusUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ServantRewardStatusUserCmd_Cmd
}

func (x *ServantRewardStatusUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ServantRewardStatusUserCmd_Param
}

func (x *ServantRewardStatusUserCmd) GetItems() []*FavorabilityStatus {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ServantRewardStatusUserCmd) GetStayfavo() uint32 {
	if x != nil && x.Stayfavo != nil {
		return *x.Stayfavo
	}
	return Default_ServantRewardStatusUserCmd_Stayfavo
}

type ProfessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch     *uint32 `protobuf:"varint,1,opt,name=branch" json:"branch,omitempty"`
	Profession *uint32 `protobuf:"varint,2,opt,name=profession" json:"profession,omitempty"`
	Joblv      *uint32 `protobuf:"varint,3,opt,name=joblv" json:"joblv,omitempty"`
	Iscurrent  *bool   `protobuf:"varint,4,opt,name=iscurrent,def=0" json:"iscurrent,omitempty"`
	Isbuy      *bool   `protobuf:"varint,5,opt,name=isbuy,def=0" json:"isbuy,omitempty"`
}

// Default values for ProfessionInfo fields.
const (
	Default_ProfessionInfo_Iscurrent = bool(false)
	Default_ProfessionInfo_Isbuy     = bool(false)
)

func (x *ProfessionInfo) Reset() {
	*x = ProfessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfessionInfo) ProtoMessage() {}

func (x *ProfessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfessionInfo.ProtoReflect.Descriptor instead.
func (*ProfessionInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{144}
}

func (x *ProfessionInfo) GetBranch() uint32 {
	if x != nil && x.Branch != nil {
		return *x.Branch
	}
	return 0
}

func (x *ProfessionInfo) GetProfession() uint32 {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return 0
}

func (x *ProfessionInfo) GetJoblv() uint32 {
	if x != nil && x.Joblv != nil {
		return *x.Joblv
	}
	return 0
}

func (x *ProfessionInfo) GetIscurrent() bool {
	if x != nil && x.Iscurrent != nil {
		return *x.Iscurrent
	}
	return Default_ProfessionInfo_Iscurrent
}

func (x *ProfessionInfo) GetIsbuy() bool {
	if x != nil && x.Isbuy != nil {
		return *x.Isbuy
	}
	return Default_ProfessionInfo_Isbuy
}

type RaceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Race *ECharRace `protobuf:"varint,1,opt,name=race,enum=Cmd.ECharRace" json:"race,omitempty"`
	Hair *uint32    `protobuf:"varint,2,opt,name=hair" json:"hair,omitempty"`
	Eye  *uint32    `protobuf:"varint,3,opt,name=eye" json:"eye,omitempty"`
}

func (x *RaceData) Reset() {
	*x = RaceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceData) ProtoMessage() {}

func (x *RaceData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceData.ProtoReflect.Descriptor instead.
func (*RaceData) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{145}
}

func (x *RaceData) GetRace() ECharRace {
	if x != nil && x.Race != nil {
		return *x.Race
	}
	return ECharRace_ECHARRACE_MIN
}

func (x *RaceData) GetHair() uint32 {
	if x != nil && x.Hair != nil {
		return *x.Hair
	}
	return 0
}

func (x *RaceData) GetEye() uint32 {
	if x != nil && x.Eye != nil {
		return *x.Eye
	}
	return 0
}

type ProfessionQueryUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param       `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=131" json:"param,omitempty"`
	Items     []*ProfessionInfo `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	Datas     []*RaceData       `protobuf:"bytes,4,rep,name=datas" json:"datas,omitempty"`
	Curbranch *uint32           `protobuf:"varint,5,opt,name=curbranch" json:"curbranch,omitempty"`
}

// Default values for ProfessionQueryUserCmd fields.
const (
	Default_ProfessionQueryUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ProfessionQueryUserCmd_Param = User2Param_USER2PARAM_PROFESSION_QUERY
)

func (x *ProfessionQueryUserCmd) Reset() {
	*x = ProfessionQueryUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfessionQueryUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfessionQueryUserCmd) ProtoMessage() {}

func (x *ProfessionQueryUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfessionQueryUserCmd.ProtoReflect.Descriptor instead.
func (*ProfessionQueryUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{146}
}

func (x *ProfessionQueryUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ProfessionQueryUserCmd_Cmd
}

func (x *ProfessionQueryUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ProfessionQueryUserCmd_Param
}

func (x *ProfessionQueryUserCmd) GetItems() []*ProfessionInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ProfessionQueryUserCmd) GetDatas() []*RaceData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *ProfessionQueryUserCmd) GetCurbranch() uint32 {
	if x != nil && x.Curbranch != nil {
		return *x.Curbranch
	}
	return 0
}

type ProfessionBuyUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=132" json:"param,omitempty"`
	Branch    *uint32     `protobuf:"varint,3,opt,name=branch" json:"branch,omitempty"`
	Success   *bool       `protobuf:"varint,4,opt,name=success,def=1" json:"success,omitempty"`
	Onlymoney *bool       `protobuf:"varint,5,opt,name=onlymoney,def=0" json:"onlymoney,omitempty"`
}

// Default values for ProfessionBuyUserCmd fields.
const (
	Default_ProfessionBuyUserCmd_Cmd       = Command_SCENE_USER2_PROTOCMD
	Default_ProfessionBuyUserCmd_Param     = User2Param_USER2PARAM_PROFESSION_BUY
	Default_ProfessionBuyUserCmd_Success   = bool(true)
	Default_ProfessionBuyUserCmd_Onlymoney = bool(false)
)

func (x *ProfessionBuyUserCmd) Reset() {
	*x = ProfessionBuyUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfessionBuyUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfessionBuyUserCmd) ProtoMessage() {}

func (x *ProfessionBuyUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfessionBuyUserCmd.ProtoReflect.Descriptor instead.
func (*ProfessionBuyUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{147}
}

func (x *ProfessionBuyUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ProfessionBuyUserCmd_Cmd
}

func (x *ProfessionBuyUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ProfessionBuyUserCmd_Param
}

func (x *ProfessionBuyUserCmd) GetBranch() uint32 {
	if x != nil && x.Branch != nil {
		return *x.Branch
	}
	return 0
}

func (x *ProfessionBuyUserCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_ProfessionBuyUserCmd_Success
}

func (x *ProfessionBuyUserCmd) GetOnlymoney() bool {
	if x != nil && x.Onlymoney != nil {
		return *x.Onlymoney
	}
	return Default_ProfessionBuyUserCmd_Onlymoney
}

type ProfessionChangeUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=133" json:"param,omitempty"`
	Branch  *uint32     `protobuf:"varint,3,opt,name=branch" json:"branch,omitempty"`
	Success *bool       `protobuf:"varint,4,opt,name=success,def=1" json:"success,omitempty"`
}

// Default values for ProfessionChangeUserCmd fields.
const (
	Default_ProfessionChangeUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_ProfessionChangeUserCmd_Param   = User2Param_USER2PARAM_PROFESSION_CHANGE
	Default_ProfessionChangeUserCmd_Success = bool(true)
)

func (x *ProfessionChangeUserCmd) Reset() {
	*x = ProfessionChangeUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfessionChangeUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfessionChangeUserCmd) ProtoMessage() {}

func (x *ProfessionChangeUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfessionChangeUserCmd.ProtoReflect.Descriptor instead.
func (*ProfessionChangeUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{148}
}

func (x *ProfessionChangeUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ProfessionChangeUserCmd_Cmd
}

func (x *ProfessionChangeUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ProfessionChangeUserCmd_Param
}

func (x *ProfessionChangeUserCmd) GetBranch() uint32 {
	if x != nil && x.Branch != nil {
		return *x.Branch
	}
	return 0
}

func (x *ProfessionChangeUserCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_ProfessionChangeUserCmd_Success
}

type AstrolabeProfessionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stars []uint32 `protobuf:"varint,2,rep,name=stars" json:"stars,omitempty"`
}

func (x *AstrolabeProfessionData) Reset() {
	*x = AstrolabeProfessionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AstrolabeProfessionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AstrolabeProfessionData) ProtoMessage() {}

func (x *AstrolabeProfessionData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AstrolabeProfessionData.ProtoReflect.Descriptor instead.
func (*AstrolabeProfessionData) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{149}
}

func (x *AstrolabeProfessionData) GetStars() []uint32 {
	if x != nil {
		return x.Stars
	}
	return nil
}

type AttrProfessionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attrs []*UserAttr `protobuf:"bytes,1,rep,name=attrs" json:"attrs,omitempty"`
	Datas []*UserData `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
}

func (x *AttrProfessionData) Reset() {
	*x = AttrProfessionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttrProfessionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrProfessionData) ProtoMessage() {}

func (x *AttrProfessionData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrProfessionData.ProtoReflect.Descriptor instead.
func (*AttrProfessionData) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{150}
}

func (x *AttrProfessionData) GetAttrs() []*UserAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *AttrProfessionData) GetDatas() []*UserData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type EquipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos    *uint32 `protobuf:"varint,1,opt,name=pos" json:"pos,omitempty"`
	TypeId *uint32 `protobuf:"varint,2,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	Guid   *string `protobuf:"bytes,3,opt,name=guid" json:"guid,omitempty"`
}

func (x *EquipInfo) Reset() {
	*x = EquipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipInfo) ProtoMessage() {}

func (x *EquipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipInfo.ProtoReflect.Descriptor instead.
func (*EquipInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{151}
}

func (x *EquipInfo) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *EquipInfo) GetTypeId() uint32 {
	if x != nil && x.TypeId != nil {
		return *x.TypeId
	}
	return 0
}

func (x *EquipInfo) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

type EquipPackData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *uint32      `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Datas []*EquipInfo `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
}

func (x *EquipPackData) Reset() {
	*x = EquipPackData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipPackData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipPackData) ProtoMessage() {}

func (x *EquipPackData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipPackData.ProtoReflect.Descriptor instead.
func (*EquipPackData) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{152}
}

func (x *EquipPackData) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *EquipPackData) GetDatas() []*EquipInfo {
	if x != nil {
		return x.Datas
	}
	return nil
}

type SkillValidPosData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos       []uint32 `protobuf:"varint,1,rep,name=pos" json:"pos,omitempty"`
	Autopos   []uint32 `protobuf:"varint,2,rep,name=autopos" json:"autopos,omitempty"`
	Extendpos []uint32 `protobuf:"varint,3,rep,name=extendpos" json:"extendpos,omitempty"`
}

func (x *SkillValidPosData) Reset() {
	*x = SkillValidPosData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillValidPosData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillValidPosData) ProtoMessage() {}

func (x *SkillValidPosData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillValidPosData.ProtoReflect.Descriptor instead.
func (*SkillValidPosData) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{153}
}

func (x *SkillValidPosData) GetPos() []uint32 {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SkillValidPosData) GetAutopos() []uint32 {
	if x != nil {
		return x.Autopos
	}
	return nil
}

func (x *SkillValidPosData) GetExtendpos() []uint32 {
	if x != nil {
		return x.Extendpos
	}
	return nil
}

type SkillProfessionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftPoint  *uint32            `protobuf:"varint,1,opt,name=left_point,json=leftPoint" json:"left_point,omitempty"`
	Datas      []*SkillData       `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
	NoviceData *SkillData         `protobuf:"bytes,3,opt,name=novice_data,json=noviceData" json:"novice_data,omitempty"`
	Beings     []*BeingSkillData  `protobuf:"bytes,4,rep,name=beings" json:"beings,omitempty"`
	Curbeingid *uint32            `protobuf:"varint,5,opt,name=curbeingid" json:"curbeingid,omitempty"`
	Beinginfos []*BeingInfo       `protobuf:"bytes,6,rep,name=beinginfos" json:"beinginfos,omitempty"`
	Skillpos   *SkillValidPosData `protobuf:"bytes,7,opt,name=skillpos" json:"skillpos,omitempty"`
	Shortcut   *SkillValidPos     `protobuf:"bytes,8,opt,name=shortcut" json:"shortcut,omitempty"`
}

func (x *SkillProfessionData) Reset() {
	*x = SkillProfessionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkillProfessionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillProfessionData) ProtoMessage() {}

func (x *SkillProfessionData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillProfessionData.ProtoReflect.Descriptor instead.
func (*SkillProfessionData) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{154}
}

func (x *SkillProfessionData) GetLeftPoint() uint32 {
	if x != nil && x.LeftPoint != nil {
		return *x.LeftPoint
	}
	return 0
}

func (x *SkillProfessionData) GetDatas() []*SkillData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *SkillProfessionData) GetNoviceData() *SkillData {
	if x != nil {
		return x.NoviceData
	}
	return nil
}

func (x *SkillProfessionData) GetBeings() []*BeingSkillData {
	if x != nil {
		return x.Beings
	}
	return nil
}

func (x *SkillProfessionData) GetCurbeingid() uint32 {
	if x != nil && x.Curbeingid != nil {
		return *x.Curbeingid
	}
	return 0
}

func (x *SkillProfessionData) GetBeinginfos() []*BeingInfo {
	if x != nil {
		return x.Beinginfos
	}
	return nil
}

func (x *SkillProfessionData) GetSkillpos() *SkillValidPosData {
	if x != nil {
		return x.Skillpos
	}
	return nil
}

func (x *SkillProfessionData) GetShortcut() *SkillValidPos {
	if x != nil {
		return x.Shortcut
	}
	return nil
}

type ProfessionUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *uint32                  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Profession     *uint32                  `protobuf:"varint,2,opt,name=profession" json:"profession,omitempty"`
	Joblv          *uint32                  `protobuf:"varint,3,opt,name=joblv,def=0" json:"joblv,omitempty"`
	Jobexp         *uint32                  `protobuf:"varint,4,opt,name=jobexp,def=0" json:"jobexp,omitempty"`
	Type           *EProfessionDataType     `protobuf:"varint,5,opt,name=type,enum=Cmd.EProfessionDataType,def=1" json:"type,omitempty"`
	Recordname     *string                  `protobuf:"bytes,6,opt,name=recordname" json:"recordname,omitempty"`
	Recordtime     *uint32                  `protobuf:"varint,7,opt,name=recordtime" json:"recordtime,omitempty"`
	Charid         *uint64                  `protobuf:"varint,8,opt,name=charid" json:"charid,omitempty"`
	Charname       *string                  `protobuf:"bytes,9,opt,name=charname" json:"charname,omitempty"`
	AttrData       *AttrProfessionData      `protobuf:"bytes,10,opt,name=attr_data,json=attrData" json:"attr_data,omitempty"`
	EquipData      []*EquipPackData         `protobuf:"bytes,11,rep,name=equip_data,json=equipData" json:"equip_data,omitempty"`
	AstrolabeData  *AstrolabeProfessionData `protobuf:"bytes,12,opt,name=astrolabe_data,json=astrolabeData" json:"astrolabe_data,omitempty"`
	SkillData      *SkillProfessionData     `protobuf:"bytes,13,opt,name=skill_data,json=skillData" json:"skill_data,omitempty"`
	Isfirst        *bool                    `protobuf:"varint,14,opt,name=isfirst,def=1" json:"isfirst,omitempty"`
	Isbuy          *bool                    `protobuf:"varint,15,opt,name=isbuy,def=0" json:"isbuy,omitempty"`
	GemData        []*ItemData              `protobuf:"bytes,16,rep,name=gem_data,json=gemData" json:"gem_data,omitempty"`
	Multiskillopts []*MultiSkillOption      `protobuf:"bytes,17,rep,name=multiskillopts" json:"multiskillopts,omitempty"`
}

// Default values for ProfessionUserInfo fields.
const (
	Default_ProfessionUserInfo_Joblv   = uint32(0)
	Default_ProfessionUserInfo_Jobexp  = uint32(0)
	Default_ProfessionUserInfo_Type    = EProfessionDataType_ETypeBranch
	Default_ProfessionUserInfo_Isfirst = bool(true)
	Default_ProfessionUserInfo_Isbuy   = bool(false)
)

func (x *ProfessionUserInfo) Reset() {
	*x = ProfessionUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfessionUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfessionUserInfo) ProtoMessage() {}

func (x *ProfessionUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfessionUserInfo.ProtoReflect.Descriptor instead.
func (*ProfessionUserInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{155}
}

func (x *ProfessionUserInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ProfessionUserInfo) GetProfession() uint32 {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return 0
}

func (x *ProfessionUserInfo) GetJoblv() uint32 {
	if x != nil && x.Joblv != nil {
		return *x.Joblv
	}
	return Default_ProfessionUserInfo_Joblv
}

func (x *ProfessionUserInfo) GetJobexp() uint32 {
	if x != nil && x.Jobexp != nil {
		return *x.Jobexp
	}
	return Default_ProfessionUserInfo_Jobexp
}

func (x *ProfessionUserInfo) GetType() EProfessionDataType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ProfessionUserInfo_Type
}

func (x *ProfessionUserInfo) GetRecordname() string {
	if x != nil && x.Recordname != nil {
		return *x.Recordname
	}
	return ""
}

func (x *ProfessionUserInfo) GetRecordtime() uint32 {
	if x != nil && x.Recordtime != nil {
		return *x.Recordtime
	}
	return 0
}

func (x *ProfessionUserInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *ProfessionUserInfo) GetCharname() string {
	if x != nil && x.Charname != nil {
		return *x.Charname
	}
	return ""
}

func (x *ProfessionUserInfo) GetAttrData() *AttrProfessionData {
	if x != nil {
		return x.AttrData
	}
	return nil
}

func (x *ProfessionUserInfo) GetEquipData() []*EquipPackData {
	if x != nil {
		return x.EquipData
	}
	return nil
}

func (x *ProfessionUserInfo) GetAstrolabeData() *AstrolabeProfessionData {
	if x != nil {
		return x.AstrolabeData
	}
	return nil
}

func (x *ProfessionUserInfo) GetSkillData() *SkillProfessionData {
	if x != nil {
		return x.SkillData
	}
	return nil
}

func (x *ProfessionUserInfo) GetIsfirst() bool {
	if x != nil && x.Isfirst != nil {
		return *x.Isfirst
	}
	return Default_ProfessionUserInfo_Isfirst
}

func (x *ProfessionUserInfo) GetIsbuy() bool {
	if x != nil && x.Isbuy != nil {
		return *x.Isbuy
	}
	return Default_ProfessionUserInfo_Isbuy
}

func (x *ProfessionUserInfo) GetGemData() []*ItemData {
	if x != nil {
		return x.GemData
	}
	return nil
}

func (x *ProfessionUserInfo) GetMultiskillopts() []*MultiSkillOption {
	if x != nil {
		return x.Multiskillopts
	}
	return nil
}

type SlotInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *uint32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type    *ESlotType `protobuf:"varint,2,opt,name=type,enum=Cmd.ESlotType,def=1" json:"type,omitempty"`
	Active  *bool      `protobuf:"varint,3,opt,name=active,def=0" json:"active,omitempty"`
	Costid  *uint32    `protobuf:"varint,4,opt,name=costid" json:"costid,omitempty"`
	Costnum *uint32    `protobuf:"varint,5,opt,name=costnum" json:"costnum,omitempty"`
}

// Default values for SlotInfo fields.
const (
	Default_SlotInfo_Type   = ESlotType_ESLOT_DEFAULT
	Default_SlotInfo_Active = bool(false)
)

func (x *SlotInfo) Reset() {
	*x = SlotInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotInfo) ProtoMessage() {}

func (x *SlotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotInfo.ProtoReflect.Descriptor instead.
func (*SlotInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{156}
}

func (x *SlotInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SlotInfo) GetType() ESlotType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_SlotInfo_Type
}

func (x *SlotInfo) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return Default_SlotInfo_Active
}

func (x *SlotInfo) GetCostid() uint32 {
	if x != nil && x.Costid != nil {
		return *x.Costid
	}
	return 0
}

func (x *SlotInfo) GetCostnum() uint32 {
	if x != nil && x.Costnum != nil {
		return *x.Costnum
	}
	return 0
}

type UserAstrolMaterialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid    *uint64              `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Materials []*AstrolabeCostData `protobuf:"bytes,2,rep,name=materials" json:"materials,omitempty"`
}

func (x *UserAstrolMaterialData) Reset() {
	*x = UserAstrolMaterialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAstrolMaterialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAstrolMaterialData) ProtoMessage() {}

func (x *UserAstrolMaterialData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAstrolMaterialData.ProtoReflect.Descriptor instead.
func (*UserAstrolMaterialData) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{157}
}

func (x *UserAstrolMaterialData) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *UserAstrolMaterialData) GetMaterials() []*AstrolabeCostData {
	if x != nil {
		return x.Materials
	}
	return nil
}

type UpdateRecordInfoUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command                  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param          *User2Param               `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=134" json:"param,omitempty"`
	Slots          []*SlotInfo               `protobuf:"bytes,3,rep,name=slots" json:"slots,omitempty"`
	Records        []*ProfessionUserInfo     `protobuf:"bytes,4,rep,name=records" json:"records,omitempty"`
	DeleteIds      []uint32                  `protobuf:"varint,5,rep,name=delete_ids,json=deleteIds" json:"delete_ids,omitempty"`
	CardExpiretime *uint32                   `protobuf:"varint,6,opt,name=card_expiretime,json=cardExpiretime" json:"card_expiretime,omitempty"`
	AstrolData     []*UserAstrolMaterialData `protobuf:"bytes,7,rep,name=astrol_data,json=astrolData" json:"astrol_data,omitempty"`
}

// Default values for UpdateRecordInfoUserCmd fields.
const (
	Default_UpdateRecordInfoUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_UpdateRecordInfoUserCmd_Param = User2Param_USER2PARAM_UPDATE_RECORD_INFO
)

func (x *UpdateRecordInfoUserCmd) Reset() {
	*x = UpdateRecordInfoUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecordInfoUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordInfoUserCmd) ProtoMessage() {}

func (x *UpdateRecordInfoUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordInfoUserCmd.ProtoReflect.Descriptor instead.
func (*UpdateRecordInfoUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{158}
}

func (x *UpdateRecordInfoUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateRecordInfoUserCmd_Cmd
}

func (x *UpdateRecordInfoUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateRecordInfoUserCmd_Param
}

func (x *UpdateRecordInfoUserCmd) GetSlots() []*SlotInfo {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *UpdateRecordInfoUserCmd) GetRecords() []*ProfessionUserInfo {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *UpdateRecordInfoUserCmd) GetDeleteIds() []uint32 {
	if x != nil {
		return x.DeleteIds
	}
	return nil
}

func (x *UpdateRecordInfoUserCmd) GetCardExpiretime() uint32 {
	if x != nil && x.CardExpiretime != nil {
		return *x.CardExpiretime
	}
	return 0
}

func (x *UpdateRecordInfoUserCmd) GetAstrolData() []*UserAstrolMaterialData {
	if x != nil {
		return x.AstrolData
	}
	return nil
}

type SaveRecordUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=135" json:"param,omitempty"`
	Slotid     *uint32     `protobuf:"varint,3,opt,name=slotid" json:"slotid,omitempty"`
	RecordName *string     `protobuf:"bytes,4,opt,name=record_name,json=recordName" json:"record_name,omitempty"`
}

// Default values for SaveRecordUserCmd fields.
const (
	Default_SaveRecordUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_SaveRecordUserCmd_Param = User2Param_USER2PARAM_SAVE_RECORD
)

func (x *SaveRecordUserCmd) Reset() {
	*x = SaveRecordUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveRecordUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveRecordUserCmd) ProtoMessage() {}

func (x *SaveRecordUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveRecordUserCmd.ProtoReflect.Descriptor instead.
func (*SaveRecordUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{159}
}

func (x *SaveRecordUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SaveRecordUserCmd_Cmd
}

func (x *SaveRecordUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SaveRecordUserCmd_Param
}

func (x *SaveRecordUserCmd) GetSlotid() uint32 {
	if x != nil && x.Slotid != nil {
		return *x.Slotid
	}
	return 0
}

func (x *SaveRecordUserCmd) GetRecordName() string {
	if x != nil && x.RecordName != nil {
		return *x.RecordName
	}
	return ""
}

type LoadRecordUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=136" json:"param,omitempty"`
	Slotid *uint32     `protobuf:"varint,3,opt,name=slotid" json:"slotid,omitempty"`
}

// Default values for LoadRecordUserCmd fields.
const (
	Default_LoadRecordUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_LoadRecordUserCmd_Param = User2Param_USER2PARAM_LOAD_RECORD
)

func (x *LoadRecordUserCmd) Reset() {
	*x = LoadRecordUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadRecordUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadRecordUserCmd) ProtoMessage() {}

func (x *LoadRecordUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadRecordUserCmd.ProtoReflect.Descriptor instead.
func (*LoadRecordUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{160}
}

func (x *LoadRecordUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LoadRecordUserCmd_Cmd
}

func (x *LoadRecordUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LoadRecordUserCmd_Param
}

func (x *LoadRecordUserCmd) GetSlotid() uint32 {
	if x != nil && x.Slotid != nil {
		return *x.Slotid
	}
	return 0
}

type ChangeRecordNameUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=137" json:"param,omitempty"`
	Slotid     *uint32     `protobuf:"varint,3,opt,name=slotid" json:"slotid,omitempty"`
	RecordName *string     `protobuf:"bytes,4,opt,name=record_name,json=recordName" json:"record_name,omitempty"`
}

// Default values for ChangeRecordNameUserCmd fields.
const (
	Default_ChangeRecordNameUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ChangeRecordNameUserCmd_Param = User2Param_USER2PARAM_CHANGE_RECORD_NAME
)

func (x *ChangeRecordNameUserCmd) Reset() {
	*x = ChangeRecordNameUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeRecordNameUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeRecordNameUserCmd) ProtoMessage() {}

func (x *ChangeRecordNameUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeRecordNameUserCmd.ProtoReflect.Descriptor instead.
func (*ChangeRecordNameUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{161}
}

func (x *ChangeRecordNameUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChangeRecordNameUserCmd_Cmd
}

func (x *ChangeRecordNameUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChangeRecordNameUserCmd_Param
}

func (x *ChangeRecordNameUserCmd) GetSlotid() uint32 {
	if x != nil && x.Slotid != nil {
		return *x.Slotid
	}
	return 0
}

func (x *ChangeRecordNameUserCmd) GetRecordName() string {
	if x != nil && x.RecordName != nil {
		return *x.RecordName
	}
	return ""
}

type BuyRecordSlotUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=138" json:"param,omitempty"`
	Slotid *uint32     `protobuf:"varint,3,opt,name=slotid" json:"slotid,omitempty"`
}

// Default values for BuyRecordSlotUserCmd fields.
const (
	Default_BuyRecordSlotUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_BuyRecordSlotUserCmd_Param = User2Param_USER2PARAM_BUY_RECORD_SLOT
)

func (x *BuyRecordSlotUserCmd) Reset() {
	*x = BuyRecordSlotUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyRecordSlotUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyRecordSlotUserCmd) ProtoMessage() {}

func (x *BuyRecordSlotUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyRecordSlotUserCmd.ProtoReflect.Descriptor instead.
func (*BuyRecordSlotUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{162}
}

func (x *BuyRecordSlotUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuyRecordSlotUserCmd_Cmd
}

func (x *BuyRecordSlotUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuyRecordSlotUserCmd_Param
}

func (x *BuyRecordSlotUserCmd) GetSlotid() uint32 {
	if x != nil && x.Slotid != nil {
		return *x.Slotid
	}
	return 0
}

type DeleteRecordUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=139" json:"param,omitempty"`
	Slotid *uint32     `protobuf:"varint,3,opt,name=slotid" json:"slotid,omitempty"`
}

// Default values for DeleteRecordUserCmd fields.
const (
	Default_DeleteRecordUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_DeleteRecordUserCmd_Param = User2Param_USER2PARAM_DELETE_RECORD
)

func (x *DeleteRecordUserCmd) Reset() {
	*x = DeleteRecordUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRecordUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecordUserCmd) ProtoMessage() {}

func (x *DeleteRecordUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecordUserCmd.ProtoReflect.Descriptor instead.
func (*DeleteRecordUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{163}
}

func (x *DeleteRecordUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DeleteRecordUserCmd_Cmd
}

func (x *DeleteRecordUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DeleteRecordUserCmd_Param
}

func (x *DeleteRecordUserCmd) GetSlotid() uint32 {
	if x != nil && x.Slotid != nil {
		return *x.Slotid
	}
	return 0
}

type UpdateBranchInfoUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command              `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param           `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=140" json:"param,omitempty"`
	Datas     []*ProfessionUserInfo `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
	SyncType  *uint32               `protobuf:"varint,4,opt,name=sync_type,json=syncType,def=0" json:"sync_type,omitempty"`
	HasDetail *uint32               `protobuf:"varint,5,opt,name=has_detail,json=hasDetail,def=0" json:"has_detail,omitempty"`
}

// Default values for UpdateBranchInfoUserCmd fields.
const (
	Default_UpdateBranchInfoUserCmd_Cmd       = Command_SCENE_USER2_PROTOCMD
	Default_UpdateBranchInfoUserCmd_Param     = User2Param_USER2PARAM_UPDATE_BRANCH_INFO
	Default_UpdateBranchInfoUserCmd_SyncType  = uint32(0)
	Default_UpdateBranchInfoUserCmd_HasDetail = uint32(0)
)

func (x *UpdateBranchInfoUserCmd) Reset() {
	*x = UpdateBranchInfoUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBranchInfoUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBranchInfoUserCmd) ProtoMessage() {}

func (x *UpdateBranchInfoUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBranchInfoUserCmd.ProtoReflect.Descriptor instead.
func (*UpdateBranchInfoUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{164}
}

func (x *UpdateBranchInfoUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateBranchInfoUserCmd_Cmd
}

func (x *UpdateBranchInfoUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateBranchInfoUserCmd_Param
}

func (x *UpdateBranchInfoUserCmd) GetDatas() []*ProfessionUserInfo {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *UpdateBranchInfoUserCmd) GetSyncType() uint32 {
	if x != nil && x.SyncType != nil {
		return *x.SyncType
	}
	return Default_UpdateBranchInfoUserCmd_SyncType
}

func (x *UpdateBranchInfoUserCmd) GetHasDetail() uint32 {
	if x != nil && x.HasDetail != nil {
		return *x.HasDetail
	}
	return Default_UpdateBranchInfoUserCmd_HasDetail
}

type EnterCapraActivityCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=110" json:"param,omitempty"`
}

// Default values for EnterCapraActivityCmd fields.
const (
	Default_EnterCapraActivityCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_EnterCapraActivityCmd_Param = User2Param_USER2PARAM_ENTER_CAPRA_ACTIVITY
)

func (x *EnterCapraActivityCmd) Reset() {
	*x = EnterCapraActivityCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterCapraActivityCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterCapraActivityCmd) ProtoMessage() {}

func (x *EnterCapraActivityCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterCapraActivityCmd.ProtoReflect.Descriptor instead.
func (*EnterCapraActivityCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{165}
}

func (x *EnterCapraActivityCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EnterCapraActivityCmd_Cmd
}

func (x *EnterCapraActivityCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EnterCapraActivityCmd_Param
}

type InviteWithMeUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=142" json:"param,omitempty"`
	Sendid *uint64     `protobuf:"varint,3,opt,name=sendid,def=0" json:"sendid,omitempty"`
	Time   *uint32     `protobuf:"varint,4,opt,name=time,def=0" json:"time,omitempty"`
	Reply  *bool       `protobuf:"varint,5,opt,name=reply,def=0" json:"reply,omitempty"`
	Sign   []byte      `protobuf:"bytes,6,opt,name=sign" json:"sign,omitempty"`
}

// Default values for InviteWithMeUserCmd fields.
const (
	Default_InviteWithMeUserCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_InviteWithMeUserCmd_Param  = User2Param_USER2PARAM_INVITE_WITH_ME
	Default_InviteWithMeUserCmd_Sendid = uint64(0)
	Default_InviteWithMeUserCmd_Time   = uint32(0)
	Default_InviteWithMeUserCmd_Reply  = bool(false)
)

func (x *InviteWithMeUserCmd) Reset() {
	*x = InviteWithMeUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteWithMeUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteWithMeUserCmd) ProtoMessage() {}

func (x *InviteWithMeUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteWithMeUserCmd.ProtoReflect.Descriptor instead.
func (*InviteWithMeUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{166}
}

func (x *InviteWithMeUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InviteWithMeUserCmd_Cmd
}

func (x *InviteWithMeUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InviteWithMeUserCmd_Param
}

func (x *InviteWithMeUserCmd) GetSendid() uint64 {
	if x != nil && x.Sendid != nil {
		return *x.Sendid
	}
	return Default_InviteWithMeUserCmd_Sendid
}

func (x *InviteWithMeUserCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_InviteWithMeUserCmd_Time
}

func (x *InviteWithMeUserCmd) GetReply() bool {
	if x != nil && x.Reply != nil {
		return *x.Reply
	}
	return Default_InviteWithMeUserCmd_Reply
}

func (x *InviteWithMeUserCmd) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

type QueryAltmanKillUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=143" json:"param,omitempty"`
}

// Default values for QueryAltmanKillUserCmd fields.
const (
	Default_QueryAltmanKillUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_QueryAltmanKillUserCmd_Param = User2Param_USER2PARAM_QUERY_ALTMAN_KILL
)

func (x *QueryAltmanKillUserCmd) Reset() {
	*x = QueryAltmanKillUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAltmanKillUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAltmanKillUserCmd) ProtoMessage() {}

func (x *QueryAltmanKillUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAltmanKillUserCmd.ProtoReflect.Descriptor instead.
func (*QueryAltmanKillUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{167}
}

func (x *QueryAltmanKillUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryAltmanKillUserCmd_Cmd
}

func (x *QueryAltmanKillUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryAltmanKillUserCmd_Param
}

type BoothInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Sign *EBoothSign `protobuf:"varint,2,opt,name=sign,enum=Cmd.EBoothSign" json:"sign,omitempty"`
}

func (x *BoothInfo) Reset() {
	*x = BoothInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoothInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoothInfo) ProtoMessage() {}

func (x *BoothInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoothInfo.ProtoReflect.Descriptor instead.
func (*BoothInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{168}
}

func (x *BoothInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BoothInfo) GetSign() EBoothSign {
	if x != nil && x.Sign != nil {
		return *x.Sign
	}
	return EBoothSign_EBOOTHSIGN_WHITE
}

type BoothReqUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=144" json:"param,omitempty"`
	Name    *string     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Oper    *EBoothOper `protobuf:"varint,4,opt,name=oper,enum=Cmd.EBoothOper,def=0" json:"oper,omitempty"`
	Success *bool       `protobuf:"varint,5,opt,name=success,def=1" json:"success,omitempty"`
}

// Default values for BoothReqUserCmd fields.
const (
	Default_BoothReqUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_BoothReqUserCmd_Param   = User2Param_USER2PARAM_USER_BOOTH_REQ
	Default_BoothReqUserCmd_Oper    = EBoothOper_EBOOTHOPER_OPEN
	Default_BoothReqUserCmd_Success = bool(true)
)

func (x *BoothReqUserCmd) Reset() {
	*x = BoothReqUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoothReqUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoothReqUserCmd) ProtoMessage() {}

func (x *BoothReqUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoothReqUserCmd.ProtoReflect.Descriptor instead.
func (*BoothReqUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{169}
}

func (x *BoothReqUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BoothReqUserCmd_Cmd
}

func (x *BoothReqUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BoothReqUserCmd_Param
}

func (x *BoothReqUserCmd) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BoothReqUserCmd) GetOper() EBoothOper {
	if x != nil && x.Oper != nil {
		return *x.Oper
	}
	return Default_BoothReqUserCmd_Oper
}

func (x *BoothReqUserCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_BoothReqUserCmd_Success
}

type BoothInfoSyncUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=145" json:"param,omitempty"`
	Charid *uint64     `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Oper   *EBoothOper `protobuf:"varint,4,opt,name=oper,enum=Cmd.EBoothOper,def=0" json:"oper,omitempty"`
	Info   *BoothInfo  `protobuf:"bytes,5,opt,name=info" json:"info,omitempty"`
}

// Default values for BoothInfoSyncUserCmd fields.
const (
	Default_BoothInfoSyncUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_BoothInfoSyncUserCmd_Param = User2Param_USER2PARAM_BOOTH_INFO_SYNC
	Default_BoothInfoSyncUserCmd_Oper  = EBoothOper_EBOOTHOPER_OPEN
)

func (x *BoothInfoSyncUserCmd) Reset() {
	*x = BoothInfoSyncUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoothInfoSyncUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoothInfoSyncUserCmd) ProtoMessage() {}

func (x *BoothInfoSyncUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoothInfoSyncUserCmd.ProtoReflect.Descriptor instead.
func (*BoothInfoSyncUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{170}
}

func (x *BoothInfoSyncUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BoothInfoSyncUserCmd_Cmd
}

func (x *BoothInfoSyncUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BoothInfoSyncUserCmd_Param
}

func (x *BoothInfoSyncUserCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *BoothInfoSyncUserCmd) GetOper() EBoothOper {
	if x != nil && x.Oper != nil {
		return *x.Oper
	}
	return Default_BoothInfoSyncUserCmd_Oper
}

func (x *BoothInfoSyncUserCmd) GetInfo() *BoothInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type DressUpModelUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param    `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=146" json:"param,omitempty"`
	Stageid *uint32        `protobuf:"varint,3,opt,name=stageid,def=0" json:"stageid,omitempty"`
	Type    *EUserDataType `protobuf:"varint,4,opt,name=type,enum=Cmd.EUserDataType,def=0" json:"type,omitempty"`
	Value   *uint32        `protobuf:"varint,5,opt,name=value,def=0" json:"value,omitempty"`
}

// Default values for DressUpModelUserCmd fields.
const (
	Default_DressUpModelUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_DressUpModelUserCmd_Param   = User2Param_USER2PARAM_DRESSUP_MODEL
	Default_DressUpModelUserCmd_Stageid = uint32(0)
	Default_DressUpModelUserCmd_Type    = EUserDataType_EUSERDATATYPE_MIN
	Default_DressUpModelUserCmd_Value   = uint32(0)
)

func (x *DressUpModelUserCmd) Reset() {
	*x = DressUpModelUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DressUpModelUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DressUpModelUserCmd) ProtoMessage() {}

func (x *DressUpModelUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DressUpModelUserCmd.ProtoReflect.Descriptor instead.
func (*DressUpModelUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{171}
}

func (x *DressUpModelUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DressUpModelUserCmd_Cmd
}

func (x *DressUpModelUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DressUpModelUserCmd_Param
}

func (x *DressUpModelUserCmd) GetStageid() uint32 {
	if x != nil && x.Stageid != nil {
		return *x.Stageid
	}
	return Default_DressUpModelUserCmd_Stageid
}

func (x *DressUpModelUserCmd) GetType() EUserDataType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_DressUpModelUserCmd_Type
}

func (x *DressUpModelUserCmd) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_DressUpModelUserCmd_Value
}

type DressUpHeadUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param    `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=147" json:"param,omitempty"`
	Type  *EUserDataType `protobuf:"varint,3,opt,name=type,enum=Cmd.EUserDataType,def=0" json:"type,omitempty"`
	Value *uint32        `protobuf:"varint,4,opt,name=value,def=0" json:"value,omitempty"`
	Puton *bool          `protobuf:"varint,5,opt,name=puton,def=1" json:"puton,omitempty"`
}

// Default values for DressUpHeadUserCmd fields.
const (
	Default_DressUpHeadUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_DressUpHeadUserCmd_Param = User2Param_USER2PARAM_DRESSUP_HEAD
	Default_DressUpHeadUserCmd_Type  = EUserDataType_EUSERDATATYPE_MIN
	Default_DressUpHeadUserCmd_Value = uint32(0)
	Default_DressUpHeadUserCmd_Puton = bool(true)
)

func (x *DressUpHeadUserCmd) Reset() {
	*x = DressUpHeadUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DressUpHeadUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DressUpHeadUserCmd) ProtoMessage() {}

func (x *DressUpHeadUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DressUpHeadUserCmd.ProtoReflect.Descriptor instead.
func (*DressUpHeadUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{172}
}

func (x *DressUpHeadUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DressUpHeadUserCmd_Cmd
}

func (x *DressUpHeadUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DressUpHeadUserCmd_Param
}

func (x *DressUpHeadUserCmd) GetType() EUserDataType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_DressUpHeadUserCmd_Type
}

func (x *DressUpHeadUserCmd) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_DressUpHeadUserCmd_Value
}

func (x *DressUpHeadUserCmd) GetPuton() bool {
	if x != nil && x.Puton != nil {
		return *x.Puton
	}
	return Default_DressUpHeadUserCmd_Puton
}

type StageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stageid  *uint32 `protobuf:"varint,1,opt,name=stageid,def=0" json:"stageid,omitempty"`
	Usernum  *uint32 `protobuf:"varint,2,opt,name=usernum,def=0" json:"usernum,omitempty"`
	Waittime *uint32 `protobuf:"varint,3,opt,name=waittime,def=0" json:"waittime,omitempty"`
	Status   *uint32 `protobuf:"varint,4,opt,name=status,def=0" json:"status,omitempty"`
}

// Default values for StageInfo fields.
const (
	Default_StageInfo_Stageid  = uint32(0)
	Default_StageInfo_Usernum  = uint32(0)
	Default_StageInfo_Waittime = uint32(0)
	Default_StageInfo_Status   = uint32(0)
)

func (x *StageInfo) Reset() {
	*x = StageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageInfo) ProtoMessage() {}

func (x *StageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageInfo.ProtoReflect.Descriptor instead.
func (*StageInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{173}
}

func (x *StageInfo) GetStageid() uint32 {
	if x != nil && x.Stageid != nil {
		return *x.Stageid
	}
	return Default_StageInfo_Stageid
}

func (x *StageInfo) GetUsernum() uint32 {
	if x != nil && x.Usernum != nil {
		return *x.Usernum
	}
	return Default_StageInfo_Usernum
}

func (x *StageInfo) GetWaittime() uint32 {
	if x != nil && x.Waittime != nil {
		return *x.Waittime
	}
	return Default_StageInfo_Waittime
}

func (x *StageInfo) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_StageInfo_Status
}

type QueryStageUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=148" json:"param,omitempty"`
	Stageid *uint32      `protobuf:"varint,3,opt,name=stageid,def=0" json:"stageid,omitempty"`
	Info    []*StageInfo `protobuf:"bytes,4,rep,name=info" json:"info,omitempty"`
}

// Default values for QueryStageUserCmd fields.
const (
	Default_QueryStageUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_QueryStageUserCmd_Param   = User2Param_USER2PARAM_QUERY_STAGE
	Default_QueryStageUserCmd_Stageid = uint32(0)
)

func (x *QueryStageUserCmd) Reset() {
	*x = QueryStageUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStageUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStageUserCmd) ProtoMessage() {}

func (x *QueryStageUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStageUserCmd.ProtoReflect.Descriptor instead.
func (*QueryStageUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{174}
}

func (x *QueryStageUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryStageUserCmd_Cmd
}

func (x *QueryStageUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryStageUserCmd_Param
}

func (x *QueryStageUserCmd) GetStageid() uint32 {
	if x != nil && x.Stageid != nil {
		return *x.Stageid
	}
	return Default_QueryStageUserCmd_Stageid
}

func (x *QueryStageUserCmd) GetInfo() []*StageInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type DressUpLineUpUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=149" json:"param,omitempty"`
	Stageid *uint32     `protobuf:"varint,3,opt,name=stageid,def=0" json:"stageid,omitempty"`
	Mode    *uint32     `protobuf:"varint,4,opt,name=mode,def=0" json:"mode,omitempty"`
	Enter   *bool       `protobuf:"varint,5,opt,name=enter,def=0" json:"enter,omitempty"`
}

// Default values for DressUpLineUpUserCmd fields.
const (
	Default_DressUpLineUpUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_DressUpLineUpUserCmd_Param   = User2Param_USER2PARAM_DRESSUP_LINEUP
	Default_DressUpLineUpUserCmd_Stageid = uint32(0)
	Default_DressUpLineUpUserCmd_Mode    = uint32(0)
	Default_DressUpLineUpUserCmd_Enter   = bool(false)
)

func (x *DressUpLineUpUserCmd) Reset() {
	*x = DressUpLineUpUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DressUpLineUpUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DressUpLineUpUserCmd) ProtoMessage() {}

func (x *DressUpLineUpUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DressUpLineUpUserCmd.ProtoReflect.Descriptor instead.
func (*DressUpLineUpUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{175}
}

func (x *DressUpLineUpUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DressUpLineUpUserCmd_Cmd
}

func (x *DressUpLineUpUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DressUpLineUpUserCmd_Param
}

func (x *DressUpLineUpUserCmd) GetStageid() uint32 {
	if x != nil && x.Stageid != nil {
		return *x.Stageid
	}
	return Default_DressUpLineUpUserCmd_Stageid
}

func (x *DressUpLineUpUserCmd) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Default_DressUpLineUpUserCmd_Mode
}

func (x *DressUpLineUpUserCmd) GetEnter() bool {
	if x != nil && x.Enter != nil {
		return *x.Enter
	}
	return Default_DressUpLineUpUserCmd_Enter
}

type StageUserDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *EUserDataType `protobuf:"varint,1,opt,name=type,enum=Cmd.EUserDataType,def=0" json:"type,omitempty"`
	Value *uint32        `protobuf:"varint,2,opt,name=value,def=0" json:"value,omitempty"`
}

// Default values for StageUserDataType fields.
const (
	Default_StageUserDataType_Type  = EUserDataType_EUSERDATATYPE_MIN
	Default_StageUserDataType_Value = uint32(0)
)

func (x *StageUserDataType) Reset() {
	*x = StageUserDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageUserDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageUserDataType) ProtoMessage() {}

func (x *StageUserDataType) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageUserDataType.ProtoReflect.Descriptor instead.
func (*StageUserDataType) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{176}
}

func (x *StageUserDataType) GetType() EUserDataType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_StageUserDataType_Type
}

func (x *StageUserDataType) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_StageUserDataType_Value
}

type DressUpStageUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param          `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=150" json:"param,omitempty"`
	Userid  []uint64             `protobuf:"varint,3,rep,name=userid" json:"userid,omitempty"`
	Stageid *uint32              `protobuf:"varint,4,opt,name=stageid,def=0" json:"stageid,omitempty"`
	Datas   []*StageUserDataType `protobuf:"bytes,5,rep,name=datas" json:"datas,omitempty"`
}

// Default values for DressUpStageUserCmd fields.
const (
	Default_DressUpStageUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_DressUpStageUserCmd_Param   = User2Param_USER2PARAM_DRESSUP_STAGE
	Default_DressUpStageUserCmd_Stageid = uint32(0)
)

func (x *DressUpStageUserCmd) Reset() {
	*x = DressUpStageUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DressUpStageUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DressUpStageUserCmd) ProtoMessage() {}

func (x *DressUpStageUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DressUpStageUserCmd.ProtoReflect.Descriptor instead.
func (*DressUpStageUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{177}
}

func (x *DressUpStageUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_DressUpStageUserCmd_Cmd
}

func (x *DressUpStageUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_DressUpStageUserCmd_Param
}

func (x *DressUpStageUserCmd) GetUserid() []uint64 {
	if x != nil {
		return x.Userid
	}
	return nil
}

func (x *DressUpStageUserCmd) GetStageid() uint32 {
	if x != nil && x.Stageid != nil {
		return *x.Stageid
	}
	return Default_DressUpStageUserCmd_Stageid
}

func (x *DressUpStageUserCmd) GetDatas() []*StageUserDataType {
	if x != nil {
		return x.Datas
	}
	return nil
}

type GoToFunctionMapUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param   `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=141" json:"param,omitempty"`
	Etype *EFuncMapType `protobuf:"varint,3,req,name=etype,enum=Cmd.EFuncMapType" json:"etype,omitempty"`
}

// Default values for GoToFunctionMapUserCmd fields.
const (
	Default_GoToFunctionMapUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_GoToFunctionMapUserCmd_Param = User2Param_USER2PARAM_GOTO_FUNCMAP
)

func (x *GoToFunctionMapUserCmd) Reset() {
	*x = GoToFunctionMapUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoToFunctionMapUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoToFunctionMapUserCmd) ProtoMessage() {}

func (x *GoToFunctionMapUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoToFunctionMapUserCmd.ProtoReflect.Descriptor instead.
func (*GoToFunctionMapUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{178}
}

func (x *GoToFunctionMapUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GoToFunctionMapUserCmd_Cmd
}

func (x *GoToFunctionMapUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GoToFunctionMapUserCmd_Param
}

func (x *GoToFunctionMapUserCmd) GetEtype() EFuncMapType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return EFuncMapType_EFUNCMAPTYPE_POLLY
}

type GrowthCurInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *EGrowthType `protobuf:"varint,1,opt,name=type,enum=Cmd.EGrowthType,def=1" json:"type,omitempty"`
	Groupid *uint32      `protobuf:"varint,2,opt,name=groupid,def=0" json:"groupid,omitempty"`
}

// Default values for GrowthCurInfo fields.
const (
	Default_GrowthCurInfo_Type    = EGrowthType_EGROWTH_TYPE_STEP
	Default_GrowthCurInfo_Groupid = uint32(0)
)

func (x *GrowthCurInfo) Reset() {
	*x = GrowthCurInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthCurInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthCurInfo) ProtoMessage() {}

func (x *GrowthCurInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthCurInfo.ProtoReflect.Descriptor instead.
func (*GrowthCurInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{179}
}

func (x *GrowthCurInfo) GetType() EGrowthType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_GrowthCurInfo_Type
}

func (x *GrowthCurInfo) GetGroupid() uint32 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return Default_GrowthCurInfo_Groupid
}

type GrowthItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dwid        *uint32        `protobuf:"varint,1,opt,name=dwid,def=0" json:"dwid,omitempty"`
	Finishtimes *uint32        `protobuf:"varint,2,opt,name=finishtimes,def=0" json:"finishtimes,omitempty"`
	Status      *EGrowthStatus `protobuf:"varint,3,opt,name=status,enum=Cmd.EGrowthStatus,def=0" json:"status,omitempty"`
}

// Default values for GrowthItemInfo fields.
const (
	Default_GrowthItemInfo_Dwid        = uint32(0)
	Default_GrowthItemInfo_Finishtimes = uint32(0)
	Default_GrowthItemInfo_Status      = EGrowthStatus_EGROWTH_STATUS_MIN
)

func (x *GrowthItemInfo) Reset() {
	*x = GrowthItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthItemInfo) ProtoMessage() {}

func (x *GrowthItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthItemInfo.ProtoReflect.Descriptor instead.
func (*GrowthItemInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{180}
}

func (x *GrowthItemInfo) GetDwid() uint32 {
	if x != nil && x.Dwid != nil {
		return *x.Dwid
	}
	return Default_GrowthItemInfo_Dwid
}

func (x *GrowthItemInfo) GetFinishtimes() uint32 {
	if x != nil && x.Finishtimes != nil {
		return *x.Finishtimes
	}
	return Default_GrowthItemInfo_Finishtimes
}

func (x *GrowthItemInfo) GetStatus() EGrowthStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_GrowthItemInfo_Status
}

type GrowthValueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groupid    *uint32  `protobuf:"varint,1,opt,name=groupid,def=0" json:"groupid,omitempty"`
	Growth     *uint32  `protobuf:"varint,2,opt,name=growth,def=0" json:"growth,omitempty"`
	Everreward []uint32 `protobuf:"varint,3,rep,name=everreward" json:"everreward,omitempty"`
}

// Default values for GrowthValueInfo fields.
const (
	Default_GrowthValueInfo_Groupid = uint32(0)
	Default_GrowthValueInfo_Growth  = uint32(0)
)

func (x *GrowthValueInfo) Reset() {
	*x = GrowthValueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthValueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthValueInfo) ProtoMessage() {}

func (x *GrowthValueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthValueInfo.ProtoReflect.Descriptor instead.
func (*GrowthValueInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{181}
}

func (x *GrowthValueInfo) GetGroupid() uint32 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return Default_GrowthValueInfo_Groupid
}

func (x *GrowthValueInfo) GetGrowth() uint32 {
	if x != nil && x.Growth != nil {
		return *x.Growth
	}
	return Default_GrowthValueInfo_Growth
}

func (x *GrowthValueInfo) GetEverreward() []uint32 {
	if x != nil {
		return x.Everreward
	}
	return nil
}

type GrowthGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items      []*GrowthItemInfo `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Valueitems *GrowthValueInfo  `protobuf:"bytes,2,opt,name=valueitems" json:"valueitems,omitempty"`
}

func (x *GrowthGroupInfo) Reset() {
	*x = GrowthGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthGroupInfo) ProtoMessage() {}

func (x *GrowthGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthGroupInfo.ProtoReflect.Descriptor instead.
func (*GrowthGroupInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{182}
}

func (x *GrowthGroupInfo) GetItems() []*GrowthItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GrowthGroupInfo) GetValueitems() *GrowthValueInfo {
	if x != nil {
		return x.Valueitems
	}
	return nil
}

type GrowthServantUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param       *User2Param        `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=154" json:"param,omitempty"`
	Datas       []*GrowthGroupInfo `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
	Unlockitems []uint32           `protobuf:"varint,4,rep,name=unlockitems" json:"unlockitems,omitempty"`
}

// Default values for GrowthServantUserCmd fields.
const (
	Default_GrowthServantUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_GrowthServantUserCmd_Param = User2Param_USER2PARAM_SERVANT_GROWTH
)

func (x *GrowthServantUserCmd) Reset() {
	*x = GrowthServantUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthServantUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthServantUserCmd) ProtoMessage() {}

func (x *GrowthServantUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthServantUserCmd.ProtoReflect.Descriptor instead.
func (*GrowthServantUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{183}
}

func (x *GrowthServantUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GrowthServantUserCmd_Cmd
}

func (x *GrowthServantUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GrowthServantUserCmd_Param
}

func (x *GrowthServantUserCmd) GetDatas() []*GrowthGroupInfo {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *GrowthServantUserCmd) GetUnlockitems() []uint32 {
	if x != nil {
		return x.Unlockitems
	}
	return nil
}

type ReceiveGrowthServantUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=155" json:"param,omitempty"`
	Dwid    *uint32     `protobuf:"varint,3,opt,name=dwid,def=0" json:"dwid,omitempty"`
	Dwvalue *uint32     `protobuf:"varint,4,opt,name=dwvalue,def=0" json:"dwvalue,omitempty"`
}

// Default values for ReceiveGrowthServantUserCmd fields.
const (
	Default_ReceiveGrowthServantUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_ReceiveGrowthServantUserCmd_Param   = User2Param_USER2PARAM_SERVANT_RECEIVE_GROWTH
	Default_ReceiveGrowthServantUserCmd_Dwid    = uint32(0)
	Default_ReceiveGrowthServantUserCmd_Dwvalue = uint32(0)
)

func (x *ReceiveGrowthServantUserCmd) Reset() {
	*x = ReceiveGrowthServantUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveGrowthServantUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveGrowthServantUserCmd) ProtoMessage() {}

func (x *ReceiveGrowthServantUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveGrowthServantUserCmd.ProtoReflect.Descriptor instead.
func (*ReceiveGrowthServantUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{184}
}

func (x *ReceiveGrowthServantUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReceiveGrowthServantUserCmd_Cmd
}

func (x *ReceiveGrowthServantUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReceiveGrowthServantUserCmd_Param
}

func (x *ReceiveGrowthServantUserCmd) GetDwid() uint32 {
	if x != nil && x.Dwid != nil {
		return *x.Dwid
	}
	return Default_ReceiveGrowthServantUserCmd_Dwid
}

func (x *ReceiveGrowthServantUserCmd) GetDwvalue() uint32 {
	if x != nil && x.Dwvalue != nil {
		return *x.Dwvalue
	}
	return Default_ReceiveGrowthServantUserCmd_Dwvalue
}

type GrowthOpenServantUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=156" json:"param,omitempty"`
	Groupid *uint32     `protobuf:"varint,3,opt,name=groupid,def=0" json:"groupid,omitempty"`
}

// Default values for GrowthOpenServantUserCmd fields.
const (
	Default_GrowthOpenServantUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_GrowthOpenServantUserCmd_Param   = User2Param_USER2PARAM_SERVANT_GROWTH_OPEN
	Default_GrowthOpenServantUserCmd_Groupid = uint32(0)
)

func (x *GrowthOpenServantUserCmd) Reset() {
	*x = GrowthOpenServantUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrowthOpenServantUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrowthOpenServantUserCmd) ProtoMessage() {}

func (x *GrowthOpenServantUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrowthOpenServantUserCmd.ProtoReflect.Descriptor instead.
func (*GrowthOpenServantUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{185}
}

func (x *GrowthOpenServantUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GrowthOpenServantUserCmd_Cmd
}

func (x *GrowthOpenServantUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GrowthOpenServantUserCmd_Param
}

func (x *GrowthOpenServantUserCmd) GetGroupid() uint32 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return Default_GrowthOpenServantUserCmd_Groupid
}

type CheatTagUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=157" json:"param,omitempty"`
	Count    *uint32     `protobuf:"varint,3,opt,name=count,def=0" json:"count,omitempty"`
	Interval *uint32     `protobuf:"varint,4,opt,name=interval,def=0" json:"interval,omitempty"`
	Frame    *uint32     `protobuf:"varint,5,opt,name=frame,def=0" json:"frame,omitempty"`
}

// Default values for CheatTagUserCmd fields.
const (
	Default_CheatTagUserCmd_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_CheatTagUserCmd_Param    = User2Param_USER2PARAM_CHEAT_TAG
	Default_CheatTagUserCmd_Count    = uint32(0)
	Default_CheatTagUserCmd_Interval = uint32(0)
	Default_CheatTagUserCmd_Frame    = uint32(0)
)

func (x *CheatTagUserCmd) Reset() {
	*x = CheatTagUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheatTagUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheatTagUserCmd) ProtoMessage() {}

func (x *CheatTagUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheatTagUserCmd.ProtoReflect.Descriptor instead.
func (*CheatTagUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{186}
}

func (x *CheatTagUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CheatTagUserCmd_Cmd
}

func (x *CheatTagUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CheatTagUserCmd_Param
}

func (x *CheatTagUserCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_CheatTagUserCmd_Count
}

func (x *CheatTagUserCmd) GetInterval() uint32 {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return Default_CheatTagUserCmd_Interval
}

func (x *CheatTagUserCmd) GetFrame() uint32 {
	if x != nil && x.Frame != nil {
		return *x.Frame
	}
	return Default_CheatTagUserCmd_Frame
}

type ButtonThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Button    *EMonitorButton `protobuf:"varint,1,opt,name=button,enum=Cmd.EMonitorButton,def=0" json:"button,omitempty"`
	Threshold *uint32         `protobuf:"varint,2,opt,name=threshold,def=0" json:"threshold,omitempty"`
}

// Default values for ButtonThreshold fields.
const (
	Default_ButtonThreshold_Button    = EMonitorButton_EMONITORBUTTON_AUTO_BATTLE_BUTTON
	Default_ButtonThreshold_Threshold = uint32(0)
)

func (x *ButtonThreshold) Reset() {
	*x = ButtonThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ButtonThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ButtonThreshold) ProtoMessage() {}

func (x *ButtonThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ButtonThreshold.ProtoReflect.Descriptor instead.
func (*ButtonThreshold) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{187}
}

func (x *ButtonThreshold) GetButton() EMonitorButton {
	if x != nil && x.Button != nil {
		return *x.Button
	}
	return Default_ButtonThreshold_Button
}

func (x *ButtonThreshold) GetThreshold() uint32 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return Default_ButtonThreshold_Threshold
}

type CheatTagStatUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd               *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param             *User2Param        `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=158" json:"param,omitempty"`
	Cheated           *bool              `protobuf:"varint,3,opt,name=cheated,def=0" json:"cheated,omitempty"`
	Clickmvpthreshold *uint32            `protobuf:"varint,4,opt,name=clickmvpthreshold,def=0" json:"clickmvpthreshold,omitempty"`
	Buttonthreshold   []*ButtonThreshold `protobuf:"bytes,5,rep,name=buttonthreshold" json:"buttonthreshold,omitempty"`
}

// Default values for CheatTagStatUserCmd fields.
const (
	Default_CheatTagStatUserCmd_Cmd               = Command_SCENE_USER2_PROTOCMD
	Default_CheatTagStatUserCmd_Param             = User2Param_USER2PARAM_CHEAT_TAG_STAT
	Default_CheatTagStatUserCmd_Cheated           = bool(false)
	Default_CheatTagStatUserCmd_Clickmvpthreshold = uint32(0)
)

func (x *CheatTagStatUserCmd) Reset() {
	*x = CheatTagStatUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheatTagStatUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheatTagStatUserCmd) ProtoMessage() {}

func (x *CheatTagStatUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheatTagStatUserCmd.ProtoReflect.Descriptor instead.
func (*CheatTagStatUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{188}
}

func (x *CheatTagStatUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CheatTagStatUserCmd_Cmd
}

func (x *CheatTagStatUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CheatTagStatUserCmd_Param
}

func (x *CheatTagStatUserCmd) GetCheated() bool {
	if x != nil && x.Cheated != nil {
		return *x.Cheated
	}
	return Default_CheatTagStatUserCmd_Cheated
}

func (x *CheatTagStatUserCmd) GetClickmvpthreshold() uint32 {
	if x != nil && x.Clickmvpthreshold != nil {
		return *x.Clickmvpthreshold
	}
	return Default_CheatTagStatUserCmd_Clickmvpthreshold
}

func (x *CheatTagStatUserCmd) GetButtonthreshold() []*ButtonThreshold {
	if x != nil {
		return x.Buttonthreshold
	}
	return nil
}

type ClickPosList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param          *User2Param       `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=159" json:"param,omitempty"`
	Clickbuttonpos []*ClickButtonPos `protobuf:"bytes,3,rep,name=clickbuttonpos" json:"clickbuttonpos,omitempty"`
}

// Default values for ClickPosList fields.
const (
	Default_ClickPosList_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ClickPosList_Param = User2Param_USER2PARAM_CLICK_POS_LIST
)

func (x *ClickPosList) Reset() {
	*x = ClickPosList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickPosList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickPosList) ProtoMessage() {}

func (x *ClickPosList) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickPosList.ProtoReflect.Descriptor instead.
func (*ClickPosList) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{189}
}

func (x *ClickPosList) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClickPosList_Cmd
}

func (x *ClickPosList) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClickPosList_Param
}

func (x *ClickPosList) GetClickbuttonpos() []*ClickButtonPos {
	if x != nil {
		return x.Clickbuttonpos
	}
	return nil
}

type ClickButtonPos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Button *EMonitorButton `protobuf:"varint,1,opt,name=button,enum=Cmd.EMonitorButton" json:"button,omitempty"`
	Pos    *uint32         `protobuf:"varint,2,opt,name=pos" json:"pos,omitempty"`
	Count  *uint32         `protobuf:"varint,3,opt,name=count,def=0" json:"count,omitempty"`
}

// Default values for ClickButtonPos fields.
const (
	Default_ClickButtonPos_Count = uint32(0)
)

func (x *ClickButtonPos) Reset() {
	*x = ClickButtonPos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickButtonPos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickButtonPos) ProtoMessage() {}

func (x *ClickButtonPos) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickButtonPos.ProtoReflect.Descriptor instead.
func (*ClickButtonPos) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{190}
}

func (x *ClickButtonPos) GetButton() EMonitorButton {
	if x != nil && x.Button != nil {
		return *x.Button
	}
	return EMonitorButton_EMONITORBUTTON_AUTO_BATTLE_BUTTON
}

func (x *ClickButtonPos) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *ClickButtonPos) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_ClickButtonPos_Count
}

type ServerInfoNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param       `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=169" json:"param,omitempty"`
	Serverinfo *RegionServerInfo `protobuf:"bytes,3,opt,name=serverinfo" json:"serverinfo,omitempty"`
}

// Default values for ServerInfoNtf fields.
const (
	Default_ServerInfoNtf_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ServerInfoNtf_Param = User2Param_USER2PARAM_SERVER_INFO_NTF
)

func (x *ServerInfoNtf) Reset() {
	*x = ServerInfoNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfoNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfoNtf) ProtoMessage() {}

func (x *ServerInfoNtf) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfoNtf.ProtoReflect.Descriptor instead.
func (*ServerInfoNtf) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{191}
}

func (x *ServerInfoNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ServerInfoNtf_Cmd
}

func (x *ServerInfoNtf) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ServerInfoNtf_Param
}

func (x *ServerInfoNtf) GetServerinfo() *RegionServerInfo {
	if x != nil {
		return x.Serverinfo
	}
	return nil
}

type ReadyToMapUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=174" json:"param,omitempty"`
	MapID  *uint32     `protobuf:"varint,3,opt,name=mapID,def=0" json:"mapID,omitempty"`
	DmapID *uint32     `protobuf:"varint,4,opt,name=dmapID,def=0" json:"dmapID,omitempty"`
}

// Default values for ReadyToMapUserCmd fields.
const (
	Default_ReadyToMapUserCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_ReadyToMapUserCmd_Param  = User2Param_USER2PARAM_READYTOMAP
	Default_ReadyToMapUserCmd_MapID  = uint32(0)
	Default_ReadyToMapUserCmd_DmapID = uint32(0)
)

func (x *ReadyToMapUserCmd) Reset() {
	*x = ReadyToMapUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadyToMapUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyToMapUserCmd) ProtoMessage() {}

func (x *ReadyToMapUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyToMapUserCmd.ProtoReflect.Descriptor instead.
func (*ReadyToMapUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{192}
}

func (x *ReadyToMapUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReadyToMapUserCmd_Cmd
}

func (x *ReadyToMapUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReadyToMapUserCmd_Param
}

func (x *ReadyToMapUserCmd) GetMapID() uint32 {
	if x != nil && x.MapID != nil {
		return *x.MapID
	}
	return Default_ReadyToMapUserCmd_MapID
}

func (x *ReadyToMapUserCmd) GetDmapID() uint32 {
	if x != nil && x.DmapID != nil {
		return *x.DmapID
	}
	return Default_ReadyToMapUserCmd_DmapID
}

type SignInUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=164" json:"param,omitempty"`
	Success *bool        `protobuf:"varint,3,opt,name=success,def=0" json:"success,omitempty"`
	Type    *ESignInType `protobuf:"varint,4,opt,name=type,enum=Cmd.ESignInType,def=1" json:"type,omitempty"`
}

// Default values for SignInUserCmd fields.
const (
	Default_SignInUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_SignInUserCmd_Param   = User2Param_USER2PARAM_SIGNIN
	Default_SignInUserCmd_Success = bool(false)
	Default_SignInUserCmd_Type    = ESignInType_ESIGNINTYPE_DAILY
)

func (x *SignInUserCmd) Reset() {
	*x = SignInUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInUserCmd) ProtoMessage() {}

func (x *SignInUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInUserCmd.ProtoReflect.Descriptor instead.
func (*SignInUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{193}
}

func (x *SignInUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SignInUserCmd_Cmd
}

func (x *SignInUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SignInUserCmd_Param
}

func (x *SignInUserCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_SignInUserCmd_Success
}

func (x *SignInUserCmd) GetType() ESignInType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_SignInUserCmd_Type
}

type SignInNtfUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=165" json:"param,omitempty"`
	Count    *uint32      `protobuf:"varint,3,opt,name=count,def=0" json:"count,omitempty"`
	Issign   *uint32      `protobuf:"varint,4,opt,name=issign,def=0" json:"issign,omitempty"`
	Isshowed *uint32      `protobuf:"varint,5,opt,name=isshowed,def=0" json:"isshowed,omitempty"`
	Type     *ESignInType `protobuf:"varint,6,opt,name=type,enum=Cmd.ESignInType,def=1" json:"type,omitempty"`
}

// Default values for SignInNtfUserCmd fields.
const (
	Default_SignInNtfUserCmd_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_SignInNtfUserCmd_Param    = User2Param_USER2PARAM_SIGNIN_NTF
	Default_SignInNtfUserCmd_Count    = uint32(0)
	Default_SignInNtfUserCmd_Issign   = uint32(0)
	Default_SignInNtfUserCmd_Isshowed = uint32(0)
	Default_SignInNtfUserCmd_Type     = ESignInType_ESIGNINTYPE_DAILY
)

func (x *SignInNtfUserCmd) Reset() {
	*x = SignInNtfUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInNtfUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInNtfUserCmd) ProtoMessage() {}

func (x *SignInNtfUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInNtfUserCmd.ProtoReflect.Descriptor instead.
func (*SignInNtfUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{194}
}

func (x *SignInNtfUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SignInNtfUserCmd_Cmd
}

func (x *SignInNtfUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SignInNtfUserCmd_Param
}

func (x *SignInNtfUserCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_SignInNtfUserCmd_Count
}

func (x *SignInNtfUserCmd) GetIssign() uint32 {
	if x != nil && x.Issign != nil {
		return *x.Issign
	}
	return Default_SignInNtfUserCmd_Issign
}

func (x *SignInNtfUserCmd) GetIsshowed() uint32 {
	if x != nil && x.Isshowed != nil {
		return *x.Isshowed
	}
	return Default_SignInNtfUserCmd_Isshowed
}

func (x *SignInNtfUserCmd) GetType() ESignInType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_SignInNtfUserCmd_Type
}

type BeatPoriUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=160" json:"param,omitempty"`
	Start   *bool       `protobuf:"varint,3,opt,name=start,def=1" json:"start,omitempty"`
	Success *bool       `protobuf:"varint,4,opt,name=success,def=0" json:"success,omitempty"`
}

// Default values for BeatPoriUserCmd fields.
const (
	Default_BeatPoriUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_BeatPoriUserCmd_Param   = User2Param_USER2PARAM_BEAT_PORI
	Default_BeatPoriUserCmd_Start   = bool(true)
	Default_BeatPoriUserCmd_Success = bool(false)
)

func (x *BeatPoriUserCmd) Reset() {
	*x = BeatPoriUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeatPoriUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeatPoriUserCmd) ProtoMessage() {}

func (x *BeatPoriUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeatPoriUserCmd.ProtoReflect.Descriptor instead.
func (*BeatPoriUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{195}
}

func (x *BeatPoriUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BeatPoriUserCmd_Cmd
}

func (x *BeatPoriUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BeatPoriUserCmd_Param
}

func (x *BeatPoriUserCmd) GetStart() bool {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return Default_BeatPoriUserCmd_Start
}

func (x *BeatPoriUserCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_BeatPoriUserCmd_Success
}

type UnlockFrameUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=161" json:"param,omitempty"`
	Frameid []uint32    `protobuf:"varint,3,rep,name=frameid" json:"frameid,omitempty"`
}

// Default values for UnlockFrameUserCmd fields.
const (
	Default_UnlockFrameUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_UnlockFrameUserCmd_Param = User2Param_USER2PARAM_UNLOCK_FRAME
)

func (x *UnlockFrameUserCmd) Reset() {
	*x = UnlockFrameUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockFrameUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockFrameUserCmd) ProtoMessage() {}

func (x *UnlockFrameUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockFrameUserCmd.ProtoReflect.Descriptor instead.
func (*UnlockFrameUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{196}
}

func (x *UnlockFrameUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UnlockFrameUserCmd_Cmd
}

func (x *UnlockFrameUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UnlockFrameUserCmd_Param
}

func (x *UnlockFrameUserCmd) GetFrameid() []uint32 {
	if x != nil {
		return x.Frameid
	}
	return nil
}

type RewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewardid *uint32        `protobuf:"varint,1,opt,name=rewardid,def=0" json:"rewardid,omitempty"`
	Status   *ERewardStatus `protobuf:"varint,2,opt,name=status,enum=Cmd.ERewardStatus,def=0" json:"status,omitempty"`
}

// Default values for RewardItem fields.
const (
	Default_RewardItem_Rewardid = uint32(0)
	Default_RewardItem_Status   = ERewardStatus_EREWEARD_STATUS_MIN
)

func (x *RewardItem) Reset() {
	*x = RewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardItem) ProtoMessage() {}

func (x *RewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardItem.ProtoReflect.Descriptor instead.
func (*RewardItem) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{197}
}

func (x *RewardItem) GetRewardid() uint32 {
	if x != nil && x.Rewardid != nil {
		return *x.Rewardid
	}
	return Default_RewardItem_Rewardid
}

func (x *RewardItem) GetStatus() ERewardStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_RewardItem_Status
}

type AltmanRewardUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param       *User2Param   `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=170" json:"param,omitempty"`
	Passtime    *uint32       `protobuf:"varint,3,opt,name=passtime,def=0" json:"passtime,omitempty"`
	Items       []*RewardItem `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
	Getrewardid *uint32       `protobuf:"varint,5,opt,name=getrewardid,def=0" json:"getrewardid,omitempty"`
}

// Default values for AltmanRewardUserCmd fields.
const (
	Default_AltmanRewardUserCmd_Cmd         = Command_SCENE_USER2_PROTOCMD
	Default_AltmanRewardUserCmd_Param       = User2Param_USER2PARAM_ALTMAN_REWARD
	Default_AltmanRewardUserCmd_Passtime    = uint32(0)
	Default_AltmanRewardUserCmd_Getrewardid = uint32(0)
)

func (x *AltmanRewardUserCmd) Reset() {
	*x = AltmanRewardUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AltmanRewardUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AltmanRewardUserCmd) ProtoMessage() {}

func (x *AltmanRewardUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AltmanRewardUserCmd.ProtoReflect.Descriptor instead.
func (*AltmanRewardUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{198}
}

func (x *AltmanRewardUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_AltmanRewardUserCmd_Cmd
}

func (x *AltmanRewardUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_AltmanRewardUserCmd_Param
}

func (x *AltmanRewardUserCmd) GetPasstime() uint32 {
	if x != nil && x.Passtime != nil {
		return *x.Passtime
	}
	return Default_AltmanRewardUserCmd_Passtime
}

func (x *AltmanRewardUserCmd) GetItems() []*RewardItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *AltmanRewardUserCmd) GetGetrewardid() uint32 {
	if x != nil && x.Getrewardid != nil {
		return *x.Getrewardid
	}
	return Default_AltmanRewardUserCmd_Getrewardid
}

type ServantReservationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date   *uint32           `protobuf:"varint,1,opt,name=date,def=0" json:"date,omitempty"`
	Actids []uint32          `protobuf:"varint,2,rep,name=actids" json:"actids,omitempty"`
	Ftype  *EReservationType `protobuf:"varint,3,opt,name=ftype,enum=Cmd.EReservationType,def=1" json:"ftype,omitempty"`
}

// Default values for ServantReservationItem fields.
const (
	Default_ServantReservationItem_Date  = uint32(0)
	Default_ServantReservationItem_Ftype = EReservationType_ERESERVATIONTYPE_CONFIG
)

func (x *ServantReservationItem) Reset() {
	*x = ServantReservationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServantReservationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServantReservationItem) ProtoMessage() {}

func (x *ServantReservationItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServantReservationItem.ProtoReflect.Descriptor instead.
func (*ServantReservationItem) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{199}
}

func (x *ServantReservationItem) GetDate() uint32 {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return Default_ServantReservationItem_Date
}

func (x *ServantReservationItem) GetActids() []uint32 {
	if x != nil {
		return x.Actids
	}
	return nil
}

func (x *ServantReservationItem) GetFtype() EReservationType {
	if x != nil && x.Ftype != nil {
		return *x.Ftype
	}
	return Default_ServantReservationItem_Ftype
}

type ServantReqReservationUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param       *User2Param       `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=171" json:"param,omitempty"`
	Actid       *uint32           `protobuf:"varint,3,opt,name=actid,def=0" json:"actid,omitempty"`
	Time        *uint32           `protobuf:"varint,4,opt,name=time,def=0" json:"time,omitempty"`
	Reservation *bool             `protobuf:"varint,5,opt,name=reservation,def=0" json:"reservation,omitempty"`
	Ftype       *EReservationType `protobuf:"varint,6,opt,name=ftype,enum=Cmd.EReservationType,def=1" json:"ftype,omitempty"`
}

// Default values for ServantReqReservationUserCmd fields.
const (
	Default_ServantReqReservationUserCmd_Cmd         = Command_SCENE_USER2_PROTOCMD
	Default_ServantReqReservationUserCmd_Param       = User2Param_USER2PARAM_SERVANT_REQ_RESERVATION
	Default_ServantReqReservationUserCmd_Actid       = uint32(0)
	Default_ServantReqReservationUserCmd_Time        = uint32(0)
	Default_ServantReqReservationUserCmd_Reservation = bool(false)
	Default_ServantReqReservationUserCmd_Ftype       = EReservationType_ERESERVATIONTYPE_CONFIG
)

func (x *ServantReqReservationUserCmd) Reset() {
	*x = ServantReqReservationUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServantReqReservationUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServantReqReservationUserCmd) ProtoMessage() {}

func (x *ServantReqReservationUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServantReqReservationUserCmd.ProtoReflect.Descriptor instead.
func (*ServantReqReservationUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{200}
}

func (x *ServantReqReservationUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ServantReqReservationUserCmd_Cmd
}

func (x *ServantReqReservationUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ServantReqReservationUserCmd_Param
}

func (x *ServantReqReservationUserCmd) GetActid() uint32 {
	if x != nil && x.Actid != nil {
		return *x.Actid
	}
	return Default_ServantReqReservationUserCmd_Actid
}

func (x *ServantReqReservationUserCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_ServantReqReservationUserCmd_Time
}

func (x *ServantReqReservationUserCmd) GetReservation() bool {
	if x != nil && x.Reservation != nil {
		return *x.Reservation
	}
	return Default_ServantReqReservationUserCmd_Reservation
}

func (x *ServantReqReservationUserCmd) GetFtype() EReservationType {
	if x != nil && x.Ftype != nil {
		return *x.Ftype
	}
	return Default_ServantReqReservationUserCmd_Ftype
}

type ServantReservationUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command                  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param               `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=172" json:"param,omitempty"`
	Datas []*ServantReservationItem `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
	Opt   *uint32                   `protobuf:"varint,4,opt,name=opt,def=0" json:"opt,omitempty"`
}

// Default values for ServantReservationUserCmd fields.
const (
	Default_ServantReservationUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ServantReservationUserCmd_Param = User2Param_USER2PARAM_SERVANT_RESERVATION
	Default_ServantReservationUserCmd_Opt   = uint32(0)
)

func (x *ServantReservationUserCmd) Reset() {
	*x = ServantReservationUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServantReservationUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServantReservationUserCmd) ProtoMessage() {}

func (x *ServantReservationUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServantReservationUserCmd.ProtoReflect.Descriptor instead.
func (*ServantReservationUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{201}
}

func (x *ServantReservationUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ServantReservationUserCmd_Cmd
}

func (x *ServantReservationUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ServantReservationUserCmd_Param
}

func (x *ServantReservationUserCmd) GetDatas() []*ServantReservationItem {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *ServantReservationUserCmd) GetOpt() uint32 {
	if x != nil && x.Opt != nil {
		return *x.Opt
	}
	return Default_ServantReservationUserCmd_Opt
}

type ServantEquipItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *uint32  `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Equipid []uint32 `protobuf:"varint,2,rep,name=equipid" json:"equipid,omitempty"`
}

// Default values for ServantEquipItem fields.
const (
	Default_ServantEquipItem_Id = uint32(0)
)

func (x *ServantEquipItem) Reset() {
	*x = ServantEquipItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServantEquipItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServantEquipItem) ProtoMessage() {}

func (x *ServantEquipItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServantEquipItem.ProtoReflect.Descriptor instead.
func (*ServantEquipItem) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{202}
}

func (x *ServantEquipItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_ServantEquipItem_Id
}

func (x *ServantEquipItem) GetEquipid() []uint32 {
	if x != nil {
		return x.Equipid
	}
	return nil
}

type ServantRecEquipUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param         `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=173" json:"param,omitempty"`
	Datas []*ServantEquipItem `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for ServantRecEquipUserCmd fields.
const (
	Default_ServantRecEquipUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ServantRecEquipUserCmd_Param = User2Param_USER2PARAM_SERVANT_REC_EQUIP
)

func (x *ServantRecEquipUserCmd) Reset() {
	*x = ServantRecEquipUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServantRecEquipUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServantRecEquipUserCmd) ProtoMessage() {}

func (x *ServantRecEquipUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServantRecEquipUserCmd.ProtoReflect.Descriptor instead.
func (*ServantRecEquipUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{203}
}

func (x *ServantRecEquipUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ServantRecEquipUserCmd_Cmd
}

func (x *ServantRecEquipUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ServantRecEquipUserCmd_Param
}

func (x *ServantRecEquipUserCmd) GetDatas() []*ServantEquipItem {
	if x != nil {
		return x.Datas
	}
	return nil
}

type PrestigeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Campid *uint32 `protobuf:"varint,1,opt,name=campid" json:"campid,omitempty"`
	Level  *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	Exp    *uint32 `protobuf:"varint,3,opt,name=exp" json:"exp,omitempty"`
}

func (x *PrestigeData) Reset() {
	*x = PrestigeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrestigeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrestigeData) ProtoMessage() {}

func (x *PrestigeData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrestigeData.ProtoReflect.Descriptor instead.
func (*PrestigeData) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{204}
}

func (x *PrestigeData) GetCampid() uint32 {
	if x != nil && x.Campid != nil {
		return *x.Campid
	}
	return 0
}

func (x *PrestigeData) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *PrestigeData) GetExp() uint32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

type PrestigeNtfUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param     `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=175" json:"param,omitempty"`
	Datas []*PrestigeData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for PrestigeNtfUserCmd fields.
const (
	Default_PrestigeNtfUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_PrestigeNtfUserCmd_Param = User2Param_USER2PARAM_PRESTIGE_NTF
)

func (x *PrestigeNtfUserCmd) Reset() {
	*x = PrestigeNtfUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrestigeNtfUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrestigeNtfUserCmd) ProtoMessage() {}

func (x *PrestigeNtfUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrestigeNtfUserCmd.ProtoReflect.Descriptor instead.
func (*PrestigeNtfUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{205}
}

func (x *PrestigeNtfUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PrestigeNtfUserCmd_Cmd
}

func (x *PrestigeNtfUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PrestigeNtfUserCmd_Param
}

func (x *PrestigeNtfUserCmd) GetDatas() []*PrestigeData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type PrestigeGiveUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=176" json:"param,omitempty"`
	Itemid    *uint32     `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	Itemcount *uint32     `protobuf:"varint,4,opt,name=itemcount" json:"itemcount,omitempty"`
	Success   *bool       `protobuf:"varint,5,opt,name=success,def=1" json:"success,omitempty"`
}

// Default values for PrestigeGiveUserCmd fields.
const (
	Default_PrestigeGiveUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_PrestigeGiveUserCmd_Param   = User2Param_USER2PARAM_PRESTIGE_GIVE
	Default_PrestigeGiveUserCmd_Success = bool(true)
)

func (x *PrestigeGiveUserCmd) Reset() {
	*x = PrestigeGiveUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrestigeGiveUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrestigeGiveUserCmd) ProtoMessage() {}

func (x *PrestigeGiveUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrestigeGiveUserCmd.ProtoReflect.Descriptor instead.
func (*PrestigeGiveUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{206}
}

func (x *PrestigeGiveUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PrestigeGiveUserCmd_Cmd
}

func (x *PrestigeGiveUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PrestigeGiveUserCmd_Param
}

func (x *PrestigeGiveUserCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *PrestigeGiveUserCmd) GetItemcount() uint32 {
	if x != nil && x.Itemcount != nil {
		return *x.Itemcount
	}
	return 0
}

func (x *PrestigeGiveUserCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_PrestigeGiveUserCmd_Success
}

type UpdateGameHealthLevelUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=178" json:"param,omitempty"`
	Level   *uint32     `protobuf:"varint,3,opt,name=level,def=0" json:"level,omitempty"`
	FishWay *uint32     `protobuf:"varint,4,opt,name=fishWay,def=0" json:"fishWay,omitempty"`
}

// Default values for UpdateGameHealthLevelUserCmd fields.
const (
	Default_UpdateGameHealthLevelUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_UpdateGameHealthLevelUserCmd_Param   = User2Param_USER2PARAM_GAMEHEALTH_UPDATE
	Default_UpdateGameHealthLevelUserCmd_Level   = uint32(0)
	Default_UpdateGameHealthLevelUserCmd_FishWay = uint32(0)
)

func (x *UpdateGameHealthLevelUserCmd) Reset() {
	*x = UpdateGameHealthLevelUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGameHealthLevelUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameHealthLevelUserCmd) ProtoMessage() {}

func (x *UpdateGameHealthLevelUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameHealthLevelUserCmd.ProtoReflect.Descriptor instead.
func (*UpdateGameHealthLevelUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{207}
}

func (x *UpdateGameHealthLevelUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateGameHealthLevelUserCmd_Cmd
}

func (x *UpdateGameHealthLevelUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateGameHealthLevelUserCmd_Param
}

func (x *UpdateGameHealthLevelUserCmd) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return Default_UpdateGameHealthLevelUserCmd_Level
}

func (x *UpdateGameHealthLevelUserCmd) GetFishWay() uint32 {
	if x != nil && x.FishWay != nil {
		return *x.FishWay
	}
	return Default_UpdateGameHealthLevelUserCmd_FishWay
}

type GameHealthEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eventid *uint32               `protobuf:"varint,1,opt,name=eventid,def=0" json:"eventid,omitempty"`
	Time    *uint64               `protobuf:"varint,2,opt,name=time,def=0" json:"time,omitempty"`
	Type    *EGameHealthEventType `protobuf:"varint,3,opt,name=type,enum=Cmd.EGameHealthEventType,def=0" json:"type,omitempty"`
	Param1  *int32                `protobuf:"varint,4,opt,name=param1,def=0" json:"param1,omitempty"`
	Param2  *int32                `protobuf:"varint,5,opt,name=param2,def=0" json:"param2,omitempty"`
}

// Default values for GameHealthEvent fields.
const (
	Default_GameHealthEvent_Eventid = uint32(0)
	Default_GameHealthEvent_Time    = uint64(0)
	Default_GameHealthEvent_Type    = EGameHealthEventType_EGHEVENTTYPE_MIN
	Default_GameHealthEvent_Param1  = int32(0)
	Default_GameHealthEvent_Param2  = int32(0)
)

func (x *GameHealthEvent) Reset() {
	*x = GameHealthEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameHealthEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameHealthEvent) ProtoMessage() {}

func (x *GameHealthEvent) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameHealthEvent.ProtoReflect.Descriptor instead.
func (*GameHealthEvent) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{208}
}

func (x *GameHealthEvent) GetEventid() uint32 {
	if x != nil && x.Eventid != nil {
		return *x.Eventid
	}
	return Default_GameHealthEvent_Eventid
}

func (x *GameHealthEvent) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_GameHealthEvent_Time
}

func (x *GameHealthEvent) GetType() EGameHealthEventType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_GameHealthEvent_Type
}

func (x *GameHealthEvent) GetParam1() int32 {
	if x != nil && x.Param1 != nil {
		return *x.Param1
	}
	return Default_GameHealthEvent_Param1
}

func (x *GameHealthEvent) GetParam2() int32 {
	if x != nil && x.Param2 != nil {
		return *x.Param2
	}
	return Default_GameHealthEvent_Param2
}

type GameHealthEventStatUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param        `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=179" json:"param,omitempty"`
	Events []*GameHealthEvent `protobuf:"bytes,3,rep,name=events" json:"events,omitempty"`
}

// Default values for GameHealthEventStatUserCmd fields.
const (
	Default_GameHealthEventStatUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_GameHealthEventStatUserCmd_Param = User2Param_USER2PARAM_GAMEHEALTH_EVENT_STAT
)

func (x *GameHealthEventStatUserCmd) Reset() {
	*x = GameHealthEventStatUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameHealthEventStatUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameHealthEventStatUserCmd) ProtoMessage() {}

func (x *GameHealthEventStatUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameHealthEventStatUserCmd.ProtoReflect.Descriptor instead.
func (*GameHealthEventStatUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{209}
}

func (x *GameHealthEventStatUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GameHealthEventStatUserCmd_Cmd
}

func (x *GameHealthEventStatUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GameHealthEventStatUserCmd_Param
}

func (x *GameHealthEventStatUserCmd) GetEvents() []*GameHealthEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type Fishway2KillBossInformUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=181" json:"param,omitempty"`
}

// Default values for Fishway2KillBossInformUserCmd fields.
const (
	Default_Fishway2KillBossInformUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_Fishway2KillBossInformUserCmd_Param = User2Param_USER2PARAM_FISHWAY2_INFORM
)

func (x *Fishway2KillBossInformUserCmd) Reset() {
	*x = Fishway2KillBossInformUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fishway2KillBossInformUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fishway2KillBossInformUserCmd) ProtoMessage() {}

func (x *Fishway2KillBossInformUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fishway2KillBossInformUserCmd.ProtoReflect.Descriptor instead.
func (*Fishway2KillBossInformUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{210}
}

func (x *Fishway2KillBossInformUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_Fishway2KillBossInformUserCmd_Cmd
}

func (x *Fishway2KillBossInformUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_Fishway2KillBossInformUserCmd_Param
}

type ActPointUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=177" json:"param,omitempty"`
}

// Default values for ActPointUserCmd fields.
const (
	Default_ActPointUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ActPointUserCmd_Param = User2Param_USER2PARAM_ACT_POINT
)

func (x *ActPointUserCmd) Reset() {
	*x = ActPointUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActPointUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActPointUserCmd) ProtoMessage() {}

func (x *ActPointUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActPointUserCmd.ProtoReflect.Descriptor instead.
func (*ActPointUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{211}
}

func (x *ActPointUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ActPointUserCmd_Cmd
}

func (x *ActPointUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ActPointUserCmd_Param
}

type HighRefineAttrUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=182" json:"param,omitempty"`
	Epos  *uint32     `protobuf:"varint,3,opt,name=epos,def=0" json:"epos,omitempty"`
	Type  *uint32     `protobuf:"varint,4,opt,name=type,def=0" json:"type,omitempty"`
	Value *uint32     `protobuf:"varint,5,opt,name=value,def=0" json:"value,omitempty"`
}

// Default values for HighRefineAttrUserCmd fields.
const (
	Default_HighRefineAttrUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_HighRefineAttrUserCmd_Param = User2Param_USER2PARAM_HIGHREFINE_ATTR
	Default_HighRefineAttrUserCmd_Epos  = uint32(0)
	Default_HighRefineAttrUserCmd_Type  = uint32(0)
	Default_HighRefineAttrUserCmd_Value = uint32(0)
)

func (x *HighRefineAttrUserCmd) Reset() {
	*x = HighRefineAttrUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighRefineAttrUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighRefineAttrUserCmd) ProtoMessage() {}

func (x *HighRefineAttrUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighRefineAttrUserCmd.ProtoReflect.Descriptor instead.
func (*HighRefineAttrUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{212}
}

func (x *HighRefineAttrUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HighRefineAttrUserCmd_Cmd
}

func (x *HighRefineAttrUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HighRefineAttrUserCmd_Param
}

func (x *HighRefineAttrUserCmd) GetEpos() uint32 {
	if x != nil && x.Epos != nil {
		return *x.Epos
	}
	return Default_HighRefineAttrUserCmd_Epos
}

func (x *HighRefineAttrUserCmd) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_HighRefineAttrUserCmd_Type
}

func (x *HighRefineAttrUserCmd) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_HighRefineAttrUserCmd_Value
}

type HeadwearNpcItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round    *uint32 `protobuf:"varint,1,opt,name=round,def=0" json:"round,omitempty"`
	Firstid  *uint32 `protobuf:"varint,2,opt,name=firstid,def=0" json:"firstid,omitempty"`
	Secondid *uint32 `protobuf:"varint,3,opt,name=secondid,def=0" json:"secondid,omitempty"`
}

// Default values for HeadwearNpcItem fields.
const (
	Default_HeadwearNpcItem_Round    = uint32(0)
	Default_HeadwearNpcItem_Firstid  = uint32(0)
	Default_HeadwearNpcItem_Secondid = uint32(0)
)

func (x *HeadwearNpcItem) Reset() {
	*x = HeadwearNpcItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadwearNpcItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadwearNpcItem) ProtoMessage() {}

func (x *HeadwearNpcItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadwearNpcItem.ProtoReflect.Descriptor instead.
func (*HeadwearNpcItem) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{213}
}

func (x *HeadwearNpcItem) GetRound() uint32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return Default_HeadwearNpcItem_Round
}

func (x *HeadwearNpcItem) GetFirstid() uint32 {
	if x != nil && x.Firstid != nil {
		return *x.Firstid
	}
	return Default_HeadwearNpcItem_Firstid
}

func (x *HeadwearNpcItem) GetSecondid() uint32 {
	if x != nil && x.Secondid != nil {
		return *x.Secondid
	}
	return Default_HeadwearNpcItem_Secondid
}

type HeadwearNpcUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param        `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=183" json:"param,omitempty"`
	Npcs  []*HeadwearNpcItem `protobuf:"bytes,3,rep,name=npcs" json:"npcs,omitempty"`
}

// Default values for HeadwearNpcUserCmd fields.
const (
	Default_HeadwearNpcUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_HeadwearNpcUserCmd_Param = User2Param_USER2PARAM_HEADWEAR_NPC
)

func (x *HeadwearNpcUserCmd) Reset() {
	*x = HeadwearNpcUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadwearNpcUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadwearNpcUserCmd) ProtoMessage() {}

func (x *HeadwearNpcUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadwearNpcUserCmd.ProtoReflect.Descriptor instead.
func (*HeadwearNpcUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{214}
}

func (x *HeadwearNpcUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HeadwearNpcUserCmd_Cmd
}

func (x *HeadwearNpcUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HeadwearNpcUserCmd_Param
}

func (x *HeadwearNpcUserCmd) GetNpcs() []*HeadwearNpcItem {
	if x != nil {
		return x.Npcs
	}
	return nil
}

type HeadwearRoundUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=184" json:"param,omitempty"`
	Round    *uint32     `protobuf:"varint,3,opt,name=round,def=0" json:"round,omitempty"`
	Blood    *uint32     `protobuf:"varint,4,opt,name=blood,def=0" json:"blood,omitempty"`
	Skiptime *uint32     `protobuf:"varint,5,opt,name=skiptime,def=0" json:"skiptime,omitempty"`
	Furytime *uint32     `protobuf:"varint,6,opt,name=furytime,def=0" json:"furytime,omitempty"`
	Crystals []uint32    `protobuf:"varint,7,rep,name=crystals" json:"crystals,omitempty"`
	Skills   []uint32    `protobuf:"varint,8,rep,name=skills" json:"skills,omitempty"`
}

// Default values for HeadwearRoundUserCmd fields.
const (
	Default_HeadwearRoundUserCmd_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_HeadwearRoundUserCmd_Param    = User2Param_USER2PARAM_HEADWEAR_ROUND
	Default_HeadwearRoundUserCmd_Round    = uint32(0)
	Default_HeadwearRoundUserCmd_Blood    = uint32(0)
	Default_HeadwearRoundUserCmd_Skiptime = uint32(0)
	Default_HeadwearRoundUserCmd_Furytime = uint32(0)
)

func (x *HeadwearRoundUserCmd) Reset() {
	*x = HeadwearRoundUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadwearRoundUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadwearRoundUserCmd) ProtoMessage() {}

func (x *HeadwearRoundUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadwearRoundUserCmd.ProtoReflect.Descriptor instead.
func (*HeadwearRoundUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{215}
}

func (x *HeadwearRoundUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HeadwearRoundUserCmd_Cmd
}

func (x *HeadwearRoundUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HeadwearRoundUserCmd_Param
}

func (x *HeadwearRoundUserCmd) GetRound() uint32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return Default_HeadwearRoundUserCmd_Round
}

func (x *HeadwearRoundUserCmd) GetBlood() uint32 {
	if x != nil && x.Blood != nil {
		return *x.Blood
	}
	return Default_HeadwearRoundUserCmd_Blood
}

func (x *HeadwearRoundUserCmd) GetSkiptime() uint32 {
	if x != nil && x.Skiptime != nil {
		return *x.Skiptime
	}
	return Default_HeadwearRoundUserCmd_Skiptime
}

func (x *HeadwearRoundUserCmd) GetFurytime() uint32 {
	if x != nil && x.Furytime != nil {
		return *x.Furytime
	}
	return Default_HeadwearRoundUserCmd_Furytime
}

func (x *HeadwearRoundUserCmd) GetCrystals() []uint32 {
	if x != nil {
		return x.Crystals
	}
	return nil
}

func (x *HeadwearRoundUserCmd) GetSkills() []uint32 {
	if x != nil {
		return x.Skills
	}
	return nil
}

type HeadwearTowerUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=185" json:"param,omitempty"`
	Npcid    *uint32     `protobuf:"varint,3,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Level    *uint32     `protobuf:"varint,4,opt,name=level,def=0" json:"level,omitempty"`
	Crystals []uint32    `protobuf:"varint,5,rep,name=crystals" json:"crystals,omitempty"`
}

// Default values for HeadwearTowerUserCmd fields.
const (
	Default_HeadwearTowerUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_HeadwearTowerUserCmd_Param = User2Param_USER2PARAM_HEADWEAR_TOWER
	Default_HeadwearTowerUserCmd_Npcid = uint32(0)
	Default_HeadwearTowerUserCmd_Level = uint32(0)
)

func (x *HeadwearTowerUserCmd) Reset() {
	*x = HeadwearTowerUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadwearTowerUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadwearTowerUserCmd) ProtoMessage() {}

func (x *HeadwearTowerUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadwearTowerUserCmd.ProtoReflect.Descriptor instead.
func (*HeadwearTowerUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{216}
}

func (x *HeadwearTowerUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HeadwearTowerUserCmd_Cmd
}

func (x *HeadwearTowerUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HeadwearTowerUserCmd_Param
}

func (x *HeadwearTowerUserCmd) GetNpcid() uint32 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_HeadwearTowerUserCmd_Npcid
}

func (x *HeadwearTowerUserCmd) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return Default_HeadwearTowerUserCmd_Level
}

func (x *HeadwearTowerUserCmd) GetCrystals() []uint32 {
	if x != nil {
		return x.Crystals
	}
	return nil
}

type HeadwearEndUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=186" json:"param,omitempty"`
	Round     *uint32     `protobuf:"varint,3,opt,name=round,def=0" json:"round,omitempty"`
	Coldtime  *uint32     `protobuf:"varint,4,opt,name=coldtime,def=0" json:"coldtime,omitempty"`
	Weektimes *uint32     `protobuf:"varint,5,opt,name=weektimes,def=0" json:"weektimes,omitempty"`
	Coinanum  *uint32     `protobuf:"varint,6,opt,name=coinanum,def=0" json:"coinanum,omitempty"`
	Coinbnum  *uint32     `protobuf:"varint,7,opt,name=coinbnum,def=0" json:"coinbnum,omitempty"`
	Type      *uint32     `protobuf:"varint,8,opt,name=type,def=0" json:"type,omitempty"`
}

// Default values for HeadwearEndUserCmd fields.
const (
	Default_HeadwearEndUserCmd_Cmd       = Command_SCENE_USER2_PROTOCMD
	Default_HeadwearEndUserCmd_Param     = User2Param_USER2PARAM_HEADWEAR_END
	Default_HeadwearEndUserCmd_Round     = uint32(0)
	Default_HeadwearEndUserCmd_Coldtime  = uint32(0)
	Default_HeadwearEndUserCmd_Weektimes = uint32(0)
	Default_HeadwearEndUserCmd_Coinanum  = uint32(0)
	Default_HeadwearEndUserCmd_Coinbnum  = uint32(0)
	Default_HeadwearEndUserCmd_Type      = uint32(0)
)

func (x *HeadwearEndUserCmd) Reset() {
	*x = HeadwearEndUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadwearEndUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadwearEndUserCmd) ProtoMessage() {}

func (x *HeadwearEndUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadwearEndUserCmd.ProtoReflect.Descriptor instead.
func (*HeadwearEndUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{217}
}

func (x *HeadwearEndUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HeadwearEndUserCmd_Cmd
}

func (x *HeadwearEndUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HeadwearEndUserCmd_Param
}

func (x *HeadwearEndUserCmd) GetRound() uint32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return Default_HeadwearEndUserCmd_Round
}

func (x *HeadwearEndUserCmd) GetColdtime() uint32 {
	if x != nil && x.Coldtime != nil {
		return *x.Coldtime
	}
	return Default_HeadwearEndUserCmd_Coldtime
}

func (x *HeadwearEndUserCmd) GetWeektimes() uint32 {
	if x != nil && x.Weektimes != nil {
		return *x.Weektimes
	}
	return Default_HeadwearEndUserCmd_Weektimes
}

func (x *HeadwearEndUserCmd) GetCoinanum() uint32 {
	if x != nil && x.Coinanum != nil {
		return *x.Coinanum
	}
	return Default_HeadwearEndUserCmd_Coinanum
}

func (x *HeadwearEndUserCmd) GetCoinbnum() uint32 {
	if x != nil && x.Coinbnum != nil {
		return *x.Coinbnum
	}
	return Default_HeadwearEndUserCmd_Coinbnum
}

func (x *HeadwearEndUserCmd) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_HeadwearEndUserCmd_Type
}

type HeadwearRangeUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=187" json:"param,omitempty"`
	Tower *uint32     `protobuf:"varint,3,opt,name=tower,def=0" json:"tower,omitempty"`
}

// Default values for HeadwearRangeUserCmd fields.
const (
	Default_HeadwearRangeUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_HeadwearRangeUserCmd_Param = User2Param_USER2PARAM_HEADWEAR_RANGE
	Default_HeadwearRangeUserCmd_Tower = uint32(0)
)

func (x *HeadwearRangeUserCmd) Reset() {
	*x = HeadwearRangeUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadwearRangeUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadwearRangeUserCmd) ProtoMessage() {}

func (x *HeadwearRangeUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadwearRangeUserCmd.ProtoReflect.Descriptor instead.
func (*HeadwearRangeUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{218}
}

func (x *HeadwearRangeUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HeadwearRangeUserCmd_Cmd
}

func (x *HeadwearRangeUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HeadwearRangeUserCmd_Param
}

func (x *HeadwearRangeUserCmd) GetTower() uint32 {
	if x != nil && x.Tower != nil {
		return *x.Tower
	}
	return Default_HeadwearRangeUserCmd_Tower
}

type ServantStatisticsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *uint32          `protobuf:"varint,1,opt,name=type,def=0" json:"type,omitempty"`
	Subtype   *uint32          `protobuf:"varint,2,opt,name=subtype,def=0" json:"subtype,omitempty"`
	Status    *EProgressStatus `protobuf:"varint,3,opt,name=status,enum=Cmd.EProgressStatus,def=0" json:"status,omitempty"`
	Passtimes *uint32          `protobuf:"varint,4,opt,name=passtimes,def=0" json:"passtimes,omitempty"`
	Params    []uint32         `protobuf:"varint,5,rep,name=params" json:"params,omitempty"`
}

// Default values for ServantStatisticsItem fields.
const (
	Default_ServantStatisticsItem_Type      = uint32(0)
	Default_ServantStatisticsItem_Subtype   = uint32(0)
	Default_ServantStatisticsItem_Status    = EProgressStatus_EPROGRESSSTATUS_MIN
	Default_ServantStatisticsItem_Passtimes = uint32(0)
)

func (x *ServantStatisticsItem) Reset() {
	*x = ServantStatisticsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServantStatisticsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServantStatisticsItem) ProtoMessage() {}

func (x *ServantStatisticsItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServantStatisticsItem.ProtoReflect.Descriptor instead.
func (*ServantStatisticsItem) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{219}
}

func (x *ServantStatisticsItem) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ServantStatisticsItem_Type
}

func (x *ServantStatisticsItem) GetSubtype() uint32 {
	if x != nil && x.Subtype != nil {
		return *x.Subtype
	}
	return Default_ServantStatisticsItem_Subtype
}

func (x *ServantStatisticsItem) GetStatus() EProgressStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_ServantStatisticsItem_Status
}

func (x *ServantStatisticsItem) GetPasstimes() uint32 {
	if x != nil && x.Passtimes != nil {
		return *x.Passtimes
	}
	return Default_ServantStatisticsItem_Passtimes
}

func (x *ServantStatisticsItem) GetParams() []uint32 {
	if x != nil {
		return x.Params
	}
	return nil
}

type ServantStatisticsUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command                 `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param              `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=191" json:"param,omitempty"`
	Datas []*ServantStatisticsItem `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for ServantStatisticsUserCmd fields.
const (
	Default_ServantStatisticsUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ServantStatisticsUserCmd_Param = User2Param_USER2PARAM_SERVANT_STATISTICS
)

func (x *ServantStatisticsUserCmd) Reset() {
	*x = ServantStatisticsUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServantStatisticsUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServantStatisticsUserCmd) ProtoMessage() {}

func (x *ServantStatisticsUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServantStatisticsUserCmd.ProtoReflect.Descriptor instead.
func (*ServantStatisticsUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{220}
}

func (x *ServantStatisticsUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ServantStatisticsUserCmd_Cmd
}

func (x *ServantStatisticsUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ServantStatisticsUserCmd_Param
}

func (x *ServantStatisticsUserCmd) GetDatas() []*ServantStatisticsItem {
	if x != nil {
		return x.Datas
	}
	return nil
}

type ServantCalcShareData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *uint32  `protobuf:"varint,1,opt,name=type,def=0" json:"type,omitempty"`
	Params []string `protobuf:"bytes,2,rep,name=params" json:"params,omitempty"`
}

// Default values for ServantCalcShareData fields.
const (
	Default_ServantCalcShareData_Type = uint32(0)
)

func (x *ServantCalcShareData) Reset() {
	*x = ServantCalcShareData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServantCalcShareData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServantCalcShareData) ProtoMessage() {}

func (x *ServantCalcShareData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServantCalcShareData.ProtoReflect.Descriptor instead.
func (*ServantCalcShareData) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{221}
}

func (x *ServantCalcShareData) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ServantCalcShareData_Type
}

func (x *ServantCalcShareData) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

type ServantMail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       *uint32                 `protobuf:"varint,1,opt,name=time,def=0" json:"time,omitempty"`
	HasTeam    *bool                   `protobuf:"varint,2,opt,name=has_team,json=hasTeam,def=0" json:"has_team,omitempty"`
	EnterRaid  *bool                   `protobuf:"varint,3,opt,name=enter_raid,json=enterRaid,def=0" json:"enter_raid,omitempty"`
	BattleTime *uint32                 `protobuf:"varint,4,opt,name=battle_time,json=battleTime,def=0" json:"battle_time,omitempty"`
	Cards      []uint32                `protobuf:"varint,5,rep,name=cards" json:"cards,omitempty"`
	Calcdata   []*ServantCalcShareData `protobuf:"bytes,6,rep,name=calcdata" json:"calcdata,omitempty"`
}

// Default values for ServantMail fields.
const (
	Default_ServantMail_Time       = uint32(0)
	Default_ServantMail_HasTeam    = bool(false)
	Default_ServantMail_EnterRaid  = bool(false)
	Default_ServantMail_BattleTime = uint32(0)
)

func (x *ServantMail) Reset() {
	*x = ServantMail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServantMail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServantMail) ProtoMessage() {}

func (x *ServantMail) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServantMail.ProtoReflect.Descriptor instead.
func (*ServantMail) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{222}
}

func (x *ServantMail) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_ServantMail_Time
}

func (x *ServantMail) GetHasTeam() bool {
	if x != nil && x.HasTeam != nil {
		return *x.HasTeam
	}
	return Default_ServantMail_HasTeam
}

func (x *ServantMail) GetEnterRaid() bool {
	if x != nil && x.EnterRaid != nil {
		return *x.EnterRaid
	}
	return Default_ServantMail_EnterRaid
}

func (x *ServantMail) GetBattleTime() uint32 {
	if x != nil && x.BattleTime != nil {
		return *x.BattleTime
	}
	return Default_ServantMail_BattleTime
}

func (x *ServantMail) GetCards() []uint32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *ServantMail) GetCalcdata() []*ServantCalcShareData {
	if x != nil {
		return x.Calcdata
	}
	return nil
}

type ServantStatisticsMailUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=192" json:"param,omitempty"`
	Mail  *ServantMail `protobuf:"bytes,3,opt,name=mail" json:"mail,omitempty"`
}

// Default values for ServantStatisticsMailUserCmd fields.
const (
	Default_ServantStatisticsMailUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ServantStatisticsMailUserCmd_Param = User2Param_USER2PARAM_SERVANT_STATISTICS_MAIL
)

func (x *ServantStatisticsMailUserCmd) Reset() {
	*x = ServantStatisticsMailUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServantStatisticsMailUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServantStatisticsMailUserCmd) ProtoMessage() {}

func (x *ServantStatisticsMailUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServantStatisticsMailUserCmd.ProtoReflect.Descriptor instead.
func (*ServantStatisticsMailUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{223}
}

func (x *ServantStatisticsMailUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ServantStatisticsMailUserCmd_Cmd
}

func (x *ServantStatisticsMailUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ServantStatisticsMailUserCmd_Param
}

func (x *ServantStatisticsMailUserCmd) GetMail() *ServantMail {
	if x != nil {
		return x.Mail
	}
	return nil
}

type HeadwearOpenUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=201" json:"param,omitempty"`
}

// Default values for HeadwearOpenUserCmd fields.
const (
	Default_HeadwearOpenUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_HeadwearOpenUserCmd_Param = User2Param_USER2PARAM_HEADWEAR_OPEN
)

func (x *HeadwearOpenUserCmd) Reset() {
	*x = HeadwearOpenUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadwearOpenUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadwearOpenUserCmd) ProtoMessage() {}

func (x *HeadwearOpenUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadwearOpenUserCmd.ProtoReflect.Descriptor instead.
func (*HeadwearOpenUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{224}
}

func (x *HeadwearOpenUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HeadwearOpenUserCmd_Cmd
}

func (x *HeadwearOpenUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HeadwearOpenUserCmd_Param
}

type FastTransClassUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=198" json:"param,omitempty"`
}

// Default values for FastTransClassUserCmd fields.
const (
	Default_FastTransClassUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_FastTransClassUserCmd_Param = User2Param_USER2PARAM_FAST_TRANS_CLASS
)

func (x *FastTransClassUserCmd) Reset() {
	*x = FastTransClassUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastTransClassUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastTransClassUserCmd) ProtoMessage() {}

func (x *FastTransClassUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastTransClassUserCmd.ProtoReflect.Descriptor instead.
func (*FastTransClassUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{225}
}

func (x *FastTransClassUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FastTransClassUserCmd_Cmd
}

func (x *FastTransClassUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FastTransClassUserCmd_Param
}

type FastTransGemQueryUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=199" json:"param,omitempty"`
	Ischoose *bool       `protobuf:"varint,3,opt,name=ischoose,def=0" json:"ischoose,omitempty"`
}

// Default values for FastTransGemQueryUserCmd fields.
const (
	Default_FastTransGemQueryUserCmd_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_FastTransGemQueryUserCmd_Param    = User2Param_USER2PARAM_FAST_TRANS_GEM_QUERY
	Default_FastTransGemQueryUserCmd_Ischoose = bool(false)
)

func (x *FastTransGemQueryUserCmd) Reset() {
	*x = FastTransGemQueryUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastTransGemQueryUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastTransGemQueryUserCmd) ProtoMessage() {}

func (x *FastTransGemQueryUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastTransGemQueryUserCmd.ProtoReflect.Descriptor instead.
func (*FastTransGemQueryUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{226}
}

func (x *FastTransGemQueryUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FastTransGemQueryUserCmd_Cmd
}

func (x *FastTransGemQueryUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FastTransGemQueryUserCmd_Param
}

func (x *FastTransGemQueryUserCmd) GetIschoose() bool {
	if x != nil && x.Ischoose != nil {
		return *x.Ischoose
	}
	return Default_FastTransGemQueryUserCmd_Ischoose
}

type FastTransGemGetUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=200" json:"param,omitempty"`
	Gemid *uint32     `protobuf:"varint,3,opt,name=gemid,def=0" json:"gemid,omitempty"`
}

// Default values for FastTransGemGetUserCmd fields.
const (
	Default_FastTransGemGetUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_FastTransGemGetUserCmd_Param = User2Param_USER2PARAM_FAST_TRANS_GEM_GET
	Default_FastTransGemGetUserCmd_Gemid = uint32(0)
)

func (x *FastTransGemGetUserCmd) Reset() {
	*x = FastTransGemGetUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastTransGemGetUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastTransGemGetUserCmd) ProtoMessage() {}

func (x *FastTransGemGetUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastTransGemGetUserCmd.ProtoReflect.Descriptor instead.
func (*FastTransGemGetUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{227}
}

func (x *FastTransGemGetUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FastTransGemGetUserCmd_Cmd
}

func (x *FastTransGemGetUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FastTransGemGetUserCmd_Param
}

func (x *FastTransGemGetUserCmd) GetGemid() uint32 {
	if x != nil && x.Gemid != nil {
		return *x.Gemid
	}
	return Default_FastTransGemGetUserCmd_Gemid
}

type FourthSkillCostGetUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=205" json:"param,omitempty"`
}

// Default values for FourthSkillCostGetUserCmd fields.
const (
	Default_FourthSkillCostGetUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_FourthSkillCostGetUserCmd_Param = User2Param_USER2PARAM_FOURTH_SKILL_COST_GET
)

func (x *FourthSkillCostGetUserCmd) Reset() {
	*x = FourthSkillCostGetUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FourthSkillCostGetUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FourthSkillCostGetUserCmd) ProtoMessage() {}

func (x *FourthSkillCostGetUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FourthSkillCostGetUserCmd.ProtoReflect.Descriptor instead.
func (*FourthSkillCostGetUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{228}
}

func (x *FourthSkillCostGetUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FourthSkillCostGetUserCmd_Cmd
}

func (x *FourthSkillCostGetUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FourthSkillCostGetUserCmd_Param
}

type BuildWeather struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Time *uint32 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
}

func (x *BuildWeather) Reset() {
	*x = BuildWeather{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildWeather) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildWeather) ProtoMessage() {}

func (x *BuildWeather) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildWeather.ProtoReflect.Descriptor instead.
func (*BuildWeather) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{229}
}

func (x *BuildWeather) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BuildWeather) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type BuildBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hp *uint32 `protobuf:"varint,1,opt,name=hp" json:"hp,omitempty"`
}

func (x *BuildBlock) Reset() {
	*x = BuildBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildBlock) ProtoMessage() {}

func (x *BuildBlock) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildBlock.ProtoReflect.Descriptor instead.
func (*BuildBlock) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{230}
}

func (x *BuildBlock) GetHp() uint32 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return 0
}

type BuildTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Times *uint32          `protobuf:"varint,1,opt,name=times" json:"times,omitempty"`
	Datas []*RareEliteData `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
}

func (x *BuildTimer) Reset() {
	*x = BuildTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildTimer) ProtoMessage() {}

func (x *BuildTimer) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildTimer.ProtoReflect.Descriptor instead.
func (*BuildTimer) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{231}
}

func (x *BuildTimer) GetTimes() uint32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

func (x *BuildTimer) GetDatas() []*RareEliteData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type BuildNpcData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint64       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Npcid    *uint32       `protobuf:"varint,2,opt,name=npcid" json:"npcid,omitempty"`
	Mapid    *uint32       `protobuf:"varint,3,opt,name=mapid" json:"mapid,omitempty"`
	Time     *uint32       `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	Dir      *uint32       `protobuf:"varint,5,opt,name=dir" json:"dir,omitempty"`
	Pos      *Pos          `protobuf:"bytes,6,opt,name=pos" json:"pos,omitempty"`
	Status   *EBuildStatus `protobuf:"varint,7,opt,name=status,enum=Cmd.EBuildStatus" json:"status,omitempty"`
	Items    []*ItemInfo   `protobuf:"bytes,8,rep,name=items" json:"items,omitempty"`
	Elements []uint32      `protobuf:"varint,9,rep,name=elements" json:"elements,omitempty"`
	Weather  *BuildWeather `protobuf:"bytes,10,opt,name=weather" json:"weather,omitempty"`
	Block    *BuildBlock   `protobuf:"bytes,11,opt,name=block" json:"block,omitempty"`
	Timer    *BuildTimer   `protobuf:"bytes,12,opt,name=timer" json:"timer,omitempty"`
}

func (x *BuildNpcData) Reset() {
	*x = BuildNpcData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildNpcData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildNpcData) ProtoMessage() {}

func (x *BuildNpcData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildNpcData.ProtoReflect.Descriptor instead.
func (*BuildNpcData) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{232}
}

func (x *BuildNpcData) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BuildNpcData) GetNpcid() uint32 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return 0
}

func (x *BuildNpcData) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return 0
}

func (x *BuildNpcData) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *BuildNpcData) GetDir() uint32 {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return 0
}

func (x *BuildNpcData) GetPos() *Pos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *BuildNpcData) GetStatus() EBuildStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return EBuildStatus_EBUILDSTATUS_INIT
}

func (x *BuildNpcData) GetItems() []*ItemInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *BuildNpcData) GetElements() []uint32 {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *BuildNpcData) GetWeather() *BuildWeather {
	if x != nil {
		return x.Weather
	}
	return nil
}

func (x *BuildNpcData) GetBlock() *BuildBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *BuildNpcData) GetTimer() *BuildTimer {
	if x != nil {
		return x.Timer
	}
	return nil
}

type BuildDataQueryUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param   `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=202" json:"param,omitempty"`
	Data  *BuildNpcData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

// Default values for BuildDataQueryUserCmd fields.
const (
	Default_BuildDataQueryUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_BuildDataQueryUserCmd_Param = User2Param_USER2PARAM_BUILD_DATA_QUERY
)

func (x *BuildDataQueryUserCmd) Reset() {
	*x = BuildDataQueryUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildDataQueryUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildDataQueryUserCmd) ProtoMessage() {}

func (x *BuildDataQueryUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildDataQueryUserCmd.ProtoReflect.Descriptor instead.
func (*BuildDataQueryUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{233}
}

func (x *BuildDataQueryUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuildDataQueryUserCmd_Cmd
}

func (x *BuildDataQueryUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuildDataQueryUserCmd_Param
}

func (x *BuildDataQueryUserCmd) GetData() *BuildNpcData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BuildContributeUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param   `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=203" json:"param,omitempty"`
	Item    *ItemInfo     `protobuf:"bytes,3,opt,name=item" json:"item,omitempty"`
	Data    *BuildNpcData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	Success *bool         `protobuf:"varint,5,opt,name=success" json:"success,omitempty"`
}

// Default values for BuildContributeUserCmd fields.
const (
	Default_BuildContributeUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_BuildContributeUserCmd_Param = User2Param_USER2PARAM_BUILD_CONTRIBUTE
)

func (x *BuildContributeUserCmd) Reset() {
	*x = BuildContributeUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildContributeUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildContributeUserCmd) ProtoMessage() {}

func (x *BuildContributeUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildContributeUserCmd.ProtoReflect.Descriptor instead.
func (*BuildContributeUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{234}
}

func (x *BuildContributeUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuildContributeUserCmd_Cmd
}

func (x *BuildContributeUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuildContributeUserCmd_Param
}

func (x *BuildContributeUserCmd) GetItem() *ItemInfo {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *BuildContributeUserCmd) GetData() *BuildNpcData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BuildContributeUserCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type BuildOperateUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param   `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=204" json:"param,omitempty"`
	Id      *uint32       `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Data    *BuildNpcData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	Success *bool         `protobuf:"varint,5,opt,name=success" json:"success,omitempty"`
	Count   *uint32       `protobuf:"varint,6,opt,name=count" json:"count,omitempty"`
}

// Default values for BuildOperateUserCmd fields.
const (
	Default_BuildOperateUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_BuildOperateUserCmd_Param = User2Param_USER2PARAM_BUILD_OPERATE
)

func (x *BuildOperateUserCmd) Reset() {
	*x = BuildOperateUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildOperateUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildOperateUserCmd) ProtoMessage() {}

func (x *BuildOperateUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildOperateUserCmd.ProtoReflect.Descriptor instead.
func (*BuildOperateUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{235}
}

func (x *BuildOperateUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BuildOperateUserCmd_Cmd
}

func (x *BuildOperateUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BuildOperateUserCmd_Param
}

func (x *BuildOperateUserCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BuildOperateUserCmd) GetData() *BuildNpcData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BuildOperateUserCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *BuildOperateUserCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type NightmareAttrQueryUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=211" json:"param,omitempty"`
	Count *uint32     `protobuf:"varint,3,opt,name=count,def=0" json:"count,omitempty"`
}

// Default values for NightmareAttrQueryUserCmd fields.
const (
	Default_NightmareAttrQueryUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_NightmareAttrQueryUserCmd_Param = User2Param_USER2PARAM_NIGHTMARE_ATTR_QUERY
	Default_NightmareAttrQueryUserCmd_Count = uint32(0)
)

func (x *NightmareAttrQueryUserCmd) Reset() {
	*x = NightmareAttrQueryUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NightmareAttrQueryUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NightmareAttrQueryUserCmd) ProtoMessage() {}

func (x *NightmareAttrQueryUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NightmareAttrQueryUserCmd.ProtoReflect.Descriptor instead.
func (*NightmareAttrQueryUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{236}
}

func (x *NightmareAttrQueryUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NightmareAttrQueryUserCmd_Cmd
}

func (x *NightmareAttrQueryUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NightmareAttrQueryUserCmd_Param
}

func (x *NightmareAttrQueryUserCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_NightmareAttrQueryUserCmd_Count
}

type NightmareAttrGetUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=212" json:"param,omitempty"`
	Count   *uint32     `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Success *bool       `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
}

// Default values for NightmareAttrGetUserCmd fields.
const (
	Default_NightmareAttrGetUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_NightmareAttrGetUserCmd_Param = User2Param_USER2PARAM_NIGHTMARE_ATTR_GET
)

func (x *NightmareAttrGetUserCmd) Reset() {
	*x = NightmareAttrGetUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NightmareAttrGetUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NightmareAttrGetUserCmd) ProtoMessage() {}

func (x *NightmareAttrGetUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NightmareAttrGetUserCmd.ProtoReflect.Descriptor instead.
func (*NightmareAttrGetUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{237}
}

func (x *NightmareAttrGetUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NightmareAttrGetUserCmd_Cmd
}

func (x *NightmareAttrGetUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NightmareAttrGetUserCmd_Param
}

func (x *NightmareAttrGetUserCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *NightmareAttrGetUserCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type MapAnimeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapid   *uint32  `protobuf:"varint,1,opt,name=mapid,def=0" json:"mapid,omitempty"`
	Animeid []uint32 `protobuf:"varint,2,rep,name=animeid" json:"animeid,omitempty"`
}

// Default values for MapAnimeData fields.
const (
	Default_MapAnimeData_Mapid = uint32(0)
)

func (x *MapAnimeData) Reset() {
	*x = MapAnimeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapAnimeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapAnimeData) ProtoMessage() {}

func (x *MapAnimeData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapAnimeData.ProtoReflect.Descriptor instead.
func (*MapAnimeData) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{238}
}

func (x *MapAnimeData) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_MapAnimeData_Mapid
}

func (x *MapAnimeData) GetAnimeid() []uint32 {
	if x != nil {
		return x.Animeid
	}
	return nil
}

type MapAnimeUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=197" json:"param,omitempty"`
	Mapid   *uint32     `protobuf:"varint,3,opt,name=mapid,def=0" json:"mapid,omitempty"`
	Animeid []uint32    `protobuf:"varint,4,rep,name=animeid" json:"animeid,omitempty"`
}

// Default values for MapAnimeUserCmd fields.
const (
	Default_MapAnimeUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_MapAnimeUserCmd_Param = User2Param_USER2PARAM_MAP_ANIME
	Default_MapAnimeUserCmd_Mapid = uint32(0)
)

func (x *MapAnimeUserCmd) Reset() {
	*x = MapAnimeUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapAnimeUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapAnimeUserCmd) ProtoMessage() {}

func (x *MapAnimeUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapAnimeUserCmd.ProtoReflect.Descriptor instead.
func (*MapAnimeUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{239}
}

func (x *MapAnimeUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MapAnimeUserCmd_Cmd
}

func (x *MapAnimeUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MapAnimeUserCmd_Param
}

func (x *MapAnimeUserCmd) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_MapAnimeUserCmd_Mapid
}

func (x *MapAnimeUserCmd) GetAnimeid() []uint32 {
	if x != nil {
		return x.Animeid
	}
	return nil
}

type ShootNpcUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=216" json:"param,omitempty"`
	Npcguid *uint64     `protobuf:"varint,3,opt,name=npcguid" json:"npcguid,omitempty"`
}

// Default values for ShootNpcUserCmd fields.
const (
	Default_ShootNpcUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ShootNpcUserCmd_Param = User2Param_USER2PARAM_SHOOT_NPC
)

func (x *ShootNpcUserCmd) Reset() {
	*x = ShootNpcUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShootNpcUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShootNpcUserCmd) ProtoMessage() {}

func (x *ShootNpcUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShootNpcUserCmd.ProtoReflect.Descriptor instead.
func (*ShootNpcUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{240}
}

func (x *ShootNpcUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ShootNpcUserCmd_Cmd
}

func (x *ShootNpcUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ShootNpcUserCmd_Param
}

func (x *ShootNpcUserCmd) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return 0
}

type PaySignInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activityid  *uint32 `protobuf:"varint,1,opt,name=activityid" json:"activityid,omitempty"`
	Rewardday   *uint32 `protobuf:"varint,2,opt,name=rewardday" json:"rewardday,omitempty"`
	Unrewardday *uint32 `protobuf:"varint,3,opt,name=unrewardday" json:"unrewardday,omitempty"`
}

func (x *PaySignInfo) Reset() {
	*x = PaySignInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaySignInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaySignInfo) ProtoMessage() {}

func (x *PaySignInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaySignInfo.ProtoReflect.Descriptor instead.
func (*PaySignInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{241}
}

func (x *PaySignInfo) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *PaySignInfo) GetRewardday() uint32 {
	if x != nil && x.Rewardday != nil {
		return *x.Rewardday
	}
	return 0
}

func (x *PaySignInfo) GetUnrewardday() uint32 {
	if x != nil && x.Unrewardday != nil {
		return *x.Unrewardday
	}
	return 0
}

type PaySignNtfUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param    `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=217" json:"param,omitempty"`
	Infos []*PaySignInfo `protobuf:"bytes,3,rep,name=infos" json:"infos,omitempty"`
}

// Default values for PaySignNtfUserCmd fields.
const (
	Default_PaySignNtfUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_PaySignNtfUserCmd_Param = User2Param_USER2PARAM_PAYSIGN_NTF
)

func (x *PaySignNtfUserCmd) Reset() {
	*x = PaySignNtfUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaySignNtfUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaySignNtfUserCmd) ProtoMessage() {}

func (x *PaySignNtfUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaySignNtfUserCmd.ProtoReflect.Descriptor instead.
func (*PaySignNtfUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{242}
}

func (x *PaySignNtfUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PaySignNtfUserCmd_Cmd
}

func (x *PaySignNtfUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PaySignNtfUserCmd_Param
}

func (x *PaySignNtfUserCmd) GetInfos() []*PaySignInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type PaySignBuyUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=218" json:"param,omitempty"`
	Activityid *uint32      `protobuf:"varint,3,opt,name=activityid" json:"activityid,omitempty"`
	Info       *PaySignInfo `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
}

// Default values for PaySignBuyUserCmd fields.
const (
	Default_PaySignBuyUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_PaySignBuyUserCmd_Param = User2Param_USER2PARAM_PAYSIGN_BUY
)

func (x *PaySignBuyUserCmd) Reset() {
	*x = PaySignBuyUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaySignBuyUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaySignBuyUserCmd) ProtoMessage() {}

func (x *PaySignBuyUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaySignBuyUserCmd.ProtoReflect.Descriptor instead.
func (*PaySignBuyUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{243}
}

func (x *PaySignBuyUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PaySignBuyUserCmd_Cmd
}

func (x *PaySignBuyUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PaySignBuyUserCmd_Param
}

func (x *PaySignBuyUserCmd) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *PaySignBuyUserCmd) GetInfo() *PaySignInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type PaySignRewardUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=219" json:"param,omitempty"`
	Activityid *uint32      `protobuf:"varint,3,opt,name=activityid" json:"activityid,omitempty"`
	Info       *PaySignInfo `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
}

// Default values for PaySignRewardUserCmd fields.
const (
	Default_PaySignRewardUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_PaySignRewardUserCmd_Param = User2Param_USER2PARAM_PAYSIGN_REWARD
)

func (x *PaySignRewardUserCmd) Reset() {
	*x = PaySignRewardUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaySignRewardUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaySignRewardUserCmd) ProtoMessage() {}

func (x *PaySignRewardUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaySignRewardUserCmd.ProtoReflect.Descriptor instead.
func (*PaySignRewardUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{244}
}

func (x *PaySignRewardUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PaySignRewardUserCmd_Cmd
}

func (x *PaySignRewardUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PaySignRewardUserCmd_Param
}

func (x *PaySignRewardUserCmd) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *PaySignRewardUserCmd) GetInfo() *PaySignInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExtractionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gridid   *uint32 `protobuf:"varint,1,opt,name=gridid,def=0" json:"gridid,omitempty"`
	Itemid   *uint32 `protobuf:"varint,2,opt,name=itemid,def=0" json:"itemid,omitempty"`
	Refinelv *uint32 `protobuf:"varint,3,opt,name=refinelv,def=0" json:"refinelv,omitempty"`
	Lv       *uint32 `protobuf:"varint,4,opt,name=lv,def=0" json:"lv,omitempty"`
	Time     *uint32 `protobuf:"varint,5,opt,name=time,def=0" json:"time,omitempty"`
}

// Default values for ExtractionData fields.
const (
	Default_ExtractionData_Gridid   = uint32(0)
	Default_ExtractionData_Itemid   = uint32(0)
	Default_ExtractionData_Refinelv = uint32(0)
	Default_ExtractionData_Lv       = uint32(0)
	Default_ExtractionData_Time     = uint32(0)
)

func (x *ExtractionData) Reset() {
	*x = ExtractionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractionData) ProtoMessage() {}

func (x *ExtractionData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractionData.ProtoReflect.Descriptor instead.
func (*ExtractionData) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{245}
}

func (x *ExtractionData) GetGridid() uint32 {
	if x != nil && x.Gridid != nil {
		return *x.Gridid
	}
	return Default_ExtractionData_Gridid
}

func (x *ExtractionData) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_ExtractionData_Itemid
}

func (x *ExtractionData) GetRefinelv() uint32 {
	if x != nil && x.Refinelv != nil {
		return *x.Refinelv
	}
	return Default_ExtractionData_Refinelv
}

func (x *ExtractionData) GetLv() uint32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return Default_ExtractionData_Lv
}

func (x *ExtractionData) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_ExtractionData_Time
}

type ExtractionQueryUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param       `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=206" json:"param,omitempty"`
	Gridcount *uint32           `protobuf:"varint,3,opt,name=gridcount,def=0" json:"gridcount,omitempty"`
	Activeids []uint32          `protobuf:"varint,4,rep,name=activeids" json:"activeids,omitempty"`
	Datas     []*ExtractionData `protobuf:"bytes,5,rep,name=datas" json:"datas,omitempty"`
}

// Default values for ExtractionQueryUserCmd fields.
const (
	Default_ExtractionQueryUserCmd_Cmd       = Command_SCENE_USER2_PROTOCMD
	Default_ExtractionQueryUserCmd_Param     = User2Param_USER2PARAM_EXTRACTION_QUERY
	Default_ExtractionQueryUserCmd_Gridcount = uint32(0)
)

func (x *ExtractionQueryUserCmd) Reset() {
	*x = ExtractionQueryUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractionQueryUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractionQueryUserCmd) ProtoMessage() {}

func (x *ExtractionQueryUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractionQueryUserCmd.ProtoReflect.Descriptor instead.
func (*ExtractionQueryUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{246}
}

func (x *ExtractionQueryUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExtractionQueryUserCmd_Cmd
}

func (x *ExtractionQueryUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExtractionQueryUserCmd_Param
}

func (x *ExtractionQueryUserCmd) GetGridcount() uint32 {
	if x != nil && x.Gridcount != nil {
		return *x.Gridcount
	}
	return Default_ExtractionQueryUserCmd_Gridcount
}

func (x *ExtractionQueryUserCmd) GetActiveids() []uint32 {
	if x != nil {
		return x.Activeids
	}
	return nil
}

func (x *ExtractionQueryUserCmd) GetDatas() []*ExtractionData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type ExtractionOperateUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param     `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=207" json:"param,omitempty"`
	Gridid *uint32         `protobuf:"varint,3,opt,name=gridid,def=0" json:"gridid,omitempty"`
	Guid   *string         `protobuf:"bytes,4,opt,name=guid" json:"guid,omitempty"`
	Data   *ExtractionData `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
}

// Default values for ExtractionOperateUserCmd fields.
const (
	Default_ExtractionOperateUserCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_ExtractionOperateUserCmd_Param  = User2Param_USER2PARAM_EXTRACTION_OPERATE
	Default_ExtractionOperateUserCmd_Gridid = uint32(0)
)

func (x *ExtractionOperateUserCmd) Reset() {
	*x = ExtractionOperateUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractionOperateUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractionOperateUserCmd) ProtoMessage() {}

func (x *ExtractionOperateUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractionOperateUserCmd.ProtoReflect.Descriptor instead.
func (*ExtractionOperateUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{247}
}

func (x *ExtractionOperateUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExtractionOperateUserCmd_Cmd
}

func (x *ExtractionOperateUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExtractionOperateUserCmd_Param
}

func (x *ExtractionOperateUserCmd) GetGridid() uint32 {
	if x != nil && x.Gridid != nil {
		return *x.Gridid
	}
	return Default_ExtractionOperateUserCmd_Gridid
}

func (x *ExtractionOperateUserCmd) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *ExtractionOperateUserCmd) GetData() *ExtractionData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ExtractionActiveUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=208" json:"param,omitempty"`
	Gridid    *uint32     `protobuf:"varint,3,opt,name=gridid,def=0" json:"gridid,omitempty"`
	Activeids []uint32    `protobuf:"varint,4,rep,name=activeids" json:"activeids,omitempty"`
}

// Default values for ExtractionActiveUserCmd fields.
const (
	Default_ExtractionActiveUserCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_ExtractionActiveUserCmd_Param  = User2Param_USER2PARAM_EXTRACTION_ACTIVE
	Default_ExtractionActiveUserCmd_Gridid = uint32(0)
)

func (x *ExtractionActiveUserCmd) Reset() {
	*x = ExtractionActiveUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractionActiveUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractionActiveUserCmd) ProtoMessage() {}

func (x *ExtractionActiveUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractionActiveUserCmd.ProtoReflect.Descriptor instead.
func (*ExtractionActiveUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{248}
}

func (x *ExtractionActiveUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExtractionActiveUserCmd_Cmd
}

func (x *ExtractionActiveUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExtractionActiveUserCmd_Param
}

func (x *ExtractionActiveUserCmd) GetGridid() uint32 {
	if x != nil && x.Gridid != nil {
		return *x.Gridid
	}
	return Default_ExtractionActiveUserCmd_Gridid
}

func (x *ExtractionActiveUserCmd) GetActiveids() []uint32 {
	if x != nil {
		return x.Activeids
	}
	return nil
}

type ExtractionRemoveUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=209" json:"param,omitempty"`
	Gridid  *uint32     `protobuf:"varint,3,opt,name=gridid,def=0" json:"gridid,omitempty"`
	Success *bool       `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
}

// Default values for ExtractionRemoveUserCmd fields.
const (
	Default_ExtractionRemoveUserCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_ExtractionRemoveUserCmd_Param  = User2Param_USER2PARAM_EXTRACTION_REMOVE
	Default_ExtractionRemoveUserCmd_Gridid = uint32(0)
)

func (x *ExtractionRemoveUserCmd) Reset() {
	*x = ExtractionRemoveUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractionRemoveUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractionRemoveUserCmd) ProtoMessage() {}

func (x *ExtractionRemoveUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractionRemoveUserCmd.ProtoReflect.Descriptor instead.
func (*ExtractionRemoveUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{249}
}

func (x *ExtractionRemoveUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExtractionRemoveUserCmd_Cmd
}

func (x *ExtractionRemoveUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExtractionRemoveUserCmd_Param
}

func (x *ExtractionRemoveUserCmd) GetGridid() uint32 {
	if x != nil && x.Gridid != nil {
		return *x.Gridid
	}
	return Default_ExtractionRemoveUserCmd_Gridid
}

func (x *ExtractionRemoveUserCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type ExtractionGridBuyUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=210" json:"param,omitempty"`
	Gridcount *uint32     `protobuf:"varint,3,opt,name=gridcount,def=0" json:"gridcount,omitempty"`
}

// Default values for ExtractionGridBuyUserCmd fields.
const (
	Default_ExtractionGridBuyUserCmd_Cmd       = Command_SCENE_USER2_PROTOCMD
	Default_ExtractionGridBuyUserCmd_Param     = User2Param_USER2PARAM_EXTRACTION_GRID_BUY
	Default_ExtractionGridBuyUserCmd_Gridcount = uint32(0)
)

func (x *ExtractionGridBuyUserCmd) Reset() {
	*x = ExtractionGridBuyUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractionGridBuyUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractionGridBuyUserCmd) ProtoMessage() {}

func (x *ExtractionGridBuyUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractionGridBuyUserCmd.ProtoReflect.Descriptor instead.
func (*ExtractionGridBuyUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{250}
}

func (x *ExtractionGridBuyUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExtractionGridBuyUserCmd_Cmd
}

func (x *ExtractionGridBuyUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExtractionGridBuyUserCmd_Param
}

func (x *ExtractionGridBuyUserCmd) GetGridcount() uint32 {
	if x != nil && x.Gridcount != nil {
		return *x.Gridcount
	}
	return Default_ExtractionGridBuyUserCmd_Gridcount
}

type ExtractionRefreshUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param     `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=214" json:"param,omitempty"`
	Gridid *uint32         `protobuf:"varint,3,opt,name=gridid" json:"gridid,omitempty"`
	Data   *ExtractionData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

// Default values for ExtractionRefreshUserCmd fields.
const (
	Default_ExtractionRefreshUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ExtractionRefreshUserCmd_Param = User2Param_USER2PARAM_EXTRACTION_REFRESH
)

func (x *ExtractionRefreshUserCmd) Reset() {
	*x = ExtractionRefreshUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractionRefreshUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractionRefreshUserCmd) ProtoMessage() {}

func (x *ExtractionRefreshUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractionRefreshUserCmd.ProtoReflect.Descriptor instead.
func (*ExtractionRefreshUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{251}
}

func (x *ExtractionRefreshUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ExtractionRefreshUserCmd_Cmd
}

func (x *ExtractionRefreshUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ExtractionRefreshUserCmd_Param
}

func (x *ExtractionRefreshUserCmd) GetGridid() uint32 {
	if x != nil && x.Gridid != nil {
		return *x.Gridid
	}
	return 0
}

func (x *ExtractionRefreshUserCmd) GetData() *ExtractionData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TeamExpRewardTypeCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param         `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=220" json:"param,omitempty"`
	Raidid *uint32             `protobuf:"varint,3,opt,name=raidid,def=0" json:"raidid,omitempty"`
	Type   *ERewardTeamExpType `protobuf:"varint,4,opt,name=type,enum=Cmd.ERewardTeamExpType,def=1" json:"type,omitempty"`
}

// Default values for TeamExpRewardTypeCmd fields.
const (
	Default_TeamExpRewardTypeCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_TeamExpRewardTypeCmd_Param  = User2Param_USER2PARAM_TEAM_EXP_REWAD
	Default_TeamExpRewardTypeCmd_Raidid = uint32(0)
	Default_TeamExpRewardTypeCmd_Type   = ERewardTeamExpType_REWARD_TEAM_EXP_EXP
)

func (x *TeamExpRewardTypeCmd) Reset() {
	*x = TeamExpRewardTypeCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamExpRewardTypeCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamExpRewardTypeCmd) ProtoMessage() {}

func (x *TeamExpRewardTypeCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamExpRewardTypeCmd.ProtoReflect.Descriptor instead.
func (*TeamExpRewardTypeCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{252}
}

func (x *TeamExpRewardTypeCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamExpRewardTypeCmd_Cmd
}

func (x *TeamExpRewardTypeCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamExpRewardTypeCmd_Param
}

func (x *TeamExpRewardTypeCmd) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return Default_TeamExpRewardTypeCmd_Raidid
}

func (x *TeamExpRewardTypeCmd) GetType() ERewardTeamExpType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_TeamExpRewardTypeCmd_Type
}

type SetMyselfOptionCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param       *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=221" json:"param,omitempty"`
	Fashionhide *uint32     `protobuf:"varint,3,opt,name=fashionhide,def=0" json:"fashionhide,omitempty"`
}

// Default values for SetMyselfOptionCmd fields.
const (
	Default_SetMyselfOptionCmd_Cmd         = Command_SCENE_USER2_PROTOCMD
	Default_SetMyselfOptionCmd_Param       = User2Param_USER2PARAM_MYSELF_SETOPTION
	Default_SetMyselfOptionCmd_Fashionhide = uint32(0)
)

func (x *SetMyselfOptionCmd) Reset() {
	*x = SetMyselfOptionCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMyselfOptionCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMyselfOptionCmd) ProtoMessage() {}

func (x *SetMyselfOptionCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMyselfOptionCmd.ProtoReflect.Descriptor instead.
func (*SetMyselfOptionCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{253}
}

func (x *SetMyselfOptionCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SetMyselfOptionCmd_Cmd
}

func (x *SetMyselfOptionCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SetMyselfOptionCmd_Param
}

func (x *SetMyselfOptionCmd) GetFashionhide() uint32 {
	if x != nil && x.Fashionhide != nil {
		return *x.Fashionhide
	}
	return Default_SetMyselfOptionCmd_Fashionhide
}

type UseSkillEffectItemUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=231" json:"param,omitempty"`
	Itemid *uint32     `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
}

// Default values for UseSkillEffectItemUserCmd fields.
const (
	Default_UseSkillEffectItemUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_UseSkillEffectItemUserCmd_Param = User2Param_USER2PARAM_USE_SKILLEFFECT_ITEM
)

func (x *UseSkillEffectItemUserCmd) Reset() {
	*x = UseSkillEffectItemUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseSkillEffectItemUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseSkillEffectItemUserCmd) ProtoMessage() {}

func (x *UseSkillEffectItemUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseSkillEffectItemUserCmd.ProtoReflect.Descriptor instead.
func (*UseSkillEffectItemUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{254}
}

func (x *UseSkillEffectItemUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UseSkillEffectItemUserCmd_Cmd
}

func (x *UseSkillEffectItemUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UseSkillEffectItemUserCmd_Param
}

func (x *UseSkillEffectItemUserCmd) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

type RideMultiMountUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param       *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=193" json:"param,omitempty"`
	RideOwnerId *uint64     `protobuf:"varint,3,opt,name=ride_owner_id,json=rideOwnerId,def=0" json:"ride_owner_id,omitempty"`
	MountPos    *uint32     `protobuf:"varint,4,opt,name=mount_pos,json=mountPos,def=0" json:"mount_pos,omitempty"`
}

// Default values for RideMultiMountUserCmd fields.
const (
	Default_RideMultiMountUserCmd_Cmd         = Command_SCENE_USER2_PROTOCMD
	Default_RideMultiMountUserCmd_Param       = User2Param_USER2PARAM_RIDE_MULTI_MOUNT
	Default_RideMultiMountUserCmd_RideOwnerId = uint64(0)
	Default_RideMultiMountUserCmd_MountPos    = uint32(0)
)

func (x *RideMultiMountUserCmd) Reset() {
	*x = RideMultiMountUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RideMultiMountUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RideMultiMountUserCmd) ProtoMessage() {}

func (x *RideMultiMountUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RideMultiMountUserCmd.ProtoReflect.Descriptor instead.
func (*RideMultiMountUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{255}
}

func (x *RideMultiMountUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RideMultiMountUserCmd_Cmd
}

func (x *RideMultiMountUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RideMultiMountUserCmd_Param
}

func (x *RideMultiMountUserCmd) GetRideOwnerId() uint64 {
	if x != nil && x.RideOwnerId != nil {
		return *x.RideOwnerId
	}
	return Default_RideMultiMountUserCmd_RideOwnerId
}

func (x *RideMultiMountUserCmd) GetMountPos() uint32 {
	if x != nil && x.MountPos != nil {
		return *x.MountPos
	}
	return Default_RideMultiMountUserCmd_MountPos
}

type KickOffPassengerUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=194" json:"param,omitempty"`
	KickCharid *uint64     `protobuf:"varint,3,opt,name=kick_charid,json=kickCharid,def=0" json:"kick_charid,omitempty"`
	All        *bool       `protobuf:"varint,4,opt,name=all,def=0" json:"all,omitempty"`
	NeedPunish *bool       `protobuf:"varint,5,opt,name=need_punish,json=needPunish,def=1" json:"need_punish,omitempty"`
}

// Default values for KickOffPassengerUserCmd fields.
const (
	Default_KickOffPassengerUserCmd_Cmd        = Command_SCENE_USER2_PROTOCMD
	Default_KickOffPassengerUserCmd_Param      = User2Param_USER2PARAM_KICK_OFF_PASSENGER
	Default_KickOffPassengerUserCmd_KickCharid = uint64(0)
	Default_KickOffPassengerUserCmd_All        = bool(false)
	Default_KickOffPassengerUserCmd_NeedPunish = bool(true)
)

func (x *KickOffPassengerUserCmd) Reset() {
	*x = KickOffPassengerUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickOffPassengerUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickOffPassengerUserCmd) ProtoMessage() {}

func (x *KickOffPassengerUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickOffPassengerUserCmd.ProtoReflect.Descriptor instead.
func (*KickOffPassengerUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{256}
}

func (x *KickOffPassengerUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_KickOffPassengerUserCmd_Cmd
}

func (x *KickOffPassengerUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_KickOffPassengerUserCmd_Param
}

func (x *KickOffPassengerUserCmd) GetKickCharid() uint64 {
	if x != nil && x.KickCharid != nil {
		return *x.KickCharid
	}
	return Default_KickOffPassengerUserCmd_KickCharid
}

func (x *KickOffPassengerUserCmd) GetAll() bool {
	if x != nil && x.All != nil {
		return *x.All
	}
	return Default_KickOffPassengerUserCmd_All
}

func (x *KickOffPassengerUserCmd) GetNeedPunish() bool {
	if x != nil && x.NeedPunish != nil {
		return *x.NeedPunish
	}
	return Default_KickOffPassengerUserCmd_NeedPunish
}

type SetMultiMountOptUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=195" json:"param,omitempty"`
	MountOpt *uint32     `protobuf:"varint,3,opt,name=mount_opt,json=mountOpt,def=0" json:"mount_opt,omitempty"`
}

// Default values for SetMultiMountOptUserCmd fields.
const (
	Default_SetMultiMountOptUserCmd_Cmd      = Command_SCENE_USER2_PROTOCMD
	Default_SetMultiMountOptUserCmd_Param    = User2Param_USER2PARAM_SET_MULTIMOUNT_OPT
	Default_SetMultiMountOptUserCmd_MountOpt = uint32(0)
)

func (x *SetMultiMountOptUserCmd) Reset() {
	*x = SetMultiMountOptUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMultiMountOptUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMultiMountOptUserCmd) ProtoMessage() {}

func (x *SetMultiMountOptUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMultiMountOptUserCmd.ProtoReflect.Descriptor instead.
func (*SetMultiMountOptUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{257}
}

func (x *SetMultiMountOptUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SetMultiMountOptUserCmd_Cmd
}

func (x *SetMultiMountOptUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SetMultiMountOptUserCmd_Param
}

func (x *SetMultiMountOptUserCmd) GetMountOpt() uint32 {
	if x != nil && x.MountOpt != nil {
		return *x.MountOpt
	}
	return Default_SetMultiMountOptUserCmd_MountOpt
}

type MultiMountChangePosUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param     *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=196" json:"param,omitempty"`
	ResultPos *uint32     `protobuf:"varint,3,opt,name=result_pos,json=resultPos,def=0" json:"result_pos,omitempty"`
}

// Default values for MultiMountChangePosUserCmd fields.
const (
	Default_MultiMountChangePosUserCmd_Cmd       = Command_SCENE_USER2_PROTOCMD
	Default_MultiMountChangePosUserCmd_Param     = User2Param_USER2PARAM_MULTIMOUNT_CHANGE_POS
	Default_MultiMountChangePosUserCmd_ResultPos = uint32(0)
)

func (x *MultiMountChangePosUserCmd) Reset() {
	*x = MultiMountChangePosUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiMountChangePosUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiMountChangePosUserCmd) ProtoMessage() {}

func (x *MultiMountChangePosUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiMountChangePosUserCmd.ProtoReflect.Descriptor instead.
func (*MultiMountChangePosUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{258}
}

func (x *MultiMountChangePosUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MultiMountChangePosUserCmd_Cmd
}

func (x *MultiMountChangePosUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MultiMountChangePosUserCmd_Param
}

func (x *MultiMountChangePosUserCmd) GetResultPos() uint32 {
	if x != nil && x.ResultPos != nil {
		return *x.ResultPos
	}
	return Default_MultiMountChangePosUserCmd_ResultPos
}

type GrouponBuyRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress *uint32 `protobuf:"varint,1,opt,name=progress" json:"progress,omitempty"`
	Price    *uint32 `protobuf:"varint,2,opt,name=price" json:"price,omitempty"`
	Count    *uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (x *GrouponBuyRecord) Reset() {
	*x = GrouponBuyRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrouponBuyRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrouponBuyRecord) ProtoMessage() {}

func (x *GrouponBuyRecord) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrouponBuyRecord.ProtoReflect.Descriptor instead.
func (*GrouponBuyRecord) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{259}
}

func (x *GrouponBuyRecord) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *GrouponBuyRecord) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *GrouponBuyRecord) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type GrouponInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activityid *uint32             `protobuf:"varint,1,opt,name=activityid" json:"activityid,omitempty"`
	TotalCount *uint32             `protobuf:"varint,2,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Progressid []uint32            `protobuf:"varint,3,rep,name=progressid" json:"progressid,omitempty"`
	Records    []*GrouponBuyRecord `protobuf:"bytes,4,rep,name=records" json:"records,omitempty"`
}

func (x *GrouponInfo) Reset() {
	*x = GrouponInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrouponInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrouponInfo) ProtoMessage() {}

func (x *GrouponInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrouponInfo.ProtoReflect.Descriptor instead.
func (*GrouponInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{260}
}

func (x *GrouponInfo) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *GrouponInfo) GetTotalCount() uint32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *GrouponInfo) GetProgressid() []uint32 {
	if x != nil {
		return x.Progressid
	}
	return nil
}

func (x *GrouponInfo) GetRecords() []*GrouponBuyRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type GrouponQueryUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=222" json:"param,omitempty"`
	Activityid *uint32      `protobuf:"varint,3,opt,name=activityid" json:"activityid,omitempty"`
	Info       *GrouponInfo `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
}

// Default values for GrouponQueryUserCmd fields.
const (
	Default_GrouponQueryUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_GrouponQueryUserCmd_Param = User2Param_USER2PARAM_GROUPON_QUERY
)

func (x *GrouponQueryUserCmd) Reset() {
	*x = GrouponQueryUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrouponQueryUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrouponQueryUserCmd) ProtoMessage() {}

func (x *GrouponQueryUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrouponQueryUserCmd.ProtoReflect.Descriptor instead.
func (*GrouponQueryUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{261}
}

func (x *GrouponQueryUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GrouponQueryUserCmd_Cmd
}

func (x *GrouponQueryUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GrouponQueryUserCmd_Param
}

func (x *GrouponQueryUserCmd) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *GrouponQueryUserCmd) GetInfo() *GrouponInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GrouponBuyUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=223" json:"param,omitempty"`
	Activityid *uint32      `protobuf:"varint,3,opt,name=activityid" json:"activityid,omitempty"`
	Count      *uint32      `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Price      *uint32      `protobuf:"varint,5,opt,name=price" json:"price,omitempty"`
	Info       *GrouponInfo `protobuf:"bytes,6,opt,name=info" json:"info,omitempty"`
}

// Default values for GrouponBuyUserCmd fields.
const (
	Default_GrouponBuyUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_GrouponBuyUserCmd_Param = User2Param_USER2PARAM_GROUPON_BUY
)

func (x *GrouponBuyUserCmd) Reset() {
	*x = GrouponBuyUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrouponBuyUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrouponBuyUserCmd) ProtoMessage() {}

func (x *GrouponBuyUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrouponBuyUserCmd.ProtoReflect.Descriptor instead.
func (*GrouponBuyUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{262}
}

func (x *GrouponBuyUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GrouponBuyUserCmd_Cmd
}

func (x *GrouponBuyUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GrouponBuyUserCmd_Param
}

func (x *GrouponBuyUserCmd) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *GrouponBuyUserCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *GrouponBuyUserCmd) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *GrouponBuyUserCmd) GetInfo() *GrouponInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GrouponRewardUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param  `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=224" json:"param,omitempty"`
	Activityid *uint32      `protobuf:"varint,3,opt,name=activityid" json:"activityid,omitempty"`
	Progressid *uint32      `protobuf:"varint,4,opt,name=progressid" json:"progressid,omitempty"`
	Info       *GrouponInfo `protobuf:"bytes,5,opt,name=info" json:"info,omitempty"`
}

// Default values for GrouponRewardUserCmd fields.
const (
	Default_GrouponRewardUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_GrouponRewardUserCmd_Param = User2Param_USER2PARAM_GROUPON_REWARD
)

func (x *GrouponRewardUserCmd) Reset() {
	*x = GrouponRewardUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrouponRewardUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrouponRewardUserCmd) ProtoMessage() {}

func (x *GrouponRewardUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrouponRewardUserCmd.ProtoReflect.Descriptor instead.
func (*GrouponRewardUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{263}
}

func (x *GrouponRewardUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GrouponRewardUserCmd_Cmd
}

func (x *GrouponRewardUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GrouponRewardUserCmd_Param
}

func (x *GrouponRewardUserCmd) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *GrouponRewardUserCmd) GetProgressid() uint32 {
	if x != nil && x.Progressid != nil {
		return *x.Progressid
	}
	return 0
}

func (x *GrouponRewardUserCmd) GetInfo() *GrouponInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type NtfPlayActUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param    *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=228" json:"param,omitempty"`
	Isclose  *bool       `protobuf:"varint,3,opt,name=isclose,def=0" json:"isclose,omitempty"`
	Isfirst  *bool       `protobuf:"varint,4,opt,name=isfirst,def=0" json:"isfirst,omitempty"`
	Serverid *uint32     `protobuf:"varint,5,opt,name=serverid" json:"serverid,omitempty"`
	Version  *uint32     `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
}

// Default values for NtfPlayActUserCmd fields.
const (
	Default_NtfPlayActUserCmd_Cmd     = Command_SCENE_USER2_PROTOCMD
	Default_NtfPlayActUserCmd_Param   = User2Param_USER2PARAM_NTF_PLAYACT
	Default_NtfPlayActUserCmd_Isclose = bool(false)
	Default_NtfPlayActUserCmd_Isfirst = bool(false)
)

func (x *NtfPlayActUserCmd) Reset() {
	*x = NtfPlayActUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfPlayActUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfPlayActUserCmd) ProtoMessage() {}

func (x *NtfPlayActUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfPlayActUserCmd.ProtoReflect.Descriptor instead.
func (*NtfPlayActUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{264}
}

func (x *NtfPlayActUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfPlayActUserCmd_Cmd
}

func (x *NtfPlayActUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfPlayActUserCmd_Param
}

func (x *NtfPlayActUserCmd) GetIsclose() bool {
	if x != nil && x.Isclose != nil {
		return *x.Isclose
	}
	return Default_NtfPlayActUserCmd_Isclose
}

func (x *NtfPlayActUserCmd) GetIsfirst() bool {
	if x != nil && x.Isfirst != nil {
		return *x.Isfirst
	}
	return Default_NtfPlayActUserCmd_Isfirst
}

func (x *NtfPlayActUserCmd) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return 0
}

func (x *NtfPlayActUserCmd) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type NoviceTargetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Progress *uint32             `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
	State    *ENoviceTargetState `protobuf:"varint,3,opt,name=state,enum=Cmd.ENoviceTargetState" json:"state,omitempty"`
}

func (x *NoviceTargetData) Reset() {
	*x = NoviceTargetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoviceTargetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoviceTargetData) ProtoMessage() {}

func (x *NoviceTargetData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoviceTargetData.ProtoReflect.Descriptor instead.
func (*NoviceTargetData) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{265}
}

func (x *NoviceTargetData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *NoviceTargetData) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *NoviceTargetData) GetState() ENoviceTargetState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ENoviceTargetState_ENOVICE_TARGET_GO
}

type NoviceTargetUpdateUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param         `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=225" json:"param,omitempty"`
	Datas []*NoviceTargetData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
	Day   *uint32             `protobuf:"varint,4,opt,name=day" json:"day,omitempty"`
	Dels  []uint32            `protobuf:"varint,5,rep,name=dels" json:"dels,omitempty"`
}

// Default values for NoviceTargetUpdateUserCmd fields.
const (
	Default_NoviceTargetUpdateUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_NoviceTargetUpdateUserCmd_Param = User2Param_USER2PARAM_NOVICE_TARGET_UPDATE
)

func (x *NoviceTargetUpdateUserCmd) Reset() {
	*x = NoviceTargetUpdateUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoviceTargetUpdateUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoviceTargetUpdateUserCmd) ProtoMessage() {}

func (x *NoviceTargetUpdateUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoviceTargetUpdateUserCmd.ProtoReflect.Descriptor instead.
func (*NoviceTargetUpdateUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{266}
}

func (x *NoviceTargetUpdateUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NoviceTargetUpdateUserCmd_Cmd
}

func (x *NoviceTargetUpdateUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NoviceTargetUpdateUserCmd_Param
}

func (x *NoviceTargetUpdateUserCmd) GetDatas() []*NoviceTargetData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *NoviceTargetUpdateUserCmd) GetDay() uint32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

func (x *NoviceTargetUpdateUserCmd) GetDels() []uint32 {
	if x != nil {
		return x.Dels
	}
	return nil
}

type NoviceTargetRewardUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=229" json:"param,omitempty"`
	Id    *uint32     `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

// Default values for NoviceTargetRewardUserCmd fields.
const (
	Default_NoviceTargetRewardUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_NoviceTargetRewardUserCmd_Param = User2Param_USER2PARAM_NOVICE_TARGET_REWARD
)

func (x *NoviceTargetRewardUserCmd) Reset() {
	*x = NoviceTargetRewardUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoviceTargetRewardUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoviceTargetRewardUserCmd) ProtoMessage() {}

func (x *NoviceTargetRewardUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoviceTargetRewardUserCmd.ProtoReflect.Descriptor instead.
func (*NoviceTargetRewardUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{267}
}

func (x *NoviceTargetRewardUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NoviceTargetRewardUserCmd_Cmd
}

func (x *NoviceTargetRewardUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NoviceTargetRewardUserCmd_Param
}

func (x *NoviceTargetRewardUserCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type SetBoKiStateUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=234" json:"param,omitempty"`
	State *uint32     `protobuf:"varint,3,opt,name=state" json:"state,omitempty"`
}

// Default values for SetBoKiStateUserCmd fields.
const (
	Default_SetBoKiStateUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_SetBoKiStateUserCmd_Param = User2Param_USER2PARAM_SET_BOKI_STATE
)

func (x *SetBoKiStateUserCmd) Reset() {
	*x = SetBoKiStateUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBoKiStateUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBoKiStateUserCmd) ProtoMessage() {}

func (x *SetBoKiStateUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBoKiStateUserCmd.ProtoReflect.Descriptor instead.
func (*SetBoKiStateUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{268}
}

func (x *SetBoKiStateUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SetBoKiStateUserCmd_Cmd
}

func (x *SetBoKiStateUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SetBoKiStateUserCmd_Param
}

func (x *SetBoKiStateUserCmd) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

type CloseDialogMaskUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=239" json:"param,omitempty"`
}

// Default values for CloseDialogMaskUserCmd fields.
const (
	Default_CloseDialogMaskUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_CloseDialogMaskUserCmd_Param = User2Param_USER2PARAM_CLOSEDIALOGMASK
)

func (x *CloseDialogMaskUserCmd) Reset() {
	*x = CloseDialogMaskUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseDialogMaskUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseDialogMaskUserCmd) ProtoMessage() {}

func (x *CloseDialogMaskUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseDialogMaskUserCmd.ProtoReflect.Descriptor instead.
func (*CloseDialogMaskUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{269}
}

func (x *CloseDialogMaskUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CloseDialogMaskUserCmd_Cmd
}

func (x *CloseDialogMaskUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CloseDialogMaskUserCmd_Param
}

type CloseDialogCameraUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=240" json:"param,omitempty"`
}

// Default values for CloseDialogCameraUserCmd fields.
const (
	Default_CloseDialogCameraUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_CloseDialogCameraUserCmd_Param = User2Param_USER2PARAM_CLOSEDIALOGCAMERA
)

func (x *CloseDialogCameraUserCmd) Reset() {
	*x = CloseDialogCameraUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseDialogCameraUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseDialogCameraUserCmd) ProtoMessage() {}

func (x *CloseDialogCameraUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseDialogCameraUserCmd.ProtoReflect.Descriptor instead.
func (*CloseDialogCameraUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{270}
}

func (x *CloseDialogCameraUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CloseDialogCameraUserCmd_Cmd
}

func (x *CloseDialogCameraUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CloseDialogCameraUserCmd_Param
}

type HideUIUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=241" json:"param,omitempty"`
	Id    []uint32    `protobuf:"varint,3,rep,name=id" json:"id,omitempty"`
	Open  *uint32     `protobuf:"varint,4,opt,name=open" json:"open,omitempty"`
}

// Default values for HideUIUserCmd fields.
const (
	Default_HideUIUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_HideUIUserCmd_Param = User2Param_USER2PARAM_HIDEUI
)

func (x *HideUIUserCmd) Reset() {
	*x = HideUIUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HideUIUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HideUIUserCmd) ProtoMessage() {}

func (x *HideUIUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HideUIUserCmd.ProtoReflect.Descriptor instead.
func (*HideUIUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{271}
}

func (x *HideUIUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HideUIUserCmd_Cmd
}

func (x *HideUIUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HideUIUserCmd_Param
}

func (x *HideUIUserCmd) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HideUIUserCmd) GetOpen() uint32 {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return 0
}

type QueryMapMonsterRefreshInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param          *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=233" json:"param,omitempty"`
	Curmonsterids  []uint32    `protobuf:"varint,3,rep,name=curmonsterids" json:"curmonsterids,omitempty"`
	Nextmonsterids []uint32    `protobuf:"varint,4,rep,name=nextmonsterids" json:"nextmonsterids,omitempty"`
}

// Default values for QueryMapMonsterRefreshInfo fields.
const (
	Default_QueryMapMonsterRefreshInfo_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_QueryMapMonsterRefreshInfo_Param = User2Param_USER2PARAM_QUERY_MAPMONSTER_REFRESH
)

func (x *QueryMapMonsterRefreshInfo) Reset() {
	*x = QueryMapMonsterRefreshInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMapMonsterRefreshInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMapMonsterRefreshInfo) ProtoMessage() {}

func (x *QueryMapMonsterRefreshInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMapMonsterRefreshInfo.ProtoReflect.Descriptor instead.
func (*QueryMapMonsterRefreshInfo) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{272}
}

func (x *QueryMapMonsterRefreshInfo) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryMapMonsterRefreshInfo_Cmd
}

func (x *QueryMapMonsterRefreshInfo) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryMapMonsterRefreshInfo_Param
}

func (x *QueryMapMonsterRefreshInfo) GetCurmonsterids() []uint32 {
	if x != nil {
		return x.Curmonsterids
	}
	return nil
}

func (x *QueryMapMonsterRefreshInfo) GetNextmonsterids() []uint32 {
	if x != nil {
		return x.Nextmonsterids
	}
	return nil
}

type DirectionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y *int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Z *int32 `protobuf:"varint,3,opt,name=z" json:"z,omitempty"`
}

func (x *DirectionData) Reset() {
	*x = DirectionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectionData) ProtoMessage() {}

func (x *DirectionData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectionData.ProtoReflect.Descriptor instead.
func (*DirectionData) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{273}
}

func (x *DirectionData) GetX() int32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *DirectionData) GetY() int32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *DirectionData) GetZ() int32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type SetCameraUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param        *User2Param    `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=242" json:"param,omitempty"`
	Reset_       *bool          `protobuf:"varint,3,opt,name=reset,def=0" json:"reset,omitempty"`
	CameraDir    *DirectionData `protobuf:"bytes,4,opt,name=camera_dir,json=cameraDir" json:"camera_dir,omitempty"`
	RoleDir      *float32       `protobuf:"fixed32,5,opt,name=role_dir,json=roleDir" json:"role_dir,omitempty"`
	Zoom         *uint32        `protobuf:"varint,6,opt,name=zoom" json:"zoom,omitempty"`
	FilterEffect *uint32        `protobuf:"varint,7,opt,name=filter_effect,json=filterEffect" json:"filter_effect,omitempty"`
	Hide         []uint32       `protobuf:"varint,8,rep,name=hide" json:"hide,omitempty"`
}

// Default values for SetCameraUserCmd fields.
const (
	Default_SetCameraUserCmd_Cmd    = Command_SCENE_USER2_PROTOCMD
	Default_SetCameraUserCmd_Param  = User2Param_USER2PARAM_SET_CAMERA
	Default_SetCameraUserCmd_Reset_ = bool(false)
)

func (x *SetCameraUserCmd) Reset() {
	*x = SetCameraUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCameraUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCameraUserCmd) ProtoMessage() {}

func (x *SetCameraUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCameraUserCmd.ProtoReflect.Descriptor instead.
func (*SetCameraUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{274}
}

func (x *SetCameraUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SetCameraUserCmd_Cmd
}

func (x *SetCameraUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SetCameraUserCmd_Param
}

func (x *SetCameraUserCmd) GetReset_() bool {
	if x != nil && x.Reset_ != nil {
		return *x.Reset_
	}
	return Default_SetCameraUserCmd_Reset_
}

func (x *SetCameraUserCmd) GetCameraDir() *DirectionData {
	if x != nil {
		return x.CameraDir
	}
	return nil
}

func (x *SetCameraUserCmd) GetRoleDir() float32 {
	if x != nil && x.RoleDir != nil {
		return *x.RoleDir
	}
	return 0
}

func (x *SetCameraUserCmd) GetZoom() uint32 {
	if x != nil && x.Zoom != nil {
		return *x.Zoom
	}
	return 0
}

func (x *SetCameraUserCmd) GetFilterEffect() uint32 {
	if x != nil && x.FilterEffect != nil {
		return *x.FilterEffect
	}
	return 0
}

func (x *SetCameraUserCmd) GetHide() []uint32 {
	if x != nil {
		return x.Hide
	}
	return nil
}

type QueryProfessionDataDetailUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param          `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=215" json:"param,omitempty"`
	Type  *EProfessionDataType `protobuf:"varint,3,opt,name=type,enum=Cmd.EProfessionDataType" json:"type,omitempty"`
}

// Default values for QueryProfessionDataDetailUserCmd fields.
const (
	Default_QueryProfessionDataDetailUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_QueryProfessionDataDetailUserCmd_Param = User2Param_USER2PARAM_QUERY_PROFESSION_DATA_DETAIL
)

func (x *QueryProfessionDataDetailUserCmd) Reset() {
	*x = QueryProfessionDataDetailUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProfessionDataDetailUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProfessionDataDetailUserCmd) ProtoMessage() {}

func (x *QueryProfessionDataDetailUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProfessionDataDetailUserCmd.ProtoReflect.Descriptor instead.
func (*QueryProfessionDataDetailUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{275}
}

func (x *QueryProfessionDataDetailUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryProfessionDataDetailUserCmd_Cmd
}

func (x *QueryProfessionDataDetailUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryProfessionDataDetailUserCmd_Param
}

func (x *QueryProfessionDataDetailUserCmd) GetType() EProfessionDataType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EProfessionDataType_ETypeAdvance
}

type ClearProfessionDataDetailUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=246" json:"param,omitempty"`
}

// Default values for ClearProfessionDataDetailUserCmd fields.
const (
	Default_ClearProfessionDataDetailUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ClearProfessionDataDetailUserCmd_Param = User2Param_USER2PARAM_CLEAR_PROFESSION_DATA_DETAIL
)

func (x *ClearProfessionDataDetailUserCmd) Reset() {
	*x = ClearProfessionDataDetailUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearProfessionDataDetailUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearProfessionDataDetailUserCmd) ProtoMessage() {}

func (x *ClearProfessionDataDetailUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearProfessionDataDetailUserCmd.ProtoReflect.Descriptor instead.
func (*ClearProfessionDataDetailUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{276}
}

func (x *ClearProfessionDataDetailUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClearProfessionDataDetailUserCmd_Cmd
}

func (x *ClearProfessionDataDetailUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClearProfessionDataDetailUserCmd_Param
}

type ChainExchangeUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=243" json:"param,omitempty"`
}

// Default values for ChainExchangeUserCmd fields.
const (
	Default_ChainExchangeUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ChainExchangeUserCmd_Param = User2Param_USER2PARAM_CHAIN_EXCHANGE
)

func (x *ChainExchangeUserCmd) Reset() {
	*x = ChainExchangeUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainExchangeUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainExchangeUserCmd) ProtoMessage() {}

func (x *ChainExchangeUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainExchangeUserCmd.ProtoReflect.Descriptor instead.
func (*ChainExchangeUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{277}
}

func (x *ChainExchangeUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChainExchangeUserCmd_Cmd
}

func (x *ChainExchangeUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChainExchangeUserCmd_Param
}

type ChainOptUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param  *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=244" json:"param,omitempty"`
	Active *bool       `protobuf:"varint,3,opt,name=active" json:"active,omitempty"`
}

// Default values for ChainOptUserCmd fields.
const (
	Default_ChainOptUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ChainOptUserCmd_Param = User2Param_USER2PARAM_CHAIN_OPT
)

func (x *ChainOptUserCmd) Reset() {
	*x = ChainOptUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainOptUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainOptUserCmd) ProtoMessage() {}

func (x *ChainOptUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainOptUserCmd.ProtoReflect.Descriptor instead.
func (*ChainOptUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{278}
}

func (x *ChainOptUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChainOptUserCmd_Cmd
}

func (x *ChainOptUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChainOptUserCmd_Param
}

func (x *ChainOptUserCmd) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

type ActivityDonateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activityid *uint32 `protobuf:"varint,1,opt,name=activityid" json:"activityid,omitempty"`
	Times      *uint32 `protobuf:"varint,2,opt,name=times" json:"times,omitempty"`
}

func (x *ActivityDonateData) Reset() {
	*x = ActivityDonateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDonateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDonateData) ProtoMessage() {}

func (x *ActivityDonateData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDonateData.ProtoReflect.Descriptor instead.
func (*ActivityDonateData) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{279}
}

func (x *ActivityDonateData) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *ActivityDonateData) GetTimes() uint32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

type ActivityDonateQueryUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=247" json:"param,omitempty"`
	Activityid *uint32     `protobuf:"varint,3,opt,name=activityid" json:"activityid,omitempty"`
	Times      *uint32     `protobuf:"varint,4,opt,name=times" json:"times,omitempty"`
}

// Default values for ActivityDonateQueryUserCmd fields.
const (
	Default_ActivityDonateQueryUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ActivityDonateQueryUserCmd_Param = User2Param_USER2PARAM_ACTIVITY_DONATE_QUERY
)

func (x *ActivityDonateQueryUserCmd) Reset() {
	*x = ActivityDonateQueryUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDonateQueryUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDonateQueryUserCmd) ProtoMessage() {}

func (x *ActivityDonateQueryUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDonateQueryUserCmd.ProtoReflect.Descriptor instead.
func (*ActivityDonateQueryUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{280}
}

func (x *ActivityDonateQueryUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ActivityDonateQueryUserCmd_Cmd
}

func (x *ActivityDonateQueryUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ActivityDonateQueryUserCmd_Param
}

func (x *ActivityDonateQueryUserCmd) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *ActivityDonateQueryUserCmd) GetTimes() uint32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

type ActivityDonateRewardUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=248" json:"param,omitempty"`
	Activityid *uint32     `protobuf:"varint,3,opt,name=activityid" json:"activityid,omitempty"`
	Itemcost   *ItemInfo   `protobuf:"bytes,4,opt,name=itemcost" json:"itemcost,omitempty"`
	Times      *uint32     `protobuf:"varint,5,opt,name=times" json:"times,omitempty"`
	Success    *bool       `protobuf:"varint,6,opt,name=success" json:"success,omitempty"`
}

// Default values for ActivityDonateRewardUserCmd fields.
const (
	Default_ActivityDonateRewardUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ActivityDonateRewardUserCmd_Param = User2Param_USER2PARAM_ACTIVITY_DONATE_REWARD
)

func (x *ActivityDonateRewardUserCmd) Reset() {
	*x = ActivityDonateRewardUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityDonateRewardUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityDonateRewardUserCmd) ProtoMessage() {}

func (x *ActivityDonateRewardUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityDonateRewardUserCmd.ProtoReflect.Descriptor instead.
func (*ActivityDonateRewardUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{281}
}

func (x *ActivityDonateRewardUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ActivityDonateRewardUserCmd_Cmd
}

func (x *ActivityDonateRewardUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ActivityDonateRewardUserCmd_Param
}

func (x *ActivityDonateRewardUserCmd) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return 0
}

func (x *ActivityDonateRewardUserCmd) GetItemcost() *ItemInfo {
	if x != nil {
		return x.Itemcost
	}
	return nil
}

func (x *ActivityDonateRewardUserCmd) GetTimes() uint32 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

func (x *ActivityDonateRewardUserCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type ChangeHairUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=249" json:"param,omitempty"`
	Hairid  *uint32     `protobuf:"varint,3,opt,name=hairid" json:"hairid,omitempty"`
	Colorid *uint32     `protobuf:"varint,4,opt,name=colorid" json:"colorid,omitempty"`
}

// Default values for ChangeHairUserCmd fields.
const (
	Default_ChangeHairUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ChangeHairUserCmd_Param = User2Param_USER2PARAM_CHANGE_HAIR
)

func (x *ChangeHairUserCmd) Reset() {
	*x = ChangeHairUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeHairUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeHairUserCmd) ProtoMessage() {}

func (x *ChangeHairUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeHairUserCmd.ProtoReflect.Descriptor instead.
func (*ChangeHairUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{282}
}

func (x *ChangeHairUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChangeHairUserCmd_Cmd
}

func (x *ChangeHairUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChangeHairUserCmd_Param
}

func (x *ChangeHairUserCmd) GetHairid() uint32 {
	if x != nil && x.Hairid != nil {
		return *x.Hairid
	}
	return 0
}

func (x *ChangeHairUserCmd) GetColorid() uint32 {
	if x != nil && x.Colorid != nil {
		return *x.Colorid
	}
	return 0
}

type ChangeEyeUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=250" json:"param,omitempty"`
	Eyeid *uint32     `protobuf:"varint,3,opt,name=eyeid" json:"eyeid,omitempty"`
}

// Default values for ChangeEyeUserCmd fields.
const (
	Default_ChangeEyeUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_ChangeEyeUserCmd_Param = User2Param_USER2PARAM_CHANGE_EYE
)

func (x *ChangeEyeUserCmd) Reset() {
	*x = ChangeEyeUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeEyeUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeEyeUserCmd) ProtoMessage() {}

func (x *ChangeEyeUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeEyeUserCmd.ProtoReflect.Descriptor instead.
func (*ChangeEyeUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{283}
}

func (x *ChangeEyeUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChangeEyeUserCmd_Cmd
}

func (x *ChangeEyeUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChangeEyeUserCmd_Param
}

func (x *ChangeEyeUserCmd) GetEyeid() uint32 {
	if x != nil && x.Eyeid != nil {
		return *x.Eyeid
	}
	return 0
}

type HappyValueUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=245" json:"param,omitempty"`
	Value   *uint32     `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	Indices []uint32    `protobuf:"varint,4,rep,name=indices" json:"indices,omitempty"`
}

// Default values for HappyValueUserCmd fields.
const (
	Default_HappyValueUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_HappyValueUserCmd_Param = User2Param_USER2PARAM_HAPPY_VALUE
)

func (x *HappyValueUserCmd) Reset() {
	*x = HappyValueUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HappyValueUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HappyValueUserCmd) ProtoMessage() {}

func (x *HappyValueUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HappyValueUserCmd.ProtoReflect.Descriptor instead.
func (*HappyValueUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{284}
}

func (x *HappyValueUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HappyValueUserCmd_Cmd
}

func (x *HappyValueUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HappyValueUserCmd_Param
}

func (x *HappyValueUserCmd) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *HappyValueUserCmd) GetIndices() []uint32 {
	if x != nil {
		return x.Indices
	}
	return nil
}

type SendTargetPosUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=251" json:"param,omitempty"`
	Pos   *ScenePos   `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
	Sign  *bool       `protobuf:"varint,4,opt,name=sign" json:"sign,omitempty"`
	Guid  *uint64     `protobuf:"varint,5,opt,name=guid" json:"guid,omitempty"`
}

// Default values for SendTargetPosUserCmd fields.
const (
	Default_SendTargetPosUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_SendTargetPosUserCmd_Param = User2Param_USER2PARAM_SEND_TARGET_POS
)

func (x *SendTargetPosUserCmd) Reset() {
	*x = SendTargetPosUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTargetPosUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTargetPosUserCmd) ProtoMessage() {}

func (x *SendTargetPosUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTargetPosUserCmd.ProtoReflect.Descriptor instead.
func (*SendTargetPosUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{285}
}

func (x *SendTargetPosUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SendTargetPosUserCmd_Cmd
}

func (x *SendTargetPosUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SendTargetPosUserCmd_Param
}

func (x *SendTargetPosUserCmd) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SendTargetPosUserCmd) GetSign() bool {
	if x != nil && x.Sign != nil {
		return *x.Sign
	}
	return false
}

func (x *SendTargetPosUserCmd) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return 0
}

type CookGameFinishUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param      *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=252" json:"param,omitempty"`
	Difficulty *uint32     `protobuf:"varint,3,opt,name=difficulty" json:"difficulty,omitempty"`
	Daily      *bool       `protobuf:"varint,4,opt,name=daily" json:"daily,omitempty"`
	Success    *bool       `protobuf:"varint,5,opt,name=success" json:"success,omitempty"`
}

// Default values for CookGameFinishUserCmd fields.
const (
	Default_CookGameFinishUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_CookGameFinishUserCmd_Param = User2Param_USER2PARAM_COOK_GAME_FINISH
)

func (x *CookGameFinishUserCmd) Reset() {
	*x = CookGameFinishUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookGameFinishUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookGameFinishUserCmd) ProtoMessage() {}

func (x *CookGameFinishUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookGameFinishUserCmd.ProtoReflect.Descriptor instead.
func (*CookGameFinishUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{286}
}

func (x *CookGameFinishUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CookGameFinishUserCmd_Cmd
}

func (x *CookGameFinishUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CookGameFinishUserCmd_Param
}

func (x *CookGameFinishUserCmd) GetDifficulty() uint32 {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return 0
}

func (x *CookGameFinishUserCmd) GetDaily() bool {
	if x != nil && x.Daily != nil {
		return *x.Daily
	}
	return false
}

func (x *CookGameFinishUserCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type RaceGameStartUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=253" json:"param,omitempty"`
}

// Default values for RaceGameStartUserCmd fields.
const (
	Default_RaceGameStartUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_RaceGameStartUserCmd_Param = User2Param_USER2PARAM_RACE_GAME_START
)

func (x *RaceGameStartUserCmd) Reset() {
	*x = RaceGameStartUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceGameStartUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceGameStartUserCmd) ProtoMessage() {}

func (x *RaceGameStartUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceGameStartUserCmd.ProtoReflect.Descriptor instead.
func (*RaceGameStartUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{287}
}

func (x *RaceGameStartUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RaceGameStartUserCmd_Cmd
}

func (x *RaceGameStartUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RaceGameStartUserCmd_Param
}

type RaceGameFinishUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=9" json:"cmd,omitempty"`
	Param   *User2Param `protobuf:"varint,2,opt,name=param,enum=Cmd.User2Param,def=254" json:"param,omitempty"`
	Success *bool       `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
}

// Default values for RaceGameFinishUserCmd fields.
const (
	Default_RaceGameFinishUserCmd_Cmd   = Command_SCENE_USER2_PROTOCMD
	Default_RaceGameFinishUserCmd_Param = User2Param_USER2PARAM_RACE_GAME_FINISH
)

func (x *RaceGameFinishUserCmd) Reset() {
	*x = RaceGameFinishUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneUser2_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceGameFinishUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceGameFinishUserCmd) ProtoMessage() {}

func (x *RaceGameFinishUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneUser2_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceGameFinishUserCmd.ProtoReflect.Descriptor instead.
func (*RaceGameFinishUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneUser2_proto_rawDescGZIP(), []int{288}
}

func (x *RaceGameFinishUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RaceGameFinishUserCmd_Cmd
}

func (x *RaceGameFinishUserCmd) GetParam() User2Param {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RaceGameFinishUserCmd_Param
}

func (x *RaceGameFinishUserCmd) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

var File_SceneUser2_proto protoreflect.FileDescriptor

var file_SceneUser2_proto_rawDesc = []byte{
	0x0a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x56, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x42, 0x65, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x41, 0x73, 0x74, 0x72, 0x6f, 0x6c, 0x61, 0x62, 0x65, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x42, 0x6f, 0x73, 0x73, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x06, 0x47, 0x6f, 0x43, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x47, 0x4f, 0x43, 0x49, 0x54, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a,
	0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x4c, 0x61, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x71, 0x0a, 0x08, 0x4d,
	0x73, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x6c,
	0x61, 0x6e, 0x67, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x73, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x0a, 0x6c, 0x61, 0x6e, 0x67, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xbc,
	0x02, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x11, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x59, 0x53, 0x4d,
	0x53, 0x47, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x73, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x03,
	0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x3a, 0x0f,
	0x45, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x03, 0x61, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0xe3, 0x01,
	0x0a, 0x0b, 0x4e, 0x70, 0x63, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x34, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4e, 0x50, 0x43, 0x44, 0x41, 0x54, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x74, 0x74,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x23,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x6e, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x49,
	0x4e, 0x45, 0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x74, 0x74,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x22, 0x8b,
	0x02, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x74, 0x66,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x13, 0x45, 0x55, 0x53, 0x45, 0x52, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0xda, 0x01, 0x0a,
	0x0a, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x11, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31,
	0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x66, 0x72, 0x6f,
	0x6d, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x69, 0x64, 0x22, 0xf1, 0x01, 0x0a, 0x13, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x4e, 0x69, 0x6e, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6d,
	0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x53, 0x59, 0x4e, 0x43, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x22, 0xd1, 0x01,
	0x0a, 0x0e, 0x45, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x69, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x61, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69,
	0x64, 0x22, 0xca, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52,
	0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0f, 0x45, 0x52,
	0x45, 0x4c, 0x49, 0x56, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x22, 0xbd,
	0x01, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x56,
	0x41, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x04, 0x76, 0x61, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x56, 0x61,
	0x72, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x76, 0x61,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41,
	0x63, 0x63, 0x56, 0x61, 0x72, 0x52, 0x07, 0x61, 0x63, 0x63, 0x76, 0x61, 0x72, 0x73, 0x22, 0xf4,
	0x01, 0x0a, 0x08, 0x54, 0x61, 0x6c, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x41,
	0x4c, 0x4b, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x04,
	0x67, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x6c, 0x6b, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x6c, 0x6b, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x61, 0x6c, 0x6b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x61, 0x6c, 0x6b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x54, 0x49, 0x4d,
	0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x82, 0x06, 0x0a, 0x0d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d,
	0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x44, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x45, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x52, 0x0a, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x70, 0x6f, 0x73, 0x12, 0x1f, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x6d, 0x73, 0x65, 0x63, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x6d, 0x73, 0x65, 0x63, 0x12, 0x17, 0x0a,
	0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52,
	0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x32, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x3a, 0x0f, 0x45,
	0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x4f, 0x50, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x52, 0x03,
	0x6f, 0x70, 0x74, 0x12, 0x1f, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x70, 0x6f, 0x73,
	0x62, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x06, 0x65, 0x70, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x65, 0x70, 0x62,
	0x69, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x11, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x69,
	0x72, 0x12, 0x1b, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x2b,
	0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x6e, 0x61, 0x76, 0x6d, 0x65, 0x73, 0x68, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x6e, 0x61, 0x76, 0x6d, 0x65, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x69, 0x72, 0x33, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f,
	0x73, 0x52, 0x05, 0x64, 0x69, 0x72, 0x33, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4e, 0x55, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb0, 0x01,
	0x0a, 0x07, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x12, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x4d,
	0x45, 0x4e, 0x55, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x08, 0x61, 0x6e,
	0x69, 0x6d, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xa5, 0x01, 0x0a, 0x10, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x69, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x69, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x49, 0x4e, 0x46, 0x4f, 0x4e, 0x49, 0x4e, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x19, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x95, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x10,
	0x4e, 0x65, 0x77, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f,
	0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x22, 0xb1, 0x01, 0x0a,
	0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x22, 0xe5, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x44, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x44, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x0e, 0x45, 0x44, 0x52, 0x45, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x77,
	0x44, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x44, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0e, 0x45, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x64, 0x73, 0x22, 0xdc,
	0x01, 0x0a, 0x13, 0x44, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x33, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x44, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0e, 0x45, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x64, 0x73, 0x22, 0xf1, 0x02,
	0x0a, 0x0c, 0x41, 0x64, 0x64, 0x41, 0x74, 0x74, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x41, 0x44, 0x44, 0x41, 0x54, 0x54, 0x52, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x0d, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x61, 0x67, 0x69, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x61, 0x67, 0x69, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x64, 0x65, 0x78, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x64, 0x65, 0x78, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x76, 0x69, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x76, 0x69, 0x74, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x6c, 0x75, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6c, 0x75, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x22, 0x39, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x70, 0x47, 0x6f, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xce, 0x02, 0x0a,
	0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x68, 0x6f, 0x70, 0x47, 0x6f, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x53, 0x48, 0x4f, 0x50, 0x47, 0x4f, 0x54,
	0x49, 0x54, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x47, 0x6f, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x47, 0x6f, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x47, 0x6f, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2e, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x47, 0x6f, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x09, 0x61, 0x64, 0x64, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xc8, 0x02,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x47, 0x6f, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x53, 0x48, 0x4f, 0x50,
	0x47, 0x4f, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x24,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x47, 0x6f, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x47, 0x6f, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x47, 0x6f, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x64,
	0x64, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x47, 0x6f, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08,
	0x61, 0x64, 0x64, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x06, 0x4f, 0x70, 0x65,
	0x6e, 0x55, 0x49, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x55, 0x49, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x11, 0x0a, 0x02, 0x75, 0x69, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x75, 0x69, 0x22, 0xcf, 0x01, 0x0a, 0x09, 0x44, 0x62,
	0x67, 0x53, 0x79, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x42, 0x47, 0x53, 0x59, 0x53,
	0x4d, 0x53, 0x47, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x44, 0x62, 0x67, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0f, 0x45, 0x44, 0x42, 0x47,
	0x4d, 0x53, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x11,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6d,
	0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x6c, 0x4e, 0x70,
	0x63, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x50, 0x43, 0x46, 0x55,
	0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xa9, 0x01, 0x0a,
	0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x53, 0x48, 0x4f, 0x57, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xff, 0x01, 0x0a, 0x0e, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x4f,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x12, 0x15, 0x0a, 0x04, 0x6d, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x04, 0x6d, 0x73, 0x65, 0x63, 0x12, 0x17, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x17, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x36, 0x0a, 0x09, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0x99, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x73, 0x67,
	0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x43, 0x48, 0x41, 0x54,
	0x4d, 0x53, 0x47, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x73,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x22, 0xe9,
	0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x67, 0x6d, 0x43, 0x6d, 0x64, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x42, 0x47, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x67, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x62, 0x67, 0x6d, 0x12, 0x18, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x17,
	0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x42, 0x67, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x0b, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x23,
	0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x05, 0x61, 0x74,
	0x74, 0x72, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x46, 0x49, 0x47, 0x48, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x08, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x73,
	0x22, 0xe4, 0x01, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6d, 0x64,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x35, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x70,
	0x74, 0x3a, 0x11, 0x45, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x50, 0x54, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x13, 0x0a, 0x03, 0x73, 0x65, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x03, 0x73, 0x65, 0x63, 0x12, 0x17,
	0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31,
	0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x0a, 0x43, 0x44, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x65, 0x66, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6c, 0x65, 0x66, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x63, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x64, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x64, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x0d, 0x43, 0x44, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x44, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x61,
	0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x22,
	0xc5, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x13, 0x45, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x15, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x6b,
	0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x53,
	0x43, 0x52, 0x45, 0x45, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x33, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x04, 0x6d, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x6d, 0x73, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x09, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31,
	0x52, 0x09, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4e, 0x0a, 0x0c, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12,
	0x15, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x0d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x34, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x0b,
	0x50, 0x75, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x55,
	0x54, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x25, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0xe4, 0x01, 0x0a, 0x0f, 0x54, 0x65, 0x6d, 0x70,
	0x50, 0x75, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x45,
	0x4d, 0x50, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x63, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x22, 0xd1,
	0x01, 0x0a, 0x0e, 0x4e, 0x70, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6e, 0x67, 0x6c,
	0x65, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x50, 0x43, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x46, 0x4f, 0x43, 0x55, 0x53,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x47, 0x6f, 0x54, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x22, 0xde,
	0x01, 0x0a, 0x0f, 0x47, 0x6f, 0x54, 0x6f, 0x47, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x5f, 0x47, 0x45, 0x41, 0x52, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x47, 0x6f, 0x54, 0x6f, 0x47, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x69, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x69, 0x64, 0x73, 0x22,
	0x9b, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x41, 0x50,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x22, 0xb3, 0x01,
	0x0a, 0x14, 0x44, 0x65, 0x61, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x45, 0x41, 0x54, 0x48, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x61, 0x74, 0x68,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x45,
	0x57, 0x5f, 0x44, 0x45, 0x41, 0x54, 0x48, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22,
	0xd3, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x44, 0x65, 0x61, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x72, 0x6f,
	0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x0c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x0f, 0x45, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd7, 0x01, 0x0a,
	0x0f, 0x42, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x05, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0f,
	0x45, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x05, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x11, 0x4c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c,
	0x41, 0x42, 0x4f, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x17, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x15, 0x47, 0x6f, 0x74, 0x6f,
	0x4c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d,
	0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x41, 0x42, 0x4f, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x75,
	0x6e, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x75, 0x6e, 0x69, 0x64,
	0x22, 0xdc, 0x02, 0x0a, 0x12, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12,
	0x23, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x05, 0x61,
	0x74, 0x74, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x61, 0x74, 0x74,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x61, 0x74,
	0x74, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x45, 0x54, 0x79,
	0x70, 0x65, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x60, 0x0a, 0x07, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x09, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x72, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x7a, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x52, 0x59, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x52, 0x08,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x47, 0x6f, 0x4d,
	0x61, 0x70, 0x51, 0x75, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x47, 0x4f, 0x4d, 0x41, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64,
	0x22, 0xbe, 0x01, 0x0a, 0x12, 0x47, 0x6f, 0x4d, 0x61, 0x70, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4f, 0x4d, 0x41, 0x50, 0x5f,
	0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a,
	0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x48, 0x69,
	0x74, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x48, 0x49, 0x54, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x22, 0xa6, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x72, 0x79, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x52, 0x59, 0x5f,
	0x50, 0x48, 0x4f, 0x54, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x45, 0x41, 0x4c,
	0x42, 0x55, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x52, 0x59, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72,
	0x79, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x77, 0x0a, 0x08, 0x55, 0x70, 0x79,
	0x75, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x41, 0x6c, 0x62, 0x75, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x45, 0x41, 0x4c, 0x42, 0x55, 0x4d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x52, 0x59, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x63, 0x55,
	0x72, 0x6c, 0x22, 0xc0, 0x01, 0x0a, 0x1b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x70, 0x79, 0x75, 0x6e, 0x55, 0x72, 0x6c, 0x52,
	0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x61, 0x70, 0x41, 0x72, 0x65, 0x61, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4d,
	0x41, 0x50, 0x41, 0x52, 0x45, 0x41, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x72,
	0x65, 0x61, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x70, 0x41, 0x72,
	0x65, 0x61, 0x4e, 0x74, 0x66, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4d, 0x41, 0x50, 0x41,
	0x52, 0x45, 0x41, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x61, 0x72,
	0x65, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x61, 0x72, 0x65,
	0x61, 0x22, 0xab, 0x01, 0x0a, 0x0e, 0x42, 0x75, 0x66, 0x66, 0x46, 0x6f, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x75,
	0x66, 0x66, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x62, 0x75, 0x66, 0x66, 0x22,
	0x98, 0x02, 0x0a, 0x16, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12,
	0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x55, 0x70, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x5f, 0x55, 0x50, 0x5f, 0x48, 0x41,
	0x4e, 0x44, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xf8, 0x01, 0x0a, 0x11, 0x48,
	0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x1d, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x64, 0x12, 0x15,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x68, 0x6f, 0x77, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x02, 0x0a, 0x09, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0a, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x70,
	0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x70,
	0x63, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc3, 0x01,
	0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75,
	0x73, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x44, 0x45, 0x4d, 0x41,
	0x4e, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x70, 0x63,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x70, 0x63,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x69, 0x64, 0x22,
	0x86, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x81, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x4f, 0x6b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4f, 0x4b, 0x5f,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f,
	0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x7a, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xd0, 0x01, 0x0a,
	0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d,
	0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x47, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x18, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x13, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x03, 0x64, 0x69, 0x72, 0x22, 0xfa, 0x02, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x45, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1b, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x09, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x09, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x07, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x3a, 0x12, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x41, 0x53, 0x59, 0x52, 0x07, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0e, 0x45, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0b, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x68, 0x69, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e,
	0x68, 0x69, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x77, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0e, 0x45, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x0b, 0x77, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d,
	0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x55, 0x53, 0x45, 0x52, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xb0, 0x02, 0x0a, 0x14,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e,
	0x5f, 0x54, 0x49, 0x43, 0x4b, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x78, 0x74, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a,
	0x09, 0x67, 0x6f, 0x6d, 0x61, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x09, 0x67, 0x6f, 0x6d, 0x61, 0x70, 0x74, 0x79, 0x70, 0x65, 0x22, 0xcf,
	0x01, 0x0a, 0x13, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x4e, 0x74, 0x66, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x55,
	0x53, 0x49, 0x43, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x64, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xd9, 0x01, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x65, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x54, 0x52, 0x45,
	0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69,
	0x64, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x3a, 0x0f, 0x45, 0x54, 0x52, 0x45, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x55, 0x0a, 0x04,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x4c, 0x49,
	0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x64, 0x65,
	0x6c, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e,
	0x74, 0x66, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x22, 0xd7, 0x01, 0x0a, 0x08, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x62, 0x61, 0x73, 0x65, 0x6c, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x76, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x0f, 0x45, 0x5a,
	0x4f, 0x4e, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x5a, 0x6f, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x0e, 0x45, 0x5a, 0x4f, 0x4e, 0x45, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x0e, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x4a, 0x75, 0x6d, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x3a, 0x0d, 0x45, 0x4a, 0x55,
	0x4d, 0x50, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x16,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x5a,
	0x4f, 0x4e, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x23, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x0f, 0x4a, 0x75, 0x6d, 0x70, 0x5a, 0x6f, 0x6e,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x5f,
	0x5a, 0x4f, 0x4e, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x6e,
	0x70, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e,
	0x70, 0x63, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0a, 0x69, 0x73, 0x61, 0x6e, 0x79, 0x77, 0x68, 0x65, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x61, 0x6e,
	0x79, 0x77, 0x68, 0x65, 0x72, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x74, 0x66, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x13, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d,
	0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x22, 0x9b, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x4e,
	0x41, 0x4d, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa5,
	0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x50, 0x4c, 0x41,
	0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x69, 0x64, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x4e, 0x70, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4e, 0x50, 0x43, 0x46, 0x55, 0x4e,
	0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xd8, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x61, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x45, 0x41,
	0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x72, 0x6e,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x72,
	0x6e, 0x47, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x74, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x0e, 0x4e,
	0x74, 0x66, 0x53, 0x65, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4e, 0x54, 0x46, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x74, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x65, 0x61, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x65, 0x61, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x75, 0x72, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x72, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x22, 0x9b, 0x01, 0x0a,
	0x0f, 0x59, 0x6f, 0x79, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x59, 0x4f, 0x59, 0x4f, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x0f, 0x53,
	0x68, 0x6f, 0x77, 0x53, 0x65, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x68, 0x6f,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x65,
	0x61, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x53, 0x45, 0x41, 0x54,
	0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x52, 0x04, 0x73,
	0x68, 0x6f, 0x77, 0x22, 0xb1, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0xc7, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x53,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x22, 0xab, 0x01, 0x0a, 0x19, 0x55, 0x6e, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x72, 0x79, 0x4e, 0x74, 0x66, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x52, 0x59, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0x65, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x12, 0x17, 0x0a,
	0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50,
	0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x69, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x14, 0x4e, 0x74, 0x66, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x4e, 0x50, 0x43,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x70, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x4e, 0x70, 0x63, 0x52, 0x04, 0x6e, 0x70, 0x63, 0x73, 0x12, 0x15, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x50, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x41, 0x54, 0x41, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x0d,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x0f, 0x45, 0x52, 0x45, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0xba, 0x01,
	0x0a, 0x0a, 0x42, 0x75, 0x79, 0x5a, 0x65, 0x6e, 0x79, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42,
	0x55, 0x59, 0x5f, 0x5a, 0x45, 0x4e, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62,
	0x63, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x65, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x7a, 0x65, 0x6e, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0xa8, 0x02, 0x0a, 0x11, 0x43,
	0x61, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x45, 0x52, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6d,
	0x61, 0x70, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d,
	0x61, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73,
	0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x16, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x65,
	0x61, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x45, 0x52, 0x5f, 0x4a,
	0x4f, 0x49, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52,
	0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x15, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xdb,
	0x01, 0x0a, 0x10, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x72, 0x61, 0x6d, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x72,
	0x61, 0x6d, 0x61, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x95, 0x02, 0x0a,
	0x13, 0x4d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x41, 0x47, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1d, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x73, 0x69, 0x67, 0x6e, 0x22, 0xa4, 0x02, 0x0a, 0x18, 0x4d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6d,
	0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x64, 0x12, 0x3d, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x3a, 0x12, 0x45, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x59, 0x45, 0x53, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xe5, 0x01, 0x0a, 0x19,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x1f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x67,
	0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x1a, 0x4d, 0x61, 0x72, 0x72, 0x69, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x24, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x08, 0x69, 0x73, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x08, 0x69, 0x73, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x22, 0xbe, 0x01, 0x0a, 0x1d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x57, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x74, 0x66, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x24, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x45, 0x5f, 0x57,
	0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4e, 0x54, 0x46,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x67,
	0x75, 0x69, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x0f, 0x4b, 0x46, 0x43, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4b, 0x46, 0x43, 0x5f, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x09, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x10,
	0x4b, 0x46, 0x43, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4b, 0x46, 0x43, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x4b,
	0x46, 0x43, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4b, 0x46, 0x43, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x22, 0x85, 0x02, 0x0a,
	0x15, 0x4b, 0x46, 0x43, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4b, 0x46, 0x43, 0x5f, 0x45, 0x4e, 0x52,
	0x4f, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x3a, 0x15, 0x45, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x4b, 0x46, 0x43, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4b, 0x46, 0x43, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xba, 0x01, 0x0a, 0x15, 0x4b, 0x46, 0x43,
	0x48, 0x61, 0x73, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4b, 0x46, 0x43, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x45, 0x4e, 0x52,
	0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x0b,
	0x68, 0x61, 0x73, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x65, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x13, 0x45, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0xa6, 0x02, 0x0a, 0x12,
	0x54, 0x77, 0x69, 0x6e, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x49, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x14, 0x45, 0x54, 0x57, 0x49, 0x4e, 0x53, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x72,
	0x76, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x73, 0x68, 0x6f, 0x77, 0x22, 0xc7, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43,
	0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x22,
	0xad, 0x01, 0x0a, 0x12, 0x48, 0x69, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x49, 0x52, 0x45, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x22,
	0xcf, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x44, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a,
	0x1a, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xb8, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x04, 0x64, 0x77, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x64, 0x77, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x15, 0x45, 0x52, 0x45, 0x43,
	0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49,
	0x4e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0xc2, 0x01, 0x0a,
	0x17, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0xcf, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x0c, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x0c, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x77, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64,
	0x77, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x12, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0c, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x19, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x1a,
	0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x79,
	0x66, 0x61, 0x76, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x79, 0x66, 0x61, 0x76, 0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x6c, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x6c, 0x76, 0x12, 0x23, 0x0a, 0x09, 0x69, 0x73, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x05, 0x69, 0x73, 0x62, 0x75, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x05, 0x69, 0x73, 0x62, 0x75, 0x79, 0x22, 0x54, 0x0a, 0x08, 0x52, 0x61,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x43, 0x68, 0x61, 0x72,
	0x52, 0x61, 0x63, 0x65, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x61, 0x69, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x79, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x79, 0x65,
	0x22, 0x80, 0x02, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x23, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x75, 0x72, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x22, 0xeb, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x79, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x59, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x09,
	0x6f, 0x6e, 0x6c, 0x79, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x79, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x22, 0xcc, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x1e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x2f, 0x0a, 0x17, 0x41, 0x73, 0x74, 0x72, 0x6f, 0x6c, 0x61, 0x62, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x73, 0x22, 0x5e, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x22, 0x4a, 0x0a, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22, 0x49, 0x0a,
	0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x5d, 0x0a, 0x11, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x73, 0x22, 0xec, 0x02, 0x0a, 0x13, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x6e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6e, 0x6f, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x65, 0x69, 0x6e,
	0x67, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x62, 0x65, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x62, 0x65, 0x69, 0x6e, 0x67,
	0x69, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x65, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x70, 0x6f, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x70, 0x6f, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63,
	0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x6f, 0x73, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x22, 0xb4, 0x05, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x05, 0x6a, 0x6f, 0x62, 0x6c, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x6c, 0x76, 0x12, 0x19, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x65, 0x78, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x65, 0x78,
	0x70, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0b, 0x45, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x61, 0x74,
	0x74, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x73, 0x74,
	0x72, 0x6f, 0x6c, 0x61, 0x62, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x73, 0x74, 0x72, 0x6f, 0x6c, 0x61, 0x62,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6c, 0x61, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37,
	0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x07, 0x69, 0x73, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07,
	0x69, 0x73, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x69, 0x73, 0x62, 0x75, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x69,
	0x73, 0x62, 0x75, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x67, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x67, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d,
	0x0a, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x6f, 0x70, 0x74, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x6f, 0x70, 0x74, 0x73, 0x22, 0x9e, 0x01,
	0x0a, 0x08, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0d, 0x45, 0x53, 0x4c, 0x4f, 0x54, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x73, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f,
	0x73, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x73, 0x74, 0x6e, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x73, 0x74, 0x6e, 0x75, 0x6d, 0x22, 0x66,
	0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x41, 0x73, 0x74, 0x72, 0x6f, 0x6c,
	0x61, 0x62, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xf3, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23,
	0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x63, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x0b, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc1, 0x01, 0x0a,
	0x11, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xa0, 0x01, 0x0a, 0x11, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6c, 0x6f, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f,
	0x74, 0x69, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6c, 0x6f, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f,
	0x74, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x14, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x42, 0x55, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x69, 0x64, 0x22, 0xa4,
	0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x6c, 0x6f, 0x74, 0x69, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d,
	0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43,
	0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2d, 0x0a,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x1e, 0x0a, 0x09,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0a,
	0x68, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x09, 0x68, 0x61, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x95,
	0x01, 0x0a, 0x15, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x70, 0x72, 0x61, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x50, 0x52, 0x41, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xf0, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x69,
	0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x6c, 0x74, 0x6d, 0x61, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x4c, 0x54,
	0x4d, 0x41, 0x4e, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22,
	0x44, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x52,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xf3, 0x01, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x42, 0x6f, 0x6f, 0x74, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x3a, 0x0f, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x48, 0x4f, 0x50, 0x45, 0x52,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x14,
	0x42, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x42, 0x6f, 0x6f, 0x74, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x3a, 0x0f, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x48, 0x4f, 0x50, 0x45, 0x52,
	0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x42, 0x6f, 0x6f, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0xfd, 0x01, 0x0a, 0x13, 0x44, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x52, 0x45, 0x53, 0x53, 0x55,
	0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x45,
	0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xfa, 0x01, 0x0a, 0x12, 0x44, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x48, 0x65, 0x61, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x52, 0x45, 0x53, 0x53, 0x55, 0x50,
	0x5f, 0x48, 0x45, 0x41, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x39, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11,
	0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1a, 0x0a, 0x05, 0x70, 0x75, 0x74, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x05, 0x70, 0x75, 0x74, 0x6f, 0x6e, 0x22, 0x7f, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x77, 0x61, 0x69, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x77, 0x61, 0x69, 0x74, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc9, 0x01,
	0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x47,
	0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xdf, 0x01, 0x0a, 0x14, 0x44, 0x72,
	0x65, 0x73, 0x73, 0x55, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x70, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x52, 0x45, 0x53, 0x53, 0x55, 0x50, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x55, 0x50, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x05, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x67, 0x0a, 0x11, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x11, 0x45, 0x55, 0x53, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x13, 0x44, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x16, 0x47, 0x6f, 0x54, 0x6f, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d,
	0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x4d, 0x41, 0x50,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x46, 0x75,
	0x6e, 0x63, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x65, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x43, 0x75, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x11, 0x45, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x45, 0x50, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x04, 0x64, 0x77,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x64, 0x77, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x12, 0x45, 0x47, 0x52, 0x4f,
	0x57, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x69, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x72, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x72, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x22, 0x72, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x34, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68,
	0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x77,
	0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x64, 0x77, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x64, 0x77, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x64,
	0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x07, 0x64, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x18, 0x47, 0x72, 0x6f,
	0x77, 0x74, 0x68, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f,
	0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x22,
	0xd5, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x61, 0x74, 0x54, 0x61, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x41, 0x54, 0x5f, 0x54, 0x41, 0x47, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x17,
	0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x3a, 0x21, 0x45, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x42, 0x55, 0x54,
	0x54, 0x4f, 0x4e, 0x52, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x9f, 0x02, 0x0a,
	0x13, 0x43, 0x68, 0x65, 0x61, 0x74, 0x54, 0x61, 0x67, 0x53, 0x74, 0x61, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x41, 0x54, 0x5f, 0x54, 0x41, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x07,
	0x63, 0x68, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x63, 0x68, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a,
	0x11, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x6d, 0x76, 0x70, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x11, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x6d, 0x76, 0x70, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3e,
	0x0a, 0x0f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0f, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xc3,
	0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x50, 0x6f, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x70, 0x6f, 0x73, 0x22, 0x68, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x06, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbf,
	0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x74, 0x66,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4e,
	0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0xbb, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x4d, 0x61, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x54, 0x4f,
	0x4d, 0x41, 0x50, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x61,
	0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x61,
	0x70, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x06, 0x64, 0x6d, 0x61, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x64, 0x6d, 0x61, 0x70, 0x49, 0x44, 0x22, 0xd9,
	0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1f, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x11, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x41, 0x49, 0x4c, 0x59, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x10, 0x53,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x4e, 0x74, 0x66, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x06,
	0x69, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1d, 0x0a, 0x08, 0x69, 0x73, 0x73, 0x68, 0x6f,
	0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x69, 0x73,
	0x73, 0x68, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xc1, 0x01, 0x0a, 0x0f, 0x42, 0x65, 0x61, 0x74, 0x50, 0x6f, 0x72, 0x69, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x49, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x1f, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x12, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x4e, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x0a, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x13, 0x45, 0x52, 0x45,
	0x57, 0x45, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x13, 0x41, 0x6c, 0x74,
	0x6d, 0x61, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x41, 0x4c, 0x54, 0x4d, 0x41, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a,
	0x0b, 0x67, 0x65, 0x74, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x05,
	0x66, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x17, 0x45, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x05, 0x66, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xbe, 0x02, 0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x61, 0x63, 0x74, 0x69, 0x64, 0x12, 0x15, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a,
	0x05, 0x66, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x17, 0x45, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x05, 0x66, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d,
	0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x31,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x12, 0x13, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x22, 0x3f, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x71, 0x75, 0x69, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x69, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x45, 0x71, 0x75, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43,
	0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x4e, 0x0a, 0x0c, 0x50, 0x72,
	0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61,
	0x6d, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x70,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x22, 0xb3, 0x01, 0x0a, 0x12, 0x50,
	0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x4e, 0x74, 0x66, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d,
	0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x54, 0x49, 0x47, 0x45, 0x5f, 0x4e, 0x54, 0x46,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x74, 0x69, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x22, 0xe2, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x47, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x54,
	0x49, 0x47, 0x45, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x48, 0x45, 0x41,
	0x4c, 0x54, 0x48, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x17, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x07, 0x66, 0x69,
	0x73, 0x68, 0x57, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07,
	0x66, 0x69, 0x73, 0x68, 0x57, 0x61, 0x79, 0x22, 0xbc, 0x01, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x47, 0x48, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x19, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x22, 0xc9, 0x01, 0x0a, 0x1a, 0x47, 0x61, 0x6d, 0x65, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x48, 0x45, 0x41, 0x4c,
	0x54, 0x48, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x1d, 0x46, 0x69, 0x73, 0x68, 0x77, 0x61, 0x79, 0x32, 0x4b,
	0x69, 0x6c, 0x6c, 0x42, 0x6f, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x49, 0x53, 0x48, 0x57, 0x41, 0x59, 0x32, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x84, 0x01,
	0x0a, 0x0f, 0x41, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d,
	0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0xd7, 0x01, 0x0a, 0x15, 0x48, 0x69, 0x67, 0x68, 0x52, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x41, 0x74, 0x74, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x65, 0x70, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x15,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x66,
	0x0a, 0x0f, 0x48, 0x65, 0x61, 0x64, 0x77, 0x65, 0x61, 0x72, 0x4e, 0x70, 0x63, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x17, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x64, 0x77,
	0x65, 0x61, 0x72, 0x4e, 0x70, 0x63, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52, 0x5f, 0x4e, 0x50, 0x43, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x70, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x77, 0x65, 0x61, 0x72,
	0x4e, 0x70, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6e, 0x70, 0x63, 0x73, 0x22, 0xb2, 0x02,
	0x0a, 0x14, 0x48, 0x65, 0x61, 0x64, 0x77, 0x65, 0x61, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41,
	0x52, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x6f, 0x64,
	0x12, 0x1d, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x08, 0x66, 0x75, 0x72, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x66, 0x75, 0x72, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x48, 0x65, 0x61, 0x64, 0x77, 0x65, 0x61, 0x72, 0x54,
	0x6f, 0x77, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x45,
	0x41, 0x44, 0x57, 0x45, 0x41, 0x52, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c,
	0x73, 0x22, 0xb8, 0x02, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x64, 0x77, 0x65, 0x61, 0x72, 0x45, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57,
	0x45, 0x41, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x64, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x6f,
	0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x77, 0x65,
	0x65, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x61,
	0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x6f,
	0x69, 0x6e, 0x61, 0x6e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x6e,
	0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x6e, 0x75, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa7, 0x01, 0x0a,
	0x14, 0x48, 0x65, 0x61, 0x64, 0x77, 0x65, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a,
	0x05, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x22, 0xc7, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x61,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x15, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x13, 0x45, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x09, 0x70, 0x61, 0x73, 0x73, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x70,
	0x61, 0x73, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0xc8, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49,
	0x43, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x45, 0x0a, 0x14, 0x53,
	0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x4d, 0x61,
	0x69, 0x6c, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x08, 0x68, 0x61, 0x73,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x07, 0x68, 0x61, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x0a, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x61, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x63,
	0x61, 0x6c, 0x63, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x63, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xc5, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4d, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74,
	0x4d, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x8c, 0x01, 0x0a, 0x13, 0x48,
	0x65, 0x61, 0x64, 0x77, 0x65, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x46, 0x61,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xbb, 0x01,
	0x0a, 0x18, 0x46, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x47, 0x65, 0x6d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x53,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x08, 0x69, 0x73, 0x63, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x08, 0x69, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x16,
	0x46, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x47, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x47, 0x45, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x67, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x67, 0x65, 0x6d, 0x69, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x19,
	0x46, 0x6f, 0x75, 0x72, 0x74, 0x68, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x47, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x20, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x4f, 0x55, 0x52,
	0x54, 0x48, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x47, 0x45,
	0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x32, 0x0a, 0x0c, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x1c, 0x0a, 0x0a,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x68, 0x70, 0x22, 0x4c, 0x0a, 0x0a, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x72, 0x65, 0x45, 0x6c, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xf3, 0x02, 0x0a, 0x0c, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x4e, 0x70, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x70, 0x63,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50,
	0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x22, 0xb8,
	0x01, 0x0a, 0x15, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x70, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf6, 0x01, 0x0a, 0x16, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21,
	0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x70, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x13, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x70, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x19, 0x4e, 0x69, 0x67,
	0x68, 0x74, 0x6d, 0x61, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x4d, 0x41,
	0x52, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc5, 0x01,
	0x0a, 0x17, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x49, 0x47, 0x48,
	0x54, 0x4d, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x41, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x41, 0x6e, 0x69, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x07, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x69, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x70,
	0x41, 0x6e, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d,
	0x41, 0x50, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x17, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x69, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x4e, 0x70, 0x63, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x48, 0x4f, 0x4f, 0x54, 0x5f, 0x4e,
	0x50, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x70, 0x63,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x67,
	0x75, 0x69, 0x64, 0x22, 0x6d, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x64, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x64, 0x61, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x64, 0x61, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x64,
	0x61, 0x79, 0x22, 0xb0, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x4e, 0x74,
	0x66, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x59, 0x53, 0x49,
	0x47, 0x4e, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a,
	0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x50, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x53, 0x69, 0x67,
	0x6e, 0x42, 0x75, 0x79, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41,
	0x59, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x42, 0x55, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xd4, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x50, 0x41, 0x59, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x50, 0x61, 0x79, 0x53,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x8f, 0x01,
	0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x19, 0x0a, 0x06, 0x67, 0x72, 0x69, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x67, 0x72, 0x69, 0x64, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x6c, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x72, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x6c, 0x76, 0x12, 0x11, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x6c, 0x76, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xfc, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x09, 0x67, 0x72, 0x69, 0x64, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x67, 0x72, 0x69, 0x64,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x69,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x69, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xee,
	0x01, 0x0a, 0x18, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58,
	0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x67, 0x72, 0x69, 0x64, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x67, 0x72, 0x69, 0x64,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xcd, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58,
	0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x67, 0x72, 0x69, 0x64, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x67, 0x72, 0x69, 0x64, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x69, 0x64, 0x73, 0x22,
	0xc9, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58,
	0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x67, 0x72, 0x69, 0x64, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x67, 0x72, 0x69, 0x64, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x18,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x69, 0x64, 0x42, 0x75,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x42, 0x55, 0x59, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x09, 0x67, 0x72, 0x69, 0x64, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x67, 0x72, 0x69,
	0x64, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x18, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x72, 0x69, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x67, 0x72, 0x69, 0x64, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xeb, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x70, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x45, 0x58, 0x50, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x19, 0x0a, 0x06, 0x72, 0x61, 0x69, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x72, 0x61, 0x69, 0x64, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x13, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x45, 0x58, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb3,
	0x01, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4d, 0x79, 0x73, 0x65, 0x6c, 0x66, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x59, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x53,
	0x45, 0x54, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x23, 0x0a, 0x0b, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x68, 0x69, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e,
	0x68, 0x69, 0x64, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x15, 0x52, 0x69, 0x64,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x0d,
	0x72, 0x69, 0x64, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x72, 0x69, 0x64, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x17, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x50,
	0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x45,
	0x4e, 0x47, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x0b, 0x6b,
	0x69, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x0a, 0x6b, 0x69, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x22,
	0xb5, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x70, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x54,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6f, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x1a, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x73, 0x22, 0x5a, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x42, 0x75, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xfa, 0x01, 0x0a, 0x11, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x42, 0x75, 0x79, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x59, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x24, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xf4, 0x01, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64,
	0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x80,
	0x02, 0x0a, 0x11, 0x4e, 0x74, 0x66, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x41,
	0x43, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x07, 0x69, 0x73, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x07, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x69, 0x73,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x07, 0x69, 0x73, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x6d, 0x0a, 0x10, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xec, 0x01, 0x0a, 0x19, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x65, 0x6c, 0x73, 0x22,
	0xa9, 0x01, 0x0a, 0x19, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x13,
	0x53, 0x65, 0x74, 0x42, 0x6f, 0x4b, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x4f, 0x4b, 0x49, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x4d, 0x61, 0x73, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x4d, 0x41, 0x53, 0x4b, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x95, 0x01, 0x0a, 0x18, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47,
	0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xa3, 0x01,
	0x0a, 0x0d, 0x48, 0x69, 0x64, 0x65, 0x55, 0x49, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x55, 0x49, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x22, 0xec, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x70,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x23, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x4d, 0x4f,
	0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65,
	0x78, 0x74, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x64, 0x73, 0x22, 0x39, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x7a, 0x22, 0xbe, 0x02,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x64, 0x69,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x44, 0x69,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x69, 0x64, 0x65, 0x22, 0xd6,
	0x01, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x27, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50,
	0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x20, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x27, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43,
	0x4c, 0x45, 0x41, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48,
	0x41, 0x49, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0x9c, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x70, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f,
	0x4f, 0x50, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x22, 0x4a, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x6f,
	0x6e, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xd1,
	0x01, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6e, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x1b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x6f, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x4f,
	0x4e, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xba, 0x01,
	0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x61, 0x69, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x48, 0x41, 0x49,
	0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x69, 0x72,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x61, 0x69, 0x72, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x69, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x10, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x79, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x59, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x79, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x65, 0x79, 0x65, 0x69, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x11, 0x48, 0x61,
	0x70, 0x70, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x48, 0x41, 0x50, 0x50, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50,
	0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x22,
	0xe1, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6f, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4f, 0x4b,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x52, 0x61, 0x63, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x34, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52,
	0x41, 0x43, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xab, 0x01, 0x0a, 0x15, 0x52, 0x61, 0x63, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12,
	0x34, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x14, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2a, 0x9a, 0x38, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x32, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x47, 0x4f, 0x43, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x59, 0x53, 0x4d, 0x53, 0x47, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e,
	0x50, 0x43, 0x44, 0x41, 0x54, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e,
	0x49, 0x4e, 0x45, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x45, 0x52, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x50,
	0x4f, 0x53, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x56, 0x41, 0x52, 0x10, 0x09, 0x12,
	0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x41,
	0x4c, 0x4b, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x41, 0x50, 0x10, 0x0c, 0x12,
	0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4e, 0x55, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x4d, 0x45, 0x4e,
	0x55, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x4e, 0x49, 0x4e, 0x45, 0x10, 0x11,
	0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55,
	0x53, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x10, 0x13, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x10, 0x14, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41,
	0x49, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x41, 0x54, 0x54, 0x52, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x10, 0x15, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x53, 0x48, 0x4f, 0x50, 0x47, 0x4f, 0x54,
	0x49, 0x54, 0x45, 0x4d, 0x10, 0x16, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x53, 0x48, 0x4f, 0x50, 0x47,
	0x4f, 0x54, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x17, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x52, 0x45, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0x19, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x44, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x1a,
	0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x1b, 0x12, 0x15, 0x0a,
	0x11, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e,
	0x55, 0x49, 0x10, 0x1d, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x44, 0x42, 0x47, 0x53, 0x59, 0x53, 0x4d, 0x53, 0x47, 0x10, 0x1e, 0x12, 0x1d,
	0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x4f, 0x4c,
	0x4c, 0x4f, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x20, 0x12, 0x16, 0x0a,
	0x12, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x50, 0x43, 0x46,
	0x55, 0x4e, 0x43, 0x10, 0x21, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x22, 0x12,
	0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x4f,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x23, 0x12, 0x1c, 0x0a, 0x18, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x43, 0x48, 0x41, 0x54, 0x4d, 0x53, 0x47, 0x10, 0x24, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x42, 0x47,
	0x4d, 0x10, 0x25, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x46, 0x49, 0x47, 0x48, 0x54, 0x45, 0x52, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x26, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x28, 0x12, 0x15, 0x0a,
	0x11, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x44, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x29, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x2a,
	0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x48, 0x4f, 0x54, 0x4f, 0x10, 0x2c, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e,
	0x10, 0x2d, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x10, 0x2f,
	0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x55, 0x54, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x43, 0x55, 0x54, 0x10, 0x30, 0x12, 0x17, 0x0a, 0x13,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x50, 0x43, 0x41, 0x4e,
	0x47, 0x4c, 0x45, 0x10, 0x31, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x10,
	0x32, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x47, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x33, 0x12, 0x18, 0x0a, 0x14, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x5f, 0x47,
	0x45, 0x41, 0x52, 0x10, 0x34, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x35, 0x12, 0x19,
	0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x41, 0x42,
	0x4f, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x36, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x38, 0x12, 0x1e, 0x0a, 0x1a,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x5f,
	0x4c, 0x41, 0x42, 0x4f, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x39, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x52, 0x59, 0x10, 0x3a, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x47, 0x4f, 0x4d, 0x41, 0x50, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x3b,
	0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47,
	0x4f, 0x4d, 0x41, 0x50, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x3c, 0x12, 0x16, 0x0a,
	0x12, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x48, 0x49, 0x54, 0x10, 0x3d, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x52, 0x59, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x3e, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4d,
	0x41, 0x50, 0x41, 0x52, 0x45, 0x41, 0x10, 0x3f, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4d, 0x41, 0x50, 0x41, 0x52,
	0x45, 0x41, 0x10, 0x40, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x10,
	0x42, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x4e, 0x44,
	0x53, 0x10, 0x43, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x5f, 0x55, 0x50, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53,
	0x10, 0x44, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x45, 0x12,
	0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x55,
	0x53, 0x49, 0x43, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x46, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x44,
	0x45, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x47, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x10, 0x48, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4f, 0x4b, 0x5f, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x52, 0x59, 0x10, 0x49, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x10, 0x4a,
	0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x4b, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x4c, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x4d, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x52, 0x59,
	0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x50, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x4c, 0x45, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x52,
	0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53,
	0x45, 0x54, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x53, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x55, 0x53,
	0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x54, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e,
	0x5f, 0x54, 0x49, 0x43, 0x4b, 0x10, 0x55, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43,
	0x5f, 0x4e, 0x54, 0x46, 0x10, 0x56, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x54, 0x52, 0x45, 0x45, 0x10, 0x57,
	0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54,
	0x52, 0x45, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x58, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x4e, 0x54, 0x46, 0x10, 0x59, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x5b, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10,
	0x5c, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e,
	0x54, 0x46, 0x10, 0x5d, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x5f, 0x12,
	0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x45,
	0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x60, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x46, 0x4f, 0x4c,
	0x4c, 0x4f, 0x57, 0x10, 0x61, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x62,
	0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x63, 0x12, 0x1d, 0x0a, 0x19, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x4e, 0x50, 0x43, 0x46, 0x55, 0x4e, 0x43, 0x10, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53,
	0x45, 0x41, 0x54, 0x10, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x10, 0x66, 0x12, 0x25,
	0x0a, 0x21, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x67, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x5f, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x52, 0x59, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x68, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x56, 0x49, 0x53,
	0x49, 0x42, 0x4c, 0x45, 0x4e, 0x50, 0x43, 0x10, 0x69, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6a, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x50, 0x52, 0x45, 0x44, 0x41, 0x54, 0x41, 0x10, 0x6c, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x6d, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x52, 0x41,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x5a, 0x45,
	0x4e, 0x59, 0x10, 0x6f, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x45, 0x52, 0x10, 0x70,
	0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x45, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10,
	0x71, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x59, 0x4f, 0x59, 0x4f, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x10, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x53,
	0x45, 0x41, 0x54, 0x10, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x45, 0x46, 0x46, 0x45,
	0x43, 0x54, 0x10, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x4f, 0x53, 0x41, 0x4c, 0x10, 0x75, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x76, 0x12, 0x23,
	0x0a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x48, 0x4f, 0x54,
	0x4f, 0x10, 0x77, 0x12, 0x28, 0x0a, 0x24, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4d, 0x41, 0x52, 0x52, 0x49, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f,
	0x53, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x78, 0x12, 0x28, 0x0a,
	0x24, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x79, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x48,
	0x4f, 0x57, 0x10, 0x7a, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41,
	0x43, 0x45, 0x10, 0x7b, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x7c, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x44, 0x10, 0x7d, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43,
	0x45, 0x49, 0x56, 0x45, 0x10, 0x7e, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x7f, 0x12, 0x19, 0x0a, 0x14,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4b, 0x46, 0x43, 0x5f, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x10, 0x80, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x49, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x81, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x82, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x10, 0x83, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x55, 0x59, 0x10, 0x84, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x85, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x86, 0x01, 0x12, 0x1b,
	0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x41, 0x56,
	0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x87, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x88, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x89, 0x01, 0x12, 0x1f, 0x0a, 0x1a,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x8a, 0x01, 0x12, 0x1d, 0x0a,
	0x18, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x8b, 0x01, 0x12, 0x22, 0x0a, 0x1d,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x8c, 0x01,
	0x12, 0x1c, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47,
	0x4f, 0x54, 0x4f, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x4d, 0x41, 0x50, 0x10, 0x8d, 0x01, 0x12, 0x1e,
	0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x10, 0x8e, 0x01, 0x12, 0x21,
	0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x41, 0x4c, 0x54, 0x4d, 0x41, 0x4e, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x8f,
	0x01, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x90,
	0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x42, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10,
	0x91, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x44, 0x52, 0x45, 0x53, 0x53, 0x55, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x92,
	0x01, 0x12, 0x1c, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x55, 0x50, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x93, 0x01, 0x12,
	0x1b, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x94, 0x01, 0x12, 0x1e, 0x0a, 0x19,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x55, 0x50, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x10, 0x95, 0x01, 0x12, 0x1d, 0x0a, 0x18,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x96, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x44, 0x45, 0x41, 0x54, 0x48, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x97, 0x01,
	0x12, 0x22, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e,
	0x45, 0x57, 0x5f, 0x44, 0x45, 0x41, 0x54, 0x48, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x10, 0x98, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x99, 0x01, 0x12, 0x1e,
	0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x41, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x10, 0x9a, 0x01, 0x12, 0x26,
	0x0a, 0x21, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x47, 0x52, 0x4f,
	0x57, 0x54, 0x48, 0x10, 0x9b, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f,
	0x57, 0x54, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x9c, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x41, 0x54, 0x5f,
	0x54, 0x41, 0x47, 0x10, 0x9d, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x45, 0x41, 0x54, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x10, 0x9e, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x50, 0x4f, 0x53, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x9f, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x49, 0x10, 0xa0,
	0x01, 0x12, 0x1c, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0xa1, 0x01, 0x12,
	0x1a, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4b, 0x46,
	0x43, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0xa2, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4b, 0x46, 0x43, 0x5f, 0x45, 0x4e,
	0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0xa3, 0x01, 0x12, 0x16, 0x0a,
	0x11, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x49, 0x4e, 0x10, 0xa4, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0xa5,
	0x01, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4b, 0x46, 0x43, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0xa6, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4b, 0x46, 0x43, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x10, 0xa7, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4b, 0x46, 0x43, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x10, 0xa8, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x4e, 0x54, 0x46, 0x10, 0xa9, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x4c, 0x54, 0x4d, 0x41, 0x4e, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x10, 0xaa, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xab, 0x01, 0x12,
	0x23, 0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0xac, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x5f, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x10, 0xad, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x54, 0x4f, 0x4d, 0x41, 0x50,
	0x10, 0xae, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x54, 0x49, 0x47, 0x45, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0xaf,
	0x01, 0x12, 0x1d, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x54, 0x49, 0x47, 0x45, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x10, 0xb0, 0x01,
	0x12, 0x19, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41,
	0x43, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0xb1, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x55,
	0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x48, 0x45,
	0x41, 0x4c, 0x54, 0x48, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xb2, 0x01, 0x12, 0x25,
	0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x10, 0xb3, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x53, 0x48, 0x4f,
	0x52, 0x54, 0x43, 0x55, 0x54, 0x10, 0xb4, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x49, 0x53, 0x48, 0x57, 0x41, 0x59, 0x32, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0xb5, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x52, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x10, 0xb6, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41,
	0x52, 0x5f, 0x4e, 0x50, 0x43, 0x10, 0xb7, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52, 0x5f,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xb8, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52, 0x5f,
	0x54, 0x4f, 0x57, 0x45, 0x52, 0x10, 0xb9, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52, 0x5f,
	0x45, 0x4e, 0x44, 0x10, 0xba, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0xbb, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x10, 0xc9, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x10, 0xbf, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x10,
	0xc0, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0xc1, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x45, 0x4e, 0x47, 0x45, 0x52, 0x10, 0xc2, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x10, 0xc3, 0x01, 0x12, 0x25, 0x0a, 0x20,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x53,
	0x10, 0xc4, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x45, 0x10, 0xc5, 0x01, 0x12, 0x20,
	0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x53,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0xc6, 0x01,
	0x12, 0x24, 0x0a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46,
	0x41, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x47, 0x45, 0x4d, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x10, 0xc7, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f,
	0x47, 0x45, 0x4d, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xc8, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x4f, 0x55, 0x52, 0x54, 0x48, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x10, 0xcd,
	0x01, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x10, 0xca, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x45, 0x10, 0xcb, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x45, 0x10, 0xcc, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x10, 0xce, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0xcf, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0xd0, 0x01, 0x12, 0x21, 0x0a,
	0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0xd1, 0x01,
	0x12, 0x23, 0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45,
	0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x42,
	0x55, 0x59, 0x10, 0xd2, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0xd6, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x4d, 0x41, 0x52,
	0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xd3, 0x01, 0x12,
	0x22, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x49,
	0x47, 0x48, 0x54, 0x4d, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x47, 0x45, 0x54,
	0x10, 0xd4, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0xd7,
	0x01, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x53, 0x48, 0x4f, 0x4f, 0x54, 0x5f, 0x4e, 0x50, 0x43, 0x10, 0xd8, 0x01, 0x12, 0x1b, 0x0a, 0x16,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x59, 0x53, 0x49,
	0x47, 0x4e, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0xd9, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x59, 0x53, 0x49, 0x47, 0x4e, 0x5f,
	0x42, 0x55, 0x59, 0x10, 0xda, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x41, 0x59, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x10, 0xdb, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x52, 0x45,
	0x57, 0x41, 0x44, 0x10, 0xdc, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x59, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x53, 0x45, 0x54, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xdd, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x10, 0xde, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x59, 0x10, 0xdf, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x10, 0xe0, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xe1, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xe5, 0x01,
	0x12, 0x1b, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e,
	0x54, 0x46, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x41, 0x43, 0x54, 0x10, 0xe4, 0x01, 0x12, 0x24, 0x0a,
	0x1f, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x10, 0xe7, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x10, 0xe8, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x4d, 0x4f,
	0x4e, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0xe9, 0x01,
	0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x42, 0x4f, 0x4b, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xea, 0x01,
	0x12, 0x1f, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0xef,
	0x01, 0x12, 0x21, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x43, 0x41, 0x4d, 0x45, 0x52,
	0x41, 0x10, 0xf0, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x55, 0x49, 0x10, 0xf1, 0x01, 0x12, 0x1a, 0x0a, 0x15,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43,
	0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0xf2, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xf3, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52,
	0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4f, 0x50, 0x54,
	0x10, 0xf4, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x48, 0x41, 0x50, 0x50, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xf5, 0x01,
	0x12, 0x2c, 0x0a, 0x27, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43,
	0x4c, 0x45, 0x41, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0xf6, 0x01, 0x12, 0x25,
	0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x10, 0xf7, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x4f, 0x4e,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0xf8, 0x01, 0x12, 0x1b, 0x0a,
	0x16, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x10, 0xf9, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x45, 0x59, 0x45, 0x10, 0xfa, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x32, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x50, 0x4f, 0x53, 0x10, 0xfb, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x32,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0xfc, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x55, 0x53, 0x45,
	0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0xfd, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53,
	0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0xfe, 0x01, 0x12, 0x22, 0x0a, 0x1d,
	0x55, 0x53, 0x45, 0x52, 0x32, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x49, 0x52, 0x45, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0xff, 0x01,
	0x2a, 0xcb, 0x01, 0x0a, 0x0c, 0x45, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x45, 0x54, 0x45, 0x58, 0x50, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c,
	0x45, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x06, 0x2a, 0x3a,
	0x0a, 0x0e, 0x45, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x4f, 0x70, 0x74,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x41, 0x43, 0x54, 0x5f,
	0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x10, 0x02, 0x2a, 0xd4, 0x02, 0x0a, 0x0f, 0x45,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x55, 0x53, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x55, 0x53, 0x45, 0x52,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x48, 0x50,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x55, 0x53, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x55, 0x53, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x55, 0x53, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x55,
	0x53, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45,
	0x41, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x45,
	0x55, 0x53, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x55, 0x53, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x55, 0x53,
	0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x49,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4b,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x55, 0x53, 0x45,
	0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10,
	0x0a, 0x2a, 0xe6, 0x02, 0x0a, 0x0b, 0x45, 0x52, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x45, 0x4c, 0x49, 0x56,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f,
	0x4e, 0x45, 0x59, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52,
	0x4e, 0x53, 0x41, 0x56, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f,
	0x57, 0x45, 0x52, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x07, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x52, 0x41,
	0x49, 0x44, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x52, 0x45,
	0x54, 0x55, 0x52, 0x4e, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x45, 0x4c, 0x49, 0x56,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x45, 0x4c, 0x49, 0x56, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x0d, 0x2a, 0x4d, 0x0a, 0x0a, 0x45, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x45, 0x46, 0x46,
	0x45, 0x43, 0x54, 0x4f, 0x50, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x4f, 0x50, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x4f, 0x50, 0x54,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x80, 0x02, 0x0a, 0x0b, 0x45, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x56, 0x50, 0x53, 0x48,
	0x4f, 0x57, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10,
	0x05, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x50, 0x41, 0x54, 0x48, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10,
	0x07, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x55, 0x49, 0x45, 0x46, 0x46,
	0x45, 0x43, 0x54, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x09, 0x2a, 0x6e, 0x0a, 0x0d,
	0x45, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52,
	0x41, 0x49, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x8d, 0x01, 0x0a,
	0x0a, 0x45, 0x44, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x44, 0x52, 0x45, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41,
	0x49, 0x52, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x44, 0x52, 0x45, 0x53, 0x53, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x44, 0x52, 0x45, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x59, 0x45,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x44, 0x52, 0x45, 0x53, 0x53, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0x33, 0x0a, 0x09,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10,
	0x02, 0x2a, 0x38, 0x0a, 0x0b, 0x45, 0x44, 0x62, 0x67, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x44, 0x42, 0x47, 0x4d, 0x53, 0x47, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x44, 0x42, 0x47, 0x4d, 0x53, 0x47,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x01, 0x2a, 0x3d, 0x0a, 0x0b, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47,
	0x41, 0x4d, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x50, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x47, 0x41, 0x4d, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x50,
	0x54, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x76, 0x0a, 0x07, 0x43, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x44, 0x45, 0x41, 0x4c, 0x59,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x04, 0x2a, 0x71, 0x0a, 0x0d, 0x45, 0x47, 0x6f, 0x54, 0x6f, 0x47, 0x65, 0x61, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x47, 0x6f, 0x54, 0x6f, 0x47, 0x65, 0x61, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x47, 0x6f, 0x54, 0x6f, 0x47, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48,
	0x61, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x6f, 0x54, 0x6f, 0x47, 0x65,
	0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x47, 0x6f, 0x54, 0x6f, 0x47, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46,
	0x72, 0x65, 0x65, 0x10, 0x04, 0x2a, 0x81, 0x01, 0x0a, 0x0b, 0x45, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x46,
	0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x52, 0x45, 0x41, 0x4b, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x46, 0x4f, 0x4c, 0x4c,
	0x4f, 0x57, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x57, 0x49, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x07, 0x2a, 0x95, 0x01, 0x0a, 0x0a, 0x45, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x41, 0x4c, 0x42,
	0x55, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x41, 0x4c, 0x42, 0x55, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45,
	0x52, 0x59, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x41, 0x4c, 0x42, 0x55, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x41,
	0x4c, 0x42, 0x55, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49,
	0x43, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x41, 0x4c, 0x42, 0x55, 0x4d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x41, 0x4c, 0x42, 0x55, 0x4d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10,
	0x05, 0x2a, 0x5d, 0x0a, 0x0d, 0x45, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x41, 0x53, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x54, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03,
	0x2a, 0xce, 0x01, 0x0a, 0x0a, 0x45, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x51, 0x55, 0x45, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x51, 0x55, 0x45, 0x52, 0x59, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x51, 0x55, 0x45, 0x52, 0x59, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x04,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x51, 0x55, 0x45, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57,
	0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x05, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x51, 0x55, 0x45, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45,
	0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x06, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x51, 0x55, 0x45, 0x52, 0x59, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10,
	0x07, 0x2a, 0xcf, 0x02, 0x0a, 0x10, 0x45, 0x46, 0x61, 0x73, 0x68, 0x69, 0x6f, 0x6e, 0x48, 0x69,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x46, 0x41, 0x53, 0x48, 0x49,
	0x4f, 0x4e, 0x48, 0x49, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x46, 0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e, 0x48, 0x49, 0x44,
	0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x46, 0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e, 0x48, 0x49, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x46, 0x41, 0x53, 0x48,
	0x49, 0x4f, 0x4e, 0x48, 0x49, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x49, 0x4c,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x46, 0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e, 0x48, 0x49,
	0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x10, 0x04, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x46, 0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e, 0x48, 0x49, 0x44, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x46, 0x41,
	0x53, 0x48, 0x49, 0x4f, 0x4e, 0x48, 0x49, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45,
	0x41, 0x50, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x46, 0x41, 0x53, 0x48, 0x49,
	0x4f, 0x4e, 0x48, 0x49, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c,
	0x44, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x46, 0x41, 0x53, 0x48, 0x49, 0x4f, 0x4e, 0x48,
	0x49, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54,
	0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x46, 0x41, 0x53,
	0x48, 0x49, 0x4f, 0x4e, 0x48, 0x49, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x46, 0x41,
	0x53, 0x48, 0x49, 0x4f, 0x4e, 0x48, 0x49, 0x44, 0x45, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x58, 0x10, 0x0a, 0x2a, 0x5e, 0x0a, 0x0e, 0x45, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44,
	0x4f, 0x57, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x4a, 0x4f, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x4d, 0x41,
	0x4e, 0x10, 0x03, 0x2a, 0x96, 0x01, 0x0a, 0x0b, 0x45, 0x54, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x52, 0x45, 0x45, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x52, 0x45,
	0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x52, 0x45, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x52,
	0x45, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x54, 0x52, 0x45, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x45, 0x41, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x52, 0x45, 0x45,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0x7d, 0x0a, 0x0b,
	0x45, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x5a, 0x4f, 0x4e, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x5a, 0x4f, 0x4e, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x5a, 0x4f, 0x4e, 0x45, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x5a, 0x4f, 0x4e, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x59,
	0x42, 0x55, 0x53, 0x59, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x5a, 0x4f, 0x4e, 0x45, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x60, 0x0a, 0x0a, 0x45,
	0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x5a, 0x4f,
	0x4e, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x5a, 0x4f, 0x4e, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x5a, 0x4f, 0x4e, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4e, 0x4f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x5a, 0x4f,
	0x4e, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x85, 0x01,
	0x0a, 0x09, 0x45, 0x4a, 0x75, 0x6d, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45,
	0x4a, 0x55, 0x4d, 0x50, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4a, 0x55, 0x4d, 0x50, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4a, 0x55, 0x4d, 0x50, 0x5a, 0x4f, 0x4e, 0x45,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4a, 0x55, 0x4d, 0x50,
	0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x4a, 0x55, 0x4d, 0x50, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4a, 0x55, 0x4d, 0x50, 0x5a, 0x4f, 0x4e, 0x45, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0x3e, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x74, 0x53, 0x68, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x53, 0x48,
	0x4f, 0x57, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x45, 0x41, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x53, 0x49,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x2a, 0x89, 0x03, 0x0a, 0x0b, 0x45, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x48, 0x50,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x53, 0x50, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x5f, 0x53, 0x4c, 0x49, 0x4d, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59,
	0x5f, 0x43, 0x4e, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x45,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45,
	0x52, 0x59, 0x5f, 0x43, 0x4e, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0x04, 0x12, 0x20,
	0x0a, 0x1c, 0x45, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f,
	0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x05,
	0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x47, 0x49,
	0x43, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4e, 0x54, 0x5f, 0x47,
	0x49, 0x56, 0x45, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x45, 0x54, 0x54, 0x41, 0x4c, 0x4b,
	0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4e, 0x54, 0x5f, 0x4d, 0x41,
	0x47, 0x49, 0x43, 0x5f, 0x32, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x5f, 0x33, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10,
	0x3f, 0x2a, 0x79, 0x0a, 0x0e, 0x45, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52, 0x45, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x43, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x45, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x57,
	0x4f, 0x52, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x10, 0x04, 0x2a, 0x77, 0x0a, 0x0e,
	0x45, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x5f, 0x59, 0x45, 0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x50, 0x52, 0x4f, 0x50, 0x4f,
	0x53, 0x41, 0x4c, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x4f, 0x55, 0x54, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x50,
	0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x10, 0x03, 0x2a, 0xe7, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x45, 0x4e, 0x52, 0x4f, 0x4c,
	0x4c, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x45, 0x4e, 0x52, 0x4f, 0x4c,
	0x4c, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x45, 0x4e, 0x52, 0x4f, 0x4c,
	0x4c, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x4f,
	0x46, 0x41, 0x53, 0x54, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x45, 0x4e, 0x52, 0x4f, 0x4c,
	0x4c, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x2a,
	0xbf, 0x01, 0x0a, 0x0f, 0x45, 0x54, 0x77, 0x69, 0x6e, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x54, 0x57, 0x49, 0x4e, 0x53, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x54, 0x57, 0x49, 0x4e, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x54, 0x57, 0x49, 0x4e, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x54, 0x57,
	0x49, 0x4e, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x47,
	0x52, 0x45, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x54, 0x57, 0x49, 0x4e, 0x53, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x47, 0x52,
	0x45, 0x45, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x54, 0x57, 0x49, 0x4e, 0x53, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10,
	0x05, 0x2a, 0xa0, 0x02, 0x0a, 0x0f, 0x45, 0x53, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x49,
	0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10,
	0x06, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x48, 0x41, 0x4e,
	0x44, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x4e, 0x54, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x5f, 0x48, 0x41,
	0x4e, 0x44, 0x10, 0x08, 0x2a, 0xa5, 0x01, 0x0a, 0x10, 0x45, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x45,
	0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x4f, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x45, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x04, 0x2a, 0x49, 0x0a, 0x13,
	0x45, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x54, 0x79, 0x70, 0x65, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x54, 0x79, 0x70, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x10, 0x02, 0x2a, 0x43, 0x0a, 0x09, 0x45, 0x53, 0x6c, 0x6f, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x53, 0x4c, 0x4f, 0x54,
	0x5f, 0x42, 0x55, 0x59, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x53, 0x4c, 0x4f, 0x54, 0x5f,
	0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x03, 0x2a, 0x4e, 0x0a, 0x0a,
	0x45, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x42,
	0x4f, 0x4f, 0x54, 0x48, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x48, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x48, 0x4f,
	0x50, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x90, 0x01, 0x0a,
	0x0a, 0x45, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x42, 0x4f, 0x4f, 0x54, 0x48, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x48, 0x53, 0x49, 0x47, 0x4e, 0x5f,
	0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x42, 0x4f, 0x4f, 0x54,
	0x48, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x42, 0x4f, 0x4f, 0x54, 0x48, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x55, 0x52, 0x50, 0x4c,
	0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x48, 0x53, 0x49, 0x47,
	0x4e, 0x5f, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x42,
	0x4f, 0x4f, 0x54, 0x48, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x49, 0x4e, 0x4b, 0x10, 0x05, 0x2a,
	0x48, 0x0a, 0x0e, 0x45, 0x44, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x44, 0x52, 0x45, 0x53, 0x53, 0x55, 0x50, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x44, 0x52, 0x45, 0x53, 0x53, 0x55, 0x50, 0x5f,
	0x57, 0x41, 0x49, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x55, 0x50, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x02, 0x2a, 0x26, 0x0a, 0x0c, 0x45, 0x46, 0x75,
	0x6e, 0x63, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x46, 0x55,
	0x4e, 0x43, 0x4d, 0x41, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x59, 0x10,
	0x01, 0x2a, 0x75, 0x0a, 0x0d, 0x45, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47,
	0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x4f, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x03, 0x2a, 0x82, 0x01, 0x0a, 0x0b, 0x45, 0x47, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x47, 0x52, 0x4f,
	0x57, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x45, 0x50, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x50, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x47,
	0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x47, 0x52, 0x4f, 0x57,
	0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x8c, 0x03,
	0x0a, 0x0e, 0x45, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x21, 0x45, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x42, 0x55, 0x54, 0x54,
	0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x42,
	0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4d, 0x4f, 0x4e, 0x49,
	0x54, 0x4f, 0x52, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x31, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f,
	0x45, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x49, 0x43, 0x4b, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x32, 0x10,
	0x02, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x42, 0x55, 0x54,
	0x54, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x42,
	0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x4e, 0x50, 0x43, 0x5f, 0x54, 0x4f, 0x47, 0x10, 0x04, 0x12,
	0x28, 0x0a, 0x24, 0x45, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x42, 0x55, 0x54, 0x54, 0x4f,
	0x4e, 0x5f, 0x4e, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x32, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4d, 0x4f,
	0x4e, 0x49, 0x54, 0x4f, 0x52, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x49, 0x43,
	0x4b, 0x5f, 0x4d, 0x56, 0x50, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x10, 0x65, 0x12, 0x26, 0x0a, 0x22,
	0x45, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x41,
	0x55, 0x54, 0x4f, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x4d, 0x56, 0x50, 0x5f, 0x4d, 0x49,
	0x4e, 0x49, 0x10, 0x66, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52,
	0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x4e, 0x50, 0x43,
	0x10, 0x67, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x42, 0x55,
	0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x4e,
	0x50, 0x43, 0x10, 0x68, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52,
	0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x69, 0x2a, 0x53, 0x0a, 0x0b,
	0x45, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x53, 0x49, 0x47, 0x4e,
	0x49, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10,
	0x02, 0x2a, 0x77, 0x0a, 0x0d, 0x45, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x45, 0x57, 0x45, 0x41, 0x52, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x52, 0x45, 0x57, 0x45, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x41, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x45, 0x57,
	0x45, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x45, 0x57, 0x45, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x4d, 0x0a, 0x10, 0x45, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0xd6, 0x01, 0x0a, 0x14, 0x45, 0x47,
	0x61, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x47, 0x48, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x47, 0x48, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x47, 0x48, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x47, 0x48, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x50, 0x43, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x47, 0x48, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x4e, 0x47,
	0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x47,
	0x48, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x47, 0x48, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x41, 0x47, 0x45, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x47, 0x48, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58,
	0x10, 0x07, 0x2a, 0x7a, 0x0a, 0x0f, 0x45, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x47, 0x4f, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x03, 0x2a, 0x52,
	0x0a, 0x0c, 0x45, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x10, 0x02, 0x2a, 0x79, 0x0a, 0x12, 0x45, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x65, 0x61,
	0x6d, 0x45, 0x78, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x45, 0x58, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54,
	0x45, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x51, 0x0a,
	0x11, 0x45, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x02,
	0x2a, 0x66, 0x0a, 0x0f, 0x45, 0x4e, 0x74, 0x66, 0x50, 0x61, 0x6c, 0x79, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x54, 0x46, 0x50, 0x4c, 0x41, 0x59, 0x41,
	0x43, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x4e, 0x54, 0x46, 0x50, 0x4c, 0x41, 0x59, 0x41, 0x43, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x31, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4e,
	0x54, 0x46, 0x50, 0x4c, 0x41, 0x59, 0x41, 0x43, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x32, 0x10, 0x02, 0x2a, 0x7e, 0x0a, 0x12, 0x45, 0x4e, 0x6f, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x47, 0x4f, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47,
	0x45, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03,
}

var (
	file_SceneUser2_proto_rawDescOnce sync.Once
	file_SceneUser2_proto_rawDescData = file_SceneUser2_proto_rawDesc
)

func file_SceneUser2_proto_rawDescGZIP() []byte {
	file_SceneUser2_proto_rawDescOnce.Do(func() {
		file_SceneUser2_proto_rawDescData = protoimpl.X.CompressGZIP(file_SceneUser2_proto_rawDescData)
	})
	return file_SceneUser2_proto_rawDescData
}

var file_SceneUser2_proto_enumTypes = make([]protoimpl.EnumInfo, 51)
var file_SceneUser2_proto_msgTypes = make([]protoimpl.MessageInfo, 289)
var file_SceneUser2_proto_goTypes = []interface{}{
	(User2Param)(0),                          // 0: Cmd.User2Param
	(EMessageType)(0),                        // 1: Cmd.EMessageType
	(EMessageActOpt)(0),                      // 2: Cmd.EMessageActOpt
	(EUserActionType)(0),                     // 3: Cmd.EUserActionType
	(EReliveType)(0),                         // 4: Cmd.EReliveType
	(EEffectOpt)(0),                          // 5: Cmd.EEffectOpt
	(EEffectType)(0),                         // 6: Cmd.EEffectType
	(EEffectSource)(0),                       // 7: Cmd.EEffectSource
	(EDressType)(0),                          // 8: Cmd.EDressType
	(PointType)(0),                           // 9: Cmd.PointType
	(EDbgMsgType)(0),                         // 10: Cmd.EDbgMsgType
	(GameTimeOpt)(0),                         // 11: Cmd.GameTimeOpt
	(CD_TYPE)(0),                             // 12: Cmd.CD_TYPE
	(EGoToGearType)(0),                       // 13: Cmd.EGoToGearType
	(EFollowType)(0),                         // 14: Cmd.EFollowType
	(EAlbumType)(0),                          // 15: Cmd.EAlbumType
	(EBattleStatus)(0),                       // 16: Cmd.EBattleStatus
	(EQueryType)(0),                          // 17: Cmd.EQueryType
	(EFashionHideType)(0),                    // 18: Cmd.EFashionHideType
	(ECountDownType)(0),                      // 19: Cmd.ECountDownType
	(ETreeStatus)(0),                         // 20: Cmd.ETreeStatus
	(EZoneStatus)(0),                         // 21: Cmd.EZoneStatus
	(EZoneState)(0),                          // 22: Cmd.EZoneState
	(EJumpZone)(0),                           // 23: Cmd.EJumpZone
	(SeatShowType)(0),                        // 24: Cmd.SeatShowType
	(EOptionType)(0),                         // 25: Cmd.EOptionType
	(ERenameErrCode)(0),                      // 26: Cmd.ERenameErrCode
	(EProposalReply)(0),                      // 27: Cmd.EProposalReply
	(EnrollResult)(0),                        // 28: Cmd.EnrollResult
	(ETwinsOperation)(0),                     // 29: Cmd.ETwinsOperation
	(EServantService)(0),                     // 30: Cmd.EServantService
	(ERecommendStatus)(0),                    // 31: Cmd.ERecommendStatus
	(EProfessionDataType)(0),                 // 32: Cmd.EProfessionDataType
	(ESlotType)(0),                           // 33: Cmd.ESlotType
	(EBoothOper)(0),                          // 34: Cmd.EBoothOper
	(EBoothSign)(0),                          // 35: Cmd.EBoothSign
	(EDressUpStatus)(0),                      // 36: Cmd.EDressUpStatus
	(EFuncMapType)(0),                        // 37: Cmd.EFuncMapType
	(EGrowthStatus)(0),                       // 38: Cmd.EGrowthStatus
	(EGrowthType)(0),                         // 39: Cmd.EGrowthType
	(EMonitorButton)(0),                      // 40: Cmd.EMonitorButton
	(ESignInType)(0),                         // 41: Cmd.ESignInType
	(ERewardStatus)(0),                       // 42: Cmd.ERewardStatus
	(EReservationType)(0),                    // 43: Cmd.EReservationType
	(EGameHealthEventType)(0),                // 44: Cmd.EGameHealthEventType
	(EProgressStatus)(0),                     // 45: Cmd.EProgressStatus
	(EBuildStatus)(0),                        // 46: Cmd.EBuildStatus
	(ERewardTeamExpType)(0),                  // 47: Cmd.ERewardTeamExpType
	(EMultiMountOption)(0),                   // 48: Cmd.EMultiMountOption
	(ENtfPalyVersion)(0),                     // 49: Cmd.ENtfPalyVersion
	(ENoviceTargetState)(0),                  // 50: Cmd.ENoviceTargetState
	(*GoCity)(nil),                           // 51: Cmd.GoCity
	(*MsgLangParam)(nil),                     // 52: Cmd.MsgLangParam
	(*MsgParam)(nil),                         // 53: Cmd.MsgParam
	(*SysMsg)(nil),                           // 54: Cmd.SysMsg
	(*NpcDataSync)(nil),                      // 55: Cmd.NpcDataSync
	(*UserNineSyncCmd)(nil),                  // 56: Cmd.UserNineSyncCmd
	(*UserActionNtf)(nil),                    // 57: Cmd.UserActionNtf
	(*BufferData)(nil),                       // 58: Cmd.BufferData
	(*UserBuffNineSyncCmd)(nil),              // 59: Cmd.UserBuffNineSyncCmd
	(*ExitPosUserCmd)(nil),                   // 60: Cmd.ExitPosUserCmd
	(*Relive)(nil),                           // 61: Cmd.Relive
	(*VarUpdate)(nil),                        // 62: Cmd.VarUpdate
	(*TalkInfo)(nil),                         // 63: Cmd.TalkInfo
	(*ServerTime)(nil),                       // 64: Cmd.ServerTime
	(*EffectUserCmd)(nil),                    // 65: Cmd.EffectUserCmd
	(*MenuList)(nil),                         // 66: Cmd.MenuList
	(*NewMenu)(nil),                          // 67: Cmd.NewMenu
	(*EvaluationReward)(nil),                 // 68: Cmd.EvaluationReward
	(*TeamInfoNine)(nil),                     // 69: Cmd.TeamInfoNine
	(*UsePortrait)(nil),                      // 70: Cmd.UsePortrait
	(*UseFrame)(nil),                         // 71: Cmd.UseFrame
	(*NewPortraitFrame)(nil),                 // 72: Cmd.NewPortraitFrame
	(*QueryPortraitListUserCmd)(nil),         // 73: Cmd.QueryPortraitListUserCmd
	(*UseDressing)(nil),                      // 74: Cmd.UseDressing
	(*NewDressing)(nil),                      // 75: Cmd.NewDressing
	(*DressingListUserCmd)(nil),              // 76: Cmd.DressingListUserCmd
	(*AddAttrPoint)(nil),                     // 77: Cmd.AddAttrPoint
	(*ShopGotItem)(nil),                      // 78: Cmd.ShopGotItem
	(*QueryShopGotItem)(nil),                 // 79: Cmd.QueryShopGotItem
	(*UpdateShopGotItem)(nil),                // 80: Cmd.UpdateShopGotItem
	(*OpenUI)(nil),                           // 81: Cmd.OpenUI
	(*DbgSysMsg)(nil),                        // 82: Cmd.DbgSysMsg
	(*FollowTransferCmd)(nil),                // 83: Cmd.FollowTransferCmd
	(*CallNpcFuncCmd)(nil),                   // 84: Cmd.CallNpcFuncCmd
	(*ModelShow)(nil),                        // 85: Cmd.ModelShow
	(*SoundEffectCmd)(nil),                   // 86: Cmd.SoundEffectCmd
	(*PresetMsg)(nil),                        // 87: Cmd.PresetMsg
	(*PresetMsgCmd)(nil),                     // 88: Cmd.PresetMsgCmd
	(*ChangeBgmCmd)(nil),                     // 89: Cmd.ChangeBgmCmd
	(*FighterInfo)(nil),                      // 90: Cmd.FighterInfo
	(*QueryFighterInfo)(nil),                 // 91: Cmd.QueryFighterInfo
	(*GameTimeCmd)(nil),                      // 92: Cmd.GameTimeCmd
	(*CDTimeItem)(nil),                       // 93: Cmd.CDTimeItem
	(*CDTimeUserCmd)(nil),                    // 94: Cmd.CDTimeUserCmd
	(*StateChange)(nil),                      // 95: Cmd.StateChange
	(*Photo)(nil),                            // 96: Cmd.Photo
	(*ShakeScreen)(nil),                      // 97: Cmd.ShakeScreen
	(*ShortcutItem)(nil),                     // 98: Cmd.ShortcutItem
	(*QueryShortcut)(nil),                    // 99: Cmd.QueryShortcut
	(*PutShortcut)(nil),                      // 100: Cmd.PutShortcut
	(*TempPutShortCut)(nil),                  // 101: Cmd.TempPutShortCut
	(*NpcChangeAngle)(nil),                   // 102: Cmd.NpcChangeAngle
	(*CameraFocus)(nil),                      // 103: Cmd.CameraFocus
	(*GoToListUserCmd)(nil),                  // 104: Cmd.GoToListUserCmd
	(*GoToGearUserCmd)(nil),                  // 105: Cmd.GoToGearUserCmd
	(*NewTransMapCmd)(nil),                   // 106: Cmd.NewTransMapCmd
	(*DeathTransferListCmd)(nil),             // 107: Cmd.DeathTransferListCmd
	(*NewDeathTransferCmd)(nil),              // 108: Cmd.NewDeathTransferCmd
	(*UseDeathTransferCmd)(nil),              // 109: Cmd.UseDeathTransferCmd
	(*FollowerUser)(nil),                     // 110: Cmd.FollowerUser
	(*BeFollowUserCmd)(nil),                  // 111: Cmd.BeFollowUserCmd
	(*LaboratoryUserCmd)(nil),                // 112: Cmd.LaboratoryUserCmd
	(*GotoLaboratoryUserCmd)(nil),            // 113: Cmd.GotoLaboratoryUserCmd
	(*ExchangeProfession)(nil),               // 114: Cmd.ExchangeProfession
	(*Scenery)(nil),                          // 115: Cmd.Scenery
	(*SceneryUserCmd)(nil),                   // 116: Cmd.SceneryUserCmd
	(*GoMapQuestUserCmd)(nil),                // 117: Cmd.GoMapQuestUserCmd
	(*GoMapFollowUserCmd)(nil),               // 118: Cmd.GoMapFollowUserCmd
	(*UserAutoHitCmd)(nil),                   // 119: Cmd.UserAutoHitCmd
	(*UploadSceneryPhotoUserCmd)(nil),        // 120: Cmd.UploadSceneryPhotoUserCmd
	(*UpyunUrl)(nil),                         // 121: Cmd.UpyunUrl
	(*DownloadSceneryPhotoUserCmd)(nil),      // 122: Cmd.DownloadSceneryPhotoUserCmd
	(*QueryMapArea)(nil),                     // 123: Cmd.QueryMapArea
	(*NewMapAreaNtf)(nil),                    // 124: Cmd.NewMapAreaNtf
	(*BuffForeverCmd)(nil),                   // 125: Cmd.BuffForeverCmd
	(*InviteJoinHandsUserCmd)(nil),           // 126: Cmd.InviteJoinHandsUserCmd
	(*BreakUpHandsUserCmd)(nil),              // 127: Cmd.BreakUpHandsUserCmd
	(*HandStatusUserCmd)(nil),                // 128: Cmd.HandStatusUserCmd
	(*QueryShow)(nil),                        // 129: Cmd.QueryShow
	(*MusicItem)(nil),                        // 130: Cmd.MusicItem
	(*QueryMusicList)(nil),                   // 131: Cmd.QueryMusicList
	(*DemandMusic)(nil),                      // 132: Cmd.DemandMusic
	(*CloseMusicFrame)(nil),                  // 133: Cmd.CloseMusicFrame
	(*UploadOkSceneryUserCmd)(nil),           // 134: Cmd.UploadOkSceneryUserCmd
	(*JoinHandsUserCmd)(nil),                 // 135: Cmd.JoinHandsUserCmd
	(*TraceItem)(nil),                        // 136: Cmd.TraceItem
	(*QueryTraceList)(nil),                   // 137: Cmd.QueryTraceList
	(*UpdateTraceList)(nil),                  // 138: Cmd.UpdateTraceList
	(*SetDirection)(nil),                     // 139: Cmd.SetDirection
	(*BattleTimelenUserCmd)(nil),             // 140: Cmd.BattleTimelenUserCmd
	(*SetOptionUserCmd)(nil),                 // 141: Cmd.SetOptionUserCmd
	(*QueryUserInfoUserCmd)(nil),             // 142: Cmd.QueryUserInfoUserCmd
	(*CountDownTickUserCmd)(nil),             // 143: Cmd.CountDownTickUserCmd
	(*ItemMusicNtfUserCmd)(nil),              // 144: Cmd.ItemMusicNtfUserCmd
	(*ShakeTreeUserCmd)(nil),                 // 145: Cmd.ShakeTreeUserCmd
	(*Tree)(nil),                             // 146: Cmd.Tree
	(*TreeListUserCmd)(nil),                  // 147: Cmd.TreeListUserCmd
	(*ActivityNtfUserCmd)(nil),               // 148: Cmd.ActivityNtfUserCmd
	(*ZoneInfo)(nil),                         // 149: Cmd.ZoneInfo
	(*RecentZoneInfo)(nil),                   // 150: Cmd.RecentZoneInfo
	(*QueryZoneStatusUserCmd)(nil),           // 151: Cmd.QueryZoneStatusUserCmd
	(*JumpZoneUserCmd)(nil),                  // 152: Cmd.JumpZoneUserCmd
	(*ItemImageUserNtfUserCmd)(nil),          // 153: Cmd.ItemImageUserNtfUserCmd
	(*InviteFollowUserCmd)(nil),              // 154: Cmd.InviteFollowUserCmd
	(*ChangeNameUserCmd)(nil),                // 155: Cmd.ChangeNameUserCmd
	(*ChargePlayUserCmd)(nil),                // 156: Cmd.ChargePlayUserCmd
	(*RequireNpcFuncUserCmd)(nil),            // 157: Cmd.RequireNpcFuncUserCmd
	(*CheckSeatUserCmd)(nil),                 // 158: Cmd.CheckSeatUserCmd
	(*NtfSeatUserCmd)(nil),                   // 159: Cmd.NtfSeatUserCmd
	(*YoyoSeatUserCmd)(nil),                  // 160: Cmd.YoyoSeatUserCmd
	(*ShowSeatUserCmd)(nil),                  // 161: Cmd.ShowSeatUserCmd
	(*SetNormalSkillOptionUserCmd)(nil),      // 162: Cmd.SetNormalSkillOptionUserCmd
	(*NewSetOptionUserCmd)(nil),              // 163: Cmd.NewSetOptionUserCmd
	(*UnsolvedSceneryNtfUserCmd)(nil),        // 164: Cmd.UnsolvedSceneryNtfUserCmd
	(*VisibleNpc)(nil),                       // 165: Cmd.VisibleNpc
	(*NtfVisibleNpcUserCmd)(nil),             // 166: Cmd.NtfVisibleNpcUserCmd
	(*TransformPreDataCmd)(nil),              // 167: Cmd.TransformPreDataCmd
	(*UserRenameCmd)(nil),                    // 168: Cmd.UserRenameCmd
	(*BuyZenyCmd)(nil),                       // 169: Cmd.BuyZenyCmd
	(*CallTeamerUserCmd)(nil),                // 170: Cmd.CallTeamerUserCmd
	(*CallTeamerReplyUserCmd)(nil),           // 171: Cmd.CallTeamerReplyUserCmd
	(*SpecialEffectCmd)(nil),                 // 172: Cmd.SpecialEffectCmd
	(*MarriageProposalCmd)(nil),              // 173: Cmd.MarriageProposalCmd
	(*MarriageProposalReplyCmd)(nil),         // 174: Cmd.MarriageProposalReplyCmd
	(*UploadWeddingPhotoUserCmd)(nil),        // 175: Cmd.UploadWeddingPhotoUserCmd
	(*MarriageProposalSuccessCmd)(nil),       // 176: Cmd.MarriageProposalSuccessCmd
	(*InviteeWeddingStartNtfUserCmd)(nil),    // 177: Cmd.InviteeWeddingStartNtfUserCmd
	(*KFCShareUserCmd)(nil),                  // 178: Cmd.KFCShareUserCmd
	(*KFCEnrollUserCmd)(nil),                 // 179: Cmd.KFCEnrollUserCmd
	(*KFCEnrollCodeUserCmd)(nil),             // 180: Cmd.KFCEnrollCodeUserCmd
	(*KFCEnrollReplyUserCmd)(nil),            // 181: Cmd.KFCEnrollReplyUserCmd
	(*KFCEnrollQueryUserCmd)(nil),            // 182: Cmd.KFCEnrollQueryUserCmd
	(*KFCHasEnrolledUserCmd)(nil),            // 183: Cmd.KFCHasEnrolledUserCmd
	(*CheckRelationUserCmd)(nil),             // 184: Cmd.CheckRelationUserCmd
	(*TwinsActionUserCmd)(nil),               // 185: Cmd.TwinsActionUserCmd
	(*ShowServantUserCmd)(nil),               // 186: Cmd.ShowServantUserCmd
	(*ReplaceServantUserCmd)(nil),            // 187: Cmd.ReplaceServantUserCmd
	(*HireServantUserCmd)(nil),               // 188: Cmd.HireServantUserCmd
	(*ServantService)(nil),                   // 189: Cmd.ServantService
	(*RecommendItemInfo)(nil),                // 190: Cmd.RecommendItemInfo
	(*RecommendServantUserCmd)(nil),          // 191: Cmd.RecommendServantUserCmd
	(*ReceiveServantUserCmd)(nil),            // 192: Cmd.ReceiveServantUserCmd
	(*FavorabilityStatus)(nil),               // 193: Cmd.FavorabilityStatus
	(*ServantRewardStatusUserCmd)(nil),       // 194: Cmd.ServantRewardStatusUserCmd
	(*ProfessionInfo)(nil),                   // 195: Cmd.ProfessionInfo
	(*RaceData)(nil),                         // 196: Cmd.RaceData
	(*ProfessionQueryUserCmd)(nil),           // 197: Cmd.ProfessionQueryUserCmd
	(*ProfessionBuyUserCmd)(nil),             // 198: Cmd.ProfessionBuyUserCmd
	(*ProfessionChangeUserCmd)(nil),          // 199: Cmd.ProfessionChangeUserCmd
	(*AstrolabeProfessionData)(nil),          // 200: Cmd.AstrolabeProfessionData
	(*AttrProfessionData)(nil),               // 201: Cmd.AttrProfessionData
	(*EquipInfo)(nil),                        // 202: Cmd.EquipInfo
	(*EquipPackData)(nil),                    // 203: Cmd.EquipPackData
	(*SkillValidPosData)(nil),                // 204: Cmd.SkillValidPosData
	(*SkillProfessionData)(nil),              // 205: Cmd.SkillProfessionData
	(*ProfessionUserInfo)(nil),               // 206: Cmd.ProfessionUserInfo
	(*SlotInfo)(nil),                         // 207: Cmd.SlotInfo
	(*UserAstrolMaterialData)(nil),           // 208: Cmd.UserAstrolMaterialData
	(*UpdateRecordInfoUserCmd)(nil),          // 209: Cmd.UpdateRecordInfoUserCmd
	(*SaveRecordUserCmd)(nil),                // 210: Cmd.SaveRecordUserCmd
	(*LoadRecordUserCmd)(nil),                // 211: Cmd.LoadRecordUserCmd
	(*ChangeRecordNameUserCmd)(nil),          // 212: Cmd.ChangeRecordNameUserCmd
	(*BuyRecordSlotUserCmd)(nil),             // 213: Cmd.BuyRecordSlotUserCmd
	(*DeleteRecordUserCmd)(nil),              // 214: Cmd.DeleteRecordUserCmd
	(*UpdateBranchInfoUserCmd)(nil),          // 215: Cmd.UpdateBranchInfoUserCmd
	(*EnterCapraActivityCmd)(nil),            // 216: Cmd.EnterCapraActivityCmd
	(*InviteWithMeUserCmd)(nil),              // 217: Cmd.InviteWithMeUserCmd
	(*QueryAltmanKillUserCmd)(nil),           // 218: Cmd.QueryAltmanKillUserCmd
	(*BoothInfo)(nil),                        // 219: Cmd.BoothInfo
	(*BoothReqUserCmd)(nil),                  // 220: Cmd.BoothReqUserCmd
	(*BoothInfoSyncUserCmd)(nil),             // 221: Cmd.BoothInfoSyncUserCmd
	(*DressUpModelUserCmd)(nil),              // 222: Cmd.DressUpModelUserCmd
	(*DressUpHeadUserCmd)(nil),               // 223: Cmd.DressUpHeadUserCmd
	(*StageInfo)(nil),                        // 224: Cmd.StageInfo
	(*QueryStageUserCmd)(nil),                // 225: Cmd.QueryStageUserCmd
	(*DressUpLineUpUserCmd)(nil),             // 226: Cmd.DressUpLineUpUserCmd
	(*StageUserDataType)(nil),                // 227: Cmd.StageUserDataType
	(*DressUpStageUserCmd)(nil),              // 228: Cmd.DressUpStageUserCmd
	(*GoToFunctionMapUserCmd)(nil),           // 229: Cmd.GoToFunctionMapUserCmd
	(*GrowthCurInfo)(nil),                    // 230: Cmd.GrowthCurInfo
	(*GrowthItemInfo)(nil),                   // 231: Cmd.GrowthItemInfo
	(*GrowthValueInfo)(nil),                  // 232: Cmd.GrowthValueInfo
	(*GrowthGroupInfo)(nil),                  // 233: Cmd.GrowthGroupInfo
	(*GrowthServantUserCmd)(nil),             // 234: Cmd.GrowthServantUserCmd
	(*ReceiveGrowthServantUserCmd)(nil),      // 235: Cmd.ReceiveGrowthServantUserCmd
	(*GrowthOpenServantUserCmd)(nil),         // 236: Cmd.GrowthOpenServantUserCmd
	(*CheatTagUserCmd)(nil),                  // 237: Cmd.CheatTagUserCmd
	(*ButtonThreshold)(nil),                  // 238: Cmd.ButtonThreshold
	(*CheatTagStatUserCmd)(nil),              // 239: Cmd.CheatTagStatUserCmd
	(*ClickPosList)(nil),                     // 240: Cmd.ClickPosList
	(*ClickButtonPos)(nil),                   // 241: Cmd.ClickButtonPos
	(*ServerInfoNtf)(nil),                    // 242: Cmd.ServerInfoNtf
	(*ReadyToMapUserCmd)(nil),                // 243: Cmd.ReadyToMapUserCmd
	(*SignInUserCmd)(nil),                    // 244: Cmd.SignInUserCmd
	(*SignInNtfUserCmd)(nil),                 // 245: Cmd.SignInNtfUserCmd
	(*BeatPoriUserCmd)(nil),                  // 246: Cmd.BeatPoriUserCmd
	(*UnlockFrameUserCmd)(nil),               // 247: Cmd.UnlockFrameUserCmd
	(*RewardItem)(nil),                       // 248: Cmd.RewardItem
	(*AltmanRewardUserCmd)(nil),              // 249: Cmd.AltmanRewardUserCmd
	(*ServantReservationItem)(nil),           // 250: Cmd.ServantReservationItem
	(*ServantReqReservationUserCmd)(nil),     // 251: Cmd.ServantReqReservationUserCmd
	(*ServantReservationUserCmd)(nil),        // 252: Cmd.ServantReservationUserCmd
	(*ServantEquipItem)(nil),                 // 253: Cmd.ServantEquipItem
	(*ServantRecEquipUserCmd)(nil),           // 254: Cmd.ServantRecEquipUserCmd
	(*PrestigeData)(nil),                     // 255: Cmd.PrestigeData
	(*PrestigeNtfUserCmd)(nil),               // 256: Cmd.PrestigeNtfUserCmd
	(*PrestigeGiveUserCmd)(nil),              // 257: Cmd.PrestigeGiveUserCmd
	(*UpdateGameHealthLevelUserCmd)(nil),     // 258: Cmd.UpdateGameHealthLevelUserCmd
	(*GameHealthEvent)(nil),                  // 259: Cmd.GameHealthEvent
	(*GameHealthEventStatUserCmd)(nil),       // 260: Cmd.GameHealthEventStatUserCmd
	(*Fishway2KillBossInformUserCmd)(nil),    // 261: Cmd.Fishway2KillBossInformUserCmd
	(*ActPointUserCmd)(nil),                  // 262: Cmd.ActPointUserCmd
	(*HighRefineAttrUserCmd)(nil),            // 263: Cmd.HighRefineAttrUserCmd
	(*HeadwearNpcItem)(nil),                  // 264: Cmd.HeadwearNpcItem
	(*HeadwearNpcUserCmd)(nil),               // 265: Cmd.HeadwearNpcUserCmd
	(*HeadwearRoundUserCmd)(nil),             // 266: Cmd.HeadwearRoundUserCmd
	(*HeadwearTowerUserCmd)(nil),             // 267: Cmd.HeadwearTowerUserCmd
	(*HeadwearEndUserCmd)(nil),               // 268: Cmd.HeadwearEndUserCmd
	(*HeadwearRangeUserCmd)(nil),             // 269: Cmd.HeadwearRangeUserCmd
	(*ServantStatisticsItem)(nil),            // 270: Cmd.ServantStatisticsItem
	(*ServantStatisticsUserCmd)(nil),         // 271: Cmd.ServantStatisticsUserCmd
	(*ServantCalcShareData)(nil),             // 272: Cmd.ServantCalcShareData
	(*ServantMail)(nil),                      // 273: Cmd.ServantMail
	(*ServantStatisticsMailUserCmd)(nil),     // 274: Cmd.ServantStatisticsMailUserCmd
	(*HeadwearOpenUserCmd)(nil),              // 275: Cmd.HeadwearOpenUserCmd
	(*FastTransClassUserCmd)(nil),            // 276: Cmd.FastTransClassUserCmd
	(*FastTransGemQueryUserCmd)(nil),         // 277: Cmd.FastTransGemQueryUserCmd
	(*FastTransGemGetUserCmd)(nil),           // 278: Cmd.FastTransGemGetUserCmd
	(*FourthSkillCostGetUserCmd)(nil),        // 279: Cmd.FourthSkillCostGetUserCmd
	(*BuildWeather)(nil),                     // 280: Cmd.BuildWeather
	(*BuildBlock)(nil),                       // 281: Cmd.BuildBlock
	(*BuildTimer)(nil),                       // 282: Cmd.BuildTimer
	(*BuildNpcData)(nil),                     // 283: Cmd.BuildNpcData
	(*BuildDataQueryUserCmd)(nil),            // 284: Cmd.BuildDataQueryUserCmd
	(*BuildContributeUserCmd)(nil),           // 285: Cmd.BuildContributeUserCmd
	(*BuildOperateUserCmd)(nil),              // 286: Cmd.BuildOperateUserCmd
	(*NightmareAttrQueryUserCmd)(nil),        // 287: Cmd.NightmareAttrQueryUserCmd
	(*NightmareAttrGetUserCmd)(nil),          // 288: Cmd.NightmareAttrGetUserCmd
	(*MapAnimeData)(nil),                     // 289: Cmd.MapAnimeData
	(*MapAnimeUserCmd)(nil),                  // 290: Cmd.MapAnimeUserCmd
	(*ShootNpcUserCmd)(nil),                  // 291: Cmd.ShootNpcUserCmd
	(*PaySignInfo)(nil),                      // 292: Cmd.PaySignInfo
	(*PaySignNtfUserCmd)(nil),                // 293: Cmd.PaySignNtfUserCmd
	(*PaySignBuyUserCmd)(nil),                // 294: Cmd.PaySignBuyUserCmd
	(*PaySignRewardUserCmd)(nil),             // 295: Cmd.PaySignRewardUserCmd
	(*ExtractionData)(nil),                   // 296: Cmd.ExtractionData
	(*ExtractionQueryUserCmd)(nil),           // 297: Cmd.ExtractionQueryUserCmd
	(*ExtractionOperateUserCmd)(nil),         // 298: Cmd.ExtractionOperateUserCmd
	(*ExtractionActiveUserCmd)(nil),          // 299: Cmd.ExtractionActiveUserCmd
	(*ExtractionRemoveUserCmd)(nil),          // 300: Cmd.ExtractionRemoveUserCmd
	(*ExtractionGridBuyUserCmd)(nil),         // 301: Cmd.ExtractionGridBuyUserCmd
	(*ExtractionRefreshUserCmd)(nil),         // 302: Cmd.ExtractionRefreshUserCmd
	(*TeamExpRewardTypeCmd)(nil),             // 303: Cmd.TeamExpRewardTypeCmd
	(*SetMyselfOptionCmd)(nil),               // 304: Cmd.SetMyselfOptionCmd
	(*UseSkillEffectItemUserCmd)(nil),        // 305: Cmd.UseSkillEffectItemUserCmd
	(*RideMultiMountUserCmd)(nil),            // 306: Cmd.RideMultiMountUserCmd
	(*KickOffPassengerUserCmd)(nil),          // 307: Cmd.KickOffPassengerUserCmd
	(*SetMultiMountOptUserCmd)(nil),          // 308: Cmd.SetMultiMountOptUserCmd
	(*MultiMountChangePosUserCmd)(nil),       // 309: Cmd.MultiMountChangePosUserCmd
	(*GrouponBuyRecord)(nil),                 // 310: Cmd.GrouponBuyRecord
	(*GrouponInfo)(nil),                      // 311: Cmd.GrouponInfo
	(*GrouponQueryUserCmd)(nil),              // 312: Cmd.GrouponQueryUserCmd
	(*GrouponBuyUserCmd)(nil),                // 313: Cmd.GrouponBuyUserCmd
	(*GrouponRewardUserCmd)(nil),             // 314: Cmd.GrouponRewardUserCmd
	(*NtfPlayActUserCmd)(nil),                // 315: Cmd.NtfPlayActUserCmd
	(*NoviceTargetData)(nil),                 // 316: Cmd.NoviceTargetData
	(*NoviceTargetUpdateUserCmd)(nil),        // 317: Cmd.NoviceTargetUpdateUserCmd
	(*NoviceTargetRewardUserCmd)(nil),        // 318: Cmd.NoviceTargetRewardUserCmd
	(*SetBoKiStateUserCmd)(nil),              // 319: Cmd.SetBoKiStateUserCmd
	(*CloseDialogMaskUserCmd)(nil),           // 320: Cmd.CloseDialogMaskUserCmd
	(*CloseDialogCameraUserCmd)(nil),         // 321: Cmd.CloseDialogCameraUserCmd
	(*HideUIUserCmd)(nil),                    // 322: Cmd.HideUIUserCmd
	(*QueryMapMonsterRefreshInfo)(nil),       // 323: Cmd.QueryMapMonsterRefreshInfo
	(*DirectionData)(nil),                    // 324: Cmd.DirectionData
	(*SetCameraUserCmd)(nil),                 // 325: Cmd.SetCameraUserCmd
	(*QueryProfessionDataDetailUserCmd)(nil), // 326: Cmd.QueryProfessionDataDetailUserCmd
	(*ClearProfessionDataDetailUserCmd)(nil), // 327: Cmd.ClearProfessionDataDetailUserCmd
	(*ChainExchangeUserCmd)(nil),             // 328: Cmd.ChainExchangeUserCmd
	(*ChainOptUserCmd)(nil),                  // 329: Cmd.ChainOptUserCmd
	(*ActivityDonateData)(nil),               // 330: Cmd.ActivityDonateData
	(*ActivityDonateQueryUserCmd)(nil),       // 331: Cmd.ActivityDonateQueryUserCmd
	(*ActivityDonateRewardUserCmd)(nil),      // 332: Cmd.ActivityDonateRewardUserCmd
	(*ChangeHairUserCmd)(nil),                // 333: Cmd.ChangeHairUserCmd
	(*ChangeEyeUserCmd)(nil),                 // 334: Cmd.ChangeEyeUserCmd
	(*HappyValueUserCmd)(nil),                // 335: Cmd.HappyValueUserCmd
	(*SendTargetPosUserCmd)(nil),             // 336: Cmd.SendTargetPosUserCmd
	(*CookGameFinishUserCmd)(nil),            // 337: Cmd.CookGameFinishUserCmd
	(*RaceGameStartUserCmd)(nil),             // 338: Cmd.RaceGameStartUserCmd
	(*RaceGameFinishUserCmd)(nil),            // 339: Cmd.RaceGameFinishUserCmd
	(Command)(0),                             // 340: Cmd.Command
	(*UserAttr)(nil),                         // 341: Cmd.UserAttr
	(*UserData)(nil),                         // 342: Cmd.UserData
	(*ScenePos)(nil),                         // 343: Cmd.ScenePos
	(*Var)(nil),                              // 344: Cmd.Var
	(*AccVar)(nil),                           // 345: Cmd.AccVar
	(EBgmType)(0),                            // 346: Cmd.EBgmType
	(ECreatureStatus)(0),                     // 347: Cmd.ECreatureStatus
	(ESocialRelation)(0),                     // 348: Cmd.ESocialRelation
	(ECharRace)(0),                           // 349: Cmd.ECharRace
	(*SkillData)(nil),                        // 350: Cmd.SkillData
	(*BeingSkillData)(nil),                   // 351: Cmd.BeingSkillData
	(*BeingInfo)(nil),                        // 352: Cmd.BeingInfo
	(*SkillValidPos)(nil),                    // 353: Cmd.SkillValidPos
	(*ItemData)(nil),                         // 354: Cmd.ItemData
	(*MultiSkillOption)(nil),                 // 355: Cmd.MultiSkillOption
	(*AstrolabeCostData)(nil),                // 356: Cmd.AstrolabeCostData
	(EUserDataType)(0),                       // 357: Cmd.EUserDataType
	(*RegionServerInfo)(nil),                 // 358: Cmd.RegionServerInfo
	(*RareEliteData)(nil),                    // 359: Cmd.RareEliteData
	(*Pos)(nil),                              // 360: Cmd.Pos
	(*ItemInfo)(nil),                         // 361: Cmd.ItemInfo
}
var file_SceneUser2_proto_depIdxs = []int32{
	340, // 0: Cmd.GoCity.cmd:type_name -> Cmd.Command
	0,   // 1: Cmd.GoCity.param:type_name -> Cmd.User2Param
	52,  // 2: Cmd.MsgParam.langparams:type_name -> Cmd.MsgLangParam
	340, // 3: Cmd.SysMsg.cmd:type_name -> Cmd.Command
	0,   // 4: Cmd.SysMsg.param:type_name -> Cmd.User2Param
	1,   // 5: Cmd.SysMsg.type:type_name -> Cmd.EMessageType
	53,  // 6: Cmd.SysMsg.params:type_name -> Cmd.MsgParam
	2,   // 7: Cmd.SysMsg.act:type_name -> Cmd.EMessageActOpt
	340, // 8: Cmd.NpcDataSync.cmd:type_name -> Cmd.Command
	0,   // 9: Cmd.NpcDataSync.param:type_name -> Cmd.User2Param
	341, // 10: Cmd.NpcDataSync.attrs:type_name -> Cmd.UserAttr
	342, // 11: Cmd.NpcDataSync.datas:type_name -> Cmd.UserData
	340, // 12: Cmd.UserNineSyncCmd.cmd:type_name -> Cmd.Command
	0,   // 13: Cmd.UserNineSyncCmd.param:type_name -> Cmd.User2Param
	342, // 14: Cmd.UserNineSyncCmd.datas:type_name -> Cmd.UserData
	341, // 15: Cmd.UserNineSyncCmd.attrs:type_name -> Cmd.UserAttr
	340, // 16: Cmd.UserActionNtf.cmd:type_name -> Cmd.Command
	0,   // 17: Cmd.UserActionNtf.param:type_name -> Cmd.User2Param
	3,   // 18: Cmd.UserActionNtf.type:type_name -> Cmd.EUserActionType
	340, // 19: Cmd.UserBuffNineSyncCmd.cmd:type_name -> Cmd.Command
	0,   // 20: Cmd.UserBuffNineSyncCmd.param:type_name -> Cmd.User2Param
	58,  // 21: Cmd.UserBuffNineSyncCmd.updates:type_name -> Cmd.BufferData
	340, // 22: Cmd.ExitPosUserCmd.cmd:type_name -> Cmd.Command
	0,   // 23: Cmd.ExitPosUserCmd.param:type_name -> Cmd.User2Param
	343, // 24: Cmd.ExitPosUserCmd.pos:type_name -> Cmd.ScenePos
	340, // 25: Cmd.Relive.cmd:type_name -> Cmd.Command
	0,   // 26: Cmd.Relive.param:type_name -> Cmd.User2Param
	4,   // 27: Cmd.Relive.type:type_name -> Cmd.EReliveType
	340, // 28: Cmd.VarUpdate.cmd:type_name -> Cmd.Command
	0,   // 29: Cmd.VarUpdate.param:type_name -> Cmd.User2Param
	344, // 30: Cmd.VarUpdate.vars:type_name -> Cmd.Var
	345, // 31: Cmd.VarUpdate.accvars:type_name -> Cmd.AccVar
	340, // 32: Cmd.TalkInfo.cmd:type_name -> Cmd.Command
	0,   // 33: Cmd.TalkInfo.param:type_name -> Cmd.User2Param
	53,  // 34: Cmd.TalkInfo.params:type_name -> Cmd.MsgParam
	340, // 35: Cmd.ServerTime.cmd:type_name -> Cmd.Command
	0,   // 36: Cmd.ServerTime.param:type_name -> Cmd.User2Param
	340, // 37: Cmd.EffectUserCmd.cmd:type_name -> Cmd.Command
	0,   // 38: Cmd.EffectUserCmd.param:type_name -> Cmd.User2Param
	6,   // 39: Cmd.EffectUserCmd.effecttype:type_name -> Cmd.EEffectType
	343, // 40: Cmd.EffectUserCmd.pos:type_name -> Cmd.ScenePos
	5,   // 41: Cmd.EffectUserCmd.opt:type_name -> Cmd.EEffectOpt
	343, // 42: Cmd.EffectUserCmd.dir3d:type_name -> Cmd.ScenePos
	7,   // 43: Cmd.EffectUserCmd.source:type_name -> Cmd.EEffectSource
	340, // 44: Cmd.MenuList.cmd:type_name -> Cmd.Command
	0,   // 45: Cmd.MenuList.param:type_name -> Cmd.User2Param
	340, // 46: Cmd.NewMenu.cmd:type_name -> Cmd.Command
	0,   // 47: Cmd.NewMenu.param:type_name -> Cmd.User2Param
	340, // 48: Cmd.EvaluationReward.cmd:type_name -> Cmd.Command
	0,   // 49: Cmd.EvaluationReward.param:type_name -> Cmd.User2Param
	340, // 50: Cmd.TeamInfoNine.cmd:type_name -> Cmd.Command
	0,   // 51: Cmd.TeamInfoNine.param:type_name -> Cmd.User2Param
	340, // 52: Cmd.UsePortrait.cmd:type_name -> Cmd.Command
	0,   // 53: Cmd.UsePortrait.param:type_name -> Cmd.User2Param
	340, // 54: Cmd.UseFrame.cmd:type_name -> Cmd.Command
	0,   // 55: Cmd.UseFrame.param:type_name -> Cmd.User2Param
	340, // 56: Cmd.NewPortraitFrame.cmd:type_name -> Cmd.Command
	0,   // 57: Cmd.NewPortraitFrame.param:type_name -> Cmd.User2Param
	340, // 58: Cmd.QueryPortraitListUserCmd.cmd:type_name -> Cmd.Command
	0,   // 59: Cmd.QueryPortraitListUserCmd.param:type_name -> Cmd.User2Param
	340, // 60: Cmd.UseDressing.cmd:type_name -> Cmd.Command
	0,   // 61: Cmd.UseDressing.param:type_name -> Cmd.User2Param
	8,   // 62: Cmd.UseDressing.type:type_name -> Cmd.EDressType
	340, // 63: Cmd.NewDressing.cmd:type_name -> Cmd.Command
	0,   // 64: Cmd.NewDressing.param:type_name -> Cmd.User2Param
	8,   // 65: Cmd.NewDressing.type:type_name -> Cmd.EDressType
	340, // 66: Cmd.DressingListUserCmd.cmd:type_name -> Cmd.Command
	0,   // 67: Cmd.DressingListUserCmd.param:type_name -> Cmd.User2Param
	8,   // 68: Cmd.DressingListUserCmd.type:type_name -> Cmd.EDressType
	340, // 69: Cmd.AddAttrPoint.cmd:type_name -> Cmd.Command
	0,   // 70: Cmd.AddAttrPoint.param:type_name -> Cmd.User2Param
	9,   // 71: Cmd.AddAttrPoint.type:type_name -> Cmd.PointType
	340, // 72: Cmd.QueryShopGotItem.cmd:type_name -> Cmd.Command
	0,   // 73: Cmd.QueryShopGotItem.param:type_name -> Cmd.User2Param
	78,  // 74: Cmd.QueryShopGotItem.items:type_name -> Cmd.ShopGotItem
	78,  // 75: Cmd.QueryShopGotItem.discountitems:type_name -> Cmd.ShopGotItem
	78,  // 76: Cmd.QueryShopGotItem.limititems:type_name -> Cmd.ShopGotItem
	78,  // 77: Cmd.QueryShopGotItem.addlimits:type_name -> Cmd.ShopGotItem
	340, // 78: Cmd.UpdateShopGotItem.cmd:type_name -> Cmd.Command
	0,   // 79: Cmd.UpdateShopGotItem.param:type_name -> Cmd.User2Param
	78,  // 80: Cmd.UpdateShopGotItem.item:type_name -> Cmd.ShopGotItem
	78,  // 81: Cmd.UpdateShopGotItem.discountitem:type_name -> Cmd.ShopGotItem
	78,  // 82: Cmd.UpdateShopGotItem.limititem:type_name -> Cmd.ShopGotItem
	78,  // 83: Cmd.UpdateShopGotItem.addlimit:type_name -> Cmd.ShopGotItem
	340, // 84: Cmd.OpenUI.cmd:type_name -> Cmd.Command
	0,   // 85: Cmd.OpenUI.param:type_name -> Cmd.User2Param
	340, // 86: Cmd.DbgSysMsg.cmd:type_name -> Cmd.Command
	0,   // 87: Cmd.DbgSysMsg.param:type_name -> Cmd.User2Param
	10,  // 88: Cmd.DbgSysMsg.type:type_name -> Cmd.EDbgMsgType
	340, // 89: Cmd.FollowTransferCmd.cmd:type_name -> Cmd.Command
	0,   // 90: Cmd.FollowTransferCmd.param:type_name -> Cmd.User2Param
	340, // 91: Cmd.CallNpcFuncCmd.cmd:type_name -> Cmd.Command
	0,   // 92: Cmd.CallNpcFuncCmd.param:type_name -> Cmd.User2Param
	340, // 93: Cmd.ModelShow.cmd:type_name -> Cmd.Command
	0,   // 94: Cmd.ModelShow.param:type_name -> Cmd.User2Param
	340, // 95: Cmd.SoundEffectCmd.cmd:type_name -> Cmd.Command
	0,   // 96: Cmd.SoundEffectCmd.param:type_name -> Cmd.User2Param
	343, // 97: Cmd.SoundEffectCmd.pos:type_name -> Cmd.ScenePos
	340, // 98: Cmd.PresetMsgCmd.cmd:type_name -> Cmd.Command
	0,   // 99: Cmd.PresetMsgCmd.param:type_name -> Cmd.User2Param
	340, // 100: Cmd.ChangeBgmCmd.cmd:type_name -> Cmd.Command
	0,   // 101: Cmd.ChangeBgmCmd.param:type_name -> Cmd.User2Param
	346, // 102: Cmd.ChangeBgmCmd.type:type_name -> Cmd.EBgmType
	342, // 103: Cmd.FighterInfo.datas:type_name -> Cmd.UserData
	341, // 104: Cmd.FighterInfo.attrs:type_name -> Cmd.UserAttr
	340, // 105: Cmd.QueryFighterInfo.cmd:type_name -> Cmd.Command
	0,   // 106: Cmd.QueryFighterInfo.param:type_name -> Cmd.User2Param
	90,  // 107: Cmd.QueryFighterInfo.fighters:type_name -> Cmd.FighterInfo
	340, // 108: Cmd.GameTimeCmd.cmd:type_name -> Cmd.Command
	0,   // 109: Cmd.GameTimeCmd.param:type_name -> Cmd.User2Param
	11,  // 110: Cmd.GameTimeCmd.opt:type_name -> Cmd.GameTimeOpt
	12,  // 111: Cmd.CDTimeItem.type:type_name -> Cmd.CD_TYPE
	340, // 112: Cmd.CDTimeUserCmd.cmd:type_name -> Cmd.Command
	0,   // 113: Cmd.CDTimeUserCmd.param:type_name -> Cmd.User2Param
	93,  // 114: Cmd.CDTimeUserCmd.list:type_name -> Cmd.CDTimeItem
	340, // 115: Cmd.StateChange.cmd:type_name -> Cmd.Command
	0,   // 116: Cmd.StateChange.param:type_name -> Cmd.User2Param
	347, // 117: Cmd.StateChange.status:type_name -> Cmd.ECreatureStatus
	340, // 118: Cmd.Photo.cmd:type_name -> Cmd.Command
	0,   // 119: Cmd.Photo.param:type_name -> Cmd.User2Param
	340, // 120: Cmd.ShakeScreen.cmd:type_name -> Cmd.Command
	0,   // 121: Cmd.ShakeScreen.param:type_name -> Cmd.User2Param
	340, // 122: Cmd.QueryShortcut.cmd:type_name -> Cmd.Command
	0,   // 123: Cmd.QueryShortcut.param:type_name -> Cmd.User2Param
	98,  // 124: Cmd.QueryShortcut.list:type_name -> Cmd.ShortcutItem
	340, // 125: Cmd.PutShortcut.cmd:type_name -> Cmd.Command
	0,   // 126: Cmd.PutShortcut.param:type_name -> Cmd.User2Param
	98,  // 127: Cmd.PutShortcut.item:type_name -> Cmd.ShortcutItem
	340, // 128: Cmd.TempPutShortCut.cmd:type_name -> Cmd.Command
	0,   // 129: Cmd.TempPutShortCut.param:type_name -> Cmd.User2Param
	98,  // 130: Cmd.TempPutShortCut.origin:type_name -> Cmd.ShortcutItem
	98,  // 131: Cmd.TempPutShortCut.changed:type_name -> Cmd.ShortcutItem
	340, // 132: Cmd.NpcChangeAngle.cmd:type_name -> Cmd.Command
	0,   // 133: Cmd.NpcChangeAngle.param:type_name -> Cmd.User2Param
	340, // 134: Cmd.CameraFocus.cmd:type_name -> Cmd.Command
	0,   // 135: Cmd.CameraFocus.param:type_name -> Cmd.User2Param
	340, // 136: Cmd.GoToListUserCmd.cmd:type_name -> Cmd.Command
	0,   // 137: Cmd.GoToListUserCmd.param:type_name -> Cmd.User2Param
	340, // 138: Cmd.GoToGearUserCmd.cmd:type_name -> Cmd.Command
	0,   // 139: Cmd.GoToGearUserCmd.param:type_name -> Cmd.User2Param
	13,  // 140: Cmd.GoToGearUserCmd.type:type_name -> Cmd.EGoToGearType
	340, // 141: Cmd.NewTransMapCmd.cmd:type_name -> Cmd.Command
	0,   // 142: Cmd.NewTransMapCmd.param:type_name -> Cmd.User2Param
	340, // 143: Cmd.DeathTransferListCmd.cmd:type_name -> Cmd.Command
	0,   // 144: Cmd.DeathTransferListCmd.param:type_name -> Cmd.User2Param
	340, // 145: Cmd.NewDeathTransferCmd.cmd:type_name -> Cmd.Command
	0,   // 146: Cmd.NewDeathTransferCmd.param:type_name -> Cmd.User2Param
	340, // 147: Cmd.UseDeathTransferCmd.cmd:type_name -> Cmd.Command
	0,   // 148: Cmd.UseDeathTransferCmd.param:type_name -> Cmd.User2Param
	340, // 149: Cmd.FollowerUser.cmd:type_name -> Cmd.Command
	0,   // 150: Cmd.FollowerUser.param:type_name -> Cmd.User2Param
	14,  // 151: Cmd.FollowerUser.eType:type_name -> Cmd.EFollowType
	340, // 152: Cmd.BeFollowUserCmd.cmd:type_name -> Cmd.Command
	0,   // 153: Cmd.BeFollowUserCmd.param:type_name -> Cmd.User2Param
	14,  // 154: Cmd.BeFollowUserCmd.eType:type_name -> Cmd.EFollowType
	340, // 155: Cmd.LaboratoryUserCmd.cmd:type_name -> Cmd.Command
	0,   // 156: Cmd.LaboratoryUserCmd.param:type_name -> Cmd.User2Param
	340, // 157: Cmd.GotoLaboratoryUserCmd.cmd:type_name -> Cmd.Command
	0,   // 158: Cmd.GotoLaboratoryUserCmd.param:type_name -> Cmd.User2Param
	340, // 159: Cmd.ExchangeProfession.cmd:type_name -> Cmd.Command
	0,   // 160: Cmd.ExchangeProfession.param:type_name -> Cmd.User2Param
	342, // 161: Cmd.ExchangeProfession.datas:type_name -> Cmd.UserData
	341, // 162: Cmd.ExchangeProfession.attrs:type_name -> Cmd.UserAttr
	341, // 163: Cmd.ExchangeProfession.pointattrs:type_name -> Cmd.UserAttr
	32,  // 164: Cmd.ExchangeProfession.type:type_name -> Cmd.EProfessionDataType
	340, // 165: Cmd.SceneryUserCmd.cmd:type_name -> Cmd.Command
	0,   // 166: Cmd.SceneryUserCmd.param:type_name -> Cmd.User2Param
	115, // 167: Cmd.SceneryUserCmd.scenerys:type_name -> Cmd.Scenery
	340, // 168: Cmd.GoMapQuestUserCmd.cmd:type_name -> Cmd.Command
	0,   // 169: Cmd.GoMapQuestUserCmd.param:type_name -> Cmd.User2Param
	340, // 170: Cmd.GoMapFollowUserCmd.cmd:type_name -> Cmd.Command
	0,   // 171: Cmd.GoMapFollowUserCmd.param:type_name -> Cmd.User2Param
	340, // 172: Cmd.UserAutoHitCmd.cmd:type_name -> Cmd.Command
	0,   // 173: Cmd.UserAutoHitCmd.param:type_name -> Cmd.User2Param
	340, // 174: Cmd.UploadSceneryPhotoUserCmd.cmd:type_name -> Cmd.Command
	0,   // 175: Cmd.UploadSceneryPhotoUserCmd.param:type_name -> Cmd.User2Param
	15,  // 176: Cmd.UploadSceneryPhotoUserCmd.type:type_name -> Cmd.EAlbumType
	15,  // 177: Cmd.UpyunUrl.type:type_name -> Cmd.EAlbumType
	340, // 178: Cmd.DownloadSceneryPhotoUserCmd.cmd:type_name -> Cmd.Command
	0,   // 179: Cmd.DownloadSceneryPhotoUserCmd.param:type_name -> Cmd.User2Param
	121, // 180: Cmd.DownloadSceneryPhotoUserCmd.urls:type_name -> Cmd.UpyunUrl
	340, // 181: Cmd.QueryMapArea.cmd:type_name -> Cmd.Command
	0,   // 182: Cmd.QueryMapArea.param:type_name -> Cmd.User2Param
	340, // 183: Cmd.NewMapAreaNtf.cmd:type_name -> Cmd.Command
	0,   // 184: Cmd.NewMapAreaNtf.param:type_name -> Cmd.User2Param
	340, // 185: Cmd.BuffForeverCmd.cmd:type_name -> Cmd.Command
	0,   // 186: Cmd.BuffForeverCmd.param:type_name -> Cmd.User2Param
	58,  // 187: Cmd.BuffForeverCmd.buff:type_name -> Cmd.BufferData
	340, // 188: Cmd.InviteJoinHandsUserCmd.cmd:type_name -> Cmd.Command
	0,   // 189: Cmd.InviteJoinHandsUserCmd.param:type_name -> Cmd.User2Param
	340, // 190: Cmd.BreakUpHandsUserCmd.cmd:type_name -> Cmd.Command
	0,   // 191: Cmd.BreakUpHandsUserCmd.param:type_name -> Cmd.User2Param
	340, // 192: Cmd.HandStatusUserCmd.cmd:type_name -> Cmd.Command
	0,   // 193: Cmd.HandStatusUserCmd.param:type_name -> Cmd.User2Param
	340, // 194: Cmd.QueryShow.cmd:type_name -> Cmd.Command
	0,   // 195: Cmd.QueryShow.param:type_name -> Cmd.User2Param
	340, // 196: Cmd.QueryMusicList.cmd:type_name -> Cmd.Command
	0,   // 197: Cmd.QueryMusicList.param:type_name -> Cmd.User2Param
	130, // 198: Cmd.QueryMusicList.items:type_name -> Cmd.MusicItem
	340, // 199: Cmd.DemandMusic.cmd:type_name -> Cmd.Command
	0,   // 200: Cmd.DemandMusic.param:type_name -> Cmd.User2Param
	340, // 201: Cmd.CloseMusicFrame.cmd:type_name -> Cmd.Command
	0,   // 202: Cmd.CloseMusicFrame.param:type_name -> Cmd.User2Param
	340, // 203: Cmd.UploadOkSceneryUserCmd.cmd:type_name -> Cmd.Command
	0,   // 204: Cmd.UploadOkSceneryUserCmd.param:type_name -> Cmd.User2Param
	340, // 205: Cmd.JoinHandsUserCmd.cmd:type_name -> Cmd.Command
	0,   // 206: Cmd.JoinHandsUserCmd.param:type_name -> Cmd.User2Param
	340, // 207: Cmd.QueryTraceList.cmd:type_name -> Cmd.Command
	0,   // 208: Cmd.QueryTraceList.param:type_name -> Cmd.User2Param
	136, // 209: Cmd.QueryTraceList.items:type_name -> Cmd.TraceItem
	340, // 210: Cmd.UpdateTraceList.cmd:type_name -> Cmd.Command
	0,   // 211: Cmd.UpdateTraceList.param:type_name -> Cmd.User2Param
	136, // 212: Cmd.UpdateTraceList.updates:type_name -> Cmd.TraceItem
	340, // 213: Cmd.SetDirection.cmd:type_name -> Cmd.Command
	0,   // 214: Cmd.SetDirection.param:type_name -> Cmd.User2Param
	340, // 215: Cmd.BattleTimelenUserCmd.cmd:type_name -> Cmd.Command
	0,   // 216: Cmd.BattleTimelenUserCmd.param:type_name -> Cmd.User2Param
	16,  // 217: Cmd.BattleTimelenUserCmd.estatus:type_name -> Cmd.EBattleStatus
	340, // 218: Cmd.SetOptionUserCmd.cmd:type_name -> Cmd.Command
	0,   // 219: Cmd.SetOptionUserCmd.param:type_name -> Cmd.User2Param
	17,  // 220: Cmd.SetOptionUserCmd.type:type_name -> Cmd.EQueryType
	17,  // 221: Cmd.SetOptionUserCmd.wedding_type:type_name -> Cmd.EQueryType
	340, // 222: Cmd.QueryUserInfoUserCmd.cmd:type_name -> Cmd.Command
	0,   // 223: Cmd.QueryUserInfoUserCmd.param:type_name -> Cmd.User2Param
	340, // 224: Cmd.CountDownTickUserCmd.cmd:type_name -> Cmd.Command
	0,   // 225: Cmd.CountDownTickUserCmd.param:type_name -> Cmd.User2Param
	19,  // 226: Cmd.CountDownTickUserCmd.type:type_name -> Cmd.ECountDownType
	340, // 227: Cmd.ItemMusicNtfUserCmd.cmd:type_name -> Cmd.Command
	0,   // 228: Cmd.ItemMusicNtfUserCmd.param:type_name -> Cmd.User2Param
	340, // 229: Cmd.ShakeTreeUserCmd.cmd:type_name -> Cmd.Command
	0,   // 230: Cmd.ShakeTreeUserCmd.param:type_name -> Cmd.User2Param
	20,  // 231: Cmd.ShakeTreeUserCmd.result:type_name -> Cmd.ETreeStatus
	343, // 232: Cmd.Tree.pos:type_name -> Cmd.ScenePos
	340, // 233: Cmd.TreeListUserCmd.cmd:type_name -> Cmd.Command
	0,   // 234: Cmd.TreeListUserCmd.param:type_name -> Cmd.User2Param
	146, // 235: Cmd.TreeListUserCmd.updates:type_name -> Cmd.Tree
	340, // 236: Cmd.ActivityNtfUserCmd.cmd:type_name -> Cmd.Command
	0,   // 237: Cmd.ActivityNtfUserCmd.param:type_name -> Cmd.User2Param
	21,  // 238: Cmd.ZoneInfo.status:type_name -> Cmd.EZoneStatus
	22,  // 239: Cmd.ZoneInfo.state:type_name -> Cmd.EZoneState
	23,  // 240: Cmd.RecentZoneInfo.type:type_name -> Cmd.EJumpZone
	340, // 241: Cmd.QueryZoneStatusUserCmd.cmd:type_name -> Cmd.Command
	0,   // 242: Cmd.QueryZoneStatusUserCmd.param:type_name -> Cmd.User2Param
	149, // 243: Cmd.QueryZoneStatusUserCmd.infos:type_name -> Cmd.ZoneInfo
	150, // 244: Cmd.QueryZoneStatusUserCmd.recents:type_name -> Cmd.RecentZoneInfo
	340, // 245: Cmd.JumpZoneUserCmd.cmd:type_name -> Cmd.Command
	0,   // 246: Cmd.JumpZoneUserCmd.param:type_name -> Cmd.User2Param
	340, // 247: Cmd.ItemImageUserNtfUserCmd.cmd:type_name -> Cmd.Command
	0,   // 248: Cmd.ItemImageUserNtfUserCmd.param:type_name -> Cmd.User2Param
	340, // 249: Cmd.InviteFollowUserCmd.cmd:type_name -> Cmd.Command
	0,   // 250: Cmd.InviteFollowUserCmd.param:type_name -> Cmd.User2Param
	340, // 251: Cmd.ChangeNameUserCmd.cmd:type_name -> Cmd.Command
	0,   // 252: Cmd.ChangeNameUserCmd.param:type_name -> Cmd.User2Param
	340, // 253: Cmd.ChargePlayUserCmd.cmd:type_name -> Cmd.Command
	0,   // 254: Cmd.ChargePlayUserCmd.param:type_name -> Cmd.User2Param
	340, // 255: Cmd.RequireNpcFuncUserCmd.cmd:type_name -> Cmd.Command
	0,   // 256: Cmd.RequireNpcFuncUserCmd.param:type_name -> Cmd.User2Param
	340, // 257: Cmd.CheckSeatUserCmd.cmd:type_name -> Cmd.Command
	0,   // 258: Cmd.CheckSeatUserCmd.param:type_name -> Cmd.User2Param
	340, // 259: Cmd.NtfSeatUserCmd.cmd:type_name -> Cmd.Command
	0,   // 260: Cmd.NtfSeatUserCmd.param:type_name -> Cmd.User2Param
	340, // 261: Cmd.YoyoSeatUserCmd.cmd:type_name -> Cmd.Command
	0,   // 262: Cmd.YoyoSeatUserCmd.param:type_name -> Cmd.User2Param
	340, // 263: Cmd.ShowSeatUserCmd.cmd:type_name -> Cmd.Command
	0,   // 264: Cmd.ShowSeatUserCmd.param:type_name -> Cmd.User2Param
	24,  // 265: Cmd.ShowSeatUserCmd.show:type_name -> Cmd.SeatShowType
	340, // 266: Cmd.SetNormalSkillOptionUserCmd.cmd:type_name -> Cmd.Command
	0,   // 267: Cmd.SetNormalSkillOptionUserCmd.param:type_name -> Cmd.User2Param
	340, // 268: Cmd.NewSetOptionUserCmd.cmd:type_name -> Cmd.Command
	0,   // 269: Cmd.NewSetOptionUserCmd.param:type_name -> Cmd.User2Param
	25,  // 270: Cmd.NewSetOptionUserCmd.type:type_name -> Cmd.EOptionType
	340, // 271: Cmd.UnsolvedSceneryNtfUserCmd.cmd:type_name -> Cmd.Command
	0,   // 272: Cmd.UnsolvedSceneryNtfUserCmd.param:type_name -> Cmd.User2Param
	343, // 273: Cmd.VisibleNpc.pos:type_name -> Cmd.ScenePos
	340, // 274: Cmd.NtfVisibleNpcUserCmd.cmd:type_name -> Cmd.Command
	0,   // 275: Cmd.NtfVisibleNpcUserCmd.param:type_name -> Cmd.User2Param
	165, // 276: Cmd.NtfVisibleNpcUserCmd.npcs:type_name -> Cmd.VisibleNpc
	340, // 277: Cmd.TransformPreDataCmd.cmd:type_name -> Cmd.Command
	0,   // 278: Cmd.TransformPreDataCmd.param:type_name -> Cmd.User2Param
	342, // 279: Cmd.TransformPreDataCmd.datas:type_name -> Cmd.UserData
	340, // 280: Cmd.UserRenameCmd.cmd:type_name -> Cmd.Command
	0,   // 281: Cmd.UserRenameCmd.param:type_name -> Cmd.User2Param
	26,  // 282: Cmd.UserRenameCmd.code:type_name -> Cmd.ERenameErrCode
	340, // 283: Cmd.BuyZenyCmd.cmd:type_name -> Cmd.Command
	0,   // 284: Cmd.BuyZenyCmd.param:type_name -> Cmd.User2Param
	340, // 285: Cmd.CallTeamerUserCmd.cmd:type_name -> Cmd.Command
	0,   // 286: Cmd.CallTeamerUserCmd.param:type_name -> Cmd.User2Param
	343, // 287: Cmd.CallTeamerUserCmd.pos:type_name -> Cmd.ScenePos
	340, // 288: Cmd.CallTeamerReplyUserCmd.cmd:type_name -> Cmd.Command
	0,   // 289: Cmd.CallTeamerReplyUserCmd.param:type_name -> Cmd.User2Param
	343, // 290: Cmd.CallTeamerReplyUserCmd.pos:type_name -> Cmd.ScenePos
	340, // 291: Cmd.SpecialEffectCmd.cmd:type_name -> Cmd.Command
	0,   // 292: Cmd.SpecialEffectCmd.param:type_name -> Cmd.User2Param
	340, // 293: Cmd.MarriageProposalCmd.cmd:type_name -> Cmd.Command
	0,   // 294: Cmd.MarriageProposalCmd.param:type_name -> Cmd.User2Param
	340, // 295: Cmd.MarriageProposalReplyCmd.cmd:type_name -> Cmd.Command
	0,   // 296: Cmd.MarriageProposalReplyCmd.param:type_name -> Cmd.User2Param
	27,  // 297: Cmd.MarriageProposalReplyCmd.reply:type_name -> Cmd.EProposalReply
	340, // 298: Cmd.UploadWeddingPhotoUserCmd.cmd:type_name -> Cmd.Command
	0,   // 299: Cmd.UploadWeddingPhotoUserCmd.param:type_name -> Cmd.User2Param
	340, // 300: Cmd.MarriageProposalSuccessCmd.cmd:type_name -> Cmd.Command
	0,   // 301: Cmd.MarriageProposalSuccessCmd.param:type_name -> Cmd.User2Param
	340, // 302: Cmd.InviteeWeddingStartNtfUserCmd.cmd:type_name -> Cmd.Command
	0,   // 303: Cmd.InviteeWeddingStartNtfUserCmd.param:type_name -> Cmd.User2Param
	340, // 304: Cmd.KFCShareUserCmd.cmd:type_name -> Cmd.Command
	0,   // 305: Cmd.KFCShareUserCmd.param:type_name -> Cmd.User2Param
	340, // 306: Cmd.KFCEnrollUserCmd.cmd:type_name -> Cmd.Command
	0,   // 307: Cmd.KFCEnrollUserCmd.param:type_name -> Cmd.User2Param
	340, // 308: Cmd.KFCEnrollCodeUserCmd.cmd:type_name -> Cmd.Command
	0,   // 309: Cmd.KFCEnrollCodeUserCmd.param:type_name -> Cmd.User2Param
	340, // 310: Cmd.KFCEnrollReplyUserCmd.cmd:type_name -> Cmd.Command
	0,   // 311: Cmd.KFCEnrollReplyUserCmd.param:type_name -> Cmd.User2Param
	28,  // 312: Cmd.KFCEnrollReplyUserCmd.result:type_name -> Cmd.EnrollResult
	340, // 313: Cmd.KFCEnrollQueryUserCmd.cmd:type_name -> Cmd.Command
	0,   // 314: Cmd.KFCEnrollQueryUserCmd.param:type_name -> Cmd.User2Param
	340, // 315: Cmd.KFCHasEnrolledUserCmd.cmd:type_name -> Cmd.Command
	0,   // 316: Cmd.KFCHasEnrolledUserCmd.param:type_name -> Cmd.User2Param
	340, // 317: Cmd.CheckRelationUserCmd.cmd:type_name -> Cmd.Command
	0,   // 318: Cmd.CheckRelationUserCmd.param:type_name -> Cmd.User2Param
	348, // 319: Cmd.CheckRelationUserCmd.etype:type_name -> Cmd.ESocialRelation
	340, // 320: Cmd.TwinsActionUserCmd.cmd:type_name -> Cmd.Command
	0,   // 321: Cmd.TwinsActionUserCmd.param:type_name -> Cmd.User2Param
	29,  // 322: Cmd.TwinsActionUserCmd.etype:type_name -> Cmd.ETwinsOperation
	340, // 323: Cmd.ShowServantUserCmd.cmd:type_name -> Cmd.Command
	0,   // 324: Cmd.ShowServantUserCmd.param:type_name -> Cmd.User2Param
	340, // 325: Cmd.ReplaceServantUserCmd.cmd:type_name -> Cmd.Command
	0,   // 326: Cmd.ReplaceServantUserCmd.param:type_name -> Cmd.User2Param
	340, // 327: Cmd.HireServantUserCmd.cmd:type_name -> Cmd.Command
	0,   // 328: Cmd.HireServantUserCmd.param:type_name -> Cmd.User2Param
	340, // 329: Cmd.ServantService.cmd:type_name -> Cmd.Command
	0,   // 330: Cmd.ServantService.param:type_name -> Cmd.User2Param
	30,  // 331: Cmd.ServantService.type:type_name -> Cmd.EServantService
	31,  // 332: Cmd.RecommendItemInfo.status:type_name -> Cmd.ERecommendStatus
	340, // 333: Cmd.RecommendServantUserCmd.cmd:type_name -> Cmd.Command
	0,   // 334: Cmd.RecommendServantUserCmd.param:type_name -> Cmd.User2Param
	190, // 335: Cmd.RecommendServantUserCmd.items:type_name -> Cmd.RecommendItemInfo
	340, // 336: Cmd.ReceiveServantUserCmd.cmd:type_name -> Cmd.Command
	0,   // 337: Cmd.ReceiveServantUserCmd.param:type_name -> Cmd.User2Param
	340, // 338: Cmd.ServantRewardStatusUserCmd.cmd:type_name -> Cmd.Command
	0,   // 339: Cmd.ServantRewardStatusUserCmd.param:type_name -> Cmd.User2Param
	193, // 340: Cmd.ServantRewardStatusUserCmd.items:type_name -> Cmd.FavorabilityStatus
	349, // 341: Cmd.RaceData.race:type_name -> Cmd.ECharRace
	340, // 342: Cmd.ProfessionQueryUserCmd.cmd:type_name -> Cmd.Command
	0,   // 343: Cmd.ProfessionQueryUserCmd.param:type_name -> Cmd.User2Param
	195, // 344: Cmd.ProfessionQueryUserCmd.items:type_name -> Cmd.ProfessionInfo
	196, // 345: Cmd.ProfessionQueryUserCmd.datas:type_name -> Cmd.RaceData
	340, // 346: Cmd.ProfessionBuyUserCmd.cmd:type_name -> Cmd.Command
	0,   // 347: Cmd.ProfessionBuyUserCmd.param:type_name -> Cmd.User2Param
	340, // 348: Cmd.ProfessionChangeUserCmd.cmd:type_name -> Cmd.Command
	0,   // 349: Cmd.ProfessionChangeUserCmd.param:type_name -> Cmd.User2Param
	341, // 350: Cmd.AttrProfessionData.attrs:type_name -> Cmd.UserAttr
	342, // 351: Cmd.AttrProfessionData.datas:type_name -> Cmd.UserData
	202, // 352: Cmd.EquipPackData.datas:type_name -> Cmd.EquipInfo
	350, // 353: Cmd.SkillProfessionData.datas:type_name -> Cmd.SkillData
	350, // 354: Cmd.SkillProfessionData.novice_data:type_name -> Cmd.SkillData
	351, // 355: Cmd.SkillProfessionData.beings:type_name -> Cmd.BeingSkillData
	352, // 356: Cmd.SkillProfessionData.beinginfos:type_name -> Cmd.BeingInfo
	204, // 357: Cmd.SkillProfessionData.skillpos:type_name -> Cmd.SkillValidPosData
	353, // 358: Cmd.SkillProfessionData.shortcut:type_name -> Cmd.SkillValidPos
	32,  // 359: Cmd.ProfessionUserInfo.type:type_name -> Cmd.EProfessionDataType
	201, // 360: Cmd.ProfessionUserInfo.attr_data:type_name -> Cmd.AttrProfessionData
	203, // 361: Cmd.ProfessionUserInfo.equip_data:type_name -> Cmd.EquipPackData
	200, // 362: Cmd.ProfessionUserInfo.astrolabe_data:type_name -> Cmd.AstrolabeProfessionData
	205, // 363: Cmd.ProfessionUserInfo.skill_data:type_name -> Cmd.SkillProfessionData
	354, // 364: Cmd.ProfessionUserInfo.gem_data:type_name -> Cmd.ItemData
	355, // 365: Cmd.ProfessionUserInfo.multiskillopts:type_name -> Cmd.MultiSkillOption
	33,  // 366: Cmd.SlotInfo.type:type_name -> Cmd.ESlotType
	356, // 367: Cmd.UserAstrolMaterialData.materials:type_name -> Cmd.AstrolabeCostData
	340, // 368: Cmd.UpdateRecordInfoUserCmd.cmd:type_name -> Cmd.Command
	0,   // 369: Cmd.UpdateRecordInfoUserCmd.param:type_name -> Cmd.User2Param
	207, // 370: Cmd.UpdateRecordInfoUserCmd.slots:type_name -> Cmd.SlotInfo
	206, // 371: Cmd.UpdateRecordInfoUserCmd.records:type_name -> Cmd.ProfessionUserInfo
	208, // 372: Cmd.UpdateRecordInfoUserCmd.astrol_data:type_name -> Cmd.UserAstrolMaterialData
	340, // 373: Cmd.SaveRecordUserCmd.cmd:type_name -> Cmd.Command
	0,   // 374: Cmd.SaveRecordUserCmd.param:type_name -> Cmd.User2Param
	340, // 375: Cmd.LoadRecordUserCmd.cmd:type_name -> Cmd.Command
	0,   // 376: Cmd.LoadRecordUserCmd.param:type_name -> Cmd.User2Param
	340, // 377: Cmd.ChangeRecordNameUserCmd.cmd:type_name -> Cmd.Command
	0,   // 378: Cmd.ChangeRecordNameUserCmd.param:type_name -> Cmd.User2Param
	340, // 379: Cmd.BuyRecordSlotUserCmd.cmd:type_name -> Cmd.Command
	0,   // 380: Cmd.BuyRecordSlotUserCmd.param:type_name -> Cmd.User2Param
	340, // 381: Cmd.DeleteRecordUserCmd.cmd:type_name -> Cmd.Command
	0,   // 382: Cmd.DeleteRecordUserCmd.param:type_name -> Cmd.User2Param
	340, // 383: Cmd.UpdateBranchInfoUserCmd.cmd:type_name -> Cmd.Command
	0,   // 384: Cmd.UpdateBranchInfoUserCmd.param:type_name -> Cmd.User2Param
	206, // 385: Cmd.UpdateBranchInfoUserCmd.datas:type_name -> Cmd.ProfessionUserInfo
	340, // 386: Cmd.EnterCapraActivityCmd.cmd:type_name -> Cmd.Command
	0,   // 387: Cmd.EnterCapraActivityCmd.param:type_name -> Cmd.User2Param
	340, // 388: Cmd.InviteWithMeUserCmd.cmd:type_name -> Cmd.Command
	0,   // 389: Cmd.InviteWithMeUserCmd.param:type_name -> Cmd.User2Param
	340, // 390: Cmd.QueryAltmanKillUserCmd.cmd:type_name -> Cmd.Command
	0,   // 391: Cmd.QueryAltmanKillUserCmd.param:type_name -> Cmd.User2Param
	35,  // 392: Cmd.BoothInfo.sign:type_name -> Cmd.EBoothSign
	340, // 393: Cmd.BoothReqUserCmd.cmd:type_name -> Cmd.Command
	0,   // 394: Cmd.BoothReqUserCmd.param:type_name -> Cmd.User2Param
	34,  // 395: Cmd.BoothReqUserCmd.oper:type_name -> Cmd.EBoothOper
	340, // 396: Cmd.BoothInfoSyncUserCmd.cmd:type_name -> Cmd.Command
	0,   // 397: Cmd.BoothInfoSyncUserCmd.param:type_name -> Cmd.User2Param
	34,  // 398: Cmd.BoothInfoSyncUserCmd.oper:type_name -> Cmd.EBoothOper
	219, // 399: Cmd.BoothInfoSyncUserCmd.info:type_name -> Cmd.BoothInfo
	340, // 400: Cmd.DressUpModelUserCmd.cmd:type_name -> Cmd.Command
	0,   // 401: Cmd.DressUpModelUserCmd.param:type_name -> Cmd.User2Param
	357, // 402: Cmd.DressUpModelUserCmd.type:type_name -> Cmd.EUserDataType
	340, // 403: Cmd.DressUpHeadUserCmd.cmd:type_name -> Cmd.Command
	0,   // 404: Cmd.DressUpHeadUserCmd.param:type_name -> Cmd.User2Param
	357, // 405: Cmd.DressUpHeadUserCmd.type:type_name -> Cmd.EUserDataType
	340, // 406: Cmd.QueryStageUserCmd.cmd:type_name -> Cmd.Command
	0,   // 407: Cmd.QueryStageUserCmd.param:type_name -> Cmd.User2Param
	224, // 408: Cmd.QueryStageUserCmd.info:type_name -> Cmd.StageInfo
	340, // 409: Cmd.DressUpLineUpUserCmd.cmd:type_name -> Cmd.Command
	0,   // 410: Cmd.DressUpLineUpUserCmd.param:type_name -> Cmd.User2Param
	357, // 411: Cmd.StageUserDataType.type:type_name -> Cmd.EUserDataType
	340, // 412: Cmd.DressUpStageUserCmd.cmd:type_name -> Cmd.Command
	0,   // 413: Cmd.DressUpStageUserCmd.param:type_name -> Cmd.User2Param
	227, // 414: Cmd.DressUpStageUserCmd.datas:type_name -> Cmd.StageUserDataType
	340, // 415: Cmd.GoToFunctionMapUserCmd.cmd:type_name -> Cmd.Command
	0,   // 416: Cmd.GoToFunctionMapUserCmd.param:type_name -> Cmd.User2Param
	37,  // 417: Cmd.GoToFunctionMapUserCmd.etype:type_name -> Cmd.EFuncMapType
	39,  // 418: Cmd.GrowthCurInfo.type:type_name -> Cmd.EGrowthType
	38,  // 419: Cmd.GrowthItemInfo.status:type_name -> Cmd.EGrowthStatus
	231, // 420: Cmd.GrowthGroupInfo.items:type_name -> Cmd.GrowthItemInfo
	232, // 421: Cmd.GrowthGroupInfo.valueitems:type_name -> Cmd.GrowthValueInfo
	340, // 422: Cmd.GrowthServantUserCmd.cmd:type_name -> Cmd.Command
	0,   // 423: Cmd.GrowthServantUserCmd.param:type_name -> Cmd.User2Param
	233, // 424: Cmd.GrowthServantUserCmd.datas:type_name -> Cmd.GrowthGroupInfo
	340, // 425: Cmd.ReceiveGrowthServantUserCmd.cmd:type_name -> Cmd.Command
	0,   // 426: Cmd.ReceiveGrowthServantUserCmd.param:type_name -> Cmd.User2Param
	340, // 427: Cmd.GrowthOpenServantUserCmd.cmd:type_name -> Cmd.Command
	0,   // 428: Cmd.GrowthOpenServantUserCmd.param:type_name -> Cmd.User2Param
	340, // 429: Cmd.CheatTagUserCmd.cmd:type_name -> Cmd.Command
	0,   // 430: Cmd.CheatTagUserCmd.param:type_name -> Cmd.User2Param
	40,  // 431: Cmd.ButtonThreshold.button:type_name -> Cmd.EMonitorButton
	340, // 432: Cmd.CheatTagStatUserCmd.cmd:type_name -> Cmd.Command
	0,   // 433: Cmd.CheatTagStatUserCmd.param:type_name -> Cmd.User2Param
	238, // 434: Cmd.CheatTagStatUserCmd.buttonthreshold:type_name -> Cmd.ButtonThreshold
	340, // 435: Cmd.ClickPosList.cmd:type_name -> Cmd.Command
	0,   // 436: Cmd.ClickPosList.param:type_name -> Cmd.User2Param
	241, // 437: Cmd.ClickPosList.clickbuttonpos:type_name -> Cmd.ClickButtonPos
	40,  // 438: Cmd.ClickButtonPos.button:type_name -> Cmd.EMonitorButton
	340, // 439: Cmd.ServerInfoNtf.cmd:type_name -> Cmd.Command
	0,   // 440: Cmd.ServerInfoNtf.param:type_name -> Cmd.User2Param
	358, // 441: Cmd.ServerInfoNtf.serverinfo:type_name -> Cmd.RegionServerInfo
	340, // 442: Cmd.ReadyToMapUserCmd.cmd:type_name -> Cmd.Command
	0,   // 443: Cmd.ReadyToMapUserCmd.param:type_name -> Cmd.User2Param
	340, // 444: Cmd.SignInUserCmd.cmd:type_name -> Cmd.Command
	0,   // 445: Cmd.SignInUserCmd.param:type_name -> Cmd.User2Param
	41,  // 446: Cmd.SignInUserCmd.type:type_name -> Cmd.ESignInType
	340, // 447: Cmd.SignInNtfUserCmd.cmd:type_name -> Cmd.Command
	0,   // 448: Cmd.SignInNtfUserCmd.param:type_name -> Cmd.User2Param
	41,  // 449: Cmd.SignInNtfUserCmd.type:type_name -> Cmd.ESignInType
	340, // 450: Cmd.BeatPoriUserCmd.cmd:type_name -> Cmd.Command
	0,   // 451: Cmd.BeatPoriUserCmd.param:type_name -> Cmd.User2Param
	340, // 452: Cmd.UnlockFrameUserCmd.cmd:type_name -> Cmd.Command
	0,   // 453: Cmd.UnlockFrameUserCmd.param:type_name -> Cmd.User2Param
	42,  // 454: Cmd.RewardItem.status:type_name -> Cmd.ERewardStatus
	340, // 455: Cmd.AltmanRewardUserCmd.cmd:type_name -> Cmd.Command
	0,   // 456: Cmd.AltmanRewardUserCmd.param:type_name -> Cmd.User2Param
	248, // 457: Cmd.AltmanRewardUserCmd.items:type_name -> Cmd.RewardItem
	43,  // 458: Cmd.ServantReservationItem.ftype:type_name -> Cmd.EReservationType
	340, // 459: Cmd.ServantReqReservationUserCmd.cmd:type_name -> Cmd.Command
	0,   // 460: Cmd.ServantReqReservationUserCmd.param:type_name -> Cmd.User2Param
	43,  // 461: Cmd.ServantReqReservationUserCmd.ftype:type_name -> Cmd.EReservationType
	340, // 462: Cmd.ServantReservationUserCmd.cmd:type_name -> Cmd.Command
	0,   // 463: Cmd.ServantReservationUserCmd.param:type_name -> Cmd.User2Param
	250, // 464: Cmd.ServantReservationUserCmd.datas:type_name -> Cmd.ServantReservationItem
	340, // 465: Cmd.ServantRecEquipUserCmd.cmd:type_name -> Cmd.Command
	0,   // 466: Cmd.ServantRecEquipUserCmd.param:type_name -> Cmd.User2Param
	253, // 467: Cmd.ServantRecEquipUserCmd.datas:type_name -> Cmd.ServantEquipItem
	340, // 468: Cmd.PrestigeNtfUserCmd.cmd:type_name -> Cmd.Command
	0,   // 469: Cmd.PrestigeNtfUserCmd.param:type_name -> Cmd.User2Param
	255, // 470: Cmd.PrestigeNtfUserCmd.datas:type_name -> Cmd.PrestigeData
	340, // 471: Cmd.PrestigeGiveUserCmd.cmd:type_name -> Cmd.Command
	0,   // 472: Cmd.PrestigeGiveUserCmd.param:type_name -> Cmd.User2Param
	340, // 473: Cmd.UpdateGameHealthLevelUserCmd.cmd:type_name -> Cmd.Command
	0,   // 474: Cmd.UpdateGameHealthLevelUserCmd.param:type_name -> Cmd.User2Param
	44,  // 475: Cmd.GameHealthEvent.type:type_name -> Cmd.EGameHealthEventType
	340, // 476: Cmd.GameHealthEventStatUserCmd.cmd:type_name -> Cmd.Command
	0,   // 477: Cmd.GameHealthEventStatUserCmd.param:type_name -> Cmd.User2Param
	259, // 478: Cmd.GameHealthEventStatUserCmd.events:type_name -> Cmd.GameHealthEvent
	340, // 479: Cmd.Fishway2KillBossInformUserCmd.cmd:type_name -> Cmd.Command
	0,   // 480: Cmd.Fishway2KillBossInformUserCmd.param:type_name -> Cmd.User2Param
	340, // 481: Cmd.ActPointUserCmd.cmd:type_name -> Cmd.Command
	0,   // 482: Cmd.ActPointUserCmd.param:type_name -> Cmd.User2Param
	340, // 483: Cmd.HighRefineAttrUserCmd.cmd:type_name -> Cmd.Command
	0,   // 484: Cmd.HighRefineAttrUserCmd.param:type_name -> Cmd.User2Param
	340, // 485: Cmd.HeadwearNpcUserCmd.cmd:type_name -> Cmd.Command
	0,   // 486: Cmd.HeadwearNpcUserCmd.param:type_name -> Cmd.User2Param
	264, // 487: Cmd.HeadwearNpcUserCmd.npcs:type_name -> Cmd.HeadwearNpcItem
	340, // 488: Cmd.HeadwearRoundUserCmd.cmd:type_name -> Cmd.Command
	0,   // 489: Cmd.HeadwearRoundUserCmd.param:type_name -> Cmd.User2Param
	340, // 490: Cmd.HeadwearTowerUserCmd.cmd:type_name -> Cmd.Command
	0,   // 491: Cmd.HeadwearTowerUserCmd.param:type_name -> Cmd.User2Param
	340, // 492: Cmd.HeadwearEndUserCmd.cmd:type_name -> Cmd.Command
	0,   // 493: Cmd.HeadwearEndUserCmd.param:type_name -> Cmd.User2Param
	340, // 494: Cmd.HeadwearRangeUserCmd.cmd:type_name -> Cmd.Command
	0,   // 495: Cmd.HeadwearRangeUserCmd.param:type_name -> Cmd.User2Param
	45,  // 496: Cmd.ServantStatisticsItem.status:type_name -> Cmd.EProgressStatus
	340, // 497: Cmd.ServantStatisticsUserCmd.cmd:type_name -> Cmd.Command
	0,   // 498: Cmd.ServantStatisticsUserCmd.param:type_name -> Cmd.User2Param
	270, // 499: Cmd.ServantStatisticsUserCmd.datas:type_name -> Cmd.ServantStatisticsItem
	272, // 500: Cmd.ServantMail.calcdata:type_name -> Cmd.ServantCalcShareData
	340, // 501: Cmd.ServantStatisticsMailUserCmd.cmd:type_name -> Cmd.Command
	0,   // 502: Cmd.ServantStatisticsMailUserCmd.param:type_name -> Cmd.User2Param
	273, // 503: Cmd.ServantStatisticsMailUserCmd.mail:type_name -> Cmd.ServantMail
	340, // 504: Cmd.HeadwearOpenUserCmd.cmd:type_name -> Cmd.Command
	0,   // 505: Cmd.HeadwearOpenUserCmd.param:type_name -> Cmd.User2Param
	340, // 506: Cmd.FastTransClassUserCmd.cmd:type_name -> Cmd.Command
	0,   // 507: Cmd.FastTransClassUserCmd.param:type_name -> Cmd.User2Param
	340, // 508: Cmd.FastTransGemQueryUserCmd.cmd:type_name -> Cmd.Command
	0,   // 509: Cmd.FastTransGemQueryUserCmd.param:type_name -> Cmd.User2Param
	340, // 510: Cmd.FastTransGemGetUserCmd.cmd:type_name -> Cmd.Command
	0,   // 511: Cmd.FastTransGemGetUserCmd.param:type_name -> Cmd.User2Param
	340, // 512: Cmd.FourthSkillCostGetUserCmd.cmd:type_name -> Cmd.Command
	0,   // 513: Cmd.FourthSkillCostGetUserCmd.param:type_name -> Cmd.User2Param
	359, // 514: Cmd.BuildTimer.datas:type_name -> Cmd.RareEliteData
	360, // 515: Cmd.BuildNpcData.pos:type_name -> Cmd.Pos
	46,  // 516: Cmd.BuildNpcData.status:type_name -> Cmd.EBuildStatus
	361, // 517: Cmd.BuildNpcData.items:type_name -> Cmd.ItemInfo
	280, // 518: Cmd.BuildNpcData.weather:type_name -> Cmd.BuildWeather
	281, // 519: Cmd.BuildNpcData.block:type_name -> Cmd.BuildBlock
	282, // 520: Cmd.BuildNpcData.timer:type_name -> Cmd.BuildTimer
	340, // 521: Cmd.BuildDataQueryUserCmd.cmd:type_name -> Cmd.Command
	0,   // 522: Cmd.BuildDataQueryUserCmd.param:type_name -> Cmd.User2Param
	283, // 523: Cmd.BuildDataQueryUserCmd.data:type_name -> Cmd.BuildNpcData
	340, // 524: Cmd.BuildContributeUserCmd.cmd:type_name -> Cmd.Command
	0,   // 525: Cmd.BuildContributeUserCmd.param:type_name -> Cmd.User2Param
	361, // 526: Cmd.BuildContributeUserCmd.item:type_name -> Cmd.ItemInfo
	283, // 527: Cmd.BuildContributeUserCmd.data:type_name -> Cmd.BuildNpcData
	340, // 528: Cmd.BuildOperateUserCmd.cmd:type_name -> Cmd.Command
	0,   // 529: Cmd.BuildOperateUserCmd.param:type_name -> Cmd.User2Param
	283, // 530: Cmd.BuildOperateUserCmd.data:type_name -> Cmd.BuildNpcData
	340, // 531: Cmd.NightmareAttrQueryUserCmd.cmd:type_name -> Cmd.Command
	0,   // 532: Cmd.NightmareAttrQueryUserCmd.param:type_name -> Cmd.User2Param
	340, // 533: Cmd.NightmareAttrGetUserCmd.cmd:type_name -> Cmd.Command
	0,   // 534: Cmd.NightmareAttrGetUserCmd.param:type_name -> Cmd.User2Param
	340, // 535: Cmd.MapAnimeUserCmd.cmd:type_name -> Cmd.Command
	0,   // 536: Cmd.MapAnimeUserCmd.param:type_name -> Cmd.User2Param
	340, // 537: Cmd.ShootNpcUserCmd.cmd:type_name -> Cmd.Command
	0,   // 538: Cmd.ShootNpcUserCmd.param:type_name -> Cmd.User2Param
	340, // 539: Cmd.PaySignNtfUserCmd.cmd:type_name -> Cmd.Command
	0,   // 540: Cmd.PaySignNtfUserCmd.param:type_name -> Cmd.User2Param
	292, // 541: Cmd.PaySignNtfUserCmd.infos:type_name -> Cmd.PaySignInfo
	340, // 542: Cmd.PaySignBuyUserCmd.cmd:type_name -> Cmd.Command
	0,   // 543: Cmd.PaySignBuyUserCmd.param:type_name -> Cmd.User2Param
	292, // 544: Cmd.PaySignBuyUserCmd.info:type_name -> Cmd.PaySignInfo
	340, // 545: Cmd.PaySignRewardUserCmd.cmd:type_name -> Cmd.Command
	0,   // 546: Cmd.PaySignRewardUserCmd.param:type_name -> Cmd.User2Param
	292, // 547: Cmd.PaySignRewardUserCmd.info:type_name -> Cmd.PaySignInfo
	340, // 548: Cmd.ExtractionQueryUserCmd.cmd:type_name -> Cmd.Command
	0,   // 549: Cmd.ExtractionQueryUserCmd.param:type_name -> Cmd.User2Param
	296, // 550: Cmd.ExtractionQueryUserCmd.datas:type_name -> Cmd.ExtractionData
	340, // 551: Cmd.ExtractionOperateUserCmd.cmd:type_name -> Cmd.Command
	0,   // 552: Cmd.ExtractionOperateUserCmd.param:type_name -> Cmd.User2Param
	296, // 553: Cmd.ExtractionOperateUserCmd.data:type_name -> Cmd.ExtractionData
	340, // 554: Cmd.ExtractionActiveUserCmd.cmd:type_name -> Cmd.Command
	0,   // 555: Cmd.ExtractionActiveUserCmd.param:type_name -> Cmd.User2Param
	340, // 556: Cmd.ExtractionRemoveUserCmd.cmd:type_name -> Cmd.Command
	0,   // 557: Cmd.ExtractionRemoveUserCmd.param:type_name -> Cmd.User2Param
	340, // 558: Cmd.ExtractionGridBuyUserCmd.cmd:type_name -> Cmd.Command
	0,   // 559: Cmd.ExtractionGridBuyUserCmd.param:type_name -> Cmd.User2Param
	340, // 560: Cmd.ExtractionRefreshUserCmd.cmd:type_name -> Cmd.Command
	0,   // 561: Cmd.ExtractionRefreshUserCmd.param:type_name -> Cmd.User2Param
	296, // 562: Cmd.ExtractionRefreshUserCmd.data:type_name -> Cmd.ExtractionData
	340, // 563: Cmd.TeamExpRewardTypeCmd.cmd:type_name -> Cmd.Command
	0,   // 564: Cmd.TeamExpRewardTypeCmd.param:type_name -> Cmd.User2Param
	47,  // 565: Cmd.TeamExpRewardTypeCmd.type:type_name -> Cmd.ERewardTeamExpType
	340, // 566: Cmd.SetMyselfOptionCmd.cmd:type_name -> Cmd.Command
	0,   // 567: Cmd.SetMyselfOptionCmd.param:type_name -> Cmd.User2Param
	340, // 568: Cmd.UseSkillEffectItemUserCmd.cmd:type_name -> Cmd.Command
	0,   // 569: Cmd.UseSkillEffectItemUserCmd.param:type_name -> Cmd.User2Param
	340, // 570: Cmd.RideMultiMountUserCmd.cmd:type_name -> Cmd.Command
	0,   // 571: Cmd.RideMultiMountUserCmd.param:type_name -> Cmd.User2Param
	340, // 572: Cmd.KickOffPassengerUserCmd.cmd:type_name -> Cmd.Command
	0,   // 573: Cmd.KickOffPassengerUserCmd.param:type_name -> Cmd.User2Param
	340, // 574: Cmd.SetMultiMountOptUserCmd.cmd:type_name -> Cmd.Command
	0,   // 575: Cmd.SetMultiMountOptUserCmd.param:type_name -> Cmd.User2Param
	340, // 576: Cmd.MultiMountChangePosUserCmd.cmd:type_name -> Cmd.Command
	0,   // 577: Cmd.MultiMountChangePosUserCmd.param:type_name -> Cmd.User2Param
	310, // 578: Cmd.GrouponInfo.records:type_name -> Cmd.GrouponBuyRecord
	340, // 579: Cmd.GrouponQueryUserCmd.cmd:type_name -> Cmd.Command
	0,   // 580: Cmd.GrouponQueryUserCmd.param:type_name -> Cmd.User2Param
	311, // 581: Cmd.GrouponQueryUserCmd.info:type_name -> Cmd.GrouponInfo
	340, // 582: Cmd.GrouponBuyUserCmd.cmd:type_name -> Cmd.Command
	0,   // 583: Cmd.GrouponBuyUserCmd.param:type_name -> Cmd.User2Param
	311, // 584: Cmd.GrouponBuyUserCmd.info:type_name -> Cmd.GrouponInfo
	340, // 585: Cmd.GrouponRewardUserCmd.cmd:type_name -> Cmd.Command
	0,   // 586: Cmd.GrouponRewardUserCmd.param:type_name -> Cmd.User2Param
	311, // 587: Cmd.GrouponRewardUserCmd.info:type_name -> Cmd.GrouponInfo
	340, // 588: Cmd.NtfPlayActUserCmd.cmd:type_name -> Cmd.Command
	0,   // 589: Cmd.NtfPlayActUserCmd.param:type_name -> Cmd.User2Param
	50,  // 590: Cmd.NoviceTargetData.state:type_name -> Cmd.ENoviceTargetState
	340, // 591: Cmd.NoviceTargetUpdateUserCmd.cmd:type_name -> Cmd.Command
	0,   // 592: Cmd.NoviceTargetUpdateUserCmd.param:type_name -> Cmd.User2Param
	316, // 593: Cmd.NoviceTargetUpdateUserCmd.datas:type_name -> Cmd.NoviceTargetData
	340, // 594: Cmd.NoviceTargetRewardUserCmd.cmd:type_name -> Cmd.Command
	0,   // 595: Cmd.NoviceTargetRewardUserCmd.param:type_name -> Cmd.User2Param
	340, // 596: Cmd.SetBoKiStateUserCmd.cmd:type_name -> Cmd.Command
	0,   // 597: Cmd.SetBoKiStateUserCmd.param:type_name -> Cmd.User2Param
	340, // 598: Cmd.CloseDialogMaskUserCmd.cmd:type_name -> Cmd.Command
	0,   // 599: Cmd.CloseDialogMaskUserCmd.param:type_name -> Cmd.User2Param
	340, // 600: Cmd.CloseDialogCameraUserCmd.cmd:type_name -> Cmd.Command
	0,   // 601: Cmd.CloseDialogCameraUserCmd.param:type_name -> Cmd.User2Param
	340, // 602: Cmd.HideUIUserCmd.cmd:type_name -> Cmd.Command
	0,   // 603: Cmd.HideUIUserCmd.param:type_name -> Cmd.User2Param
	340, // 604: Cmd.QueryMapMonsterRefreshInfo.cmd:type_name -> Cmd.Command
	0,   // 605: Cmd.QueryMapMonsterRefreshInfo.param:type_name -> Cmd.User2Param
	340, // 606: Cmd.SetCameraUserCmd.cmd:type_name -> Cmd.Command
	0,   // 607: Cmd.SetCameraUserCmd.param:type_name -> Cmd.User2Param
	324, // 608: Cmd.SetCameraUserCmd.camera_dir:type_name -> Cmd.DirectionData
	340, // 609: Cmd.QueryProfessionDataDetailUserCmd.cmd:type_name -> Cmd.Command
	0,   // 610: Cmd.QueryProfessionDataDetailUserCmd.param:type_name -> Cmd.User2Param
	32,  // 611: Cmd.QueryProfessionDataDetailUserCmd.type:type_name -> Cmd.EProfessionDataType
	340, // 612: Cmd.ClearProfessionDataDetailUserCmd.cmd:type_name -> Cmd.Command
	0,   // 613: Cmd.ClearProfessionDataDetailUserCmd.param:type_name -> Cmd.User2Param
	340, // 614: Cmd.ChainExchangeUserCmd.cmd:type_name -> Cmd.Command
	0,   // 615: Cmd.ChainExchangeUserCmd.param:type_name -> Cmd.User2Param
	340, // 616: Cmd.ChainOptUserCmd.cmd:type_name -> Cmd.Command
	0,   // 617: Cmd.ChainOptUserCmd.param:type_name -> Cmd.User2Param
	340, // 618: Cmd.ActivityDonateQueryUserCmd.cmd:type_name -> Cmd.Command
	0,   // 619: Cmd.ActivityDonateQueryUserCmd.param:type_name -> Cmd.User2Param
	340, // 620: Cmd.ActivityDonateRewardUserCmd.cmd:type_name -> Cmd.Command
	0,   // 621: Cmd.ActivityDonateRewardUserCmd.param:type_name -> Cmd.User2Param
	361, // 622: Cmd.ActivityDonateRewardUserCmd.itemcost:type_name -> Cmd.ItemInfo
	340, // 623: Cmd.ChangeHairUserCmd.cmd:type_name -> Cmd.Command
	0,   // 624: Cmd.ChangeHairUserCmd.param:type_name -> Cmd.User2Param
	340, // 625: Cmd.ChangeEyeUserCmd.cmd:type_name -> Cmd.Command
	0,   // 626: Cmd.ChangeEyeUserCmd.param:type_name -> Cmd.User2Param
	340, // 627: Cmd.HappyValueUserCmd.cmd:type_name -> Cmd.Command
	0,   // 628: Cmd.HappyValueUserCmd.param:type_name -> Cmd.User2Param
	340, // 629: Cmd.SendTargetPosUserCmd.cmd:type_name -> Cmd.Command
	0,   // 630: Cmd.SendTargetPosUserCmd.param:type_name -> Cmd.User2Param
	343, // 631: Cmd.SendTargetPosUserCmd.pos:type_name -> Cmd.ScenePos
	340, // 632: Cmd.CookGameFinishUserCmd.cmd:type_name -> Cmd.Command
	0,   // 633: Cmd.CookGameFinishUserCmd.param:type_name -> Cmd.User2Param
	340, // 634: Cmd.RaceGameStartUserCmd.cmd:type_name -> Cmd.Command
	0,   // 635: Cmd.RaceGameStartUserCmd.param:type_name -> Cmd.User2Param
	340, // 636: Cmd.RaceGameFinishUserCmd.cmd:type_name -> Cmd.Command
	0,   // 637: Cmd.RaceGameFinishUserCmd.param:type_name -> Cmd.User2Param
	638, // [638:638] is the sub-list for method output_type
	638, // [638:638] is the sub-list for method input_type
	638, // [638:638] is the sub-list for extension type_name
	638, // [638:638] is the sub-list for extension extendee
	0,   // [0:638] is the sub-list for field type_name
}

func init() { file_SceneUser2_proto_init() }
func file_SceneUser2_proto_init() {
	if File_SceneUser2_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_SceneUser_proto_init()
	file_ProtoCommon_proto_init()
	file_Var_proto_init()
	file_SessionSociality_proto_init()
	file_SceneSkill_proto_init()
	file_SceneBeing_proto_init()
	file_AstrolabeCmd_proto_init()
	file_SceneItem_proto_init()
	file_BossCmd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SceneUser2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgLangParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpcDataSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNineSyncCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserActionNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BufferData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBuffNineSyncCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitPosUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TalkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffectUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenuList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMenu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamInfoNine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsePortrait); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPortraitFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPortraitListUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseDressing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDressing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DressingListUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAttrPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopGotItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryShopGotItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateShopGotItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenUI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbgSysMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowTransferCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallNpcFuncCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelShow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoundEffectCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresetMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresetMsgCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeBgmCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FighterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFighterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameTimeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDTimeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDTimeUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Photo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShakeScreen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortcutItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryShortcut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutShortcut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempPutShortCut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpcChangeAngle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraFocus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoToListUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoToGearUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTransMapCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeathTransferListCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDeathTransferCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseDeathTransferCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowerUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeFollowUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaboratoryUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GotoLaboratoryUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeProfession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scenery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneryUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoMapQuestUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoMapFollowUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAutoHitCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadSceneryPhotoUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpyunUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadSceneryPhotoUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMapArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMapAreaNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuffForeverCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteJoinHandsUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakUpHandsUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandStatusUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryShow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MusicItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMusicList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemandMusic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseMusicFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadOkSceneryUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinHandsUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTraceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTraceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDirection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleTimelenUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOptionUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserInfoUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDownTickUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemMusicNtfUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShakeTreeUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeListUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityNtfUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZoneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentZoneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryZoneStatusUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JumpZoneUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemImageUserNtfUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteFollowUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeNameUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargePlayUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequireNpcFuncUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSeatUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfSeatUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YoyoSeatUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowSeatUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNormalSkillOptionUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSetOptionUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsolvedSceneryNtfUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisibleNpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfVisibleNpcUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformPreDataCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRenameCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyZenyCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallTeamerUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallTeamerReplyUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialEffectCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarriageProposalCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarriageProposalReplyCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadWeddingPhotoUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarriageProposalSuccessCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteeWeddingStartNtfUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KFCShareUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KFCEnrollUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KFCEnrollCodeUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KFCEnrollReplyUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KFCEnrollQueryUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KFCHasEnrolledUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRelationUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwinsActionUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowServantUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceServantUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HireServantUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServantService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendServantUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveServantUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FavorabilityStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServantRewardStatusUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfessionQueryUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfessionBuyUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfessionChangeUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AstrolabeProfessionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttrProfessionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipPackData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillValidPosData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkillProfessionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfessionUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAstrolMaterialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecordInfoUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveRecordUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadRecordUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeRecordNameUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyRecordSlotUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRecordUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBranchInfoUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterCapraActivityCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteWithMeUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAltmanKillUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoothInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoothReqUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoothInfoSyncUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DressUpModelUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DressUpHeadUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStageUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DressUpLineUpUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageUserDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DressUpStageUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoToFunctionMapUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrowthCurInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrowthItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrowthValueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrowthGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrowthServantUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveGrowthServantUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrowthOpenServantUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheatTagUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ButtonThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheatTagStatUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickPosList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickButtonPos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfoNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadyToMapUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInNtfUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeatPoriUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockFrameUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AltmanRewardUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServantReservationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServantReqReservationUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServantReservationUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServantEquipItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServantRecEquipUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrestigeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrestigeNtfUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrestigeGiveUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGameHealthLevelUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameHealthEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameHealthEventStatUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fishway2KillBossInformUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActPointUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighRefineAttrUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadwearNpcItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadwearNpcUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadwearRoundUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadwearTowerUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadwearEndUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadwearRangeUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServantStatisticsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServantStatisticsUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServantCalcShareData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServantMail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServantStatisticsMailUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadwearOpenUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastTransClassUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastTransGemQueryUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastTransGemGetUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FourthSkillCostGetUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildWeather); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildNpcData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildDataQueryUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildContributeUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildOperateUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NightmareAttrQueryUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NightmareAttrGetUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapAnimeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapAnimeUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShootNpcUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaySignInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaySignNtfUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaySignBuyUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaySignRewardUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractionQueryUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractionOperateUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractionActiveUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractionRemoveUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractionGridBuyUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractionRefreshUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamExpRewardTypeCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMyselfOptionCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseSkillEffectItemUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RideMultiMountUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickOffPassengerUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMultiMountOptUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiMountChangePosUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrouponBuyRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrouponInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrouponQueryUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrouponBuyUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrouponRewardUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfPlayActUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoviceTargetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoviceTargetUpdateUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoviceTargetRewardUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBoKiStateUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseDialogMaskUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseDialogCameraUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HideUIUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMapMonsterRefreshInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCameraUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProfessionDataDetailUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearProfessionDataDetailUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainExchangeUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainOptUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDonateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDonateQueryUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityDonateRewardUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeHairUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeEyeUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HappyValueUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTargetPosUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookGameFinishUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceGameStartUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneUser2_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceGameFinishUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SceneUser2_proto_rawDesc,
			NumEnums:      51,
			NumMessages:   289,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SceneUser2_proto_goTypes,
		DependencyIndexes: file_SceneUser2_proto_depIdxs,
		EnumInfos:         file_SceneUser2_proto_enumTypes,
		MessageInfos:      file_SceneUser2_proto_msgTypes,
	}.Build()
	File_SceneUser2_proto = out.File
	file_SceneUser2_proto_rawDesc = nil
	file_SceneUser2_proto_goTypes = nil
	file_SceneUser2_proto_depIdxs = nil
}
