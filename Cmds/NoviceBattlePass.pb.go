// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: NoviceBattlePass.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NoviceBPParam int32

const (
	NoviceBPParam_NOVICEBPPARAM_TARGET_UPDATE            NoviceBPParam = 1
	NoviceBPParam_NOVICEBPPARAM_REWARD_UPDATE            NoviceBPParam = 2
	NoviceBPParam_NOVICEBPPARAM_TARGET_GET               NoviceBPParam = 3
	NoviceBPParam_NOVICEBPPARAM_BUY_LEVEL                NoviceBPParam = 4
	NoviceBPParam_NOVICEBPPARAM_CHALLENGE_UPDATE         NoviceBPParam = 5
	NoviceBPParam_NOVICEBPPARAM_RETURN_TARGET_UPDATE     NoviceBPParam = 6
	NoviceBPParam_NOVICEBPPARAM_RETURN_REWARD_UPDATE     NoviceBPParam = 7
	NoviceBPParam_NOVICEBPPARAM_RETURN_TARGET_REWARD_GET NoviceBPParam = 8
	NoviceBPParam_NOVICEBPPARAM_RETURN_REWARD_GET        NoviceBPParam = 9
	NoviceBPParam_NOVICEBPPARAM_RETURN_BP_BUY_LEVEL      NoviceBPParam = 10
)

// Enum value maps for NoviceBPParam.
var (
	NoviceBPParam_name = map[int32]string{
		1:  "NOVICEBPPARAM_TARGET_UPDATE",
		2:  "NOVICEBPPARAM_REWARD_UPDATE",
		3:  "NOVICEBPPARAM_TARGET_GET",
		4:  "NOVICEBPPARAM_BUY_LEVEL",
		5:  "NOVICEBPPARAM_CHALLENGE_UPDATE",
		6:  "NOVICEBPPARAM_RETURN_TARGET_UPDATE",
		7:  "NOVICEBPPARAM_RETURN_REWARD_UPDATE",
		8:  "NOVICEBPPARAM_RETURN_TARGET_REWARD_GET",
		9:  "NOVICEBPPARAM_RETURN_REWARD_GET",
		10: "NOVICEBPPARAM_RETURN_BP_BUY_LEVEL",
	}
	NoviceBPParam_value = map[string]int32{
		"NOVICEBPPARAM_TARGET_UPDATE":            1,
		"NOVICEBPPARAM_REWARD_UPDATE":            2,
		"NOVICEBPPARAM_TARGET_GET":               3,
		"NOVICEBPPARAM_BUY_LEVEL":                4,
		"NOVICEBPPARAM_CHALLENGE_UPDATE":         5,
		"NOVICEBPPARAM_RETURN_TARGET_UPDATE":     6,
		"NOVICEBPPARAM_RETURN_REWARD_UPDATE":     7,
		"NOVICEBPPARAM_RETURN_TARGET_REWARD_GET": 8,
		"NOVICEBPPARAM_RETURN_REWARD_GET":        9,
		"NOVICEBPPARAM_RETURN_BP_BUY_LEVEL":      10,
	}
)

func (x NoviceBPParam) Enum() *NoviceBPParam {
	p := new(NoviceBPParam)
	*p = x
	return p
}

func (x NoviceBPParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NoviceBPParam) Descriptor() protoreflect.EnumDescriptor {
	return file_NoviceBattlePass_proto_enumTypes[0].Descriptor()
}

func (NoviceBPParam) Type() protoreflect.EnumType {
	return &file_NoviceBattlePass_proto_enumTypes[0]
}

func (x NoviceBPParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NoviceBPParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NoviceBPParam(num)
	return nil
}

// Deprecated: Use NoviceBPParam.Descriptor instead.
func (NoviceBPParam) EnumDescriptor() ([]byte, []int) {
	return file_NoviceBattlePass_proto_rawDescGZIP(), []int{0}
}

type NoviceBPTargetUpdateCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=77" json:"cmd,omitempty"`
	Param   *NoviceBPParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.NoviceBPParam,def=1" json:"param,omitempty"`
	Datas   []*NoviceTargetData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
	EndTime *uint32             `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	IsPro   *bool               `protobuf:"varint,5,opt,name=is_pro,json=isPro" json:"is_pro,omitempty"`
}

// Default values for NoviceBPTargetUpdateCmd fields.
const (
	Default_NoviceBPTargetUpdateCmd_Cmd   = Command_NOVICE_BATTLE_PASS_PROTOCMD
	Default_NoviceBPTargetUpdateCmd_Param = NoviceBPParam_NOVICEBPPARAM_TARGET_UPDATE
)

func (x *NoviceBPTargetUpdateCmd) Reset() {
	*x = NoviceBPTargetUpdateCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NoviceBattlePass_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoviceBPTargetUpdateCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoviceBPTargetUpdateCmd) ProtoMessage() {}

func (x *NoviceBPTargetUpdateCmd) ProtoReflect() protoreflect.Message {
	mi := &file_NoviceBattlePass_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoviceBPTargetUpdateCmd.ProtoReflect.Descriptor instead.
func (*NoviceBPTargetUpdateCmd) Descriptor() ([]byte, []int) {
	return file_NoviceBattlePass_proto_rawDescGZIP(), []int{0}
}

func (x *NoviceBPTargetUpdateCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NoviceBPTargetUpdateCmd_Cmd
}

func (x *NoviceBPTargetUpdateCmd) GetParam() NoviceBPParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NoviceBPTargetUpdateCmd_Param
}

func (x *NoviceBPTargetUpdateCmd) GetDatas() []*NoviceTargetData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *NoviceBPTargetUpdateCmd) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *NoviceBPTargetUpdateCmd) GetIsPro() bool {
	if x != nil && x.IsPro != nil {
		return *x.IsPro
	}
	return false
}

type NoviceBPRewardUpdateCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd               *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=77" json:"cmd,omitempty"`
	Param             *NoviceBPParam `protobuf:"varint,2,opt,name=param,enum=Cmd.NoviceBPParam,def=2" json:"param,omitempty"`
	RewardedNormalLvs []uint32       `protobuf:"varint,3,rep,name=rewarded_normal_lvs,json=rewardedNormalLvs" json:"rewarded_normal_lvs,omitempty"`
	RewardedProLvs    []uint32       `protobuf:"varint,4,rep,name=rewarded_pro_lvs,json=rewardedProLvs" json:"rewarded_pro_lvs,omitempty"`
}

// Default values for NoviceBPRewardUpdateCmd fields.
const (
	Default_NoviceBPRewardUpdateCmd_Cmd   = Command_NOVICE_BATTLE_PASS_PROTOCMD
	Default_NoviceBPRewardUpdateCmd_Param = NoviceBPParam_NOVICEBPPARAM_REWARD_UPDATE
)

func (x *NoviceBPRewardUpdateCmd) Reset() {
	*x = NoviceBPRewardUpdateCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NoviceBattlePass_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoviceBPRewardUpdateCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoviceBPRewardUpdateCmd) ProtoMessage() {}

func (x *NoviceBPRewardUpdateCmd) ProtoReflect() protoreflect.Message {
	mi := &file_NoviceBattlePass_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoviceBPRewardUpdateCmd.ProtoReflect.Descriptor instead.
func (*NoviceBPRewardUpdateCmd) Descriptor() ([]byte, []int) {
	return file_NoviceBattlePass_proto_rawDescGZIP(), []int{1}
}

func (x *NoviceBPRewardUpdateCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NoviceBPRewardUpdateCmd_Cmd
}

func (x *NoviceBPRewardUpdateCmd) GetParam() NoviceBPParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NoviceBPRewardUpdateCmd_Param
}

func (x *NoviceBPRewardUpdateCmd) GetRewardedNormalLvs() []uint32 {
	if x != nil {
		return x.RewardedNormalLvs
	}
	return nil
}

func (x *NoviceBPRewardUpdateCmd) GetRewardedProLvs() []uint32 {
	if x != nil {
		return x.RewardedProLvs
	}
	return nil
}

type NoviceBPTargetRewardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=77" json:"cmd,omitempty"`
	Param *NoviceBPParam `protobuf:"varint,2,opt,name=param,enum=Cmd.NoviceBPParam,def=3" json:"param,omitempty"`
	IsAll *bool          `protobuf:"varint,3,opt,name=is_all,json=isAll" json:"is_all,omitempty"`
	Lv    *uint32        `protobuf:"varint,4,opt,name=lv" json:"lv,omitempty"`
}

// Default values for NoviceBPTargetRewardCmd fields.
const (
	Default_NoviceBPTargetRewardCmd_Cmd   = Command_NOVICE_BATTLE_PASS_PROTOCMD
	Default_NoviceBPTargetRewardCmd_Param = NoviceBPParam_NOVICEBPPARAM_TARGET_GET
)

func (x *NoviceBPTargetRewardCmd) Reset() {
	*x = NoviceBPTargetRewardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NoviceBattlePass_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoviceBPTargetRewardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoviceBPTargetRewardCmd) ProtoMessage() {}

func (x *NoviceBPTargetRewardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_NoviceBattlePass_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoviceBPTargetRewardCmd.ProtoReflect.Descriptor instead.
func (*NoviceBPTargetRewardCmd) Descriptor() ([]byte, []int) {
	return file_NoviceBattlePass_proto_rawDescGZIP(), []int{2}
}

func (x *NoviceBPTargetRewardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NoviceBPTargetRewardCmd_Cmd
}

func (x *NoviceBPTargetRewardCmd) GetParam() NoviceBPParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NoviceBPTargetRewardCmd_Param
}

func (x *NoviceBPTargetRewardCmd) GetIsAll() bool {
	if x != nil && x.IsAll != nil {
		return *x.IsAll
	}
	return false
}

func (x *NoviceBPTargetRewardCmd) GetLv() uint32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return 0
}

type NoviceBpBuyLevelCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=77" json:"cmd,omitempty"`
	Param *NoviceBPParam `protobuf:"varint,2,opt,name=param,enum=Cmd.NoviceBPParam,def=4" json:"param,omitempty"`
	Level *uint32        `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
}

// Default values for NoviceBpBuyLevelCmd fields.
const (
	Default_NoviceBpBuyLevelCmd_Cmd   = Command_NOVICE_BATTLE_PASS_PROTOCMD
	Default_NoviceBpBuyLevelCmd_Param = NoviceBPParam_NOVICEBPPARAM_BUY_LEVEL
)

func (x *NoviceBpBuyLevelCmd) Reset() {
	*x = NoviceBpBuyLevelCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NoviceBattlePass_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoviceBpBuyLevelCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoviceBpBuyLevelCmd) ProtoMessage() {}

func (x *NoviceBpBuyLevelCmd) ProtoReflect() protoreflect.Message {
	mi := &file_NoviceBattlePass_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoviceBpBuyLevelCmd.ProtoReflect.Descriptor instead.
func (*NoviceBpBuyLevelCmd) Descriptor() ([]byte, []int) {
	return file_NoviceBattlePass_proto_rawDescGZIP(), []int{3}
}

func (x *NoviceBpBuyLevelCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NoviceBpBuyLevelCmd_Cmd
}

func (x *NoviceBpBuyLevelCmd) GetParam() NoviceBPParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NoviceBpBuyLevelCmd_Param
}

func (x *NoviceBpBuyLevelCmd) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type ChallengeTargetUpdateCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=77" json:"cmd,omitempty"`
	Param *NoviceBPParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.NoviceBPParam,def=5" json:"param,omitempty"`
	Datas []*NoviceTargetData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for ChallengeTargetUpdateCmd fields.
const (
	Default_ChallengeTargetUpdateCmd_Cmd   = Command_NOVICE_BATTLE_PASS_PROTOCMD
	Default_ChallengeTargetUpdateCmd_Param = NoviceBPParam_NOVICEBPPARAM_CHALLENGE_UPDATE
)

func (x *ChallengeTargetUpdateCmd) Reset() {
	*x = ChallengeTargetUpdateCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NoviceBattlePass_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeTargetUpdateCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeTargetUpdateCmd) ProtoMessage() {}

func (x *ChallengeTargetUpdateCmd) ProtoReflect() protoreflect.Message {
	mi := &file_NoviceBattlePass_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeTargetUpdateCmd.ProtoReflect.Descriptor instead.
func (*ChallengeTargetUpdateCmd) Descriptor() ([]byte, []int) {
	return file_NoviceBattlePass_proto_rawDescGZIP(), []int{4}
}

func (x *ChallengeTargetUpdateCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ChallengeTargetUpdateCmd_Cmd
}

func (x *ChallengeTargetUpdateCmd) GetParam() NoviceBPParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ChallengeTargetUpdateCmd_Param
}

func (x *ChallengeTargetUpdateCmd) GetDatas() []*NoviceTargetData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type ReturnBpTargetUpdateCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd             *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=77" json:"cmd,omitempty"`
	Param           *NoviceBPParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.NoviceBPParam,def=6" json:"param,omitempty"`
	Datas           []*NoviceTargetData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
	EndTime         *uint32             `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	IsPro           *bool               `protobuf:"varint,5,opt,name=is_pro,json=isPro" json:"is_pro,omitempty"`
	Version         *uint32             `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	BpClass         *uint32             `protobuf:"varint,7,opt,name=bp_class,json=bpClass" json:"bp_class,omitempty"`
	ReturnRewardGot *bool               `protobuf:"varint,8,opt,name=return_reward_got,json=returnRewardGot" json:"return_reward_got,omitempty"`
}

// Default values for ReturnBpTargetUpdateCmd fields.
const (
	Default_ReturnBpTargetUpdateCmd_Cmd   = Command_NOVICE_BATTLE_PASS_PROTOCMD
	Default_ReturnBpTargetUpdateCmd_Param = NoviceBPParam_NOVICEBPPARAM_RETURN_TARGET_UPDATE
)

func (x *ReturnBpTargetUpdateCmd) Reset() {
	*x = ReturnBpTargetUpdateCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NoviceBattlePass_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnBpTargetUpdateCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnBpTargetUpdateCmd) ProtoMessage() {}

func (x *ReturnBpTargetUpdateCmd) ProtoReflect() protoreflect.Message {
	mi := &file_NoviceBattlePass_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnBpTargetUpdateCmd.ProtoReflect.Descriptor instead.
func (*ReturnBpTargetUpdateCmd) Descriptor() ([]byte, []int) {
	return file_NoviceBattlePass_proto_rawDescGZIP(), []int{5}
}

func (x *ReturnBpTargetUpdateCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReturnBpTargetUpdateCmd_Cmd
}

func (x *ReturnBpTargetUpdateCmd) GetParam() NoviceBPParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReturnBpTargetUpdateCmd_Param
}

func (x *ReturnBpTargetUpdateCmd) GetDatas() []*NoviceTargetData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *ReturnBpTargetUpdateCmd) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *ReturnBpTargetUpdateCmd) GetIsPro() bool {
	if x != nil && x.IsPro != nil {
		return *x.IsPro
	}
	return false
}

func (x *ReturnBpTargetUpdateCmd) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *ReturnBpTargetUpdateCmd) GetBpClass() uint32 {
	if x != nil && x.BpClass != nil {
		return *x.BpClass
	}
	return 0
}

func (x *ReturnBpTargetUpdateCmd) GetReturnRewardGot() bool {
	if x != nil && x.ReturnRewardGot != nil {
		return *x.ReturnRewardGot
	}
	return false
}

type ReturnBPRewardUpdateCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd               *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=77" json:"cmd,omitempty"`
	Param             *NoviceBPParam `protobuf:"varint,2,opt,name=param,enum=Cmd.NoviceBPParam,def=7" json:"param,omitempty"`
	RewardedNormalLvs []uint32       `protobuf:"varint,3,rep,name=rewarded_normal_lvs,json=rewardedNormalLvs" json:"rewarded_normal_lvs,omitempty"`
	RewardedProLvs    []uint32       `protobuf:"varint,4,rep,name=rewarded_pro_lvs,json=rewardedProLvs" json:"rewarded_pro_lvs,omitempty"`
}

// Default values for ReturnBPRewardUpdateCmd fields.
const (
	Default_ReturnBPRewardUpdateCmd_Cmd   = Command_NOVICE_BATTLE_PASS_PROTOCMD
	Default_ReturnBPRewardUpdateCmd_Param = NoviceBPParam_NOVICEBPPARAM_RETURN_REWARD_UPDATE
)

func (x *ReturnBPRewardUpdateCmd) Reset() {
	*x = ReturnBPRewardUpdateCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NoviceBattlePass_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnBPRewardUpdateCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnBPRewardUpdateCmd) ProtoMessage() {}

func (x *ReturnBPRewardUpdateCmd) ProtoReflect() protoreflect.Message {
	mi := &file_NoviceBattlePass_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnBPRewardUpdateCmd.ProtoReflect.Descriptor instead.
func (*ReturnBPRewardUpdateCmd) Descriptor() ([]byte, []int) {
	return file_NoviceBattlePass_proto_rawDescGZIP(), []int{6}
}

func (x *ReturnBPRewardUpdateCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReturnBPRewardUpdateCmd_Cmd
}

func (x *ReturnBPRewardUpdateCmd) GetParam() NoviceBPParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReturnBPRewardUpdateCmd_Param
}

func (x *ReturnBPRewardUpdateCmd) GetRewardedNormalLvs() []uint32 {
	if x != nil {
		return x.RewardedNormalLvs
	}
	return nil
}

func (x *ReturnBPRewardUpdateCmd) GetRewardedProLvs() []uint32 {
	if x != nil {
		return x.RewardedProLvs
	}
	return nil
}

type ReturnBPTargetRewardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=77" json:"cmd,omitempty"`
	Param *NoviceBPParam `protobuf:"varint,2,opt,name=param,enum=Cmd.NoviceBPParam,def=8" json:"param,omitempty"`
	IsAll *bool          `protobuf:"varint,3,opt,name=is_all,json=isAll" json:"is_all,omitempty"`
	Lv    *uint32        `protobuf:"varint,4,opt,name=lv" json:"lv,omitempty"`
}

// Default values for ReturnBPTargetRewardCmd fields.
const (
	Default_ReturnBPTargetRewardCmd_Cmd   = Command_NOVICE_BATTLE_PASS_PROTOCMD
	Default_ReturnBPTargetRewardCmd_Param = NoviceBPParam_NOVICEBPPARAM_RETURN_TARGET_REWARD_GET
)

func (x *ReturnBPTargetRewardCmd) Reset() {
	*x = ReturnBPTargetRewardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NoviceBattlePass_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnBPTargetRewardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnBPTargetRewardCmd) ProtoMessage() {}

func (x *ReturnBPTargetRewardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_NoviceBattlePass_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnBPTargetRewardCmd.ProtoReflect.Descriptor instead.
func (*ReturnBPTargetRewardCmd) Descriptor() ([]byte, []int) {
	return file_NoviceBattlePass_proto_rawDescGZIP(), []int{7}
}

func (x *ReturnBPTargetRewardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReturnBPTargetRewardCmd_Cmd
}

func (x *ReturnBPTargetRewardCmd) GetParam() NoviceBPParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReturnBPTargetRewardCmd_Param
}

func (x *ReturnBPTargetRewardCmd) GetIsAll() bool {
	if x != nil && x.IsAll != nil {
		return *x.IsAll
	}
	return false
}

func (x *ReturnBPTargetRewardCmd) GetLv() uint32 {
	if x != nil && x.Lv != nil {
		return *x.Lv
	}
	return 0
}

type ReturnBPReturnRewardCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=77" json:"cmd,omitempty"`
	Param *NoviceBPParam `protobuf:"varint,2,opt,name=param,enum=Cmd.NoviceBPParam,def=9" json:"param,omitempty"`
}

// Default values for ReturnBPReturnRewardCmd fields.
const (
	Default_ReturnBPReturnRewardCmd_Cmd   = Command_NOVICE_BATTLE_PASS_PROTOCMD
	Default_ReturnBPReturnRewardCmd_Param = NoviceBPParam_NOVICEBPPARAM_RETURN_REWARD_GET
)

func (x *ReturnBPReturnRewardCmd) Reset() {
	*x = ReturnBPReturnRewardCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NoviceBattlePass_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnBPReturnRewardCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnBPReturnRewardCmd) ProtoMessage() {}

func (x *ReturnBPReturnRewardCmd) ProtoReflect() protoreflect.Message {
	mi := &file_NoviceBattlePass_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnBPReturnRewardCmd.ProtoReflect.Descriptor instead.
func (*ReturnBPReturnRewardCmd) Descriptor() ([]byte, []int) {
	return file_NoviceBattlePass_proto_rawDescGZIP(), []int{8}
}

func (x *ReturnBPReturnRewardCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReturnBPReturnRewardCmd_Cmd
}

func (x *ReturnBPReturnRewardCmd) GetParam() NoviceBPParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReturnBPReturnRewardCmd_Param
}

type ReturnBpBuyLevelCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=77" json:"cmd,omitempty"`
	Param *NoviceBPParam `protobuf:"varint,2,opt,name=param,enum=Cmd.NoviceBPParam,def=10" json:"param,omitempty"`
	Level *uint32        `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
}

// Default values for ReturnBpBuyLevelCmd fields.
const (
	Default_ReturnBpBuyLevelCmd_Cmd   = Command_NOVICE_BATTLE_PASS_PROTOCMD
	Default_ReturnBpBuyLevelCmd_Param = NoviceBPParam_NOVICEBPPARAM_RETURN_BP_BUY_LEVEL
)

func (x *ReturnBpBuyLevelCmd) Reset() {
	*x = ReturnBpBuyLevelCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NoviceBattlePass_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnBpBuyLevelCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnBpBuyLevelCmd) ProtoMessage() {}

func (x *ReturnBpBuyLevelCmd) ProtoReflect() protoreflect.Message {
	mi := &file_NoviceBattlePass_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnBpBuyLevelCmd.ProtoReflect.Descriptor instead.
func (*ReturnBpBuyLevelCmd) Descriptor() ([]byte, []int) {
	return file_NoviceBattlePass_proto_rawDescGZIP(), []int{9}
}

func (x *ReturnBpBuyLevelCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReturnBpBuyLevelCmd_Cmd
}

func (x *ReturnBpBuyLevelCmd) GetParam() NoviceBPParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReturnBpBuyLevelCmd_Param
}

func (x *ReturnBpBuyLevelCmd) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

var File_NoviceBattlePass_proto protoreflect.FileDescriptor

var file_NoviceBattlePass_proto_rawDesc = []byte{
	0x0a, 0x16, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78,
	0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x01, 0x0a, 0x17,
	0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x42, 0x50, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x1b, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x42,
	0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x22, 0xf7, 0x01, 0x0a, 0x17, 0x4e,
	0x6f, 0x76, 0x69, 0x63, 0x65, 0x42, 0x50, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x1b, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x42, 0x50,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6c, 0x76,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x76, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x5f, 0x6c, 0x76, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x4c, 0x76, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x17, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x50, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6d, 0x64,
	0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x4e, 0x4f, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x42, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x18, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6c, 0x76, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x4e, 0x6f, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x70, 0x42, 0x75, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6d, 0x64,
	0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x4e, 0x4f, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x42, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x17, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x42, 0x55, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xce, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b,
	0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x42, 0x50, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x42, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b,
	0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x4c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x42, 0x50, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x22, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2b,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x70, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x70, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x67, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x6f, 0x74, 0x22, 0xfe,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x50, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4e, 0x6f, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x4e, 0x4f, 0x56, 0x49,
	0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6c, 0x76, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x4c, 0x76, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x5f, 0x6c, 0x76, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x4c, 0x76, 0x73, 0x22,
	0xcf, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x50, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x50, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4e, 0x6f,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x26, 0x4e, 0x4f, 0x56,
	0x49, 0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52,
	0x4e, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f,
	0x47, 0x45, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x6c,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6c,
	0x76, 0x22, 0xa1, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x42, 0x50, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x42, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x4e,
	0x4f, 0x56, 0x49, 0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x54,
	0x55, 0x52, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x42, 0x70, 0x42, 0x75, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x3b, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x1b, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x42, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x21, 0x4e,
	0x4f, 0x56, 0x49, 0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x54,
	0x55, 0x52, 0x4e, 0x5f, 0x42, 0x50, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2a, 0xf8, 0x02,
	0x0a, 0x0d, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x42, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x03, 0x12,
	0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x42, 0x55, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e,
	0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x48,
	0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x05,
	0x12, 0x26, 0x0a, 0x22, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x4f, 0x56, 0x49,
	0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x07,
	0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f,
	0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45,
	0x54, 0x55, 0x52, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x10,
	0x09, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x4f, 0x56, 0x49, 0x43, 0x45, 0x42, 0x50, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x42, 0x50, 0x5f, 0x42, 0x55, 0x59,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x0a,
}

var (
	file_NoviceBattlePass_proto_rawDescOnce sync.Once
	file_NoviceBattlePass_proto_rawDescData = file_NoviceBattlePass_proto_rawDesc
)

func file_NoviceBattlePass_proto_rawDescGZIP() []byte {
	file_NoviceBattlePass_proto_rawDescOnce.Do(func() {
		file_NoviceBattlePass_proto_rawDescData = protoimpl.X.CompressGZIP(file_NoviceBattlePass_proto_rawDescData)
	})
	return file_NoviceBattlePass_proto_rawDescData
}

var file_NoviceBattlePass_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_NoviceBattlePass_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_NoviceBattlePass_proto_goTypes = []interface{}{
	(NoviceBPParam)(0),               // 0: Cmd.NoviceBPParam
	(*NoviceBPTargetUpdateCmd)(nil),  // 1: Cmd.NoviceBPTargetUpdateCmd
	(*NoviceBPRewardUpdateCmd)(nil),  // 2: Cmd.NoviceBPRewardUpdateCmd
	(*NoviceBPTargetRewardCmd)(nil),  // 3: Cmd.NoviceBPTargetRewardCmd
	(*NoviceBpBuyLevelCmd)(nil),      // 4: Cmd.NoviceBpBuyLevelCmd
	(*ChallengeTargetUpdateCmd)(nil), // 5: Cmd.ChallengeTargetUpdateCmd
	(*ReturnBpTargetUpdateCmd)(nil),  // 6: Cmd.ReturnBpTargetUpdateCmd
	(*ReturnBPRewardUpdateCmd)(nil),  // 7: Cmd.ReturnBPRewardUpdateCmd
	(*ReturnBPTargetRewardCmd)(nil),  // 8: Cmd.ReturnBPTargetRewardCmd
	(*ReturnBPReturnRewardCmd)(nil),  // 9: Cmd.ReturnBPReturnRewardCmd
	(*ReturnBpBuyLevelCmd)(nil),      // 10: Cmd.ReturnBpBuyLevelCmd
	(Command)(0),                     // 11: Cmd.Command
	(*NoviceTargetData)(nil),         // 12: Cmd.NoviceTargetData
}
var file_NoviceBattlePass_proto_depIdxs = []int32{
	11, // 0: Cmd.NoviceBPTargetUpdateCmd.cmd:type_name -> Cmd.Command
	0,  // 1: Cmd.NoviceBPTargetUpdateCmd.param:type_name -> Cmd.NoviceBPParam
	12, // 2: Cmd.NoviceBPTargetUpdateCmd.datas:type_name -> Cmd.NoviceTargetData
	11, // 3: Cmd.NoviceBPRewardUpdateCmd.cmd:type_name -> Cmd.Command
	0,  // 4: Cmd.NoviceBPRewardUpdateCmd.param:type_name -> Cmd.NoviceBPParam
	11, // 5: Cmd.NoviceBPTargetRewardCmd.cmd:type_name -> Cmd.Command
	0,  // 6: Cmd.NoviceBPTargetRewardCmd.param:type_name -> Cmd.NoviceBPParam
	11, // 7: Cmd.NoviceBpBuyLevelCmd.cmd:type_name -> Cmd.Command
	0,  // 8: Cmd.NoviceBpBuyLevelCmd.param:type_name -> Cmd.NoviceBPParam
	11, // 9: Cmd.ChallengeTargetUpdateCmd.cmd:type_name -> Cmd.Command
	0,  // 10: Cmd.ChallengeTargetUpdateCmd.param:type_name -> Cmd.NoviceBPParam
	12, // 11: Cmd.ChallengeTargetUpdateCmd.datas:type_name -> Cmd.NoviceTargetData
	11, // 12: Cmd.ReturnBpTargetUpdateCmd.cmd:type_name -> Cmd.Command
	0,  // 13: Cmd.ReturnBpTargetUpdateCmd.param:type_name -> Cmd.NoviceBPParam
	12, // 14: Cmd.ReturnBpTargetUpdateCmd.datas:type_name -> Cmd.NoviceTargetData
	11, // 15: Cmd.ReturnBPRewardUpdateCmd.cmd:type_name -> Cmd.Command
	0,  // 16: Cmd.ReturnBPRewardUpdateCmd.param:type_name -> Cmd.NoviceBPParam
	11, // 17: Cmd.ReturnBPTargetRewardCmd.cmd:type_name -> Cmd.Command
	0,  // 18: Cmd.ReturnBPTargetRewardCmd.param:type_name -> Cmd.NoviceBPParam
	11, // 19: Cmd.ReturnBPReturnRewardCmd.cmd:type_name -> Cmd.Command
	0,  // 20: Cmd.ReturnBPReturnRewardCmd.param:type_name -> Cmd.NoviceBPParam
	11, // 21: Cmd.ReturnBpBuyLevelCmd.cmd:type_name -> Cmd.Command
	0,  // 22: Cmd.ReturnBpBuyLevelCmd.param:type_name -> Cmd.NoviceBPParam
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_NoviceBattlePass_proto_init() }
func file_NoviceBattlePass_proto_init() {
	if File_NoviceBattlePass_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_SceneUser2_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_NoviceBattlePass_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoviceBPTargetUpdateCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NoviceBattlePass_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoviceBPRewardUpdateCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NoviceBattlePass_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoviceBPTargetRewardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NoviceBattlePass_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoviceBpBuyLevelCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NoviceBattlePass_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeTargetUpdateCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NoviceBattlePass_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnBpTargetUpdateCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NoviceBattlePass_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnBPRewardUpdateCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NoviceBattlePass_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnBPTargetRewardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NoviceBattlePass_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnBPReturnRewardCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NoviceBattlePass_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnBpBuyLevelCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_NoviceBattlePass_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_NoviceBattlePass_proto_goTypes,
		DependencyIndexes: file_NoviceBattlePass_proto_depIdxs,
		EnumInfos:         file_NoviceBattlePass_proto_enumTypes,
		MessageInfos:      file_NoviceBattlePass_proto_msgTypes,
	}.Build()
	File_NoviceBattlePass_proto = out.File
	file_NoviceBattlePass_proto_rawDesc = nil
	file_NoviceBattlePass_proto_goTypes = nil
	file_NoviceBattlePass_proto_depIdxs = nil
}
