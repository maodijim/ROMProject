// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: MatchCCmd.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MatchCParam int32

const (
	MatchCParam_MATCHCPARAM_REQ_MY_ROOM                MatchCParam = 1
	MatchCParam_MATCHCPARAM_REQ_ROOM_LIST              MatchCParam = 2
	MatchCParam_MATCHCPARAM_REQ_ROOM_DETAIL            MatchCParam = 3
	MatchCParam_MATCHCPARAM_JOIN_ROOM                  MatchCParam = 4
	MatchCParam_MATCHCPARAM_LEAVE_ROOM                 MatchCParam = 5
	MatchCParam_MATCHCPARAM_NTF_ROOM_STATE             MatchCParam = 7
	MatchCParam_MATCHCPARAM_NTF_FIGHTING_STATE         MatchCParam = 8
	MatchCParam_MATCHCPARAM_JOIN_FIGHTING              MatchCParam = 9
	MatchCParam_MATCHCPARAM_COMBO_KILL                 MatchCParam = 10
	MatchCParam_MATCHCPARAM_REV_CHALLENGE              MatchCParam = 11
	MatchCParam_MATCHCPARAM_KICK_TEAM                  MatchCParam = 12
	MatchCParam_MATCHCPARAM_FIGHT_CONFIRM              MatchCParam = 13
	MatchCParam_MATCHCPARAM_PVP_RESULT                 MatchCParam = 14
	MatchCParam_MATCHCPARAM_PVP_MEMBERUPDATE           MatchCParam = 15
	MatchCParam_MATCHCPARAM_PVP_MEMBERDATAUPDATE       MatchCParam = 16
	MatchCParam_MATCHCPARAM_NTF_MATCHINFO              MatchCParam = 17
	MatchCParam_MATCHCPARAM_GOD_ENDTIME                MatchCParam = 18
	MatchCParam_MATCHCPARAM_NTF_RANK_CHANGE            MatchCParam = 19
	MatchCParam_MATCHCPARAM_OPEN_GLOBAL_SHOP_PANEL     MatchCParam = 20
	MatchCParam_MATCHCPARAM_TUTOR_MATCHNTF             MatchCParam = 21
	MatchCParam_MATCHCPARAM_TUTOR_MATCHRESPONSE        MatchCParam = 22
	MatchCParam_MATCHCPARAM_TEAMPWS_PREPARE_LIST       MatchCParam = 23
	MatchCParam_MATCHCPARAM_TEAMPWS_PREPARE_UPDATE     MatchCParam = 24
	MatchCParam_MATCHCPARAM_TEAMPWS_QUERY_RANK         MatchCParam = 25
	MatchCParam_MATCHCPARAM_TEAMPWS_QUERY_TEAMINFO     MatchCParam = 26
	MatchCParam_MATCHCPARAM_MEMROCO_QUERY_RANK         MatchCParam = 27
	MatchCParam_MATCHCPARAM_MID_MATCH_PREPARE          MatchCParam = 28
	MatchCParam_MATCHCPARAM_BATTLEPASS_RANK            MatchCParam = 29
	MatchCParam_MATCHCPARAM_TWELVEPVP_PREPARE_LIST     MatchCParam = 30
	MatchCParam_MATCHCPARAM_TWELVEPVP_PREPARE_UPDATE   MatchCParam = 31
	MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_SORT     MatchCParam = 32
	MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_TREE     MatchCParam = 33
	MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_INFO     MatchCParam = 34
	MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_INVITER  MatchCParam = 35
	MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_INVITEE  MatchCParam = 36
	MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_PREPARE  MatchCParam = 37
	MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_LEAVE    MatchCParam = 38
	MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_DELETE   MatchCParam = 39
	MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_NAME     MatchCParam = 40
	MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_SIGNUP   MatchCParam = 41
	MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_MATCH    MatchCParam = 42
	MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_QUERY    MatchCParam = 43
	MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_TEAMLIST MatchCParam = 44
	MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_CREATE   MatchCParam = 45
	MatchCParam_MATCHCPARAM_SYNC_MATCH_INFO            MatchCParam = 46
	MatchCParam_MATCHCPARAM_QUERY_TWELVE_SEASON_INFO   MatchCParam = 47
	MatchCParam_MATCHCPARAM_QUERY_TWELVE_SEASON_FINISH MatchCParam = 48
	MatchCParam_MATCHCPARAM_SYNC_MATCHBOARD_OPEN_STATE MatchCParam = 49
)

// Enum value maps for MatchCParam.
var (
	MatchCParam_name = map[int32]string{
		1:  "MATCHCPARAM_REQ_MY_ROOM",
		2:  "MATCHCPARAM_REQ_ROOM_LIST",
		3:  "MATCHCPARAM_REQ_ROOM_DETAIL",
		4:  "MATCHCPARAM_JOIN_ROOM",
		5:  "MATCHCPARAM_LEAVE_ROOM",
		7:  "MATCHCPARAM_NTF_ROOM_STATE",
		8:  "MATCHCPARAM_NTF_FIGHTING_STATE",
		9:  "MATCHCPARAM_JOIN_FIGHTING",
		10: "MATCHCPARAM_COMBO_KILL",
		11: "MATCHCPARAM_REV_CHALLENGE",
		12: "MATCHCPARAM_KICK_TEAM",
		13: "MATCHCPARAM_FIGHT_CONFIRM",
		14: "MATCHCPARAM_PVP_RESULT",
		15: "MATCHCPARAM_PVP_MEMBERUPDATE",
		16: "MATCHCPARAM_PVP_MEMBERDATAUPDATE",
		17: "MATCHCPARAM_NTF_MATCHINFO",
		18: "MATCHCPARAM_GOD_ENDTIME",
		19: "MATCHCPARAM_NTF_RANK_CHANGE",
		20: "MATCHCPARAM_OPEN_GLOBAL_SHOP_PANEL",
		21: "MATCHCPARAM_TUTOR_MATCHNTF",
		22: "MATCHCPARAM_TUTOR_MATCHRESPONSE",
		23: "MATCHCPARAM_TEAMPWS_PREPARE_LIST",
		24: "MATCHCPARAM_TEAMPWS_PREPARE_UPDATE",
		25: "MATCHCPARAM_TEAMPWS_QUERY_RANK",
		26: "MATCHCPARAM_TEAMPWS_QUERY_TEAMINFO",
		27: "MATCHCPARAM_MEMROCO_QUERY_RANK",
		28: "MATCHCPARAM_MID_MATCH_PREPARE",
		29: "MATCHCPARAM_BATTLEPASS_RANK",
		30: "MATCHCPARAM_TWELVEPVP_PREPARE_LIST",
		31: "MATCHCPARAM_TWELVEPVP_PREPARE_UPDATE",
		32: "MATCHCPARAM_TWELVEPVP_WARBAND_SORT",
		33: "MATCHCPARAM_TWELVEPVP_WARBAND_TREE",
		34: "MATCHCPARAM_TWELVEPVP_WARBAND_INFO",
		35: "MATCHCPARAM_TWELVEPVP_WARBAND_INVITER",
		36: "MATCHCPARAM_TWELVEPVP_WARBAND_INVITEE",
		37: "MATCHCPARAM_TWELVEPVP_WARBAND_PREPARE",
		38: "MATCHCPARAM_TWELVEPVP_WARBAND_LEAVE",
		39: "MATCHCPARAM_TWELVEPVP_WARBAND_DELETE",
		40: "MATCHCPARAM_TWELVEPVP_WARBAND_NAME",
		41: "MATCHCPARAM_TWELVEPVP_WARBAND_SIGNUP",
		42: "MATCHCPARAM_TWELVEPVP_WARBAND_MATCH",
		43: "MATCHCPARAM_TWELVEPVP_WARBAND_QUERY",
		44: "MATCHCPARAM_TWELVEPVP_WARBAND_TEAMLIST",
		45: "MATCHCPARAM_TWELVEPVP_WARBAND_CREATE",
		46: "MATCHCPARAM_SYNC_MATCH_INFO",
		47: "MATCHCPARAM_QUERY_TWELVE_SEASON_INFO",
		48: "MATCHCPARAM_QUERY_TWELVE_SEASON_FINISH",
		49: "MATCHCPARAM_SYNC_MATCHBOARD_OPEN_STATE",
	}
	MatchCParam_value = map[string]int32{
		"MATCHCPARAM_REQ_MY_ROOM":                1,
		"MATCHCPARAM_REQ_ROOM_LIST":              2,
		"MATCHCPARAM_REQ_ROOM_DETAIL":            3,
		"MATCHCPARAM_JOIN_ROOM":                  4,
		"MATCHCPARAM_LEAVE_ROOM":                 5,
		"MATCHCPARAM_NTF_ROOM_STATE":             7,
		"MATCHCPARAM_NTF_FIGHTING_STATE":         8,
		"MATCHCPARAM_JOIN_FIGHTING":              9,
		"MATCHCPARAM_COMBO_KILL":                 10,
		"MATCHCPARAM_REV_CHALLENGE":              11,
		"MATCHCPARAM_KICK_TEAM":                  12,
		"MATCHCPARAM_FIGHT_CONFIRM":              13,
		"MATCHCPARAM_PVP_RESULT":                 14,
		"MATCHCPARAM_PVP_MEMBERUPDATE":           15,
		"MATCHCPARAM_PVP_MEMBERDATAUPDATE":       16,
		"MATCHCPARAM_NTF_MATCHINFO":              17,
		"MATCHCPARAM_GOD_ENDTIME":                18,
		"MATCHCPARAM_NTF_RANK_CHANGE":            19,
		"MATCHCPARAM_OPEN_GLOBAL_SHOP_PANEL":     20,
		"MATCHCPARAM_TUTOR_MATCHNTF":             21,
		"MATCHCPARAM_TUTOR_MATCHRESPONSE":        22,
		"MATCHCPARAM_TEAMPWS_PREPARE_LIST":       23,
		"MATCHCPARAM_TEAMPWS_PREPARE_UPDATE":     24,
		"MATCHCPARAM_TEAMPWS_QUERY_RANK":         25,
		"MATCHCPARAM_TEAMPWS_QUERY_TEAMINFO":     26,
		"MATCHCPARAM_MEMROCO_QUERY_RANK":         27,
		"MATCHCPARAM_MID_MATCH_PREPARE":          28,
		"MATCHCPARAM_BATTLEPASS_RANK":            29,
		"MATCHCPARAM_TWELVEPVP_PREPARE_LIST":     30,
		"MATCHCPARAM_TWELVEPVP_PREPARE_UPDATE":   31,
		"MATCHCPARAM_TWELVEPVP_WARBAND_SORT":     32,
		"MATCHCPARAM_TWELVEPVP_WARBAND_TREE":     33,
		"MATCHCPARAM_TWELVEPVP_WARBAND_INFO":     34,
		"MATCHCPARAM_TWELVEPVP_WARBAND_INVITER":  35,
		"MATCHCPARAM_TWELVEPVP_WARBAND_INVITEE":  36,
		"MATCHCPARAM_TWELVEPVP_WARBAND_PREPARE":  37,
		"MATCHCPARAM_TWELVEPVP_WARBAND_LEAVE":    38,
		"MATCHCPARAM_TWELVEPVP_WARBAND_DELETE":   39,
		"MATCHCPARAM_TWELVEPVP_WARBAND_NAME":     40,
		"MATCHCPARAM_TWELVEPVP_WARBAND_SIGNUP":   41,
		"MATCHCPARAM_TWELVEPVP_WARBAND_MATCH":    42,
		"MATCHCPARAM_TWELVEPVP_WARBAND_QUERY":    43,
		"MATCHCPARAM_TWELVEPVP_WARBAND_TEAMLIST": 44,
		"MATCHCPARAM_TWELVEPVP_WARBAND_CREATE":   45,
		"MATCHCPARAM_SYNC_MATCH_INFO":            46,
		"MATCHCPARAM_QUERY_TWELVE_SEASON_INFO":   47,
		"MATCHCPARAM_QUERY_TWELVE_SEASON_FINISH": 48,
		"MATCHCPARAM_SYNC_MATCHBOARD_OPEN_STATE": 49,
	}
)

func (x MatchCParam) Enum() *MatchCParam {
	p := new(MatchCParam)
	*p = x
	return p
}

func (x MatchCParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchCParam) Descriptor() protoreflect.EnumDescriptor {
	return file_MatchCCmd_proto_enumTypes[0].Descriptor()
}

func (MatchCParam) Type() protoreflect.EnumType {
	return &file_MatchCCmd_proto_enumTypes[0]
}

func (x MatchCParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MatchCParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MatchCParam(num)
	return nil
}

// Deprecated: Use MatchCParam.Descriptor instead.
func (MatchCParam) EnumDescriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{0}
}

type EPvpType int32

const (
	EPvpType_EPVPTYPE_MIN             EPvpType = 0
	EPvpType_EPVPTYPE_LLH             EPvpType = 1
	EPvpType_EPVPTYPE_SMZL            EPvpType = 2
	EPvpType_EPVPTYPE_HLJS            EPvpType = 3
	EPvpType_EPVPTYPE_POLLY           EPvpType = 4
	EPvpType_EPVPTYPE_MVP             EPvpType = 5
	EPvpType_EPVPTYPE_SUGVG           EPvpType = 6
	EPvpType_EPVPTYPE_TUTOR           EPvpType = 7
	EPvpType_EPVPTYPE_TEAMPWS         EPvpType = 8
	EPvpType_EPVPTYPE_TEAMPWS_RELAX   EPvpType = 9
	EPvpType_EPVPTYPE_TEAMEXP         EPvpType = 10
	EPvpType_EPVPTYPE_TOWER           EPvpType = 11
	EPvpType_EPVPTYPE_PVECARD         EPvpType = 12
	EPvpType_EPVPTYPE_SEAL            EPvpType = 13
	EPvpType_EPVPTYPE_LABORATORY      EPvpType = 14
	EPvpType_EPVPTYPE_GROUPRAID       EPvpType = 15
	EPvpType_EPVPTYPE_HEADWEAR        EPvpType = 16
	EPvpType_EPVPTYPE_TRANSFERFIGHT   EPvpType = 17
	EPvpType_EPVPTYPE_TWELVE          EPvpType = 18
	EPvpType_EPVPTYPE_TWELVE_RELAX    EPvpType = 19
	EPvpType_EPVPTYPE_TWELVE_CHAMPION EPvpType = 20
	EPvpType_EPVPTYPE_TWELVE_GM       EPvpType = 21
	EPvpType_EPVPTYPE_EINHERJAR       EPvpType = 22
	EPvpType_EPVPTYPE_MAX             EPvpType = 23
)

// Enum value maps for EPvpType.
var (
	EPvpType_name = map[int32]string{
		0:  "EPVPTYPE_MIN",
		1:  "EPVPTYPE_LLH",
		2:  "EPVPTYPE_SMZL",
		3:  "EPVPTYPE_HLJS",
		4:  "EPVPTYPE_POLLY",
		5:  "EPVPTYPE_MVP",
		6:  "EPVPTYPE_SUGVG",
		7:  "EPVPTYPE_TUTOR",
		8:  "EPVPTYPE_TEAMPWS",
		9:  "EPVPTYPE_TEAMPWS_RELAX",
		10: "EPVPTYPE_TEAMEXP",
		11: "EPVPTYPE_TOWER",
		12: "EPVPTYPE_PVECARD",
		13: "EPVPTYPE_SEAL",
		14: "EPVPTYPE_LABORATORY",
		15: "EPVPTYPE_GROUPRAID",
		16: "EPVPTYPE_HEADWEAR",
		17: "EPVPTYPE_TRANSFERFIGHT",
		18: "EPVPTYPE_TWELVE",
		19: "EPVPTYPE_TWELVE_RELAX",
		20: "EPVPTYPE_TWELVE_CHAMPION",
		21: "EPVPTYPE_TWELVE_GM",
		22: "EPVPTYPE_EINHERJAR",
		23: "EPVPTYPE_MAX",
	}
	EPvpType_value = map[string]int32{
		"EPVPTYPE_MIN":             0,
		"EPVPTYPE_LLH":             1,
		"EPVPTYPE_SMZL":            2,
		"EPVPTYPE_HLJS":            3,
		"EPVPTYPE_POLLY":           4,
		"EPVPTYPE_MVP":             5,
		"EPVPTYPE_SUGVG":           6,
		"EPVPTYPE_TUTOR":           7,
		"EPVPTYPE_TEAMPWS":         8,
		"EPVPTYPE_TEAMPWS_RELAX":   9,
		"EPVPTYPE_TEAMEXP":         10,
		"EPVPTYPE_TOWER":           11,
		"EPVPTYPE_PVECARD":         12,
		"EPVPTYPE_SEAL":            13,
		"EPVPTYPE_LABORATORY":      14,
		"EPVPTYPE_GROUPRAID":       15,
		"EPVPTYPE_HEADWEAR":        16,
		"EPVPTYPE_TRANSFERFIGHT":   17,
		"EPVPTYPE_TWELVE":          18,
		"EPVPTYPE_TWELVE_RELAX":    19,
		"EPVPTYPE_TWELVE_CHAMPION": 20,
		"EPVPTYPE_TWELVE_GM":       21,
		"EPVPTYPE_EINHERJAR":       22,
		"EPVPTYPE_MAX":             23,
	}
)

func (x EPvpType) Enum() *EPvpType {
	p := new(EPvpType)
	*p = x
	return p
}

func (x EPvpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPvpType) Descriptor() protoreflect.EnumDescriptor {
	return file_MatchCCmd_proto_enumTypes[1].Descriptor()
}

func (EPvpType) Type() protoreflect.EnumType {
	return &file_MatchCCmd_proto_enumTypes[1]
}

func (x EPvpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPvpType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPvpType(num)
	return nil
}

// Deprecated: Use EPvpType.Descriptor instead.
func (EPvpType) EnumDescriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{1}
}

type ERoomState int32

const (
	ERoomState_EROOMSTATE_WAIT_JOIN       ERoomState = 1
	ERoomState_EROOMSTATE_MATCH_SUCCESS   ERoomState = 2
	ERoomState_EROOMSTATE_READY_FOR_FIGHT ERoomState = 3
	ERoomState_EROOMSTATE_FIGHTING        ERoomState = 4
	ERoomState_EROOMSTATE_END             ERoomState = 5
)

// Enum value maps for ERoomState.
var (
	ERoomState_name = map[int32]string{
		1: "EROOMSTATE_WAIT_JOIN",
		2: "EROOMSTATE_MATCH_SUCCESS",
		3: "EROOMSTATE_READY_FOR_FIGHT",
		4: "EROOMSTATE_FIGHTING",
		5: "EROOMSTATE_END",
	}
	ERoomState_value = map[string]int32{
		"EROOMSTATE_WAIT_JOIN":       1,
		"EROOMSTATE_MATCH_SUCCESS":   2,
		"EROOMSTATE_READY_FOR_FIGHT": 3,
		"EROOMSTATE_FIGHTING":        4,
		"EROOMSTATE_END":             5,
	}
)

func (x ERoomState) Enum() *ERoomState {
	p := new(ERoomState)
	*p = x
	return p
}

func (x ERoomState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERoomState) Descriptor() protoreflect.EnumDescriptor {
	return file_MatchCCmd_proto_enumTypes[2].Descriptor()
}

func (ERoomState) Type() protoreflect.EnumType {
	return &file_MatchCCmd_proto_enumTypes[2]
}

func (x ERoomState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ERoomState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ERoomState(num)
	return nil
}

// Deprecated: Use ERoomState.Descriptor instead.
func (ERoomState) EnumDescriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{2}
}

type EPvpResult int32

const (
	EPvpResult_EPVPRESULT_MIN     EPvpResult = 0
	EPvpResult_EPVPRESULT_SUCCESS EPvpResult = 1
	EPvpResult_EPVPRESULT_FAIL    EPvpResult = 2
	EPvpResult_EPVPRESULT_TIE     EPvpResult = 3
)

// Enum value maps for EPvpResult.
var (
	EPvpResult_name = map[int32]string{
		0: "EPVPRESULT_MIN",
		1: "EPVPRESULT_SUCCESS",
		2: "EPVPRESULT_FAIL",
		3: "EPVPRESULT_TIE",
	}
	EPvpResult_value = map[string]int32{
		"EPVPRESULT_MIN":     0,
		"EPVPRESULT_SUCCESS": 1,
		"EPVPRESULT_FAIL":    2,
		"EPVPRESULT_TIE":     3,
	}
)

func (x EPvpResult) Enum() *EPvpResult {
	p := new(EPvpResult)
	*p = x
	return p
}

func (x EPvpResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPvpResult) Descriptor() protoreflect.EnumDescriptor {
	return file_MatchCCmd_proto_enumTypes[3].Descriptor()
}

func (EPvpResult) Type() protoreflect.EnumType {
	return &file_MatchCCmd_proto_enumTypes[3]
}

func (x EPvpResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPvpResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPvpResult(num)
	return nil
}

// Deprecated: Use EPvpResult.Descriptor instead.
func (EPvpResult) EnumDescriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{3}
}

type EMatchReply int32

const (
	EMatchReply_EMATCHREPLY_AGREE  EMatchReply = 1
	EMatchReply_EMATCHREPLY_REFUSE EMatchReply = 2
)

// Enum value maps for EMatchReply.
var (
	EMatchReply_name = map[int32]string{
		1: "EMATCHREPLY_AGREE",
		2: "EMATCHREPLY_REFUSE",
	}
	EMatchReply_value = map[string]int32{
		"EMATCHREPLY_AGREE":  1,
		"EMATCHREPLY_REFUSE": 2,
	}
)

func (x EMatchReply) Enum() *EMatchReply {
	p := new(EMatchReply)
	*p = x
	return p
}

func (x EMatchReply) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMatchReply) Descriptor() protoreflect.EnumDescriptor {
	return file_MatchCCmd_proto_enumTypes[4].Descriptor()
}

func (EMatchReply) Type() protoreflect.EnumType {
	return &file_MatchCCmd_proto_enumTypes[4]
}

func (x EMatchReply) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMatchReply) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMatchReply(num)
	return nil
}

// Deprecated: Use EMatchReply.Descriptor instead.
func (EMatchReply) EnumDescriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{4}
}

type ETutorMatch int32

const (
	ETutorMatch_ETUTORMATCH_MIN     ETutorMatch = 0
	ETutorMatch_ETUTORMATCH_START   ETutorMatch = 1
	ETutorMatch_ETUTORMATCH_MATCH   ETutorMatch = 2
	ETutorMatch_ETUTORMATCH_AGREE   ETutorMatch = 3
	ETutorMatch_ETUTORMATCH_REFUSE  ETutorMatch = 4
	ETutorMatch_ETUTORMATCH_STOP    ETutorMatch = 5
	ETutorMatch_ETUTORMATCH_RESTART ETutorMatch = 6
	ETutorMatch_ETUTORMATCH_MAX     ETutorMatch = 7
)

// Enum value maps for ETutorMatch.
var (
	ETutorMatch_name = map[int32]string{
		0: "ETUTORMATCH_MIN",
		1: "ETUTORMATCH_START",
		2: "ETUTORMATCH_MATCH",
		3: "ETUTORMATCH_AGREE",
		4: "ETUTORMATCH_REFUSE",
		5: "ETUTORMATCH_STOP",
		6: "ETUTORMATCH_RESTART",
		7: "ETUTORMATCH_MAX",
	}
	ETutorMatch_value = map[string]int32{
		"ETUTORMATCH_MIN":     0,
		"ETUTORMATCH_START":   1,
		"ETUTORMATCH_MATCH":   2,
		"ETUTORMATCH_AGREE":   3,
		"ETUTORMATCH_REFUSE":  4,
		"ETUTORMATCH_STOP":    5,
		"ETUTORMATCH_RESTART": 6,
		"ETUTORMATCH_MAX":     7,
	}
)

func (x ETutorMatch) Enum() *ETutorMatch {
	p := new(ETutorMatch)
	*p = x
	return p
}

func (x ETutorMatch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETutorMatch) Descriptor() protoreflect.EnumDescriptor {
	return file_MatchCCmd_proto_enumTypes[5].Descriptor()
}

func (ETutorMatch) Type() protoreflect.EnumType {
	return &file_MatchCCmd_proto_enumTypes[5]
}

func (x ETutorMatch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETutorMatch) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETutorMatch(num)
	return nil
}

// Deprecated: Use ETutorMatch.Descriptor instead.
func (ETutorMatch) EnumDescriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{5}
}

type ETeamPwsRank int32

const (
	ETeamPwsRank_ETEAMPWSRANK_EXCELLENT ETeamPwsRank = 1
	ETeamPwsRank_ETEAMPWSRANK_SUPER     ETeamPwsRank = 2
	ETeamPwsRank_ETEAMPWSRANK_GOOD      ETeamPwsRank = 3
	ETeamPwsRank_ETEAMPWSRANK_NORMAL    ETeamPwsRank = 4
	ETeamPwsRank_ETEAMPWSRANK_NONE      ETeamPwsRank = 5
)

// Enum value maps for ETeamPwsRank.
var (
	ETeamPwsRank_name = map[int32]string{
		1: "ETEAMPWSRANK_EXCELLENT",
		2: "ETEAMPWSRANK_SUPER",
		3: "ETEAMPWSRANK_GOOD",
		4: "ETEAMPWSRANK_NORMAL",
		5: "ETEAMPWSRANK_NONE",
	}
	ETeamPwsRank_value = map[string]int32{
		"ETEAMPWSRANK_EXCELLENT": 1,
		"ETEAMPWSRANK_SUPER":     2,
		"ETEAMPWSRANK_GOOD":      3,
		"ETEAMPWSRANK_NORMAL":    4,
		"ETEAMPWSRANK_NONE":      5,
	}
)

func (x ETeamPwsRank) Enum() *ETeamPwsRank {
	p := new(ETeamPwsRank)
	*p = x
	return p
}

func (x ETeamPwsRank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETeamPwsRank) Descriptor() protoreflect.EnumDescriptor {
	return file_MatchCCmd_proto_enumTypes[6].Descriptor()
}

func (ETeamPwsRank) Type() protoreflect.EnumType {
	return &file_MatchCCmd_proto_enumTypes[6]
}

func (x ETeamPwsRank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETeamPwsRank) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETeamPwsRank(num)
	return nil
}

// Deprecated: Use ETeamPwsRank.Descriptor instead.
func (ETeamPwsRank) EnumDescriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{6}
}

type EWarbandJob int32

const (
	EWarbandJob_EWARBANDJOB_MIN    EWarbandJob = 0
	EWarbandJob_EWARBANDJOB_LEADER EWarbandJob = 1
	EWarbandJob_EWARBANDJOB_MEMBER EWarbandJob = 2
	EWarbandJob_EWARBANDJOB_MAX    EWarbandJob = 3
)

// Enum value maps for EWarbandJob.
var (
	EWarbandJob_name = map[int32]string{
		0: "EWARBANDJOB_MIN",
		1: "EWARBANDJOB_LEADER",
		2: "EWARBANDJOB_MEMBER",
		3: "EWARBANDJOB_MAX",
	}
	EWarbandJob_value = map[string]int32{
		"EWARBANDJOB_MIN":    0,
		"EWARBANDJOB_LEADER": 1,
		"EWARBANDJOB_MEMBER": 2,
		"EWARBANDJOB_MAX":    3,
	}
)

func (x EWarbandJob) Enum() *EWarbandJob {
	p := new(EWarbandJob)
	*p = x
	return p
}

func (x EWarbandJob) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EWarbandJob) Descriptor() protoreflect.EnumDescriptor {
	return file_MatchCCmd_proto_enumTypes[7].Descriptor()
}

func (EWarbandJob) Type() protoreflect.EnumType {
	return &file_MatchCCmd_proto_enumTypes[7]
}

func (x EWarbandJob) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EWarbandJob) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EWarbandJob(num)
	return nil
}

// Deprecated: Use EWarbandJob.Descriptor instead.
func (EWarbandJob) EnumDescriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{7}
}

type MatchTeamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teamid  *uint64       `protobuf:"varint,1,opt,name=teamid,def=0" json:"teamid,omitempty"`
	Zoneid  *uint32       `protobuf:"varint,8,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Name    *string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Index   *uint32       `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Members []*TeamMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
}

// Default values for MatchTeamData fields.
const (
	Default_MatchTeamData_Teamid = uint64(0)
	Default_MatchTeamData_Zoneid = uint32(0)
)

func (x *MatchTeamData) Reset() {
	*x = MatchTeamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchTeamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTeamData) ProtoMessage() {}

func (x *MatchTeamData) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTeamData.ProtoReflect.Descriptor instead.
func (*MatchTeamData) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{0}
}

func (x *MatchTeamData) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return Default_MatchTeamData_Teamid
}

func (x *MatchTeamData) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_MatchTeamData_Zoneid
}

func (x *MatchTeamData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MatchTeamData) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *MatchTeamData) GetMembers() []*TeamMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type RoomDetailInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *EPvpType        `protobuf:"varint,1,opt,name=type,enum=Cmd.EPvpType" json:"type,omitempty"`
	State     *ERoomState      `protobuf:"varint,2,opt,name=state,enum=Cmd.ERoomState" json:"state,omitempty"`
	Roomid    *uint64          `protobuf:"varint,3,opt,name=roomid" json:"roomid,omitempty"`
	Name      *string          `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	TeamDatas []*MatchTeamData `protobuf:"bytes,5,rep,name=team_datas,json=teamDatas" json:"team_datas,omitempty"`
}

func (x *RoomDetailInfo) Reset() {
	*x = RoomDetailInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomDetailInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomDetailInfo) ProtoMessage() {}

func (x *RoomDetailInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomDetailInfo.ProtoReflect.Descriptor instead.
func (*RoomDetailInfo) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{1}
}

func (x *RoomDetailInfo) GetType() EPvpType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *RoomDetailInfo) GetState() ERoomState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ERoomState_EROOMSTATE_WAIT_JOIN
}

func (x *RoomDetailInfo) GetRoomid() uint64 {
	if x != nil && x.Roomid != nil {
		return *x.Roomid
	}
	return 0
}

func (x *RoomDetailInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RoomDetailInfo) GetTeamDatas() []*MatchTeamData {
	if x != nil {
		return x.TeamDatas
	}
	return nil
}

type RoomBriefInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      *EPvpType   `protobuf:"varint,1,opt,name=type,enum=Cmd.EPvpType" json:"type,omitempty"`
	State     *ERoomState `protobuf:"varint,2,opt,name=state,enum=Cmd.ERoomState" json:"state,omitempty"`
	Roomid    *uint64     `protobuf:"varint,3,opt,name=roomid" json:"roomid,omitempty"`
	Name      *string     `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Raidid    *uint32     `protobuf:"varint,5,opt,name=raidid" json:"raidid,omitempty"`
	PlayerNum *uint32     `protobuf:"varint,6,opt,name=player_num,json=playerNum" json:"player_num,omitempty"`
	Num1      *uint32     `protobuf:"varint,7,opt,name=num1" json:"num1,omitempty"`
	Num2      *uint32     `protobuf:"varint,8,opt,name=num2" json:"num2,omitempty"`
	Num3      *uint32     `protobuf:"varint,9,opt,name=num3" json:"num3,omitempty"`
	Zoneid    *uint32     `protobuf:"varint,10,opt,name=zoneid" json:"zoneid,omitempty"`
}

func (x *RoomBriefInfo) Reset() {
	*x = RoomBriefInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomBriefInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomBriefInfo) ProtoMessage() {}

func (x *RoomBriefInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomBriefInfo.ProtoReflect.Descriptor instead.
func (*RoomBriefInfo) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{2}
}

func (x *RoomBriefInfo) GetType() EPvpType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *RoomBriefInfo) GetState() ERoomState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ERoomState_EROOMSTATE_WAIT_JOIN
}

func (x *RoomBriefInfo) GetRoomid() uint64 {
	if x != nil && x.Roomid != nil {
		return *x.Roomid
	}
	return 0
}

func (x *RoomBriefInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RoomBriefInfo) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return 0
}

func (x *RoomBriefInfo) GetPlayerNum() uint32 {
	if x != nil && x.PlayerNum != nil {
		return *x.PlayerNum
	}
	return 0
}

func (x *RoomBriefInfo) GetNum1() uint32 {
	if x != nil && x.Num1 != nil {
		return *x.Num1
	}
	return 0
}

func (x *RoomBriefInfo) GetNum2() uint32 {
	if x != nil && x.Num2 != nil {
		return *x.Num2
	}
	return 0
}

func (x *RoomBriefInfo) GetNum3() uint32 {
	if x != nil && x.Num3 != nil {
		return *x.Num3
	}
	return 0
}

func (x *RoomBriefInfo) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return 0
}

type ReqMyRoomMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param     *MatchCParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=1" json:"param,omitempty"`
	Type      *EPvpType      `protobuf:"varint,3,opt,name=type,enum=Cmd.EPvpType" json:"type,omitempty"`
	BriefInfo *RoomBriefInfo `protobuf:"bytes,4,opt,name=brief_info,json=briefInfo" json:"brief_info,omitempty"`
}

// Default values for ReqMyRoomMatchCCmd fields.
const (
	Default_ReqMyRoomMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_ReqMyRoomMatchCCmd_Param = MatchCParam_MATCHCPARAM_REQ_MY_ROOM
)

func (x *ReqMyRoomMatchCCmd) Reset() {
	*x = ReqMyRoomMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqMyRoomMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqMyRoomMatchCCmd) ProtoMessage() {}

func (x *ReqMyRoomMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqMyRoomMatchCCmd.ProtoReflect.Descriptor instead.
func (*ReqMyRoomMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{3}
}

func (x *ReqMyRoomMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqMyRoomMatchCCmd_Cmd
}

func (x *ReqMyRoomMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqMyRoomMatchCCmd_Param
}

func (x *ReqMyRoomMatchCCmd) GetType() EPvpType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *ReqMyRoomMatchCCmd) GetBriefInfo() *RoomBriefInfo {
	if x != nil {
		return x.BriefInfo
	}
	return nil
}

type ReqRoomListCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param     *MatchCParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=2" json:"param,omitempty"`
	Type      *EPvpType        `protobuf:"varint,3,opt,name=type,enum=Cmd.EPvpType" json:"type,omitempty"`
	Roomids   []uint64         `protobuf:"varint,4,rep,name=roomids" json:"roomids,omitempty"`
	RoomLists []*RoomBriefInfo `protobuf:"bytes,5,rep,name=room_lists,json=roomLists" json:"room_lists,omitempty"`
}

// Default values for ReqRoomListCCmd fields.
const (
	Default_ReqRoomListCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_ReqRoomListCCmd_Param = MatchCParam_MATCHCPARAM_REQ_ROOM_LIST
)

func (x *ReqRoomListCCmd) Reset() {
	*x = ReqRoomListCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqRoomListCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqRoomListCCmd) ProtoMessage() {}

func (x *ReqRoomListCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqRoomListCCmd.ProtoReflect.Descriptor instead.
func (*ReqRoomListCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{4}
}

func (x *ReqRoomListCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqRoomListCCmd_Cmd
}

func (x *ReqRoomListCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqRoomListCCmd_Param
}

func (x *ReqRoomListCCmd) GetType() EPvpType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *ReqRoomListCCmd) GetRoomids() []uint64 {
	if x != nil {
		return x.Roomids
	}
	return nil
}

func (x *ReqRoomListCCmd) GetRoomLists() []*RoomBriefInfo {
	if x != nil {
		return x.RoomLists
	}
	return nil
}

type ReqRoomDetailCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param      *MatchCParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=3" json:"param,omitempty"`
	Type       *EPvpType       `protobuf:"varint,3,opt,name=type,enum=Cmd.EPvpType" json:"type,omitempty"`
	Roomid     *uint64         `protobuf:"varint,4,opt,name=roomid" json:"roomid,omitempty"`
	DatailInfo *RoomDetailInfo `protobuf:"bytes,5,opt,name=datail_info,json=datailInfo" json:"datail_info,omitempty"`
}

// Default values for ReqRoomDetailCCmd fields.
const (
	Default_ReqRoomDetailCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_ReqRoomDetailCCmd_Param = MatchCParam_MATCHCPARAM_REQ_ROOM_DETAIL
)

func (x *ReqRoomDetailCCmd) Reset() {
	*x = ReqRoomDetailCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqRoomDetailCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqRoomDetailCCmd) ProtoMessage() {}

func (x *ReqRoomDetailCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqRoomDetailCCmd.ProtoReflect.Descriptor instead.
func (*ReqRoomDetailCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{5}
}

func (x *ReqRoomDetailCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReqRoomDetailCCmd_Cmd
}

func (x *ReqRoomDetailCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReqRoomDetailCCmd_Param
}

func (x *ReqRoomDetailCCmd) GetType() EPvpType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *ReqRoomDetailCCmd) GetRoomid() uint64 {
	if x != nil && x.Roomid != nil {
		return *x.Roomid
	}
	return 0
}

func (x *ReqRoomDetailCCmd) GetDatailInfo() *RoomDetailInfo {
	if x != nil {
		return x.DatailInfo
	}
	return nil
}

type JoinRoomUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid *uint64 `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Name   *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *JoinRoomUser) Reset() {
	*x = JoinRoomUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRoomUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRoomUser) ProtoMessage() {}

func (x *JoinRoomUser) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRoomUser.ProtoReflect.Descriptor instead.
func (*JoinRoomUser) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{6}
}

func (x *JoinRoomUser) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *JoinRoomUser) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type TutorMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid     *uint64     `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Zoneid     *uint32     `protobuf:"varint,2,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Findtutor  *bool       `protobuf:"varint,3,opt,name=findtutor,def=0" json:"findtutor,omitempty"`
	Gender     *EGender    `protobuf:"varint,4,opt,name=gender,enum=Cmd.EGender,def=0" json:"gender,omitempty"`
	Selfgender *EGender    `protobuf:"varint,5,opt,name=selfgender,enum=Cmd.EGender,def=0" json:"selfgender,omitempty"`
	Datas      []*UserData `protobuf:"bytes,6,rep,name=datas" json:"datas,omitempty"`
	Blackids   []uint64    `protobuf:"varint,7,rep,name=blackids" json:"blackids,omitempty"`
}

// Default values for TutorMatcher fields.
const (
	Default_TutorMatcher_Charid     = uint64(0)
	Default_TutorMatcher_Zoneid     = uint32(0)
	Default_TutorMatcher_Findtutor  = bool(false)
	Default_TutorMatcher_Gender     = EGender_EGENDER_MIN
	Default_TutorMatcher_Selfgender = EGender_EGENDER_MIN
)

func (x *TutorMatcher) Reset() {
	*x = TutorMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorMatcher) ProtoMessage() {}

func (x *TutorMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorMatcher.ProtoReflect.Descriptor instead.
func (*TutorMatcher) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{7}
}

func (x *TutorMatcher) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_TutorMatcher_Charid
}

func (x *TutorMatcher) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_TutorMatcher_Zoneid
}

func (x *TutorMatcher) GetFindtutor() bool {
	if x != nil && x.Findtutor != nil {
		return *x.Findtutor
	}
	return Default_TutorMatcher_Findtutor
}

func (x *TutorMatcher) GetGender() EGender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Default_TutorMatcher_Gender
}

func (x *TutorMatcher) GetSelfgender() EGender {
	if x != nil && x.Selfgender != nil {
		return *x.Selfgender
	}
	return Default_TutorMatcher_Selfgender
}

func (x *TutorMatcher) GetDatas() []*UserData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *TutorMatcher) GetBlackids() []uint64 {
	if x != nil {
		return x.Blackids
	}
	return nil
}

type JoinRoomCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command            `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param       *MatchCParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=4" json:"param,omitempty"`
	Type        *EPvpType           `protobuf:"varint,3,opt,name=type,enum=Cmd.EPvpType" json:"type,omitempty"`
	Roomid      *uint64             `protobuf:"varint,4,opt,name=roomid" json:"roomid,omitempty"`
	Name        *string             `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Isquick     *bool               `protobuf:"varint,6,opt,name=isquick" json:"isquick,omitempty"`
	Teamid      *uint64             `protobuf:"varint,7,opt,name=teamid" json:"teamid,omitempty"`
	Teammember  []uint64            `protobuf:"varint,8,rep,name=teammember" json:"teammember,omitempty"`
	Ret         *bool               `protobuf:"varint,9,opt,name=ret" json:"ret,omitempty"`
	Guildid     *uint64             `protobuf:"varint,10,opt,name=guildid" json:"guildid,omitempty"`
	Users       []*JoinRoomUser     `protobuf:"bytes,11,rep,name=users" json:"users,omitempty"`
	Matcher     *TutorMatcher       `protobuf:"bytes,12,opt,name=matcher" json:"matcher,omitempty"`
	Charid      *uint64             `protobuf:"varint,13,opt,name=charid" json:"charid,omitempty"`
	Zoneid      *uint32             `protobuf:"varint,14,opt,name=zoneid" json:"zoneid,omitempty"`
	Serverid    *uint32             `protobuf:"varint,15,opt,name=serverid" json:"serverid,omitempty"`
	Teamexptype *ERewardTeamExpType `protobuf:"varint,16,opt,name=teamexptype,enum=Cmd.ERewardTeamExpType,def=1" json:"teamexptype,omitempty"`
}

// Default values for JoinRoomCCmd fields.
const (
	Default_JoinRoomCCmd_Cmd         = Command_MATCHC_PROTOCMD
	Default_JoinRoomCCmd_Param       = MatchCParam_MATCHCPARAM_JOIN_ROOM
	Default_JoinRoomCCmd_Teamexptype = ERewardTeamExpType_REWARD_TEAM_EXP_EXP
)

func (x *JoinRoomCCmd) Reset() {
	*x = JoinRoomCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRoomCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRoomCCmd) ProtoMessage() {}

func (x *JoinRoomCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRoomCCmd.ProtoReflect.Descriptor instead.
func (*JoinRoomCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{8}
}

func (x *JoinRoomCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_JoinRoomCCmd_Cmd
}

func (x *JoinRoomCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_JoinRoomCCmd_Param
}

func (x *JoinRoomCCmd) GetType() EPvpType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *JoinRoomCCmd) GetRoomid() uint64 {
	if x != nil && x.Roomid != nil {
		return *x.Roomid
	}
	return 0
}

func (x *JoinRoomCCmd) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *JoinRoomCCmd) GetIsquick() bool {
	if x != nil && x.Isquick != nil {
		return *x.Isquick
	}
	return false
}

func (x *JoinRoomCCmd) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return 0
}

func (x *JoinRoomCCmd) GetTeammember() []uint64 {
	if x != nil {
		return x.Teammember
	}
	return nil
}

func (x *JoinRoomCCmd) GetRet() bool {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return false
}

func (x *JoinRoomCCmd) GetGuildid() uint64 {
	if x != nil && x.Guildid != nil {
		return *x.Guildid
	}
	return 0
}

func (x *JoinRoomCCmd) GetUsers() []*JoinRoomUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *JoinRoomCCmd) GetMatcher() *TutorMatcher {
	if x != nil {
		return x.Matcher
	}
	return nil
}

func (x *JoinRoomCCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *JoinRoomCCmd) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return 0
}

func (x *JoinRoomCCmd) GetServerid() uint32 {
	if x != nil && x.Serverid != nil {
		return *x.Serverid
	}
	return 0
}

func (x *JoinRoomCCmd) GetTeamexptype() ERewardTeamExpType {
	if x != nil && x.Teamexptype != nil {
		return *x.Teamexptype
	}
	return Default_JoinRoomCCmd_Teamexptype
}

type LeaveRoomCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param  *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=5" json:"param,omitempty"`
	Type   *EPvpType    `protobuf:"varint,3,opt,name=type,enum=Cmd.EPvpType" json:"type,omitempty"`
	Roomid *uint64      `protobuf:"varint,4,opt,name=roomid" json:"roomid,omitempty"`
	Teamid *uint64      `protobuf:"varint,5,opt,name=teamid,def=0" json:"teamid,omitempty"`
}

// Default values for LeaveRoomCCmd fields.
const (
	Default_LeaveRoomCCmd_Cmd    = Command_MATCHC_PROTOCMD
	Default_LeaveRoomCCmd_Param  = MatchCParam_MATCHCPARAM_LEAVE_ROOM
	Default_LeaveRoomCCmd_Teamid = uint64(0)
)

func (x *LeaveRoomCCmd) Reset() {
	*x = LeaveRoomCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveRoomCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveRoomCCmd) ProtoMessage() {}

func (x *LeaveRoomCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveRoomCCmd.ProtoReflect.Descriptor instead.
func (*LeaveRoomCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{9}
}

func (x *LeaveRoomCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_LeaveRoomCCmd_Cmd
}

func (x *LeaveRoomCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_LeaveRoomCCmd_Param
}

func (x *LeaveRoomCCmd) GetType() EPvpType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *LeaveRoomCCmd) GetRoomid() uint64 {
	if x != nil && x.Roomid != nil {
		return *x.Roomid
	}
	return 0
}

func (x *LeaveRoomCCmd) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return Default_LeaveRoomCCmd_Teamid
}

type NtfRoomStateCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param   *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=7" json:"param,omitempty"`
	PvpType *EPvpType    `protobuf:"varint,3,opt,name=pvp_type,json=pvpType,enum=Cmd.EPvpType" json:"pvp_type,omitempty"`
	Roomid  *uint64      `protobuf:"varint,4,opt,name=roomid" json:"roomid,omitempty"`
	State   *ERoomState  `protobuf:"varint,5,opt,name=state,enum=Cmd.ERoomState" json:"state,omitempty"`
	Endtime *uint32      `protobuf:"varint,6,opt,name=endtime" json:"endtime,omitempty"`
}

// Default values for NtfRoomStateCCmd fields.
const (
	Default_NtfRoomStateCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_NtfRoomStateCCmd_Param = MatchCParam_MATCHCPARAM_NTF_ROOM_STATE
)

func (x *NtfRoomStateCCmd) Reset() {
	*x = NtfRoomStateCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfRoomStateCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfRoomStateCCmd) ProtoMessage() {}

func (x *NtfRoomStateCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfRoomStateCCmd.ProtoReflect.Descriptor instead.
func (*NtfRoomStateCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{10}
}

func (x *NtfRoomStateCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfRoomStateCCmd_Cmd
}

func (x *NtfRoomStateCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfRoomStateCCmd_Param
}

func (x *NtfRoomStateCCmd) GetPvpType() EPvpType {
	if x != nil && x.PvpType != nil {
		return *x.PvpType
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *NtfRoomStateCCmd) GetRoomid() uint64 {
	if x != nil && x.Roomid != nil {
		return *x.Roomid
	}
	return 0
}

func (x *NtfRoomStateCCmd) GetState() ERoomState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ERoomState_EROOMSTATE_WAIT_JOIN
}

func (x *NtfRoomStateCCmd) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

type NtfFightStatCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd            *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param          *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=8" json:"param,omitempty"`
	PvpType        *EPvpType    `protobuf:"varint,3,opt,name=pvp_type,json=pvpType,enum=Cmd.EPvpType" json:"pvp_type,omitempty"`
	Starttime      *uint32      `protobuf:"varint,4,opt,name=starttime" json:"starttime,omitempty"`
	PlayerNum      *uint32      `protobuf:"varint,5,opt,name=player_num,json=playerNum" json:"player_num,omitempty"`
	Score          *uint64      `protobuf:"varint,6,opt,name=score" json:"score,omitempty"`
	MyTeamscore    *uint64      `protobuf:"varint,10,opt,name=my_teamscore,json=myTeamscore" json:"my_teamscore,omitempty"`
	EnemyTeamscore *uint64      `protobuf:"varint,11,opt,name=enemy_teamscore,json=enemyTeamscore" json:"enemy_teamscore,omitempty"`
	RemainHp       *uint32      `protobuf:"varint,15,opt,name=remain_hp,json=remainHp" json:"remain_hp,omitempty"`
	Myrank         *uint32      `protobuf:"varint,16,opt,name=myrank" json:"myrank,omitempty"`
}

// Default values for NtfFightStatCCmd fields.
const (
	Default_NtfFightStatCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_NtfFightStatCCmd_Param = MatchCParam_MATCHCPARAM_NTF_FIGHTING_STATE
)

func (x *NtfFightStatCCmd) Reset() {
	*x = NtfFightStatCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfFightStatCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfFightStatCCmd) ProtoMessage() {}

func (x *NtfFightStatCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfFightStatCCmd.ProtoReflect.Descriptor instead.
func (*NtfFightStatCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{11}
}

func (x *NtfFightStatCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfFightStatCCmd_Cmd
}

func (x *NtfFightStatCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfFightStatCCmd_Param
}

func (x *NtfFightStatCCmd) GetPvpType() EPvpType {
	if x != nil && x.PvpType != nil {
		return *x.PvpType
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *NtfFightStatCCmd) GetStarttime() uint32 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

func (x *NtfFightStatCCmd) GetPlayerNum() uint32 {
	if x != nil && x.PlayerNum != nil {
		return *x.PlayerNum
	}
	return 0
}

func (x *NtfFightStatCCmd) GetScore() uint64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *NtfFightStatCCmd) GetMyTeamscore() uint64 {
	if x != nil && x.MyTeamscore != nil {
		return *x.MyTeamscore
	}
	return 0
}

func (x *NtfFightStatCCmd) GetEnemyTeamscore() uint64 {
	if x != nil && x.EnemyTeamscore != nil {
		return *x.EnemyTeamscore
	}
	return 0
}

func (x *NtfFightStatCCmd) GetRemainHp() uint32 {
	if x != nil && x.RemainHp != nil {
		return *x.RemainHp
	}
	return 0
}

func (x *NtfFightStatCCmd) GetMyrank() uint32 {
	if x != nil && x.Myrank != nil {
		return *x.Myrank
	}
	return 0
}

type JoinFightingCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param  *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=9" json:"param,omitempty"`
	Type   *EPvpType    `protobuf:"varint,3,opt,name=type,enum=Cmd.EPvpType" json:"type,omitempty"`
	Roomid *uint64      `protobuf:"varint,4,opt,name=roomid" json:"roomid,omitempty"`
	Ret    *bool        `protobuf:"varint,5,opt,name=ret" json:"ret,omitempty"`
}

// Default values for JoinFightingCCmd fields.
const (
	Default_JoinFightingCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_JoinFightingCCmd_Param = MatchCParam_MATCHCPARAM_JOIN_FIGHTING
)

func (x *JoinFightingCCmd) Reset() {
	*x = JoinFightingCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinFightingCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinFightingCCmd) ProtoMessage() {}

func (x *JoinFightingCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinFightingCCmd.ProtoReflect.Descriptor instead.
func (*JoinFightingCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{12}
}

func (x *JoinFightingCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_JoinFightingCCmd_Cmd
}

func (x *JoinFightingCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_JoinFightingCCmd_Param
}

func (x *JoinFightingCCmd) GetType() EPvpType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *JoinFightingCCmd) GetRoomid() uint64 {
	if x != nil && x.Roomid != nil {
		return *x.Roomid
	}
	return 0
}

func (x *JoinFightingCCmd) GetRet() bool {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return false
}

type ComboNotifyCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param    *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=10" json:"param,omitempty"`
	ComboNum *uint32      `protobuf:"varint,3,opt,name=comboNum" json:"comboNum,omitempty"`
}

// Default values for ComboNotifyCCmd fields.
const (
	Default_ComboNotifyCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_ComboNotifyCCmd_Param = MatchCParam_MATCHCPARAM_COMBO_KILL
)

func (x *ComboNotifyCCmd) Reset() {
	*x = ComboNotifyCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComboNotifyCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComboNotifyCCmd) ProtoMessage() {}

func (x *ComboNotifyCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComboNotifyCCmd.ProtoReflect.Descriptor instead.
func (*ComboNotifyCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{13}
}

func (x *ComboNotifyCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ComboNotifyCCmd_Cmd
}

func (x *ComboNotifyCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ComboNotifyCCmd_Param
}

func (x *ComboNotifyCCmd) GetComboNum() uint32 {
	if x != nil && x.ComboNum != nil {
		return *x.ComboNum
	}
	return 0
}

type RevChallengeCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd              *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param            *MatchCParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=11" json:"param,omitempty"`
	Type             *EPvpType     `protobuf:"varint,3,opt,name=type,enum=Cmd.EPvpType" json:"type,omitempty"`
	Roomid           *uint64       `protobuf:"varint,4,opt,name=roomid" json:"roomid,omitempty"`
	Challenger       *string       `protobuf:"bytes,5,opt,name=challenger" json:"challenger,omitempty"`
	ChallengerZoneid *uint32       `protobuf:"varint,6,opt,name=challenger_zoneid,json=challengerZoneid" json:"challenger_zoneid,omitempty"`
	Members          []*TeamMember `protobuf:"bytes,7,rep,name=members" json:"members,omitempty"`
	Reply            *EMatchReply  `protobuf:"varint,8,opt,name=reply,enum=Cmd.EMatchReply" json:"reply,omitempty"`
}

// Default values for RevChallengeCCmd fields.
const (
	Default_RevChallengeCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_RevChallengeCCmd_Param = MatchCParam_MATCHCPARAM_REV_CHALLENGE
)

func (x *RevChallengeCCmd) Reset() {
	*x = RevChallengeCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevChallengeCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevChallengeCCmd) ProtoMessage() {}

func (x *RevChallengeCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevChallengeCCmd.ProtoReflect.Descriptor instead.
func (*RevChallengeCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{14}
}

func (x *RevChallengeCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RevChallengeCCmd_Cmd
}

func (x *RevChallengeCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RevChallengeCCmd_Param
}

func (x *RevChallengeCCmd) GetType() EPvpType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *RevChallengeCCmd) GetRoomid() uint64 {
	if x != nil && x.Roomid != nil {
		return *x.Roomid
	}
	return 0
}

func (x *RevChallengeCCmd) GetChallenger() string {
	if x != nil && x.Challenger != nil {
		return *x.Challenger
	}
	return ""
}

func (x *RevChallengeCCmd) GetChallengerZoneid() uint32 {
	if x != nil && x.ChallengerZoneid != nil {
		return *x.ChallengerZoneid
	}
	return 0
}

func (x *RevChallengeCCmd) GetMembers() []*TeamMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *RevChallengeCCmd) GetReply() EMatchReply {
	if x != nil && x.Reply != nil {
		return *x.Reply
	}
	return EMatchReply_EMATCHREPLY_AGREE
}

type KickTeamCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param  *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=12" json:"param,omitempty"`
	Type   *EPvpType    `protobuf:"varint,3,opt,name=type,enum=Cmd.EPvpType" json:"type,omitempty"`
	Roomid *uint64      `protobuf:"varint,4,opt,name=roomid" json:"roomid,omitempty"`
	Zoneid *uint64      `protobuf:"varint,5,opt,name=zoneid" json:"zoneid,omitempty"`
	Teamid *uint64      `protobuf:"varint,6,opt,name=teamid" json:"teamid,omitempty"`
}

// Default values for KickTeamCCmd fields.
const (
	Default_KickTeamCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_KickTeamCCmd_Param = MatchCParam_MATCHCPARAM_KICK_TEAM
)

func (x *KickTeamCCmd) Reset() {
	*x = KickTeamCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickTeamCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickTeamCCmd) ProtoMessage() {}

func (x *KickTeamCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickTeamCCmd.ProtoReflect.Descriptor instead.
func (*KickTeamCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{15}
}

func (x *KickTeamCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_KickTeamCCmd_Cmd
}

func (x *KickTeamCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_KickTeamCCmd_Param
}

func (x *KickTeamCCmd) GetType() EPvpType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *KickTeamCCmd) GetRoomid() uint64 {
	if x != nil && x.Roomid != nil {
		return *x.Roomid
	}
	return 0
}

func (x *KickTeamCCmd) GetZoneid() uint64 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return 0
}

func (x *KickTeamCCmd) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return 0
}

type FightConfirmCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param      *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=13" json:"param,omitempty"`
	Type       *EPvpType    `protobuf:"varint,3,opt,name=type,enum=Cmd.EPvpType" json:"type,omitempty"`
	Roomid     *uint64      `protobuf:"varint,4,opt,name=roomid" json:"roomid,omitempty"`
	Teamid     *uint64      `protobuf:"varint,5,opt,name=teamid" json:"teamid,omitempty"`
	Reply      *EMatchReply `protobuf:"varint,6,opt,name=reply,enum=Cmd.EMatchReply" json:"reply,omitempty"`
	Challenger *string      `protobuf:"bytes,7,opt,name=challenger" json:"challenger,omitempty"`
}

// Default values for FightConfirmCCmd fields.
const (
	Default_FightConfirmCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_FightConfirmCCmd_Param = MatchCParam_MATCHCPARAM_FIGHT_CONFIRM
)

func (x *FightConfirmCCmd) Reset() {
	*x = FightConfirmCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FightConfirmCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightConfirmCCmd) ProtoMessage() {}

func (x *FightConfirmCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightConfirmCCmd.ProtoReflect.Descriptor instead.
func (*FightConfirmCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{16}
}

func (x *FightConfirmCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FightConfirmCCmd_Cmd
}

func (x *FightConfirmCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FightConfirmCCmd_Param
}

func (x *FightConfirmCCmd) GetType() EPvpType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *FightConfirmCCmd) GetRoomid() uint64 {
	if x != nil && x.Roomid != nil {
		return *x.Roomid
	}
	return 0
}

func (x *FightConfirmCCmd) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return 0
}

func (x *FightConfirmCCmd) GetReply() EMatchReply {
	if x != nil && x.Reply != nil {
		return *x.Reply
	}
	return EMatchReply_EMATCHREPLY_AGREE
}

func (x *FightConfirmCCmd) GetChallenger() string {
	if x != nil && x.Challenger != nil {
		return *x.Challenger
	}
	return ""
}

type RankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid *uint64 `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Index  *uint32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Rank   *uint32 `protobuf:"varint,3,opt,name=rank" json:"rank,omitempty"`
	Name   *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (x *RankInfo) Reset() {
	*x = RankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankInfo) ProtoMessage() {}

func (x *RankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankInfo.ProtoReflect.Descriptor instead.
func (*RankInfo) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{17}
}

func (x *RankInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *RankInfo) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *RankInfo) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *RankInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type RewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid *uint32 `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	Count  *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *RewardInfo) Reset() {
	*x = RewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardInfo) ProtoMessage() {}

func (x *RewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardInfo.ProtoReflect.Descriptor instead.
func (*RewardInfo) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{18}
}

func (x *RewardInfo) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *RewardInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type PvpResultCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param  *MatchCParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=14" json:"param,omitempty"`
	Type   *EPvpType     `protobuf:"varint,3,req,name=type,enum=Cmd.EPvpType" json:"type,omitempty"`
	Result *EPvpResult   `protobuf:"varint,4,req,name=result,enum=Cmd.EPvpResult" json:"result,omitempty"`
	Rank   []*RankInfo   `protobuf:"bytes,5,rep,name=rank" json:"rank,omitempty"`
	Reward []*RewardInfo `protobuf:"bytes,6,rep,name=reward" json:"reward,omitempty"`
	Apple  *uint32       `protobuf:"varint,7,opt,name=apple" json:"apple,omitempty"`
}

// Default values for PvpResultCCmd fields.
const (
	Default_PvpResultCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_PvpResultCCmd_Param = MatchCParam_MATCHCPARAM_PVP_RESULT
)

func (x *PvpResultCCmd) Reset() {
	*x = PvpResultCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpResultCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpResultCCmd) ProtoMessage() {}

func (x *PvpResultCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpResultCCmd.ProtoReflect.Descriptor instead.
func (*PvpResultCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{19}
}

func (x *PvpResultCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PvpResultCCmd_Cmd
}

func (x *PvpResultCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PvpResultCCmd_Param
}

func (x *PvpResultCCmd) GetType() EPvpType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *PvpResultCCmd) GetResult() EPvpResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return EPvpResult_EPVPRESULT_MIN
}

func (x *PvpResultCCmd) GetRank() []*RankInfo {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *PvpResultCCmd) GetReward() []*RewardInfo {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *PvpResultCCmd) GetApple() uint32 {
	if x != nil && x.Apple != nil {
		return *x.Apple
	}
	return 0
}

type MatchTeamMemUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zoneid   *uint32       `protobuf:"varint,3,opt,name=zoneid" json:"zoneid,omitempty"`
	Teamid   *uint64       `protobuf:"varint,4,opt,name=teamid" json:"teamid,omitempty"`
	Roomid   *uint64       `protobuf:"varint,5,opt,name=roomid" json:"roomid,omitempty"`
	Isfirst  *bool         `protobuf:"varint,6,opt,name=isfirst" json:"isfirst,omitempty"`
	Updates  []*TeamMember `protobuf:"bytes,7,rep,name=updates" json:"updates,omitempty"`
	Deletes  []uint64      `protobuf:"varint,8,rep,name=deletes" json:"deletes,omitempty"`
	Index    *uint32       `protobuf:"varint,9,opt,name=index" json:"index,omitempty"`
	Teamname *string       `protobuf:"bytes,10,opt,name=teamname" json:"teamname,omitempty"`
}

func (x *MatchTeamMemUpdateInfo) Reset() {
	*x = MatchTeamMemUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchTeamMemUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTeamMemUpdateInfo) ProtoMessage() {}

func (x *MatchTeamMemUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTeamMemUpdateInfo.ProtoReflect.Descriptor instead.
func (*MatchTeamMemUpdateInfo) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{20}
}

func (x *MatchTeamMemUpdateInfo) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return 0
}

func (x *MatchTeamMemUpdateInfo) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return 0
}

func (x *MatchTeamMemUpdateInfo) GetRoomid() uint64 {
	if x != nil && x.Roomid != nil {
		return *x.Roomid
	}
	return 0
}

func (x *MatchTeamMemUpdateInfo) GetIsfirst() bool {
	if x != nil && x.Isfirst != nil {
		return *x.Isfirst
	}
	return false
}

func (x *MatchTeamMemUpdateInfo) GetUpdates() []*TeamMember {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *MatchTeamMemUpdateInfo) GetDeletes() []uint64 {
	if x != nil {
		return x.Deletes
	}
	return nil
}

func (x *MatchTeamMemUpdateInfo) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *MatchTeamMemUpdateInfo) GetTeamname() string {
	if x != nil && x.Teamname != nil {
		return *x.Teamname
	}
	return ""
}

type PvpTeamMemberUpdateCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command                `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param *MatchCParam            `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=15" json:"param,omitempty"`
	Data  *MatchTeamMemUpdateInfo `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

// Default values for PvpTeamMemberUpdateCCmd fields.
const (
	Default_PvpTeamMemberUpdateCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_PvpTeamMemberUpdateCCmd_Param = MatchCParam_MATCHCPARAM_PVP_MEMBERUPDATE
)

func (x *PvpTeamMemberUpdateCCmd) Reset() {
	*x = PvpTeamMemberUpdateCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpTeamMemberUpdateCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpTeamMemberUpdateCCmd) ProtoMessage() {}

func (x *PvpTeamMemberUpdateCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpTeamMemberUpdateCCmd.ProtoReflect.Descriptor instead.
func (*PvpTeamMemberUpdateCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{21}
}

func (x *PvpTeamMemberUpdateCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PvpTeamMemberUpdateCCmd_Cmd
}

func (x *PvpTeamMemberUpdateCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PvpTeamMemberUpdateCCmd_Param
}

func (x *PvpTeamMemberUpdateCCmd) GetData() *MatchTeamMemUpdateInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type MatchTeamMemDataUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zoneid  *uint32       `protobuf:"varint,3,opt,name=zoneid" json:"zoneid,omitempty"`
	Teamid  *uint64       `protobuf:"varint,4,opt,name=teamid" json:"teamid,omitempty"`
	Charid  *uint64       `protobuf:"varint,5,opt,name=charid" json:"charid,omitempty"`
	Roomid  *uint64       `protobuf:"varint,6,opt,name=roomid" json:"roomid,omitempty"`
	Members []*MemberData `protobuf:"bytes,7,rep,name=members" json:"members,omitempty"`
}

func (x *MatchTeamMemDataUpdateInfo) Reset() {
	*x = MatchTeamMemDataUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchTeamMemDataUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTeamMemDataUpdateInfo) ProtoMessage() {}

func (x *MatchTeamMemDataUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTeamMemDataUpdateInfo.ProtoReflect.Descriptor instead.
func (*MatchTeamMemDataUpdateInfo) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{22}
}

func (x *MatchTeamMemDataUpdateInfo) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return 0
}

func (x *MatchTeamMemDataUpdateInfo) GetTeamid() uint64 {
	if x != nil && x.Teamid != nil {
		return *x.Teamid
	}
	return 0
}

func (x *MatchTeamMemDataUpdateInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *MatchTeamMemDataUpdateInfo) GetRoomid() uint64 {
	if x != nil && x.Roomid != nil {
		return *x.Roomid
	}
	return 0
}

func (x *MatchTeamMemDataUpdateInfo) GetMembers() []*MemberData {
	if x != nil {
		return x.Members
	}
	return nil
}

type PvpMemberDataUpdateCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command                    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param *MatchCParam                `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=16" json:"param,omitempty"`
	Data  *MatchTeamMemDataUpdateInfo `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

// Default values for PvpMemberDataUpdateCCmd fields.
const (
	Default_PvpMemberDataUpdateCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_PvpMemberDataUpdateCCmd_Param = MatchCParam_MATCHCPARAM_PVP_MEMBERDATAUPDATE
)

func (x *PvpMemberDataUpdateCCmd) Reset() {
	*x = PvpMemberDataUpdateCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvpMemberDataUpdateCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvpMemberDataUpdateCCmd) ProtoMessage() {}

func (x *PvpMemberDataUpdateCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvpMemberDataUpdateCCmd.ProtoReflect.Descriptor instead.
func (*PvpMemberDataUpdateCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{23}
}

func (x *PvpMemberDataUpdateCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PvpMemberDataUpdateCCmd_Cmd
}

func (x *PvpMemberDataUpdateCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PvpMemberDataUpdateCCmd_Param
}

func (x *PvpMemberDataUpdateCCmd) GetData() *MatchTeamMemDataUpdateInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type NtfMatchInfoCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param   *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=17" json:"param,omitempty"`
	Etype   *EPvpType    `protobuf:"varint,3,opt,name=etype,enum=Cmd.EPvpType,def=4" json:"etype,omitempty"`
	Ismatch *bool        `protobuf:"varint,4,opt,name=ismatch,def=0" json:"ismatch,omitempty"`
	Isfight *bool        `protobuf:"varint,5,opt,name=isfight,def=0" json:"isfight,omitempty"`
}

// Default values for NtfMatchInfoCCmd fields.
const (
	Default_NtfMatchInfoCCmd_Cmd     = Command_MATCHC_PROTOCMD
	Default_NtfMatchInfoCCmd_Param   = MatchCParam_MATCHCPARAM_NTF_MATCHINFO
	Default_NtfMatchInfoCCmd_Etype   = EPvpType_EPVPTYPE_POLLY
	Default_NtfMatchInfoCCmd_Ismatch = bool(false)
	Default_NtfMatchInfoCCmd_Isfight = bool(false)
)

func (x *NtfMatchInfoCCmd) Reset() {
	*x = NtfMatchInfoCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfMatchInfoCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfMatchInfoCCmd) ProtoMessage() {}

func (x *NtfMatchInfoCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfMatchInfoCCmd.ProtoReflect.Descriptor instead.
func (*NtfMatchInfoCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{24}
}

func (x *NtfMatchInfoCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfMatchInfoCCmd_Cmd
}

func (x *NtfMatchInfoCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfMatchInfoCCmd_Param
}

func (x *NtfMatchInfoCCmd) GetEtype() EPvpType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_NtfMatchInfoCCmd_Etype
}

func (x *NtfMatchInfoCCmd) GetIsmatch() bool {
	if x != nil && x.Ismatch != nil {
		return *x.Ismatch
	}
	return Default_NtfMatchInfoCCmd_Ismatch
}

func (x *NtfMatchInfoCCmd) GetIsfight() bool {
	if x != nil && x.Isfight != nil {
		return *x.Isfight
	}
	return Default_NtfMatchInfoCCmd_Isfight
}

type GodEndTimeCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param   *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=18" json:"param,omitempty"`
	Endtime *uint32      `protobuf:"varint,3,opt,name=endtime" json:"endtime,omitempty"`
}

// Default values for GodEndTimeCCmd fields.
const (
	Default_GodEndTimeCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_GodEndTimeCCmd_Param = MatchCParam_MATCHCPARAM_GOD_ENDTIME
)

func (x *GodEndTimeCCmd) Reset() {
	*x = GodEndTimeCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GodEndTimeCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GodEndTimeCCmd) ProtoMessage() {}

func (x *GodEndTimeCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GodEndTimeCCmd.ProtoReflect.Descriptor instead.
func (*GodEndTimeCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{25}
}

func (x *GodEndTimeCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_GodEndTimeCCmd_Cmd
}

func (x *GodEndTimeCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_GodEndTimeCCmd_Param
}

func (x *GodEndTimeCCmd) GetEndtime() uint32 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

type RankNameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Apple *uint32 `protobuf:"varint,2,opt,name=apple" json:"apple,omitempty"`
}

func (x *RankNameInfo) Reset() {
	*x = RankNameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankNameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankNameInfo) ProtoMessage() {}

func (x *RankNameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankNameInfo.ProtoReflect.Descriptor instead.
func (*RankNameInfo) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{26}
}

func (x *RankNameInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RankNameInfo) GetApple() uint32 {
	if x != nil && x.Apple != nil {
		return *x.Apple
	}
	return 0
}

type NtfRankChangeCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command        `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param *MatchCParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=19" json:"param,omitempty"`
	Ranks []*RankNameInfo `protobuf:"bytes,3,rep,name=ranks" json:"ranks,omitempty"`
}

// Default values for NtfRankChangeCCmd fields.
const (
	Default_NtfRankChangeCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_NtfRankChangeCCmd_Param = MatchCParam_MATCHCPARAM_NTF_RANK_CHANGE
)

func (x *NtfRankChangeCCmd) Reset() {
	*x = NtfRankChangeCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NtfRankChangeCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NtfRankChangeCCmd) ProtoMessage() {}

func (x *NtfRankChangeCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NtfRankChangeCCmd.ProtoReflect.Descriptor instead.
func (*NtfRankChangeCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{27}
}

func (x *NtfRankChangeCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NtfRankChangeCCmd_Cmd
}

func (x *NtfRankChangeCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NtfRankChangeCCmd_Param
}

func (x *NtfRankChangeCCmd) GetRanks() []*RankNameInfo {
	if x != nil {
		return x.Ranks
	}
	return nil
}

type OpenGlobalShopPanelCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=20" json:"param,omitempty"`
	Open  *bool        `protobuf:"varint,3,opt,name=open" json:"open,omitempty"`
}

// Default values for OpenGlobalShopPanelCCmd fields.
const (
	Default_OpenGlobalShopPanelCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_OpenGlobalShopPanelCCmd_Param = MatchCParam_MATCHCPARAM_OPEN_GLOBAL_SHOP_PANEL
)

func (x *OpenGlobalShopPanelCCmd) Reset() {
	*x = OpenGlobalShopPanelCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenGlobalShopPanelCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenGlobalShopPanelCCmd) ProtoMessage() {}

func (x *OpenGlobalShopPanelCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenGlobalShopPanelCCmd.ProtoReflect.Descriptor instead.
func (*OpenGlobalShopPanelCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{28}
}

func (x *OpenGlobalShopPanelCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_OpenGlobalShopPanelCCmd_Cmd
}

func (x *OpenGlobalShopPanelCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_OpenGlobalShopPanelCCmd_Param
}

func (x *OpenGlobalShopPanelCCmd) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return false
}

type TutorMatchResultNtfMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param  *MatchCParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=21" json:"param,omitempty"`
	Target *TutorMatcher `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Status *ETutorMatch  `protobuf:"varint,4,opt,name=status,enum=Cmd.ETutorMatch,def=0" json:"status,omitempty"`
}

// Default values for TutorMatchResultNtfMatchCCmd fields.
const (
	Default_TutorMatchResultNtfMatchCCmd_Cmd    = Command_MATCHC_PROTOCMD
	Default_TutorMatchResultNtfMatchCCmd_Param  = MatchCParam_MATCHCPARAM_TUTOR_MATCHNTF
	Default_TutorMatchResultNtfMatchCCmd_Status = ETutorMatch_ETUTORMATCH_MIN
)

func (x *TutorMatchResultNtfMatchCCmd) Reset() {
	*x = TutorMatchResultNtfMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorMatchResultNtfMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorMatchResultNtfMatchCCmd) ProtoMessage() {}

func (x *TutorMatchResultNtfMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorMatchResultNtfMatchCCmd.ProtoReflect.Descriptor instead.
func (*TutorMatchResultNtfMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{29}
}

func (x *TutorMatchResultNtfMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TutorMatchResultNtfMatchCCmd_Cmd
}

func (x *TutorMatchResultNtfMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TutorMatchResultNtfMatchCCmd_Param
}

func (x *TutorMatchResultNtfMatchCCmd) GetTarget() *TutorMatcher {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *TutorMatchResultNtfMatchCCmd) GetStatus() ETutorMatch {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_TutorMatchResultNtfMatchCCmd_Status
}

type TutorMatchResponseMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param  *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=22" json:"param,omitempty"`
	Status *ETutorMatch `protobuf:"varint,3,opt,name=status,enum=Cmd.ETutorMatch,def=0" json:"status,omitempty"`
}

// Default values for TutorMatchResponseMatchCCmd fields.
const (
	Default_TutorMatchResponseMatchCCmd_Cmd    = Command_MATCHC_PROTOCMD
	Default_TutorMatchResponseMatchCCmd_Param  = MatchCParam_MATCHCPARAM_TUTOR_MATCHRESPONSE
	Default_TutorMatchResponseMatchCCmd_Status = ETutorMatch_ETUTORMATCH_MIN
)

func (x *TutorMatchResponseMatchCCmd) Reset() {
	*x = TutorMatchResponseMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorMatchResponseMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorMatchResponseMatchCCmd) ProtoMessage() {}

func (x *TutorMatchResponseMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorMatchResponseMatchCCmd.ProtoReflect.Descriptor instead.
func (*TutorMatchResponseMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{30}
}

func (x *TutorMatchResponseMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TutorMatchResponseMatchCCmd_Cmd
}

func (x *TutorMatchResponseMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TutorMatchResponseMatchCCmd_Param
}

func (x *TutorMatchResponseMatchCCmd) GetStatus() ETutorMatch {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_TutorMatchResponseMatchCCmd_Status
}

type TeamPwsPreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charids []uint64 `protobuf:"varint,1,rep,name=charids" json:"charids,omitempty"`
}

func (x *TeamPwsPreInfo) Reset() {
	*x = TeamPwsPreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamPwsPreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamPwsPreInfo) ProtoMessage() {}

func (x *TeamPwsPreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamPwsPreInfo.ProtoReflect.Descriptor instead.
func (*TeamPwsPreInfo) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{31}
}

func (x *TeamPwsPreInfo) GetCharids() []uint64 {
	if x != nil {
		return x.Charids
	}
	return nil
}

type TeamPwsPreInfoMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param     *MatchCParam      `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=23" json:"param,omitempty"`
	Teaminfos []*TeamPwsPreInfo `protobuf:"bytes,3,rep,name=teaminfos" json:"teaminfos,omitempty"`
	Etype     *EPvpType         `protobuf:"varint,4,opt,name=etype,enum=Cmd.EPvpType,def=8" json:"etype,omitempty"`
	Goodmatch *bool             `protobuf:"varint,5,opt,name=goodmatch,def=1" json:"goodmatch,omitempty"`
}

// Default values for TeamPwsPreInfoMatchCCmd fields.
const (
	Default_TeamPwsPreInfoMatchCCmd_Cmd       = Command_MATCHC_PROTOCMD
	Default_TeamPwsPreInfoMatchCCmd_Param     = MatchCParam_MATCHCPARAM_TEAMPWS_PREPARE_LIST
	Default_TeamPwsPreInfoMatchCCmd_Etype     = EPvpType_EPVPTYPE_TEAMPWS
	Default_TeamPwsPreInfoMatchCCmd_Goodmatch = bool(true)
)

func (x *TeamPwsPreInfoMatchCCmd) Reset() {
	*x = TeamPwsPreInfoMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamPwsPreInfoMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamPwsPreInfoMatchCCmd) ProtoMessage() {}

func (x *TeamPwsPreInfoMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamPwsPreInfoMatchCCmd.ProtoReflect.Descriptor instead.
func (*TeamPwsPreInfoMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{32}
}

func (x *TeamPwsPreInfoMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamPwsPreInfoMatchCCmd_Cmd
}

func (x *TeamPwsPreInfoMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamPwsPreInfoMatchCCmd_Param
}

func (x *TeamPwsPreInfoMatchCCmd) GetTeaminfos() []*TeamPwsPreInfo {
	if x != nil {
		return x.Teaminfos
	}
	return nil
}

func (x *TeamPwsPreInfoMatchCCmd) GetEtype() EPvpType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_TeamPwsPreInfoMatchCCmd_Etype
}

func (x *TeamPwsPreInfoMatchCCmd) GetGoodmatch() bool {
	if x != nil && x.Goodmatch != nil {
		return *x.Goodmatch
	}
	return Default_TeamPwsPreInfoMatchCCmd_Goodmatch
}

type UpdatePreInfoMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param  *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=24" json:"param,omitempty"`
	Charid *uint64      `protobuf:"varint,3,opt,name=charid,def=0" json:"charid,omitempty"`
	Etype  *EPvpType    `protobuf:"varint,4,opt,name=etype,enum=Cmd.EPvpType,def=0" json:"etype,omitempty"`
	Raidid *uint32      `protobuf:"varint,5,opt,name=raidid,def=0" json:"raidid,omitempty"`
}

// Default values for UpdatePreInfoMatchCCmd fields.
const (
	Default_UpdatePreInfoMatchCCmd_Cmd    = Command_MATCHC_PROTOCMD
	Default_UpdatePreInfoMatchCCmd_Param  = MatchCParam_MATCHCPARAM_TEAMPWS_PREPARE_UPDATE
	Default_UpdatePreInfoMatchCCmd_Charid = uint64(0)
	Default_UpdatePreInfoMatchCCmd_Etype  = EPvpType_EPVPTYPE_MIN
	Default_UpdatePreInfoMatchCCmd_Raidid = uint32(0)
)

func (x *UpdatePreInfoMatchCCmd) Reset() {
	*x = UpdatePreInfoMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePreInfoMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePreInfoMatchCCmd) ProtoMessage() {}

func (x *UpdatePreInfoMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePreInfoMatchCCmd.ProtoReflect.Descriptor instead.
func (*UpdatePreInfoMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{33}
}

func (x *UpdatePreInfoMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdatePreInfoMatchCCmd_Cmd
}

func (x *UpdatePreInfoMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdatePreInfoMatchCCmd_Param
}

func (x *UpdatePreInfoMatchCCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_UpdatePreInfoMatchCCmd_Charid
}

func (x *UpdatePreInfoMatchCCmd) GetEtype() EPvpType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_UpdatePreInfoMatchCCmd_Etype
}

func (x *UpdatePreInfoMatchCCmd) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return Default_UpdatePreInfoMatchCCmd_Raidid
}

type TeamPwsRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Portrait   *UserPortraitData `protobuf:"bytes,2,opt,name=portrait" json:"portrait,omitempty"`
	Rank       *uint32           `protobuf:"varint,3,opt,name=rank" json:"rank,omitempty"`
	Score      *uint32           `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
	Erank      *ETeamPwsRank     `protobuf:"varint,5,opt,name=erank,enum=Cmd.ETeamPwsRank" json:"erank,omitempty"`
	Profession *EProfession      `protobuf:"varint,6,opt,name=profession,enum=Cmd.EProfession" json:"profession,omitempty"`
	Charid     *uint64           `protobuf:"varint,7,opt,name=charid" json:"charid,omitempty"`
	Level      *uint32           `protobuf:"varint,8,opt,name=level" json:"level,omitempty"`
	Guildname  *string           `protobuf:"bytes,9,opt,name=guildname" json:"guildname,omitempty"`
}

func (x *TeamPwsRankInfo) Reset() {
	*x = TeamPwsRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamPwsRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamPwsRankInfo) ProtoMessage() {}

func (x *TeamPwsRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamPwsRankInfo.ProtoReflect.Descriptor instead.
func (*TeamPwsRankInfo) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{34}
}

func (x *TeamPwsRankInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TeamPwsRankInfo) GetPortrait() *UserPortraitData {
	if x != nil {
		return x.Portrait
	}
	return nil
}

func (x *TeamPwsRankInfo) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *TeamPwsRankInfo) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *TeamPwsRankInfo) GetErank() ETeamPwsRank {
	if x != nil && x.Erank != nil {
		return *x.Erank
	}
	return ETeamPwsRank_ETEAMPWSRANK_EXCELLENT
}

func (x *TeamPwsRankInfo) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return EProfession_EPROFESSION_MIN
}

func (x *TeamPwsRankInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *TeamPwsRankInfo) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *TeamPwsRankInfo) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

type QueryTeamPwsRankMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param    *MatchCParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=25" json:"param,omitempty"`
	Rankinfo []*TeamPwsRankInfo `protobuf:"bytes,3,rep,name=rankinfo" json:"rankinfo,omitempty"`
}

// Default values for QueryTeamPwsRankMatchCCmd fields.
const (
	Default_QueryTeamPwsRankMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_QueryTeamPwsRankMatchCCmd_Param = MatchCParam_MATCHCPARAM_TEAMPWS_QUERY_RANK
)

func (x *QueryTeamPwsRankMatchCCmd) Reset() {
	*x = QueryTeamPwsRankMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTeamPwsRankMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTeamPwsRankMatchCCmd) ProtoMessage() {}

func (x *QueryTeamPwsRankMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTeamPwsRankMatchCCmd.ProtoReflect.Descriptor instead.
func (*QueryTeamPwsRankMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{35}
}

func (x *QueryTeamPwsRankMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryTeamPwsRankMatchCCmd_Cmd
}

func (x *QueryTeamPwsRankMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryTeamPwsRankMatchCCmd_Param
}

func (x *QueryTeamPwsRankMatchCCmd) GetRankinfo() []*TeamPwsRankInfo {
	if x != nil {
		return x.Rankinfo
	}
	return nil
}

type TeamPwsUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid *uint64       `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Score  *uint32       `protobuf:"varint,2,opt,name=score,def=0" json:"score,omitempty"`
	Erank  *ETeamPwsRank `protobuf:"varint,3,opt,name=erank,enum=Cmd.ETeamPwsRank,def=5" json:"erank,omitempty"`
}

// Default values for TeamPwsUserInfo fields.
const (
	Default_TeamPwsUserInfo_Score = uint32(0)
	Default_TeamPwsUserInfo_Erank = ETeamPwsRank_ETEAMPWSRANK_NONE
)

func (x *TeamPwsUserInfo) Reset() {
	*x = TeamPwsUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamPwsUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamPwsUserInfo) ProtoMessage() {}

func (x *TeamPwsUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamPwsUserInfo.ProtoReflect.Descriptor instead.
func (*TeamPwsUserInfo) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{36}
}

func (x *TeamPwsUserInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *TeamPwsUserInfo) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return Default_TeamPwsUserInfo_Score
}

func (x *TeamPwsUserInfo) GetErank() ETeamPwsRank {
	if x != nil && x.Erank != nil {
		return *x.Erank
	}
	return Default_TeamPwsUserInfo_Erank
}

type QueryTeamPwsTeamInfoMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd              *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param            *MatchCParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=26" json:"param,omitempty"`
	Userinfos        []*TeamPwsUserInfo `protobuf:"bytes,3,rep,name=userinfos" json:"userinfos,omitempty"`
	Myrank           *uint32            `protobuf:"varint,4,opt,name=myrank,def=0" json:"myrank,omitempty"`
	Season           *uint32            `protobuf:"varint,5,opt,name=season" json:"season,omitempty"`
	Count            *uint32            `protobuf:"varint,6,opt,name=count" json:"count,omitempty"`
	Opentime         *uint32            `protobuf:"varint,7,opt,name=opentime,def=0" json:"opentime,omitempty"`
	SeasonBegin      *uint32            `protobuf:"varint,8,opt,name=season_begin,json=seasonBegin,def=0" json:"season_begin,omitempty"`
	SeasonBreakbegin *uint32            `protobuf:"varint,9,opt,name=season_breakbegin,json=seasonBreakbegin,def=0" json:"season_breakbegin,omitempty"`
	SeasonBreakend   *uint32            `protobuf:"varint,10,opt,name=season_breakend,json=seasonBreakend,def=0" json:"season_breakend,omitempty"`
}

// Default values for QueryTeamPwsTeamInfoMatchCCmd fields.
const (
	Default_QueryTeamPwsTeamInfoMatchCCmd_Cmd              = Command_MATCHC_PROTOCMD
	Default_QueryTeamPwsTeamInfoMatchCCmd_Param            = MatchCParam_MATCHCPARAM_TEAMPWS_QUERY_TEAMINFO
	Default_QueryTeamPwsTeamInfoMatchCCmd_Myrank           = uint32(0)
	Default_QueryTeamPwsTeamInfoMatchCCmd_Opentime         = uint32(0)
	Default_QueryTeamPwsTeamInfoMatchCCmd_SeasonBegin      = uint32(0)
	Default_QueryTeamPwsTeamInfoMatchCCmd_SeasonBreakbegin = uint32(0)
	Default_QueryTeamPwsTeamInfoMatchCCmd_SeasonBreakend   = uint32(0)
)

func (x *QueryTeamPwsTeamInfoMatchCCmd) Reset() {
	*x = QueryTeamPwsTeamInfoMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTeamPwsTeamInfoMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTeamPwsTeamInfoMatchCCmd) ProtoMessage() {}

func (x *QueryTeamPwsTeamInfoMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTeamPwsTeamInfoMatchCCmd.ProtoReflect.Descriptor instead.
func (*QueryTeamPwsTeamInfoMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{37}
}

func (x *QueryTeamPwsTeamInfoMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryTeamPwsTeamInfoMatchCCmd_Cmd
}

func (x *QueryTeamPwsTeamInfoMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryTeamPwsTeamInfoMatchCCmd_Param
}

func (x *QueryTeamPwsTeamInfoMatchCCmd) GetUserinfos() []*TeamPwsUserInfo {
	if x != nil {
		return x.Userinfos
	}
	return nil
}

func (x *QueryTeamPwsTeamInfoMatchCCmd) GetMyrank() uint32 {
	if x != nil && x.Myrank != nil {
		return *x.Myrank
	}
	return Default_QueryTeamPwsTeamInfoMatchCCmd_Myrank
}

func (x *QueryTeamPwsTeamInfoMatchCCmd) GetSeason() uint32 {
	if x != nil && x.Season != nil {
		return *x.Season
	}
	return 0
}

func (x *QueryTeamPwsTeamInfoMatchCCmd) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *QueryTeamPwsTeamInfoMatchCCmd) GetOpentime() uint32 {
	if x != nil && x.Opentime != nil {
		return *x.Opentime
	}
	return Default_QueryTeamPwsTeamInfoMatchCCmd_Opentime
}

func (x *QueryTeamPwsTeamInfoMatchCCmd) GetSeasonBegin() uint32 {
	if x != nil && x.SeasonBegin != nil {
		return *x.SeasonBegin
	}
	return Default_QueryTeamPwsTeamInfoMatchCCmd_SeasonBegin
}

func (x *QueryTeamPwsTeamInfoMatchCCmd) GetSeasonBreakbegin() uint32 {
	if x != nil && x.SeasonBreakbegin != nil {
		return *x.SeasonBreakbegin
	}
	return Default_QueryTeamPwsTeamInfoMatchCCmd_SeasonBreakbegin
}

func (x *QueryTeamPwsTeamInfoMatchCCmd) GetSeasonBreakend() uint32 {
	if x != nil && x.SeasonBreakend != nil {
		return *x.SeasonBreakend
	}
	return Default_QueryTeamPwsTeamInfoMatchCCmd_SeasonBreakend
}

type MenrocoRankData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid     *uint64      `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Score      *uint64      `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Level      *uint32      `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	Profession *EProfession `protobuf:"varint,4,opt,name=profession,enum=Cmd.EProfession" json:"profession,omitempty"`
	Name       *string      `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Guildname  *string      `protobuf:"bytes,6,opt,name=guildname" json:"guildname,omitempty"`
	Time       *uint32      `protobuf:"varint,7,opt,name=time" json:"time,omitempty"`
}

func (x *MenrocoRankData) Reset() {
	*x = MenrocoRankData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MenrocoRankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenrocoRankData) ProtoMessage() {}

func (x *MenrocoRankData) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenrocoRankData.ProtoReflect.Descriptor instead.
func (*MenrocoRankData) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{38}
}

func (x *MenrocoRankData) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *MenrocoRankData) GetScore() uint64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *MenrocoRankData) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *MenrocoRankData) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return EProfession_EPROFESSION_MIN
}

func (x *MenrocoRankData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MenrocoRankData) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

func (x *MenrocoRankData) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type QueryMenrocoRankMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param  *MatchCParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=27" json:"param,omitempty"`
	Myrank *uint32            `protobuf:"varint,3,opt,name=myrank" json:"myrank,omitempty"`
	Datas  []*MenrocoRankData `protobuf:"bytes,4,rep,name=datas" json:"datas,omitempty"`
}

// Default values for QueryMenrocoRankMatchCCmd fields.
const (
	Default_QueryMenrocoRankMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_QueryMenrocoRankMatchCCmd_Param = MatchCParam_MATCHCPARAM_MEMROCO_QUERY_RANK
)

func (x *QueryMenrocoRankMatchCCmd) Reset() {
	*x = QueryMenrocoRankMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMenrocoRankMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMenrocoRankMatchCCmd) ProtoMessage() {}

func (x *QueryMenrocoRankMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMenrocoRankMatchCCmd.ProtoReflect.Descriptor instead.
func (*QueryMenrocoRankMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{39}
}

func (x *QueryMenrocoRankMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryMenrocoRankMatchCCmd_Cmd
}

func (x *QueryMenrocoRankMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryMenrocoRankMatchCCmd_Param
}

func (x *QueryMenrocoRankMatchCCmd) GetMyrank() uint32 {
	if x != nil && x.Myrank != nil {
		return *x.Myrank
	}
	return 0
}

func (x *QueryMenrocoRankMatchCCmd) GetDatas() []*MenrocoRankData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type MidMatchPrepareMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param  *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=28" json:"param,omitempty"`
	Finish *bool        `protobuf:"varint,3,opt,name=finish,def=0" json:"finish,omitempty"`
}

// Default values for MidMatchPrepareMatchCCmd fields.
const (
	Default_MidMatchPrepareMatchCCmd_Cmd    = Command_MATCHC_PROTOCMD
	Default_MidMatchPrepareMatchCCmd_Param  = MatchCParam_MATCHCPARAM_MID_MATCH_PREPARE
	Default_MidMatchPrepareMatchCCmd_Finish = bool(false)
)

func (x *MidMatchPrepareMatchCCmd) Reset() {
	*x = MidMatchPrepareMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MidMatchPrepareMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MidMatchPrepareMatchCCmd) ProtoMessage() {}

func (x *MidMatchPrepareMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MidMatchPrepareMatchCCmd.ProtoReflect.Descriptor instead.
func (*MidMatchPrepareMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{40}
}

func (x *MidMatchPrepareMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MidMatchPrepareMatchCCmd_Cmd
}

func (x *MidMatchPrepareMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MidMatchPrepareMatchCCmd_Param
}

func (x *MidMatchPrepareMatchCCmd) GetFinish() bool {
	if x != nil && x.Finish != nil {
		return *x.Finish
	}
	return Default_MidMatchPrepareMatchCCmd_Finish
}

type BattlePassRankShowData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid   *uint64            `protobuf:"varint,1,opt,name=charid,def=0" json:"charid,omitempty"`
	Level    *uint32            `protobuf:"varint,2,opt,name=level,def=0" json:"level,omitempty"`
	Showdata *UserModelShowData `protobuf:"bytes,4,opt,name=showdata" json:"showdata,omitempty"`
}

// Default values for BattlePassRankShowData fields.
const (
	Default_BattlePassRankShowData_Charid = uint64(0)
	Default_BattlePassRankShowData_Level  = uint32(0)
)

func (x *BattlePassRankShowData) Reset() {
	*x = BattlePassRankShowData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattlePassRankShowData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassRankShowData) ProtoMessage() {}

func (x *BattlePassRankShowData) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassRankShowData.ProtoReflect.Descriptor instead.
func (*BattlePassRankShowData) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{41}
}

func (x *BattlePassRankShowData) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_BattlePassRankShowData_Charid
}

func (x *BattlePassRankShowData) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return Default_BattlePassRankShowData_Level
}

func (x *BattlePassRankShowData) GetShowdata() *UserModelShowData {
	if x != nil {
		return x.Showdata
	}
	return nil
}

type QueryBattlePassRankMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command                  `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param *MatchCParam              `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=29" json:"param,omitempty"`
	Datas []*BattlePassRankShowData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for QueryBattlePassRankMatchCCmd fields.
const (
	Default_QueryBattlePassRankMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_QueryBattlePassRankMatchCCmd_Param = MatchCParam_MATCHCPARAM_BATTLEPASS_RANK
)

func (x *QueryBattlePassRankMatchCCmd) Reset() {
	*x = QueryBattlePassRankMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBattlePassRankMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBattlePassRankMatchCCmd) ProtoMessage() {}

func (x *QueryBattlePassRankMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBattlePassRankMatchCCmd.ProtoReflect.Descriptor instead.
func (*QueryBattlePassRankMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{42}
}

func (x *QueryBattlePassRankMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryBattlePassRankMatchCCmd_Cmd
}

func (x *QueryBattlePassRankMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryBattlePassRankMatchCCmd_Param
}

func (x *QueryBattlePassRankMatchCCmd) GetDatas() []*BattlePassRankShowData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type TwelvePvpPreInfoMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=30" json:"param,omitempty"`
	Camp  *EGroupCamp  `protobuf:"varint,3,opt,name=camp,enum=Cmd.EGroupCamp" json:"camp,omitempty"`
	Etype *EPvpType    `protobuf:"varint,4,opt,name=etype,enum=Cmd.EPvpType,def=18" json:"etype,omitempty"`
}

// Default values for TwelvePvpPreInfoMatchCCmd fields.
const (
	Default_TwelvePvpPreInfoMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_TwelvePvpPreInfoMatchCCmd_Param = MatchCParam_MATCHCPARAM_TWELVEPVP_PREPARE_LIST
	Default_TwelvePvpPreInfoMatchCCmd_Etype = EPvpType_EPVPTYPE_TWELVE
)

func (x *TwelvePvpPreInfoMatchCCmd) Reset() {
	*x = TwelvePvpPreInfoMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelvePvpPreInfoMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelvePvpPreInfoMatchCCmd) ProtoMessage() {}

func (x *TwelvePvpPreInfoMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelvePvpPreInfoMatchCCmd.ProtoReflect.Descriptor instead.
func (*TwelvePvpPreInfoMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{43}
}

func (x *TwelvePvpPreInfoMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelvePvpPreInfoMatchCCmd_Cmd
}

func (x *TwelvePvpPreInfoMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelvePvpPreInfoMatchCCmd_Param
}

func (x *TwelvePvpPreInfoMatchCCmd) GetCamp() EGroupCamp {
	if x != nil && x.Camp != nil {
		return *x.Camp
	}
	return EGroupCamp_EGROUPCAMP_MIN
}

func (x *TwelvePvpPreInfoMatchCCmd) GetEtype() EPvpType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_TwelvePvpPreInfoMatchCCmd_Etype
}

type TwelvePvpUpdatePreInfoMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param  *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=31" json:"param,omitempty"`
	Camp   *EGroupCamp  `protobuf:"varint,3,opt,name=camp,enum=Cmd.EGroupCamp" json:"camp,omitempty"`
	Charid *uint64      `protobuf:"varint,4,opt,name=charid" json:"charid,omitempty"`
	Etype  *EPvpType    `protobuf:"varint,5,opt,name=etype,enum=Cmd.EPvpType,def=18" json:"etype,omitempty"`
	Raidid *uint32      `protobuf:"varint,6,opt,name=raidid" json:"raidid,omitempty"`
}

// Default values for TwelvePvpUpdatePreInfoMatchCCmd fields.
const (
	Default_TwelvePvpUpdatePreInfoMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_TwelvePvpUpdatePreInfoMatchCCmd_Param = MatchCParam_MATCHCPARAM_TWELVEPVP_PREPARE_UPDATE
	Default_TwelvePvpUpdatePreInfoMatchCCmd_Etype = EPvpType_EPVPTYPE_TWELVE
)

func (x *TwelvePvpUpdatePreInfoMatchCCmd) Reset() {
	*x = TwelvePvpUpdatePreInfoMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelvePvpUpdatePreInfoMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelvePvpUpdatePreInfoMatchCCmd) ProtoMessage() {}

func (x *TwelvePvpUpdatePreInfoMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelvePvpUpdatePreInfoMatchCCmd.ProtoReflect.Descriptor instead.
func (*TwelvePvpUpdatePreInfoMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{44}
}

func (x *TwelvePvpUpdatePreInfoMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelvePvpUpdatePreInfoMatchCCmd_Cmd
}

func (x *TwelvePvpUpdatePreInfoMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelvePvpUpdatePreInfoMatchCCmd_Param
}

func (x *TwelvePvpUpdatePreInfoMatchCCmd) GetCamp() EGroupCamp {
	if x != nil && x.Camp != nil {
		return *x.Camp
	}
	return EGroupCamp_EGROUPCAMP_MIN
}

func (x *TwelvePvpUpdatePreInfoMatchCCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *TwelvePvpUpdatePreInfoMatchCCmd) GetEtype() EPvpType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_TwelvePvpUpdatePreInfoMatchCCmd_Etype
}

func (x *TwelvePvpUpdatePreInfoMatchCCmd) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return 0
}

type WarbandMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid       *uint64      `protobuf:"varint,1,opt,name=guid" json:"guid,omitempty"`
	Createtime *uint32      `protobuf:"varint,2,opt,name=createtime" json:"createtime,omitempty"`
	Score      *uint32      `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	Job        *EWarbandJob `protobuf:"varint,4,opt,name=job,enum=Cmd.EWarbandJob" json:"job,omitempty"`
	Prepare    *bool        `protobuf:"varint,5,opt,name=prepare" json:"prepare,omitempty"`
}

func (x *WarbandMember) Reset() {
	*x = WarbandMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarbandMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarbandMember) ProtoMessage() {}

func (x *WarbandMember) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarbandMember.ProtoReflect.Descriptor instead.
func (*WarbandMember) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{45}
}

func (x *WarbandMember) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return 0
}

func (x *WarbandMember) GetCreatetime() uint32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return 0
}

func (x *WarbandMember) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *WarbandMember) GetJob() EWarbandJob {
	if x != nil && x.Job != nil {
		return *x.Job
	}
	return EWarbandJob_EWARBANDJOB_MIN
}

func (x *WarbandMember) GetPrepare() bool {
	if x != nil && x.Prepare != nil {
		return *x.Prepare
	}
	return false
}

type BlobWarbandMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*WarbandMember `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
}

func (x *BlobWarbandMember) Reset() {
	*x = BlobWarbandMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobWarbandMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobWarbandMember) ProtoMessage() {}

func (x *BlobWarbandMember) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobWarbandMember.ProtoReflect.Descriptor instead.
func (*BlobWarbandMember) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{46}
}

func (x *BlobWarbandMember) GetMembers() []*WarbandMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type BlobWarbandChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exits []string `protobuf:"bytes,1,rep,name=exits" json:"exits,omitempty"`
	Kicks []uint64 `protobuf:"varint,2,rep,name=kicks" json:"kicks,omitempty"`
}

func (x *BlobWarbandChange) Reset() {
	*x = BlobWarbandChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobWarbandChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobWarbandChange) ProtoMessage() {}

func (x *BlobWarbandChange) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobWarbandChange.ProtoReflect.Descriptor instead.
func (*BlobWarbandChange) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{47}
}

func (x *BlobWarbandChange) GetExits() []string {
	if x != nil {
		return x.Exits
	}
	return nil
}

func (x *BlobWarbandChange) GetKicks() []uint64 {
	if x != nil {
		return x.Kicks
	}
	return nil
}

type BlobSeasonWarbandInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memberinfos []*WarbandMemberInfo `protobuf:"bytes,1,rep,name=memberinfos" json:"memberinfos,omitempty"`
	Warbandinfo *WarbandTeamInfo     `protobuf:"bytes,2,opt,name=warbandinfo" json:"warbandinfo,omitempty"`
}

func (x *BlobSeasonWarbandInfo) Reset() {
	*x = BlobSeasonWarbandInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobSeasonWarbandInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobSeasonWarbandInfo) ProtoMessage() {}

func (x *BlobSeasonWarbandInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobSeasonWarbandInfo.ProtoReflect.Descriptor instead.
func (*BlobSeasonWarbandInfo) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{48}
}

func (x *BlobSeasonWarbandInfo) GetMemberinfos() []*WarbandMemberInfo {
	if x != nil {
		return x.Memberinfos
	}
	return nil
}

func (x *BlobSeasonWarbandInfo) GetWarbandinfo() *WarbandTeamInfo {
	if x != nil {
		return x.Warbandinfo
	}
	return nil
}

type WarbandMemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charid     *uint64           `protobuf:"varint,1,opt,name=charid" json:"charid,omitempty"`
	Level      *uint32           `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	Name       *string           `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Guildname  *string           `protobuf:"bytes,4,opt,name=guildname" json:"guildname,omitempty"`
	Profession *EProfession      `protobuf:"varint,5,opt,name=profession,enum=Cmd.EProfession" json:"profession,omitempty"`
	Prepare    *bool             `protobuf:"varint,6,opt,name=prepare" json:"prepare,omitempty"`
	Iscaptial  *bool             `protobuf:"varint,7,opt,name=iscaptial" json:"iscaptial,omitempty"`
	Isoffline  *bool             `protobuf:"varint,8,opt,name=isoffline" json:"isoffline,omitempty"`
	Score      *uint32           `protobuf:"varint,9,opt,name=score" json:"score,omitempty"`
	Portrait   *UserPortraitData `protobuf:"bytes,10,opt,name=portrait" json:"portrait,omitempty"`
}

func (x *WarbandMemberInfo) Reset() {
	*x = WarbandMemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarbandMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarbandMemberInfo) ProtoMessage() {}

func (x *WarbandMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarbandMemberInfo.ProtoReflect.Descriptor instead.
func (*WarbandMemberInfo) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{49}
}

func (x *WarbandMemberInfo) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *WarbandMemberInfo) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *WarbandMemberInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *WarbandMemberInfo) GetGuildname() string {
	if x != nil && x.Guildname != nil {
		return *x.Guildname
	}
	return ""
}

func (x *WarbandMemberInfo) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return EProfession_EPROFESSION_MIN
}

func (x *WarbandMemberInfo) GetPrepare() bool {
	if x != nil && x.Prepare != nil {
		return *x.Prepare
	}
	return false
}

func (x *WarbandMemberInfo) GetIscaptial() bool {
	if x != nil && x.Iscaptial != nil {
		return *x.Iscaptial
	}
	return false
}

func (x *WarbandMemberInfo) GetIsoffline() bool {
	if x != nil && x.Isoffline != nil {
		return *x.Isoffline
	}
	return false
}

func (x *WarbandMemberInfo) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *WarbandMemberInfo) GetPortrait() *UserPortraitData {
	if x != nil {
		return x.Portrait
	}
	return nil
}

type WarbandTeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank       *uint32           `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	Guid       *uint64           `protobuf:"varint,2,opt,name=guid" json:"guid,omitempty"`
	Bandname   *string           `protobuf:"bytes,3,opt,name=bandname" json:"bandname,omitempty"`
	Score      *uint32           `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
	Portrait   *UserPortraitData `protobuf:"bytes,5,opt,name=portrait" json:"portrait,omitempty"`
	Profession *EProfession      `protobuf:"varint,6,opt,name=profession,enum=Cmd.EProfession" json:"profession,omitempty"`
}

func (x *WarbandTeamInfo) Reset() {
	*x = WarbandTeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarbandTeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarbandTeamInfo) ProtoMessage() {}

func (x *WarbandTeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarbandTeamInfo.ProtoReflect.Descriptor instead.
func (*WarbandTeamInfo) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{50}
}

func (x *WarbandTeamInfo) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *WarbandTeamInfo) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return 0
}

func (x *WarbandTeamInfo) GetBandname() string {
	if x != nil && x.Bandname != nil {
		return *x.Bandname
	}
	return ""
}

func (x *WarbandTeamInfo) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *WarbandTeamInfo) GetPortrait() *UserPortraitData {
	if x != nil {
		return x.Portrait
	}
	return nil
}

func (x *WarbandTeamInfo) GetProfession() EProfession {
	if x != nil && x.Profession != nil {
		return *x.Profession
	}
	return EProfession_EPROFESSION_MIN
}

type SeasonSort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Season *uint32            `protobuf:"varint,1,opt,name=season" json:"season,omitempty"`
	Teams  []*WarbandTeamInfo `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
}

func (x *SeasonSort) Reset() {
	*x = SeasonSort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonSort) ProtoMessage() {}

func (x *SeasonSort) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonSort.ProtoReflect.Descriptor instead.
func (*SeasonSort) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{51}
}

func (x *SeasonSort) GetSeason() uint32 {
	if x != nil && x.Season != nil {
		return *x.Season
	}
	return 0
}

func (x *SeasonSort) GetTeams() []*WarbandTeamInfo {
	if x != nil {
		return x.Teams
	}
	return nil
}

type TwelveWarbandQueryMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param      *MatchCParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=43" json:"param,omitempty"`
	Season     *uint32              `protobuf:"varint,3,opt,name=season" json:"season,omitempty"`
	Guid       *uint64              `protobuf:"varint,4,opt,name=guid" json:"guid,omitempty"`
	Memberinfo []*WarbandMemberInfo `protobuf:"bytes,5,rep,name=memberinfo" json:"memberinfo,omitempty"`
}

// Default values for TwelveWarbandQueryMatchCCmd fields.
const (
	Default_TwelveWarbandQueryMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_TwelveWarbandQueryMatchCCmd_Param = MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_QUERY
)

func (x *TwelveWarbandQueryMatchCCmd) Reset() {
	*x = TwelveWarbandQueryMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelveWarbandQueryMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelveWarbandQueryMatchCCmd) ProtoMessage() {}

func (x *TwelveWarbandQueryMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelveWarbandQueryMatchCCmd.ProtoReflect.Descriptor instead.
func (*TwelveWarbandQueryMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{52}
}

func (x *TwelveWarbandQueryMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelveWarbandQueryMatchCCmd_Cmd
}

func (x *TwelveWarbandQueryMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelveWarbandQueryMatchCCmd_Param
}

func (x *TwelveWarbandQueryMatchCCmd) GetSeason() uint32 {
	if x != nil && x.Season != nil {
		return *x.Season
	}
	return 0
}

func (x *TwelveWarbandQueryMatchCCmd) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return 0
}

func (x *TwelveWarbandQueryMatchCCmd) GetMemberinfo() []*WarbandMemberInfo {
	if x != nil {
		return x.Memberinfo
	}
	return nil
}

type TwelveWarbandSortMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param    *MatchCParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=32" json:"param,omitempty"`
	Sortinfo []*SeasonSort `protobuf:"bytes,3,rep,name=sortinfo" json:"sortinfo,omitempty"`
}

// Default values for TwelveWarbandSortMatchCCmd fields.
const (
	Default_TwelveWarbandSortMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_TwelveWarbandSortMatchCCmd_Param = MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_SORT
)

func (x *TwelveWarbandSortMatchCCmd) Reset() {
	*x = TwelveWarbandSortMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelveWarbandSortMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelveWarbandSortMatchCCmd) ProtoMessage() {}

func (x *TwelveWarbandSortMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelveWarbandSortMatchCCmd.ProtoReflect.Descriptor instead.
func (*TwelveWarbandSortMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{53}
}

func (x *TwelveWarbandSortMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelveWarbandSortMatchCCmd_Cmd
}

func (x *TwelveWarbandSortMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelveWarbandSortMatchCCmd_Param
}

func (x *TwelveWarbandSortMatchCCmd) GetSortinfo() []*SeasonSort {
	if x != nil {
		return x.Sortinfo
	}
	return nil
}

type OpponentTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    *uint32          `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Wintimes *uint32          `protobuf:"varint,2,opt,name=wintimes" json:"wintimes,omitempty"`
	Team     *WarbandTeamInfo `protobuf:"bytes,3,opt,name=team" json:"team,omitempty"`
}

func (x *OpponentTeam) Reset() {
	*x = OpponentTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpponentTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpponentTeam) ProtoMessage() {}

func (x *OpponentTeam) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpponentTeam.ProtoReflect.Descriptor instead.
func (*OpponentTeam) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{54}
}

func (x *OpponentTeam) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *OpponentTeam) GetWintimes() uint32 {
	if x != nil && x.Wintimes != nil {
		return *x.Wintimes
	}
	return 0
}

func (x *OpponentTeam) GetTeam() *WarbandTeamInfo {
	if x != nil {
		return x.Team
	}
	return nil
}

type GroupOpponentTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groupteaminfo []*OpponentTeam `protobuf:"bytes,1,rep,name=groupteaminfo" json:"groupteaminfo,omitempty"`
}

func (x *GroupOpponentTeam) Reset() {
	*x = GroupOpponentTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupOpponentTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupOpponentTeam) ProtoMessage() {}

func (x *GroupOpponentTeam) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupOpponentTeam.ProtoReflect.Descriptor instead.
func (*GroupOpponentTeam) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{55}
}

func (x *GroupOpponentTeam) GetGroupteaminfo() []*OpponentTeam {
	if x != nil {
		return x.Groupteaminfo
	}
	return nil
}

type TwelveWarbandTreeMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd              *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param            *MatchCParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=33" json:"param,omitempty"`
	Teaminfo         []*GroupOpponentTeam `protobuf:"bytes,3,rep,name=teaminfo" json:"teaminfo,omitempty"`
	Championteaminfo *GroupOpponentTeam   `protobuf:"bytes,4,opt,name=championteaminfo" json:"championteaminfo,omitempty"`
}

// Default values for TwelveWarbandTreeMatchCCmd fields.
const (
	Default_TwelveWarbandTreeMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_TwelveWarbandTreeMatchCCmd_Param = MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_TREE
)

func (x *TwelveWarbandTreeMatchCCmd) Reset() {
	*x = TwelveWarbandTreeMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelveWarbandTreeMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelveWarbandTreeMatchCCmd) ProtoMessage() {}

func (x *TwelveWarbandTreeMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelveWarbandTreeMatchCCmd.ProtoReflect.Descriptor instead.
func (*TwelveWarbandTreeMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{56}
}

func (x *TwelveWarbandTreeMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelveWarbandTreeMatchCCmd_Cmd
}

func (x *TwelveWarbandTreeMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelveWarbandTreeMatchCCmd_Param
}

func (x *TwelveWarbandTreeMatchCCmd) GetTeaminfo() []*GroupOpponentTeam {
	if x != nil {
		return x.Teaminfo
	}
	return nil
}

func (x *TwelveWarbandTreeMatchCCmd) GetChampionteaminfo() *GroupOpponentTeam {
	if x != nil {
		return x.Championteaminfo
	}
	return nil
}

type TwelveWarbandInfoMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command             `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param       *MatchCParam         `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=34" json:"param,omitempty"`
	Guid        *uint64              `protobuf:"varint,3,opt,name=guid" json:"guid,omitempty"`
	Warbandname *string              `protobuf:"bytes,4,opt,name=warbandname" json:"warbandname,omitempty"`
	Signup      *bool                `protobuf:"varint,5,opt,name=signup" json:"signup,omitempty"`
	Score       *uint32              `protobuf:"varint,6,opt,name=score" json:"score,omitempty"`
	Memberinfo  []*WarbandMemberInfo `protobuf:"bytes,7,rep,name=memberinfo" json:"memberinfo,omitempty"`
	Delmembers  []uint64             `protobuf:"varint,8,rep,name=delmembers" json:"delmembers,omitempty"`
}

// Default values for TwelveWarbandInfoMatchCCmd fields.
const (
	Default_TwelveWarbandInfoMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_TwelveWarbandInfoMatchCCmd_Param = MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_INFO
)

func (x *TwelveWarbandInfoMatchCCmd) Reset() {
	*x = TwelveWarbandInfoMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelveWarbandInfoMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelveWarbandInfoMatchCCmd) ProtoMessage() {}

func (x *TwelveWarbandInfoMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelveWarbandInfoMatchCCmd.ProtoReflect.Descriptor instead.
func (*TwelveWarbandInfoMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{57}
}

func (x *TwelveWarbandInfoMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelveWarbandInfoMatchCCmd_Cmd
}

func (x *TwelveWarbandInfoMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelveWarbandInfoMatchCCmd_Param
}

func (x *TwelveWarbandInfoMatchCCmd) GetGuid() uint64 {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return 0
}

func (x *TwelveWarbandInfoMatchCCmd) GetWarbandname() string {
	if x != nil && x.Warbandname != nil {
		return *x.Warbandname
	}
	return ""
}

func (x *TwelveWarbandInfoMatchCCmd) GetSignup() bool {
	if x != nil && x.Signup != nil {
		return *x.Signup
	}
	return false
}

func (x *TwelveWarbandInfoMatchCCmd) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *TwelveWarbandInfoMatchCCmd) GetMemberinfo() []*WarbandMemberInfo {
	if x != nil {
		return x.Memberinfo
	}
	return nil
}

func (x *TwelveWarbandInfoMatchCCmd) GetDelmembers() []uint64 {
	if x != nil {
		return x.Delmembers
	}
	return nil
}

type TwelveWarbandInviterMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param       *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=35" json:"param,omitempty"`
	Charid      *uint64      `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
	Warbandname *string      `protobuf:"bytes,4,opt,name=warbandname" json:"warbandname,omitempty"`
	Capitalname *string      `protobuf:"bytes,5,opt,name=capitalname" json:"capitalname,omitempty"`
	Zoneid      *uint32      `protobuf:"varint,6,opt,name=zoneid" json:"zoneid,omitempty"`
	Level       *uint32      `protobuf:"varint,7,opt,name=level" json:"level,omitempty"`
}

// Default values for TwelveWarbandInviterMatchCCmd fields.
const (
	Default_TwelveWarbandInviterMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_TwelveWarbandInviterMatchCCmd_Param = MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_INVITER
)

func (x *TwelveWarbandInviterMatchCCmd) Reset() {
	*x = TwelveWarbandInviterMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelveWarbandInviterMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelveWarbandInviterMatchCCmd) ProtoMessage() {}

func (x *TwelveWarbandInviterMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelveWarbandInviterMatchCCmd.ProtoReflect.Descriptor instead.
func (*TwelveWarbandInviterMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{58}
}

func (x *TwelveWarbandInviterMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelveWarbandInviterMatchCCmd_Cmd
}

func (x *TwelveWarbandInviterMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelveWarbandInviterMatchCCmd_Param
}

func (x *TwelveWarbandInviterMatchCCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *TwelveWarbandInviterMatchCCmd) GetWarbandname() string {
	if x != nil && x.Warbandname != nil {
		return *x.Warbandname
	}
	return ""
}

func (x *TwelveWarbandInviterMatchCCmd) GetCapitalname() string {
	if x != nil && x.Capitalname != nil {
		return *x.Capitalname
	}
	return ""
}

func (x *TwelveWarbandInviterMatchCCmd) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return 0
}

func (x *TwelveWarbandInviterMatchCCmd) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type TwelveWarbandInviteeMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param  *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=36" json:"param,omitempty"`
	Accept *bool        `protobuf:"varint,3,opt,name=accept" json:"accept,omitempty"`
	Name   *string      `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

// Default values for TwelveWarbandInviteeMatchCCmd fields.
const (
	Default_TwelveWarbandInviteeMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_TwelveWarbandInviteeMatchCCmd_Param = MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_INVITEE
)

func (x *TwelveWarbandInviteeMatchCCmd) Reset() {
	*x = TwelveWarbandInviteeMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelveWarbandInviteeMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelveWarbandInviteeMatchCCmd) ProtoMessage() {}

func (x *TwelveWarbandInviteeMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelveWarbandInviteeMatchCCmd.ProtoReflect.Descriptor instead.
func (*TwelveWarbandInviteeMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{59}
}

func (x *TwelveWarbandInviteeMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelveWarbandInviteeMatchCCmd_Cmd
}

func (x *TwelveWarbandInviteeMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelveWarbandInviteeMatchCCmd_Param
}

func (x *TwelveWarbandInviteeMatchCCmd) GetAccept() bool {
	if x != nil && x.Accept != nil {
		return *x.Accept
	}
	return false
}

func (x *TwelveWarbandInviteeMatchCCmd) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type TwelveWarbandPrepareMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param   *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=37" json:"param,omitempty"`
	Prepare *bool        `protobuf:"varint,3,opt,name=prepare" json:"prepare,omitempty"`
}

// Default values for TwelveWarbandPrepareMatchCCmd fields.
const (
	Default_TwelveWarbandPrepareMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_TwelveWarbandPrepareMatchCCmd_Param = MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_PREPARE
)

func (x *TwelveWarbandPrepareMatchCCmd) Reset() {
	*x = TwelveWarbandPrepareMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelveWarbandPrepareMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelveWarbandPrepareMatchCCmd) ProtoMessage() {}

func (x *TwelveWarbandPrepareMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelveWarbandPrepareMatchCCmd.ProtoReflect.Descriptor instead.
func (*TwelveWarbandPrepareMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{60}
}

func (x *TwelveWarbandPrepareMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelveWarbandPrepareMatchCCmd_Cmd
}

func (x *TwelveWarbandPrepareMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelveWarbandPrepareMatchCCmd_Param
}

func (x *TwelveWarbandPrepareMatchCCmd) GetPrepare() bool {
	if x != nil && x.Prepare != nil {
		return *x.Prepare
	}
	return false
}

type TwelveWarbandLeaveMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=38" json:"param,omitempty"`
}

// Default values for TwelveWarbandLeaveMatchCCmd fields.
const (
	Default_TwelveWarbandLeaveMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_TwelveWarbandLeaveMatchCCmd_Param = MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_LEAVE
)

func (x *TwelveWarbandLeaveMatchCCmd) Reset() {
	*x = TwelveWarbandLeaveMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelveWarbandLeaveMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelveWarbandLeaveMatchCCmd) ProtoMessage() {}

func (x *TwelveWarbandLeaveMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelveWarbandLeaveMatchCCmd.ProtoReflect.Descriptor instead.
func (*TwelveWarbandLeaveMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{61}
}

func (x *TwelveWarbandLeaveMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelveWarbandLeaveMatchCCmd_Cmd
}

func (x *TwelveWarbandLeaveMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelveWarbandLeaveMatchCCmd_Param
}

type TwelveWarbandDeleteMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param  *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=39" json:"param,omitempty"`
	Charid *uint64      `protobuf:"varint,3,opt,name=charid" json:"charid,omitempty"`
}

// Default values for TwelveWarbandDeleteMatchCCmd fields.
const (
	Default_TwelveWarbandDeleteMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_TwelveWarbandDeleteMatchCCmd_Param = MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_DELETE
)

func (x *TwelveWarbandDeleteMatchCCmd) Reset() {
	*x = TwelveWarbandDeleteMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelveWarbandDeleteMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelveWarbandDeleteMatchCCmd) ProtoMessage() {}

func (x *TwelveWarbandDeleteMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelveWarbandDeleteMatchCCmd.ProtoReflect.Descriptor instead.
func (*TwelveWarbandDeleteMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{62}
}

func (x *TwelveWarbandDeleteMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelveWarbandDeleteMatchCCmd_Cmd
}

func (x *TwelveWarbandDeleteMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelveWarbandDeleteMatchCCmd_Param
}

func (x *TwelveWarbandDeleteMatchCCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

type TwelveWarbandNameMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=40" json:"param,omitempty"`
	Name  *string      `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

// Default values for TwelveWarbandNameMatchCCmd fields.
const (
	Default_TwelveWarbandNameMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_TwelveWarbandNameMatchCCmd_Param = MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_NAME
)

func (x *TwelveWarbandNameMatchCCmd) Reset() {
	*x = TwelveWarbandNameMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelveWarbandNameMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelveWarbandNameMatchCCmd) ProtoMessage() {}

func (x *TwelveWarbandNameMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelveWarbandNameMatchCCmd.ProtoReflect.Descriptor instead.
func (*TwelveWarbandNameMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{63}
}

func (x *TwelveWarbandNameMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelveWarbandNameMatchCCmd_Cmd
}

func (x *TwelveWarbandNameMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelveWarbandNameMatchCCmd_Param
}

func (x *TwelveWarbandNameMatchCCmd) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type TwelveWarbandSignUpMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=41" json:"param,omitempty"`
}

// Default values for TwelveWarbandSignUpMatchCCmd fields.
const (
	Default_TwelveWarbandSignUpMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_TwelveWarbandSignUpMatchCCmd_Param = MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_SIGNUP
)

func (x *TwelveWarbandSignUpMatchCCmd) Reset() {
	*x = TwelveWarbandSignUpMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelveWarbandSignUpMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelveWarbandSignUpMatchCCmd) ProtoMessage() {}

func (x *TwelveWarbandSignUpMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelveWarbandSignUpMatchCCmd.ProtoReflect.Descriptor instead.
func (*TwelveWarbandSignUpMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{64}
}

func (x *TwelveWarbandSignUpMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelveWarbandSignUpMatchCCmd_Cmd
}

func (x *TwelveWarbandSignUpMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelveWarbandSignUpMatchCCmd_Param
}

type TwelveWarbandMatchMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param  *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=42" json:"param,omitempty"`
	Type   *EPvpType    `protobuf:"varint,3,opt,name=type,enum=Cmd.EPvpType" json:"type,omitempty"`
	Roomid *uint64      `protobuf:"varint,4,opt,name=roomid" json:"roomid,omitempty"`
}

// Default values for TwelveWarbandMatchMatchCCmd fields.
const (
	Default_TwelveWarbandMatchMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_TwelveWarbandMatchMatchCCmd_Param = MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_MATCH
)

func (x *TwelveWarbandMatchMatchCCmd) Reset() {
	*x = TwelveWarbandMatchMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelveWarbandMatchMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelveWarbandMatchMatchCCmd) ProtoMessage() {}

func (x *TwelveWarbandMatchMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelveWarbandMatchMatchCCmd.ProtoReflect.Descriptor instead.
func (*TwelveWarbandMatchMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{65}
}

func (x *TwelveWarbandMatchMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelveWarbandMatchMatchCCmd_Cmd
}

func (x *TwelveWarbandMatchMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelveWarbandMatchMatchCCmd_Param
}

func (x *TwelveWarbandMatchMatchCCmd) GetType() EPvpType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *TwelveWarbandMatchMatchCCmd) GetRoomid() uint64 {
	if x != nil && x.Roomid != nil {
		return *x.Roomid
	}
	return 0
}

type TwelveWarbandTeamListMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param    *MatchCParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=44" json:"param,omitempty"`
	Teaminfo []*WarbandTeamInfo `protobuf:"bytes,3,rep,name=teaminfo" json:"teaminfo,omitempty"`
}

// Default values for TwelveWarbandTeamListMatchCCmd fields.
const (
	Default_TwelveWarbandTeamListMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_TwelveWarbandTeamListMatchCCmd_Param = MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_TEAMLIST
)

func (x *TwelveWarbandTeamListMatchCCmd) Reset() {
	*x = TwelveWarbandTeamListMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelveWarbandTeamListMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelveWarbandTeamListMatchCCmd) ProtoMessage() {}

func (x *TwelveWarbandTeamListMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelveWarbandTeamListMatchCCmd.ProtoReflect.Descriptor instead.
func (*TwelveWarbandTeamListMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{66}
}

func (x *TwelveWarbandTeamListMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelveWarbandTeamListMatchCCmd_Cmd
}

func (x *TwelveWarbandTeamListMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelveWarbandTeamListMatchCCmd_Param
}

func (x *TwelveWarbandTeamListMatchCCmd) GetTeaminfo() []*WarbandTeamInfo {
	if x != nil {
		return x.Teaminfo
	}
	return nil
}

type TwelveWarbandCreateMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param       *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=45" json:"param,omitempty"`
	Warbandname *string      `protobuf:"bytes,3,opt,name=warbandname" json:"warbandname,omitempty"`
}

// Default values for TwelveWarbandCreateMatchCCmd fields.
const (
	Default_TwelveWarbandCreateMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_TwelveWarbandCreateMatchCCmd_Param = MatchCParam_MATCHCPARAM_TWELVEPVP_WARBAND_CREATE
)

func (x *TwelveWarbandCreateMatchCCmd) Reset() {
	*x = TwelveWarbandCreateMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwelveWarbandCreateMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwelveWarbandCreateMatchCCmd) ProtoMessage() {}

func (x *TwelveWarbandCreateMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwelveWarbandCreateMatchCCmd.ProtoReflect.Descriptor instead.
func (*TwelveWarbandCreateMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{67}
}

func (x *TwelveWarbandCreateMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TwelveWarbandCreateMatchCCmd_Cmd
}

func (x *TwelveWarbandCreateMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TwelveWarbandCreateMatchCCmd_Param
}

func (x *TwelveWarbandCreateMatchCCmd) GetWarbandname() string {
	if x != nil && x.Warbandname != nil {
		return *x.Warbandname
	}
	return ""
}

type SyncMatchInfoCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param    *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=46" json:"param,omitempty"`
	Etype    *EPvpType    `protobuf:"varint,3,opt,name=etype,enum=Cmd.EPvpType" json:"etype,omitempty"`
	Ismatch  *bool        `protobuf:"varint,4,opt,name=ismatch" json:"ismatch,omitempty"`
	Coldtime *uint32      `protobuf:"varint,5,opt,name=coldtime" json:"coldtime,omitempty"`
}

// Default values for SyncMatchInfoCCmd fields.
const (
	Default_SyncMatchInfoCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_SyncMatchInfoCCmd_Param = MatchCParam_MATCHCPARAM_SYNC_MATCH_INFO
)

func (x *SyncMatchInfoCCmd) Reset() {
	*x = SyncMatchInfoCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMatchInfoCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMatchInfoCCmd) ProtoMessage() {}

func (x *SyncMatchInfoCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMatchInfoCCmd.ProtoReflect.Descriptor instead.
func (*SyncMatchInfoCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{68}
}

func (x *SyncMatchInfoCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SyncMatchInfoCCmd_Cmd
}

func (x *SyncMatchInfoCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SyncMatchInfoCCmd_Param
}

func (x *SyncMatchInfoCCmd) GetEtype() EPvpType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *SyncMatchInfoCCmd) GetIsmatch() bool {
	if x != nil && x.Ismatch != nil {
		return *x.Ismatch
	}
	return false
}

func (x *SyncMatchInfoCCmd) GetColdtime() uint32 {
	if x != nil && x.Coldtime != nil {
		return *x.Coldtime
	}
	return 0
}

type QueryTwelveSeasonInfoMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd                 *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param               *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=47" json:"param,omitempty"`
	Etype               *EPvpType    `protobuf:"varint,3,opt,name=etype,enum=Cmd.EPvpType" json:"etype,omitempty"`
	Season              *uint32      `protobuf:"varint,4,opt,name=season" json:"season,omitempty"`
	SeasonBegin         *uint32      `protobuf:"varint,5,opt,name=season_begin,json=seasonBegin" json:"season_begin,omitempty"`
	SeasonEnd           *uint32      `protobuf:"varint,6,opt,name=season_end,json=seasonEnd" json:"season_end,omitempty"`
	SeasonBreakbegin    *uint32      `protobuf:"varint,7,opt,name=season_breakbegin,json=seasonBreakbegin" json:"season_breakbegin,omitempty"`
	SeasonBreakend      *uint32      `protobuf:"varint,8,opt,name=season_breakend,json=seasonBreakend" json:"season_breakend,omitempty"`
	WarbandCreatebegin  *uint32      `protobuf:"varint,9,opt,name=warband_createbegin,json=warbandCreatebegin" json:"warband_createbegin,omitempty"`
	WarbandCreateend    *uint32      `protobuf:"varint,10,opt,name=warband_createend,json=warbandCreateend" json:"warband_createend,omitempty"`
	WarbandSignupbegin  *uint32      `protobuf:"varint,11,opt,name=warband_signupbegin,json=warbandSignupbegin" json:"warband_signupbegin,omitempty"`
	SeasonInitfighttime *uint32      `protobuf:"varint,12,opt,name=season_initfighttime,json=seasonInitfighttime" json:"season_initfighttime,omitempty"`
	SeasonNextfighttime *uint32      `protobuf:"varint,13,opt,name=season_nextfighttime,json=seasonNextfighttime" json:"season_nextfighttime,omitempty"`
	SeasonMatchtime     *uint32      `protobuf:"varint,14,opt,name=season_matchtime,json=seasonMatchtime" json:"season_matchtime,omitempty"`
	SeasonFighttime     *uint32      `protobuf:"varint,15,opt,name=season_fighttime,json=seasonFighttime" json:"season_fighttime,omitempty"`
}

// Default values for QueryTwelveSeasonInfoMatchCCmd fields.
const (
	Default_QueryTwelveSeasonInfoMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_QueryTwelveSeasonInfoMatchCCmd_Param = MatchCParam_MATCHCPARAM_QUERY_TWELVE_SEASON_INFO
)

func (x *QueryTwelveSeasonInfoMatchCCmd) Reset() {
	*x = QueryTwelveSeasonInfoMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTwelveSeasonInfoMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTwelveSeasonInfoMatchCCmd) ProtoMessage() {}

func (x *QueryTwelveSeasonInfoMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTwelveSeasonInfoMatchCCmd.ProtoReflect.Descriptor instead.
func (*QueryTwelveSeasonInfoMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{69}
}

func (x *QueryTwelveSeasonInfoMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryTwelveSeasonInfoMatchCCmd_Cmd
}

func (x *QueryTwelveSeasonInfoMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryTwelveSeasonInfoMatchCCmd_Param
}

func (x *QueryTwelveSeasonInfoMatchCCmd) GetEtype() EPvpType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *QueryTwelveSeasonInfoMatchCCmd) GetSeason() uint32 {
	if x != nil && x.Season != nil {
		return *x.Season
	}
	return 0
}

func (x *QueryTwelveSeasonInfoMatchCCmd) GetSeasonBegin() uint32 {
	if x != nil && x.SeasonBegin != nil {
		return *x.SeasonBegin
	}
	return 0
}

func (x *QueryTwelveSeasonInfoMatchCCmd) GetSeasonEnd() uint32 {
	if x != nil && x.SeasonEnd != nil {
		return *x.SeasonEnd
	}
	return 0
}

func (x *QueryTwelveSeasonInfoMatchCCmd) GetSeasonBreakbegin() uint32 {
	if x != nil && x.SeasonBreakbegin != nil {
		return *x.SeasonBreakbegin
	}
	return 0
}

func (x *QueryTwelveSeasonInfoMatchCCmd) GetSeasonBreakend() uint32 {
	if x != nil && x.SeasonBreakend != nil {
		return *x.SeasonBreakend
	}
	return 0
}

func (x *QueryTwelveSeasonInfoMatchCCmd) GetWarbandCreatebegin() uint32 {
	if x != nil && x.WarbandCreatebegin != nil {
		return *x.WarbandCreatebegin
	}
	return 0
}

func (x *QueryTwelveSeasonInfoMatchCCmd) GetWarbandCreateend() uint32 {
	if x != nil && x.WarbandCreateend != nil {
		return *x.WarbandCreateend
	}
	return 0
}

func (x *QueryTwelveSeasonInfoMatchCCmd) GetWarbandSignupbegin() uint32 {
	if x != nil && x.WarbandSignupbegin != nil {
		return *x.WarbandSignupbegin
	}
	return 0
}

func (x *QueryTwelveSeasonInfoMatchCCmd) GetSeasonInitfighttime() uint32 {
	if x != nil && x.SeasonInitfighttime != nil {
		return *x.SeasonInitfighttime
	}
	return 0
}

func (x *QueryTwelveSeasonInfoMatchCCmd) GetSeasonNextfighttime() uint32 {
	if x != nil && x.SeasonNextfighttime != nil {
		return *x.SeasonNextfighttime
	}
	return 0
}

func (x *QueryTwelveSeasonInfoMatchCCmd) GetSeasonMatchtime() uint32 {
	if x != nil && x.SeasonMatchtime != nil {
		return *x.SeasonMatchtime
	}
	return 0
}

func (x *QueryTwelveSeasonInfoMatchCCmd) GetSeasonFighttime() uint32 {
	if x != nil && x.SeasonFighttime != nil {
		return *x.SeasonFighttime
	}
	return 0
}

type QueryTwelveSeasonFinishMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=48" json:"param,omitempty"`
}

// Default values for QueryTwelveSeasonFinishMatchCCmd fields.
const (
	Default_QueryTwelveSeasonFinishMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_QueryTwelveSeasonFinishMatchCCmd_Param = MatchCParam_MATCHCPARAM_QUERY_TWELVE_SEASON_FINISH
)

func (x *QueryTwelveSeasonFinishMatchCCmd) Reset() {
	*x = QueryTwelveSeasonFinishMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTwelveSeasonFinishMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTwelveSeasonFinishMatchCCmd) ProtoMessage() {}

func (x *QueryTwelveSeasonFinishMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTwelveSeasonFinishMatchCCmd.ProtoReflect.Descriptor instead.
func (*QueryTwelveSeasonFinishMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{70}
}

func (x *QueryTwelveSeasonFinishMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryTwelveSeasonFinishMatchCCmd_Cmd
}

func (x *QueryTwelveSeasonFinishMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryTwelveSeasonFinishMatchCCmd_Param
}

type SyncMatchBoardOpenStateMatchCCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=61" json:"cmd,omitempty"`
	Param *MatchCParam `protobuf:"varint,2,opt,name=param,enum=Cmd.MatchCParam,def=49" json:"param,omitempty"`
	Open  *bool        `protobuf:"varint,3,opt,name=open" json:"open,omitempty"`
}

// Default values for SyncMatchBoardOpenStateMatchCCmd fields.
const (
	Default_SyncMatchBoardOpenStateMatchCCmd_Cmd   = Command_MATCHC_PROTOCMD
	Default_SyncMatchBoardOpenStateMatchCCmd_Param = MatchCParam_MATCHCPARAM_SYNC_MATCHBOARD_OPEN_STATE
)

func (x *SyncMatchBoardOpenStateMatchCCmd) Reset() {
	*x = SyncMatchBoardOpenStateMatchCCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MatchCCmd_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMatchBoardOpenStateMatchCCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMatchBoardOpenStateMatchCCmd) ProtoMessage() {}

func (x *SyncMatchBoardOpenStateMatchCCmd) ProtoReflect() protoreflect.Message {
	mi := &file_MatchCCmd_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMatchBoardOpenStateMatchCCmd.ProtoReflect.Descriptor instead.
func (*SyncMatchBoardOpenStateMatchCCmd) Descriptor() ([]byte, []int) {
	return file_MatchCCmd_proto_rawDescGZIP(), []int{71}
}

func (x *SyncMatchBoardOpenStateMatchCCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SyncMatchBoardOpenStateMatchCCmd_Cmd
}

func (x *SyncMatchBoardOpenStateMatchCCmd) GetParam() MatchCParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SyncMatchBoardOpenStateMatchCCmd_Param
}

func (x *SyncMatchBoardOpenStateMatchCCmd) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return false
}

var File_MatchCCmd_proto protoreflect.FileDescriptor

var file_MatchCCmd_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x46, 0x75, 0x42,
	0x65, 0x6e, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x0d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x7a, 0x6f, 0x6e,
	0x65, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x6f,
	0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x45, 0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x0d, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x72, 0x69,
	0x65, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x69, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61,
	0x69, 0x64, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x75, 0x6d, 0x33, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x33, 0x12,
	0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x4d,
	0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x17, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45,
	0x51, 0x5f, 0x4d, 0x59, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x42, 0x72, 0x69, 0x65, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x72, 0x69,
	0x65, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf5, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x52, 0x6f,
	0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x52, 0x4f,
	0x4f, 0x4d, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x72, 0x69, 0x65, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x22, 0xfa,
	0x01, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x0a, 0x0c, 0x4a,
	0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x0c, 0x54, 0x75, 0x74, 0x6f,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x74, 0x75,
	0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x3a, 0x0b, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x45, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x3a, 0x0b, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x69,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x69,
	0x64, 0x73, 0x22, 0xbd, 0x04, 0x0a, 0x0c, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x43,
	0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x69, 0x64, 0x12, 0x4e, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x65, 0x78, 0x70, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x13, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x58,
	0x50, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x6d, 0x65, 0x78, 0x70, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x0d, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x10,
	0x4e, 0x74, 0x66, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x43, 0x6d, 0x64,
	0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1a, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4e, 0x54, 0x46, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x76, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50,
	0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x89, 0x03, 0x0a, 0x10, 0x4e, 0x74, 0x66,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x1e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46,
	0x5f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x76, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x68, 0x70, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x79, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x79,
	0x72, 0x61, 0x6e, 0x6b, 0x22, 0xd3, 0x01, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x46, 0x49,
	0x47, 0x48, 0x54, 0x49, 0x4e, 0x47, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x0f, 0x43,
	0x6f, 0x6d, 0x62, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x16, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f,
	0x4d, 0x42, 0x4f, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x4e, 0x75, 0x6d, 0x22, 0xe1, 0x02, 0x0a, 0x10,
	0x52, 0x65, 0x76, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x43, 0x6d, 0x64,
	0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x19, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x52, 0x45, 0x56, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x5a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0xe9, 0x01, 0x0a, 0x0c, 0x4b, 0x69, 0x63, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x43, 0x6d, 0x64,
	0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x15, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4b, 0x49, 0x43, 0x4b, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x7a,
	0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x7a, 0x6f, 0x6e,
	0x65, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0xa1, 0x02, 0x0a, 0x10,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x43, 0x6d, 0x64,
	0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x19, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x22,
	0x60, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3a, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xae, 0x02,
	0x0a, 0x0d, 0x50, 0x76, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x43, 0x6d, 0x64, 0x12,
	0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x16, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50,
	0x56, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x27, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x22, 0xf1,
	0x01, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e,
	0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x17, 0x50, 0x76, 0x70, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x1c, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x56,
	0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa7, 0x01, 0x0a, 0x1a, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x22, 0xc9, 0x01, 0x0a, 0x17, 0x50, 0x76, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x48, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x56, 0x50, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfd, 0x01, 0x0a,
	0x10, 0x4e, 0x74, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x43, 0x6d,
	0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x19, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x0e, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f,
	0x4c, 0x4c, 0x59, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x69, 0x73,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x07, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x07, 0x69,
	0x73, 0x66, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x07, 0x69, 0x73, 0x66, 0x69, 0x67, 0x68, 0x74, 0x22, 0x9c, 0x01, 0x0a,
	0x0e, 0x47, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x43, 0x6d, 0x64, 0x12,
	0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x17, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47,
	0x4f, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x0c, 0x52,
	0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x11, 0x4e, 0x74, 0x66, 0x52, 0x61, 0x6e,
	0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x27, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x4f,
	0x70, 0x65, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41,
	0x4c, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x22, 0xf9, 0x01, 0x0a, 0x1c, 0x54, 0x75, 0x74, 0x6f,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x74, 0x66, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x29, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x54, 0x75, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x3a, 0x0f, 0x45, 0x54, 0x55, 0x54,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x1b, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x39, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x3a,
	0x0f, 0x45, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x49, 0x4e,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2a, 0x0a, 0x0e, 0x54, 0x65, 0x61, 0x6d,
	0x50, 0x77, 0x73, 0x50, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x72, 0x69, 0x64, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x17, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73,
	0x50, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64,
	0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x20, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x50, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x35,
	0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x50,
	0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x52, 0x05,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0xfe, 0x01, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x50,
	0x41, 0x52, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x05,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x45, 0x50, 0x56, 0x50,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x06, 0x72, 0x61, 0x69, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x06, 0x72, 0x61, 0x69, 0x64, 0x69, 0x64, 0x22, 0xa9, 0x02, 0x0a, 0x0f, 0x54,
	0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x70, 0x6f, 0x72,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x27, 0x0a, 0x05, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x52, 0x61, 0x6e,
	0x6b, 0x52, 0x05, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x30, 0x0a,
	0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x52, 0x61, 0x6e,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x7e, 0x0a, 0x0f, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77,
	0x73, 0x52, 0x61, 0x6e, 0x6b, 0x3a, 0x11, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x05, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x22,
	0xba, 0x03, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d,
	0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x22, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54,
	0x45, 0x41, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x32,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x6d, 0x79, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x6d, 0x79, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0c, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x12, 0x2e, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x10,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x12, 0x2a, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0e, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x6e, 0x64, 0x22, 0xcd, 0x01, 0x0a,
	0x0f, 0x4d, 0x65, 0x6e, 0x72, 0x6f, 0x63, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xd8, 0x01, 0x0a,
	0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x6e, 0x72, 0x6f, 0x63, 0x6f, 0x52, 0x61, 0x6e,
	0x6b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x52, 0x4f, 0x43,
	0x4f, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x79, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x79, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x4d, 0x65, 0x6e, 0x72, 0x6f, 0x63, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x18, 0x4d, 0x69, 0x64, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x52,
	0x45, 0x50, 0x41, 0x52, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x06,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0x80, 0x01, 0x0a, 0x16,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x68,
	0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x68,
	0x6f, 0x77, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc7,
	0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x12,
	0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x1b, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x19, 0x54, 0x77, 0x65,
	0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x50, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f,
	0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x63, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50,
	0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0f, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x22, 0xab,
	0x02, 0x0a, 0x1f, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x76, 0x70, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43,
	0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x4c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x24, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x50,
	0x41, 0x52, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x63, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x34,
	0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0f, 0x45, 0x50,
	0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x52, 0x05, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x69, 0x64, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x69, 0x64, 0x69, 0x64, 0x22, 0x97, 0x01, 0x0a,
	0x0d, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x57, 0x61, 0x72,
	0x62, 0x61, 0x6e, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x22, 0x41, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x62, 0x57, 0x61,
	0x72, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x3f, 0x0a, 0x11, 0x42, 0x6c, 0x6f,
	0x62, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x78, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x78, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x69, 0x63, 0x6b, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x15, 0x42,
	0x6c, 0x6f, 0x62, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x36,
	0x0a, 0x0b, 0x77, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e,
	0x64, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x62, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc4, 0x02, 0x0a, 0x11, 0x57, 0x61, 0x72, 0x62, 0x61,
	0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x63,
	0x61, 0x70, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6f,
	0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x22, 0xd0, 0x01,
	0x0a, 0x0f, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e,
	0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e,
	0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x12, 0x30,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x50, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x61, 0x72, 0x62,
	0x61, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x1b, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x57, 0x61, 0x72,
	0x62, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43,
	0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x23, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42,
	0x41, 0x4e, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0a,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc6, 0x01, 0x0a, 0x1a, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x57,
	0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52,
	0x42, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x2b, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53,
	0x6f, 0x72, 0x74, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x6a, 0x0a,
	0x0c, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x22, 0x4c, 0x0a, 0x11, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x37,
	0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4f, 0x70, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x91, 0x02, 0x0a, 0x1a, 0x54, 0x77, 0x65, 0x6c,
	0x76, 0x65, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f,
	0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6d, 0x70,
	0x69, 0x6f, 0x6e, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6d, 0x70,
	0x69, 0x6f, 0x6e, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xd5, 0x02, 0x0a, 0x1a,
	0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45,
	0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x77,
	0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x1d, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x57, 0x61,
	0x72, 0x62, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x25, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57,
	0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x52, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x77, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0xcb, 0x01, 0x0a, 0x1d, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e,
	0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d,
	0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x4d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x25, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41,
	0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb9, 0x01,
	0x0a, 0x1d, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x12,
	0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x4d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x25, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54,
	0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44,
	0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x1b, 0x54, 0x77,
	0x65, 0x6c, 0x76, 0x65, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x23, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50,
	0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xb5, 0x01, 0x0a, 0x1c, 0x54, 0x77, 0x65, 0x6c,
	0x76, 0x65, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4c, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x24, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56,
	0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x22,
	0xad, 0x01, 0x0a, 0x1a, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x4a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x22, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57,
	0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x9d, 0x01, 0x0a, 0x1c, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64,
	0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x4c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x24, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e,
	0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x55, 0x50, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22,
	0xd6, 0x01, 0x0a, 0x1b, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e,
	0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x12,
	0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x4b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x23, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54,
	0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x22, 0xd3, 0x01, 0x0a, 0x1e, 0x54, 0x77, 0x65,
	0x6c, 0x76, 0x65, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4e, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x26, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56,
	0x45, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xbf,
	0x01, 0x0a, 0x1c, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x12,
	0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x4c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x3a, 0x24, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54,
	0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20,
	0x0a, 0x0b, 0x77, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xe4, 0x01, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x05,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbf, 0x05, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4c, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x24, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x2f,
	0x0a, 0x13, 0x77, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x77, 0x61, 0x72,
	0x62, 0x61, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12,
	0x2b, 0x0a, 0x11, 0x77, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x61, 0x72, 0x62,
	0x61, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x65, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x13,
	0x77, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x77, 0x61, 0x72, 0x62, 0x61,
	0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x31, 0x0a,
	0x14, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x66, 0x69, 0x67, 0x68,
	0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x66, 0x69, 0x67, 0x68, 0x74, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x14, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x66,
	0x69, 0x67, 0x68, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x66, 0x69, 0x67, 0x68, 0x74, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x46, 0x69, 0x67, 0x68, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x20, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x4e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x26, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22,
	0xb7, 0x01, 0x0a, 0x20, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x43, 0x6d, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x4e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x26, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x42, 0x4f,
	0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x2a, 0xe4, 0x0d, 0x0a, 0x0b, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4d, 0x59, 0x5f,
	0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x44, 0x45,
	0x54, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10,
	0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x05, 0x12, 0x1e, 0x0a,
	0x1a, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46,
	0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x22, 0x0a,
	0x1e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46,
	0x5f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x08, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x09,
	0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x43, 0x4f, 0x4d, 0x42, 0x4f, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x56, 0x5f,
	0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x52, 0x4d, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10,
	0x0e, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x50, 0x56, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x50, 0x56, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x44, 0x41, 0x54,
	0x41, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x10, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x47, 0x4f, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x12, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x54, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x13, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41,
	0x4c, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x50, 0x41, 0x4e, 0x45, 0x4c, 0x10, 0x14, 0x12, 0x1e,
	0x0a, 0x1a, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x55,
	0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4e, 0x54, 0x46, 0x10, 0x15, 0x12, 0x23,
	0x0a, 0x1f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x55,
	0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x16, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41,
	0x52, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x17, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53,
	0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x18, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52,
	0x41, 0x4e, 0x4b, 0x10, 0x19, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x1a, 0x12, 0x22, 0x0a,
	0x1e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d,
	0x52, 0x4f, 0x43, 0x4f, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10,
	0x1b, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x4d, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41,
	0x52, 0x45, 0x10, 0x1c, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x52,
	0x41, 0x4e, 0x4b, 0x10, 0x1d, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x50,
	0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x1e, 0x12, 0x28, 0x0a,
	0x24, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45,
	0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x1f, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50,
	0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x10, 0x20, 0x12,
	0x26, 0x0a, 0x22, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54,
	0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44,
	0x5f, 0x54, 0x52, 0x45, 0x45, 0x10, 0x21, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50,
	0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x22, 0x12,
	0x29, 0x0a, 0x25, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54,
	0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x52, 0x10, 0x23, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45,
	0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x45, 0x10, 0x24, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57,
	0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x25,
	0x12, 0x27, 0x0a, 0x23, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e,
	0x44, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x26, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50,
	0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x27, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52,
	0x42, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x28, 0x12, 0x28, 0x0a, 0x24, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56,
	0x45, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x55, 0x50, 0x10, 0x29, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57,
	0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x2a, 0x12, 0x27,
	0x0a, 0x23, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57,
	0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x2b, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50,
	0x5f, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x2c, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x50, 0x56, 0x50, 0x5f, 0x57, 0x41, 0x52,
	0x42, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x2d, 0x12, 0x1f, 0x0a,
	0x1b, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x2e, 0x12, 0x28,
	0x0a, 0x24, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x2f, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x43, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x57,
	0x45, 0x4c, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x10, 0x30, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x43, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x42, 0x4f,
	0x41, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x31,
	0x2a, 0x9b, 0x04, 0x0a, 0x08, 0x45, 0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4c, 0x48, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d,
	0x5a, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x4c, 0x4a, 0x53, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x50, 0x56, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x45,
	0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x56, 0x50, 0x10, 0x05, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x47, 0x56, 0x47, 0x10,
	0x06, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x55,
	0x54, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x5f,
	0x52, 0x45, 0x4c, 0x41, 0x58, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x50, 0x56, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x45, 0x58, 0x50, 0x10, 0x0a, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x10,
	0x0b, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x56,
	0x45, 0x43, 0x41, 0x52, 0x44, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x50, 0x56, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x4c, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x50,
	0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x4f, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x59, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x52, 0x41, 0x49, 0x44, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x57, 0x45, 0x41, 0x52,
	0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x46, 0x49, 0x47, 0x48, 0x54, 0x10, 0x11, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56,
	0x45, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x58, 0x10, 0x13, 0x12, 0x1c,
	0x0a, 0x18, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x5f,
	0x47, 0x4d, 0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x49, 0x4e, 0x48, 0x45, 0x52, 0x4a, 0x41, 0x52, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x50, 0x56, 0x50, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x17, 0x2a, 0x91,
	0x01, 0x0a, 0x0a, 0x45, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x52, 0x4f, 0x4f, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x4f, 0x4f, 0x4d,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x4f, 0x4f, 0x4d, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x46, 0x49,
	0x47, 0x48, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x4f, 0x4f, 0x4d, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x52, 0x4f, 0x4f, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x44,
	0x10, 0x05, 0x2a, 0x61, 0x0a, 0x0a, 0x45, 0x50, 0x76, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x50, 0x56, 0x50, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4d,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x50, 0x56, 0x50, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x50, 0x56, 0x50, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x50, 0x56, 0x50, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x54, 0x49, 0x45, 0x10, 0x03, 0x2a, 0x3c, 0x0a, 0x0b, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x52, 0x45,
	0x50, 0x4c, 0x59, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53,
	0x45, 0x10, 0x02, 0x2a, 0xc3, 0x01, 0x0a, 0x0b, 0x45, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x54, 0x55, 0x54,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x54, 0x55, 0x54, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x46,
	0x55, 0x53, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x54, 0x55, 0x54, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x07, 0x2a, 0x89, 0x01, 0x0a, 0x0c, 0x45, 0x54,
	0x65, 0x61, 0x6d, 0x50, 0x77, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x54,
	0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x4c,
	0x4c, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x50,
	0x57, 0x53, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x47,
	0x4f, 0x4f, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57,
	0x53, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x54, 0x45, 0x41, 0x4d, 0x50, 0x57, 0x53, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x05, 0x2a, 0x67, 0x0a, 0x0b, 0x45, 0x57, 0x61, 0x72, 0x62, 0x61, 0x6e,
	0x64, 0x4a, 0x6f, 0x62, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44,
	0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x57, 0x41,
	0x52, 0x42, 0x41, 0x4e, 0x44, 0x4a, 0x4f, 0x42, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x57, 0x41, 0x52, 0x42, 0x41, 0x4e, 0x44, 0x4a, 0x4f, 0x42,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x57, 0x41,
	0x52, 0x42, 0x41, 0x4e, 0x44, 0x4a, 0x4f, 0x42, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03,
}

var (
	file_MatchCCmd_proto_rawDescOnce sync.Once
	file_MatchCCmd_proto_rawDescData = file_MatchCCmd_proto_rawDesc
)

func file_MatchCCmd_proto_rawDescGZIP() []byte {
	file_MatchCCmd_proto_rawDescOnce.Do(func() {
		file_MatchCCmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_MatchCCmd_proto_rawDescData)
	})
	return file_MatchCCmd_proto_rawDescData
}

var file_MatchCCmd_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_MatchCCmd_proto_msgTypes = make([]protoimpl.MessageInfo, 72)
var file_MatchCCmd_proto_goTypes = []interface{}{
	(MatchCParam)(0),                         // 0: Cmd.MatchCParam
	(EPvpType)(0),                            // 1: Cmd.EPvpType
	(ERoomState)(0),                          // 2: Cmd.ERoomState
	(EPvpResult)(0),                          // 3: Cmd.EPvpResult
	(EMatchReply)(0),                         // 4: Cmd.EMatchReply
	(ETutorMatch)(0),                         // 5: Cmd.ETutorMatch
	(ETeamPwsRank)(0),                        // 6: Cmd.ETeamPwsRank
	(EWarbandJob)(0),                         // 7: Cmd.EWarbandJob
	(*MatchTeamData)(nil),                    // 8: Cmd.MatchTeamData
	(*RoomDetailInfo)(nil),                   // 9: Cmd.RoomDetailInfo
	(*RoomBriefInfo)(nil),                    // 10: Cmd.RoomBriefInfo
	(*ReqMyRoomMatchCCmd)(nil),               // 11: Cmd.ReqMyRoomMatchCCmd
	(*ReqRoomListCCmd)(nil),                  // 12: Cmd.ReqRoomListCCmd
	(*ReqRoomDetailCCmd)(nil),                // 13: Cmd.ReqRoomDetailCCmd
	(*JoinRoomUser)(nil),                     // 14: Cmd.JoinRoomUser
	(*TutorMatcher)(nil),                     // 15: Cmd.TutorMatcher
	(*JoinRoomCCmd)(nil),                     // 16: Cmd.JoinRoomCCmd
	(*LeaveRoomCCmd)(nil),                    // 17: Cmd.LeaveRoomCCmd
	(*NtfRoomStateCCmd)(nil),                 // 18: Cmd.NtfRoomStateCCmd
	(*NtfFightStatCCmd)(nil),                 // 19: Cmd.NtfFightStatCCmd
	(*JoinFightingCCmd)(nil),                 // 20: Cmd.JoinFightingCCmd
	(*ComboNotifyCCmd)(nil),                  // 21: Cmd.ComboNotifyCCmd
	(*RevChallengeCCmd)(nil),                 // 22: Cmd.RevChallengeCCmd
	(*KickTeamCCmd)(nil),                     // 23: Cmd.KickTeamCCmd
	(*FightConfirmCCmd)(nil),                 // 24: Cmd.FightConfirmCCmd
	(*RankInfo)(nil),                         // 25: Cmd.RankInfo
	(*RewardInfo)(nil),                       // 26: Cmd.RewardInfo
	(*PvpResultCCmd)(nil),                    // 27: Cmd.PvpResultCCmd
	(*MatchTeamMemUpdateInfo)(nil),           // 28: Cmd.MatchTeamMemUpdateInfo
	(*PvpTeamMemberUpdateCCmd)(nil),          // 29: Cmd.PvpTeamMemberUpdateCCmd
	(*MatchTeamMemDataUpdateInfo)(nil),       // 30: Cmd.MatchTeamMemDataUpdateInfo
	(*PvpMemberDataUpdateCCmd)(nil),          // 31: Cmd.PvpMemberDataUpdateCCmd
	(*NtfMatchInfoCCmd)(nil),                 // 32: Cmd.NtfMatchInfoCCmd
	(*GodEndTimeCCmd)(nil),                   // 33: Cmd.GodEndTimeCCmd
	(*RankNameInfo)(nil),                     // 34: Cmd.RankNameInfo
	(*NtfRankChangeCCmd)(nil),                // 35: Cmd.NtfRankChangeCCmd
	(*OpenGlobalShopPanelCCmd)(nil),          // 36: Cmd.OpenGlobalShopPanelCCmd
	(*TutorMatchResultNtfMatchCCmd)(nil),     // 37: Cmd.TutorMatchResultNtfMatchCCmd
	(*TutorMatchResponseMatchCCmd)(nil),      // 38: Cmd.TutorMatchResponseMatchCCmd
	(*TeamPwsPreInfo)(nil),                   // 39: Cmd.TeamPwsPreInfo
	(*TeamPwsPreInfoMatchCCmd)(nil),          // 40: Cmd.TeamPwsPreInfoMatchCCmd
	(*UpdatePreInfoMatchCCmd)(nil),           // 41: Cmd.UpdatePreInfoMatchCCmd
	(*TeamPwsRankInfo)(nil),                  // 42: Cmd.TeamPwsRankInfo
	(*QueryTeamPwsRankMatchCCmd)(nil),        // 43: Cmd.QueryTeamPwsRankMatchCCmd
	(*TeamPwsUserInfo)(nil),                  // 44: Cmd.TeamPwsUserInfo
	(*QueryTeamPwsTeamInfoMatchCCmd)(nil),    // 45: Cmd.QueryTeamPwsTeamInfoMatchCCmd
	(*MenrocoRankData)(nil),                  // 46: Cmd.MenrocoRankData
	(*QueryMenrocoRankMatchCCmd)(nil),        // 47: Cmd.QueryMenrocoRankMatchCCmd
	(*MidMatchPrepareMatchCCmd)(nil),         // 48: Cmd.MidMatchPrepareMatchCCmd
	(*BattlePassRankShowData)(nil),           // 49: Cmd.BattlePassRankShowData
	(*QueryBattlePassRankMatchCCmd)(nil),     // 50: Cmd.QueryBattlePassRankMatchCCmd
	(*TwelvePvpPreInfoMatchCCmd)(nil),        // 51: Cmd.TwelvePvpPreInfoMatchCCmd
	(*TwelvePvpUpdatePreInfoMatchCCmd)(nil),  // 52: Cmd.TwelvePvpUpdatePreInfoMatchCCmd
	(*WarbandMember)(nil),                    // 53: Cmd.WarbandMember
	(*BlobWarbandMember)(nil),                // 54: Cmd.BlobWarbandMember
	(*BlobWarbandChange)(nil),                // 55: Cmd.BlobWarbandChange
	(*BlobSeasonWarbandInfo)(nil),            // 56: Cmd.BlobSeasonWarbandInfo
	(*WarbandMemberInfo)(nil),                // 57: Cmd.WarbandMemberInfo
	(*WarbandTeamInfo)(nil),                  // 58: Cmd.WarbandTeamInfo
	(*SeasonSort)(nil),                       // 59: Cmd.SeasonSort
	(*TwelveWarbandQueryMatchCCmd)(nil),      // 60: Cmd.TwelveWarbandQueryMatchCCmd
	(*TwelveWarbandSortMatchCCmd)(nil),       // 61: Cmd.TwelveWarbandSortMatchCCmd
	(*OpponentTeam)(nil),                     // 62: Cmd.OpponentTeam
	(*GroupOpponentTeam)(nil),                // 63: Cmd.GroupOpponentTeam
	(*TwelveWarbandTreeMatchCCmd)(nil),       // 64: Cmd.TwelveWarbandTreeMatchCCmd
	(*TwelveWarbandInfoMatchCCmd)(nil),       // 65: Cmd.TwelveWarbandInfoMatchCCmd
	(*TwelveWarbandInviterMatchCCmd)(nil),    // 66: Cmd.TwelveWarbandInviterMatchCCmd
	(*TwelveWarbandInviteeMatchCCmd)(nil),    // 67: Cmd.TwelveWarbandInviteeMatchCCmd
	(*TwelveWarbandPrepareMatchCCmd)(nil),    // 68: Cmd.TwelveWarbandPrepareMatchCCmd
	(*TwelveWarbandLeaveMatchCCmd)(nil),      // 69: Cmd.TwelveWarbandLeaveMatchCCmd
	(*TwelveWarbandDeleteMatchCCmd)(nil),     // 70: Cmd.TwelveWarbandDeleteMatchCCmd
	(*TwelveWarbandNameMatchCCmd)(nil),       // 71: Cmd.TwelveWarbandNameMatchCCmd
	(*TwelveWarbandSignUpMatchCCmd)(nil),     // 72: Cmd.TwelveWarbandSignUpMatchCCmd
	(*TwelveWarbandMatchMatchCCmd)(nil),      // 73: Cmd.TwelveWarbandMatchMatchCCmd
	(*TwelveWarbandTeamListMatchCCmd)(nil),   // 74: Cmd.TwelveWarbandTeamListMatchCCmd
	(*TwelveWarbandCreateMatchCCmd)(nil),     // 75: Cmd.TwelveWarbandCreateMatchCCmd
	(*SyncMatchInfoCCmd)(nil),                // 76: Cmd.SyncMatchInfoCCmd
	(*QueryTwelveSeasonInfoMatchCCmd)(nil),   // 77: Cmd.QueryTwelveSeasonInfoMatchCCmd
	(*QueryTwelveSeasonFinishMatchCCmd)(nil), // 78: Cmd.QueryTwelveSeasonFinishMatchCCmd
	(*SyncMatchBoardOpenStateMatchCCmd)(nil), // 79: Cmd.SyncMatchBoardOpenStateMatchCCmd
	(*TeamMember)(nil),                       // 80: Cmd.TeamMember
	(Command)(0),                             // 81: Cmd.Command
	(EGender)(0),                             // 82: Cmd.EGender
	(*UserData)(nil),                         // 83: Cmd.UserData
	(ERewardTeamExpType)(0),                  // 84: Cmd.ERewardTeamExpType
	(*MemberData)(nil),                       // 85: Cmd.MemberData
	(*UserPortraitData)(nil),                 // 86: Cmd.UserPortraitData
	(EProfession)(0),                         // 87: Cmd.EProfession
	(*UserModelShowData)(nil),                // 88: Cmd.UserModelShowData
	(EGroupCamp)(0),                          // 89: Cmd.EGroupCamp
}
var file_MatchCCmd_proto_depIdxs = []int32{
	80,  // 0: Cmd.MatchTeamData.members:type_name -> Cmd.TeamMember
	1,   // 1: Cmd.RoomDetailInfo.type:type_name -> Cmd.EPvpType
	2,   // 2: Cmd.RoomDetailInfo.state:type_name -> Cmd.ERoomState
	8,   // 3: Cmd.RoomDetailInfo.team_datas:type_name -> Cmd.MatchTeamData
	1,   // 4: Cmd.RoomBriefInfo.type:type_name -> Cmd.EPvpType
	2,   // 5: Cmd.RoomBriefInfo.state:type_name -> Cmd.ERoomState
	81,  // 6: Cmd.ReqMyRoomMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 7: Cmd.ReqMyRoomMatchCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 8: Cmd.ReqMyRoomMatchCCmd.type:type_name -> Cmd.EPvpType
	10,  // 9: Cmd.ReqMyRoomMatchCCmd.brief_info:type_name -> Cmd.RoomBriefInfo
	81,  // 10: Cmd.ReqRoomListCCmd.cmd:type_name -> Cmd.Command
	0,   // 11: Cmd.ReqRoomListCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 12: Cmd.ReqRoomListCCmd.type:type_name -> Cmd.EPvpType
	10,  // 13: Cmd.ReqRoomListCCmd.room_lists:type_name -> Cmd.RoomBriefInfo
	81,  // 14: Cmd.ReqRoomDetailCCmd.cmd:type_name -> Cmd.Command
	0,   // 15: Cmd.ReqRoomDetailCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 16: Cmd.ReqRoomDetailCCmd.type:type_name -> Cmd.EPvpType
	9,   // 17: Cmd.ReqRoomDetailCCmd.datail_info:type_name -> Cmd.RoomDetailInfo
	82,  // 18: Cmd.TutorMatcher.gender:type_name -> Cmd.EGender
	82,  // 19: Cmd.TutorMatcher.selfgender:type_name -> Cmd.EGender
	83,  // 20: Cmd.TutorMatcher.datas:type_name -> Cmd.UserData
	81,  // 21: Cmd.JoinRoomCCmd.cmd:type_name -> Cmd.Command
	0,   // 22: Cmd.JoinRoomCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 23: Cmd.JoinRoomCCmd.type:type_name -> Cmd.EPvpType
	14,  // 24: Cmd.JoinRoomCCmd.users:type_name -> Cmd.JoinRoomUser
	15,  // 25: Cmd.JoinRoomCCmd.matcher:type_name -> Cmd.TutorMatcher
	84,  // 26: Cmd.JoinRoomCCmd.teamexptype:type_name -> Cmd.ERewardTeamExpType
	81,  // 27: Cmd.LeaveRoomCCmd.cmd:type_name -> Cmd.Command
	0,   // 28: Cmd.LeaveRoomCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 29: Cmd.LeaveRoomCCmd.type:type_name -> Cmd.EPvpType
	81,  // 30: Cmd.NtfRoomStateCCmd.cmd:type_name -> Cmd.Command
	0,   // 31: Cmd.NtfRoomStateCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 32: Cmd.NtfRoomStateCCmd.pvp_type:type_name -> Cmd.EPvpType
	2,   // 33: Cmd.NtfRoomStateCCmd.state:type_name -> Cmd.ERoomState
	81,  // 34: Cmd.NtfFightStatCCmd.cmd:type_name -> Cmd.Command
	0,   // 35: Cmd.NtfFightStatCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 36: Cmd.NtfFightStatCCmd.pvp_type:type_name -> Cmd.EPvpType
	81,  // 37: Cmd.JoinFightingCCmd.cmd:type_name -> Cmd.Command
	0,   // 38: Cmd.JoinFightingCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 39: Cmd.JoinFightingCCmd.type:type_name -> Cmd.EPvpType
	81,  // 40: Cmd.ComboNotifyCCmd.cmd:type_name -> Cmd.Command
	0,   // 41: Cmd.ComboNotifyCCmd.param:type_name -> Cmd.MatchCParam
	81,  // 42: Cmd.RevChallengeCCmd.cmd:type_name -> Cmd.Command
	0,   // 43: Cmd.RevChallengeCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 44: Cmd.RevChallengeCCmd.type:type_name -> Cmd.EPvpType
	80,  // 45: Cmd.RevChallengeCCmd.members:type_name -> Cmd.TeamMember
	4,   // 46: Cmd.RevChallengeCCmd.reply:type_name -> Cmd.EMatchReply
	81,  // 47: Cmd.KickTeamCCmd.cmd:type_name -> Cmd.Command
	0,   // 48: Cmd.KickTeamCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 49: Cmd.KickTeamCCmd.type:type_name -> Cmd.EPvpType
	81,  // 50: Cmd.FightConfirmCCmd.cmd:type_name -> Cmd.Command
	0,   // 51: Cmd.FightConfirmCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 52: Cmd.FightConfirmCCmd.type:type_name -> Cmd.EPvpType
	4,   // 53: Cmd.FightConfirmCCmd.reply:type_name -> Cmd.EMatchReply
	81,  // 54: Cmd.PvpResultCCmd.cmd:type_name -> Cmd.Command
	0,   // 55: Cmd.PvpResultCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 56: Cmd.PvpResultCCmd.type:type_name -> Cmd.EPvpType
	3,   // 57: Cmd.PvpResultCCmd.result:type_name -> Cmd.EPvpResult
	25,  // 58: Cmd.PvpResultCCmd.rank:type_name -> Cmd.RankInfo
	26,  // 59: Cmd.PvpResultCCmd.reward:type_name -> Cmd.RewardInfo
	80,  // 60: Cmd.MatchTeamMemUpdateInfo.updates:type_name -> Cmd.TeamMember
	81,  // 61: Cmd.PvpTeamMemberUpdateCCmd.cmd:type_name -> Cmd.Command
	0,   // 62: Cmd.PvpTeamMemberUpdateCCmd.param:type_name -> Cmd.MatchCParam
	28,  // 63: Cmd.PvpTeamMemberUpdateCCmd.data:type_name -> Cmd.MatchTeamMemUpdateInfo
	85,  // 64: Cmd.MatchTeamMemDataUpdateInfo.members:type_name -> Cmd.MemberData
	81,  // 65: Cmd.PvpMemberDataUpdateCCmd.cmd:type_name -> Cmd.Command
	0,   // 66: Cmd.PvpMemberDataUpdateCCmd.param:type_name -> Cmd.MatchCParam
	30,  // 67: Cmd.PvpMemberDataUpdateCCmd.data:type_name -> Cmd.MatchTeamMemDataUpdateInfo
	81,  // 68: Cmd.NtfMatchInfoCCmd.cmd:type_name -> Cmd.Command
	0,   // 69: Cmd.NtfMatchInfoCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 70: Cmd.NtfMatchInfoCCmd.etype:type_name -> Cmd.EPvpType
	81,  // 71: Cmd.GodEndTimeCCmd.cmd:type_name -> Cmd.Command
	0,   // 72: Cmd.GodEndTimeCCmd.param:type_name -> Cmd.MatchCParam
	81,  // 73: Cmd.NtfRankChangeCCmd.cmd:type_name -> Cmd.Command
	0,   // 74: Cmd.NtfRankChangeCCmd.param:type_name -> Cmd.MatchCParam
	34,  // 75: Cmd.NtfRankChangeCCmd.ranks:type_name -> Cmd.RankNameInfo
	81,  // 76: Cmd.OpenGlobalShopPanelCCmd.cmd:type_name -> Cmd.Command
	0,   // 77: Cmd.OpenGlobalShopPanelCCmd.param:type_name -> Cmd.MatchCParam
	81,  // 78: Cmd.TutorMatchResultNtfMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 79: Cmd.TutorMatchResultNtfMatchCCmd.param:type_name -> Cmd.MatchCParam
	15,  // 80: Cmd.TutorMatchResultNtfMatchCCmd.target:type_name -> Cmd.TutorMatcher
	5,   // 81: Cmd.TutorMatchResultNtfMatchCCmd.status:type_name -> Cmd.ETutorMatch
	81,  // 82: Cmd.TutorMatchResponseMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 83: Cmd.TutorMatchResponseMatchCCmd.param:type_name -> Cmd.MatchCParam
	5,   // 84: Cmd.TutorMatchResponseMatchCCmd.status:type_name -> Cmd.ETutorMatch
	81,  // 85: Cmd.TeamPwsPreInfoMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 86: Cmd.TeamPwsPreInfoMatchCCmd.param:type_name -> Cmd.MatchCParam
	39,  // 87: Cmd.TeamPwsPreInfoMatchCCmd.teaminfos:type_name -> Cmd.TeamPwsPreInfo
	1,   // 88: Cmd.TeamPwsPreInfoMatchCCmd.etype:type_name -> Cmd.EPvpType
	81,  // 89: Cmd.UpdatePreInfoMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 90: Cmd.UpdatePreInfoMatchCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 91: Cmd.UpdatePreInfoMatchCCmd.etype:type_name -> Cmd.EPvpType
	86,  // 92: Cmd.TeamPwsRankInfo.portrait:type_name -> Cmd.UserPortraitData
	6,   // 93: Cmd.TeamPwsRankInfo.erank:type_name -> Cmd.ETeamPwsRank
	87,  // 94: Cmd.TeamPwsRankInfo.profession:type_name -> Cmd.EProfession
	81,  // 95: Cmd.QueryTeamPwsRankMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 96: Cmd.QueryTeamPwsRankMatchCCmd.param:type_name -> Cmd.MatchCParam
	42,  // 97: Cmd.QueryTeamPwsRankMatchCCmd.rankinfo:type_name -> Cmd.TeamPwsRankInfo
	6,   // 98: Cmd.TeamPwsUserInfo.erank:type_name -> Cmd.ETeamPwsRank
	81,  // 99: Cmd.QueryTeamPwsTeamInfoMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 100: Cmd.QueryTeamPwsTeamInfoMatchCCmd.param:type_name -> Cmd.MatchCParam
	44,  // 101: Cmd.QueryTeamPwsTeamInfoMatchCCmd.userinfos:type_name -> Cmd.TeamPwsUserInfo
	87,  // 102: Cmd.MenrocoRankData.profession:type_name -> Cmd.EProfession
	81,  // 103: Cmd.QueryMenrocoRankMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 104: Cmd.QueryMenrocoRankMatchCCmd.param:type_name -> Cmd.MatchCParam
	46,  // 105: Cmd.QueryMenrocoRankMatchCCmd.datas:type_name -> Cmd.MenrocoRankData
	81,  // 106: Cmd.MidMatchPrepareMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 107: Cmd.MidMatchPrepareMatchCCmd.param:type_name -> Cmd.MatchCParam
	88,  // 108: Cmd.BattlePassRankShowData.showdata:type_name -> Cmd.UserModelShowData
	81,  // 109: Cmd.QueryBattlePassRankMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 110: Cmd.QueryBattlePassRankMatchCCmd.param:type_name -> Cmd.MatchCParam
	49,  // 111: Cmd.QueryBattlePassRankMatchCCmd.datas:type_name -> Cmd.BattlePassRankShowData
	81,  // 112: Cmd.TwelvePvpPreInfoMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 113: Cmd.TwelvePvpPreInfoMatchCCmd.param:type_name -> Cmd.MatchCParam
	89,  // 114: Cmd.TwelvePvpPreInfoMatchCCmd.camp:type_name -> Cmd.EGroupCamp
	1,   // 115: Cmd.TwelvePvpPreInfoMatchCCmd.etype:type_name -> Cmd.EPvpType
	81,  // 116: Cmd.TwelvePvpUpdatePreInfoMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 117: Cmd.TwelvePvpUpdatePreInfoMatchCCmd.param:type_name -> Cmd.MatchCParam
	89,  // 118: Cmd.TwelvePvpUpdatePreInfoMatchCCmd.camp:type_name -> Cmd.EGroupCamp
	1,   // 119: Cmd.TwelvePvpUpdatePreInfoMatchCCmd.etype:type_name -> Cmd.EPvpType
	7,   // 120: Cmd.WarbandMember.job:type_name -> Cmd.EWarbandJob
	53,  // 121: Cmd.BlobWarbandMember.members:type_name -> Cmd.WarbandMember
	57,  // 122: Cmd.BlobSeasonWarbandInfo.memberinfos:type_name -> Cmd.WarbandMemberInfo
	58,  // 123: Cmd.BlobSeasonWarbandInfo.warbandinfo:type_name -> Cmd.WarbandTeamInfo
	87,  // 124: Cmd.WarbandMemberInfo.profession:type_name -> Cmd.EProfession
	86,  // 125: Cmd.WarbandMemberInfo.portrait:type_name -> Cmd.UserPortraitData
	86,  // 126: Cmd.WarbandTeamInfo.portrait:type_name -> Cmd.UserPortraitData
	87,  // 127: Cmd.WarbandTeamInfo.profession:type_name -> Cmd.EProfession
	58,  // 128: Cmd.SeasonSort.teams:type_name -> Cmd.WarbandTeamInfo
	81,  // 129: Cmd.TwelveWarbandQueryMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 130: Cmd.TwelveWarbandQueryMatchCCmd.param:type_name -> Cmd.MatchCParam
	57,  // 131: Cmd.TwelveWarbandQueryMatchCCmd.memberinfo:type_name -> Cmd.WarbandMemberInfo
	81,  // 132: Cmd.TwelveWarbandSortMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 133: Cmd.TwelveWarbandSortMatchCCmd.param:type_name -> Cmd.MatchCParam
	59,  // 134: Cmd.TwelveWarbandSortMatchCCmd.sortinfo:type_name -> Cmd.SeasonSort
	58,  // 135: Cmd.OpponentTeam.team:type_name -> Cmd.WarbandTeamInfo
	62,  // 136: Cmd.GroupOpponentTeam.groupteaminfo:type_name -> Cmd.OpponentTeam
	81,  // 137: Cmd.TwelveWarbandTreeMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 138: Cmd.TwelveWarbandTreeMatchCCmd.param:type_name -> Cmd.MatchCParam
	63,  // 139: Cmd.TwelveWarbandTreeMatchCCmd.teaminfo:type_name -> Cmd.GroupOpponentTeam
	63,  // 140: Cmd.TwelveWarbandTreeMatchCCmd.championteaminfo:type_name -> Cmd.GroupOpponentTeam
	81,  // 141: Cmd.TwelveWarbandInfoMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 142: Cmd.TwelveWarbandInfoMatchCCmd.param:type_name -> Cmd.MatchCParam
	57,  // 143: Cmd.TwelveWarbandInfoMatchCCmd.memberinfo:type_name -> Cmd.WarbandMemberInfo
	81,  // 144: Cmd.TwelveWarbandInviterMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 145: Cmd.TwelveWarbandInviterMatchCCmd.param:type_name -> Cmd.MatchCParam
	81,  // 146: Cmd.TwelveWarbandInviteeMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 147: Cmd.TwelveWarbandInviteeMatchCCmd.param:type_name -> Cmd.MatchCParam
	81,  // 148: Cmd.TwelveWarbandPrepareMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 149: Cmd.TwelveWarbandPrepareMatchCCmd.param:type_name -> Cmd.MatchCParam
	81,  // 150: Cmd.TwelveWarbandLeaveMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 151: Cmd.TwelveWarbandLeaveMatchCCmd.param:type_name -> Cmd.MatchCParam
	81,  // 152: Cmd.TwelveWarbandDeleteMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 153: Cmd.TwelveWarbandDeleteMatchCCmd.param:type_name -> Cmd.MatchCParam
	81,  // 154: Cmd.TwelveWarbandNameMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 155: Cmd.TwelveWarbandNameMatchCCmd.param:type_name -> Cmd.MatchCParam
	81,  // 156: Cmd.TwelveWarbandSignUpMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 157: Cmd.TwelveWarbandSignUpMatchCCmd.param:type_name -> Cmd.MatchCParam
	81,  // 158: Cmd.TwelveWarbandMatchMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 159: Cmd.TwelveWarbandMatchMatchCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 160: Cmd.TwelveWarbandMatchMatchCCmd.type:type_name -> Cmd.EPvpType
	81,  // 161: Cmd.TwelveWarbandTeamListMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 162: Cmd.TwelveWarbandTeamListMatchCCmd.param:type_name -> Cmd.MatchCParam
	58,  // 163: Cmd.TwelveWarbandTeamListMatchCCmd.teaminfo:type_name -> Cmd.WarbandTeamInfo
	81,  // 164: Cmd.TwelveWarbandCreateMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 165: Cmd.TwelveWarbandCreateMatchCCmd.param:type_name -> Cmd.MatchCParam
	81,  // 166: Cmd.SyncMatchInfoCCmd.cmd:type_name -> Cmd.Command
	0,   // 167: Cmd.SyncMatchInfoCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 168: Cmd.SyncMatchInfoCCmd.etype:type_name -> Cmd.EPvpType
	81,  // 169: Cmd.QueryTwelveSeasonInfoMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 170: Cmd.QueryTwelveSeasonInfoMatchCCmd.param:type_name -> Cmd.MatchCParam
	1,   // 171: Cmd.QueryTwelveSeasonInfoMatchCCmd.etype:type_name -> Cmd.EPvpType
	81,  // 172: Cmd.QueryTwelveSeasonFinishMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 173: Cmd.QueryTwelveSeasonFinishMatchCCmd.param:type_name -> Cmd.MatchCParam
	81,  // 174: Cmd.SyncMatchBoardOpenStateMatchCCmd.cmd:type_name -> Cmd.Command
	0,   // 175: Cmd.SyncMatchBoardOpenStateMatchCCmd.param:type_name -> Cmd.MatchCParam
	176, // [176:176] is the sub-list for method output_type
	176, // [176:176] is the sub-list for method input_type
	176, // [176:176] is the sub-list for extension type_name
	176, // [176:176] is the sub-list for extension extendee
	0,   // [0:176] is the sub-list for field type_name
}

func init() { file_MatchCCmd_proto_init() }
func file_MatchCCmd_proto_init() {
	if File_MatchCCmd_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_SessionTeam_proto_init()
	file_ProtoCommon_proto_init()
	file_SceneUser_proto_init()
	file_SceneUser2_proto_init()
	file_FuBenCmd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_MatchCCmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchTeamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomDetailInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomBriefInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqMyRoomMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqRoomListCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqRoomDetailCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRoomUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRoomCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveRoomCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfRoomStateCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfFightStatCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinFightingCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComboNotifyCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevChallengeCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickTeamCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FightConfirmCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpResultCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchTeamMemUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpTeamMemberUpdateCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchTeamMemDataUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PvpMemberDataUpdateCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfMatchInfoCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GodEndTimeCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankNameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NtfRankChangeCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenGlobalShopPanelCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorMatchResultNtfMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorMatchResponseMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamPwsPreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamPwsPreInfoMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePreInfoMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamPwsRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTeamPwsRankMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamPwsUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTeamPwsTeamInfoMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MenrocoRankData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMenrocoRankMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MidMatchPrepareMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattlePassRankShowData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBattlePassRankMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelvePvpPreInfoMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelvePvpUpdatePreInfoMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarbandMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobWarbandMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobWarbandChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobSeasonWarbandInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarbandMemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarbandTeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonSort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelveWarbandQueryMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelveWarbandSortMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpponentTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupOpponentTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelveWarbandTreeMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelveWarbandInfoMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelveWarbandInviterMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelveWarbandInviteeMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelveWarbandPrepareMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelveWarbandLeaveMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelveWarbandDeleteMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelveWarbandNameMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelveWarbandSignUpMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelveWarbandMatchMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelveWarbandTeamListMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwelveWarbandCreateMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncMatchInfoCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTwelveSeasonInfoMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTwelveSeasonFinishMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MatchCCmd_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncMatchBoardOpenStateMatchCCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MatchCCmd_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   72,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_MatchCCmd_proto_goTypes,
		DependencyIndexes: file_MatchCCmd_proto_depIdxs,
		EnumInfos:         file_MatchCCmd_proto_enumTypes,
		MessageInfos:      file_MatchCCmd_proto_msgTypes,
	}.Build()
	File_MatchCCmd_proto = out.File
	file_MatchCCmd_proto_rawDesc = nil
	file_MatchCCmd_proto_goTypes = nil
	file_MatchCCmd_proto_depIdxs = nil
}
