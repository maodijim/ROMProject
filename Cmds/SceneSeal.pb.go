// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: SceneSeal.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SealParam int32

const (
	SealParam_SEALPARAM_QUERYSEAL  SealParam = 1
	SealParam_SEALPARAM_UPDATESEAL SealParam = 2
	SealParam_SEALPARAM_SEALTIMER  SealParam = 3
	SealParam_SEALPARAM_BEGINSEAL  SealParam = 4
	SealParam_SEALPARAM_ENDSEAL    SealParam = 5
	SealParam_SEALPARAM_USERLEAVE  SealParam = 6
	SealParam_SEALPARAM_QUERYLIST  SealParam = 7
	SealParam_SEALPARAM_ACCEPTSEAL SealParam = 8
)

// Enum value maps for SealParam.
var (
	SealParam_name = map[int32]string{
		1: "SEALPARAM_QUERYSEAL",
		2: "SEALPARAM_UPDATESEAL",
		3: "SEALPARAM_SEALTIMER",
		4: "SEALPARAM_BEGINSEAL",
		5: "SEALPARAM_ENDSEAL",
		6: "SEALPARAM_USERLEAVE",
		7: "SEALPARAM_QUERYLIST",
		8: "SEALPARAM_ACCEPTSEAL",
	}
	SealParam_value = map[string]int32{
		"SEALPARAM_QUERYSEAL":  1,
		"SEALPARAM_UPDATESEAL": 2,
		"SEALPARAM_SEALTIMER":  3,
		"SEALPARAM_BEGINSEAL":  4,
		"SEALPARAM_ENDSEAL":    5,
		"SEALPARAM_USERLEAVE":  6,
		"SEALPARAM_QUERYLIST":  7,
		"SEALPARAM_ACCEPTSEAL": 8,
	}
)

func (x SealParam) Enum() *SealParam {
	p := new(SealParam)
	*p = x
	return p
}

func (x SealParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SealParam) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneSeal_proto_enumTypes[0].Descriptor()
}

func (SealParam) Type() protoreflect.EnumType {
	return &file_SceneSeal_proto_enumTypes[0]
}

func (x SealParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SealParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SealParam(num)
	return nil
}

// Deprecated: Use SealParam.Descriptor instead.
func (SealParam) EnumDescriptor() ([]byte, []int) {
	return file_SceneSeal_proto_rawDescGZIP(), []int{0}
}

type ESealType int32

const (
	ESealType_ESEALTYPE_MIN      ESealType = 0
	ESealType_ESEALTYPE_NORMAL   ESealType = 1
	ESealType_ESEALTYPE_PERSONAL ESealType = 2
	ESealType_ESEALTYPE_ACTIVITY ESealType = 3
	ESealType_ESEALTYPE_FADEJOB  ESealType = 4
	ESealType_ESEALTYPE_MAX      ESealType = 5
)

// Enum value maps for ESealType.
var (
	ESealType_name = map[int32]string{
		0: "ESEALTYPE_MIN",
		1: "ESEALTYPE_NORMAL",
		2: "ESEALTYPE_PERSONAL",
		3: "ESEALTYPE_ACTIVITY",
		4: "ESEALTYPE_FADEJOB",
		5: "ESEALTYPE_MAX",
	}
	ESealType_value = map[string]int32{
		"ESEALTYPE_MIN":      0,
		"ESEALTYPE_NORMAL":   1,
		"ESEALTYPE_PERSONAL": 2,
		"ESEALTYPE_ACTIVITY": 3,
		"ESEALTYPE_FADEJOB":  4,
		"ESEALTYPE_MAX":      5,
	}
)

func (x ESealType) Enum() *ESealType {
	p := new(ESealType)
	*p = x
	return p
}

func (x ESealType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESealType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneSeal_proto_enumTypes[1].Descriptor()
}

func (ESealType) Type() protoreflect.EnumType {
	return &file_SceneSeal_proto_enumTypes[1]
}

func (x ESealType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESealType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESealType(num)
	return nil
}

// Deprecated: Use ESealType.Descriptor instead.
func (ESealType) EnumDescriptor() ([]byte, []int) {
	return file_SceneSeal_proto_rawDescGZIP(), []int{1}
}

type EFinishType int32

const (
	EFinishType_EFINISHTYPE_MIN             EFinishType = 0
	EFinishType_EFINISHTYPE_NORMAL          EFinishType = 1
	EFinishType_EFINISHTYPE_QUICK           EFinishType = 2
	EFinishType_EFINISHTYPE_QUICK_NOPROCESS EFinishType = 3
	EFinishType_EFINISHTYPE_MAX             EFinishType = 4
)

// Enum value maps for EFinishType.
var (
	EFinishType_name = map[int32]string{
		0: "EFINISHTYPE_MIN",
		1: "EFINISHTYPE_NORMAL",
		2: "EFINISHTYPE_QUICK",
		3: "EFINISHTYPE_QUICK_NOPROCESS",
		4: "EFINISHTYPE_MAX",
	}
	EFinishType_value = map[string]int32{
		"EFINISHTYPE_MIN":             0,
		"EFINISHTYPE_NORMAL":          1,
		"EFINISHTYPE_QUICK":           2,
		"EFINISHTYPE_QUICK_NOPROCESS": 3,
		"EFINISHTYPE_MAX":             4,
	}
)

func (x EFinishType) Enum() *EFinishType {
	p := new(EFinishType)
	*p = x
	return p
}

func (x EFinishType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFinishType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneSeal_proto_enumTypes[2].Descriptor()
}

func (EFinishType) Type() protoreflect.EnumType {
	return &file_SceneSeal_proto_enumTypes[2]
}

func (x EFinishType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFinishType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFinishType(num)
	return nil
}

// Deprecated: Use EFinishType.Descriptor instead.
func (EFinishType) EnumDescriptor() ([]byte, []int) {
	return file_SceneSeal_proto_rawDescGZIP(), []int{2}
}

type SealItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      *uint32    `protobuf:"varint,1,opt,name=config,def=0" json:"config,omitempty"`
	Refreshtime *uint32    `protobuf:"varint,2,opt,name=refreshtime,def=0" json:"refreshtime,omitempty"`
	Ownseal     *bool      `protobuf:"varint,3,opt,name=ownseal,def=0" json:"ownseal,omitempty"`
	Pos         *ScenePos  `protobuf:"bytes,4,opt,name=pos" json:"pos,omitempty"`
	Sealid      *uint64    `protobuf:"varint,5,opt,name=sealid,def=0" json:"sealid,omitempty"`
	Issealing   *bool      `protobuf:"varint,6,opt,name=issealing,def=0" json:"issealing,omitempty"`
	Etype       *ESealType `protobuf:"varint,7,opt,name=etype,enum=Cmd.ESealType,def=1" json:"etype,omitempty"`
	Questid     *uint32    `protobuf:"varint,8,opt,name=questid,def=0" json:"questid,omitempty"`
}

// Default values for SealItem fields.
const (
	Default_SealItem_Config      = uint32(0)
	Default_SealItem_Refreshtime = uint32(0)
	Default_SealItem_Ownseal     = bool(false)
	Default_SealItem_Sealid      = uint64(0)
	Default_SealItem_Issealing   = bool(false)
	Default_SealItem_Etype       = ESealType_ESEALTYPE_NORMAL
	Default_SealItem_Questid     = uint32(0)
)

func (x *SealItem) Reset() {
	*x = SealItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSeal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealItem) ProtoMessage() {}

func (x *SealItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSeal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealItem.ProtoReflect.Descriptor instead.
func (*SealItem) Descriptor() ([]byte, []int) {
	return file_SceneSeal_proto_rawDescGZIP(), []int{0}
}

func (x *SealItem) GetConfig() uint32 {
	if x != nil && x.Config != nil {
		return *x.Config
	}
	return Default_SealItem_Config
}

func (x *SealItem) GetRefreshtime() uint32 {
	if x != nil && x.Refreshtime != nil {
		return *x.Refreshtime
	}
	return Default_SealItem_Refreshtime
}

func (x *SealItem) GetOwnseal() bool {
	if x != nil && x.Ownseal != nil {
		return *x.Ownseal
	}
	return Default_SealItem_Ownseal
}

func (x *SealItem) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SealItem) GetSealid() uint64 {
	if x != nil && x.Sealid != nil {
		return *x.Sealid
	}
	return Default_SealItem_Sealid
}

func (x *SealItem) GetIssealing() bool {
	if x != nil && x.Issealing != nil {
		return *x.Issealing
	}
	return Default_SealItem_Issealing
}

func (x *SealItem) GetEtype() ESealType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_SealItem_Etype
}

func (x *SealItem) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return Default_SealItem_Questid
}

type SealData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapid *uint32     `protobuf:"varint,1,opt,name=mapid,def=0" json:"mapid,omitempty"`
	Items []*SealItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

// Default values for SealData fields.
const (
	Default_SealData_Mapid = uint32(0)
)

func (x *SealData) Reset() {
	*x = SealData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSeal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealData) ProtoMessage() {}

func (x *SealData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSeal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealData.ProtoReflect.Descriptor instead.
func (*SealData) Descriptor() ([]byte, []int) {
	return file_SceneSeal_proto_rawDescGZIP(), []int{1}
}

func (x *SealData) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_SealData_Mapid
}

func (x *SealData) GetItems() []*SealItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type QuerySeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=21" json:"cmd,omitempty"`
	Param *SealParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.SealParam,def=1" json:"param,omitempty"`
	Datas []*SealData `protobuf:"bytes,3,rep,name=datas" json:"datas,omitempty"`
}

// Default values for QuerySeal fields.
const (
	Default_QuerySeal_Cmd   = Command_SCENE_USER_SEAL_PROTOCMD
	Default_QuerySeal_Param = SealParam_SEALPARAM_QUERYSEAL
)

func (x *QuerySeal) Reset() {
	*x = QuerySeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSeal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySeal) ProtoMessage() {}

func (x *QuerySeal) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSeal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySeal.ProtoReflect.Descriptor instead.
func (*QuerySeal) Descriptor() ([]byte, []int) {
	return file_SceneSeal_proto_rawDescGZIP(), []int{2}
}

func (x *QuerySeal) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuerySeal_Cmd
}

func (x *QuerySeal) GetParam() SealParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuerySeal_Param
}

func (x *QuerySeal) GetDatas() []*SealData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type UpdateSeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=21" json:"cmd,omitempty"`
	Param   *SealParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.SealParam,def=2" json:"param,omitempty"`
	Newdata []*SealData `protobuf:"bytes,3,rep,name=newdata" json:"newdata,omitempty"`
	Deldata []*SealData `protobuf:"bytes,4,rep,name=deldata" json:"deldata,omitempty"`
}

// Default values for UpdateSeal fields.
const (
	Default_UpdateSeal_Cmd   = Command_SCENE_USER_SEAL_PROTOCMD
	Default_UpdateSeal_Param = SealParam_SEALPARAM_UPDATESEAL
)

func (x *UpdateSeal) Reset() {
	*x = UpdateSeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSeal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeal) ProtoMessage() {}

func (x *UpdateSeal) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSeal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeal.ProtoReflect.Descriptor instead.
func (*UpdateSeal) Descriptor() ([]byte, []int) {
	return file_SceneSeal_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateSeal) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateSeal_Cmd
}

func (x *UpdateSeal) GetParam() SealParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateSeal_Param
}

func (x *UpdateSeal) GetNewdata() []*SealData {
	if x != nil {
		return x.Newdata
	}
	return nil
}

func (x *UpdateSeal) GetDeldata() []*SealData {
	if x != nil {
		return x.Deldata
	}
	return nil
}

type SealTimer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=21" json:"cmd,omitempty"`
	Param    *SealParam `protobuf:"varint,2,opt,name=param,enum=Cmd.SealParam,def=3" json:"param,omitempty"`
	Speed    *int32     `protobuf:"varint,3,opt,name=speed,def=0" json:"speed,omitempty"`
	Curvalue *uint32    `protobuf:"varint,4,opt,name=curvalue,def=0" json:"curvalue,omitempty"`
	Maxvalue *uint32    `protobuf:"varint,5,opt,name=maxvalue,def=0" json:"maxvalue,omitempty"`
	Stoptime *uint32    `protobuf:"varint,6,opt,name=stoptime,def=0" json:"stoptime,omitempty"`
	Maxtime  *uint32    `protobuf:"varint,7,opt,name=maxtime,def=0" json:"maxtime,omitempty"`
}

// Default values for SealTimer fields.
const (
	Default_SealTimer_Cmd      = Command_SCENE_USER_SEAL_PROTOCMD
	Default_SealTimer_Param    = SealParam_SEALPARAM_SEALTIMER
	Default_SealTimer_Speed    = int32(0)
	Default_SealTimer_Curvalue = uint32(0)
	Default_SealTimer_Maxvalue = uint32(0)
	Default_SealTimer_Stoptime = uint32(0)
	Default_SealTimer_Maxtime  = uint32(0)
)

func (x *SealTimer) Reset() {
	*x = SealTimer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSeal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealTimer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealTimer) ProtoMessage() {}

func (x *SealTimer) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSeal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealTimer.ProtoReflect.Descriptor instead.
func (*SealTimer) Descriptor() ([]byte, []int) {
	return file_SceneSeal_proto_rawDescGZIP(), []int{4}
}

func (x *SealTimer) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SealTimer_Cmd
}

func (x *SealTimer) GetParam() SealParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SealTimer_Param
}

func (x *SealTimer) GetSpeed() int32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return Default_SealTimer_Speed
}

func (x *SealTimer) GetCurvalue() uint32 {
	if x != nil && x.Curvalue != nil {
		return *x.Curvalue
	}
	return Default_SealTimer_Curvalue
}

func (x *SealTimer) GetMaxvalue() uint32 {
	if x != nil && x.Maxvalue != nil {
		return *x.Maxvalue
	}
	return Default_SealTimer_Maxvalue
}

func (x *SealTimer) GetStoptime() uint32 {
	if x != nil && x.Stoptime != nil {
		return *x.Stoptime
	}
	return Default_SealTimer_Stoptime
}

func (x *SealTimer) GetMaxtime() uint32 {
	if x != nil && x.Maxtime != nil {
		return *x.Maxtime
	}
	return Default_SealTimer_Maxtime
}

type BeginSeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=21" json:"cmd,omitempty"`
	Param     *SealParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.SealParam,def=4" json:"param,omitempty"`
	Sealid    *uint64      `protobuf:"varint,3,opt,name=sealid,def=0" json:"sealid,omitempty"`
	Etype     *EFinishType `protobuf:"varint,4,opt,name=etype,enum=Cmd.EFinishType,def=1" json:"etype,omitempty"`
	Finishall *bool        `protobuf:"varint,5,opt,name=finishall,def=0" json:"finishall,omitempty"`
}

// Default values for BeginSeal fields.
const (
	Default_BeginSeal_Cmd       = Command_SCENE_USER_SEAL_PROTOCMD
	Default_BeginSeal_Param     = SealParam_SEALPARAM_BEGINSEAL
	Default_BeginSeal_Sealid    = uint64(0)
	Default_BeginSeal_Etype     = EFinishType_EFINISHTYPE_NORMAL
	Default_BeginSeal_Finishall = bool(false)
)

func (x *BeginSeal) Reset() {
	*x = BeginSeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSeal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginSeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginSeal) ProtoMessage() {}

func (x *BeginSeal) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSeal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginSeal.ProtoReflect.Descriptor instead.
func (*BeginSeal) Descriptor() ([]byte, []int) {
	return file_SceneSeal_proto_rawDescGZIP(), []int{5}
}

func (x *BeginSeal) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BeginSeal_Cmd
}

func (x *BeginSeal) GetParam() SealParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BeginSeal_Param
}

func (x *BeginSeal) GetSealid() uint64 {
	if x != nil && x.Sealid != nil {
		return *x.Sealid
	}
	return Default_BeginSeal_Sealid
}

func (x *BeginSeal) GetEtype() EFinishType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_BeginSeal_Etype
}

func (x *BeginSeal) GetFinishall() bool {
	if x != nil && x.Finishall != nil {
		return *x.Finishall
	}
	return Default_BeginSeal_Finishall
}

type EndSeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=21" json:"cmd,omitempty"`
	Param   *SealParam `protobuf:"varint,2,opt,name=param,enum=Cmd.SealParam,def=5" json:"param,omitempty"`
	Success *bool      `protobuf:"varint,3,opt,name=success,def=0" json:"success,omitempty"`
	Sealid  *uint32    `protobuf:"varint,4,opt,name=sealid,def=0" json:"sealid,omitempty"`
}

// Default values for EndSeal fields.
const (
	Default_EndSeal_Cmd     = Command_SCENE_USER_SEAL_PROTOCMD
	Default_EndSeal_Param   = SealParam_SEALPARAM_ENDSEAL
	Default_EndSeal_Success = bool(false)
	Default_EndSeal_Sealid  = uint32(0)
)

func (x *EndSeal) Reset() {
	*x = EndSeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSeal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndSeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndSeal) ProtoMessage() {}

func (x *EndSeal) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSeal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndSeal.ProtoReflect.Descriptor instead.
func (*EndSeal) Descriptor() ([]byte, []int) {
	return file_SceneSeal_proto_rawDescGZIP(), []int{6}
}

func (x *EndSeal) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EndSeal_Cmd
}

func (x *EndSeal) GetParam() SealParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EndSeal_Param
}

func (x *EndSeal) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return Default_EndSeal_Success
}

func (x *EndSeal) GetSealid() uint32 {
	if x != nil && x.Sealid != nil {
		return *x.Sealid
	}
	return Default_EndSeal_Sealid
}

type SealUserLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=21" json:"cmd,omitempty"`
	Param *SealParam `protobuf:"varint,2,opt,name=param,enum=Cmd.SealParam,def=6" json:"param,omitempty"`
}

// Default values for SealUserLeave fields.
const (
	Default_SealUserLeave_Cmd   = Command_SCENE_USER_SEAL_PROTOCMD
	Default_SealUserLeave_Param = SealParam_SEALPARAM_USERLEAVE
)

func (x *SealUserLeave) Reset() {
	*x = SealUserLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSeal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealUserLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealUserLeave) ProtoMessage() {}

func (x *SealUserLeave) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSeal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealUserLeave.ProtoReflect.Descriptor instead.
func (*SealUserLeave) Descriptor() ([]byte, []int) {
	return file_SceneSeal_proto_rawDescGZIP(), []int{7}
}

func (x *SealUserLeave) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SealUserLeave_Cmd
}

func (x *SealUserLeave) GetParam() SealParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SealUserLeave_Param
}

type SealConfigPart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configid *uint32 `protobuf:"varint,1,opt,name=configid" json:"configid,omitempty"`
	Passflag *bool   `protobuf:"varint,2,opt,name=passflag" json:"passflag,omitempty"`
}

func (x *SealConfigPart) Reset() {
	*x = SealConfigPart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSeal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealConfigPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealConfigPart) ProtoMessage() {}

func (x *SealConfigPart) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSeal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealConfigPart.ProtoReflect.Descriptor instead.
func (*SealConfigPart) Descriptor() ([]byte, []int) {
	return file_SceneSeal_proto_rawDescGZIP(), []int{8}
}

func (x *SealConfigPart) GetConfigid() uint32 {
	if x != nil && x.Configid != nil {
		return *x.Configid
	}
	return 0
}

func (x *SealConfigPart) GetPassflag() bool {
	if x != nil && x.Passflag != nil {
		return *x.Passflag
	}
	return false
}

type SealQueryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd         *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=21" json:"cmd,omitempty"`
	Param       *SealParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.SealParam,def=7" json:"param,omitempty"`
	Configid    []uint32          `protobuf:"varint,3,rep,name=configid" json:"configid,omitempty"`
	Donetimes   *uint32           `protobuf:"varint,4,opt,name=donetimes,def=0" json:"donetimes,omitempty"`
	Maxtimes    *uint32           `protobuf:"varint,5,opt,name=maxtimes,def=0" json:"maxtimes,omitempty"`
	Configparts []*SealConfigPart `protobuf:"bytes,6,rep,name=configparts" json:"configparts,omitempty"`
}

// Default values for SealQueryList fields.
const (
	Default_SealQueryList_Cmd       = Command_SCENE_USER_SEAL_PROTOCMD
	Default_SealQueryList_Param     = SealParam_SEALPARAM_QUERYLIST
	Default_SealQueryList_Donetimes = uint32(0)
	Default_SealQueryList_Maxtimes  = uint32(0)
)

func (x *SealQueryList) Reset() {
	*x = SealQueryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSeal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealQueryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealQueryList) ProtoMessage() {}

func (x *SealQueryList) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSeal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealQueryList.ProtoReflect.Descriptor instead.
func (*SealQueryList) Descriptor() ([]byte, []int) {
	return file_SceneSeal_proto_rawDescGZIP(), []int{9}
}

func (x *SealQueryList) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SealQueryList_Cmd
}

func (x *SealQueryList) GetParam() SealParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SealQueryList_Param
}

func (x *SealQueryList) GetConfigid() []uint32 {
	if x != nil {
		return x.Configid
	}
	return nil
}

func (x *SealQueryList) GetDonetimes() uint32 {
	if x != nil && x.Donetimes != nil {
		return *x.Donetimes
	}
	return Default_SealQueryList_Donetimes
}

func (x *SealQueryList) GetMaxtimes() uint32 {
	if x != nil && x.Maxtimes != nil {
		return *x.Maxtimes
	}
	return Default_SealQueryList_Maxtimes
}

func (x *SealQueryList) GetConfigparts() []*SealConfigPart {
	if x != nil {
		return x.Configparts
	}
	return nil
}

type SealAcceptCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=21" json:"cmd,omitempty"`
	Param   *SealParam `protobuf:"varint,2,opt,name=param,enum=Cmd.SealParam,def=8" json:"param,omitempty"`
	Seal    *uint32    `protobuf:"varint,3,opt,name=seal,def=0" json:"seal,omitempty"`
	Pos     *ScenePos  `protobuf:"bytes,4,opt,name=pos" json:"pos,omitempty"`
	Abandon *bool      `protobuf:"varint,5,opt,name=abandon,def=0" json:"abandon,omitempty"`
}

// Default values for SealAcceptCmd fields.
const (
	Default_SealAcceptCmd_Cmd     = Command_SCENE_USER_SEAL_PROTOCMD
	Default_SealAcceptCmd_Param   = SealParam_SEALPARAM_ACCEPTSEAL
	Default_SealAcceptCmd_Seal    = uint32(0)
	Default_SealAcceptCmd_Abandon = bool(false)
)

func (x *SealAcceptCmd) Reset() {
	*x = SealAcceptCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneSeal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SealAcceptCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SealAcceptCmd) ProtoMessage() {}

func (x *SealAcceptCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneSeal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SealAcceptCmd.ProtoReflect.Descriptor instead.
func (*SealAcceptCmd) Descriptor() ([]byte, []int) {
	return file_SceneSeal_proto_rawDescGZIP(), []int{10}
}

func (x *SealAcceptCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SealAcceptCmd_Cmd
}

func (x *SealAcceptCmd) GetParam() SealParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SealAcceptCmd_Param
}

func (x *SealAcceptCmd) GetSeal() uint32 {
	if x != nil && x.Seal != nil {
		return *x.Seal
	}
	return Default_SealAcceptCmd_Seal
}

func (x *SealAcceptCmd) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SealAcceptCmd) GetAbandon() bool {
	if x != nil && x.Abandon != nil {
		return *x.Abandon
	}
	return Default_SealAcceptCmd_Abandon
}

var File_SceneSeal_proto protoreflect.FileDescriptor

var file_SceneSeal_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x65, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a,
	0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x73, 0x65, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x73,
	0x65, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52,
	0x03, 0x70, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x65, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x73, 0x65, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x53, 0x65, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x10, 0x45, 0x53, 0x45, 0x41, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x07,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x08, 0x53, 0x65, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x61,
	0x6c, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x41, 0x4c, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x53, 0x65, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x53, 0x45, 0x41, 0x4c,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x53, 0x45, 0x41, 0x4c, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x53, 0x45, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x14, 0x53, 0x45, 0x41, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x53, 0x45, 0x41, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x27, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x07, 0x6e, 0x65, 0x77, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x07, 0x64, 0x65, 0x6c,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x53, 0x65, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x93, 0x02, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x53, 0x65, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x53, 0x45, 0x41, 0x4c, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x08, 0x63, 0x75, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x08,
	0x73, 0x74, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x09, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x53, 0x65, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45,
	0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x13, 0x53, 0x45, 0x41, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e,
	0x53, 0x45, 0x41, 0x4c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x19, 0x0a, 0x06, 0x73,
	0x65, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x52, 0x05, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x22, 0xb8, 0x01, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x53,
	0x65, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x41, 0x4c, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x37, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x11, 0x53, 0x45,
	0x41, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x44, 0x53, 0x45, 0x41, 0x4c, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x65, 0x61, 0x6c,
	0x69, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x41, 0x4c,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x53,
	0x45, 0x41, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4c, 0x45, 0x41,
	0x56, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x48, 0x0a, 0x0e, 0x53, 0x65, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x66,
	0x6c, 0x61, 0x67, 0x22, 0x97, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x41,
	0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x39, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13,
	0x53, 0x45, 0x41, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x4c,
	0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x09, 0x64, 0x6f, 0x6e, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x64, 0x6f,
	0x6e, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x53, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x74,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x72, 0x74, 0x73, 0x22, 0xde, 0x01,
	0x0a, 0x0d, 0x53, 0x65, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6d, 0x64, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53,
	0x65, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x53, 0x45, 0x41, 0x4c, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x53, 0x45, 0x41, 0x4c, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x15, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x73, 0x65, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x1f, 0x0a,
	0x07, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x2a, 0xd3,
	0x01, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x45, 0x41, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x53,
	0x45, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x41, 0x4c, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x53, 0x45, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x45, 0x41, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x41,
	0x4c, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x41, 0x4c,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x53, 0x45, 0x41, 0x4c, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x41, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45,
	0x4e, 0x44, 0x53, 0x45, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x41, 0x4c,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10,
	0x06, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x41, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45,
	0x41, 0x4c, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x53, 0x45,
	0x41, 0x4c, 0x10, 0x08, 0x2a, 0x8e, 0x01, 0x0a, 0x09, 0x45, 0x53, 0x65, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x53, 0x45, 0x41, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x53, 0x45, 0x41, 0x4c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x53, 0x45, 0x41, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x53, 0x45, 0x41, 0x4c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x53, 0x45, 0x41, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x44, 0x45, 0x4a, 0x4f, 0x42,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x53, 0x45, 0x41, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0x87, 0x01, 0x0a, 0x0b, 0x45, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f, 0x4e,
	0x4f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04,
}

var (
	file_SceneSeal_proto_rawDescOnce sync.Once
	file_SceneSeal_proto_rawDescData = file_SceneSeal_proto_rawDesc
)

func file_SceneSeal_proto_rawDescGZIP() []byte {
	file_SceneSeal_proto_rawDescOnce.Do(func() {
		file_SceneSeal_proto_rawDescData = protoimpl.X.CompressGZIP(file_SceneSeal_proto_rawDescData)
	})
	return file_SceneSeal_proto_rawDescData
}

var file_SceneSeal_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_SceneSeal_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_SceneSeal_proto_goTypes = []interface{}{
	(SealParam)(0),         // 0: Cmd.SealParam
	(ESealType)(0),         // 1: Cmd.ESealType
	(EFinishType)(0),       // 2: Cmd.EFinishType
	(*SealItem)(nil),       // 3: Cmd.SealItem
	(*SealData)(nil),       // 4: Cmd.SealData
	(*QuerySeal)(nil),      // 5: Cmd.QuerySeal
	(*UpdateSeal)(nil),     // 6: Cmd.UpdateSeal
	(*SealTimer)(nil),      // 7: Cmd.SealTimer
	(*BeginSeal)(nil),      // 8: Cmd.BeginSeal
	(*EndSeal)(nil),        // 9: Cmd.EndSeal
	(*SealUserLeave)(nil),  // 10: Cmd.SealUserLeave
	(*SealConfigPart)(nil), // 11: Cmd.SealConfigPart
	(*SealQueryList)(nil),  // 12: Cmd.SealQueryList
	(*SealAcceptCmd)(nil),  // 13: Cmd.SealAcceptCmd
	(*ScenePos)(nil),       // 14: Cmd.ScenePos
	(Command)(0),           // 15: Cmd.Command
}
var file_SceneSeal_proto_depIdxs = []int32{
	14, // 0: Cmd.SealItem.pos:type_name -> Cmd.ScenePos
	1,  // 1: Cmd.SealItem.etype:type_name -> Cmd.ESealType
	3,  // 2: Cmd.SealData.items:type_name -> Cmd.SealItem
	15, // 3: Cmd.QuerySeal.cmd:type_name -> Cmd.Command
	0,  // 4: Cmd.QuerySeal.param:type_name -> Cmd.SealParam
	4,  // 5: Cmd.QuerySeal.datas:type_name -> Cmd.SealData
	15, // 6: Cmd.UpdateSeal.cmd:type_name -> Cmd.Command
	0,  // 7: Cmd.UpdateSeal.param:type_name -> Cmd.SealParam
	4,  // 8: Cmd.UpdateSeal.newdata:type_name -> Cmd.SealData
	4,  // 9: Cmd.UpdateSeal.deldata:type_name -> Cmd.SealData
	15, // 10: Cmd.SealTimer.cmd:type_name -> Cmd.Command
	0,  // 11: Cmd.SealTimer.param:type_name -> Cmd.SealParam
	15, // 12: Cmd.BeginSeal.cmd:type_name -> Cmd.Command
	0,  // 13: Cmd.BeginSeal.param:type_name -> Cmd.SealParam
	2,  // 14: Cmd.BeginSeal.etype:type_name -> Cmd.EFinishType
	15, // 15: Cmd.EndSeal.cmd:type_name -> Cmd.Command
	0,  // 16: Cmd.EndSeal.param:type_name -> Cmd.SealParam
	15, // 17: Cmd.SealUserLeave.cmd:type_name -> Cmd.Command
	0,  // 18: Cmd.SealUserLeave.param:type_name -> Cmd.SealParam
	15, // 19: Cmd.SealQueryList.cmd:type_name -> Cmd.Command
	0,  // 20: Cmd.SealQueryList.param:type_name -> Cmd.SealParam
	11, // 21: Cmd.SealQueryList.configparts:type_name -> Cmd.SealConfigPart
	15, // 22: Cmd.SealAcceptCmd.cmd:type_name -> Cmd.Command
	0,  // 23: Cmd.SealAcceptCmd.param:type_name -> Cmd.SealParam
	14, // 24: Cmd.SealAcceptCmd.pos:type_name -> Cmd.ScenePos
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_SceneSeal_proto_init() }
func file_SceneSeal_proto_init() {
	if File_SceneSeal_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_ProtoCommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SceneSeal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSeal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSeal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSeal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSeal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealTimer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSeal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginSeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSeal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndSeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSeal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealUserLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSeal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealConfigPart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSeal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealQueryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneSeal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SealAcceptCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SceneSeal_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SceneSeal_proto_goTypes,
		DependencyIndexes: file_SceneSeal_proto_depIdxs,
		EnumInfos:         file_SceneSeal_proto_enumTypes,
		MessageInfos:      file_SceneSeal_proto_msgTypes,
	}.Build()
	File_SceneSeal_proto = out.File
	file_SceneSeal_proto_rawDesc = nil
	file_SceneSeal_proto_goTypes = nil
	file_SceneSeal_proto_depIdxs = nil
}
