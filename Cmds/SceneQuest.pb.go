// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: SceneQuest.proto

package Cmd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QuestParam int32

const (
	QuestParam_QUESTPARAM_QUESTLIST               QuestParam = 1
	QuestParam_QUESTPARAM_QUESTUPDATE             QuestParam = 2
	QuestParam_QUESTPARAM_QUESTACTION             QuestParam = 3
	QuestParam_QUESTPARAM_RUNQUESTSTEP            QuestParam = 4
	QuestParam_QUESTPARAM_QUESTSTEPUPDATE         QuestParam = 5
	QuestParam_QUESTPARAM_QUESTTRACE              QuestParam = 6
	QuestParam_QUESTPARAM_QUESTDETAILLIST         QuestParam = 7
	QuestParam_QUESTPARAM_QUESTDETAILUPDATE       QuestParam = 8
	QuestParam_QUESTPARAM_QUESTRAIDCMD            QuestParam = 9
	QuestParam_QUESTPARAM_CANACCEPTLISTCHANGED    QuestParam = 10
	QuestParam_QUESTPARAM_VISIT_NPC               QuestParam = 11
	QuestParam_QUESTPARAM_QUERYOTHERDATA          QuestParam = 12
	QuestParam_QUESTPARAM_QUERYWANTEDINFO         QuestParam = 13
	QuestParam_QUESTPARAM_HELP_ACCEPT_INVITE      QuestParam = 14
	QuestParam_QUESTPARAM_HELP_ACCEPT_AGREE       QuestParam = 15
	QuestParam_QUESTPARAM_INVITE_ACCEPT_QUEST     QuestParam = 16
	QuestParam_QUESTPARAM_QUERY_WORLD_QUEST       QuestParam = 17
	QuestParam_QUESTPARAM_QUESTGROUP_TRACE        QuestParam = 18
	QuestParam_QUESTPARAM_HELP_QUICK_FINISH_BOARD QuestParam = 19
	QuestParam_QUESTPARAM_QUERY_MANUAL            QuestParam = 21
	QuestParam_QUESTPARAM_OPEN_PUZZLE             QuestParam = 22
	QuestParam_QUESTPARAM_MANUAL_FUNCTION         QuestParam = 23
	QuestParam_QUESTPARAM_QUERY_QUESTLIST         QuestParam = 24
	QuestParam_QUESTPARAM_MAPSTEP_SYNC            QuestParam = 25
	QuestParam_QUESTPARAM_MAPSTEP_UPDATE          QuestParam = 26
	QuestParam_QUESTPARAM_MAPSTEP_FINISH          QuestParam = 27
	QuestParam_QUESTPARAM_AREA_ACTION             QuestParam = 28
	QuestParam_QUESTPARAM_PLOT_STATUS_NTF         QuestParam = 29
	QuestParam_QUESTPARAM_BOTTLE_QUERY            QuestParam = 30
	QuestParam_QUESTPARAM_BOTTLE_ACTION           QuestParam = 31
	QuestParam_QUESTPARAM_BOTTLE_UPDATE           QuestParam = 32
)

// Enum value maps for QuestParam.
var (
	QuestParam_name = map[int32]string{
		1:  "QUESTPARAM_QUESTLIST",
		2:  "QUESTPARAM_QUESTUPDATE",
		3:  "QUESTPARAM_QUESTACTION",
		4:  "QUESTPARAM_RUNQUESTSTEP",
		5:  "QUESTPARAM_QUESTSTEPUPDATE",
		6:  "QUESTPARAM_QUESTTRACE",
		7:  "QUESTPARAM_QUESTDETAILLIST",
		8:  "QUESTPARAM_QUESTDETAILUPDATE",
		9:  "QUESTPARAM_QUESTRAIDCMD",
		10: "QUESTPARAM_CANACCEPTLISTCHANGED",
		11: "QUESTPARAM_VISIT_NPC",
		12: "QUESTPARAM_QUERYOTHERDATA",
		13: "QUESTPARAM_QUERYWANTEDINFO",
		14: "QUESTPARAM_HELP_ACCEPT_INVITE",
		15: "QUESTPARAM_HELP_ACCEPT_AGREE",
		16: "QUESTPARAM_INVITE_ACCEPT_QUEST",
		17: "QUESTPARAM_QUERY_WORLD_QUEST",
		18: "QUESTPARAM_QUESTGROUP_TRACE",
		19: "QUESTPARAM_HELP_QUICK_FINISH_BOARD",
		21: "QUESTPARAM_QUERY_MANUAL",
		22: "QUESTPARAM_OPEN_PUZZLE",
		23: "QUESTPARAM_MANUAL_FUNCTION",
		24: "QUESTPARAM_QUERY_QUESTLIST",
		25: "QUESTPARAM_MAPSTEP_SYNC",
		26: "QUESTPARAM_MAPSTEP_UPDATE",
		27: "QUESTPARAM_MAPSTEP_FINISH",
		28: "QUESTPARAM_AREA_ACTION",
		29: "QUESTPARAM_PLOT_STATUS_NTF",
		30: "QUESTPARAM_BOTTLE_QUERY",
		31: "QUESTPARAM_BOTTLE_ACTION",
		32: "QUESTPARAM_BOTTLE_UPDATE",
	}
	QuestParam_value = map[string]int32{
		"QUESTPARAM_QUESTLIST":               1,
		"QUESTPARAM_QUESTUPDATE":             2,
		"QUESTPARAM_QUESTACTION":             3,
		"QUESTPARAM_RUNQUESTSTEP":            4,
		"QUESTPARAM_QUESTSTEPUPDATE":         5,
		"QUESTPARAM_QUESTTRACE":              6,
		"QUESTPARAM_QUESTDETAILLIST":         7,
		"QUESTPARAM_QUESTDETAILUPDATE":       8,
		"QUESTPARAM_QUESTRAIDCMD":            9,
		"QUESTPARAM_CANACCEPTLISTCHANGED":    10,
		"QUESTPARAM_VISIT_NPC":               11,
		"QUESTPARAM_QUERYOTHERDATA":          12,
		"QUESTPARAM_QUERYWANTEDINFO":         13,
		"QUESTPARAM_HELP_ACCEPT_INVITE":      14,
		"QUESTPARAM_HELP_ACCEPT_AGREE":       15,
		"QUESTPARAM_INVITE_ACCEPT_QUEST":     16,
		"QUESTPARAM_QUERY_WORLD_QUEST":       17,
		"QUESTPARAM_QUESTGROUP_TRACE":        18,
		"QUESTPARAM_HELP_QUICK_FINISH_BOARD": 19,
		"QUESTPARAM_QUERY_MANUAL":            21,
		"QUESTPARAM_OPEN_PUZZLE":             22,
		"QUESTPARAM_MANUAL_FUNCTION":         23,
		"QUESTPARAM_QUERY_QUESTLIST":         24,
		"QUESTPARAM_MAPSTEP_SYNC":            25,
		"QUESTPARAM_MAPSTEP_UPDATE":          26,
		"QUESTPARAM_MAPSTEP_FINISH":          27,
		"QUESTPARAM_AREA_ACTION":             28,
		"QUESTPARAM_PLOT_STATUS_NTF":         29,
		"QUESTPARAM_BOTTLE_QUERY":            30,
		"QUESTPARAM_BOTTLE_ACTION":           31,
		"QUESTPARAM_BOTTLE_UPDATE":           32,
	}
)

func (x QuestParam) Enum() *QuestParam {
	p := new(QuestParam)
	*p = x
	return p
}

func (x QuestParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestParam) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneQuest_proto_enumTypes[0].Descriptor()
}

func (QuestParam) Type() protoreflect.EnumType {
	return &file_SceneQuest_proto_enumTypes[0]
}

func (x QuestParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QuestParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QuestParam(num)
	return nil
}

// Deprecated: Use QuestParam.Descriptor instead.
func (QuestParam) EnumDescriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{0}
}

type EWantedType int32

const (
	EWantedType_EWANTEDTYPE_TOTAL  EWantedType = 0
	EWantedType_EWANTEDTYPE_ACTIVE EWantedType = 1
	EWantedType_EWANTEDTYPE_DAY    EWantedType = 2
	EWantedType_EWANTEDTYPE_WEEK   EWantedType = 3
	EWantedType_EWANTEDTYPE_MAX    EWantedType = 4
)

// Enum value maps for EWantedType.
var (
	EWantedType_name = map[int32]string{
		0: "EWANTEDTYPE_TOTAL",
		1: "EWANTEDTYPE_ACTIVE",
		2: "EWANTEDTYPE_DAY",
		3: "EWANTEDTYPE_WEEK",
		4: "EWANTEDTYPE_MAX",
	}
	EWantedType_value = map[string]int32{
		"EWANTEDTYPE_TOTAL":  0,
		"EWANTEDTYPE_ACTIVE": 1,
		"EWANTEDTYPE_DAY":    2,
		"EWANTEDTYPE_WEEK":   3,
		"EWANTEDTYPE_MAX":    4,
	}
)

func (x EWantedType) Enum() *EWantedType {
	p := new(EWantedType)
	*p = x
	return p
}

func (x EWantedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EWantedType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneQuest_proto_enumTypes[1].Descriptor()
}

func (EWantedType) Type() protoreflect.EnumType {
	return &file_SceneQuest_proto_enumTypes[1]
}

func (x EWantedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EWantedType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EWantedType(num)
	return nil
}

// Deprecated: Use EWantedType.Descriptor instead.
func (EWantedType) EnumDescriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{1}
}

type EQuestType int32

const (
	EQuestType_EQUESTTYPE_MIN              EQuestType = 0
	EQuestType_EQUESTTYPE_MAIN             EQuestType = 1
	EQuestType_EQUESTTYPE_BRANCH           EQuestType = 2
	EQuestType_EQUESTTYPE_TALK             EQuestType = 3
	EQuestType_EQUESTTYPE_TRIGGER          EQuestType = 4
	EQuestType_EQUESTTYPE_WANTED           EQuestType = 5
	EQuestType_EQUESTTYPE_DAILY            EQuestType = 6
	EQuestType_EQUESTTYPE_DAILY_1          EQuestType = 7
	EQuestType_EQUESTTYPE_DAILY_3          EQuestType = 8
	EQuestType_EQUESTTYPE_DAILY_7          EQuestType = 9
	EQuestType_EQUESTTYPE_STORY            EQuestType = 10
	EQuestType_EQUESTTYPE_DAILY_MAP        EQuestType = 11
	EQuestType_EQUESTTYPE_SCENE            EQuestType = 12
	EQuestType_EQUESTTYPE_HEAD             EQuestType = 13
	EQuestType_EQUESTTYPE_RAIDTALK         EQuestType = 14
	EQuestType_EQUESTTYPE_SATISFACTION     EQuestType = 15
	EQuestType_EQUESTTYPE_ELITE            EQuestType = 16
	EQuestType_EQUESTTYPE_CCRASTEHAM       EQuestType = 17
	EQuestType_EQUESTTYPE_STORY_CCRASTEHAM EQuestType = 18
	EQuestType_EQUESTTYPE_GUILD            EQuestType = 19
	EQuestType_EQUESTTYPE_CHILD            EQuestType = 20
	EQuestType_EQUESTTYPE_DAILY_RESET      EQuestType = 21
	EQuestType_EQUESTTYPE_ACC              EQuestType = 22
	EQuestType_EQUESTTYPE_ACC_NORMAL       EQuestType = 23
	EQuestType_EQUESTTYPE_ACC_DAILY        EQuestType = 24
	EQuestType_EQUESTTYPE_ACC_CHOICE       EQuestType = 25
	EQuestType_EQUESTTYPE_DAILY_MAPRAND    EQuestType = 26
	EQuestType_EQUESTTYPE_ACC_MAIN         EQuestType = 27
	EQuestType_EQUESTTYPE_ACC_BRANCH       EQuestType = 28
	EQuestType_EQUESTTYPE_ACC_SATISFACTION EQuestType = 29
	EQuestType_EQUESTTYPE_ACC_DAILY_1      EQuestType = 30
	EQuestType_EQUESTTYPE_ACC_DAILY_3      EQuestType = 31
	EQuestType_EQUESTTYPE_ACC_DAILY_7      EQuestType = 32
	EQuestType_EQUESTTYPE_ACC_DAILY_RESET  EQuestType = 33
	EQuestType_EQUESTTYPE_DAILY_BOX        EQuestType = 34
	EQuestType_EQUESTTYPE_SIGN             EQuestType = 35
	EQuestType_EQUESTTYPE_DAY              EQuestType = 36
	EQuestType_EQUESTTYPE_NIGHT            EQuestType = 37
	EQuestType_EQUESTTYPE_ARTIFACT         EQuestType = 38
	EQuestType_EQUESTTYPE_WEDDING          EQuestType = 39
	EQuestType_EQUESTTYPE_WEDDING_DAILY    EQuestType = 40
	EQuestType_EQUESTTYPE_CAPRA            EQuestType = 41
	EQuestType_EQUESTTYPE_DEAD             EQuestType = 42
	EQuestType_EQUESTTYPE_ACC_1            EQuestType = 43
	EQuestType_EQUESTTYPE_ACC_2            EQuestType = 44
	EQuestType_EQUESTTYPE_ACC_3            EQuestType = 45
	EQuestType_EQUESTTYPE_ACC_4            EQuestType = 46
	EQuestType_EQUESTTYPE_VERSION          EQuestType = 47
	EQuestType_EQUESTTYPE_WANTED_DAY       EQuestType = 48
	EQuestType_EQUESTTYPE_WANTED_WEEK      EQuestType = 49
	EQuestType_EQUESTTYPE_BRANCHTALK       EQuestType = 50
	EQuestType_EQUESTTYPE_BRANCHSTEFANIE   EQuestType = 51
	EQuestType_EQUESTTYPE_SHARE_NORMAL     EQuestType = 52
	EQuestType_EQUESTTYPE_SHARE_DAILY_1    EQuestType = 53
	EQuestType_EQUESTTYPE_SHARE_DAILY_3    EQuestType = 54
	EQuestType_EQUESTTYPE_SHARE_DAILY_7    EQuestType = 55
	EQuestType_EQUESTTYPE_WORLD            EQuestType = 56
	EQuestType_EQUESTTYPE_WORLDBOSS        EQuestType = 57
	EQuestType_EQUESTTYPE_WORLDTREASURE    EQuestType = 58
	EQuestType_EQUESTTYPE_SHARE_STATUS     EQuestType = 59
	EQuestType_EQUESTTYPE_GUIDING_TASK     EQuestType = 60
	EQuestType_EQUESTTYPE_ACC_WEEK_1       EQuestType = 61
	EQuestType_EQUESTTYPE_ACC_WEEK_3       EQuestType = 62
	EQuestType_EQUESTTYPE_ACC_WEEK_5       EQuestType = 63
	EQuestType_EQUESTTYPE_WEEK_1           EQuestType = 64
	EQuestType_EQUESTTYPE_WEEK_3           EQuestType = 65
	EQuestType_EQUESTTYPE_WEEK_5           EQuestType = 66
	EQuestType_EQUESTTYPE_BOTTLE           EQuestType = 67
	EQuestType_EQUESTTYPE_MAX              EQuestType = 68
)

// Enum value maps for EQuestType.
var (
	EQuestType_name = map[int32]string{
		0:  "EQUESTTYPE_MIN",
		1:  "EQUESTTYPE_MAIN",
		2:  "EQUESTTYPE_BRANCH",
		3:  "EQUESTTYPE_TALK",
		4:  "EQUESTTYPE_TRIGGER",
		5:  "EQUESTTYPE_WANTED",
		6:  "EQUESTTYPE_DAILY",
		7:  "EQUESTTYPE_DAILY_1",
		8:  "EQUESTTYPE_DAILY_3",
		9:  "EQUESTTYPE_DAILY_7",
		10: "EQUESTTYPE_STORY",
		11: "EQUESTTYPE_DAILY_MAP",
		12: "EQUESTTYPE_SCENE",
		13: "EQUESTTYPE_HEAD",
		14: "EQUESTTYPE_RAIDTALK",
		15: "EQUESTTYPE_SATISFACTION",
		16: "EQUESTTYPE_ELITE",
		17: "EQUESTTYPE_CCRASTEHAM",
		18: "EQUESTTYPE_STORY_CCRASTEHAM",
		19: "EQUESTTYPE_GUILD",
		20: "EQUESTTYPE_CHILD",
		21: "EQUESTTYPE_DAILY_RESET",
		22: "EQUESTTYPE_ACC",
		23: "EQUESTTYPE_ACC_NORMAL",
		24: "EQUESTTYPE_ACC_DAILY",
		25: "EQUESTTYPE_ACC_CHOICE",
		26: "EQUESTTYPE_DAILY_MAPRAND",
		27: "EQUESTTYPE_ACC_MAIN",
		28: "EQUESTTYPE_ACC_BRANCH",
		29: "EQUESTTYPE_ACC_SATISFACTION",
		30: "EQUESTTYPE_ACC_DAILY_1",
		31: "EQUESTTYPE_ACC_DAILY_3",
		32: "EQUESTTYPE_ACC_DAILY_7",
		33: "EQUESTTYPE_ACC_DAILY_RESET",
		34: "EQUESTTYPE_DAILY_BOX",
		35: "EQUESTTYPE_SIGN",
		36: "EQUESTTYPE_DAY",
		37: "EQUESTTYPE_NIGHT",
		38: "EQUESTTYPE_ARTIFACT",
		39: "EQUESTTYPE_WEDDING",
		40: "EQUESTTYPE_WEDDING_DAILY",
		41: "EQUESTTYPE_CAPRA",
		42: "EQUESTTYPE_DEAD",
		43: "EQUESTTYPE_ACC_1",
		44: "EQUESTTYPE_ACC_2",
		45: "EQUESTTYPE_ACC_3",
		46: "EQUESTTYPE_ACC_4",
		47: "EQUESTTYPE_VERSION",
		48: "EQUESTTYPE_WANTED_DAY",
		49: "EQUESTTYPE_WANTED_WEEK",
		50: "EQUESTTYPE_BRANCHTALK",
		51: "EQUESTTYPE_BRANCHSTEFANIE",
		52: "EQUESTTYPE_SHARE_NORMAL",
		53: "EQUESTTYPE_SHARE_DAILY_1",
		54: "EQUESTTYPE_SHARE_DAILY_3",
		55: "EQUESTTYPE_SHARE_DAILY_7",
		56: "EQUESTTYPE_WORLD",
		57: "EQUESTTYPE_WORLDBOSS",
		58: "EQUESTTYPE_WORLDTREASURE",
		59: "EQUESTTYPE_SHARE_STATUS",
		60: "EQUESTTYPE_GUIDING_TASK",
		61: "EQUESTTYPE_ACC_WEEK_1",
		62: "EQUESTTYPE_ACC_WEEK_3",
		63: "EQUESTTYPE_ACC_WEEK_5",
		64: "EQUESTTYPE_WEEK_1",
		65: "EQUESTTYPE_WEEK_3",
		66: "EQUESTTYPE_WEEK_5",
		67: "EQUESTTYPE_BOTTLE",
		68: "EQUESTTYPE_MAX",
	}
	EQuestType_value = map[string]int32{
		"EQUESTTYPE_MIN":              0,
		"EQUESTTYPE_MAIN":             1,
		"EQUESTTYPE_BRANCH":           2,
		"EQUESTTYPE_TALK":             3,
		"EQUESTTYPE_TRIGGER":          4,
		"EQUESTTYPE_WANTED":           5,
		"EQUESTTYPE_DAILY":            6,
		"EQUESTTYPE_DAILY_1":          7,
		"EQUESTTYPE_DAILY_3":          8,
		"EQUESTTYPE_DAILY_7":          9,
		"EQUESTTYPE_STORY":            10,
		"EQUESTTYPE_DAILY_MAP":        11,
		"EQUESTTYPE_SCENE":            12,
		"EQUESTTYPE_HEAD":             13,
		"EQUESTTYPE_RAIDTALK":         14,
		"EQUESTTYPE_SATISFACTION":     15,
		"EQUESTTYPE_ELITE":            16,
		"EQUESTTYPE_CCRASTEHAM":       17,
		"EQUESTTYPE_STORY_CCRASTEHAM": 18,
		"EQUESTTYPE_GUILD":            19,
		"EQUESTTYPE_CHILD":            20,
		"EQUESTTYPE_DAILY_RESET":      21,
		"EQUESTTYPE_ACC":              22,
		"EQUESTTYPE_ACC_NORMAL":       23,
		"EQUESTTYPE_ACC_DAILY":        24,
		"EQUESTTYPE_ACC_CHOICE":       25,
		"EQUESTTYPE_DAILY_MAPRAND":    26,
		"EQUESTTYPE_ACC_MAIN":         27,
		"EQUESTTYPE_ACC_BRANCH":       28,
		"EQUESTTYPE_ACC_SATISFACTION": 29,
		"EQUESTTYPE_ACC_DAILY_1":      30,
		"EQUESTTYPE_ACC_DAILY_3":      31,
		"EQUESTTYPE_ACC_DAILY_7":      32,
		"EQUESTTYPE_ACC_DAILY_RESET":  33,
		"EQUESTTYPE_DAILY_BOX":        34,
		"EQUESTTYPE_SIGN":             35,
		"EQUESTTYPE_DAY":              36,
		"EQUESTTYPE_NIGHT":            37,
		"EQUESTTYPE_ARTIFACT":         38,
		"EQUESTTYPE_WEDDING":          39,
		"EQUESTTYPE_WEDDING_DAILY":    40,
		"EQUESTTYPE_CAPRA":            41,
		"EQUESTTYPE_DEAD":             42,
		"EQUESTTYPE_ACC_1":            43,
		"EQUESTTYPE_ACC_2":            44,
		"EQUESTTYPE_ACC_3":            45,
		"EQUESTTYPE_ACC_4":            46,
		"EQUESTTYPE_VERSION":          47,
		"EQUESTTYPE_WANTED_DAY":       48,
		"EQUESTTYPE_WANTED_WEEK":      49,
		"EQUESTTYPE_BRANCHTALK":       50,
		"EQUESTTYPE_BRANCHSTEFANIE":   51,
		"EQUESTTYPE_SHARE_NORMAL":     52,
		"EQUESTTYPE_SHARE_DAILY_1":    53,
		"EQUESTTYPE_SHARE_DAILY_3":    54,
		"EQUESTTYPE_SHARE_DAILY_7":    55,
		"EQUESTTYPE_WORLD":            56,
		"EQUESTTYPE_WORLDBOSS":        57,
		"EQUESTTYPE_WORLDTREASURE":    58,
		"EQUESTTYPE_SHARE_STATUS":     59,
		"EQUESTTYPE_GUIDING_TASK":     60,
		"EQUESTTYPE_ACC_WEEK_1":       61,
		"EQUESTTYPE_ACC_WEEK_3":       62,
		"EQUESTTYPE_ACC_WEEK_5":       63,
		"EQUESTTYPE_WEEK_1":           64,
		"EQUESTTYPE_WEEK_3":           65,
		"EQUESTTYPE_WEEK_5":           66,
		"EQUESTTYPE_BOTTLE":           67,
		"EQUESTTYPE_MAX":              68,
	}
)

func (x EQuestType) Enum() *EQuestType {
	p := new(EQuestType)
	*p = x
	return p
}

func (x EQuestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQuestType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneQuest_proto_enumTypes[2].Descriptor()
}

func (EQuestType) Type() protoreflect.EnumType {
	return &file_SceneQuest_proto_enumTypes[2]
}

func (x EQuestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EQuestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EQuestType(num)
	return nil
}

// Deprecated: Use EQuestType.Descriptor instead.
func (EQuestType) EnumDescriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{2}
}

type EQuestStep int32

const (
	EQuestStep_EQUESTSTEP_MIN                EQuestStep = 0
	EQuestStep_EQUESTSTEP_VISIT              EQuestStep = 1
	EQuestStep_EQUESTSTEP_KILL               EQuestStep = 2
	EQuestStep_EQUESTSTEP_REWARD             EQuestStep = 3
	EQuestStep_EQUESTSTEP_COLLECT            EQuestStep = 4
	EQuestStep_EQUESTSTEP_SUMMON             EQuestStep = 5
	EQuestStep_EQUESTSTEP_GUARD              EQuestStep = 6
	EQuestStep_EQUESTSTEP_GMCMD              EQuestStep = 7
	EQuestStep_EQUESTSTEP_TESTFAIL           EQuestStep = 8
	EQuestStep_EQUESTSTEP_USE                EQuestStep = 9
	EQuestStep_EQUESTSTEP_GATHER             EQuestStep = 10
	EQuestStep_EQUESTSTEP_DELETE             EQuestStep = 11
	EQuestStep_EQUESTSTEP_RAID               EQuestStep = 12
	EQuestStep_EQUESTSTEP_CAMERA             EQuestStep = 13
	EQuestStep_EQUESTSTEP_LEVEL              EQuestStep = 14
	EQuestStep_EQUESTSTEP_WAIT               EQuestStep = 15
	EQuestStep_EQUESTSTEP_MOVE               EQuestStep = 16
	EQuestStep_EQUESTSTEP_DIALOG             EQuestStep = 17
	EQuestStep_EQUESTSTEP_PREQUEST           EQuestStep = 18
	EQuestStep_EQUESTSTEP_CLEARNPC           EQuestStep = 19
	EQuestStep_EQUESTSTEP_MOUNTRIDE          EQuestStep = 20
	EQuestStep_EQUESTSTEP_SELFIE             EQuestStep = 21
	EQuestStep_EQUESTSTEP_CHECKTEAM          EQuestStep = 22
	EQuestStep_EQUESTSTEP_REMOVEMONEY        EQuestStep = 23
	EQuestStep_EQUESTSTEP_CLASS              EQuestStep = 24
	EQuestStep_EQUESTSTEP_ORGCLASS           EQuestStep = 25
	EQuestStep_EQUESTSTEP_EVO                EQuestStep = 26
	EQuestStep_EQUESTSTEP_CHECKQUEST         EQuestStep = 27
	EQuestStep_EQUESTSTEP_CHECKITEM          EQuestStep = 28
	EQuestStep_EQUESTSTEP_REMOVEITEM         EQuestStep = 29
	EQuestStep_EQUESTSTEP_RANDOMJUMP         EQuestStep = 30
	EQuestStep_EQUESTSTEP_CHECKLEVEL         EQuestStep = 31
	EQuestStep_EQUESTSTEP_CHECKGEAR          EQuestStep = 32
	EQuestStep_EQUESTSTEP_PURIFY             EQuestStep = 33
	EQuestStep_EQUESTSTEP_ACTION             EQuestStep = 34
	EQuestStep_EQUESTSTEP_SKILL              EQuestStep = 35
	EQuestStep_EQUESTSTEP_INTERLOCUTION      EQuestStep = 36
	EQuestStep_EQUESTSTEP_EMPTY              EQuestStep = 37
	EQuestStep_EQUESTSTEP_CHECKEQUIPLV       EQuestStep = 38
	EQuestStep_EQUESTSTEP_CHECKMONEY         EQuestStep = 39
	EQuestStep_EQUESTSTEP_GUIDE              EQuestStep = 40
	EQuestStep_EQUESTSTEP_GUIDE_CHECK        EQuestStep = 41
	EQuestStep_EQUESTSTEP_GUIDE_HIGHLIGHT    EQuestStep = 42
	EQuestStep_EQUESTSTEP_CHECKOPTION        EQuestStep = 43
	EQuestStep_EQUESTSTEP_HINT               EQuestStep = 44
	EQuestStep_EQUESTSTEP_CHECKGROUP         EQuestStep = 45
	EQuestStep_EQUESTSTEP_SEAL               EQuestStep = 46
	EQuestStep_EQUESTSTEP_EQUIPLV            EQuestStep = 47
	EQuestStep_EQUESTSTEP_VIDEO              EQuestStep = 48
	EQuestStep_EQUESTSTEP_ILLUSTRATION       EQuestStep = 49
	EQuestStep_EQUESTSTEP_NPCPLAY            EQuestStep = 50
	EQuestStep_EQUESTSTEP_ITEM               EQuestStep = 51
	EQuestStep_EQUESTSTEP_DAILY              EQuestStep = 52
	EQuestStep_EQUESTSTEP_CHECK_MANUAL       EQuestStep = 53
	EQuestStep_EQUESTSTEP_MANUAL             EQuestStep = 54
	EQuestStep_EQUESTSTEP_PLAY_MUSIC         EQuestStep = 55
	EQuestStep_EQUESTSTEP_REWRADHELP         EQuestStep = 56
	EQuestStep_EQUESTSTEP_GUIDELOCKMONSTER   EQuestStep = 57
	EQuestStep_EQUESTSTEP_MONEY              EQuestStep = 58
	EQuestStep_EQUESTSTEP_ACTIVITY           EQuestStep = 59
	EQuestStep_EQUESTSTEP_OPTION             EQuestStep = 60
	EQuestStep_EQUESTSTEP_PHOTO              EQuestStep = 61
	EQuestStep_EQUESTSTEP_ITEMUSE            EQuestStep = 62
	EQuestStep_EQUESTSTEP_HAND               EQuestStep = 63
	EQuestStep_EQUESTSTEP_MUSIC              EQuestStep = 64
	EQuestStep_EQUESTSTEP_RANDITEM           EQuestStep = 65
	EQuestStep_EQUESTSTEP_CARRIER            EQuestStep = 66
	EQuestStep_EQUESTSTEP_BATTLE             EQuestStep = 67
	EQuestStep_EQUESTSTEP_COOKFOOD           EQuestStep = 68
	EQuestStep_EQUESTSTEP_PET                EQuestStep = 69
	EQuestStep_EQUESTSTEP_SCENE              EQuestStep = 70
	EQuestStep_EQUESTSTEP_COOK               EQuestStep = 71
	EQuestStep_EQUESTSTEP_BUFF               EQuestStep = 72
	EQuestStep_EQUESTSTEP_TUTOR              EQuestStep = 73
	EQuestStep_EQUESTSTEP_CHRISTMAS          EQuestStep = 74
	EQuestStep_EQUESTSTEP_CHRISTMAS_RUN      EQuestStep = 75
	EQuestStep_EQUESTSTEP_BEING              EQuestStep = 76
	EQuestStep_EQUESTSTEP_CHECK_JOY          EQuestStep = 77
	EQuestStep_EQUESTSTEP_ADD_JOY            EQuestStep = 78
	EQuestStep_EQUESTSTEP_RAND_DIALOG        EQuestStep = 79
	EQuestStep_EQUESTSTEP_CG                 EQuestStep = 80
	EQuestStep_EQUESTSTEP_CHECKSERVANT       EQuestStep = 81
	EQuestStep_EQUESTSTEP_CLIENTPLOT         EQuestStep = 84
	EQuestStep_EQUESTSTEP_CHAT               EQuestStep = 85
	EQuestStep_EQUESTSTEP_TRANSFER           EQuestStep = 86
	EQuestStep_EQUESTSTEP_REDIALOG           EQuestStep = 87
	EQuestStep_EQUESTSTEP_CHAT_SYSTEM        EQuestStep = 88
	EQuestStep_EQUESTSTEP_CHECK_UNLOCKCAT    EQuestStep = 89
	EQuestStep_EQUESTSTEP_GROUP              EQuestStep = 90
	EQuestStep_EQUESTSTEP_NPCWALK            EQuestStep = 91
	EQuestStep_EQUESTSTEP_NPCSKILL           EQuestStep = 92
	EQuestStep_EQUESTSTEP_CHECK_HANDNPC      EQuestStep = 94
	EQuestStep_EQUESTSTEP_USESKILL           EQuestStep = 95
	EQuestStep_EQUESTSTEP_NPCHP              EQuestStep = 96
	EQuestStep_EQUESTSTEP_CAMERASHOW         EQuestStep = 98
	EQuestStep_EQUESTSTEP_TIMEPHASING        EQuestStep = 99
	EQuestStep_EQUESTSTEP_GAME               EQuestStep = 100
	EQuestStep_EQUESTSTEP_KILLORDER          EQuestStep = 101
	EQuestStep_EQUESTSTEP_PICTURE            EQuestStep = 102
	EQuestStep_EQUESTSTEP_GAMECOUNT          EQuestStep = 103
	EQuestStep_EQUESTSTEP_MAIL               EQuestStep = 104
	EQuestStep_EQUESTSTEP_CHOOSE_BRANCH      EQuestStep = 105
	EQuestStep_EQUESTSTEP_WAITPOS            EQuestStep = 106
	EQuestStep_EQUESTSTEP_SHOT               EQuestStep = 107
	EQuestStep_EQUESTSTEP_START_ACT          EQuestStep = 108
	EQuestStep_EQUESTSTEP_CUT_SCENE          EQuestStep = 109
	EQuestStep_EQUESTSTEP_CHECKBORNMAP       EQuestStep = 110
	EQuestStep_EQUESTSTEP_PAPER              EQuestStep = 111
	EQuestStep_EQUESTSTEP_RANDOM_TIP         EQuestStep = 112
	EQuestStep_EQUESTSTEP_SHARE              EQuestStep = 113
	EQuestStep_EQUESTSTEP_TRANSIT            EQuestStep = 114
	EQuestStep_EQUESTSTEP_SHAKESCREEN        EQuestStep = 115
	EQuestStep_EQUESTSTEP_ADDPICTURE         EQuestStep = 116
	EQuestStep_EQUESTSTEP_DELPICTURE         EQuestStep = 117
	EQuestStep_EQUESTSTEP_CHECK_LIGHT_PUZZLE EQuestStep = 118
	EQuestStep_EQUESTSTEP_PARTNER_MOVE       EQuestStep = 119
	EQuestStep_EQUESTSTEP_WAITCLIENT         EQuestStep = 120
	EQuestStep_EQUESTSTEP_TAPPING            EQuestStep = 121
	EQuestStep_EQUESTSTEP_MAX                EQuestStep = 122
)

// Enum value maps for EQuestStep.
var (
	EQuestStep_name = map[int32]string{
		0:   "EQUESTSTEP_MIN",
		1:   "EQUESTSTEP_VISIT",
		2:   "EQUESTSTEP_KILL",
		3:   "EQUESTSTEP_REWARD",
		4:   "EQUESTSTEP_COLLECT",
		5:   "EQUESTSTEP_SUMMON",
		6:   "EQUESTSTEP_GUARD",
		7:   "EQUESTSTEP_GMCMD",
		8:   "EQUESTSTEP_TESTFAIL",
		9:   "EQUESTSTEP_USE",
		10:  "EQUESTSTEP_GATHER",
		11:  "EQUESTSTEP_DELETE",
		12:  "EQUESTSTEP_RAID",
		13:  "EQUESTSTEP_CAMERA",
		14:  "EQUESTSTEP_LEVEL",
		15:  "EQUESTSTEP_WAIT",
		16:  "EQUESTSTEP_MOVE",
		17:  "EQUESTSTEP_DIALOG",
		18:  "EQUESTSTEP_PREQUEST",
		19:  "EQUESTSTEP_CLEARNPC",
		20:  "EQUESTSTEP_MOUNTRIDE",
		21:  "EQUESTSTEP_SELFIE",
		22:  "EQUESTSTEP_CHECKTEAM",
		23:  "EQUESTSTEP_REMOVEMONEY",
		24:  "EQUESTSTEP_CLASS",
		25:  "EQUESTSTEP_ORGCLASS",
		26:  "EQUESTSTEP_EVO",
		27:  "EQUESTSTEP_CHECKQUEST",
		28:  "EQUESTSTEP_CHECKITEM",
		29:  "EQUESTSTEP_REMOVEITEM",
		30:  "EQUESTSTEP_RANDOMJUMP",
		31:  "EQUESTSTEP_CHECKLEVEL",
		32:  "EQUESTSTEP_CHECKGEAR",
		33:  "EQUESTSTEP_PURIFY",
		34:  "EQUESTSTEP_ACTION",
		35:  "EQUESTSTEP_SKILL",
		36:  "EQUESTSTEP_INTERLOCUTION",
		37:  "EQUESTSTEP_EMPTY",
		38:  "EQUESTSTEP_CHECKEQUIPLV",
		39:  "EQUESTSTEP_CHECKMONEY",
		40:  "EQUESTSTEP_GUIDE",
		41:  "EQUESTSTEP_GUIDE_CHECK",
		42:  "EQUESTSTEP_GUIDE_HIGHLIGHT",
		43:  "EQUESTSTEP_CHECKOPTION",
		44:  "EQUESTSTEP_HINT",
		45:  "EQUESTSTEP_CHECKGROUP",
		46:  "EQUESTSTEP_SEAL",
		47:  "EQUESTSTEP_EQUIPLV",
		48:  "EQUESTSTEP_VIDEO",
		49:  "EQUESTSTEP_ILLUSTRATION",
		50:  "EQUESTSTEP_NPCPLAY",
		51:  "EQUESTSTEP_ITEM",
		52:  "EQUESTSTEP_DAILY",
		53:  "EQUESTSTEP_CHECK_MANUAL",
		54:  "EQUESTSTEP_MANUAL",
		55:  "EQUESTSTEP_PLAY_MUSIC",
		56:  "EQUESTSTEP_REWRADHELP",
		57:  "EQUESTSTEP_GUIDELOCKMONSTER",
		58:  "EQUESTSTEP_MONEY",
		59:  "EQUESTSTEP_ACTIVITY",
		60:  "EQUESTSTEP_OPTION",
		61:  "EQUESTSTEP_PHOTO",
		62:  "EQUESTSTEP_ITEMUSE",
		63:  "EQUESTSTEP_HAND",
		64:  "EQUESTSTEP_MUSIC",
		65:  "EQUESTSTEP_RANDITEM",
		66:  "EQUESTSTEP_CARRIER",
		67:  "EQUESTSTEP_BATTLE",
		68:  "EQUESTSTEP_COOKFOOD",
		69:  "EQUESTSTEP_PET",
		70:  "EQUESTSTEP_SCENE",
		71:  "EQUESTSTEP_COOK",
		72:  "EQUESTSTEP_BUFF",
		73:  "EQUESTSTEP_TUTOR",
		74:  "EQUESTSTEP_CHRISTMAS",
		75:  "EQUESTSTEP_CHRISTMAS_RUN",
		76:  "EQUESTSTEP_BEING",
		77:  "EQUESTSTEP_CHECK_JOY",
		78:  "EQUESTSTEP_ADD_JOY",
		79:  "EQUESTSTEP_RAND_DIALOG",
		80:  "EQUESTSTEP_CG",
		81:  "EQUESTSTEP_CHECKSERVANT",
		84:  "EQUESTSTEP_CLIENTPLOT",
		85:  "EQUESTSTEP_CHAT",
		86:  "EQUESTSTEP_TRANSFER",
		87:  "EQUESTSTEP_REDIALOG",
		88:  "EQUESTSTEP_CHAT_SYSTEM",
		89:  "EQUESTSTEP_CHECK_UNLOCKCAT",
		90:  "EQUESTSTEP_GROUP",
		91:  "EQUESTSTEP_NPCWALK",
		92:  "EQUESTSTEP_NPCSKILL",
		94:  "EQUESTSTEP_CHECK_HANDNPC",
		95:  "EQUESTSTEP_USESKILL",
		96:  "EQUESTSTEP_NPCHP",
		98:  "EQUESTSTEP_CAMERASHOW",
		99:  "EQUESTSTEP_TIMEPHASING",
		100: "EQUESTSTEP_GAME",
		101: "EQUESTSTEP_KILLORDER",
		102: "EQUESTSTEP_PICTURE",
		103: "EQUESTSTEP_GAMECOUNT",
		104: "EQUESTSTEP_MAIL",
		105: "EQUESTSTEP_CHOOSE_BRANCH",
		106: "EQUESTSTEP_WAITPOS",
		107: "EQUESTSTEP_SHOT",
		108: "EQUESTSTEP_START_ACT",
		109: "EQUESTSTEP_CUT_SCENE",
		110: "EQUESTSTEP_CHECKBORNMAP",
		111: "EQUESTSTEP_PAPER",
		112: "EQUESTSTEP_RANDOM_TIP",
		113: "EQUESTSTEP_SHARE",
		114: "EQUESTSTEP_TRANSIT",
		115: "EQUESTSTEP_SHAKESCREEN",
		116: "EQUESTSTEP_ADDPICTURE",
		117: "EQUESTSTEP_DELPICTURE",
		118: "EQUESTSTEP_CHECK_LIGHT_PUZZLE",
		119: "EQUESTSTEP_PARTNER_MOVE",
		120: "EQUESTSTEP_WAITCLIENT",
		121: "EQUESTSTEP_TAPPING",
		122: "EQUESTSTEP_MAX",
	}
	EQuestStep_value = map[string]int32{
		"EQUESTSTEP_MIN":                0,
		"EQUESTSTEP_VISIT":              1,
		"EQUESTSTEP_KILL":               2,
		"EQUESTSTEP_REWARD":             3,
		"EQUESTSTEP_COLLECT":            4,
		"EQUESTSTEP_SUMMON":             5,
		"EQUESTSTEP_GUARD":              6,
		"EQUESTSTEP_GMCMD":              7,
		"EQUESTSTEP_TESTFAIL":           8,
		"EQUESTSTEP_USE":                9,
		"EQUESTSTEP_GATHER":             10,
		"EQUESTSTEP_DELETE":             11,
		"EQUESTSTEP_RAID":               12,
		"EQUESTSTEP_CAMERA":             13,
		"EQUESTSTEP_LEVEL":              14,
		"EQUESTSTEP_WAIT":               15,
		"EQUESTSTEP_MOVE":               16,
		"EQUESTSTEP_DIALOG":             17,
		"EQUESTSTEP_PREQUEST":           18,
		"EQUESTSTEP_CLEARNPC":           19,
		"EQUESTSTEP_MOUNTRIDE":          20,
		"EQUESTSTEP_SELFIE":             21,
		"EQUESTSTEP_CHECKTEAM":          22,
		"EQUESTSTEP_REMOVEMONEY":        23,
		"EQUESTSTEP_CLASS":              24,
		"EQUESTSTEP_ORGCLASS":           25,
		"EQUESTSTEP_EVO":                26,
		"EQUESTSTEP_CHECKQUEST":         27,
		"EQUESTSTEP_CHECKITEM":          28,
		"EQUESTSTEP_REMOVEITEM":         29,
		"EQUESTSTEP_RANDOMJUMP":         30,
		"EQUESTSTEP_CHECKLEVEL":         31,
		"EQUESTSTEP_CHECKGEAR":          32,
		"EQUESTSTEP_PURIFY":             33,
		"EQUESTSTEP_ACTION":             34,
		"EQUESTSTEP_SKILL":              35,
		"EQUESTSTEP_INTERLOCUTION":      36,
		"EQUESTSTEP_EMPTY":              37,
		"EQUESTSTEP_CHECKEQUIPLV":       38,
		"EQUESTSTEP_CHECKMONEY":         39,
		"EQUESTSTEP_GUIDE":              40,
		"EQUESTSTEP_GUIDE_CHECK":        41,
		"EQUESTSTEP_GUIDE_HIGHLIGHT":    42,
		"EQUESTSTEP_CHECKOPTION":        43,
		"EQUESTSTEP_HINT":               44,
		"EQUESTSTEP_CHECKGROUP":         45,
		"EQUESTSTEP_SEAL":               46,
		"EQUESTSTEP_EQUIPLV":            47,
		"EQUESTSTEP_VIDEO":              48,
		"EQUESTSTEP_ILLUSTRATION":       49,
		"EQUESTSTEP_NPCPLAY":            50,
		"EQUESTSTEP_ITEM":               51,
		"EQUESTSTEP_DAILY":              52,
		"EQUESTSTEP_CHECK_MANUAL":       53,
		"EQUESTSTEP_MANUAL":             54,
		"EQUESTSTEP_PLAY_MUSIC":         55,
		"EQUESTSTEP_REWRADHELP":         56,
		"EQUESTSTEP_GUIDELOCKMONSTER":   57,
		"EQUESTSTEP_MONEY":              58,
		"EQUESTSTEP_ACTIVITY":           59,
		"EQUESTSTEP_OPTION":             60,
		"EQUESTSTEP_PHOTO":              61,
		"EQUESTSTEP_ITEMUSE":            62,
		"EQUESTSTEP_HAND":               63,
		"EQUESTSTEP_MUSIC":              64,
		"EQUESTSTEP_RANDITEM":           65,
		"EQUESTSTEP_CARRIER":            66,
		"EQUESTSTEP_BATTLE":             67,
		"EQUESTSTEP_COOKFOOD":           68,
		"EQUESTSTEP_PET":                69,
		"EQUESTSTEP_SCENE":              70,
		"EQUESTSTEP_COOK":               71,
		"EQUESTSTEP_BUFF":               72,
		"EQUESTSTEP_TUTOR":              73,
		"EQUESTSTEP_CHRISTMAS":          74,
		"EQUESTSTEP_CHRISTMAS_RUN":      75,
		"EQUESTSTEP_BEING":              76,
		"EQUESTSTEP_CHECK_JOY":          77,
		"EQUESTSTEP_ADD_JOY":            78,
		"EQUESTSTEP_RAND_DIALOG":        79,
		"EQUESTSTEP_CG":                 80,
		"EQUESTSTEP_CHECKSERVANT":       81,
		"EQUESTSTEP_CLIENTPLOT":         84,
		"EQUESTSTEP_CHAT":               85,
		"EQUESTSTEP_TRANSFER":           86,
		"EQUESTSTEP_REDIALOG":           87,
		"EQUESTSTEP_CHAT_SYSTEM":        88,
		"EQUESTSTEP_CHECK_UNLOCKCAT":    89,
		"EQUESTSTEP_GROUP":              90,
		"EQUESTSTEP_NPCWALK":            91,
		"EQUESTSTEP_NPCSKILL":           92,
		"EQUESTSTEP_CHECK_HANDNPC":      94,
		"EQUESTSTEP_USESKILL":           95,
		"EQUESTSTEP_NPCHP":              96,
		"EQUESTSTEP_CAMERASHOW":         98,
		"EQUESTSTEP_TIMEPHASING":        99,
		"EQUESTSTEP_GAME":               100,
		"EQUESTSTEP_KILLORDER":          101,
		"EQUESTSTEP_PICTURE":            102,
		"EQUESTSTEP_GAMECOUNT":          103,
		"EQUESTSTEP_MAIL":               104,
		"EQUESTSTEP_CHOOSE_BRANCH":      105,
		"EQUESTSTEP_WAITPOS":            106,
		"EQUESTSTEP_SHOT":               107,
		"EQUESTSTEP_START_ACT":          108,
		"EQUESTSTEP_CUT_SCENE":          109,
		"EQUESTSTEP_CHECKBORNMAP":       110,
		"EQUESTSTEP_PAPER":              111,
		"EQUESTSTEP_RANDOM_TIP":         112,
		"EQUESTSTEP_SHARE":              113,
		"EQUESTSTEP_TRANSIT":            114,
		"EQUESTSTEP_SHAKESCREEN":        115,
		"EQUESTSTEP_ADDPICTURE":         116,
		"EQUESTSTEP_DELPICTURE":         117,
		"EQUESTSTEP_CHECK_LIGHT_PUZZLE": 118,
		"EQUESTSTEP_PARTNER_MOVE":       119,
		"EQUESTSTEP_WAITCLIENT":         120,
		"EQUESTSTEP_TAPPING":            121,
		"EQUESTSTEP_MAX":                122,
	}
)

func (x EQuestStep) Enum() *EQuestStep {
	p := new(EQuestStep)
	*p = x
	return p
}

func (x EQuestStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQuestStep) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneQuest_proto_enumTypes[3].Descriptor()
}

func (EQuestStep) Type() protoreflect.EnumType {
	return &file_SceneQuest_proto_enumTypes[3]
}

func (x EQuestStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EQuestStep) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EQuestStep(num)
	return nil
}

// Deprecated: Use EQuestStep.Descriptor instead.
func (EQuestStep) EnumDescriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{3}
}

type EQuestList int32

const (
	EQuestList_EQUESTLIST_MIN       EQuestList = 0
	EQuestList_EQUESTLIST_ACCEPT    EQuestList = 1
	EQuestList_EQUESTLIST_SUBMIT    EQuestList = 2
	EQuestList_EQUESTLIST_COMPLETE  EQuestList = 3
	EQuestList_EQUESTLIST_CANACCEPT EQuestList = 4
	EQuestList_EQUESTLIST_MAX       EQuestList = 5
)

// Enum value maps for EQuestList.
var (
	EQuestList_name = map[int32]string{
		0: "EQUESTLIST_MIN",
		1: "EQUESTLIST_ACCEPT",
		2: "EQUESTLIST_SUBMIT",
		3: "EQUESTLIST_COMPLETE",
		4: "EQUESTLIST_CANACCEPT",
		5: "EQUESTLIST_MAX",
	}
	EQuestList_value = map[string]int32{
		"EQUESTLIST_MIN":       0,
		"EQUESTLIST_ACCEPT":    1,
		"EQUESTLIST_SUBMIT":    2,
		"EQUESTLIST_COMPLETE":  3,
		"EQUESTLIST_CANACCEPT": 4,
		"EQUESTLIST_MAX":       5,
	}
)

func (x EQuestList) Enum() *EQuestList {
	p := new(EQuestList)
	*p = x
	return p
}

func (x EQuestList) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQuestList) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneQuest_proto_enumTypes[4].Descriptor()
}

func (EQuestList) Type() protoreflect.EnumType {
	return &file_SceneQuest_proto_enumTypes[4]
}

func (x EQuestList) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EQuestList) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EQuestList(num)
	return nil
}

// Deprecated: Use EQuestList.Descriptor instead.
func (EQuestList) EnumDescriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{4}
}

type EQuestAction int32

const (
	EQuestAction_EQUESTACTION_MIN                     EQuestAction = 0
	EQuestAction_EQUESTACTION_ACCEPT                  EQuestAction = 1
	EQuestAction_EQUESTACTION_SUBMIT                  EQuestAction = 2
	EQuestAction_EQUESTACTION_ABANDON_GROUP           EQuestAction = 3
	EQuestAction_EQUESTACTION_ABANDON_QUEST           EQuestAction = 4
	EQuestAction_EQUESTACTION_QUICK_SUBMIT_BOARD      EQuestAction = 5
	EQuestAction_EQUESTACTION_QUICK_SUBMIT_BOARD_TEAM EQuestAction = 6
	EQuestAction_EQUESTACTION_REPAIR                  EQuestAction = 7
	EQuestAction_EQUESTACTION_MAX                     EQuestAction = 8
)

// Enum value maps for EQuestAction.
var (
	EQuestAction_name = map[int32]string{
		0: "EQUESTACTION_MIN",
		1: "EQUESTACTION_ACCEPT",
		2: "EQUESTACTION_SUBMIT",
		3: "EQUESTACTION_ABANDON_GROUP",
		4: "EQUESTACTION_ABANDON_QUEST",
		5: "EQUESTACTION_QUICK_SUBMIT_BOARD",
		6: "EQUESTACTION_QUICK_SUBMIT_BOARD_TEAM",
		7: "EQUESTACTION_REPAIR",
		8: "EQUESTACTION_MAX",
	}
	EQuestAction_value = map[string]int32{
		"EQUESTACTION_MIN":                     0,
		"EQUESTACTION_ACCEPT":                  1,
		"EQUESTACTION_SUBMIT":                  2,
		"EQUESTACTION_ABANDON_GROUP":           3,
		"EQUESTACTION_ABANDON_QUEST":           4,
		"EQUESTACTION_QUICK_SUBMIT_BOARD":      5,
		"EQUESTACTION_QUICK_SUBMIT_BOARD_TEAM": 6,
		"EQUESTACTION_REPAIR":                  7,
		"EQUESTACTION_MAX":                     8,
	}
)

func (x EQuestAction) Enum() *EQuestAction {
	p := new(EQuestAction)
	*p = x
	return p
}

func (x EQuestAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQuestAction) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneQuest_proto_enumTypes[5].Descriptor()
}

func (EQuestAction) Type() protoreflect.EnumType {
	return &file_SceneQuest_proto_enumTypes[5]
}

func (x EQuestAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EQuestAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EQuestAction(num)
	return nil
}

// Deprecated: Use EQuestAction.Descriptor instead.
func (EQuestAction) EnumDescriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{5}
}

type EOtherData int32

const (
	EOtherData_EOTHERDATA_MIN           EOtherData = 0
	EOtherData_EOTHERDATA_DAILY         EOtherData = 1
	EOtherData_EOTHERDATA_CAT           EOtherData = 2
	EOtherData_EOTHERDATA_WORLDTREASURE EOtherData = 3
	EOtherData_EOTHERDATA_WORLD         EOtherData = 4
	EOtherData_EOTHERDATA_MAX           EOtherData = 5
)

// Enum value maps for EOtherData.
var (
	EOtherData_name = map[int32]string{
		0: "EOTHERDATA_MIN",
		1: "EOTHERDATA_DAILY",
		2: "EOTHERDATA_CAT",
		3: "EOTHERDATA_WORLDTREASURE",
		4: "EOTHERDATA_WORLD",
		5: "EOTHERDATA_MAX",
	}
	EOtherData_value = map[string]int32{
		"EOTHERDATA_MIN":           0,
		"EOTHERDATA_DAILY":         1,
		"EOTHERDATA_CAT":           2,
		"EOTHERDATA_WORLDTREASURE": 3,
		"EOTHERDATA_WORLD":         4,
		"EOTHERDATA_MAX":           5,
	}
)

func (x EOtherData) Enum() *EOtherData {
	p := new(EOtherData)
	*p = x
	return p
}

func (x EOtherData) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOtherData) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneQuest_proto_enumTypes[6].Descriptor()
}

func (EOtherData) Type() protoreflect.EnumType {
	return &file_SceneQuest_proto_enumTypes[6]
}

func (x EOtherData) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EOtherData) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EOtherData(num)
	return nil
}

// Deprecated: Use EOtherData.Descriptor instead.
func (EOtherData) EnumDescriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{6}
}

type EJoyActivityType int32

const (
	EJoyActivityType_JOY_ACTIVITY_MIN      EJoyActivityType = 0
	EJoyActivityType_JOY_ACTIVITY_GUESS    EJoyActivityType = 1
	EJoyActivityType_JOY_ACTIVITY_MISCHIEF EJoyActivityType = 2
	EJoyActivityType_JOY_ACTIVITY_QUESTION EJoyActivityType = 3
	EJoyActivityType_JOY_ACTIVITY_FOOD     EJoyActivityType = 4
	EJoyActivityType_JOY_ACTIVITY_YOYO     EJoyActivityType = 5
	EJoyActivityType_JOY_ACTIVITY_ATF      EJoyActivityType = 6
	EJoyActivityType_JOY_ACTIVITY_AUGURY   EJoyActivityType = 7
	EJoyActivityType_JOY_ACTIVITY_PHOTO    EJoyActivityType = 8
	EJoyActivityType_JOY_ACTIVITY_BEATPORI EJoyActivityType = 9
	EJoyActivityType_JOY_ACTIVITY_MAX      EJoyActivityType = 10
)

// Enum value maps for EJoyActivityType.
var (
	EJoyActivityType_name = map[int32]string{
		0:  "JOY_ACTIVITY_MIN",
		1:  "JOY_ACTIVITY_GUESS",
		2:  "JOY_ACTIVITY_MISCHIEF",
		3:  "JOY_ACTIVITY_QUESTION",
		4:  "JOY_ACTIVITY_FOOD",
		5:  "JOY_ACTIVITY_YOYO",
		6:  "JOY_ACTIVITY_ATF",
		7:  "JOY_ACTIVITY_AUGURY",
		8:  "JOY_ACTIVITY_PHOTO",
		9:  "JOY_ACTIVITY_BEATPORI",
		10: "JOY_ACTIVITY_MAX",
	}
	EJoyActivityType_value = map[string]int32{
		"JOY_ACTIVITY_MIN":      0,
		"JOY_ACTIVITY_GUESS":    1,
		"JOY_ACTIVITY_MISCHIEF": 2,
		"JOY_ACTIVITY_QUESTION": 3,
		"JOY_ACTIVITY_FOOD":     4,
		"JOY_ACTIVITY_YOYO":     5,
		"JOY_ACTIVITY_ATF":      6,
		"JOY_ACTIVITY_AUGURY":   7,
		"JOY_ACTIVITY_PHOTO":    8,
		"JOY_ACTIVITY_BEATPORI": 9,
		"JOY_ACTIVITY_MAX":      10,
	}
)

func (x EJoyActivityType) Enum() *EJoyActivityType {
	p := new(EJoyActivityType)
	*p = x
	return p
}

func (x EJoyActivityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EJoyActivityType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneQuest_proto_enumTypes[7].Descriptor()
}

func (EJoyActivityType) Type() protoreflect.EnumType {
	return &file_SceneQuest_proto_enumTypes[7]
}

func (x EJoyActivityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EJoyActivityType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EJoyActivityType(num)
	return nil
}

// Deprecated: Use EJoyActivityType.Descriptor instead.
func (EJoyActivityType) EnumDescriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{7}
}

type EBottleStatus int32

const (
	EBottleStatus_EBOTTLESTATUS_MIN    EBottleStatus = 0
	EBottleStatus_EBOTTLESTATUS_ACCEPT EBottleStatus = 1
	EBottleStatus_EBOTTLESTATUS_FINISH EBottleStatus = 2
	EBottleStatus_EBOTTLESTATUS_MAX    EBottleStatus = 3
)

// Enum value maps for EBottleStatus.
var (
	EBottleStatus_name = map[int32]string{
		0: "EBOTTLESTATUS_MIN",
		1: "EBOTTLESTATUS_ACCEPT",
		2: "EBOTTLESTATUS_FINISH",
		3: "EBOTTLESTATUS_MAX",
	}
	EBottleStatus_value = map[string]int32{
		"EBOTTLESTATUS_MIN":    0,
		"EBOTTLESTATUS_ACCEPT": 1,
		"EBOTTLESTATUS_FINISH": 2,
		"EBOTTLESTATUS_MAX":    3,
	}
)

func (x EBottleStatus) Enum() *EBottleStatus {
	p := new(EBottleStatus)
	*p = x
	return p
}

func (x EBottleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBottleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneQuest_proto_enumTypes[8].Descriptor()
}

func (EBottleStatus) Type() protoreflect.EnumType {
	return &file_SceneQuest_proto_enumTypes[8]
}

func (x EBottleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBottleStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBottleStatus(num)
	return nil
}

// Deprecated: Use EBottleStatus.Descriptor instead.
func (EBottleStatus) EnumDescriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{8}
}

type EBottleAction int32

const (
	EBottleAction_EBOTTLEACTION_MIN     EBottleAction = 0
	EBottleAction_EBOTTLEACTION_ACCEPT  EBottleAction = 1
	EBottleAction_EBOTTLEACTION_ABANDON EBottleAction = 2
	EBottleAction_EBOTTLEACTION_FINISH  EBottleAction = 3
	EBottleAction_EBOTTLEACTION_MAX     EBottleAction = 4
)

// Enum value maps for EBottleAction.
var (
	EBottleAction_name = map[int32]string{
		0: "EBOTTLEACTION_MIN",
		1: "EBOTTLEACTION_ACCEPT",
		2: "EBOTTLEACTION_ABANDON",
		3: "EBOTTLEACTION_FINISH",
		4: "EBOTTLEACTION_MAX",
	}
	EBottleAction_value = map[string]int32{
		"EBOTTLEACTION_MIN":     0,
		"EBOTTLEACTION_ACCEPT":  1,
		"EBOTTLEACTION_ABANDON": 2,
		"EBOTTLEACTION_FINISH":  3,
		"EBOTTLEACTION_MAX":     4,
	}
)

func (x EBottleAction) Enum() *EBottleAction {
	p := new(EBottleAction)
	*p = x
	return p
}

func (x EBottleAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBottleAction) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneQuest_proto_enumTypes[9].Descriptor()
}

func (EBottleAction) Type() protoreflect.EnumType {
	return &file_SceneQuest_proto_enumTypes[9]
}

func (x EBottleAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBottleAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBottleAction(num)
	return nil
}

// Deprecated: Use EBottleAction.Descriptor instead.
func (EBottleAction) EnumDescriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{9}
}

type QuestPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardGroup  *uint32      `protobuf:"varint,1,opt,name=RewardGroup,def=0" json:"RewardGroup,omitempty"`
	SubGroup     *uint32      `protobuf:"varint,2,opt,name=SubGroup,def=0" json:"SubGroup,omitempty"`
	FinishJump   *uint32      `protobuf:"varint,3,opt,name=FinishJump,def=0" json:"FinishJump,omitempty"`
	FailJump     *uint32      `protobuf:"varint,4,opt,name=FailJump,def=0" json:"FailJump,omitempty"`
	Map          *uint32      `protobuf:"varint,5,opt,name=Map,def=0" json:"Map,omitempty"`
	WhetherTrace *uint32      `protobuf:"varint,6,opt,name=WhetherTrace,def=0" json:"WhetherTrace,omitempty"`
	Auto         *uint32      `protobuf:"varint,7,opt,name=Auto,def=0" json:"Auto,omitempty"`
	FirstClass   *uint32      `protobuf:"varint,8,opt,name=FirstClass,def=0" json:"FirstClass,omitempty"`
	Class        *uint32      `protobuf:"varint,9,opt,name=Class,def=0" json:"Class,omitempty"`
	Level        *uint32      `protobuf:"varint,10,opt,name=Level,def=0" json:"Level,omitempty"`
	PreNoShow    *uint32      `protobuf:"varint,21,opt,name=PreNoShow,def=0" json:"PreNoShow,omitempty"`
	Risklevel    *uint32      `protobuf:"varint,22,opt,name=Risklevel,def=0" json:"Risklevel,omitempty"`
	Joblevel     *uint32      `protobuf:"varint,23,opt,name=Joblevel,def=0" json:"Joblevel,omitempty"`
	CookerLv     *uint32      `protobuf:"varint,24,opt,name=CookerLv,def=0" json:"CookerLv,omitempty"`
	TasterLv     *uint32      `protobuf:"varint,25,opt,name=TasterLv,def=0" json:"TasterLv,omitempty"`
	Icon         *uint32      `protobuf:"varint,27,opt,name=Icon,def=0" json:"Icon,omitempty"`
	Color        *uint32      `protobuf:"varint,28,opt,name=Color,def=0" json:"Color,omitempty"`
	QuestName    *string      `protobuf:"bytes,11,opt,name=QuestName" json:"QuestName,omitempty"`
	Name         *string      `protobuf:"bytes,12,opt,name=Name" json:"Name,omitempty"`
	Type         *string      `protobuf:"bytes,13,opt,name=Type" json:"Type,omitempty"`
	Content      *string      `protobuf:"bytes,14,opt,name=Content" json:"Content,omitempty"`
	TraceInfo    *string      `protobuf:"bytes,15,opt,name=TraceInfo" json:"TraceInfo,omitempty"`
	Prefixion    *string      `protobuf:"bytes,20,opt,name=Prefixion" json:"Prefixion,omitempty"`
	Version      *string      `protobuf:"bytes,32,opt,name=version" json:"version,omitempty"`
	Params       *ConfigParam `protobuf:"bytes,16,opt,name=params" json:"params,omitempty"`
	Allrewardid  []uint32     `protobuf:"varint,17,rep,name=allrewardid" json:"allrewardid,omitempty"`
	PreQuest     []uint32     `protobuf:"varint,18,rep,name=PreQuest" json:"PreQuest,omitempty"`
	MustPreQuest []uint32     `protobuf:"varint,19,rep,name=MustPreQuest" json:"MustPreQuest,omitempty"`
	Headicon     *uint32      `protobuf:"varint,29,opt,name=Headicon,def=0" json:"Headicon,omitempty"`
	Hide         *uint32      `protobuf:"varint,30,opt,name=Hide" json:"Hide,omitempty"`
	CreateTime   *uint32      `protobuf:"varint,31,opt,name=CreateTime" json:"CreateTime,omitempty"`
}

// Default values for QuestPConfig fields.
const (
	Default_QuestPConfig_RewardGroup  = uint32(0)
	Default_QuestPConfig_SubGroup     = uint32(0)
	Default_QuestPConfig_FinishJump   = uint32(0)
	Default_QuestPConfig_FailJump     = uint32(0)
	Default_QuestPConfig_Map          = uint32(0)
	Default_QuestPConfig_WhetherTrace = uint32(0)
	Default_QuestPConfig_Auto         = uint32(0)
	Default_QuestPConfig_FirstClass   = uint32(0)
	Default_QuestPConfig_Class        = uint32(0)
	Default_QuestPConfig_Level        = uint32(0)
	Default_QuestPConfig_PreNoShow    = uint32(0)
	Default_QuestPConfig_Risklevel    = uint32(0)
	Default_QuestPConfig_Joblevel     = uint32(0)
	Default_QuestPConfig_CookerLv     = uint32(0)
	Default_QuestPConfig_TasterLv     = uint32(0)
	Default_QuestPConfig_Icon         = uint32(0)
	Default_QuestPConfig_Color        = uint32(0)
	Default_QuestPConfig_Headicon     = uint32(0)
)

func (x *QuestPConfig) Reset() {
	*x = QuestPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestPConfig) ProtoMessage() {}

func (x *QuestPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestPConfig.ProtoReflect.Descriptor instead.
func (*QuestPConfig) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{0}
}

func (x *QuestPConfig) GetRewardGroup() uint32 {
	if x != nil && x.RewardGroup != nil {
		return *x.RewardGroup
	}
	return Default_QuestPConfig_RewardGroup
}

func (x *QuestPConfig) GetSubGroup() uint32 {
	if x != nil && x.SubGroup != nil {
		return *x.SubGroup
	}
	return Default_QuestPConfig_SubGroup
}

func (x *QuestPConfig) GetFinishJump() uint32 {
	if x != nil && x.FinishJump != nil {
		return *x.FinishJump
	}
	return Default_QuestPConfig_FinishJump
}

func (x *QuestPConfig) GetFailJump() uint32 {
	if x != nil && x.FailJump != nil {
		return *x.FailJump
	}
	return Default_QuestPConfig_FailJump
}

func (x *QuestPConfig) GetMap() uint32 {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return Default_QuestPConfig_Map
}

func (x *QuestPConfig) GetWhetherTrace() uint32 {
	if x != nil && x.WhetherTrace != nil {
		return *x.WhetherTrace
	}
	return Default_QuestPConfig_WhetherTrace
}

func (x *QuestPConfig) GetAuto() uint32 {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return Default_QuestPConfig_Auto
}

func (x *QuestPConfig) GetFirstClass() uint32 {
	if x != nil && x.FirstClass != nil {
		return *x.FirstClass
	}
	return Default_QuestPConfig_FirstClass
}

func (x *QuestPConfig) GetClass() uint32 {
	if x != nil && x.Class != nil {
		return *x.Class
	}
	return Default_QuestPConfig_Class
}

func (x *QuestPConfig) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return Default_QuestPConfig_Level
}

func (x *QuestPConfig) GetPreNoShow() uint32 {
	if x != nil && x.PreNoShow != nil {
		return *x.PreNoShow
	}
	return Default_QuestPConfig_PreNoShow
}

func (x *QuestPConfig) GetRisklevel() uint32 {
	if x != nil && x.Risklevel != nil {
		return *x.Risklevel
	}
	return Default_QuestPConfig_Risklevel
}

func (x *QuestPConfig) GetJoblevel() uint32 {
	if x != nil && x.Joblevel != nil {
		return *x.Joblevel
	}
	return Default_QuestPConfig_Joblevel
}

func (x *QuestPConfig) GetCookerLv() uint32 {
	if x != nil && x.CookerLv != nil {
		return *x.CookerLv
	}
	return Default_QuestPConfig_CookerLv
}

func (x *QuestPConfig) GetTasterLv() uint32 {
	if x != nil && x.TasterLv != nil {
		return *x.TasterLv
	}
	return Default_QuestPConfig_TasterLv
}

func (x *QuestPConfig) GetIcon() uint32 {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return Default_QuestPConfig_Icon
}

func (x *QuestPConfig) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return Default_QuestPConfig_Color
}

func (x *QuestPConfig) GetQuestName() string {
	if x != nil && x.QuestName != nil {
		return *x.QuestName
	}
	return ""
}

func (x *QuestPConfig) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *QuestPConfig) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *QuestPConfig) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *QuestPConfig) GetTraceInfo() string {
	if x != nil && x.TraceInfo != nil {
		return *x.TraceInfo
	}
	return ""
}

func (x *QuestPConfig) GetPrefixion() string {
	if x != nil && x.Prefixion != nil {
		return *x.Prefixion
	}
	return ""
}

func (x *QuestPConfig) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *QuestPConfig) GetParams() *ConfigParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *QuestPConfig) GetAllrewardid() []uint32 {
	if x != nil {
		return x.Allrewardid
	}
	return nil
}

func (x *QuestPConfig) GetPreQuest() []uint32 {
	if x != nil {
		return x.PreQuest
	}
	return nil
}

func (x *QuestPConfig) GetMustPreQuest() []uint32 {
	if x != nil {
		return x.MustPreQuest
	}
	return nil
}

func (x *QuestPConfig) GetHeadicon() uint32 {
	if x != nil && x.Headicon != nil {
		return *x.Headicon
	}
	return Default_QuestPConfig_Headicon
}

func (x *QuestPConfig) GetHide() uint32 {
	if x != nil && x.Hide != nil {
		return *x.Hide
	}
	return 0
}

func (x *QuestPConfig) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

type QuestStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process *uint32       `protobuf:"varint,1,opt,name=process,def=0" json:"process,omitempty"`
	Params  []uint64      `protobuf:"varint,2,rep,name=params" json:"params,omitempty"`
	Names   []string      `protobuf:"bytes,3,rep,name=names" json:"names,omitempty"`
	Config  *QuestPConfig `protobuf:"bytes,4,opt,name=config" json:"config,omitempty"`
}

// Default values for QuestStep fields.
const (
	Default_QuestStep_Process = uint32(0)
)

func (x *QuestStep) Reset() {
	*x = QuestStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestStep) ProtoMessage() {}

func (x *QuestStep) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestStep.ProtoReflect.Descriptor instead.
func (*QuestStep) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{1}
}

func (x *QuestStep) GetProcess() uint32 {
	if x != nil && x.Process != nil {
		return *x.Process
	}
	return Default_QuestStep_Process
}

func (x *QuestStep) GetParams() []uint64 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *QuestStep) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *QuestStep) GetConfig() *QuestPConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type QuestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint32      `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Step        *uint32      `protobuf:"varint,2,opt,name=step,def=0" json:"step,omitempty"`
	Time        *uint32      `protobuf:"varint,3,opt,name=time,def=0" json:"time,omitempty"`
	Complete    *bool        `protobuf:"varint,4,opt,name=complete,def=0" json:"complete,omitempty"`
	Trace       *bool        `protobuf:"varint,12,opt,name=trace,def=1" json:"trace,omitempty"`
	Done        *bool        `protobuf:"varint,13,opt,name=done" json:"done,omitempty"`
	Predone     *bool        `protobuf:"varint,14,opt,name=predone" json:"predone,omitempty"`
	Accepttime  *uint32      `protobuf:"varint,15,opt,name=accepttime,def=0" json:"accepttime,omitempty"`
	Steps       []*QuestStep `protobuf:"bytes,5,rep,name=steps" json:"steps,omitempty"`
	Rewards     []*ItemInfo  `protobuf:"bytes,6,rep,name=rewards" json:"rewards,omitempty"`
	Version     *uint32      `protobuf:"varint,7,opt,name=version,def=0" json:"version,omitempty"`
	Acceptlv    *uint32      `protobuf:"varint,8,opt,name=acceptlv,def=0" json:"acceptlv,omitempty"`
	Finishcount *uint32      `protobuf:"varint,9,opt,name=finishcount,def=0" json:"finishcount,omitempty"`
	Params      []uint64     `protobuf:"varint,10,rep,name=params" json:"params,omitempty"`
	Names       []string     `protobuf:"bytes,11,rep,name=names" json:"names,omitempty"`
}

// Default values for QuestData fields.
const (
	Default_QuestData_Id          = uint32(0)
	Default_QuestData_Step        = uint32(0)
	Default_QuestData_Time        = uint32(0)
	Default_QuestData_Complete    = bool(false)
	Default_QuestData_Trace       = bool(true)
	Default_QuestData_Accepttime  = uint32(0)
	Default_QuestData_Version     = uint32(0)
	Default_QuestData_Acceptlv    = uint32(0)
	Default_QuestData_Finishcount = uint32(0)
)

func (x *QuestData) Reset() {
	*x = QuestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestData) ProtoMessage() {}

func (x *QuestData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestData.ProtoReflect.Descriptor instead.
func (*QuestData) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{2}
}

func (x *QuestData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_QuestData_Id
}

func (x *QuestData) GetStep() uint32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return Default_QuestData_Step
}

func (x *QuestData) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_QuestData_Time
}

func (x *QuestData) GetComplete() bool {
	if x != nil && x.Complete != nil {
		return *x.Complete
	}
	return Default_QuestData_Complete
}

func (x *QuestData) GetTrace() bool {
	if x != nil && x.Trace != nil {
		return *x.Trace
	}
	return Default_QuestData_Trace
}

func (x *QuestData) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

func (x *QuestData) GetPredone() bool {
	if x != nil && x.Predone != nil {
		return *x.Predone
	}
	return false
}

func (x *QuestData) GetAccepttime() uint32 {
	if x != nil && x.Accepttime != nil {
		return *x.Accepttime
	}
	return Default_QuestData_Accepttime
}

func (x *QuestData) GetSteps() []*QuestStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *QuestData) GetRewards() []*ItemInfo {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *QuestData) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_QuestData_Version
}

func (x *QuestData) GetAcceptlv() uint32 {
	if x != nil && x.Acceptlv != nil {
		return *x.Acceptlv
	}
	return Default_QuestData_Acceptlv
}

func (x *QuestData) GetFinishcount() uint32 {
	if x != nil && x.Finishcount != nil {
		return *x.Finishcount
	}
	return Default_QuestData_Finishcount
}

func (x *QuestData) GetParams() []uint64 {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *QuestData) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type QuestManualItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *EQuestList        `protobuf:"varint,1,opt,name=type,enum=Cmd.EQuestList,def=1" json:"type,omitempty"`
	Data *QuestData         `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Subs []*QuestManualItem `protobuf:"bytes,3,rep,name=subs" json:"subs,omitempty"`
}

// Default values for QuestManualItem fields.
const (
	Default_QuestManualItem_Type = EQuestList_EQUESTLIST_ACCEPT
)

func (x *QuestManualItem) Reset() {
	*x = QuestManualItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestManualItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestManualItem) ProtoMessage() {}

func (x *QuestManualItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestManualItem.ProtoReflect.Descriptor instead.
func (*QuestManualItem) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{3}
}

func (x *QuestManualItem) GetType() EQuestList {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_QuestManualItem_Type
}

func (x *QuestManualItem) GetData() *QuestData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QuestManualItem) GetSubs() []*QuestManualItem {
	if x != nil {
		return x.Subs
	}
	return nil
}

type QuestShop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid *uint32            `protobuf:"varint,1,opt,name=itemid,def=0" json:"itemid,omitempty"`
	Quests []*QuestManualItem `protobuf:"bytes,2,rep,name=quests" json:"quests,omitempty"`
}

// Default values for QuestShop fields.
const (
	Default_QuestShop_Itemid = uint32(0)
)

func (x *QuestShop) Reset() {
	*x = QuestShop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestShop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestShop) ProtoMessage() {}

func (x *QuestShop) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestShop.ProtoReflect.Descriptor instead.
func (*QuestShop) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{4}
}

func (x *QuestShop) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_QuestShop_Itemid
}

func (x *QuestShop) GetQuests() []*QuestManualItem {
	if x != nil {
		return x.Quests
	}
	return nil
}

type QuestName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *uint32     `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Name *string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type *EQuestList `protobuf:"varint,3,opt,name=type,enum=Cmd.EQuestList,def=0" json:"type,omitempty"`
}

// Default values for QuestName fields.
const (
	Default_QuestName_Id   = uint32(0)
	Default_QuestName_Type = EQuestList_EQUESTLIST_MIN
)

func (x *QuestName) Reset() {
	*x = QuestName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestName) ProtoMessage() {}

func (x *QuestName) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestName.ProtoReflect.Descriptor instead.
func (*QuestName) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{5}
}

func (x *QuestName) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_QuestName_Id
}

func (x *QuestName) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *QuestName) GetType() EQuestList {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_QuestName_Type
}

type QuestPuzzle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        *string  `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	OpenPuzzles    []uint32 `protobuf:"varint,2,rep,name=open_puzzles,json=openPuzzles" json:"open_puzzles,omitempty"`
	UnlockPuzzles  []uint32 `protobuf:"varint,3,rep,name=unlock_puzzles,json=unlockPuzzles" json:"unlock_puzzles,omitempty"`
	CanopenPuzzles []uint32 `protobuf:"varint,4,rep,name=canopen_puzzles,json=canopenPuzzles" json:"canopen_puzzles,omitempty"`
}

func (x *QuestPuzzle) Reset() {
	*x = QuestPuzzle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestPuzzle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestPuzzle) ProtoMessage() {}

func (x *QuestPuzzle) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestPuzzle.ProtoReflect.Descriptor instead.
func (*QuestPuzzle) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{6}
}

func (x *QuestPuzzle) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *QuestPuzzle) GetOpenPuzzles() []uint32 {
	if x != nil {
		return x.OpenPuzzles
	}
	return nil
}

func (x *QuestPuzzle) GetUnlockPuzzles() []uint32 {
	if x != nil {
		return x.UnlockPuzzles
	}
	return nil
}

func (x *QuestPuzzle) GetCanopenPuzzles() []uint32 {
	if x != nil {
		return x.CanopenPuzzles
	}
	return nil
}

type QuestPreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questid     *uint32  `protobuf:"varint,1,opt,name=questid,def=0" json:"questid,omitempty"`
	Name        *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Complete    *bool    `protobuf:"varint,3,opt,name=complete,def=0" json:"complete,omitempty"`
	RewardGroup *uint32  `protobuf:"varint,4,opt,name=RewardGroup,def=0" json:"RewardGroup,omitempty"`
	Allrewardid []uint32 `protobuf:"varint,5,rep,name=allrewardid" json:"allrewardid,omitempty"`
	Index       *uint32  `protobuf:"varint,6,opt,name=index,def=0" json:"index,omitempty"`
}

// Default values for QuestPreview fields.
const (
	Default_QuestPreview_Questid     = uint32(0)
	Default_QuestPreview_Complete    = bool(false)
	Default_QuestPreview_RewardGroup = uint32(0)
	Default_QuestPreview_Index       = uint32(0)
)

func (x *QuestPreview) Reset() {
	*x = QuestPreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestPreview) ProtoMessage() {}

func (x *QuestPreview) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestPreview.ProtoReflect.Descriptor instead.
func (*QuestPreview) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{7}
}

func (x *QuestPreview) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return Default_QuestPreview_Questid
}

func (x *QuestPreview) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *QuestPreview) GetComplete() bool {
	if x != nil && x.Complete != nil {
		return *x.Complete
	}
	return Default_QuestPreview_Complete
}

func (x *QuestPreview) GetRewardGroup() uint32 {
	if x != nil && x.RewardGroup != nil {
		return *x.RewardGroup
	}
	return Default_QuestPreview_RewardGroup
}

func (x *QuestPreview) GetAllrewardid() []uint32 {
	if x != nil {
		return x.Allrewardid
	}
	return nil
}

func (x *QuestPreview) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_QuestPreview_Index
}

type QuestManualMain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items       []*QuestManualItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Puzzle      *QuestPuzzle       `protobuf:"bytes,2,opt,name=puzzle" json:"puzzle,omitempty"`
	Mainstoryid []uint32           `protobuf:"varint,3,rep,name=mainstoryid" json:"mainstoryid,omitempty"`
	Previews    []*QuestPreview    `protobuf:"bytes,4,rep,name=previews" json:"previews,omitempty"`
}

func (x *QuestManualMain) Reset() {
	*x = QuestManualMain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestManualMain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestManualMain) ProtoMessage() {}

func (x *QuestManualMain) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestManualMain.ProtoReflect.Descriptor instead.
func (*QuestManualMain) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{8}
}

func (x *QuestManualMain) GetItems() []*QuestManualItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *QuestManualMain) GetPuzzle() *QuestPuzzle {
	if x != nil {
		return x.Puzzle
	}
	return nil
}

func (x *QuestManualMain) GetMainstoryid() []uint32 {
	if x != nil {
		return x.Mainstoryid
	}
	return nil
}

func (x *QuestManualMain) GetPreviews() []*QuestPreview {
	if x != nil {
		return x.Previews
	}
	return nil
}

type QuestManualBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shops []*QuestShop `protobuf:"bytes,1,rep,name=shops" json:"shops,omitempty"`
}

func (x *QuestManualBranch) Reset() {
	*x = QuestManualBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestManualBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestManualBranch) ProtoMessage() {}

func (x *QuestManualBranch) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestManualBranch.ProtoReflect.Descriptor instead.
func (*QuestManualBranch) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{9}
}

func (x *QuestManualBranch) GetShops() []*QuestShop {
	if x != nil {
		return x.Shops
	}
	return nil
}

type QuestManualStory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Previews  []*QuestPreview `protobuf:"bytes,1,rep,name=previews" json:"previews,omitempty"`
	SubmitIds []uint32        `protobuf:"varint,2,rep,name=submit_ids,json=submitIds" json:"submit_ids,omitempty"`
}

func (x *QuestManualStory) Reset() {
	*x = QuestManualStory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestManualStory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestManualStory) ProtoMessage() {}

func (x *QuestManualStory) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestManualStory.ProtoReflect.Descriptor instead.
func (*QuestManualStory) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{10}
}

func (x *QuestManualStory) GetPreviews() []*QuestPreview {
	if x != nil {
		return x.Previews
	}
	return nil
}

func (x *QuestManualStory) GetSubmitIds() []uint32 {
	if x != nil {
		return x.SubmitIds
	}
	return nil
}

type QuestManual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   *string            `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Main      *QuestManualMain   `protobuf:"bytes,2,opt,name=main" json:"main,omitempty"`
	Branch    *QuestManualBranch `protobuf:"bytes,3,opt,name=branch" json:"branch,omitempty"`
	Story     *QuestManualStory  `protobuf:"bytes,4,opt,name=story" json:"story,omitempty"`
	Prequest  []*QuestName       `protobuf:"bytes,5,rep,name=prequest" json:"prequest,omitempty"`
	Plotvoice []uint32           `protobuf:"varint,6,rep,name=plotvoice" json:"plotvoice,omitempty"`
}

func (x *QuestManual) Reset() {
	*x = QuestManual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestManual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestManual) ProtoMessage() {}

func (x *QuestManual) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestManual.ProtoReflect.Descriptor instead.
func (*QuestManual) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{11}
}

func (x *QuestManual) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *QuestManual) GetMain() *QuestManualMain {
	if x != nil {
		return x.Main
	}
	return nil
}

func (x *QuestManual) GetBranch() *QuestManualBranch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *QuestManual) GetStory() *QuestManualStory {
	if x != nil {
		return x.Story
	}
	return nil
}

func (x *QuestManual) GetPrequest() []*QuestName {
	if x != nil {
		return x.Prequest
	}
	return nil
}

func (x *QuestManual) GetPlotvoice() []uint32 {
	if x != nil {
		return x.Plotvoice
	}
	return nil
}

type QuestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param *QuestParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=1" json:"param,omitempty"`
	Type  *EQuestList  `protobuf:"varint,3,opt,name=type,enum=Cmd.EQuestList,def=1" json:"type,omitempty"`
	Id    *uint32      `protobuf:"varint,4,opt,name=id,def=0" json:"id,omitempty"`
	List  []*QuestData `protobuf:"bytes,5,rep,name=list" json:"list,omitempty"`
	Clear *bool        `protobuf:"varint,6,opt,name=clear,def=0" json:"clear,omitempty"`
}

// Default values for QuestList fields.
const (
	Default_QuestList_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QuestList_Param = QuestParam_QUESTPARAM_QUESTLIST
	Default_QuestList_Type  = EQuestList_EQUESTLIST_ACCEPT
	Default_QuestList_Id    = uint32(0)
	Default_QuestList_Clear = bool(false)
)

func (x *QuestList) Reset() {
	*x = QuestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestList) ProtoMessage() {}

func (x *QuestList) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestList.ProtoReflect.Descriptor instead.
func (*QuestList) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{12}
}

func (x *QuestList) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuestList_Cmd
}

func (x *QuestList) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuestList_Param
}

func (x *QuestList) GetType() EQuestList {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_QuestList_Type
}

func (x *QuestList) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_QuestList_Id
}

func (x *QuestList) GetList() []*QuestData {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *QuestList) GetClear() bool {
	if x != nil && x.Clear != nil {
		return *x.Clear
	}
	return Default_QuestList_Clear
}

type QuestUpdateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update []*QuestData `protobuf:"bytes,1,rep,name=update" json:"update,omitempty"`
	Del    []uint32     `protobuf:"varint,2,rep,name=del" json:"del,omitempty"`
	Type   *EQuestList  `protobuf:"varint,3,opt,name=type,enum=Cmd.EQuestList,def=1" json:"type,omitempty"`
}

// Default values for QuestUpdateItem fields.
const (
	Default_QuestUpdateItem_Type = EQuestList_EQUESTLIST_ACCEPT
)

func (x *QuestUpdateItem) Reset() {
	*x = QuestUpdateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestUpdateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestUpdateItem) ProtoMessage() {}

func (x *QuestUpdateItem) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestUpdateItem.ProtoReflect.Descriptor instead.
func (*QuestUpdateItem) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{13}
}

func (x *QuestUpdateItem) GetUpdate() []*QuestData {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *QuestUpdateItem) GetDel() []uint32 {
	if x != nil {
		return x.Del
	}
	return nil
}

func (x *QuestUpdateItem) GetType() EQuestList {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_QuestUpdateItem_Type
}

type QuestUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command           `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param *QuestParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=2" json:"param,omitempty"`
	Items []*QuestUpdateItem `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for QuestUpdate fields.
const (
	Default_QuestUpdate_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QuestUpdate_Param = QuestParam_QUESTPARAM_QUESTUPDATE
)

func (x *QuestUpdate) Reset() {
	*x = QuestUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestUpdate) ProtoMessage() {}

func (x *QuestUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestUpdate.ProtoReflect.Descriptor instead.
func (*QuestUpdate) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{14}
}

func (x *QuestUpdate) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuestUpdate_Cmd
}

func (x *QuestUpdate) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuestUpdate_Param
}

func (x *QuestUpdate) GetItems() []*QuestUpdateItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type QuestStepUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=5" json:"param,omitempty"`
	Id    *uint32     `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Step  *uint32     `protobuf:"varint,4,opt,name=step,def=0" json:"step,omitempty"`
	Data  *QuestStep  `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
}

// Default values for QuestStepUpdate fields.
const (
	Default_QuestStepUpdate_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QuestStepUpdate_Param = QuestParam_QUESTPARAM_QUESTSTEPUPDATE
	Default_QuestStepUpdate_Id    = uint32(0)
	Default_QuestStepUpdate_Step  = uint32(0)
)

func (x *QuestStepUpdate) Reset() {
	*x = QuestStepUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestStepUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestStepUpdate) ProtoMessage() {}

func (x *QuestStepUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestStepUpdate.ProtoReflect.Descriptor instead.
func (*QuestStepUpdate) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{15}
}

func (x *QuestStepUpdate) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuestStepUpdate_Cmd
}

func (x *QuestStepUpdate) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuestStepUpdate_Param
}

func (x *QuestStepUpdate) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_QuestStepUpdate_Id
}

func (x *QuestStepUpdate) GetStep() uint32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return Default_QuestStepUpdate_Step
}

func (x *QuestStepUpdate) GetData() *QuestStep {
	if x != nil {
		return x.Data
	}
	return nil
}

type QuestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param   *QuestParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=3" json:"param,omitempty"`
	Action  *EQuestAction `protobuf:"varint,3,opt,name=action,enum=Cmd.EQuestAction,def=0" json:"action,omitempty"`
	Questid *uint32       `protobuf:"varint,4,opt,name=questid,def=0" json:"questid,omitempty"`
}

// Default values for QuestAction fields.
const (
	Default_QuestAction_Cmd     = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QuestAction_Param   = QuestParam_QUESTPARAM_QUESTACTION
	Default_QuestAction_Action  = EQuestAction_EQUESTACTION_MIN
	Default_QuestAction_Questid = uint32(0)
)

func (x *QuestAction) Reset() {
	*x = QuestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestAction) ProtoMessage() {}

func (x *QuestAction) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestAction.ProtoReflect.Descriptor instead.
func (*QuestAction) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{16}
}

func (x *QuestAction) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuestAction_Cmd
}

func (x *QuestAction) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuestAction_Param
}

func (x *QuestAction) GetAction() EQuestAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_QuestAction_Action
}

func (x *QuestAction) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return Default_QuestAction_Questid
}

type RunQuestStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param    *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=4" json:"param,omitempty"`
	Questid  *uint32     `protobuf:"varint,3,opt,name=questid,def=0" json:"questid,omitempty"`
	Starid   *uint32     `protobuf:"varint,4,opt,name=starid,def=0" json:"starid,omitempty"`
	Subgroup *uint32     `protobuf:"varint,5,opt,name=subgroup,def=0" json:"subgroup,omitempty"`
	Step     *uint32     `protobuf:"varint,6,opt,name=step,def=0" json:"step,omitempty"`
}

// Default values for RunQuestStep fields.
const (
	Default_RunQuestStep_Cmd      = Command_SCENE_USER_QUEST_PROTOCMD
	Default_RunQuestStep_Param    = QuestParam_QUESTPARAM_RUNQUESTSTEP
	Default_RunQuestStep_Questid  = uint32(0)
	Default_RunQuestStep_Starid   = uint32(0)
	Default_RunQuestStep_Subgroup = uint32(0)
	Default_RunQuestStep_Step     = uint32(0)
)

func (x *RunQuestStep) Reset() {
	*x = RunQuestStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunQuestStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunQuestStep) ProtoMessage() {}

func (x *RunQuestStep) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunQuestStep.ProtoReflect.Descriptor instead.
func (*RunQuestStep) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{17}
}

func (x *RunQuestStep) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_RunQuestStep_Cmd
}

func (x *RunQuestStep) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_RunQuestStep_Param
}

func (x *RunQuestStep) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return Default_RunQuestStep_Questid
}

func (x *RunQuestStep) GetStarid() uint32 {
	if x != nil && x.Starid != nil {
		return *x.Starid
	}
	return Default_RunQuestStep_Starid
}

func (x *RunQuestStep) GetSubgroup() uint32 {
	if x != nil && x.Subgroup != nil {
		return *x.Subgroup
	}
	return Default_RunQuestStep_Subgroup
}

func (x *RunQuestStep) GetStep() uint32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return Default_RunQuestStep_Step
}

type QuestTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param   *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=6" json:"param,omitempty"`
	Questid *uint32     `protobuf:"varint,3,opt,name=questid,def=0" json:"questid,omitempty"`
	Trace   *bool       `protobuf:"varint,4,opt,name=trace,def=0" json:"trace,omitempty"`
}

// Default values for QuestTrace fields.
const (
	Default_QuestTrace_Cmd     = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QuestTrace_Param   = QuestParam_QUESTPARAM_QUESTTRACE
	Default_QuestTrace_Questid = uint32(0)
	Default_QuestTrace_Trace   = bool(false)
)

func (x *QuestTrace) Reset() {
	*x = QuestTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestTrace) ProtoMessage() {}

func (x *QuestTrace) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestTrace.ProtoReflect.Descriptor instead.
func (*QuestTrace) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{18}
}

func (x *QuestTrace) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuestTrace_Cmd
}

func (x *QuestTrace) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuestTrace_Param
}

func (x *QuestTrace) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return Default_QuestTrace_Questid
}

func (x *QuestTrace) GetTrace() bool {
	if x != nil && x.Trace != nil {
		return *x.Trace
	}
	return Default_QuestTrace_Trace
}

type QuestDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32  `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Time     *uint32  `protobuf:"varint,2,opt,name=time,def=0" json:"time,omitempty"`
	Map      *uint32  `protobuf:"varint,3,opt,name=map,def=0" json:"map,omitempty"`
	Complete *bool    `protobuf:"varint,4,opt,name=complete,def=0" json:"complete,omitempty"`
	Trace    *bool    `protobuf:"varint,5,opt,name=trace,def=1" json:"trace,omitempty"`
	Details  []uint32 `protobuf:"varint,6,rep,name=details" json:"details,omitempty"`
}

// Default values for QuestDetail fields.
const (
	Default_QuestDetail_Id       = uint32(0)
	Default_QuestDetail_Time     = uint32(0)
	Default_QuestDetail_Map      = uint32(0)
	Default_QuestDetail_Complete = bool(false)
	Default_QuestDetail_Trace    = bool(true)
)

func (x *QuestDetail) Reset() {
	*x = QuestDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestDetail) ProtoMessage() {}

func (x *QuestDetail) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestDetail.ProtoReflect.Descriptor instead.
func (*QuestDetail) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{19}
}

func (x *QuestDetail) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_QuestDetail_Id
}

func (x *QuestDetail) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_QuestDetail_Time
}

func (x *QuestDetail) GetMap() uint32 {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return Default_QuestDetail_Map
}

func (x *QuestDetail) GetComplete() bool {
	if x != nil && x.Complete != nil {
		return *x.Complete
	}
	return Default_QuestDetail_Complete
}

func (x *QuestDetail) GetTrace() bool {
	if x != nil && x.Trace != nil {
		return *x.Trace
	}
	return Default_QuestDetail_Trace
}

func (x *QuestDetail) GetDetails() []uint32 {
	if x != nil {
		return x.Details
	}
	return nil
}

type QuestDetailList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param   *QuestParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=7" json:"param,omitempty"`
	Details []*QuestDetail `protobuf:"bytes,3,rep,name=details" json:"details,omitempty"`
}

// Default values for QuestDetailList fields.
const (
	Default_QuestDetailList_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QuestDetailList_Param = QuestParam_QUESTPARAM_QUESTDETAILLIST
)

func (x *QuestDetailList) Reset() {
	*x = QuestDetailList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestDetailList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestDetailList) ProtoMessage() {}

func (x *QuestDetailList) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestDetailList.ProtoReflect.Descriptor instead.
func (*QuestDetailList) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{20}
}

func (x *QuestDetailList) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuestDetailList_Cmd
}

func (x *QuestDetailList) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuestDetailList_Param
}

func (x *QuestDetailList) GetDetails() []*QuestDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type QuestDetailUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param  *QuestParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=8" json:"param,omitempty"`
	Detail []*QuestDetail `protobuf:"bytes,3,rep,name=detail" json:"detail,omitempty"`
	Del    []*QuestDetail `protobuf:"bytes,4,rep,name=del" json:"del,omitempty"`
}

// Default values for QuestDetailUpdate fields.
const (
	Default_QuestDetailUpdate_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QuestDetailUpdate_Param = QuestParam_QUESTPARAM_QUESTDETAILUPDATE
)

func (x *QuestDetailUpdate) Reset() {
	*x = QuestDetailUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestDetailUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestDetailUpdate) ProtoMessage() {}

func (x *QuestDetailUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestDetailUpdate.ProtoReflect.Descriptor instead.
func (*QuestDetailUpdate) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{21}
}

func (x *QuestDetailUpdate) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuestDetailUpdate_Cmd
}

func (x *QuestDetailUpdate) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuestDetailUpdate_Param
}

func (x *QuestDetailUpdate) GetDetail() []*QuestDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *QuestDetailUpdate) GetDel() []*QuestDetail {
	if x != nil {
		return x.Del
	}
	return nil
}

type QuestRaidCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param   *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=9" json:"param,omitempty"`
	Questid *uint32     `protobuf:"varint,3,opt,name=questid" json:"questid,omitempty"`
}

// Default values for QuestRaidCmd fields.
const (
	Default_QuestRaidCmd_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QuestRaidCmd_Param = QuestParam_QUESTPARAM_QUESTRAIDCMD
)

func (x *QuestRaidCmd) Reset() {
	*x = QuestRaidCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestRaidCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestRaidCmd) ProtoMessage() {}

func (x *QuestRaidCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestRaidCmd.ProtoReflect.Descriptor instead.
func (*QuestRaidCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{22}
}

func (x *QuestRaidCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuestRaidCmd_Cmd
}

func (x *QuestRaidCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuestRaidCmd_Param
}

func (x *QuestRaidCmd) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return 0
}

type QuestCanAcceptListChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=10" json:"param,omitempty"`
}

// Default values for QuestCanAcceptListChange fields.
const (
	Default_QuestCanAcceptListChange_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QuestCanAcceptListChange_Param = QuestParam_QUESTPARAM_CANACCEPTLISTCHANGED
)

func (x *QuestCanAcceptListChange) Reset() {
	*x = QuestCanAcceptListChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestCanAcceptListChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestCanAcceptListChange) ProtoMessage() {}

func (x *QuestCanAcceptListChange) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestCanAcceptListChange.ProtoReflect.Descriptor instead.
func (*QuestCanAcceptListChange) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{23}
}

func (x *QuestCanAcceptListChange) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuestCanAcceptListChange_Cmd
}

func (x *QuestCanAcceptListChange) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuestCanAcceptListChange_Param
}

type VisitNpcUserCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param     *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=11" json:"param,omitempty"`
	Npctempid *uint64     `protobuf:"varint,3,opt,name=npctempid,def=0" json:"npctempid,omitempty"`
}

// Default values for VisitNpcUserCmd fields.
const (
	Default_VisitNpcUserCmd_Cmd       = Command_SCENE_USER_QUEST_PROTOCMD
	Default_VisitNpcUserCmd_Param     = QuestParam_QUESTPARAM_VISIT_NPC
	Default_VisitNpcUserCmd_Npctempid = uint64(0)
)

func (x *VisitNpcUserCmd) Reset() {
	*x = VisitNpcUserCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisitNpcUserCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisitNpcUserCmd) ProtoMessage() {}

func (x *VisitNpcUserCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisitNpcUserCmd.ProtoReflect.Descriptor instead.
func (*VisitNpcUserCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{24}
}

func (x *VisitNpcUserCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_VisitNpcUserCmd_Cmd
}

func (x *VisitNpcUserCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_VisitNpcUserCmd_Param
}

func (x *VisitNpcUserCmd) GetNpctempid() uint64 {
	if x != nil && x.Npctempid != nil {
		return *x.Npctempid
	}
	return Default_VisitNpcUserCmd_Npctempid
}

type WorldTreasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questid *uint32   `protobuf:"varint,1,opt,name=questid,def=0" json:"questid,omitempty"`
	Npcid   *uint32   `protobuf:"varint,2,opt,name=npcid,def=0" json:"npcid,omitempty"`
	Pos     *ScenePos `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
}

// Default values for WorldTreasure fields.
const (
	Default_WorldTreasure_Questid = uint32(0)
	Default_WorldTreasure_Npcid   = uint32(0)
)

func (x *WorldTreasure) Reset() {
	*x = WorldTreasure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldTreasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldTreasure) ProtoMessage() {}

func (x *WorldTreasure) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldTreasure.ProtoReflect.Descriptor instead.
func (*WorldTreasure) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{25}
}

func (x *WorldTreasure) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return Default_WorldTreasure_Questid
}

func (x *WorldTreasure) GetNpcid() uint32 {
	if x != nil && x.Npcid != nil {
		return *x.Npcid
	}
	return Default_WorldTreasure_Npcid
}

func (x *WorldTreasure) GetPos() *ScenePos {
	if x != nil {
		return x.Pos
	}
	return nil
}

type OtherData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      *EOtherData      `protobuf:"varint,1,opt,name=data,enum=Cmd.EOtherData,def=0" json:"data,omitempty"`
	Param1    *uint32          `protobuf:"varint,2,opt,name=param1,def=0" json:"param1,omitempty"`
	Param2    *uint32          `protobuf:"varint,3,opt,name=param2,def=0" json:"param2,omitempty"`
	Param3    *uint32          `protobuf:"varint,4,opt,name=param3,def=0" json:"param3,omitempty"`
	Param4    *uint32          `protobuf:"varint,5,opt,name=param4,def=0" json:"param4,omitempty"`
	Treasures []*WorldTreasure `protobuf:"bytes,6,rep,name=treasures" json:"treasures,omitempty"`
}

// Default values for OtherData fields.
const (
	Default_OtherData_Data   = EOtherData_EOTHERDATA_MIN
	Default_OtherData_Param1 = uint32(0)
	Default_OtherData_Param2 = uint32(0)
	Default_OtherData_Param3 = uint32(0)
	Default_OtherData_Param4 = uint32(0)
)

func (x *OtherData) Reset() {
	*x = OtherData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherData) ProtoMessage() {}

func (x *OtherData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherData.ProtoReflect.Descriptor instead.
func (*OtherData) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{26}
}

func (x *OtherData) GetData() EOtherData {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return Default_OtherData_Data
}

func (x *OtherData) GetParam1() uint32 {
	if x != nil && x.Param1 != nil {
		return *x.Param1
	}
	return Default_OtherData_Param1
}

func (x *OtherData) GetParam2() uint32 {
	if x != nil && x.Param2 != nil {
		return *x.Param2
	}
	return Default_OtherData_Param2
}

func (x *OtherData) GetParam3() uint32 {
	if x != nil && x.Param3 != nil {
		return *x.Param3
	}
	return Default_OtherData_Param3
}

func (x *OtherData) GetParam4() uint32 {
	if x != nil && x.Param4 != nil {
		return *x.Param4
	}
	return Default_OtherData_Param4
}

func (x *OtherData) GetTreasures() []*WorldTreasure {
	if x != nil {
		return x.Treasures
	}
	return nil
}

type QueryOtherData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=12" json:"param,omitempty"`
	Type  *EOtherData `protobuf:"varint,3,opt,name=type,enum=Cmd.EOtherData,def=0" json:"type,omitempty"`
	Data  *OtherData  `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

// Default values for QueryOtherData fields.
const (
	Default_QueryOtherData_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QueryOtherData_Param = QuestParam_QUESTPARAM_QUERYOTHERDATA
	Default_QueryOtherData_Type  = EOtherData_EOTHERDATA_MIN
)

func (x *QueryOtherData) Reset() {
	*x = QueryOtherData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOtherData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOtherData) ProtoMessage() {}

func (x *QueryOtherData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOtherData.ProtoReflect.Descriptor instead.
func (*QueryOtherData) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{27}
}

func (x *QueryOtherData) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryOtherData_Cmd
}

func (x *QueryOtherData) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryOtherData_Param
}

func (x *QueryOtherData) GetType() EOtherData {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_QueryOtherData_Type
}

func (x *QueryOtherData) GetData() *OtherData {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryWantedInfoQuestCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param    *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=13" json:"param,omitempty"`
	Maxcount *uint32     `protobuf:"varint,3,opt,name=maxcount,def=0" json:"maxcount,omitempty"`
}

// Default values for QueryWantedInfoQuestCmd fields.
const (
	Default_QueryWantedInfoQuestCmd_Cmd      = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QueryWantedInfoQuestCmd_Param    = QuestParam_QUESTPARAM_QUERYWANTEDINFO
	Default_QueryWantedInfoQuestCmd_Maxcount = uint32(0)
)

func (x *QueryWantedInfoQuestCmd) Reset() {
	*x = QueryWantedInfoQuestCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWantedInfoQuestCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWantedInfoQuestCmd) ProtoMessage() {}

func (x *QueryWantedInfoQuestCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWantedInfoQuestCmd.ProtoReflect.Descriptor instead.
func (*QueryWantedInfoQuestCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{28}
}

func (x *QueryWantedInfoQuestCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryWantedInfoQuestCmd_Cmd
}

func (x *QueryWantedInfoQuestCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryWantedInfoQuestCmd_Param
}

func (x *QueryWantedInfoQuestCmd) GetMaxcount() uint32 {
	if x != nil && x.Maxcount != nil {
		return *x.Maxcount
	}
	return Default_QueryWantedInfoQuestCmd_Maxcount
}

type InviteHelpAcceptQuestCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param      *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=14" json:"param,omitempty"`
	Leaderid   *uint64     `protobuf:"varint,3,opt,name=leaderid,def=0" json:"leaderid,omitempty"`
	Questid    *uint32     `protobuf:"varint,4,opt,name=questid,def=0" json:"questid,omitempty"`
	Time       *uint32     `protobuf:"varint,5,opt,name=time,def=0" json:"time,omitempty"`
	Sign       []byte      `protobuf:"bytes,6,opt,name=sign" json:"sign,omitempty"`
	Leadername *string     `protobuf:"bytes,7,opt,name=leadername" json:"leadername,omitempty"`
	Issubmit   *bool       `protobuf:"varint,8,opt,name=issubmit,def=0" json:"issubmit,omitempty"`
}

// Default values for InviteHelpAcceptQuestCmd fields.
const (
	Default_InviteHelpAcceptQuestCmd_Cmd      = Command_SCENE_USER_QUEST_PROTOCMD
	Default_InviteHelpAcceptQuestCmd_Param    = QuestParam_QUESTPARAM_HELP_ACCEPT_INVITE
	Default_InviteHelpAcceptQuestCmd_Leaderid = uint64(0)
	Default_InviteHelpAcceptQuestCmd_Questid  = uint32(0)
	Default_InviteHelpAcceptQuestCmd_Time     = uint32(0)
	Default_InviteHelpAcceptQuestCmd_Issubmit = bool(false)
)

func (x *InviteHelpAcceptQuestCmd) Reset() {
	*x = InviteHelpAcceptQuestCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteHelpAcceptQuestCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteHelpAcceptQuestCmd) ProtoMessage() {}

func (x *InviteHelpAcceptQuestCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteHelpAcceptQuestCmd.ProtoReflect.Descriptor instead.
func (*InviteHelpAcceptQuestCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{29}
}

func (x *InviteHelpAcceptQuestCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InviteHelpAcceptQuestCmd_Cmd
}

func (x *InviteHelpAcceptQuestCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InviteHelpAcceptQuestCmd_Param
}

func (x *InviteHelpAcceptQuestCmd) GetLeaderid() uint64 {
	if x != nil && x.Leaderid != nil {
		return *x.Leaderid
	}
	return Default_InviteHelpAcceptQuestCmd_Leaderid
}

func (x *InviteHelpAcceptQuestCmd) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return Default_InviteHelpAcceptQuestCmd_Questid
}

func (x *InviteHelpAcceptQuestCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_InviteHelpAcceptQuestCmd_Time
}

func (x *InviteHelpAcceptQuestCmd) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *InviteHelpAcceptQuestCmd) GetLeadername() string {
	if x != nil && x.Leadername != nil {
		return *x.Leadername
	}
	return ""
}

func (x *InviteHelpAcceptQuestCmd) GetIssubmit() bool {
	if x != nil && x.Issubmit != nil {
		return *x.Issubmit
	}
	return Default_InviteHelpAcceptQuestCmd_Issubmit
}

type InviteAcceptQuestCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param         *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=16" json:"param,omitempty"`
	Leaderid      *uint64     `protobuf:"varint,3,opt,name=leaderid,def=0" json:"leaderid,omitempty"`
	Questid       *uint32     `protobuf:"varint,4,opt,name=questid,def=0" json:"questid,omitempty"`
	Time          *uint32     `protobuf:"varint,5,opt,name=time,def=0" json:"time,omitempty"`
	Sign          []byte      `protobuf:"bytes,6,opt,name=sign" json:"sign,omitempty"`
	Leadername    *string     `protobuf:"bytes,7,opt,name=leadername" json:"leadername,omitempty"`
	Issubmit      *bool       `protobuf:"varint,8,opt,name=issubmit,def=0" json:"issubmit,omitempty"`
	Isquickfinish *bool       `protobuf:"varint,9,opt,name=isquickfinish,def=0" json:"isquickfinish,omitempty"`
}

// Default values for InviteAcceptQuestCmd fields.
const (
	Default_InviteAcceptQuestCmd_Cmd           = Command_SCENE_USER_QUEST_PROTOCMD
	Default_InviteAcceptQuestCmd_Param         = QuestParam_QUESTPARAM_INVITE_ACCEPT_QUEST
	Default_InviteAcceptQuestCmd_Leaderid      = uint64(0)
	Default_InviteAcceptQuestCmd_Questid       = uint32(0)
	Default_InviteAcceptQuestCmd_Time          = uint32(0)
	Default_InviteAcceptQuestCmd_Issubmit      = bool(false)
	Default_InviteAcceptQuestCmd_Isquickfinish = bool(false)
)

func (x *InviteAcceptQuestCmd) Reset() {
	*x = InviteAcceptQuestCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteAcceptQuestCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteAcceptQuestCmd) ProtoMessage() {}

func (x *InviteAcceptQuestCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteAcceptQuestCmd.ProtoReflect.Descriptor instead.
func (*InviteAcceptQuestCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{30}
}

func (x *InviteAcceptQuestCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_InviteAcceptQuestCmd_Cmd
}

func (x *InviteAcceptQuestCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_InviteAcceptQuestCmd_Param
}

func (x *InviteAcceptQuestCmd) GetLeaderid() uint64 {
	if x != nil && x.Leaderid != nil {
		return *x.Leaderid
	}
	return Default_InviteAcceptQuestCmd_Leaderid
}

func (x *InviteAcceptQuestCmd) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return Default_InviteAcceptQuestCmd_Questid
}

func (x *InviteAcceptQuestCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_InviteAcceptQuestCmd_Time
}

func (x *InviteAcceptQuestCmd) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *InviteAcceptQuestCmd) GetLeadername() string {
	if x != nil && x.Leadername != nil {
		return *x.Leadername
	}
	return ""
}

func (x *InviteAcceptQuestCmd) GetIssubmit() bool {
	if x != nil && x.Issubmit != nil {
		return *x.Issubmit
	}
	return Default_InviteAcceptQuestCmd_Issubmit
}

func (x *InviteAcceptQuestCmd) GetIsquickfinish() bool {
	if x != nil && x.Isquickfinish != nil {
		return *x.Isquickfinish
	}
	return Default_InviteAcceptQuestCmd_Isquickfinish
}

type ReplyHelpAccelpQuestCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param    *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=15" json:"param,omitempty"`
	Leaderid *uint64     `protobuf:"varint,3,opt,name=leaderid,def=0" json:"leaderid,omitempty"`
	Questid  *uint32     `protobuf:"varint,4,opt,name=questid,def=0" json:"questid,omitempty"`
	Time     *uint32     `protobuf:"varint,5,opt,name=time,def=0" json:"time,omitempty"`
	Sign     []byte      `protobuf:"bytes,6,opt,name=sign" json:"sign,omitempty"`
	Agree    *bool       `protobuf:"varint,7,opt,name=agree,def=0" json:"agree,omitempty"`
	Issubmit *bool       `protobuf:"varint,8,opt,name=issubmit,def=0" json:"issubmit,omitempty"`
}

// Default values for ReplyHelpAccelpQuestCmd fields.
const (
	Default_ReplyHelpAccelpQuestCmd_Cmd      = Command_SCENE_USER_QUEST_PROTOCMD
	Default_ReplyHelpAccelpQuestCmd_Param    = QuestParam_QUESTPARAM_HELP_ACCEPT_AGREE
	Default_ReplyHelpAccelpQuestCmd_Leaderid = uint64(0)
	Default_ReplyHelpAccelpQuestCmd_Questid  = uint32(0)
	Default_ReplyHelpAccelpQuestCmd_Time     = uint32(0)
	Default_ReplyHelpAccelpQuestCmd_Agree    = bool(false)
	Default_ReplyHelpAccelpQuestCmd_Issubmit = bool(false)
)

func (x *ReplyHelpAccelpQuestCmd) Reset() {
	*x = ReplyHelpAccelpQuestCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyHelpAccelpQuestCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyHelpAccelpQuestCmd) ProtoMessage() {}

func (x *ReplyHelpAccelpQuestCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyHelpAccelpQuestCmd.ProtoReflect.Descriptor instead.
func (*ReplyHelpAccelpQuestCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{31}
}

func (x *ReplyHelpAccelpQuestCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ReplyHelpAccelpQuestCmd_Cmd
}

func (x *ReplyHelpAccelpQuestCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ReplyHelpAccelpQuestCmd_Param
}

func (x *ReplyHelpAccelpQuestCmd) GetLeaderid() uint64 {
	if x != nil && x.Leaderid != nil {
		return *x.Leaderid
	}
	return Default_ReplyHelpAccelpQuestCmd_Leaderid
}

func (x *ReplyHelpAccelpQuestCmd) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return Default_ReplyHelpAccelpQuestCmd_Questid
}

func (x *ReplyHelpAccelpQuestCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_ReplyHelpAccelpQuestCmd_Time
}

func (x *ReplyHelpAccelpQuestCmd) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *ReplyHelpAccelpQuestCmd) GetAgree() bool {
	if x != nil && x.Agree != nil {
		return *x.Agree
	}
	return Default_ReplyHelpAccelpQuestCmd_Agree
}

func (x *ReplyHelpAccelpQuestCmd) GetIssubmit() bool {
	if x != nil && x.Issubmit != nil {
		return *x.Issubmit
	}
	return Default_ReplyHelpAccelpQuestCmd_Issubmit
}

type WorldQuest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapid      *uint32 `protobuf:"varint,1,opt,name=mapid,def=0" json:"mapid,omitempty"`
	TypeMain   *bool   `protobuf:"varint,2,opt,name=type_main,json=typeMain,def=0" json:"type_main,omitempty"`
	TypeBranch *bool   `protobuf:"varint,3,opt,name=type_branch,json=typeBranch,def=0" json:"type_branch,omitempty"`
	TypeDaily  *bool   `protobuf:"varint,4,opt,name=type_daily,json=typeDaily,def=0" json:"type_daily,omitempty"`
}

// Default values for WorldQuest fields.
const (
	Default_WorldQuest_Mapid      = uint32(0)
	Default_WorldQuest_TypeMain   = bool(false)
	Default_WorldQuest_TypeBranch = bool(false)
	Default_WorldQuest_TypeDaily  = bool(false)
)

func (x *WorldQuest) Reset() {
	*x = WorldQuest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldQuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldQuest) ProtoMessage() {}

func (x *WorldQuest) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldQuest.ProtoReflect.Descriptor instead.
func (*WorldQuest) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{32}
}

func (x *WorldQuest) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_WorldQuest_Mapid
}

func (x *WorldQuest) GetTypeMain() bool {
	if x != nil && x.TypeMain != nil {
		return *x.TypeMain
	}
	return Default_WorldQuest_TypeMain
}

func (x *WorldQuest) GetTypeBranch() bool {
	if x != nil && x.TypeBranch != nil {
		return *x.TypeBranch
	}
	return Default_WorldQuest_TypeBranch
}

func (x *WorldQuest) GetTypeDaily() bool {
	if x != nil && x.TypeDaily != nil {
		return *x.TypeDaily
	}
	return Default_WorldQuest_TypeDaily
}

type QueryWorldQuestCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param  *QuestParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=17" json:"param,omitempty"`
	Quests []*WorldQuest `protobuf:"bytes,3,rep,name=quests" json:"quests,omitempty"`
}

// Default values for QueryWorldQuestCmd fields.
const (
	Default_QueryWorldQuestCmd_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QueryWorldQuestCmd_Param = QuestParam_QUESTPARAM_QUERY_WORLD_QUEST
)

func (x *QueryWorldQuestCmd) Reset() {
	*x = QueryWorldQuestCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryWorldQuestCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryWorldQuestCmd) ProtoMessage() {}

func (x *QueryWorldQuestCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryWorldQuestCmd.ProtoReflect.Descriptor instead.
func (*QueryWorldQuestCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{33}
}

func (x *QueryWorldQuestCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryWorldQuestCmd_Cmd
}

func (x *QueryWorldQuestCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryWorldQuestCmd_Param
}

func (x *QueryWorldQuestCmd) GetQuests() []*WorldQuest {
	if x != nil {
		return x.Quests
	}
	return nil
}

type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *uint32 `protobuf:"varint,3,opt,name=id,def=0" json:"id,omitempty"`
	Trace *bool   `protobuf:"varint,4,opt,name=trace,def=0" json:"trace,omitempty"`
}

// Default values for Trace fields.
const (
	Default_Trace_Id    = uint32(0)
	Default_Trace_Trace = bool(false)
)

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{34}
}

func (x *Trace) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_Trace_Id
}

func (x *Trace) GetTrace() bool {
	if x != nil && x.Trace != nil {
		return *x.Trace
	}
	return Default_Trace_Trace
}

type QuestGroupTraceQuestCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param  *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=18" json:"param,omitempty"`
	Traces []*Trace    `protobuf:"bytes,3,rep,name=traces" json:"traces,omitempty"`
}

// Default values for QuestGroupTraceQuestCmd fields.
const (
	Default_QuestGroupTraceQuestCmd_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QuestGroupTraceQuestCmd_Param = QuestParam_QUESTPARAM_QUESTGROUP_TRACE
)

func (x *QuestGroupTraceQuestCmd) Reset() {
	*x = QuestGroupTraceQuestCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestGroupTraceQuestCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestGroupTraceQuestCmd) ProtoMessage() {}

func (x *QuestGroupTraceQuestCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestGroupTraceQuestCmd.ProtoReflect.Descriptor instead.
func (*QuestGroupTraceQuestCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{35}
}

func (x *QuestGroupTraceQuestCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuestGroupTraceQuestCmd_Cmd
}

func (x *QuestGroupTraceQuestCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuestGroupTraceQuestCmd_Param
}

func (x *QuestGroupTraceQuestCmd) GetTraces() []*Trace {
	if x != nil {
		return x.Traces
	}
	return nil
}

type HelpQuickFinishBoardQuestCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param      *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=19" json:"param,omitempty"`
	Questid    *uint32     `protobuf:"varint,3,opt,name=questid,def=0" json:"questid,omitempty"`
	Leadername *string     `protobuf:"bytes,4,opt,name=leadername" json:"leadername,omitempty"`
}

// Default values for HelpQuickFinishBoardQuestCmd fields.
const (
	Default_HelpQuickFinishBoardQuestCmd_Cmd     = Command_SCENE_USER_QUEST_PROTOCMD
	Default_HelpQuickFinishBoardQuestCmd_Param   = QuestParam_QUESTPARAM_HELP_QUICK_FINISH_BOARD
	Default_HelpQuickFinishBoardQuestCmd_Questid = uint32(0)
)

func (x *HelpQuickFinishBoardQuestCmd) Reset() {
	*x = HelpQuickFinishBoardQuestCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelpQuickFinishBoardQuestCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelpQuickFinishBoardQuestCmd) ProtoMessage() {}

func (x *HelpQuickFinishBoardQuestCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelpQuickFinishBoardQuestCmd.ProtoReflect.Descriptor instead.
func (*HelpQuickFinishBoardQuestCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{36}
}

func (x *HelpQuickFinishBoardQuestCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_HelpQuickFinishBoardQuestCmd_Cmd
}

func (x *HelpQuickFinishBoardQuestCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_HelpQuickFinishBoardQuestCmd_Param
}

func (x *HelpQuickFinishBoardQuestCmd) GetQuestid() uint32 {
	if x != nil && x.Questid != nil {
		return *x.Questid
	}
	return Default_HelpQuickFinishBoardQuestCmd_Questid
}

func (x *HelpQuickFinishBoardQuestCmd) GetLeadername() string {
	if x != nil && x.Leadername != nil {
		return *x.Leadername
	}
	return ""
}

type QueryManualQuestCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param   *QuestParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=21" json:"param,omitempty"`
	Version *string      `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Manual  *QuestManual `protobuf:"bytes,4,opt,name=manual" json:"manual,omitempty"`
}

// Default values for QueryManualQuestCmd fields.
const (
	Default_QueryManualQuestCmd_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QueryManualQuestCmd_Param = QuestParam_QUESTPARAM_QUERY_MANUAL
)

func (x *QueryManualQuestCmd) Reset() {
	*x = QueryManualQuestCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryManualQuestCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryManualQuestCmd) ProtoMessage() {}

func (x *QueryManualQuestCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryManualQuestCmd.ProtoReflect.Descriptor instead.
func (*QueryManualQuestCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{37}
}

func (x *QueryManualQuestCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryManualQuestCmd_Cmd
}

func (x *QueryManualQuestCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryManualQuestCmd_Param
}

func (x *QueryManualQuestCmd) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *QueryManualQuestCmd) GetManual() *QuestManual {
	if x != nil {
		return x.Manual
	}
	return nil
}

type OpenPuzzleQuestCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param   *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=22" json:"param,omitempty"`
	Version *string     `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Id      *uint32     `protobuf:"varint,4,opt,name=id,def=0" json:"id,omitempty"`
}

// Default values for OpenPuzzleQuestCmd fields.
const (
	Default_OpenPuzzleQuestCmd_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_OpenPuzzleQuestCmd_Param = QuestParam_QUESTPARAM_OPEN_PUZZLE
	Default_OpenPuzzleQuestCmd_Id    = uint32(0)
)

func (x *OpenPuzzleQuestCmd) Reset() {
	*x = OpenPuzzleQuestCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenPuzzleQuestCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenPuzzleQuestCmd) ProtoMessage() {}

func (x *OpenPuzzleQuestCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenPuzzleQuestCmd.ProtoReflect.Descriptor instead.
func (*OpenPuzzleQuestCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{38}
}

func (x *OpenPuzzleQuestCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_OpenPuzzleQuestCmd_Cmd
}

func (x *OpenPuzzleQuestCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_OpenPuzzleQuestCmd_Param
}

func (x *OpenPuzzleQuestCmd) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *OpenPuzzleQuestCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_OpenPuzzleQuestCmd_Id
}

type QuestManualFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32    `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Finishid []uint32   `protobuf:"varint,2,rep,name=finishid" json:"finishid,omitempty"`
	Name     *string    `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Mapid    *uint32    `protobuf:"varint,4,opt,name=mapid,def=0" json:"mapid,omitempty"`
	Data     *QuestData `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
}

// Default values for QuestManualFunction fields.
const (
	Default_QuestManualFunction_Id    = uint32(0)
	Default_QuestManualFunction_Mapid = uint32(0)
)

func (x *QuestManualFunction) Reset() {
	*x = QuestManualFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestManualFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestManualFunction) ProtoMessage() {}

func (x *QuestManualFunction) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestManualFunction.ProtoReflect.Descriptor instead.
func (*QuestManualFunction) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{39}
}

func (x *QuestManualFunction) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_QuestManualFunction_Id
}

func (x *QuestManualFunction) GetFinishid() []uint32 {
	if x != nil {
		return x.Finishid
	}
	return nil
}

func (x *QuestManualFunction) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *QuestManualFunction) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_QuestManualFunction_Mapid
}

func (x *QuestManualFunction) GetData() *QuestData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ManualFunctionQuestCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command               `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param *QuestParam            `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=23" json:"param,omitempty"`
	Items []*QuestManualFunction `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for ManualFunctionQuestCmd fields.
const (
	Default_ManualFunctionQuestCmd_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_ManualFunctionQuestCmd_Param = QuestParam_QUESTPARAM_MANUAL_FUNCTION
)

func (x *ManualFunctionQuestCmd) Reset() {
	*x = ManualFunctionQuestCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualFunctionQuestCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualFunctionQuestCmd) ProtoMessage() {}

func (x *ManualFunctionQuestCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualFunctionQuestCmd.ProtoReflect.Descriptor instead.
func (*ManualFunctionQuestCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{40}
}

func (x *ManualFunctionQuestCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ManualFunctionQuestCmd_Cmd
}

func (x *ManualFunctionQuestCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ManualFunctionQuestCmd_Param
}

func (x *ManualFunctionQuestCmd) GetItems() []*QuestManualFunction {
	if x != nil {
		return x.Items
	}
	return nil
}

type QueryQuestListQuestCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command     `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param *QuestParam  `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=24" json:"param,omitempty"`
	Mapid *uint32      `protobuf:"varint,3,opt,name=mapid,def=0" json:"mapid,omitempty"`
	Datas []*QuestData `protobuf:"bytes,4,rep,name=datas" json:"datas,omitempty"`
}

// Default values for QueryQuestListQuestCmd fields.
const (
	Default_QueryQuestListQuestCmd_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QueryQuestListQuestCmd_Param = QuestParam_QUESTPARAM_QUERY_QUESTLIST
	Default_QueryQuestListQuestCmd_Mapid = uint32(0)
)

func (x *QueryQuestListQuestCmd) Reset() {
	*x = QueryQuestListQuestCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryQuestListQuestCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryQuestListQuestCmd) ProtoMessage() {}

func (x *QueryQuestListQuestCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryQuestListQuestCmd.ProtoReflect.Descriptor instead.
func (*QueryQuestListQuestCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{41}
}

func (x *QueryQuestListQuestCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryQuestListQuestCmd_Cmd
}

func (x *QueryQuestListQuestCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryQuestListQuestCmd_Param
}

func (x *QueryQuestListQuestCmd) GetMapid() uint32 {
	if x != nil && x.Mapid != nil {
		return *x.Mapid
	}
	return Default_QueryQuestListQuestCmd_Mapid
}

func (x *QueryQuestListQuestCmd) GetDatas() []*QuestData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type MapStepSyncCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param  *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=25" json:"param,omitempty"`
	Stepid []uint32    `protobuf:"varint,3,rep,name=stepid" json:"stepid,omitempty"`
}

// Default values for MapStepSyncCmd fields.
const (
	Default_MapStepSyncCmd_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_MapStepSyncCmd_Param = QuestParam_QUESTPARAM_MAPSTEP_SYNC
)

func (x *MapStepSyncCmd) Reset() {
	*x = MapStepSyncCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStepSyncCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStepSyncCmd) ProtoMessage() {}

func (x *MapStepSyncCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStepSyncCmd.ProtoReflect.Descriptor instead.
func (*MapStepSyncCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{42}
}

func (x *MapStepSyncCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MapStepSyncCmd_Cmd
}

func (x *MapStepSyncCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MapStepSyncCmd_Param
}

func (x *MapStepSyncCmd) GetStepid() []uint32 {
	if x != nil {
		return x.Stepid
	}
	return nil
}

type MapStepUpdateCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param     *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=26" json:"param,omitempty"`
	DelStepid []uint32    `protobuf:"varint,3,rep,name=del_stepid,json=delStepid" json:"del_stepid,omitempty"`
	AddStepid []uint32    `protobuf:"varint,4,rep,name=add_stepid,json=addStepid" json:"add_stepid,omitempty"`
}

// Default values for MapStepUpdateCmd fields.
const (
	Default_MapStepUpdateCmd_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_MapStepUpdateCmd_Param = QuestParam_QUESTPARAM_MAPSTEP_UPDATE
)

func (x *MapStepUpdateCmd) Reset() {
	*x = MapStepUpdateCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStepUpdateCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStepUpdateCmd) ProtoMessage() {}

func (x *MapStepUpdateCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStepUpdateCmd.ProtoReflect.Descriptor instead.
func (*MapStepUpdateCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{43}
}

func (x *MapStepUpdateCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MapStepUpdateCmd_Cmd
}

func (x *MapStepUpdateCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MapStepUpdateCmd_Param
}

func (x *MapStepUpdateCmd) GetDelStepid() []uint32 {
	if x != nil {
		return x.DelStepid
	}
	return nil
}

func (x *MapStepUpdateCmd) GetAddStepid() []uint32 {
	if x != nil {
		return x.AddStepid
	}
	return nil
}

type MapStepFinishCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param      *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=27" json:"param,omitempty"`
	Stepid     *uint32     `protobuf:"varint,3,opt,name=stepid" json:"stepid,omitempty"`
	OptionJump *uint32     `protobuf:"varint,4,opt,name=option_jump,json=optionJump" json:"option_jump,omitempty"`
}

// Default values for MapStepFinishCmd fields.
const (
	Default_MapStepFinishCmd_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_MapStepFinishCmd_Param = QuestParam_QUESTPARAM_MAPSTEP_FINISH
)

func (x *MapStepFinishCmd) Reset() {
	*x = MapStepFinishCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStepFinishCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStepFinishCmd) ProtoMessage() {}

func (x *MapStepFinishCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStepFinishCmd.ProtoReflect.Descriptor instead.
func (*MapStepFinishCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{44}
}

func (x *MapStepFinishCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_MapStepFinishCmd_Cmd
}

func (x *MapStepFinishCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_MapStepFinishCmd_Param
}

func (x *MapStepFinishCmd) GetStepid() uint32 {
	if x != nil && x.Stepid != nil {
		return *x.Stepid
	}
	return 0
}

func (x *MapStepFinishCmd) GetOptionJump() uint32 {
	if x != nil && x.OptionJump != nil {
		return *x.OptionJump
	}
	return 0
}

type PlotStatusNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param   *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=29" json:"param,omitempty"`
	Isstart *bool       `protobuf:"varint,3,opt,name=isstart" json:"isstart,omitempty"`
	Id      *uint32     `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
}

// Default values for PlotStatusNtf fields.
const (
	Default_PlotStatusNtf_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_PlotStatusNtf_Param = QuestParam_QUESTPARAM_PLOT_STATUS_NTF
)

func (x *PlotStatusNtf) Reset() {
	*x = PlotStatusNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlotStatusNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlotStatusNtf) ProtoMessage() {}

func (x *PlotStatusNtf) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlotStatusNtf.ProtoReflect.Descriptor instead.
func (*PlotStatusNtf) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{45}
}

func (x *PlotStatusNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PlotStatusNtf_Cmd
}

func (x *PlotStatusNtf) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PlotStatusNtf_Param
}

func (x *PlotStatusNtf) GetIsstart() bool {
	if x != nil && x.Isstart != nil {
		return *x.Isstart
	}
	return false
}

func (x *PlotStatusNtf) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type QuestAreaAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command    `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param    *QuestParam `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=28" json:"param,omitempty"`
	Configid *uint32     `protobuf:"varint,3,opt,name=configid" json:"configid,omitempty"`
}

// Default values for QuestAreaAction fields.
const (
	Default_QuestAreaAction_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QuestAreaAction_Param = QuestParam_QUESTPARAM_AREA_ACTION
)

func (x *QuestAreaAction) Reset() {
	*x = QuestAreaAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestAreaAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestAreaAction) ProtoMessage() {}

func (x *QuestAreaAction) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestAreaAction.ProtoReflect.Descriptor instead.
func (*QuestAreaAction) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{46}
}

func (x *QuestAreaAction) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QuestAreaAction_Cmd
}

func (x *QuestAreaAction) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QuestAreaAction_Param
}

func (x *QuestAreaAction) GetConfigid() uint32 {
	if x != nil && x.Configid != nil {
		return *x.Configid
	}
	return 0
}

type BottleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bottleid *uint32        `protobuf:"varint,1,opt,name=bottleid" json:"bottleid,omitempty"`
	Status   *EBottleStatus `protobuf:"varint,2,opt,name=status,enum=Cmd.EBottleStatus" json:"status,omitempty"`
}

func (x *BottleData) Reset() {
	*x = BottleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BottleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BottleData) ProtoMessage() {}

func (x *BottleData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BottleData.ProtoReflect.Descriptor instead.
func (*BottleData) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{47}
}

func (x *BottleData) GetBottleid() uint32 {
	if x != nil && x.Bottleid != nil {
		return *x.Bottleid
	}
	return 0
}

func (x *BottleData) GetStatus() EBottleStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return EBottleStatus_EBOTTLESTATUS_MIN
}

type QueryBottleInfoQuestCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param   *QuestParam   `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=30" json:"param,omitempty"`
	Accepts []*BottleData `protobuf:"bytes,3,rep,name=accepts" json:"accepts,omitempty"`
	Finishs []*BottleData `protobuf:"bytes,4,rep,name=finishs" json:"finishs,omitempty"`
}

// Default values for QueryBottleInfoQuestCmd fields.
const (
	Default_QueryBottleInfoQuestCmd_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_QueryBottleInfoQuestCmd_Param = QuestParam_QUESTPARAM_BOTTLE_QUERY
)

func (x *QueryBottleInfoQuestCmd) Reset() {
	*x = QueryBottleInfoQuestCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBottleInfoQuestCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBottleInfoQuestCmd) ProtoMessage() {}

func (x *QueryBottleInfoQuestCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBottleInfoQuestCmd.ProtoReflect.Descriptor instead.
func (*QueryBottleInfoQuestCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{48}
}

func (x *QueryBottleInfoQuestCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryBottleInfoQuestCmd_Cmd
}

func (x *QueryBottleInfoQuestCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryBottleInfoQuestCmd_Param
}

func (x *QueryBottleInfoQuestCmd) GetAccepts() []*BottleData {
	if x != nil {
		return x.Accepts
	}
	return nil
}

func (x *QueryBottleInfoQuestCmd) GetFinishs() []*BottleData {
	if x != nil {
		return x.Finishs
	}
	return nil
}

type BottleActionQuestCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param  *QuestParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=31" json:"param,omitempty"`
	Action *EBottleAction `protobuf:"varint,3,opt,name=action,enum=Cmd.EBottleAction" json:"action,omitempty"`
	Id     *uint32        `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
}

// Default values for BottleActionQuestCmd fields.
const (
	Default_BottleActionQuestCmd_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_BottleActionQuestCmd_Param = QuestParam_QUESTPARAM_BOTTLE_ACTION
)

func (x *BottleActionQuestCmd) Reset() {
	*x = BottleActionQuestCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BottleActionQuestCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BottleActionQuestCmd) ProtoMessage() {}

func (x *BottleActionQuestCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BottleActionQuestCmd.ProtoReflect.Descriptor instead.
func (*BottleActionQuestCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{49}
}

func (x *BottleActionQuestCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BottleActionQuestCmd_Cmd
}

func (x *BottleActionQuestCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BottleActionQuestCmd_Param
}

func (x *BottleActionQuestCmd) GetAction() EBottleAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return EBottleAction_EBOTTLEACTION_MIN
}

func (x *BottleActionQuestCmd) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type BottleUpdateQuestCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=8" json:"cmd,omitempty"`
	Param   *QuestParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.QuestParam,def=32" json:"param,omitempty"`
	Status  *EBottleStatus `protobuf:"varint,3,opt,name=status,enum=Cmd.EBottleStatus" json:"status,omitempty"`
	Updates []*BottleData  `protobuf:"bytes,4,rep,name=updates" json:"updates,omitempty"`
	Delids  []uint32       `protobuf:"varint,5,rep,name=delids" json:"delids,omitempty"`
}

// Default values for BottleUpdateQuestCmd fields.
const (
	Default_BottleUpdateQuestCmd_Cmd   = Command_SCENE_USER_QUEST_PROTOCMD
	Default_BottleUpdateQuestCmd_Param = QuestParam_QUESTPARAM_BOTTLE_UPDATE
)

func (x *BottleUpdateQuestCmd) Reset() {
	*x = BottleUpdateQuestCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneQuest_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BottleUpdateQuestCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BottleUpdateQuestCmd) ProtoMessage() {}

func (x *BottleUpdateQuestCmd) ProtoReflect() protoreflect.Message {
	mi := &file_SceneQuest_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BottleUpdateQuestCmd.ProtoReflect.Descriptor instead.
func (*BottleUpdateQuestCmd) Descriptor() ([]byte, []int) {
	return file_SceneQuest_proto_rawDescGZIP(), []int{50}
}

func (x *BottleUpdateQuestCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_BottleUpdateQuestCmd_Cmd
}

func (x *BottleUpdateQuestCmd) GetParam() QuestParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_BottleUpdateQuestCmd_Param
}

func (x *BottleUpdateQuestCmd) GetStatus() EBottleStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return EBottleStatus_EBOTTLESTATUS_MIN
}

func (x *BottleUpdateQuestCmd) GetUpdates() []*BottleData {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *BottleUpdateQuestCmd) GetDelids() []uint32 {
	if x != nil {
		return x.Delids
	}
	return nil
}

var File_SceneQuest_proto protoreflect.FileDescriptor

var file_SceneQuest_proto_rawDesc = []byte{
	0x0a, 0x10, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x07, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x0a,
	0x08, 0x53, 0x75, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x08, 0x53, 0x75, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0a,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4a, 0x75, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4a, 0x75, 0x6d, 0x70, 0x12,
	0x1d, 0x0a, 0x08, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x75, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x46, 0x61, 0x69, 0x6c, 0x4a, 0x75, 0x6d, 0x70, 0x12, 0x13,
	0x0a, 0x03, 0x4d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03,
	0x4d, 0x61, 0x70, 0x12, 0x25, 0x0a, 0x0c, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x57, 0x68,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x04, 0x41, 0x75,
	0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x41, 0x75, 0x74,
	0x6f, 0x12, 0x21, 0x0a, 0x0a, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x17, 0x0a,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x4e, 0x6f, 0x53,
	0x68, 0x6f, 0x77, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x50, 0x72,
	0x65, 0x4e, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x09, 0x52, 0x69, 0x73, 0x6b, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x52,
	0x69, 0x73, 0x6b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x4a,
	0x6f, 0x62, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x43, 0x6f, 0x6f, 0x6b, 0x65,
	0x72, 0x4c, 0x76, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x43, 0x6f,
	0x6f, 0x6b, 0x65, 0x72, 0x4c, 0x76, 0x12, 0x1d, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x76, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x54, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x76, 0x12, 0x15, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x05,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x69, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x72, 0x65, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x75, 0x73, 0x74, 0x50, 0x72, 0x65, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x4d, 0x75, 0x73, 0x74, 0x50,
	0x72, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x48, 0x65, 0x61, 0x64, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x48, 0x65,
	0x61, 0x64, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x69, 0x64, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x48, 0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x09, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xba,
	0x03, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x11, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x15, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x6c, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x6c, 0x76, 0x12, 0x23, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x11,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50,
	0x54, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x73,
	0x75, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x73, 0x75, 0x62, 0x73, 0x22, 0x54, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x73, 0x74, 0x53, 0x68,
	0x6f, 0x70, 0x12, 0x19, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x67, 0x0a, 0x09, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x0e,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x75,
	0x7a, 0x7a, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x75, 0x7a, 0x7a,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65,
	0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x1b, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x6c, 0x6c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb8, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x75, 0x7a, 0x7a, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x22, 0x39, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x70, 0x73, 0x22, 0x60, 0x0a, 0x10,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x2d, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x73, 0x22, 0xf8,
	0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x52, 0x04, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x2a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x6c, 0x6f, 0x74, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x6c, 0x6f, 0x74, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x09, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x14, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x11,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50,
	0x54, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x26, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x11, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x65, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65,
	0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x16, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x3b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x51, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x0c,
	0x52, 0x75, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x39, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x52, 0x55, 0x4e, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x72, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x75, 0x62, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x15,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0xbf, 0x01, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3c, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x15, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x54, 0x52, 0x41, 0x43, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a,
	0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x05, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x13, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x21, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x05, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x05,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0xbb, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x2a, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xe1, 0x01,
	0x0a, 0x11, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a,
	0x03, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x03, 0x64, 0x65,
	0x6c, 0x22, 0xa3, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x69, 0x64, 0x43,
	0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x52,
	0x41, 0x49, 0x44, 0x43, 0x4d, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a,
	0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x1f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x41, 0x4e, 0x41,
	0x43, 0x43, 0x45, 0x50, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x56, 0x69, 0x73, 0x69,
	0x74, 0x4e, 0x70, 0x63, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x14, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x54, 0x5f, 0x4e, 0x50, 0x43, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x09, 0x6e, 0x70, 0x63, 0x74, 0x65, 0x6d, 0x70, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x6e, 0x70, 0x63, 0x74, 0x65,
	0x6d, 0x70, 0x69, 0x64, 0x22, 0x66, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6e, 0x70, 0x63, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xde, 0x01, 0x0a,
	0x09, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x0e, 0x45, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x19, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x19, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x19, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33,
	0x12, 0x19, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x34, 0x12, 0x30, 0x0a, 0x09, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x09, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe6, 0x01,
	0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x0e, 0x45, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb6, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x57,
	0x41, 0x4e, 0x54, 0x45, 0x44, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1d, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xc5, 0x02, 0x0a, 0x18, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x70, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1d, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x48, 0x45, 0x4c, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a,
	0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a,
	0x01, 0x30, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30,
	0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x73, 0x69, 0x67, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x69, 0x73, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x69,
	0x73, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0xef, 0x02, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6d, 0x64,
	0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1e, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x12, 0x15,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x69, 0x73, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x0d,
	0x69, 0x73, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x69, 0x73, 0x71, 0x75,
	0x69, 0x63, 0x6b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x22, 0xc0, 0x02, 0x0a, 0x17, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x48, 0x65, 0x6c, 0x70, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x70, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x1c, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x45, 0x4c,
	0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1b, 0x0a, 0x05,
	0x61, 0x67, 0x72, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x69, 0x73, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x97, 0x01, 0x0a,
	0x0a, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x6d,
	0x61, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d,
	0x61, 0x70, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x24, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1c, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44,
	0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a,
	0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x37, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x22,
	0xbc, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x52,
	0x41, 0x43, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x06, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x22, 0xe1,
	0x01, 0x0a, 0x1c, 0x48, 0x65, 0x6c, 0x70, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6d, 0x64, 0x12,
	0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x22, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x45, 0x4c, 0x50, 0x5f, 0x51, 0x55, 0x49, 0x43,
	0x4b, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x22, 0xbb, 0x01, 0x0a, 0x12, 0x4f, 0x70,
	0x65, 0x6e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6d, 0x64,
	0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x50, 0x55, 0x5a,
	0x5a, 0x4c, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xc6, 0x01, 0x0a, 0x16, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x17, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x65, 0x70, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3e,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x50, 0x53, 0x54,
	0x45, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x65, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x74, 0x65, 0x70, 0x69, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x65, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x50, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x53, 0x74, 0x65, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x53, 0x74, 0x65, 0x70, 0x69, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x65, 0x70, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x50, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53,
	0x48, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x65, 0x70,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x65, 0x70, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x75, 0x6d,
	0x70, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x50, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4e, 0x74, 0x66, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19,
	0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x4c, 0x4f, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x16, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x0a, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x69, 0x64, 0x12,
	0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x17,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63,
	0x6d, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x17, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42,
	0x4f, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x29, 0x0a,
	0x07, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x07, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x14, 0x42, 0x6f, 0x74,
	0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6d,
	0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x81, 0x02, 0x0a, 0x14, 0x42, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6d, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x19, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x69, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x69, 0x64, 0x73, 0x2a, 0xd0, 0x07,
	0x0a, 0x0a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x14,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x55, 0x4e,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53,
	0x54, 0x45, 0x50, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54,
	0x52, 0x41, 0x43, 0x45, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x52, 0x41, 0x49, 0x44,
	0x43, 0x4d, 0x44, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x43, 0x41, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x4c, 0x49, 0x53,
	0x54, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x54, 0x5f, 0x4e,
	0x50, 0x43, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x44, 0x41, 0x54,
	0x41, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x48, 0x45, 0x4c, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x10, 0x0e, 0x12, 0x20, 0x0a, 0x1c, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x45, 0x4c, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x50, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x10, 0x12, 0x20, 0x0a, 0x1c,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x11, 0x12, 0x1f,
	0x0a, 0x1b, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x12, 0x12,
	0x26, 0x0a, 0x22, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x48, 0x45,
	0x4c, 0x50, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f,
	0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x13, 0x12, 0x1b, 0x0a, 0x17, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x10, 0x15, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x50, 0x55, 0x5a, 0x5a, 0x4c, 0x45, 0x10, 0x16,
	0x12, 0x1e, 0x0a, 0x1a, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x17,
	0x12, 0x1e, 0x0a, 0x1a, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x18,
	0x12, 0x1b, 0x0a, 0x17, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d,
	0x41, 0x50, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x19, 0x12, 0x1d, 0x0a,
	0x19, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x50, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x1a, 0x12, 0x1d, 0x0a, 0x19,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x50, 0x53, 0x54,
	0x45, 0x50, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x1b, 0x12, 0x1a, 0x0a, 0x16, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1c, 0x12, 0x1e, 0x0a, 0x1a, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x4c, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x1d, 0x12, 0x1b, 0x0a, 0x17, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x10, 0x1e, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x1f, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x55, 0x45, 0x53, 0x54, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x20,
	0x2a, 0x7c, 0x0a, 0x0b, 0x45, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x57, 0x41, 0x4e, 0x54, 0x45,
	0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41,
	0x59, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x57, 0x41,
	0x4e, 0x54, 0x45, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0xd8,
	0x0d, 0x0a, 0x0a, 0x45, 0x51, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x4c, 0x4b,
	0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x31, 0x10, 0x07, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41,
	0x49, 0x4c, 0x59, 0x5f, 0x33, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x37, 0x10, 0x09, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x0b, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43,
	0x45, 0x4e, 0x45, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x54, 0x41, 0x4c,
	0x4b, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x41, 0x54, 0x49, 0x53, 0x46, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x4c, 0x49, 0x54, 0x45, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x43, 0x52, 0x41, 0x53, 0x54, 0x45, 0x48, 0x41, 0x4d, 0x10,
	0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x43, 0x52, 0x41, 0x53, 0x54, 0x45, 0x48, 0x41, 0x4d,
	0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x10, 0x14, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x49,
	0x4c, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x10, 0x16, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x17, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x44, 0x41, 0x49, 0x4c,
	0x59, 0x10, 0x18, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x19, 0x12, 0x1c,
	0x0a, 0x18, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x49,
	0x4c, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x52, 0x41, 0x4e, 0x44, 0x10, 0x1a, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x10, 0x1b, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x1c,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x5f, 0x53, 0x41, 0x54, 0x49, 0x53, 0x46, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x1d, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x31, 0x10, 0x1e, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x5f,
	0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x33, 0x10, 0x1f, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x44, 0x41, 0x49, 0x4c,
	0x59, 0x5f, 0x37, 0x10, 0x20, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x10, 0x21, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x22, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x10, 0x23, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x24, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x10, 0x25, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x54,
	0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x26, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x27, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45,
	0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x28, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x52,
	0x41, 0x10, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x10, 0x2a, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x31, 0x10, 0x2b, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x5f, 0x32, 0x10, 0x2c, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x33, 0x10, 0x2d, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x34, 0x10, 0x2e,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x2f, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41,
	0x59, 0x10, 0x30, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x31, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52,
	0x41, 0x4e, 0x43, 0x48, 0x54, 0x41, 0x4c, 0x4b, 0x10, 0x32, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x53,
	0x54, 0x45, 0x46, 0x41, 0x4e, 0x49, 0x45, 0x10, 0x33, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x34, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59,
	0x5f, 0x31, 0x10, 0x35, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x33,
	0x10, 0x36, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x37, 0x10, 0x37,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57,
	0x4f, 0x52, 0x4c, 0x44, 0x10, 0x38, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x42, 0x4f, 0x53, 0x53, 0x10, 0x39,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57,
	0x4f, 0x52, 0x4c, 0x44, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x10, 0x3a, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x3b, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x3c, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f,
	0x31, 0x10, 0x3d, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x33, 0x10, 0x3e, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x35, 0x10, 0x3f, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x31, 0x10, 0x40,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57,
	0x45, 0x45, 0x4b, 0x5f, 0x33, 0x10, 0x41, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x35, 0x10, 0x42, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x54,
	0x54, 0x4c, 0x45, 0x10, 0x43, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x44, 0x2a, 0xfc, 0x16, 0x0a, 0x0a, 0x45, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x54,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50,
	0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x53, 0x54, 0x45, 0x50, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x47, 0x55, 0x41, 0x52,
	0x44, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x47, 0x4d, 0x43, 0x4d, 0x44, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x46, 0x41, 0x49, 0x4c,
	0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50,
	0x5f, 0x55, 0x53, 0x45, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x53, 0x54, 0x45, 0x50, 0x5f, 0x47, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54,
	0x45, 0x50, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x0d,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x53, 0x54, 0x45, 0x50, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x10,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x44,
	0x49, 0x41, 0x4c, 0x4f, 0x47, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x50, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x12,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43,
	0x4c, 0x45, 0x41, 0x52, 0x4e, 0x50, 0x43, 0x10, 0x13, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x49, 0x44,
	0x45, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x49, 0x45, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x54, 0x45,
	0x41, 0x4d, 0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54,
	0x45, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x17,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x53, 0x54, 0x45, 0x50, 0x5f, 0x4f, 0x52, 0x47, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x19, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x45, 0x56,
	0x4f, 0x10, 0x1a, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x1b, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x1c, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x49, 0x54, 0x45,
	0x4d, 0x10, 0x1d, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x4a, 0x55, 0x4d, 0x50, 0x10, 0x1e, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x47, 0x45, 0x41,
	0x52, 0x10, 0x20, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x50, 0x55, 0x52, 0x49, 0x46, 0x59, 0x10, 0x21, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x22, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x23, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4c, 0x4f, 0x43, 0x55, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x24, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x25, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x4c, 0x56, 0x10, 0x26, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x4d, 0x4f, 0x4e, 0x45,
	0x59, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x28, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x10, 0x29, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x4c, 0x49,
	0x47, 0x48, 0x54, 0x10, 0x2a, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x48, 0x49, 0x4e, 0x54, 0x10, 0x2c, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x2d, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x53, 0x45, 0x41, 0x4c, 0x10, 0x2e, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x53, 0x54, 0x45, 0x50, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4c, 0x56, 0x10, 0x2f, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x10, 0x30, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54,
	0x45, 0x50, 0x5f, 0x49, 0x4c, 0x4c, 0x55, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x31, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x4e, 0x50, 0x43, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x32, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x33, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x44, 0x41, 0x49,
	0x4c, 0x59, 0x10, 0x34, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54,
	0x45, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10,
	0x35, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x36, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x55, 0x53, 0x49,
	0x43, 0x10, 0x37, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x52, 0x45, 0x57, 0x52, 0x41, 0x44, 0x48, 0x45, 0x4c, 0x50, 0x10, 0x38, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x47, 0x55, 0x49,
	0x44, 0x45, 0x4c, 0x4f, 0x43, 0x4b, 0x4d, 0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x10, 0x39, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4d, 0x4f,
	0x4e, 0x45, 0x59, 0x10, 0x3a, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x3b, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x3c, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x3d, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x55, 0x53,
	0x45, 0x10, 0x3e, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x10, 0x3f, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x10, 0x40, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x52, 0x41, 0x4e,
	0x44, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x41, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x42, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x10, 0x43, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x44, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x50, 0x45,
	0x54, 0x10, 0x45, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x10, 0x46, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x10, 0x47, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x42, 0x55, 0x46,
	0x46, 0x10, 0x48, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x10, 0x49, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x48, 0x52, 0x49, 0x53, 0x54, 0x4d, 0x41,
	0x53, 0x10, 0x4a, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x43, 0x48, 0x52, 0x49, 0x53, 0x54, 0x4d, 0x41, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x10,
	0x4b, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x42, 0x45, 0x49, 0x4e, 0x47, 0x10, 0x4c, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4a, 0x4f, 0x59, 0x10,
	0x4d, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x4a, 0x4f, 0x59, 0x10, 0x4e, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x41,
	0x4c, 0x4f, 0x47, 0x10, 0x4f, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x43, 0x47, 0x10, 0x50, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x53, 0x45, 0x52, 0x56,
	0x41, 0x4e, 0x54, 0x10, 0x51, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x50, 0x4c, 0x4f, 0x54, 0x10, 0x54,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x10, 0x55, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x56, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x52, 0x45, 0x44,
	0x49, 0x41, 0x4c, 0x4f, 0x47, 0x10, 0x57, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x10, 0x58, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x41,
	0x54, 0x10, 0x59, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x5a, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4e, 0x50, 0x43, 0x57, 0x41, 0x4c, 0x4b, 0x10,
	0x5b, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x4e, 0x50, 0x43, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x5c, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x48,
	0x41, 0x4e, 0x44, 0x4e, 0x50, 0x43, 0x10, 0x5e, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10,
	0x5f, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x4e, 0x50, 0x43, 0x48, 0x50, 0x10, 0x60, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x53, 0x48, 0x4f, 0x57,
	0x10, 0x62, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x50, 0x48, 0x41, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x63, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x10, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x50, 0x49, 0x43, 0x54,
	0x55, 0x52, 0x45, 0x10, 0x66, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x67, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4d, 0x41,
	0x49, 0x4c, 0x10, 0x68, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54,
	0x45, 0x50, 0x5f, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48,
	0x10, 0x69, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50,
	0x5f, 0x57, 0x41, 0x49, 0x54, 0x50, 0x4f, 0x53, 0x10, 0x6a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x6b, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x10, 0x6c, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x43, 0x55, 0x54, 0x5f, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x10, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45,
	0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x42, 0x4f, 0x52, 0x4e, 0x4d, 0x41, 0x50, 0x10, 0x6e,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x50,
	0x41, 0x50, 0x45, 0x52, 0x10, 0x6f, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x53, 0x54, 0x45, 0x50, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x54, 0x49, 0x50, 0x10,
	0x70, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x71, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x10, 0x72, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x53, 0x48,
	0x41, 0x4b, 0x45, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x50, 0x49, 0x43,
	0x54, 0x55, 0x52, 0x45, 0x10, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x53, 0x54, 0x45, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10,
	0x75, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x55, 0x5a, 0x5a,
	0x4c, 0x45, 0x10, 0x76, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54,
	0x45, 0x50, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10,
	0x77, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x57, 0x41, 0x49, 0x54, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x78, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x54, 0x41, 0x50, 0x50, 0x49,
	0x4e, 0x47, 0x10, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x54,
	0x45, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x7a, 0x2a, 0x95, 0x01, 0x0a, 0x0a, 0x45, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x43, 0x41, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05,
	0x2a, 0x94, 0x02, 0x0a, 0x0c, 0x45, 0x51, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f,
	0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f,
	0x4e, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f,
	0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x05, 0x12, 0x28,
	0x0a, 0x24, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x49, 0x43, 0x4b, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x41, 0x49, 0x52, 0x10,
	0x07, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x08, 0x2a, 0x92, 0x01, 0x0a, 0x0a, 0x45, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43,
	0x41, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x05, 0x2a, 0x9c, 0x02, 0x0a,
	0x10, 0x45, 0x4a, 0x6f, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x4a, 0x4f, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4a, 0x4f, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x4a, 0x4f, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x4d, 0x49, 0x53, 0x43, 0x48, 0x49, 0x45, 0x46, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4a, 0x4f,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4a, 0x4f, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x4a, 0x4f, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x59, 0x4f, 0x59,
	0x4f, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x4a, 0x4f, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x54, 0x46, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x47, 0x55, 0x52, 0x59,
	0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x4a, 0x4f, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x4a, 0x4f,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x45, 0x41, 0x54, 0x50,
	0x4f, 0x52, 0x49, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x4a, 0x4f, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x0a, 0x2a, 0x71, 0x0a, 0x0d, 0x45,
	0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x42, 0x4f, 0x54, 0x54,
	0x4c, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x8c,
	0x01, 0x0a, 0x0d, 0x45, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x42, 0x4f, 0x54, 0x54,
	0x4c, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x42, 0x4f, 0x54, 0x54, 0x4c,
	0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04,
}

var (
	file_SceneQuest_proto_rawDescOnce sync.Once
	file_SceneQuest_proto_rawDescData = file_SceneQuest_proto_rawDesc
)

func file_SceneQuest_proto_rawDescGZIP() []byte {
	file_SceneQuest_proto_rawDescOnce.Do(func() {
		file_SceneQuest_proto_rawDescData = protoimpl.X.CompressGZIP(file_SceneQuest_proto_rawDescData)
	})
	return file_SceneQuest_proto_rawDescData
}

var file_SceneQuest_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_SceneQuest_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_SceneQuest_proto_goTypes = []interface{}{
	(QuestParam)(0),                      // 0: Cmd.QuestParam
	(EWantedType)(0),                     // 1: Cmd.EWantedType
	(EQuestType)(0),                      // 2: Cmd.EQuestType
	(EQuestStep)(0),                      // 3: Cmd.EQuestStep
	(EQuestList)(0),                      // 4: Cmd.EQuestList
	(EQuestAction)(0),                    // 5: Cmd.EQuestAction
	(EOtherData)(0),                      // 6: Cmd.EOtherData
	(EJoyActivityType)(0),                // 7: Cmd.EJoyActivityType
	(EBottleStatus)(0),                   // 8: Cmd.EBottleStatus
	(EBottleAction)(0),                   // 9: Cmd.EBottleAction
	(*QuestPConfig)(nil),                 // 10: Cmd.QuestPConfig
	(*QuestStep)(nil),                    // 11: Cmd.QuestStep
	(*QuestData)(nil),                    // 12: Cmd.QuestData
	(*QuestManualItem)(nil),              // 13: Cmd.QuestManualItem
	(*QuestShop)(nil),                    // 14: Cmd.QuestShop
	(*QuestName)(nil),                    // 15: Cmd.QuestName
	(*QuestPuzzle)(nil),                  // 16: Cmd.QuestPuzzle
	(*QuestPreview)(nil),                 // 17: Cmd.QuestPreview
	(*QuestManualMain)(nil),              // 18: Cmd.QuestManualMain
	(*QuestManualBranch)(nil),            // 19: Cmd.QuestManualBranch
	(*QuestManualStory)(nil),             // 20: Cmd.QuestManualStory
	(*QuestManual)(nil),                  // 21: Cmd.QuestManual
	(*QuestList)(nil),                    // 22: Cmd.QuestList
	(*QuestUpdateItem)(nil),              // 23: Cmd.QuestUpdateItem
	(*QuestUpdate)(nil),                  // 24: Cmd.QuestUpdate
	(*QuestStepUpdate)(nil),              // 25: Cmd.QuestStepUpdate
	(*QuestAction)(nil),                  // 26: Cmd.QuestAction
	(*RunQuestStep)(nil),                 // 27: Cmd.RunQuestStep
	(*QuestTrace)(nil),                   // 28: Cmd.QuestTrace
	(*QuestDetail)(nil),                  // 29: Cmd.QuestDetail
	(*QuestDetailList)(nil),              // 30: Cmd.QuestDetailList
	(*QuestDetailUpdate)(nil),            // 31: Cmd.QuestDetailUpdate
	(*QuestRaidCmd)(nil),                 // 32: Cmd.QuestRaidCmd
	(*QuestCanAcceptListChange)(nil),     // 33: Cmd.QuestCanAcceptListChange
	(*VisitNpcUserCmd)(nil),              // 34: Cmd.VisitNpcUserCmd
	(*WorldTreasure)(nil),                // 35: Cmd.WorldTreasure
	(*OtherData)(nil),                    // 36: Cmd.OtherData
	(*QueryOtherData)(nil),               // 37: Cmd.QueryOtherData
	(*QueryWantedInfoQuestCmd)(nil),      // 38: Cmd.QueryWantedInfoQuestCmd
	(*InviteHelpAcceptQuestCmd)(nil),     // 39: Cmd.InviteHelpAcceptQuestCmd
	(*InviteAcceptQuestCmd)(nil),         // 40: Cmd.InviteAcceptQuestCmd
	(*ReplyHelpAccelpQuestCmd)(nil),      // 41: Cmd.ReplyHelpAccelpQuestCmd
	(*WorldQuest)(nil),                   // 42: Cmd.WorldQuest
	(*QueryWorldQuestCmd)(nil),           // 43: Cmd.QueryWorldQuestCmd
	(*Trace)(nil),                        // 44: Cmd.Trace
	(*QuestGroupTraceQuestCmd)(nil),      // 45: Cmd.QuestGroupTraceQuestCmd
	(*HelpQuickFinishBoardQuestCmd)(nil), // 46: Cmd.HelpQuickFinishBoardQuestCmd
	(*QueryManualQuestCmd)(nil),          // 47: Cmd.QueryManualQuestCmd
	(*OpenPuzzleQuestCmd)(nil),           // 48: Cmd.OpenPuzzleQuestCmd
	(*QuestManualFunction)(nil),          // 49: Cmd.QuestManualFunction
	(*ManualFunctionQuestCmd)(nil),       // 50: Cmd.ManualFunctionQuestCmd
	(*QueryQuestListQuestCmd)(nil),       // 51: Cmd.QueryQuestListQuestCmd
	(*MapStepSyncCmd)(nil),               // 52: Cmd.MapStepSyncCmd
	(*MapStepUpdateCmd)(nil),             // 53: Cmd.MapStepUpdateCmd
	(*MapStepFinishCmd)(nil),             // 54: Cmd.MapStepFinishCmd
	(*PlotStatusNtf)(nil),                // 55: Cmd.PlotStatusNtf
	(*QuestAreaAction)(nil),              // 56: Cmd.QuestAreaAction
	(*BottleData)(nil),                   // 57: Cmd.BottleData
	(*QueryBottleInfoQuestCmd)(nil),      // 58: Cmd.QueryBottleInfoQuestCmd
	(*BottleActionQuestCmd)(nil),         // 59: Cmd.BottleActionQuestCmd
	(*BottleUpdateQuestCmd)(nil),         // 60: Cmd.BottleUpdateQuestCmd
	(*ConfigParam)(nil),                  // 61: Cmd.ConfigParam
	(*ItemInfo)(nil),                     // 62: Cmd.ItemInfo
	(Command)(0),                         // 63: Cmd.Command
	(*ScenePos)(nil),                     // 64: Cmd.ScenePos
}
var file_SceneQuest_proto_depIdxs = []int32{
	61,  // 0: Cmd.QuestPConfig.params:type_name -> Cmd.ConfigParam
	10,  // 1: Cmd.QuestStep.config:type_name -> Cmd.QuestPConfig
	11,  // 2: Cmd.QuestData.steps:type_name -> Cmd.QuestStep
	62,  // 3: Cmd.QuestData.rewards:type_name -> Cmd.ItemInfo
	4,   // 4: Cmd.QuestManualItem.type:type_name -> Cmd.EQuestList
	12,  // 5: Cmd.QuestManualItem.data:type_name -> Cmd.QuestData
	13,  // 6: Cmd.QuestManualItem.subs:type_name -> Cmd.QuestManualItem
	13,  // 7: Cmd.QuestShop.quests:type_name -> Cmd.QuestManualItem
	4,   // 8: Cmd.QuestName.type:type_name -> Cmd.EQuestList
	13,  // 9: Cmd.QuestManualMain.items:type_name -> Cmd.QuestManualItem
	16,  // 10: Cmd.QuestManualMain.puzzle:type_name -> Cmd.QuestPuzzle
	17,  // 11: Cmd.QuestManualMain.previews:type_name -> Cmd.QuestPreview
	14,  // 12: Cmd.QuestManualBranch.shops:type_name -> Cmd.QuestShop
	17,  // 13: Cmd.QuestManualStory.previews:type_name -> Cmd.QuestPreview
	18,  // 14: Cmd.QuestManual.main:type_name -> Cmd.QuestManualMain
	19,  // 15: Cmd.QuestManual.branch:type_name -> Cmd.QuestManualBranch
	20,  // 16: Cmd.QuestManual.story:type_name -> Cmd.QuestManualStory
	15,  // 17: Cmd.QuestManual.prequest:type_name -> Cmd.QuestName
	63,  // 18: Cmd.QuestList.cmd:type_name -> Cmd.Command
	0,   // 19: Cmd.QuestList.param:type_name -> Cmd.QuestParam
	4,   // 20: Cmd.QuestList.type:type_name -> Cmd.EQuestList
	12,  // 21: Cmd.QuestList.list:type_name -> Cmd.QuestData
	12,  // 22: Cmd.QuestUpdateItem.update:type_name -> Cmd.QuestData
	4,   // 23: Cmd.QuestUpdateItem.type:type_name -> Cmd.EQuestList
	63,  // 24: Cmd.QuestUpdate.cmd:type_name -> Cmd.Command
	0,   // 25: Cmd.QuestUpdate.param:type_name -> Cmd.QuestParam
	23,  // 26: Cmd.QuestUpdate.items:type_name -> Cmd.QuestUpdateItem
	63,  // 27: Cmd.QuestStepUpdate.cmd:type_name -> Cmd.Command
	0,   // 28: Cmd.QuestStepUpdate.param:type_name -> Cmd.QuestParam
	11,  // 29: Cmd.QuestStepUpdate.data:type_name -> Cmd.QuestStep
	63,  // 30: Cmd.QuestAction.cmd:type_name -> Cmd.Command
	0,   // 31: Cmd.QuestAction.param:type_name -> Cmd.QuestParam
	5,   // 32: Cmd.QuestAction.action:type_name -> Cmd.EQuestAction
	63,  // 33: Cmd.RunQuestStep.cmd:type_name -> Cmd.Command
	0,   // 34: Cmd.RunQuestStep.param:type_name -> Cmd.QuestParam
	63,  // 35: Cmd.QuestTrace.cmd:type_name -> Cmd.Command
	0,   // 36: Cmd.QuestTrace.param:type_name -> Cmd.QuestParam
	63,  // 37: Cmd.QuestDetailList.cmd:type_name -> Cmd.Command
	0,   // 38: Cmd.QuestDetailList.param:type_name -> Cmd.QuestParam
	29,  // 39: Cmd.QuestDetailList.details:type_name -> Cmd.QuestDetail
	63,  // 40: Cmd.QuestDetailUpdate.cmd:type_name -> Cmd.Command
	0,   // 41: Cmd.QuestDetailUpdate.param:type_name -> Cmd.QuestParam
	29,  // 42: Cmd.QuestDetailUpdate.detail:type_name -> Cmd.QuestDetail
	29,  // 43: Cmd.QuestDetailUpdate.del:type_name -> Cmd.QuestDetail
	63,  // 44: Cmd.QuestRaidCmd.cmd:type_name -> Cmd.Command
	0,   // 45: Cmd.QuestRaidCmd.param:type_name -> Cmd.QuestParam
	63,  // 46: Cmd.QuestCanAcceptListChange.cmd:type_name -> Cmd.Command
	0,   // 47: Cmd.QuestCanAcceptListChange.param:type_name -> Cmd.QuestParam
	63,  // 48: Cmd.VisitNpcUserCmd.cmd:type_name -> Cmd.Command
	0,   // 49: Cmd.VisitNpcUserCmd.param:type_name -> Cmd.QuestParam
	64,  // 50: Cmd.WorldTreasure.pos:type_name -> Cmd.ScenePos
	6,   // 51: Cmd.OtherData.data:type_name -> Cmd.EOtherData
	35,  // 52: Cmd.OtherData.treasures:type_name -> Cmd.WorldTreasure
	63,  // 53: Cmd.QueryOtherData.cmd:type_name -> Cmd.Command
	0,   // 54: Cmd.QueryOtherData.param:type_name -> Cmd.QuestParam
	6,   // 55: Cmd.QueryOtherData.type:type_name -> Cmd.EOtherData
	36,  // 56: Cmd.QueryOtherData.data:type_name -> Cmd.OtherData
	63,  // 57: Cmd.QueryWantedInfoQuestCmd.cmd:type_name -> Cmd.Command
	0,   // 58: Cmd.QueryWantedInfoQuestCmd.param:type_name -> Cmd.QuestParam
	63,  // 59: Cmd.InviteHelpAcceptQuestCmd.cmd:type_name -> Cmd.Command
	0,   // 60: Cmd.InviteHelpAcceptQuestCmd.param:type_name -> Cmd.QuestParam
	63,  // 61: Cmd.InviteAcceptQuestCmd.cmd:type_name -> Cmd.Command
	0,   // 62: Cmd.InviteAcceptQuestCmd.param:type_name -> Cmd.QuestParam
	63,  // 63: Cmd.ReplyHelpAccelpQuestCmd.cmd:type_name -> Cmd.Command
	0,   // 64: Cmd.ReplyHelpAccelpQuestCmd.param:type_name -> Cmd.QuestParam
	63,  // 65: Cmd.QueryWorldQuestCmd.cmd:type_name -> Cmd.Command
	0,   // 66: Cmd.QueryWorldQuestCmd.param:type_name -> Cmd.QuestParam
	42,  // 67: Cmd.QueryWorldQuestCmd.quests:type_name -> Cmd.WorldQuest
	63,  // 68: Cmd.QuestGroupTraceQuestCmd.cmd:type_name -> Cmd.Command
	0,   // 69: Cmd.QuestGroupTraceQuestCmd.param:type_name -> Cmd.QuestParam
	44,  // 70: Cmd.QuestGroupTraceQuestCmd.traces:type_name -> Cmd.Trace
	63,  // 71: Cmd.HelpQuickFinishBoardQuestCmd.cmd:type_name -> Cmd.Command
	0,   // 72: Cmd.HelpQuickFinishBoardQuestCmd.param:type_name -> Cmd.QuestParam
	63,  // 73: Cmd.QueryManualQuestCmd.cmd:type_name -> Cmd.Command
	0,   // 74: Cmd.QueryManualQuestCmd.param:type_name -> Cmd.QuestParam
	21,  // 75: Cmd.QueryManualQuestCmd.manual:type_name -> Cmd.QuestManual
	63,  // 76: Cmd.OpenPuzzleQuestCmd.cmd:type_name -> Cmd.Command
	0,   // 77: Cmd.OpenPuzzleQuestCmd.param:type_name -> Cmd.QuestParam
	12,  // 78: Cmd.QuestManualFunction.data:type_name -> Cmd.QuestData
	63,  // 79: Cmd.ManualFunctionQuestCmd.cmd:type_name -> Cmd.Command
	0,   // 80: Cmd.ManualFunctionQuestCmd.param:type_name -> Cmd.QuestParam
	49,  // 81: Cmd.ManualFunctionQuestCmd.items:type_name -> Cmd.QuestManualFunction
	63,  // 82: Cmd.QueryQuestListQuestCmd.cmd:type_name -> Cmd.Command
	0,   // 83: Cmd.QueryQuestListQuestCmd.param:type_name -> Cmd.QuestParam
	12,  // 84: Cmd.QueryQuestListQuestCmd.datas:type_name -> Cmd.QuestData
	63,  // 85: Cmd.MapStepSyncCmd.cmd:type_name -> Cmd.Command
	0,   // 86: Cmd.MapStepSyncCmd.param:type_name -> Cmd.QuestParam
	63,  // 87: Cmd.MapStepUpdateCmd.cmd:type_name -> Cmd.Command
	0,   // 88: Cmd.MapStepUpdateCmd.param:type_name -> Cmd.QuestParam
	63,  // 89: Cmd.MapStepFinishCmd.cmd:type_name -> Cmd.Command
	0,   // 90: Cmd.MapStepFinishCmd.param:type_name -> Cmd.QuestParam
	63,  // 91: Cmd.PlotStatusNtf.cmd:type_name -> Cmd.Command
	0,   // 92: Cmd.PlotStatusNtf.param:type_name -> Cmd.QuestParam
	63,  // 93: Cmd.QuestAreaAction.cmd:type_name -> Cmd.Command
	0,   // 94: Cmd.QuestAreaAction.param:type_name -> Cmd.QuestParam
	8,   // 95: Cmd.BottleData.status:type_name -> Cmd.EBottleStatus
	63,  // 96: Cmd.QueryBottleInfoQuestCmd.cmd:type_name -> Cmd.Command
	0,   // 97: Cmd.QueryBottleInfoQuestCmd.param:type_name -> Cmd.QuestParam
	57,  // 98: Cmd.QueryBottleInfoQuestCmd.accepts:type_name -> Cmd.BottleData
	57,  // 99: Cmd.QueryBottleInfoQuestCmd.finishs:type_name -> Cmd.BottleData
	63,  // 100: Cmd.BottleActionQuestCmd.cmd:type_name -> Cmd.Command
	0,   // 101: Cmd.BottleActionQuestCmd.param:type_name -> Cmd.QuestParam
	9,   // 102: Cmd.BottleActionQuestCmd.action:type_name -> Cmd.EBottleAction
	63,  // 103: Cmd.BottleUpdateQuestCmd.cmd:type_name -> Cmd.Command
	0,   // 104: Cmd.BottleUpdateQuestCmd.param:type_name -> Cmd.QuestParam
	8,   // 105: Cmd.BottleUpdateQuestCmd.status:type_name -> Cmd.EBottleStatus
	57,  // 106: Cmd.BottleUpdateQuestCmd.updates:type_name -> Cmd.BottleData
	107, // [107:107] is the sub-list for method output_type
	107, // [107:107] is the sub-list for method input_type
	107, // [107:107] is the sub-list for extension type_name
	107, // [107:107] is the sub-list for extension extendee
	0,   // [0:107] is the sub-list for field type_name
}

func init() { file_SceneQuest_proto_init() }
func file_SceneQuest_proto_init() {
	if File_SceneQuest_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_SceneItem_proto_init()
	file_ProtoCommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SceneQuest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestManualItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestShop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestPuzzle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestPreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestManualMain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestManualBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestManualStory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestManual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestUpdateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestStepUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunQuestStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestDetailList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestDetailUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestRaidCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestCanAcceptListChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisitNpcUserCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldTreasure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtherData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOtherData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWantedInfoQuestCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteHelpAcceptQuestCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteAcceptQuestCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyHelpAccelpQuestCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldQuest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryWorldQuestCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestGroupTraceQuestCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelpQuickFinishBoardQuestCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryManualQuestCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenPuzzleQuestCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestManualFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualFunctionQuestCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryQuestListQuestCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStepSyncCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStepUpdateCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStepFinishCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlotStatusNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestAreaAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BottleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBottleInfoQuestCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BottleActionQuestCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneQuest_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BottleUpdateQuestCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SceneQuest_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SceneQuest_proto_goTypes,
		DependencyIndexes: file_SceneQuest_proto_depIdxs,
		EnumInfos:         file_SceneQuest_proto_enumTypes,
		MessageInfos:      file_SceneQuest_proto_msgTypes,
	}.Build()
	File_SceneQuest_proto = out.File
	file_SceneQuest_proto_rawDesc = nil
	file_SceneQuest_proto_goTypes = nil
	file_SceneQuest_proto_depIdxs = nil
}
