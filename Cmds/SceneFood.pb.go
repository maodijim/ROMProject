// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.4.0
// source: SceneFood.proto

package Cmd

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FoodParam int32

const (
	FoodParam_FOODPARAM_COOK_STATE_NTF         FoodParam = 1
	FoodParam_FOODPARAM_PREPARECOOK            FoodParam = 2
	FoodParam_FOODPARAM_SELECT_COOKTYPE        FoodParam = 3
	FoodParam_FOODPARAM_START_COOK             FoodParam = 4
	FoodParam_FOODPARAM_PUT_FOOD               FoodParam = 5
	FoodParam_FOODPARAM_EDIT_FOOD_POWER        FoodParam = 6
	FoodParam_FOODPARAM_EAT_PROGRESS_NTF       FoodParam = 7
	FoodParam_FOODPARAM_QUERY_FOOD_NPC_INFO    FoodParam = 8
	FoodParam_FOODPARAM_START_EAT              FoodParam = 9
	FoodParam_FOODPARAM_STOP_EAT               FoodParam = 10
	FoodParam_FOODPARAM_FOOD_INFO_NTF          FoodParam = 11
	FoodParam_FOODPARAM_UNLOCK_RECIPE_NTF      FoodParam = 12
	FoodParam_FOODPARAM_QUERY_FOOD_DATA        FoodParam = 13
	FoodParam_FOODPARAM_NEW_FOOD_DATA_NTF      FoodParam = 14
	FoodParam_FOODPARAM_CLICK_FOOD_MANUAL_DATA FoodParam = 15
	FoodParam_FOODPARAM_UPDATE_FOOD_INFO_NTF   FoodParam = 16
)

// Enum value maps for FoodParam.
var (
	FoodParam_name = map[int32]string{
		1:  "FOODPARAM_COOK_STATE_NTF",
		2:  "FOODPARAM_PREPARECOOK",
		3:  "FOODPARAM_SELECT_COOKTYPE",
		4:  "FOODPARAM_START_COOK",
		5:  "FOODPARAM_PUT_FOOD",
		6:  "FOODPARAM_EDIT_FOOD_POWER",
		7:  "FOODPARAM_EAT_PROGRESS_NTF",
		8:  "FOODPARAM_QUERY_FOOD_NPC_INFO",
		9:  "FOODPARAM_START_EAT",
		10: "FOODPARAM_STOP_EAT",
		11: "FOODPARAM_FOOD_INFO_NTF",
		12: "FOODPARAM_UNLOCK_RECIPE_NTF",
		13: "FOODPARAM_QUERY_FOOD_DATA",
		14: "FOODPARAM_NEW_FOOD_DATA_NTF",
		15: "FOODPARAM_CLICK_FOOD_MANUAL_DATA",
		16: "FOODPARAM_UPDATE_FOOD_INFO_NTF",
	}
	FoodParam_value = map[string]int32{
		"FOODPARAM_COOK_STATE_NTF":         1,
		"FOODPARAM_PREPARECOOK":            2,
		"FOODPARAM_SELECT_COOKTYPE":        3,
		"FOODPARAM_START_COOK":             4,
		"FOODPARAM_PUT_FOOD":               5,
		"FOODPARAM_EDIT_FOOD_POWER":        6,
		"FOODPARAM_EAT_PROGRESS_NTF":       7,
		"FOODPARAM_QUERY_FOOD_NPC_INFO":    8,
		"FOODPARAM_START_EAT":              9,
		"FOODPARAM_STOP_EAT":               10,
		"FOODPARAM_FOOD_INFO_NTF":          11,
		"FOODPARAM_UNLOCK_RECIPE_NTF":      12,
		"FOODPARAM_QUERY_FOOD_DATA":        13,
		"FOODPARAM_NEW_FOOD_DATA_NTF":      14,
		"FOODPARAM_CLICK_FOOD_MANUAL_DATA": 15,
		"FOODPARAM_UPDATE_FOOD_INFO_NTF":   16,
	}
)

func (x FoodParam) Enum() *FoodParam {
	p := new(FoodParam)
	*p = x
	return p
}

func (x FoodParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FoodParam) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneFood_proto_enumTypes[0].Descriptor()
}

func (FoodParam) Type() protoreflect.EnumType {
	return &file_SceneFood_proto_enumTypes[0]
}

func (x FoodParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FoodParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FoodParam(num)
	return nil
}

// Deprecated: Use FoodParam.Descriptor instead.
func (FoodParam) EnumDescriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{0}
}

type ECookType int32

const (
	ECookType_ECOOKTYPE_MIN      ECookType = 0
	ECookType_ECOOKTYPE_JIANCHAO ECookType = 1
	ECookType_ECOOKTYPE_BARBECUE ECookType = 2
	ECookType_ECOOKTYPE_SOUP     ECookType = 3
	ECookType_ECOOKTYPE_DESSERT  ECookType = 4
	ECookType_ECOOKTYPE_MAX      ECookType = 5
)

// Enum value maps for ECookType.
var (
	ECookType_name = map[int32]string{
		0: "ECOOKTYPE_MIN",
		1: "ECOOKTYPE_JIANCHAO",
		2: "ECOOKTYPE_BARBECUE",
		3: "ECOOKTYPE_SOUP",
		4: "ECOOKTYPE_DESSERT",
		5: "ECOOKTYPE_MAX",
	}
	ECookType_value = map[string]int32{
		"ECOOKTYPE_MIN":      0,
		"ECOOKTYPE_JIANCHAO": 1,
		"ECOOKTYPE_BARBECUE": 2,
		"ECOOKTYPE_SOUP":     3,
		"ECOOKTYPE_DESSERT":  4,
		"ECOOKTYPE_MAX":      5,
	}
)

func (x ECookType) Enum() *ECookType {
	p := new(ECookType)
	*p = x
	return p
}

func (x ECookType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECookType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneFood_proto_enumTypes[1].Descriptor()
}

func (ECookType) Type() protoreflect.EnumType {
	return &file_SceneFood_proto_enumTypes[1]
}

func (x ECookType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECookType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECookType(num)
	return nil
}

// Deprecated: Use ECookType.Descriptor instead.
func (ECookType) EnumDescriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{1}
}

type ECookState int32

const (
	ECookState_ECOOKSTATE_NONE       ECookState = 0
	ECookState_ECOOKSTATE_PREPAREING ECookState = 1
	ECookState_ECOOKSTATE_COOKING    ECookState = 2
	ECookState_ECOOKSTATE_COMPLETE   ECookState = 3
)

// Enum value maps for ECookState.
var (
	ECookState_name = map[int32]string{
		0: "ECOOKSTATE_NONE",
		1: "ECOOKSTATE_PREPAREING",
		2: "ECOOKSTATE_COOKING",
		3: "ECOOKSTATE_COMPLETE",
	}
	ECookState_value = map[string]int32{
		"ECOOKSTATE_NONE":       0,
		"ECOOKSTATE_PREPAREING": 1,
		"ECOOKSTATE_COOKING":    2,
		"ECOOKSTATE_COMPLETE":   3,
	}
)

func (x ECookState) Enum() *ECookState {
	p := new(ECookState)
	*p = x
	return p
}

func (x ECookState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECookState) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneFood_proto_enumTypes[2].Descriptor()
}

func (ECookState) Type() protoreflect.EnumType {
	return &file_SceneFood_proto_enumTypes[2]
}

func (x ECookState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECookState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECookState(num)
	return nil
}

// Deprecated: Use ECookState.Descriptor instead.
func (ECookState) EnumDescriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{2}
}

type EEatPower int32

const (
	EEatPower_EEATPOWR_SELF EEatPower = 1
	EEatPower_EEATPOWR_TEAM EEatPower = 2
	EEatPower_EEATPOWR_ALL  EEatPower = 3
)

// Enum value maps for EEatPower.
var (
	EEatPower_name = map[int32]string{
		1: "EEATPOWR_SELF",
		2: "EEATPOWR_TEAM",
		3: "EEATPOWR_ALL",
	}
	EEatPower_value = map[string]int32{
		"EEATPOWR_SELF": 1,
		"EEATPOWR_TEAM": 2,
		"EEATPOWR_ALL":  3,
	}
)

func (x EEatPower) Enum() *EEatPower {
	p := new(EEatPower)
	*p = x
	return p
}

func (x EEatPower) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEatPower) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneFood_proto_enumTypes[3].Descriptor()
}

func (EEatPower) Type() protoreflect.EnumType {
	return &file_SceneFood_proto_enumTypes[3]
}

func (x EEatPower) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EEatPower) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EEatPower(num)
	return nil
}

// Deprecated: Use EEatPower.Descriptor instead.
func (EEatPower) EnumDescriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{3}
}

type EFoodDataType int32

const (
	EFoodDataType_EFOODDATATYPE_MIN       EFoodDataType = 0
	EFoodDataType_EFOODDATATYPE_MATERIAL  EFoodDataType = 1
	EFoodDataType_EFOODDATATYPE_FOODCOOK  EFoodDataType = 2
	EFoodDataType_EFOODDATATYPE_FOODTASTE EFoodDataType = 3
	EFoodDataType_EFOODDATATYPE_MAX       EFoodDataType = 4
)

// Enum value maps for EFoodDataType.
var (
	EFoodDataType_name = map[int32]string{
		0: "EFOODDATATYPE_MIN",
		1: "EFOODDATATYPE_MATERIAL",
		2: "EFOODDATATYPE_FOODCOOK",
		3: "EFOODDATATYPE_FOODTASTE",
		4: "EFOODDATATYPE_MAX",
	}
	EFoodDataType_value = map[string]int32{
		"EFOODDATATYPE_MIN":       0,
		"EFOODDATATYPE_MATERIAL":  1,
		"EFOODDATATYPE_FOODCOOK":  2,
		"EFOODDATATYPE_FOODTASTE": 3,
		"EFOODDATATYPE_MAX":       4,
	}
)

func (x EFoodDataType) Enum() *EFoodDataType {
	p := new(EFoodDataType)
	*p = x
	return p
}

func (x EFoodDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFoodDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneFood_proto_enumTypes[4].Descriptor()
}

func (EFoodDataType) Type() protoreflect.EnumType {
	return &file_SceneFood_proto_enumTypes[4]
}

func (x EFoodDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFoodDataType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFoodDataType(num)
	return nil
}

// Deprecated: Use EFoodDataType.Descriptor instead.
func (EFoodDataType) EnumDescriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{4}
}

type EFoodStatus int32

const (
	EFoodStatus_EFOODSTATUS_MIN     EFoodStatus = 0
	EFoodStatus_EFOODSTATUS_ADD     EFoodStatus = 1
	EFoodStatus_EFOODSTATUS_CLICKED EFoodStatus = 2
	EFoodStatus_EFOODSTATUS_MAX     EFoodStatus = 3
)

// Enum value maps for EFoodStatus.
var (
	EFoodStatus_name = map[int32]string{
		0: "EFOODSTATUS_MIN",
		1: "EFOODSTATUS_ADD",
		2: "EFOODSTATUS_CLICKED",
		3: "EFOODSTATUS_MAX",
	}
	EFoodStatus_value = map[string]int32{
		"EFOODSTATUS_MIN":     0,
		"EFOODSTATUS_ADD":     1,
		"EFOODSTATUS_CLICKED": 2,
		"EFOODSTATUS_MAX":     3,
	}
)

func (x EFoodStatus) Enum() *EFoodStatus {
	p := new(EFoodStatus)
	*p = x
	return p
}

func (x EFoodStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFoodStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_SceneFood_proto_enumTypes[5].Descriptor()
}

func (EFoodStatus) Type() protoreflect.EnumType {
	return &file_SceneFood_proto_enumTypes[5]
}

func (x EFoodStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EFoodStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EFoodStatus(num)
	return nil
}

// Deprecated: Use EFoodStatus.Descriptor instead.
func (EFoodStatus) EnumDescriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{5}
}

type CookStateMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    *ECookState `protobuf:"varint,1,opt,name=state,enum=Cmd.ECookState" json:"state,omitempty"`
	Cooktype *ECookType  `protobuf:"varint,2,opt,name=cooktype,enum=Cmd.ECookType" json:"cooktype,omitempty"`
	Progress *uint32     `protobuf:"varint,3,opt,name=progress" json:"progress,omitempty"`
	Success  *bool       `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
	Foodid   []uint32    `protobuf:"varint,5,rep,name=foodid" json:"foodid,omitempty"`
}

func (x *CookStateMsg) Reset() {
	*x = CookStateMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookStateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookStateMsg) ProtoMessage() {}

func (x *CookStateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookStateMsg.ProtoReflect.Descriptor instead.
func (*CookStateMsg) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{0}
}

func (x *CookStateMsg) GetState() ECookState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ECookState_ECOOKSTATE_NONE
}

func (x *CookStateMsg) GetCooktype() ECookType {
	if x != nil && x.Cooktype != nil {
		return *x.Cooktype
	}
	return ECookType_ECOOKTYPE_MIN
}

func (x *CookStateMsg) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CookStateMsg) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CookStateMsg) GetFoodid() []uint32 {
	if x != nil {
		return x.Foodid
	}
	return nil
}

type CookStateNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command      `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=29" json:"cmd,omitempty"`
	Param  *FoodParam    `protobuf:"varint,2,opt,name=param,enum=Cmd.FoodParam,def=1" json:"param,omitempty"`
	State  *CookStateMsg `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Charid *uint64       `protobuf:"varint,4,opt,name=charid" json:"charid,omitempty"`
}

// Default values for CookStateNtf fields.
const (
	Default_CookStateNtf_Cmd   = Command_SCENE_USER_FOOD_PROTOCMD
	Default_CookStateNtf_Param = FoodParam_FOODPARAM_COOK_STATE_NTF
)

func (x *CookStateNtf) Reset() {
	*x = CookStateNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CookStateNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookStateNtf) ProtoMessage() {}

func (x *CookStateNtf) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookStateNtf.ProtoReflect.Descriptor instead.
func (*CookStateNtf) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{1}
}

func (x *CookStateNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_CookStateNtf_Cmd
}

func (x *CookStateNtf) GetParam() FoodParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_CookStateNtf_Param
}

func (x *CookStateNtf) GetState() *CookStateMsg {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *CookStateNtf) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

type PrepareCook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=29" json:"cmd,omitempty"`
	Param *FoodParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FoodParam,def=2" json:"param,omitempty"`
	Start *bool      `protobuf:"varint,3,opt,name=start,def=1" json:"start,omitempty"`
}

// Default values for PrepareCook fields.
const (
	Default_PrepareCook_Cmd   = Command_SCENE_USER_FOOD_PROTOCMD
	Default_PrepareCook_Param = FoodParam_FOODPARAM_PREPARECOOK
	Default_PrepareCook_Start = bool(true)
)

func (x *PrepareCook) Reset() {
	*x = PrepareCook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareCook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareCook) ProtoMessage() {}

func (x *PrepareCook) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareCook.ProtoReflect.Descriptor instead.
func (*PrepareCook) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{2}
}

func (x *PrepareCook) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PrepareCook_Cmd
}

func (x *PrepareCook) GetParam() FoodParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PrepareCook_Param
}

func (x *PrepareCook) GetStart() bool {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return Default_PrepareCook_Start
}

type SelectCookType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=29" json:"cmd,omitempty"`
	Param    *FoodParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FoodParam,def=3" json:"param,omitempty"`
	Cooktype *ECookType `protobuf:"varint,3,opt,name=cooktype,enum=Cmd.ECookType" json:"cooktype,omitempty"`
}

// Default values for SelectCookType fields.
const (
	Default_SelectCookType_Cmd   = Command_SCENE_USER_FOOD_PROTOCMD
	Default_SelectCookType_Param = FoodParam_FOODPARAM_SELECT_COOKTYPE
)

func (x *SelectCookType) Reset() {
	*x = SelectCookType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectCookType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectCookType) ProtoMessage() {}

func (x *SelectCookType) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectCookType.ProtoReflect.Descriptor instead.
func (*SelectCookType) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{3}
}

func (x *SelectCookType) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_SelectCookType_Cmd
}

func (x *SelectCookType) GetParam() FoodParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_SelectCookType_Param
}

func (x *SelectCookType) GetCooktype() ECookType {
	if x != nil && x.Cooktype != nil {
		return *x.Cooktype
	}
	return ECookType_ECOOKTYPE_MIN
}

type BriefItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid   *string `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	Itemid *uint32 `protobuf:"varint,2,opt,name=itemid" json:"itemid,omitempty"`
	Num    *uint32 `protobuf:"varint,3,opt,name=num" json:"num,omitempty"`
}

func (x *BriefItemInfo) Reset() {
	*x = BriefItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BriefItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BriefItemInfo) ProtoMessage() {}

func (x *BriefItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BriefItemInfo.ProtoReflect.Descriptor instead.
func (*BriefItemInfo) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{4}
}

func (x *BriefItemInfo) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *BriefItemInfo) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *BriefItemInfo) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type StartCook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd           *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=29" json:"cmd,omitempty"`
	Param         *FoodParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.FoodParam,def=4" json:"param,omitempty"`
	Cooktype      *ECookType       `protobuf:"varint,3,opt,name=cooktype,enum=Cmd.ECookType" json:"cooktype,omitempty"`
	Material      []*BriefItemInfo `protobuf:"bytes,4,rep,name=material" json:"material,omitempty"`
	Recipe        *uint32          `protobuf:"varint,5,opt,name=recipe" json:"recipe,omitempty"`
	Skipanimation *bool            `protobuf:"varint,6,opt,name=skipanimation,def=0" json:"skipanimation,omitempty"`
	Recipes       []uint32         `protobuf:"varint,7,rep,name=recipes" json:"recipes,omitempty"`
	Automatch     *bool            `protobuf:"varint,8,opt,name=automatch,def=0" json:"automatch,omitempty"`
}

// Default values for StartCook fields.
const (
	Default_StartCook_Cmd           = Command_SCENE_USER_FOOD_PROTOCMD
	Default_StartCook_Param         = FoodParam_FOODPARAM_START_COOK
	Default_StartCook_Skipanimation = bool(false)
	Default_StartCook_Automatch     = bool(false)
)

func (x *StartCook) Reset() {
	*x = StartCook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartCook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartCook) ProtoMessage() {}

func (x *StartCook) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartCook.ProtoReflect.Descriptor instead.
func (*StartCook) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{5}
}

func (x *StartCook) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StartCook_Cmd
}

func (x *StartCook) GetParam() FoodParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StartCook_Param
}

func (x *StartCook) GetCooktype() ECookType {
	if x != nil && x.Cooktype != nil {
		return *x.Cooktype
	}
	return ECookType_ECOOKTYPE_MIN
}

func (x *StartCook) GetMaterial() []*BriefItemInfo {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *StartCook) GetRecipe() uint32 {
	if x != nil && x.Recipe != nil {
		return *x.Recipe
	}
	return 0
}

func (x *StartCook) GetSkipanimation() bool {
	if x != nil && x.Skipanimation != nil {
		return *x.Skipanimation
	}
	return Default_StartCook_Skipanimation
}

func (x *StartCook) GetRecipes() []uint32 {
	if x != nil {
		return x.Recipes
	}
	return nil
}

func (x *StartCook) GetAutomatch() bool {
	if x != nil && x.Automatch != nil {
		return *x.Automatch
	}
	return Default_StartCook_Automatch
}

type PutFood struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=29" json:"cmd,omitempty"`
	Param    *FoodParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FoodParam,def=5" json:"param,omitempty"`
	Foodguid *string    `protobuf:"bytes,3,opt,name=foodguid" json:"foodguid,omitempty"`
	Power    *EEatPower `protobuf:"varint,4,opt,name=power,enum=Cmd.EEatPower" json:"power,omitempty"`
	Foodnum  *uint32    `protobuf:"varint,5,opt,name=foodnum" json:"foodnum,omitempty"`
	Peteat   *bool      `protobuf:"varint,6,opt,name=peteat,def=0" json:"peteat,omitempty"`
}

// Default values for PutFood fields.
const (
	Default_PutFood_Cmd    = Command_SCENE_USER_FOOD_PROTOCMD
	Default_PutFood_Param  = FoodParam_FOODPARAM_PUT_FOOD
	Default_PutFood_Peteat = bool(false)
)

func (x *PutFood) Reset() {
	*x = PutFood{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutFood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutFood) ProtoMessage() {}

func (x *PutFood) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutFood.ProtoReflect.Descriptor instead.
func (*PutFood) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{6}
}

func (x *PutFood) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_PutFood_Cmd
}

func (x *PutFood) GetParam() FoodParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_PutFood_Param
}

func (x *PutFood) GetFoodguid() string {
	if x != nil && x.Foodguid != nil {
		return *x.Foodguid
	}
	return ""
}

func (x *PutFood) GetPower() EEatPower {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return EEatPower_EEATPOWR_SELF
}

func (x *PutFood) GetFoodnum() uint32 {
	if x != nil && x.Foodnum != nil {
		return *x.Foodnum
	}
	return 0
}

func (x *PutFood) GetPeteat() bool {
	if x != nil && x.Peteat != nil {
		return *x.Peteat
	}
	return Default_PutFood_Peteat
}

type EditFoodPower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=29" json:"cmd,omitempty"`
	Param   *FoodParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FoodParam,def=6" json:"param,omitempty"`
	Npcguid *uint64    `protobuf:"varint,3,opt,name=npcguid" json:"npcguid,omitempty"`
	Power   *EEatPower `protobuf:"varint,4,opt,name=power,enum=Cmd.EEatPower" json:"power,omitempty"`
}

// Default values for EditFoodPower fields.
const (
	Default_EditFoodPower_Cmd   = Command_SCENE_USER_FOOD_PROTOCMD
	Default_EditFoodPower_Param = FoodParam_FOODPARAM_EDIT_FOOD_POWER
)

func (x *EditFoodPower) Reset() {
	*x = EditFoodPower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditFoodPower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditFoodPower) ProtoMessage() {}

func (x *EditFoodPower) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditFoodPower.ProtoReflect.Descriptor instead.
func (*EditFoodPower) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{7}
}

func (x *EditFoodPower) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EditFoodPower_Cmd
}

func (x *EditFoodPower) GetParam() FoodParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EditFoodPower_Param
}

func (x *EditFoodPower) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return 0
}

func (x *EditFoodPower) GetPower() EEatPower {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return EEatPower_EEATPOWR_SELF
}

type FoodItemInfo2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid      *uint32 `protobuf:"varint,1,opt,name=itemid" json:"itemid,omitempty"`
	InvalidTime *uint32 `protobuf:"varint,2,opt,name=invalid_time,json=invalidTime" json:"invalid_time,omitempty"`
}

func (x *FoodItemInfo2) Reset() {
	*x = FoodItemInfo2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoodItemInfo2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoodItemInfo2) ProtoMessage() {}

func (x *FoodItemInfo2) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoodItemInfo2.ProtoReflect.Descriptor instead.
func (*FoodItemInfo2) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{8}
}

func (x *FoodItemInfo2) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *FoodItemInfo2) GetInvalidTime() uint32 {
	if x != nil && x.InvalidTime != nil {
		return *x.InvalidTime
	}
	return 0
}

type QueryFoodNpcInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd          *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=29" json:"cmd,omitempty"`
	Param        *FoodParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FoodParam,def=8" json:"param,omitempty"`
	Npcguid      *uint64    `protobuf:"varint,3,opt,name=npcguid" json:"npcguid,omitempty"`
	EatingPeople *uint32    `protobuf:"varint,4,opt,name=eating_people,json=eatingPeople" json:"eating_people,omitempty"`
	Itemid       *uint32    `protobuf:"varint,5,opt,name=itemid" json:"itemid,omitempty"`
	Ownerid      *uint64    `protobuf:"varint,6,opt,name=ownerid" json:"ownerid,omitempty"`
	Itemnum      *uint32    `protobuf:"varint,7,opt,name=itemnum" json:"itemnum,omitempty"`
}

// Default values for QueryFoodNpcInfo fields.
const (
	Default_QueryFoodNpcInfo_Cmd   = Command_SCENE_USER_FOOD_PROTOCMD
	Default_QueryFoodNpcInfo_Param = FoodParam_FOODPARAM_QUERY_FOOD_NPC_INFO
)

func (x *QueryFoodNpcInfo) Reset() {
	*x = QueryFoodNpcInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFoodNpcInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFoodNpcInfo) ProtoMessage() {}

func (x *QueryFoodNpcInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFoodNpcInfo.ProtoReflect.Descriptor instead.
func (*QueryFoodNpcInfo) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{9}
}

func (x *QueryFoodNpcInfo) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryFoodNpcInfo_Cmd
}

func (x *QueryFoodNpcInfo) GetParam() FoodParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryFoodNpcInfo_Param
}

func (x *QueryFoodNpcInfo) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return 0
}

func (x *QueryFoodNpcInfo) GetEatingPeople() uint32 {
	if x != nil && x.EatingPeople != nil {
		return *x.EatingPeople
	}
	return 0
}

func (x *QueryFoodNpcInfo) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *QueryFoodNpcInfo) GetOwnerid() uint64 {
	if x != nil && x.Ownerid != nil {
		return *x.Ownerid
	}
	return 0
}

func (x *QueryFoodNpcInfo) GetItemnum() uint32 {
	if x != nil && x.Itemnum != nil {
		return *x.Itemnum
	}
	return 0
}

type StartEat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=29" json:"cmd,omitempty"`
	Param   *FoodParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FoodParam,def=9" json:"param,omitempty"`
	Npcguid *uint64    `protobuf:"varint,3,opt,name=npcguid" json:"npcguid,omitempty"`
	Pet     *bool      `protobuf:"varint,4,opt,name=pet,def=0" json:"pet,omitempty"`
	Eatnum  *uint32    `protobuf:"varint,5,opt,name=eatnum" json:"eatnum,omitempty"`
}

// Default values for StartEat fields.
const (
	Default_StartEat_Cmd   = Command_SCENE_USER_FOOD_PROTOCMD
	Default_StartEat_Param = FoodParam_FOODPARAM_START_EAT
	Default_StartEat_Pet   = bool(false)
)

func (x *StartEat) Reset() {
	*x = StartEat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartEat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartEat) ProtoMessage() {}

func (x *StartEat) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartEat.ProtoReflect.Descriptor instead.
func (*StartEat) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{10}
}

func (x *StartEat) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StartEat_Cmd
}

func (x *StartEat) GetParam() FoodParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StartEat_Param
}

func (x *StartEat) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return 0
}

func (x *StartEat) GetPet() bool {
	if x != nil && x.Pet != nil {
		return *x.Pet
	}
	return Default_StartEat_Pet
}

func (x *StartEat) GetEatnum() uint32 {
	if x != nil && x.Eatnum != nil {
		return *x.Eatnum
	}
	return 0
}

type StopEat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=29" json:"cmd,omitempty"`
	Param   *FoodParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FoodParam,def=10" json:"param,omitempty"`
	Npcguid *uint64    `protobuf:"varint,3,opt,name=npcguid" json:"npcguid,omitempty"`
}

// Default values for StopEat fields.
const (
	Default_StopEat_Cmd   = Command_SCENE_USER_FOOD_PROTOCMD
	Default_StopEat_Param = FoodParam_FOODPARAM_STOP_EAT
)

func (x *StopEat) Reset() {
	*x = StopEat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopEat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopEat) ProtoMessage() {}

func (x *StopEat) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopEat.ProtoReflect.Descriptor instead.
func (*StopEat) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{11}
}

func (x *StopEat) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_StopEat_Cmd
}

func (x *StopEat) GetParam() FoodParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_StopEat_Param
}

func (x *StopEat) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return 0
}

type EatProgressNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=29" json:"cmd,omitempty"`
	Param    *FoodParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FoodParam,def=7" json:"param,omitempty"`
	Progress *uint32    `protobuf:"varint,3,opt,name=progress" json:"progress,omitempty"`
	Npcguid  *uint64    `protobuf:"varint,4,opt,name=npcguid" json:"npcguid,omitempty"`
}

// Default values for EatProgressNtf fields.
const (
	Default_EatProgressNtf_Cmd   = Command_SCENE_USER_FOOD_PROTOCMD
	Default_EatProgressNtf_Param = FoodParam_FOODPARAM_EAT_PROGRESS_NTF
)

func (x *EatProgressNtf) Reset() {
	*x = EatProgressNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EatProgressNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EatProgressNtf) ProtoMessage() {}

func (x *EatProgressNtf) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EatProgressNtf.ProtoReflect.Descriptor instead.
func (*EatProgressNtf) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{12}
}

func (x *EatProgressNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_EatProgressNtf_Cmd
}

func (x *EatProgressNtf) GetParam() FoodParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_EatProgressNtf_Param
}

func (x *EatProgressNtf) GetProgress() uint32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *EatProgressNtf) GetNpcguid() uint64 {
	if x != nil && x.Npcguid != nil {
		return *x.Npcguid
	}
	return 0
}

type FoodInfoNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd             *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=29" json:"cmd,omitempty"`
	Param           *FoodParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.FoodParam,def=11" json:"param,omitempty"`
	Recipeids       []uint32         `protobuf:"varint,3,rep,name=recipeids" json:"recipeids,omitempty"`
	LastCookedFoods []uint32         `protobuf:"varint,4,rep,name=last_cooked_foods,json=lastCookedFoods" json:"last_cooked_foods,omitempty"`
	EatFoods        []*FoodItemInfo2 `protobuf:"bytes,5,rep,name=eat_foods,json=eatFoods" json:"eat_foods,omitempty"`
}

// Default values for FoodInfoNtf fields.
const (
	Default_FoodInfoNtf_Cmd   = Command_SCENE_USER_FOOD_PROTOCMD
	Default_FoodInfoNtf_Param = FoodParam_FOODPARAM_FOOD_INFO_NTF
)

func (x *FoodInfoNtf) Reset() {
	*x = FoodInfoNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoodInfoNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoodInfoNtf) ProtoMessage() {}

func (x *FoodInfoNtf) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoodInfoNtf.ProtoReflect.Descriptor instead.
func (*FoodInfoNtf) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{13}
}

func (x *FoodInfoNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_FoodInfoNtf_Cmd
}

func (x *FoodInfoNtf) GetParam() FoodParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_FoodInfoNtf_Param
}

func (x *FoodInfoNtf) GetRecipeids() []uint32 {
	if x != nil {
		return x.Recipeids
	}
	return nil
}

func (x *FoodInfoNtf) GetLastCookedFoods() []uint32 {
	if x != nil {
		return x.LastCookedFoods
	}
	return nil
}

func (x *FoodInfoNtf) GetEatFoods() []*FoodItemInfo2 {
	if x != nil {
		return x.EatFoods
	}
	return nil
}

type UpdateFoodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd             *Command         `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=29" json:"cmd,omitempty"`
	Param           *FoodParam       `protobuf:"varint,2,opt,name=param,enum=Cmd.FoodParam,def=16" json:"param,omitempty"`
	LastCookedFoods []uint32         `protobuf:"varint,4,rep,name=last_cooked_foods,json=lastCookedFoods" json:"last_cooked_foods,omitempty"`
	EatFoods        []*FoodItemInfo2 `protobuf:"bytes,5,rep,name=eat_foods,json=eatFoods" json:"eat_foods,omitempty"`
	DelEatFoods     []uint32         `protobuf:"varint,6,rep,name=del_eat_foods,json=delEatFoods" json:"del_eat_foods,omitempty"`
}

// Default values for UpdateFoodInfo fields.
const (
	Default_UpdateFoodInfo_Cmd   = Command_SCENE_USER_FOOD_PROTOCMD
	Default_UpdateFoodInfo_Param = FoodParam_FOODPARAM_UPDATE_FOOD_INFO_NTF
)

func (x *UpdateFoodInfo) Reset() {
	*x = UpdateFoodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFoodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFoodInfo) ProtoMessage() {}

func (x *UpdateFoodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFoodInfo.ProtoReflect.Descriptor instead.
func (*UpdateFoodInfo) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateFoodInfo) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UpdateFoodInfo_Cmd
}

func (x *UpdateFoodInfo) GetParam() FoodParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UpdateFoodInfo_Param
}

func (x *UpdateFoodInfo) GetLastCookedFoods() []uint32 {
	if x != nil {
		return x.LastCookedFoods
	}
	return nil
}

func (x *UpdateFoodInfo) GetEatFoods() []*FoodItemInfo2 {
	if x != nil {
		return x.EatFoods
	}
	return nil
}

func (x *UpdateFoodInfo) GetDelEatFoods() []uint32 {
	if x != nil {
		return x.DelEatFoods
	}
	return nil
}

type UnlockRecipeNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command   `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=29" json:"cmd,omitempty"`
	Param  *FoodParam `protobuf:"varint,2,opt,name=param,enum=Cmd.FoodParam,def=12" json:"param,omitempty"`
	Recipe *uint32    `protobuf:"varint,3,opt,name=recipe" json:"recipe,omitempty"`
}

// Default values for UnlockRecipeNtf fields.
const (
	Default_UnlockRecipeNtf_Cmd   = Command_SCENE_USER_FOOD_PROTOCMD
	Default_UnlockRecipeNtf_Param = FoodParam_FOODPARAM_UNLOCK_RECIPE_NTF
)

func (x *UnlockRecipeNtf) Reset() {
	*x = UnlockRecipeNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockRecipeNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockRecipeNtf) ProtoMessage() {}

func (x *UnlockRecipeNtf) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockRecipeNtf.ProtoReflect.Descriptor instead.
func (*UnlockRecipeNtf) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{15}
}

func (x *UnlockRecipeNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_UnlockRecipeNtf_Cmd
}

func (x *UnlockRecipeNtf) GetParam() FoodParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_UnlockRecipeNtf_Param
}

func (x *UnlockRecipeNtf) GetRecipe() uint32 {
	if x != nil && x.Recipe != nil {
		return *x.Recipe
	}
	return 0
}

type FoodSubData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *EFoodStatus `protobuf:"varint,1,opt,name=status,enum=Cmd.EFoodStatus" json:"status,omitempty"`
	Itemid *uint32      `protobuf:"varint,2,opt,name=itemid,def=0" json:"itemid,omitempty"`
	Exp    *uint32      `protobuf:"varint,3,opt,name=exp,def=0" json:"exp,omitempty"`
	Level  *uint32      `protobuf:"varint,4,opt,name=level,def=0" json:"level,omitempty"`
}

// Default values for FoodSubData fields.
const (
	Default_FoodSubData_Itemid = uint32(0)
	Default_FoodSubData_Exp    = uint32(0)
	Default_FoodSubData_Level  = uint32(0)
)

func (x *FoodSubData) Reset() {
	*x = FoodSubData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoodSubData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoodSubData) ProtoMessage() {}

func (x *FoodSubData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoodSubData.ProtoReflect.Descriptor instead.
func (*FoodSubData) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{16}
}

func (x *FoodSubData) GetStatus() EFoodStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return EFoodStatus_EFOODSTATUS_MIN
}

func (x *FoodSubData) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return Default_FoodSubData_Itemid
}

func (x *FoodSubData) GetExp() uint32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return Default_FoodSubData_Exp
}

func (x *FoodSubData) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return Default_FoodSubData_Level
}

type FoodManualData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *EFoodDataType `protobuf:"varint,1,opt,name=type,enum=Cmd.EFoodDataType,def=0" json:"type,omitempty"`
	Datas []*FoodSubData `protobuf:"bytes,2,rep,name=datas" json:"datas,omitempty"`
}

// Default values for FoodManualData fields.
const (
	Default_FoodManualData_Type = EFoodDataType_EFOODDATATYPE_MIN
)

func (x *FoodManualData) Reset() {
	*x = FoodManualData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoodManualData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoodManualData) ProtoMessage() {}

func (x *FoodManualData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoodManualData.ProtoReflect.Descriptor instead.
func (*FoodManualData) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{17}
}

func (x *FoodManualData) GetType() EFoodDataType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_FoodManualData_Type
}

func (x *FoodManualData) GetDatas() []*FoodSubData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type QueryFoodManualData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=29" json:"cmd,omitempty"`
	Param     *FoodParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.FoodParam,def=13" json:"param,omitempty"`
	Cookerexp *uint32           `protobuf:"varint,3,opt,name=cookerexp" json:"cookerexp,omitempty"`
	Cookerlv  *uint32           `protobuf:"varint,4,opt,name=cookerlv" json:"cookerlv,omitempty"`
	Tasterexp *uint32           `protobuf:"varint,5,opt,name=tasterexp" json:"tasterexp,omitempty"`
	Tasterlv  *uint32           `protobuf:"varint,6,opt,name=tasterlv" json:"tasterlv,omitempty"`
	Items     []*FoodManualData `protobuf:"bytes,7,rep,name=items" json:"items,omitempty"`
}

// Default values for QueryFoodManualData fields.
const (
	Default_QueryFoodManualData_Cmd   = Command_SCENE_USER_FOOD_PROTOCMD
	Default_QueryFoodManualData_Param = FoodParam_FOODPARAM_QUERY_FOOD_DATA
)

func (x *QueryFoodManualData) Reset() {
	*x = QueryFoodManualData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFoodManualData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFoodManualData) ProtoMessage() {}

func (x *QueryFoodManualData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFoodManualData.ProtoReflect.Descriptor instead.
func (*QueryFoodManualData) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{18}
}

func (x *QueryFoodManualData) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_QueryFoodManualData_Cmd
}

func (x *QueryFoodManualData) GetParam() FoodParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_QueryFoodManualData_Param
}

func (x *QueryFoodManualData) GetCookerexp() uint32 {
	if x != nil && x.Cookerexp != nil {
		return *x.Cookerexp
	}
	return 0
}

func (x *QueryFoodManualData) GetCookerlv() uint32 {
	if x != nil && x.Cookerlv != nil {
		return *x.Cookerlv
	}
	return 0
}

func (x *QueryFoodManualData) GetTasterexp() uint32 {
	if x != nil && x.Tasterexp != nil {
		return *x.Tasterexp
	}
	return 0
}

func (x *QueryFoodManualData) GetTasterlv() uint32 {
	if x != nil && x.Tasterlv != nil {
		return *x.Tasterlv
	}
	return 0
}

func (x *QueryFoodManualData) GetItems() []*FoodManualData {
	if x != nil {
		return x.Items
	}
	return nil
}

type NewFoodDataNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd   *Command          `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=29" json:"cmd,omitempty"`
	Param *FoodParam        `protobuf:"varint,2,opt,name=param,enum=Cmd.FoodParam,def=14" json:"param,omitempty"`
	Items []*FoodManualData `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

// Default values for NewFoodDataNtf fields.
const (
	Default_NewFoodDataNtf_Cmd   = Command_SCENE_USER_FOOD_PROTOCMD
	Default_NewFoodDataNtf_Param = FoodParam_FOODPARAM_NEW_FOOD_DATA_NTF
)

func (x *NewFoodDataNtf) Reset() {
	*x = NewFoodDataNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewFoodDataNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewFoodDataNtf) ProtoMessage() {}

func (x *NewFoodDataNtf) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewFoodDataNtf.ProtoReflect.Descriptor instead.
func (*NewFoodDataNtf) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{19}
}

func (x *NewFoodDataNtf) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_NewFoodDataNtf_Cmd
}

func (x *NewFoodDataNtf) GetParam() FoodParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_NewFoodDataNtf_Param
}

func (x *NewFoodDataNtf) GetItems() []*FoodManualData {
	if x != nil {
		return x.Items
	}
	return nil
}

type ClickFoodManualData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd    *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=29" json:"cmd,omitempty"`
	Param  *FoodParam     `protobuf:"varint,2,opt,name=param,enum=Cmd.FoodParam,def=15" json:"param,omitempty"`
	Type   *EFoodDataType `protobuf:"varint,3,opt,name=type,enum=Cmd.EFoodDataType" json:"type,omitempty"`
	Itemid *uint32        `protobuf:"varint,4,opt,name=itemid" json:"itemid,omitempty"`
}

// Default values for ClickFoodManualData fields.
const (
	Default_ClickFoodManualData_Cmd   = Command_SCENE_USER_FOOD_PROTOCMD
	Default_ClickFoodManualData_Param = FoodParam_FOODPARAM_CLICK_FOOD_MANUAL_DATA
)

func (x *ClickFoodManualData) Reset() {
	*x = ClickFoodManualData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SceneFood_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickFoodManualData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickFoodManualData) ProtoMessage() {}

func (x *ClickFoodManualData) ProtoReflect() protoreflect.Message {
	mi := &file_SceneFood_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickFoodManualData.ProtoReflect.Descriptor instead.
func (*ClickFoodManualData) Descriptor() ([]byte, []int) {
	return file_SceneFood_proto_rawDescGZIP(), []int{20}
}

func (x *ClickFoodManualData) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_ClickFoodManualData_Cmd
}

func (x *ClickFoodManualData) GetParam() FoodParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_ClickFoodManualData_Param
}

func (x *ClickFoodManualData) GetType() EFoodDataType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EFoodDataType_EFOODDATATYPE_MIN
}

func (x *ClickFoodManualData) GetItemid() uint32 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

var File_SceneFood_proto protoreflect.FileDescriptor

var file_SceneFood_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x46, 0x6f, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xaf, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x43, 0x6f, 0x6f, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x6f,
	0x6f, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x45, 0x43, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f,
	0x6f, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x6f, 0x6f, 0x64, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x6f,
	0x6f, 0x64, 0x69, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4e, 0x74, 0x66, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x4f,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x18,
	0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x27, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x73,
	0x67, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64,
	0x22, 0xa0, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6f, 0x6b,
	0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x46, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x15, 0x46, 0x4f, 0x4f, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x43, 0x4f, 0x4f, 0x4b,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f,
	0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x19, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43,
	0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x6f, 0x6f, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x43, 0x6f, 0x6f, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4d, 0x0a,
	0x0d, 0x42, 0x72, 0x69, 0x65, 0x66, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0xe1, 0x02, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6f, 0x6f, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x3a, 0x14, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x2a, 0x0a, 0x08, 0x63, 0x6f, 0x6f, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x43, 0x6f, 0x6f, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x6b, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x42, 0x72, 0x69, 0x65, 0x66, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x22, 0xf8, 0x01, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6f, 0x6f, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x50, 0x55, 0x54, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x05,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d,
	0x64, 0x2e, 0x45, 0x45, 0x61, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x6f, 0x64, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x6f, 0x6f, 0x64, 0x6e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x06,
	0x70, 0x65, 0x74, 0x65, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x06, 0x70, 0x65, 0x74, 0x65, 0x61, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x0d,
	0x45, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6f, 0x6f,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x70, 0x63, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x45, 0x61, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x4a, 0x0a, 0x0d, 0x46, 0x6f, 0x6f, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6f,
	0x6f, 0x64, 0x4e, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1d, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x4e, 0x50, 0x43, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x70, 0x63, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x6f,
	0x70, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d,
	0x6e, 0x75, 0x6d, 0x22, 0xca, 0x01, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x61, 0x74,
	0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x46, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x46, 0x4f, 0x4f, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x45, 0x41, 0x54, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x03, 0x70, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x03, 0x70, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x74, 0x6e,
	0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x61, 0x74, 0x6e, 0x75, 0x6d,
	0x22, 0x97, 0x01, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d,
	0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6f, 0x6f, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x12, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x45, 0x41, 0x54, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x45,
	0x61, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x74, 0x66, 0x12, 0x38, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6f, 0x6f,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x45, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4e,
	0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x67, 0x75, 0x69, 0x64, 0x22,
	0x81, 0x02, 0x0a, 0x0b, 0x46, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x74, 0x66, 0x12,
	0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46,
	0x6f, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x17, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4e, 0x54,
	0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x69, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x46, 0x6f, 0x6f,
	0x64, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6f, 0x6f, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x52, 0x08, 0x65, 0x61, 0x74, 0x46, 0x6f,
	0x6f, 0x64, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f,
	0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a,
	0x1e, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4e, 0x54, 0x46, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x46, 0x6f, 0x6f,
	0x64, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x65, 0x61, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6f, 0x6f, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x52, 0x08, 0x65, 0x61, 0x74, 0x46, 0x6f,
	0x6f, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x5f, 0x65, 0x61, 0x74, 0x5f, 0x66,
	0x6f, 0x6f, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x45,
	0x61, 0x74, 0x46, 0x6f, 0x6f, 0x64, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x0f, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4e, 0x74, 0x66, 0x12, 0x38, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6f, 0x6f, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x50, 0x45, 0x5f, 0x4e, 0x54,
	0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x22, 0x80, 0x01, 0x0a, 0x0b, 0x46, 0x6f, 0x6f, 0x64, 0x53, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x46, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x17, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0x73, 0x0a, 0x0e, 0x46, 0x6f, 0x6f, 0x64, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x46, 0x6f, 0x6f, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x45, 0x46, 0x4f, 0x4f, 0x44, 0x44, 0x41,
	0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6f, 0x6f, 0x64, 0x53, 0x75, 0x62, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x13, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x6f, 0x6f, 0x64, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45,
	0x4e, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x46, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x46, 0x4f, 0x4f, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x65, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x6f, 0x6f, 0x6b, 0x65, 0x72, 0x65, 0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6f,
	0x6b, 0x65, 0x72, 0x6c, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6f,
	0x6b, 0x65, 0x72, 0x6c, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x78, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x78, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6c, 0x76, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6c, 0x76, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6f, 0x6f, 0x64, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x4e,
	0x65, 0x77, 0x46, 0x6f, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x74, 0x66, 0x12, 0x38, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6f, 0x6f,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1b, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x4e, 0x54, 0x46, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x46, 0x6f, 0x6f, 0x64, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x46,
	0x6f, 0x6f, 0x64, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x18, 0x53, 0x43, 0x45, 0x4e, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x46, 0x6f, 0x6f,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x20, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x43, 0x6d, 0x64, 0x2e, 0x45, 0x46, 0x6f, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x2a,
	0xf0, 0x03, 0x0a, 0x09, 0x46, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a,
	0x18, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46,
	0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45,
	0x43, 0x4f, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x50, 0x55, 0x54,
	0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x4f, 0x4f, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x45, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x4e, 0x54, 0x46, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x4e,
	0x50, 0x43, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x4f, 0x4f,
	0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x45, 0x41, 0x54,
	0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x45, 0x41, 0x54, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x4f,
	0x4f, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x4f, 0x4f, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x43, 0x49,
	0x50, 0x45, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x4f, 0x4f, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x46, 0x4f, 0x4f, 0x44,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x4f, 0x4f, 0x44, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x4e, 0x54, 0x46, 0x10, 0x0e, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x4f, 0x4f, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x46, 0x4f, 0x4f, 0x44,
	0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x0f, 0x12, 0x22,
	0x0a, 0x1e, 0x46, 0x4f, 0x4f, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4e, 0x54, 0x46,
	0x10, 0x10, 0x2a, 0x8c, 0x01, 0x0a, 0x09, 0x45, 0x43, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x43, 0x4f, 0x4f, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x43, 0x4f, 0x4f, 0x4b, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4a, 0x49, 0x41, 0x4e, 0x43, 0x48, 0x41, 0x4f, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x43, 0x4f, 0x4f, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x42, 0x45, 0x43, 0x55,
	0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x43, 0x4f, 0x4f, 0x4b, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x43, 0x4f, 0x4f, 0x4b,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x53, 0x45, 0x52, 0x54, 0x10, 0x04, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x43, 0x4f, 0x4f, 0x4b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10,
	0x05, 0x2a, 0x6d, 0x0a, 0x0a, 0x45, 0x43, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x43, 0x4f, 0x4f, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x43, 0x4f, 0x4f, 0x4b, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x43, 0x4f, 0x4f, 0x4b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f,
	0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x43, 0x4f, 0x4f, 0x4b,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03,
	0x2a, 0x43, 0x0a, 0x09, 0x45, 0x45, 0x61, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x45, 0x41, 0x54, 0x50, 0x4f, 0x57, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x45, 0x41, 0x54, 0x50, 0x4f, 0x57, 0x52, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x45, 0x41, 0x54, 0x50, 0x4f, 0x57, 0x52, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x03, 0x2a, 0x92, 0x01, 0x0a, 0x0d, 0x45, 0x46, 0x6f, 0x6f, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x46, 0x4f, 0x4f, 0x44,
	0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x46, 0x4f, 0x4f, 0x44, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x46,
	0x4f, 0x4f, 0x44, 0x44, 0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44,
	0x43, 0x4f, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x46, 0x4f, 0x4f, 0x44, 0x44,
	0x41, 0x54, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x54, 0x41, 0x53, 0x54,
	0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x46, 0x4f, 0x4f, 0x44, 0x44, 0x41, 0x54, 0x41,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x65, 0x0a, 0x0b, 0x45, 0x46,
	0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x46, 0x4f,
	0x4f, 0x44, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x46, 0x4f, 0x4f, 0x44, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x44,
	0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x46, 0x4f, 0x4f, 0x44, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x46, 0x4f, 0x4f, 0x44, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x10,
	0x03,
}

var (
	file_SceneFood_proto_rawDescOnce sync.Once
	file_SceneFood_proto_rawDescData = file_SceneFood_proto_rawDesc
)

func file_SceneFood_proto_rawDescGZIP() []byte {
	file_SceneFood_proto_rawDescOnce.Do(func() {
		file_SceneFood_proto_rawDescData = protoimpl.X.CompressGZIP(file_SceneFood_proto_rawDescData)
	})
	return file_SceneFood_proto_rawDescData
}

var file_SceneFood_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_SceneFood_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_SceneFood_proto_goTypes = []interface{}{
	(FoodParam)(0),              // 0: Cmd.FoodParam
	(ECookType)(0),              // 1: Cmd.ECookType
	(ECookState)(0),             // 2: Cmd.ECookState
	(EEatPower)(0),              // 3: Cmd.EEatPower
	(EFoodDataType)(0),          // 4: Cmd.EFoodDataType
	(EFoodStatus)(0),            // 5: Cmd.EFoodStatus
	(*CookStateMsg)(nil),        // 6: Cmd.CookStateMsg
	(*CookStateNtf)(nil),        // 7: Cmd.CookStateNtf
	(*PrepareCook)(nil),         // 8: Cmd.PrepareCook
	(*SelectCookType)(nil),      // 9: Cmd.SelectCookType
	(*BriefItemInfo)(nil),       // 10: Cmd.BriefItemInfo
	(*StartCook)(nil),           // 11: Cmd.StartCook
	(*PutFood)(nil),             // 12: Cmd.PutFood
	(*EditFoodPower)(nil),       // 13: Cmd.EditFoodPower
	(*FoodItemInfo2)(nil),       // 14: Cmd.FoodItemInfo2
	(*QueryFoodNpcInfo)(nil),    // 15: Cmd.QueryFoodNpcInfo
	(*StartEat)(nil),            // 16: Cmd.StartEat
	(*StopEat)(nil),             // 17: Cmd.StopEat
	(*EatProgressNtf)(nil),      // 18: Cmd.EatProgressNtf
	(*FoodInfoNtf)(nil),         // 19: Cmd.FoodInfoNtf
	(*UpdateFoodInfo)(nil),      // 20: Cmd.UpdateFoodInfo
	(*UnlockRecipeNtf)(nil),     // 21: Cmd.UnlockRecipeNtf
	(*FoodSubData)(nil),         // 22: Cmd.FoodSubData
	(*FoodManualData)(nil),      // 23: Cmd.FoodManualData
	(*QueryFoodManualData)(nil), // 24: Cmd.QueryFoodManualData
	(*NewFoodDataNtf)(nil),      // 25: Cmd.NewFoodDataNtf
	(*ClickFoodManualData)(nil), // 26: Cmd.ClickFoodManualData
	(Command)(0),                // 27: Cmd.Command
}
var file_SceneFood_proto_depIdxs = []int32{
	2,  // 0: Cmd.CookStateMsg.state:type_name -> Cmd.ECookState
	1,  // 1: Cmd.CookStateMsg.cooktype:type_name -> Cmd.ECookType
	27, // 2: Cmd.CookStateNtf.cmd:type_name -> Cmd.Command
	0,  // 3: Cmd.CookStateNtf.param:type_name -> Cmd.FoodParam
	6,  // 4: Cmd.CookStateNtf.state:type_name -> Cmd.CookStateMsg
	27, // 5: Cmd.PrepareCook.cmd:type_name -> Cmd.Command
	0,  // 6: Cmd.PrepareCook.param:type_name -> Cmd.FoodParam
	27, // 7: Cmd.SelectCookType.cmd:type_name -> Cmd.Command
	0,  // 8: Cmd.SelectCookType.param:type_name -> Cmd.FoodParam
	1,  // 9: Cmd.SelectCookType.cooktype:type_name -> Cmd.ECookType
	27, // 10: Cmd.StartCook.cmd:type_name -> Cmd.Command
	0,  // 11: Cmd.StartCook.param:type_name -> Cmd.FoodParam
	1,  // 12: Cmd.StartCook.cooktype:type_name -> Cmd.ECookType
	10, // 13: Cmd.StartCook.material:type_name -> Cmd.BriefItemInfo
	27, // 14: Cmd.PutFood.cmd:type_name -> Cmd.Command
	0,  // 15: Cmd.PutFood.param:type_name -> Cmd.FoodParam
	3,  // 16: Cmd.PutFood.power:type_name -> Cmd.EEatPower
	27, // 17: Cmd.EditFoodPower.cmd:type_name -> Cmd.Command
	0,  // 18: Cmd.EditFoodPower.param:type_name -> Cmd.FoodParam
	3,  // 19: Cmd.EditFoodPower.power:type_name -> Cmd.EEatPower
	27, // 20: Cmd.QueryFoodNpcInfo.cmd:type_name -> Cmd.Command
	0,  // 21: Cmd.QueryFoodNpcInfo.param:type_name -> Cmd.FoodParam
	27, // 22: Cmd.StartEat.cmd:type_name -> Cmd.Command
	0,  // 23: Cmd.StartEat.param:type_name -> Cmd.FoodParam
	27, // 24: Cmd.StopEat.cmd:type_name -> Cmd.Command
	0,  // 25: Cmd.StopEat.param:type_name -> Cmd.FoodParam
	27, // 26: Cmd.EatProgressNtf.cmd:type_name -> Cmd.Command
	0,  // 27: Cmd.EatProgressNtf.param:type_name -> Cmd.FoodParam
	27, // 28: Cmd.FoodInfoNtf.cmd:type_name -> Cmd.Command
	0,  // 29: Cmd.FoodInfoNtf.param:type_name -> Cmd.FoodParam
	14, // 30: Cmd.FoodInfoNtf.eat_foods:type_name -> Cmd.FoodItemInfo2
	27, // 31: Cmd.UpdateFoodInfo.cmd:type_name -> Cmd.Command
	0,  // 32: Cmd.UpdateFoodInfo.param:type_name -> Cmd.FoodParam
	14, // 33: Cmd.UpdateFoodInfo.eat_foods:type_name -> Cmd.FoodItemInfo2
	27, // 34: Cmd.UnlockRecipeNtf.cmd:type_name -> Cmd.Command
	0,  // 35: Cmd.UnlockRecipeNtf.param:type_name -> Cmd.FoodParam
	5,  // 36: Cmd.FoodSubData.status:type_name -> Cmd.EFoodStatus
	4,  // 37: Cmd.FoodManualData.type:type_name -> Cmd.EFoodDataType
	22, // 38: Cmd.FoodManualData.datas:type_name -> Cmd.FoodSubData
	27, // 39: Cmd.QueryFoodManualData.cmd:type_name -> Cmd.Command
	0,  // 40: Cmd.QueryFoodManualData.param:type_name -> Cmd.FoodParam
	23, // 41: Cmd.QueryFoodManualData.items:type_name -> Cmd.FoodManualData
	27, // 42: Cmd.NewFoodDataNtf.cmd:type_name -> Cmd.Command
	0,  // 43: Cmd.NewFoodDataNtf.param:type_name -> Cmd.FoodParam
	23, // 44: Cmd.NewFoodDataNtf.items:type_name -> Cmd.FoodManualData
	27, // 45: Cmd.ClickFoodManualData.cmd:type_name -> Cmd.Command
	0,  // 46: Cmd.ClickFoodManualData.param:type_name -> Cmd.FoodParam
	4,  // 47: Cmd.ClickFoodManualData.type:type_name -> Cmd.EFoodDataType
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_SceneFood_proto_init() }
func file_SceneFood_proto_init() {
	if File_SceneFood_proto != nil {
		return
	}
	file_xCmd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SceneFood_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookStateMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CookStateNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareCook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectCookType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BriefItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartCook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutFood); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditFoodPower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoodItemInfo2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFoodNpcInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartEat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopEat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EatProgressNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoodInfoNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFoodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockRecipeNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoodSubData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FoodManualData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFoodManualData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewFoodDataNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SceneFood_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClickFoodManualData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SceneFood_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SceneFood_proto_goTypes,
		DependencyIndexes: file_SceneFood_proto_depIdxs,
		EnumInfos:         file_SceneFood_proto_enumTypes,
		MessageInfos:      file_SceneFood_proto_msgTypes,
	}.Build()
	File_SceneFood_proto = out.File
	file_SceneFood_proto_rawDesc = nil
	file_SceneFood_proto_goTypes = nil
	file_SceneFood_proto_depIdxs = nil
}
