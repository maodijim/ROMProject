// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: TeamRaidCmd.proto

package Cmd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TeamRaidParam int32

const (
	TeamRaidParam_TEAMRAIDPARAM_INVITE       TeamRaidParam = 1
	TeamRaidParam_TEAMRAIDPARAM_REPLY        TeamRaidParam = 2
	TeamRaidParam_TEAMRAIDPARAM_ENTER        TeamRaidParam = 3
	TeamRaidParam_TEAMRAIDPARAM_ALTMANSHOW   TeamRaidParam = 4
	TeamRaidParam_TEAMRAIDPARAM_IMAGE_CREATE TeamRaidParam = 6
	TeamRaidParam_TEAMRAIDPARAM_INVITE_MATCH TeamRaidParam = 7
	TeamRaidParam_TEAMRAIDPARAM_REPLY_MATCH  TeamRaidParam = 8
)

// Enum value maps for TeamRaidParam.
var (
	TeamRaidParam_name = map[int32]string{
		1: "TEAMRAIDPARAM_INVITE",
		2: "TEAMRAIDPARAM_REPLY",
		3: "TEAMRAIDPARAM_ENTER",
		4: "TEAMRAIDPARAM_ALTMANSHOW",
		6: "TEAMRAIDPARAM_IMAGE_CREATE",
		7: "TEAMRAIDPARAM_INVITE_MATCH",
		8: "TEAMRAIDPARAM_REPLY_MATCH",
	}
	TeamRaidParam_value = map[string]int32{
		"TEAMRAIDPARAM_INVITE":       1,
		"TEAMRAIDPARAM_REPLY":        2,
		"TEAMRAIDPARAM_ENTER":        3,
		"TEAMRAIDPARAM_ALTMANSHOW":   4,
		"TEAMRAIDPARAM_IMAGE_CREATE": 6,
		"TEAMRAIDPARAM_INVITE_MATCH": 7,
		"TEAMRAIDPARAM_REPLY_MATCH":  8,
	}
)

func (x TeamRaidParam) Enum() *TeamRaidParam {
	p := new(TeamRaidParam)
	*p = x
	return p
}

func (x TeamRaidParam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamRaidParam) Descriptor() protoreflect.EnumDescriptor {
	return file_TeamRaidCmd_proto_enumTypes[0].Descriptor()
}

func (TeamRaidParam) Type() protoreflect.EnumType {
	return &file_TeamRaidCmd_proto_enumTypes[0]
}

func (x TeamRaidParam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TeamRaidParam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TeamRaidParam(num)
	return nil
}

// Deprecated: Use TeamRaidParam.Descriptor instead.
func (TeamRaidParam) EnumDescriptor() ([]byte, []int) {
	return file_TeamRaidCmd_proto_rawDescGZIP(), []int{0}
}

type TeamRaidInviteCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=67" json:"cmd,omitempty"`
	Param    *TeamRaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamRaidParam,def=1" json:"param,omitempty"`
	Iscancel *bool          `protobuf:"varint,3,opt,name=iscancel,def=0" json:"iscancel,omitempty"`
	RaidType *ERaidType     `protobuf:"varint,4,opt,name=raid_type,json=raidType,enum=Cmd.ERaidType,def=0" json:"raid_type,omitempty"`
}

// Default values for TeamRaidInviteCmd fields.
const (
	Default_TeamRaidInviteCmd_Cmd      = Command_TEAM_RAID_PROTOCMD
	Default_TeamRaidInviteCmd_Param    = TeamRaidParam_TEAMRAIDPARAM_INVITE
	Default_TeamRaidInviteCmd_Iscancel = bool(false)
	Default_TeamRaidInviteCmd_RaidType = ERaidType_ERAIDTYPE_MIN
)

func (x *TeamRaidInviteCmd) Reset() {
	*x = TeamRaidInviteCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamRaidCmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamRaidInviteCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamRaidInviteCmd) ProtoMessage() {}

func (x *TeamRaidInviteCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamRaidCmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamRaidInviteCmd.ProtoReflect.Descriptor instead.
func (*TeamRaidInviteCmd) Descriptor() ([]byte, []int) {
	return file_TeamRaidCmd_proto_rawDescGZIP(), []int{0}
}

func (x *TeamRaidInviteCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamRaidInviteCmd_Cmd
}

func (x *TeamRaidInviteCmd) GetParam() TeamRaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamRaidInviteCmd_Param
}

func (x *TeamRaidInviteCmd) GetIscancel() bool {
	if x != nil && x.Iscancel != nil {
		return *x.Iscancel
	}
	return Default_TeamRaidInviteCmd_Iscancel
}

func (x *TeamRaidInviteCmd) GetRaidType() ERaidType {
	if x != nil && x.RaidType != nil {
		return *x.RaidType
	}
	return Default_TeamRaidInviteCmd_RaidType
}

type TeamRaidReplyCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=67" json:"cmd,omitempty"`
	Param    *TeamRaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamRaidParam,def=2" json:"param,omitempty"`
	Reply    *bool          `protobuf:"varint,3,opt,name=reply,def=0" json:"reply,omitempty"`
	Charid   *uint64        `protobuf:"varint,4,opt,name=charid,def=0" json:"charid,omitempty"`
	RaidType *ERaidType     `protobuf:"varint,5,opt,name=raid_type,json=raidType,enum=Cmd.ERaidType,def=0" json:"raid_type,omitempty"`
}

// Default values for TeamRaidReplyCmd fields.
const (
	Default_TeamRaidReplyCmd_Cmd      = Command_TEAM_RAID_PROTOCMD
	Default_TeamRaidReplyCmd_Param    = TeamRaidParam_TEAMRAIDPARAM_REPLY
	Default_TeamRaidReplyCmd_Reply    = bool(false)
	Default_TeamRaidReplyCmd_Charid   = uint64(0)
	Default_TeamRaidReplyCmd_RaidType = ERaidType_ERAIDTYPE_MIN
)

func (x *TeamRaidReplyCmd) Reset() {
	*x = TeamRaidReplyCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamRaidCmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamRaidReplyCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamRaidReplyCmd) ProtoMessage() {}

func (x *TeamRaidReplyCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamRaidCmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamRaidReplyCmd.ProtoReflect.Descriptor instead.
func (*TeamRaidReplyCmd) Descriptor() ([]byte, []int) {
	return file_TeamRaidCmd_proto_rawDescGZIP(), []int{1}
}

func (x *TeamRaidReplyCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamRaidReplyCmd_Cmd
}

func (x *TeamRaidReplyCmd) GetParam() TeamRaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamRaidReplyCmd_Param
}

func (x *TeamRaidReplyCmd) GetReply() bool {
	if x != nil && x.Reply != nil {
		return *x.Reply
	}
	return Default_TeamRaidReplyCmd_Reply
}

func (x *TeamRaidReplyCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return Default_TeamRaidReplyCmd_Charid
}

func (x *TeamRaidReplyCmd) GetRaidType() ERaidType {
	if x != nil && x.RaidType != nil {
		return *x.RaidType
	}
	return Default_TeamRaidReplyCmd_RaidType
}

type TeamRaidEnterCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=67" json:"cmd,omitempty"`
	Param    *TeamRaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamRaidParam,def=3" json:"param,omitempty"`
	RaidType *ERaidType     `protobuf:"varint,3,opt,name=raid_type,json=raidType,enum=Cmd.ERaidType,def=0" json:"raid_type,omitempty"`
	Userid   *uint64        `protobuf:"varint,4,opt,name=userid,def=0" json:"userid,omitempty"`
	Zoneid   *uint32        `protobuf:"varint,5,opt,name=zoneid,def=0" json:"zoneid,omitempty"`
	Time     *uint32        `protobuf:"varint,6,opt,name=time,def=0" json:"time,omitempty"`
	Sign     *string        `protobuf:"bytes,7,opt,name=sign" json:"sign,omitempty"`
}

// Default values for TeamRaidEnterCmd fields.
const (
	Default_TeamRaidEnterCmd_Cmd      = Command_TEAM_RAID_PROTOCMD
	Default_TeamRaidEnterCmd_Param    = TeamRaidParam_TEAMRAIDPARAM_ENTER
	Default_TeamRaidEnterCmd_RaidType = ERaidType_ERAIDTYPE_MIN
	Default_TeamRaidEnterCmd_Userid   = uint64(0)
	Default_TeamRaidEnterCmd_Zoneid   = uint32(0)
	Default_TeamRaidEnterCmd_Time     = uint32(0)
)

func (x *TeamRaidEnterCmd) Reset() {
	*x = TeamRaidEnterCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamRaidCmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamRaidEnterCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamRaidEnterCmd) ProtoMessage() {}

func (x *TeamRaidEnterCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamRaidCmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamRaidEnterCmd.ProtoReflect.Descriptor instead.
func (*TeamRaidEnterCmd) Descriptor() ([]byte, []int) {
	return file_TeamRaidCmd_proto_rawDescGZIP(), []int{2}
}

func (x *TeamRaidEnterCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamRaidEnterCmd_Cmd
}

func (x *TeamRaidEnterCmd) GetParam() TeamRaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamRaidEnterCmd_Param
}

func (x *TeamRaidEnterCmd) GetRaidType() ERaidType {
	if x != nil && x.RaidType != nil {
		return *x.RaidType
	}
	return Default_TeamRaidEnterCmd_RaidType
}

func (x *TeamRaidEnterCmd) GetUserid() uint64 {
	if x != nil && x.Userid != nil {
		return *x.Userid
	}
	return Default_TeamRaidEnterCmd_Userid
}

func (x *TeamRaidEnterCmd) GetZoneid() uint32 {
	if x != nil && x.Zoneid != nil {
		return *x.Zoneid
	}
	return Default_TeamRaidEnterCmd_Zoneid
}

func (x *TeamRaidEnterCmd) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return Default_TeamRaidEnterCmd_Time
}

func (x *TeamRaidEnterCmd) GetSign() string {
	if x != nil && x.Sign != nil {
		return *x.Sign
	}
	return ""
}

type TeamRaidAltmanShowCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd       *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=67" json:"cmd,omitempty"`
	Param     *TeamRaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamRaidParam,def=4" json:"param,omitempty"`
	Lefttime  *uint32        `protobuf:"varint,3,opt,name=lefttime,def=0" json:"lefttime,omitempty"`
	Killcount *uint32        `protobuf:"varint,4,opt,name=killcount,def=0" json:"killcount,omitempty"`
	Selfkill  *uint32        `protobuf:"varint,5,opt,name=selfkill,def=0" json:"selfkill,omitempty"`
}

// Default values for TeamRaidAltmanShowCmd fields.
const (
	Default_TeamRaidAltmanShowCmd_Cmd       = Command_TEAM_RAID_PROTOCMD
	Default_TeamRaidAltmanShowCmd_Param     = TeamRaidParam_TEAMRAIDPARAM_ALTMANSHOW
	Default_TeamRaidAltmanShowCmd_Lefttime  = uint32(0)
	Default_TeamRaidAltmanShowCmd_Killcount = uint32(0)
	Default_TeamRaidAltmanShowCmd_Selfkill  = uint32(0)
)

func (x *TeamRaidAltmanShowCmd) Reset() {
	*x = TeamRaidAltmanShowCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamRaidCmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamRaidAltmanShowCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamRaidAltmanShowCmd) ProtoMessage() {}

func (x *TeamRaidAltmanShowCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamRaidCmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamRaidAltmanShowCmd.ProtoReflect.Descriptor instead.
func (*TeamRaidAltmanShowCmd) Descriptor() ([]byte, []int) {
	return file_TeamRaidCmd_proto_rawDescGZIP(), []int{3}
}

func (x *TeamRaidAltmanShowCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamRaidAltmanShowCmd_Cmd
}

func (x *TeamRaidAltmanShowCmd) GetParam() TeamRaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamRaidAltmanShowCmd_Param
}

func (x *TeamRaidAltmanShowCmd) GetLefttime() uint32 {
	if x != nil && x.Lefttime != nil {
		return *x.Lefttime
	}
	return Default_TeamRaidAltmanShowCmd_Lefttime
}

func (x *TeamRaidAltmanShowCmd) GetKillcount() uint32 {
	if x != nil && x.Killcount != nil {
		return *x.Killcount
	}
	return Default_TeamRaidAltmanShowCmd_Killcount
}

func (x *TeamRaidAltmanShowCmd) GetSelfkill() uint32 {
	if x != nil && x.Selfkill != nil {
		return *x.Selfkill
	}
	return Default_TeamRaidAltmanShowCmd_Selfkill
}

type TeamRaidImageCreateCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd        *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=67" json:"cmd,omitempty"`
	Param      *TeamRaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamRaidParam,def=6" json:"param,omitempty"`
	Activityid *uint32        `protobuf:"varint,3,opt,name=activityid,def=0" json:"activityid,omitempty"`
	Raidid     *uint32        `protobuf:"varint,4,opt,name=raidid,def=0" json:"raidid,omitempty"`
}

// Default values for TeamRaidImageCreateCmd fields.
const (
	Default_TeamRaidImageCreateCmd_Cmd        = Command_TEAM_RAID_PROTOCMD
	Default_TeamRaidImageCreateCmd_Param      = TeamRaidParam_TEAMRAIDPARAM_IMAGE_CREATE
	Default_TeamRaidImageCreateCmd_Activityid = uint32(0)
	Default_TeamRaidImageCreateCmd_Raidid     = uint32(0)
)

func (x *TeamRaidImageCreateCmd) Reset() {
	*x = TeamRaidImageCreateCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamRaidCmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamRaidImageCreateCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamRaidImageCreateCmd) ProtoMessage() {}

func (x *TeamRaidImageCreateCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamRaidCmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamRaidImageCreateCmd.ProtoReflect.Descriptor instead.
func (*TeamRaidImageCreateCmd) Descriptor() ([]byte, []int) {
	return file_TeamRaidCmd_proto_rawDescGZIP(), []int{4}
}

func (x *TeamRaidImageCreateCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamRaidImageCreateCmd_Cmd
}

func (x *TeamRaidImageCreateCmd) GetParam() TeamRaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamRaidImageCreateCmd_Param
}

func (x *TeamRaidImageCreateCmd) GetActivityid() uint32 {
	if x != nil && x.Activityid != nil {
		return *x.Activityid
	}
	return Default_TeamRaidImageCreateCmd_Activityid
}

func (x *TeamRaidImageCreateCmd) GetRaidid() uint32 {
	if x != nil && x.Raidid != nil {
		return *x.Raidid
	}
	return Default_TeamRaidImageCreateCmd_Raidid
}

type TeamPvpInviteMatchCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd      *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=67" json:"cmd,omitempty"`
	Param    *TeamRaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamRaidParam,def=7" json:"param,omitempty"`
	Pvptype  *EPvpType      `protobuf:"varint,3,opt,name=pvptype,enum=Cmd.EPvpType" json:"pvptype,omitempty"`
	Iscancel *bool          `protobuf:"varint,4,opt,name=iscancel" json:"iscancel,omitempty"`
	Charid   *uint64        `protobuf:"varint,5,opt,name=charid" json:"charid,omitempty"`
}

// Default values for TeamPvpInviteMatchCmd fields.
const (
	Default_TeamPvpInviteMatchCmd_Cmd   = Command_TEAM_RAID_PROTOCMD
	Default_TeamPvpInviteMatchCmd_Param = TeamRaidParam_TEAMRAIDPARAM_INVITE_MATCH
)

func (x *TeamPvpInviteMatchCmd) Reset() {
	*x = TeamPvpInviteMatchCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamRaidCmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamPvpInviteMatchCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamPvpInviteMatchCmd) ProtoMessage() {}

func (x *TeamPvpInviteMatchCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamRaidCmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamPvpInviteMatchCmd.ProtoReflect.Descriptor instead.
func (*TeamPvpInviteMatchCmd) Descriptor() ([]byte, []int) {
	return file_TeamRaidCmd_proto_rawDescGZIP(), []int{5}
}

func (x *TeamPvpInviteMatchCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamPvpInviteMatchCmd_Cmd
}

func (x *TeamPvpInviteMatchCmd) GetParam() TeamRaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamPvpInviteMatchCmd_Param
}

func (x *TeamPvpInviteMatchCmd) GetPvptype() EPvpType {
	if x != nil && x.Pvptype != nil {
		return *x.Pvptype
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *TeamPvpInviteMatchCmd) GetIscancel() bool {
	if x != nil && x.Iscancel != nil {
		return *x.Iscancel
	}
	return false
}

func (x *TeamPvpInviteMatchCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

type TeamPvpReplyMatchCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd     *Command       `protobuf:"varint,1,opt,name=cmd,enum=Cmd.Command,def=67" json:"cmd,omitempty"`
	Param   *TeamRaidParam `protobuf:"varint,2,opt,name=param,enum=Cmd.TeamRaidParam,def=8" json:"param,omitempty"`
	Pvptype *EPvpType      `protobuf:"varint,3,opt,name=pvptype,enum=Cmd.EPvpType" json:"pvptype,omitempty"`
	Charid  *uint64        `protobuf:"varint,4,opt,name=charid" json:"charid,omitempty"`
	Agree   *bool          `protobuf:"varint,5,opt,name=agree" json:"agree,omitempty"`
}

// Default values for TeamPvpReplyMatchCmd fields.
const (
	Default_TeamPvpReplyMatchCmd_Cmd   = Command_TEAM_RAID_PROTOCMD
	Default_TeamPvpReplyMatchCmd_Param = TeamRaidParam_TEAMRAIDPARAM_REPLY_MATCH
)

func (x *TeamPvpReplyMatchCmd) Reset() {
	*x = TeamPvpReplyMatchCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TeamRaidCmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamPvpReplyMatchCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamPvpReplyMatchCmd) ProtoMessage() {}

func (x *TeamPvpReplyMatchCmd) ProtoReflect() protoreflect.Message {
	mi := &file_TeamRaidCmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamPvpReplyMatchCmd.ProtoReflect.Descriptor instead.
func (*TeamPvpReplyMatchCmd) Descriptor() ([]byte, []int) {
	return file_TeamRaidCmd_proto_rawDescGZIP(), []int{6}
}

func (x *TeamPvpReplyMatchCmd) GetCmd() Command {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return Default_TeamPvpReplyMatchCmd_Cmd
}

func (x *TeamPvpReplyMatchCmd) GetParam() TeamRaidParam {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return Default_TeamPvpReplyMatchCmd_Param
}

func (x *TeamPvpReplyMatchCmd) GetPvptype() EPvpType {
	if x != nil && x.Pvptype != nil {
		return *x.Pvptype
	}
	return EPvpType_EPVPTYPE_MIN
}

func (x *TeamPvpReplyMatchCmd) GetCharid() uint64 {
	if x != nil && x.Charid != nil {
		return *x.Charid
	}
	return 0
}

func (x *TeamPvpReplyMatchCmd) GetAgree() bool {
	if x != nil && x.Agree != nil {
		return *x.Agree
	}
	return false
}

var File_TeamRaidCmd_proto protoreflect.FileDescriptor

var file_TeamRaidCmd_proto_rawDesc = []byte{
	0x0a, 0x11, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x69, 0x64, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x43, 0x6d, 0x64, 0x1a, 0x0a, 0x78, 0x43, 0x6d, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x46, 0x75, 0x42, 0x65, 0x6e, 0x43, 0x6d, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x43, 0x6d, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61,
	0x69, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x32, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x12, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52, 0x41, 0x49,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x14, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x21, 0x0a, 0x08, 0x69, 0x73, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x69, 0x73, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x61, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x61, 0x69,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0d, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x08, 0x72, 0x61, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf9,
	0x01, 0x0a, 0x10, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x43, 0x6d, 0x64, 0x12, 0x32, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x12,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x54, 0x45, 0x41, 0x4d,
	0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x3a,
	0x0a, 0x09, 0x72, 0x61, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x61, 0x69, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x0d, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x52, 0x08, 0x72, 0x61, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x10, 0x54,
	0x65, 0x61, 0x6d, 0x52, 0x61, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6d, 0x64, 0x12,
	0x32, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x12, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x69,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x3a, 0x13, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x41, 0x49, 0x44,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x61, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x52, 0x61, 0x69,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0d, 0x45, 0x52, 0x41, 0x49, 0x44, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x49, 0x4e, 0x52, 0x08, 0x72, 0x61, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x7a, 0x6f, 0x6e,
	0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x7a, 0x6f,
	0x6e, 0x65, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22,
	0xee, 0x01, 0x0a, 0x15, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x69, 0x64, 0x41, 0x6c, 0x74, 0x6d,
	0x61, 0x6e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x6d, 0x64, 0x12, 0x32, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x12, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x42, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43,
	0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x3a, 0x18, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x41, 0x4c, 0x54, 0x4d, 0x41, 0x4e, 0x53, 0x48, 0x4f, 0x57, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x1d, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x6b, 0x69, 0x6c, 0x6c,
	0x22, 0xd0, 0x01, 0x0a, 0x16, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x69, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x32, 0x0a, 0x03, 0x63,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x12, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52, 0x41, 0x49,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x3a, 0x1a, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x72, 0x61, 0x69, 0x64,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x72, 0x61, 0x69,
	0x64, 0x69, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x15, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x76, 0x70, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6d, 0x64, 0x12, 0x32, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x12, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52,
	0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x69, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x1a, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x76, 0x70, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45,
	0x50, 0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x76, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x76, 0x70,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6d, 0x64, 0x12, 0x32, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x3a, 0x12, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x52,
	0x41, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4d, 0x44, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x12, 0x43, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x69, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x3a, 0x19, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x76, 0x70, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x2e, 0x45, 0x50,
	0x76, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x76, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x67, 0x72, 0x65, 0x65, 0x2a, 0xd8, 0x01,
	0x0a, 0x0d, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x41,
	0x4d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x45, 0x41, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x4c, 0x54,
	0x4d, 0x41, 0x4e, 0x53, 0x48, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x41,
	0x4d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x41,
	0x4d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x45, 0x41,
	0x4d, 0x52, 0x41, 0x49, 0x44, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x08,
}

var (
	file_TeamRaidCmd_proto_rawDescOnce sync.Once
	file_TeamRaidCmd_proto_rawDescData = file_TeamRaidCmd_proto_rawDesc
)

func file_TeamRaidCmd_proto_rawDescGZIP() []byte {
	file_TeamRaidCmd_proto_rawDescOnce.Do(func() {
		file_TeamRaidCmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_TeamRaidCmd_proto_rawDescData)
	})
	return file_TeamRaidCmd_proto_rawDescData
}

var file_TeamRaidCmd_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_TeamRaidCmd_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_TeamRaidCmd_proto_goTypes = []interface{}{
	(TeamRaidParam)(0),             // 0: Cmd.TeamRaidParam
	(*TeamRaidInviteCmd)(nil),      // 1: Cmd.TeamRaidInviteCmd
	(*TeamRaidReplyCmd)(nil),       // 2: Cmd.TeamRaidReplyCmd
	(*TeamRaidEnterCmd)(nil),       // 3: Cmd.TeamRaidEnterCmd
	(*TeamRaidAltmanShowCmd)(nil),  // 4: Cmd.TeamRaidAltmanShowCmd
	(*TeamRaidImageCreateCmd)(nil), // 5: Cmd.TeamRaidImageCreateCmd
	(*TeamPvpInviteMatchCmd)(nil),  // 6: Cmd.TeamPvpInviteMatchCmd
	(*TeamPvpReplyMatchCmd)(nil),   // 7: Cmd.TeamPvpReplyMatchCmd
	(Command)(0),                   // 8: Cmd.Command
	(ERaidType)(0),                 // 9: Cmd.ERaidType
	(EPvpType)(0),                  // 10: Cmd.EPvpType
}
var file_TeamRaidCmd_proto_depIdxs = []int32{
	8,  // 0: Cmd.TeamRaidInviteCmd.cmd:type_name -> Cmd.Command
	0,  // 1: Cmd.TeamRaidInviteCmd.param:type_name -> Cmd.TeamRaidParam
	9,  // 2: Cmd.TeamRaidInviteCmd.raid_type:type_name -> Cmd.ERaidType
	8,  // 3: Cmd.TeamRaidReplyCmd.cmd:type_name -> Cmd.Command
	0,  // 4: Cmd.TeamRaidReplyCmd.param:type_name -> Cmd.TeamRaidParam
	9,  // 5: Cmd.TeamRaidReplyCmd.raid_type:type_name -> Cmd.ERaidType
	8,  // 6: Cmd.TeamRaidEnterCmd.cmd:type_name -> Cmd.Command
	0,  // 7: Cmd.TeamRaidEnterCmd.param:type_name -> Cmd.TeamRaidParam
	9,  // 8: Cmd.TeamRaidEnterCmd.raid_type:type_name -> Cmd.ERaidType
	8,  // 9: Cmd.TeamRaidAltmanShowCmd.cmd:type_name -> Cmd.Command
	0,  // 10: Cmd.TeamRaidAltmanShowCmd.param:type_name -> Cmd.TeamRaidParam
	8,  // 11: Cmd.TeamRaidImageCreateCmd.cmd:type_name -> Cmd.Command
	0,  // 12: Cmd.TeamRaidImageCreateCmd.param:type_name -> Cmd.TeamRaidParam
	8,  // 13: Cmd.TeamPvpInviteMatchCmd.cmd:type_name -> Cmd.Command
	0,  // 14: Cmd.TeamPvpInviteMatchCmd.param:type_name -> Cmd.TeamRaidParam
	10, // 15: Cmd.TeamPvpInviteMatchCmd.pvptype:type_name -> Cmd.EPvpType
	8,  // 16: Cmd.TeamPvpReplyMatchCmd.cmd:type_name -> Cmd.Command
	0,  // 17: Cmd.TeamPvpReplyMatchCmd.param:type_name -> Cmd.TeamRaidParam
	10, // 18: Cmd.TeamPvpReplyMatchCmd.pvptype:type_name -> Cmd.EPvpType
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_TeamRaidCmd_proto_init() }
func file_TeamRaidCmd_proto_init() {
	if File_TeamRaidCmd_proto != nil {
		return
	}
	file_xCmd_proto_init()
	file_FuBenCmd_proto_init()
	file_MatchCCmd_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TeamRaidCmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamRaidInviteCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamRaidCmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamRaidReplyCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamRaidCmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamRaidEnterCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamRaidCmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamRaidAltmanShowCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamRaidCmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamRaidImageCreateCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamRaidCmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamPvpInviteMatchCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TeamRaidCmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamPvpReplyMatchCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TeamRaidCmd_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_TeamRaidCmd_proto_goTypes,
		DependencyIndexes: file_TeamRaidCmd_proto_depIdxs,
		EnumInfos:         file_TeamRaidCmd_proto_enumTypes,
		MessageInfos:      file_TeamRaidCmd_proto_msgTypes,
	}.Build()
	File_TeamRaidCmd_proto = out.File
	file_TeamRaidCmd_proto_rawDesc = nil
	file_TeamRaidCmd_proto_goTypes = nil
	file_TeamRaidCmd_proto_depIdxs = nil
}
